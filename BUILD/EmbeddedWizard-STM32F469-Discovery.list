
EmbeddedWizard-STM32F469-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .SectionEwResource 0008a67c  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00033404  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000730c  080335c4  080335c4  000435c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0803a8d0  0803a8d0  0004a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0803a8d8  0803a8d8  0004a8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0803a8dc  0803a8dc  0004a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000d8  20000000  0803a8e0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000ea67c  2**0
                  CONTENTS
  9 .bss          000030a4  200000d8  200000d8  000500d8  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000317c  2000317c  000500d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000ea67c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007d149  00000000  00000000  000ea6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a618  00000000  00000000  001677f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003b01c  00000000  00000000  00171e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d50  00000000  00000000  001ace30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006dc8  00000000  00000000  001afb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035cb6  00000000  00000000  001b6948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049fcb  00000000  00000000  001ec5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013993c  00000000  00000000  002365c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000a0  00000000  00000000  0036ff05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b364  00000000  00000000  0036ffa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0037b30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0037b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080335ac 	.word	0x080335ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000dc 	.word	0x200000dc
 80001fc:	080335ac 	.word	0x080335ac

08000200 <EwCreateNativeSurface>:
 8000200:	fb01 f300 	mul.w	r3, r1, r0
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	009d      	lsls	r5, r3, #2
 8000208:	4604      	mov	r4, r0
 800020a:	f105 0018 	add.w	r0, r5, #24
 800020e:	460e      	mov	r6, r1
 8000210:	f015 f9c8 	bl	80155a4 <EwAllocVideo>
 8000214:	b1f0      	cbz	r0, 8000254 <EwCreateNativeSurface+0x54>
 8000216:	4a10      	ldr	r2, [pc, #64]	; (8000258 <EwCreateNativeSurface+0x58>)
 8000218:	f100 0318 	add.w	r3, r0, #24
 800021c:	6083      	str	r3, [r0, #8]
 800021e:	2300      	movs	r3, #0
 8000220:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000224:	6813      	ldr	r3, [r2, #0]
 8000226:	3318      	adds	r3, #24
 8000228:	442b      	add	r3, r5
 800022a:	e9c0 4600 	strd	r4, r6, [r0]
 800022e:	6013      	str	r3, [r2, #0]
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <EwCreateNativeSurface+0x5c>)
 8000232:	6811      	ldr	r1, [r2, #0]
 8000234:	428b      	cmp	r3, r1
 8000236:	bfc8      	it	gt
 8000238:	6013      	strgt	r3, [r2, #0]
 800023a:	4909      	ldr	r1, [pc, #36]	; (8000260 <EwCreateNativeSurface+0x60>)
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <EwCreateNativeSurface+0x64>)
 800023e:	6809      	ldr	r1, [r1, #0]
 8000240:	6812      	ldr	r2, [r2, #0]
 8000242:	440a      	add	r2, r1
 8000244:	4413      	add	r3, r2
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <EwCreateNativeSurface+0x68>)
 8000248:	6811      	ldr	r1, [r2, #0]
 800024a:	00a4      	lsls	r4, r4, #2
 800024c:	428b      	cmp	r3, r1
 800024e:	60c4      	str	r4, [r0, #12]
 8000250:	bfc8      	it	gt
 8000252:	6013      	strgt	r3, [r2, #0]
 8000254:	bd70      	pop	{r4, r5, r6, pc}
 8000256:	bf00      	nop
 8000258:	200002e8 	.word	0x200002e8
 800025c:	20000304 	.word	0x20000304
 8000260:	200002e4 	.word	0x200002e4
 8000264:	200002d8 	.word	0x200002d8
 8000268:	200002ec 	.word	0x200002ec

0800026c <EwCreateConstNativeSurface>:
 800026c:	b570      	push	{r4, r5, r6, lr}
 800026e:	4605      	mov	r5, r0
 8000270:	460e      	mov	r6, r1
 8000272:	4614      	mov	r4, r2
 8000274:	2a00      	cmp	r2, #0
 8000276:	d02c      	beq.n	80002d2 <EwCreateConstNativeSurface+0x66>
 8000278:	6810      	ldr	r0, [r2, #0]
 800027a:	b348      	cbz	r0, 80002d0 <EwCreateConstNativeSurface+0x64>
 800027c:	6853      	ldr	r3, [r2, #4]
 800027e:	2b04      	cmp	r3, #4
 8000280:	d127      	bne.n	80002d2 <EwCreateConstNativeSurface+0x66>
 8000282:	6893      	ldr	r3, [r2, #8]
 8000284:	ebb3 0f85 	cmp.w	r3, r5, lsl #2
 8000288:	db23      	blt.n	80002d2 <EwCreateConstNativeSurface+0x66>
 800028a:	2018      	movs	r0, #24
 800028c:	f015 f98a 	bl	80155a4 <EwAllocVideo>
 8000290:	b1f0      	cbz	r0, 80002d0 <EwCreateConstNativeSurface+0x64>
 8000292:	6823      	ldr	r3, [r4, #0]
 8000294:	4910      	ldr	r1, [pc, #64]	; (80002d8 <EwCreateConstNativeSurface+0x6c>)
 8000296:	6083      	str	r3, [r0, #8]
 8000298:	68a3      	ldr	r3, [r4, #8]
 800029a:	60c3      	str	r3, [r0, #12]
 800029c:	2201      	movs	r2, #1
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80002a4:	680b      	ldr	r3, [r1, #0]
 80002a6:	f103 0218 	add.w	r2, r3, #24
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <EwCreateConstNativeSurface+0x70>)
 80002ac:	e9c0 5600 	strd	r5, r6, [r0]
 80002b0:	600a      	str	r2, [r1, #0]
 80002b2:	6819      	ldr	r1, [r3, #0]
 80002b4:	428a      	cmp	r2, r1
 80002b6:	bfc8      	it	gt
 80002b8:	601a      	strgt	r2, [r3, #0]
 80002ba:	4909      	ldr	r1, [pc, #36]	; (80002e0 <EwCreateConstNativeSurface+0x74>)
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <EwCreateConstNativeSurface+0x78>)
 80002be:	6809      	ldr	r1, [r1, #0]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	440b      	add	r3, r1
 80002c4:	4413      	add	r3, r2
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <EwCreateConstNativeSurface+0x7c>)
 80002c8:	6811      	ldr	r1, [r2, #0]
 80002ca:	428b      	cmp	r3, r1
 80002cc:	dd00      	ble.n	80002d0 <EwCreateConstNativeSurface+0x64>
 80002ce:	6013      	str	r3, [r2, #0]
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
 80002d2:	2000      	movs	r0, #0
 80002d4:	e7fc      	b.n	80002d0 <EwCreateConstNativeSurface+0x64>
 80002d6:	bf00      	nop
 80002d8:	200002e8 	.word	0x200002e8
 80002dc:	20000304 	.word	0x20000304
 80002e0:	200002e4 	.word	0x200002e4
 80002e4:	200002d8 	.word	0x200002d8
 80002e8:	200002ec 	.word	0x200002ec

080002ec <EwDestroyNativeSurface>:
 80002ec:	b410      	push	{r4}
 80002ee:	b160      	cbz	r0, 800030a <EwDestroyNativeSurface+0x1e>
 80002f0:	6943      	ldr	r3, [r0, #20]
 80002f2:	b953      	cbnz	r3, 800030a <EwDestroyNativeSurface+0x1e>
 80002f4:	4908      	ldr	r1, [pc, #32]	; (8000318 <EwDestroyNativeSurface+0x2c>)
 80002f6:	6903      	ldr	r3, [r0, #16]
 80002f8:	680a      	ldr	r2, [r1, #0]
 80002fa:	b953      	cbnz	r3, 8000312 <EwDestroyNativeSurface+0x26>
 80002fc:	e9d0 3400 	ldrd	r3, r4, [r0]
 8000300:	4363      	muls	r3, r4
 8000302:	3306      	adds	r3, #6
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	600b      	str	r3, [r1, #0]
 800030a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800030e:	f015 ba3d 	b.w	801578c <EwFreeVideo>
 8000312:	2318      	movs	r3, #24
 8000314:	e7f7      	b.n	8000306 <EwDestroyNativeSurface+0x1a>
 8000316:	bf00      	nop
 8000318:	200002e8 	.word	0x200002e8

0800031c <EwGetNativeSurfaceMemory>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
 8000322:	b10c      	cbz	r4, 8000328 <EwGetNativeSurfaceMemory+0xc>
 8000324:	6904      	ldr	r4, [r0, #16]
 8000326:	b984      	cbnz	r4, 800034a <EwGetNativeSurfaceMemory+0x2e>
 8000328:	68c5      	ldr	r5, [r0, #12]
 800032a:	008c      	lsls	r4, r1, #2
 800032c:	fb02 4105 	mla	r1, r2, r5, r4
 8000330:	6882      	ldr	r2, [r0, #8]
 8000332:	609d      	str	r5, [r3, #8]
 8000334:	4411      	add	r1, r2
 8000336:	2204      	movs	r2, #4
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	2200      	movs	r2, #0
 800033c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8000340:	6019      	str	r1, [r3, #0]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	619a      	str	r2, [r3, #24]
 8000346:	2001      	movs	r0, #1
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	2000      	movs	r0, #0
 800034c:	e7fc      	b.n	8000348 <EwGetNativeSurfaceMemory+0x2c>

0800034e <EwGetNativeSurfaceMemSize>:
 800034e:	4348      	muls	r0, r1
 8000350:	3006      	adds	r0, #6
 8000352:	0080      	lsls	r0, r0, #2
 8000354:	4770      	bx	lr

08000356 <EwCreateScreenSurface>:
 8000356:	fb01 f300 	mul.w	r3, r1, r0
 800035a:	b570      	push	{r4, r5, r6, lr}
 800035c:	005d      	lsls	r5, r3, #1
 800035e:	4604      	mov	r4, r0
 8000360:	f105 0014 	add.w	r0, r5, #20
 8000364:	460e      	mov	r6, r1
 8000366:	f015 f91d 	bl	80155a4 <EwAllocVideo>
 800036a:	b1e8      	cbz	r0, 80003a8 <EwCreateScreenSurface+0x52>
 800036c:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <EwCreateScreenSurface+0x56>)
 800036e:	f100 0314 	add.w	r3, r0, #20
 8000372:	6083      	str	r3, [r0, #8]
 8000374:	2300      	movs	r3, #0
 8000376:	6103      	str	r3, [r0, #16]
 8000378:	6813      	ldr	r3, [r2, #0]
 800037a:	3314      	adds	r3, #20
 800037c:	442b      	add	r3, r5
 800037e:	e9c0 4600 	strd	r4, r6, [r0]
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <EwCreateScreenSurface+0x5a>)
 8000386:	6811      	ldr	r1, [r2, #0]
 8000388:	428b      	cmp	r3, r1
 800038a:	bfc8      	it	gt
 800038c:	6013      	strgt	r3, [r2, #0]
 800038e:	4909      	ldr	r1, [pc, #36]	; (80003b4 <EwCreateScreenSurface+0x5e>)
 8000390:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <EwCreateScreenSurface+0x62>)
 8000392:	6809      	ldr	r1, [r1, #0]
 8000394:	6812      	ldr	r2, [r2, #0]
 8000396:	440a      	add	r2, r1
 8000398:	4413      	add	r3, r2
 800039a:	4a08      	ldr	r2, [pc, #32]	; (80003bc <EwCreateScreenSurface+0x66>)
 800039c:	6811      	ldr	r1, [r2, #0]
 800039e:	0064      	lsls	r4, r4, #1
 80003a0:	428b      	cmp	r3, r1
 80003a2:	60c4      	str	r4, [r0, #12]
 80003a4:	bfc8      	it	gt
 80003a6:	6013      	strgt	r3, [r2, #0]
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	bf00      	nop
 80003ac:	200002e8 	.word	0x200002e8
 80003b0:	20000304 	.word	0x20000304
 80003b4:	200002e4 	.word	0x200002e4
 80003b8:	200002d8 	.word	0x200002d8
 80003bc:	200002ec 	.word	0x200002ec

080003c0 <EwDestroyScreenSurface>:
 80003c0:	b150      	cbz	r0, 80003d8 <EwDestroyScreenSurface+0x18>
 80003c2:	6903      	ldr	r3, [r0, #16]
 80003c4:	b943      	cbnz	r3, 80003d8 <EwDestroyScreenSurface+0x18>
 80003c6:	e9d0 3200 	ldrd	r3, r2, [r0]
 80003ca:	4904      	ldr	r1, [pc, #16]	; (80003dc <EwDestroyScreenSurface+0x1c>)
 80003cc:	4353      	muls	r3, r2
 80003ce:	680a      	ldr	r2, [r1, #0]
 80003d0:	330a      	adds	r3, #10
 80003d2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80003d6:	600b      	str	r3, [r1, #0]
 80003d8:	f015 b9d8 	b.w	801578c <EwFreeVideo>
 80003dc:	200002e8 	.word	0x200002e8

080003e0 <EwGetScreenSurfaceMemory>:
 80003e0:	b510      	push	{r4, lr}
 80003e2:	68c4      	ldr	r4, [r0, #12]
 80003e4:	9b03      	ldr	r3, [sp, #12]
 80003e6:	0049      	lsls	r1, r1, #1
 80003e8:	fb02 1104 	mla	r1, r2, r4, r1
 80003ec:	6882      	ldr	r2, [r0, #8]
 80003ee:	609c      	str	r4, [r3, #8]
 80003f0:	4411      	add	r1, r2
 80003f2:	2202      	movs	r2, #2
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80003fc:	6019      	str	r1, [r3, #0]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	619a      	str	r2, [r3, #24]
 8000402:	2001      	movs	r0, #1
 8000404:	bd10      	pop	{r4, pc}

08000406 <EwGetScreenSurfaceMemSize>:
 8000406:	4348      	muls	r0, r1
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4770      	bx	lr

0800040c <EwCreateConstRGB565Surface>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4605      	mov	r5, r0
 8000410:	460e      	mov	r6, r1
 8000412:	4614      	mov	r4, r2
 8000414:	b352      	cbz	r2, 800046c <EwCreateConstRGB565Surface+0x60>
 8000416:	6810      	ldr	r0, [r2, #0]
 8000418:	b338      	cbz	r0, 800046a <EwCreateConstRGB565Surface+0x5e>
 800041a:	6853      	ldr	r3, [r2, #4]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d125      	bne.n	800046c <EwCreateConstRGB565Surface+0x60>
 8000420:	6893      	ldr	r3, [r2, #8]
 8000422:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 8000426:	db21      	blt.n	800046c <EwCreateConstRGB565Surface+0x60>
 8000428:	2014      	movs	r0, #20
 800042a:	f015 f8bb 	bl	80155a4 <EwAllocVideo>
 800042e:	b1e0      	cbz	r0, 800046a <EwCreateConstRGB565Surface+0x5e>
 8000430:	6823      	ldr	r3, [r4, #0]
 8000432:	490f      	ldr	r1, [pc, #60]	; (8000470 <EwCreateConstRGB565Surface+0x64>)
 8000434:	6083      	str	r3, [r0, #8]
 8000436:	68a3      	ldr	r3, [r4, #8]
 8000438:	60c3      	str	r3, [r0, #12]
 800043a:	2301      	movs	r3, #1
 800043c:	6103      	str	r3, [r0, #16]
 800043e:	680b      	ldr	r3, [r1, #0]
 8000440:	f103 0214 	add.w	r2, r3, #20
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <EwCreateConstRGB565Surface+0x68>)
 8000446:	e9c0 5600 	strd	r5, r6, [r0]
 800044a:	600a      	str	r2, [r1, #0]
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	428a      	cmp	r2, r1
 8000450:	bfc8      	it	gt
 8000452:	601a      	strgt	r2, [r3, #0]
 8000454:	4908      	ldr	r1, [pc, #32]	; (8000478 <EwCreateConstRGB565Surface+0x6c>)
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <EwCreateConstRGB565Surface+0x70>)
 8000458:	6809      	ldr	r1, [r1, #0]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	440b      	add	r3, r1
 800045e:	4413      	add	r3, r2
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <EwCreateConstRGB565Surface+0x74>)
 8000462:	6811      	ldr	r1, [r2, #0]
 8000464:	428b      	cmp	r3, r1
 8000466:	dd00      	ble.n	800046a <EwCreateConstRGB565Surface+0x5e>
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	2000      	movs	r0, #0
 800046e:	e7fc      	b.n	800046a <EwCreateConstRGB565Surface+0x5e>
 8000470:	200002e8 	.word	0x200002e8
 8000474:	20000304 	.word	0x20000304
 8000478:	200002e4 	.word	0x200002e4
 800047c:	200002d8 	.word	0x200002d8
 8000480:	200002ec 	.word	0x200002ec

08000484 <EwCreateRGB565Surface>:
 8000484:	fb01 f300 	mul.w	r3, r1, r0
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	005d      	lsls	r5, r3, #1
 800048c:	4604      	mov	r4, r0
 800048e:	f105 0014 	add.w	r0, r5, #20
 8000492:	460e      	mov	r6, r1
 8000494:	f015 f886 	bl	80155a4 <EwAllocVideo>
 8000498:	b1e8      	cbz	r0, 80004d6 <EwCreateRGB565Surface+0x52>
 800049a:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <EwCreateRGB565Surface+0x54>)
 800049c:	f100 0314 	add.w	r3, r0, #20
 80004a0:	6083      	str	r3, [r0, #8]
 80004a2:	2300      	movs	r3, #0
 80004a4:	6103      	str	r3, [r0, #16]
 80004a6:	6813      	ldr	r3, [r2, #0]
 80004a8:	3314      	adds	r3, #20
 80004aa:	442b      	add	r3, r5
 80004ac:	e9c0 4600 	strd	r4, r6, [r0]
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <EwCreateRGB565Surface+0x58>)
 80004b4:	6811      	ldr	r1, [r2, #0]
 80004b6:	428b      	cmp	r3, r1
 80004b8:	bfc8      	it	gt
 80004ba:	6013      	strgt	r3, [r2, #0]
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <EwCreateRGB565Surface+0x5c>)
 80004be:	4a09      	ldr	r2, [pc, #36]	; (80004e4 <EwCreateRGB565Surface+0x60>)
 80004c0:	6809      	ldr	r1, [r1, #0]
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	440a      	add	r2, r1
 80004c6:	4413      	add	r3, r2
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <EwCreateRGB565Surface+0x64>)
 80004ca:	6811      	ldr	r1, [r2, #0]
 80004cc:	0064      	lsls	r4, r4, #1
 80004ce:	428b      	cmp	r3, r1
 80004d0:	60c4      	str	r4, [r0, #12]
 80004d2:	bfc8      	it	gt
 80004d4:	6013      	strgt	r3, [r2, #0]
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	200002e8 	.word	0x200002e8
 80004dc:	20000304 	.word	0x20000304
 80004e0:	200002e4 	.word	0x200002e4
 80004e4:	200002d8 	.word	0x200002d8
 80004e8:	200002ec 	.word	0x200002ec

080004ec <EwDestroyRGB565Surface>:
 80004ec:	b410      	push	{r4}
 80004ee:	b150      	cbz	r0, 8000506 <EwDestroyRGB565Surface+0x1a>
 80004f0:	4908      	ldr	r1, [pc, #32]	; (8000514 <EwDestroyRGB565Surface+0x28>)
 80004f2:	6903      	ldr	r3, [r0, #16]
 80004f4:	680a      	ldr	r2, [r1, #0]
 80004f6:	b953      	cbnz	r3, 800050e <EwDestroyRGB565Surface+0x22>
 80004f8:	e9d0 3400 	ldrd	r3, r4, [r0]
 80004fc:	4363      	muls	r3, r4
 80004fe:	330a      	adds	r3, #10
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	600b      	str	r3, [r1, #0]
 8000506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800050a:	f015 b93f 	b.w	801578c <EwFreeVideo>
 800050e:	2314      	movs	r3, #20
 8000510:	e7f7      	b.n	8000502 <EwDestroyRGB565Surface+0x16>
 8000512:	bf00      	nop
 8000514:	200002e8 	.word	0x200002e8

08000518 <EwGetRGB565SurfaceMemory>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
 800051e:	b10c      	cbz	r4, 8000524 <EwGetRGB565SurfaceMemory+0xc>
 8000520:	6904      	ldr	r4, [r0, #16]
 8000522:	b984      	cbnz	r4, 8000546 <EwGetRGB565SurfaceMemory+0x2e>
 8000524:	68c5      	ldr	r5, [r0, #12]
 8000526:	004c      	lsls	r4, r1, #1
 8000528:	fb02 4105 	mla	r1, r2, r5, r4
 800052c:	6882      	ldr	r2, [r0, #8]
 800052e:	609d      	str	r5, [r3, #8]
 8000530:	4411      	add	r1, r2
 8000532:	2202      	movs	r2, #2
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	e9c3 2204 	strd	r2, r2, [r3, #16]
 800053c:	6019      	str	r1, [r3, #0]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	619a      	str	r2, [r3, #24]
 8000542:	2001      	movs	r0, #1
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	2000      	movs	r0, #0
 8000548:	e7fc      	b.n	8000544 <EwGetRGB565SurfaceMemory+0x2c>

0800054a <EwGetRGB565SurfaceMemSize>:
 800054a:	4348      	muls	r0, r1
 800054c:	300a      	adds	r0, #10
 800054e:	0040      	lsls	r0, r0, #1
 8000550:	4770      	bx	lr

08000552 <EwPackColor>:
 8000552:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000556:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800055a:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
 800055e:	4770      	bx	lr

08000560 <EwPackClutEntry>:
 8000560:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8000564:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000568:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 800056c:	4770      	bx	lr

0800056e <EwSetPixelSolid>:
 800056e:	b510      	push	{r4, lr}
 8000570:	6884      	ldr	r4, [r0, #8]
 8000572:	6800      	ldr	r0, [r0, #0]
 8000574:	4362      	muls	r2, r4
 8000576:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800057a:	691c      	ldr	r4, [r3, #16]
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	0b24      	lsrs	r4, r4, #12
 8000580:	0900      	lsrs	r0, r0, #4
 8000582:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8000586:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800058a:	4320      	orrs	r0, r4
 800058c:	6a1c      	ldr	r4, [r3, #32]
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	f3c4 5407 	ubfx	r4, r4, #20, #8
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	4320      	orrs	r0, r4
 8000598:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800059c:	4303      	orrs	r3, r0
 800059e:	508b      	str	r3, [r1, r2]
 80005a0:	bd10      	pop	{r4, pc}

080005a2 <EwSetPixelSolidBlend>:
 80005a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a4:	681c      	ldr	r4, [r3, #0]
 80005a6:	691d      	ldr	r5, [r3, #16]
 80005a8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80005aa:	0924      	lsrs	r4, r4, #4
 80005ac:	0b2d      	lsrs	r5, r5, #12
 80005ae:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80005b2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80005b6:	432c      	orrs	r4, r5
 80005b8:	6a1d      	ldr	r5, [r3, #32]
 80005ba:	0136      	lsls	r6, r6, #4
 80005bc:	f3c5 5507 	ubfx	r5, r5, #20, #8
 80005c0:	432c      	orrs	r4, r5
 80005c2:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 80005c6:	ea44 0306 	orr.w	r3, r4, r6
 80005ca:	6884      	ldr	r4, [r0, #8]
 80005cc:	6800      	ldr	r0, [r0, #0]
 80005ce:	0089      	lsls	r1, r1, #2
 80005d0:	f1b6 4f7f 	cmp.w	r6, #4278190080	; 0xff000000
 80005d4:	fb04 1202 	mla	r2, r4, r2, r1
 80005d8:	ea4f 6516 	mov.w	r5, r6, lsr #24
 80005dc:	d003      	beq.n	80005e6 <EwSetPixelSolidBlend+0x44>
 80005de:	5886      	ldr	r6, [r0, r2]
 80005e0:	0e34      	lsrs	r4, r6, #24
 80005e2:	d102      	bne.n	80005ea <EwSetPixelSolidBlend+0x48>
 80005e4:	b105      	cbz	r5, 80005e8 <EwSetPixelSolidBlend+0x46>
 80005e6:	5083      	str	r3, [r0, r2]
 80005e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ea:	2d00      	cmp	r5, #0
 80005ec:	d0fc      	beq.n	80005e8 <EwSetPixelSolidBlend+0x46>
 80005ee:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
 80005f2:	fb04 1101 	mla	r1, r4, r1, r1
 80005f6:	f003 14ff 	and.w	r4, r3, #16711935	; 0xff00ff
 80005fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80005fe:	0a09      	lsrs	r1, r1, #8
 8000600:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8000604:	fb05 4404 	mla	r4, r5, r4, r4
 8000608:	fb05 3303 	mla	r3, r5, r3, r3
 800060c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8000610:	fb01 4407 	mla	r4, r1, r7, r4
 8000614:	fb01 3306 	mla	r3, r1, r6, r3
 8000618:	4429      	add	r1, r5
 800061a:	29fe      	cmp	r1, #254	; 0xfe
 800061c:	ea4f 2414 	mov.w	r4, r4, lsr #8
 8000620:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000624:	d80a      	bhi.n	800063c <EwSetPixelSolidBlend+0x9a>
 8000626:	4d0a      	ldr	r5, [pc, #40]	; (8000650 <EwSetPixelSolidBlend+0xae>)
 8000628:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
 800062c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8000630:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000634:	436c      	muls	r4, r5
 8000636:	436b      	muls	r3, r5
 8000638:	0a24      	lsrs	r4, r4, #8
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	ea44 6101 	orr.w	r1, r4, r1, lsl #24
 8000646:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800064a:	430b      	orrs	r3, r1
 800064c:	e7cb      	b.n	80005e6 <EwSetPixelSolidBlend+0x44>
 800064e:	bf00      	nop
 8000650:	080335d8 	.word	0x080335d8

08000654 <EwFillRowSolid>:
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	b510      	push	{r4, lr}
 8000658:	6804      	ldr	r4, [r0, #0]
 800065a:	6910      	ldr	r0, [r2, #16]
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	0b00      	lsrs	r0, r0, #12
 8000660:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000668:	4303      	orrs	r3, r0
 800066a:	6a10      	ldr	r0, [r2, #32]
 800066c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800066e:	f3c0 5007 	ubfx	r0, r0, #20, #8
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	4303      	orrs	r3, r0
 8000676:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800067a:	4313      	orrs	r3, r2
 800067c:	2900      	cmp	r1, #0
 800067e:	dc00      	bgt.n	8000682 <EwFillRowSolid+0x2e>
 8000680:	bd10      	pop	{r4, pc}
 8000682:	f844 3b04 	str.w	r3, [r4], #4
 8000686:	3901      	subs	r1, #1
 8000688:	e7f8      	b.n	800067c <EwFillRowSolid+0x28>

0800068a <EwFillRowSolidBlend>:
 800068a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800068e:	6813      	ldr	r3, [r2, #0]
 8000690:	6805      	ldr	r5, [r0, #0]
 8000692:	6910      	ldr	r0, [r2, #16]
 8000694:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000696:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8000744 <EwFillRowSolidBlend+0xba>
 800069a:	091b      	lsrs	r3, r3, #4
 800069c:	0b00      	lsrs	r0, r0, #12
 800069e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80006a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006a6:	4303      	orrs	r3, r0
 80006a8:	6a10      	ldr	r0, [r2, #32]
 80006aa:	0136      	lsls	r6, r6, #4
 80006ac:	f3c0 5007 	ubfx	r0, r0, #20, #8
 80006b0:	4303      	orrs	r3, r0
 80006b2:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 80006b6:	ea43 0e06 	orr.w	lr, r3, r6
 80006ba:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80006be:	0e36      	lsrs	r6, r6, #24
 80006c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80006c4:	f1c6 0cff 	rsb	ip, r6, #255	; 0xff
 80006c8:	fb06 7707 	mla	r7, r6, r7, r7
 80006cc:	fb06 3303 	mla	r3, r6, r3, r3
 80006d0:	2900      	cmp	r1, #0
 80006d2:	dc01      	bgt.n	80006d8 <EwFillRowSolidBlend+0x4e>
 80006d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006d8:	2eff      	cmp	r6, #255	; 0xff
 80006da:	d003      	beq.n	80006e4 <EwFillRowSolidBlend+0x5a>
 80006dc:	682c      	ldr	r4, [r5, #0]
 80006de:	0e22      	lsrs	r2, r4, #24
 80006e0:	d105      	bne.n	80006ee <EwFillRowSolidBlend+0x64>
 80006e2:	b10e      	cbz	r6, 80006e8 <EwFillRowSolidBlend+0x5e>
 80006e4:	f8c5 e000 	str.w	lr, [r5]
 80006e8:	3504      	adds	r5, #4
 80006ea:	3901      	subs	r1, #1
 80006ec:	e7f0      	b.n	80006d0 <EwFillRowSolidBlend+0x46>
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d0fa      	beq.n	80006e8 <EwFillRowSolidBlend+0x5e>
 80006f2:	fb02 c20c 	mla	r2, r2, ip, ip
 80006f6:	0a12      	lsrs	r2, r2, #8
 80006f8:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80006fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000700:	fb02 7000 	mla	r0, r2, r0, r7
 8000704:	fb02 3404 	mla	r4, r2, r4, r3
 8000708:	4432      	add	r2, r6
 800070a:	2afe      	cmp	r2, #254	; 0xfe
 800070c:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8000710:	ea4f 2414 	mov.w	r4, r4, lsr #8
 8000714:	d80b      	bhi.n	800072e <EwFillRowSolidBlend+0xa4>
 8000716:	f838 9012 	ldrh.w	r9, [r8, r2, lsl #1]
 800071a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800071e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8000722:	fb09 f000 	mul.w	r0, r9, r0
 8000726:	fb09 f404 	mul.w	r4, r9, r4
 800072a:	0a00      	lsrs	r0, r0, #8
 800072c:	0a24      	lsrs	r4, r4, #8
 800072e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8000732:	0224      	lsls	r4, r4, #8
 8000734:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000738:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800073c:	4322      	orrs	r2, r4
 800073e:	602a      	str	r2, [r5, #0]
 8000740:	e7d2      	b.n	80006e8 <EwFillRowSolidBlend+0x5e>
 8000742:	bf00      	nop
 8000744:	080335d8 	.word	0x080335d8

08000748 <EwFillRowGradient>:
 8000748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800074c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800074e:	6806      	ldr	r6, [r0, #0]
 8000750:	6914      	ldr	r4, [r2, #16]
 8000752:	6810      	ldr	r0, [r2, #0]
 8000754:	6a15      	ldr	r5, [r2, #32]
 8000756:	6857      	ldr	r7, [r2, #4]
 8000758:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800075c:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8000760:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000762:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	2900      	cmp	r1, #0
 800076a:	dc01      	bgt.n	8000770 <EwFillRowGradient+0x28>
 800076c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000770:	0903      	lsrs	r3, r0, #4
 8000772:	ea4f 3914 	mov.w	r9, r4, lsr #12
 8000776:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 800077a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800077e:	ea43 0309 	orr.w	r3, r3, r9
 8000782:	f002 497f 	and.w	r9, r2, #4278190080	; 0xff000000
 8000786:	ea43 0309 	orr.w	r3, r3, r9
 800078a:	f3c5 5907 	ubfx	r9, r5, #20, #8
 800078e:	ea43 0309 	orr.w	r3, r3, r9
 8000792:	f846 3b04 	str.w	r3, [r6], #4
 8000796:	4438      	add	r0, r7
 8000798:	4464      	add	r4, ip
 800079a:	4475      	add	r5, lr
 800079c:	3901      	subs	r1, #1
 800079e:	4442      	add	r2, r8
 80007a0:	e7e2      	b.n	8000768 <EwFillRowGradient+0x20>

080007a2 <EwFillRowGradientBlend>:
 80007a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	6853      	ldr	r3, [r2, #4]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	6953      	ldr	r3, [r2, #20]
 80007ae:	9302      	str	r3, [sp, #8]
 80007b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80007b2:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80007b4:	9303      	str	r3, [sp, #12]
 80007b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80007b8:	6806      	ldr	r6, [r0, #0]
 80007ba:	f8d2 c000 	ldr.w	ip, [r2]
 80007be:	f8d2 e010 	ldr.w	lr, [r2, #16]
 80007c2:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80007c6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8000880 <EwFillRowGradientBlend+0xde>
 80007ca:	ea4f 1903 	mov.w	r9, r3, lsl #4
 80007ce:	013f      	lsls	r7, r7, #4
 80007d0:	2900      	cmp	r1, #0
 80007d2:	dc02      	bgt.n	80007da <EwFillRowGradientBlend+0x38>
 80007d4:	b005      	add	sp, #20
 80007d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007da:	ea4f 101c 	mov.w	r0, ip, lsr #4
 80007de:	ea4f 331e 	mov.w	r3, lr, lsr #12
 80007e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80007e6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80007ea:	4318      	orrs	r0, r3
 80007ec:	f007 437f 	and.w	r3, r7, #4278190080	; 0xff000000
 80007f0:	4318      	orrs	r0, r3
 80007f2:	f3c8 5307 	ubfx	r3, r8, #20, #8
 80007f6:	4303      	orrs	r3, r0
 80007f8:	0e00      	lsrs	r0, r0, #24
 80007fa:	28ff      	cmp	r0, #255	; 0xff
 80007fc:	d003      	beq.n	8000806 <EwFillRowGradientBlend+0x64>
 80007fe:	6835      	ldr	r5, [r6, #0]
 8000800:	0e2a      	lsrs	r2, r5, #24
 8000802:	d10b      	bne.n	800081c <EwFillRowGradientBlend+0x7a>
 8000804:	b100      	cbz	r0, 8000808 <EwFillRowGradientBlend+0x66>
 8000806:	6033      	str	r3, [r6, #0]
 8000808:	9b01      	ldr	r3, [sp, #4]
 800080a:	449c      	add	ip, r3
 800080c:	9b02      	ldr	r3, [sp, #8]
 800080e:	449e      	add	lr, r3
 8000810:	9b03      	ldr	r3, [sp, #12]
 8000812:	3604      	adds	r6, #4
 8000814:	4498      	add	r8, r3
 8000816:	3901      	subs	r1, #1
 8000818:	444f      	add	r7, r9
 800081a:	e7d9      	b.n	80007d0 <EwFillRowGradientBlend+0x2e>
 800081c:	2800      	cmp	r0, #0
 800081e:	d0f3      	beq.n	8000808 <EwFillRowGradientBlend+0x66>
 8000820:	f1c0 04ff 	rsb	r4, r0, #255	; 0xff
 8000824:	fb02 4404 	mla	r4, r2, r4, r4
 8000828:	0a24      	lsrs	r4, r4, #8
 800082a:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 800082e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000832:	fb00 2202 	mla	r2, r0, r2, r2
 8000836:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 800083a:	fb00 3303 	mla	r3, r0, r3, r3
 800083e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000842:	4420      	add	r0, r4
 8000844:	fb04 220b 	mla	r2, r4, fp, r2
 8000848:	fb04 3505 	mla	r5, r4, r5, r3
 800084c:	28fe      	cmp	r0, #254	; 0xfe
 800084e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000852:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8000856:	d809      	bhi.n	800086c <EwFillRowGradientBlend+0xca>
 8000858:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
 800085c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8000860:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8000864:	435a      	muls	r2, r3
 8000866:	435d      	muls	r5, r3
 8000868:	0a12      	lsrs	r2, r2, #8
 800086a:	0a2d      	lsrs	r5, r5, #8
 800086c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8000870:	022d      	lsls	r5, r5, #8
 8000872:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8000876:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 800087a:	4328      	orrs	r0, r5
 800087c:	6030      	str	r0, [r6, #0]
 800087e:	e7c3      	b.n	8000808 <EwFillRowGradientBlend+0x66>
 8000880:	080335d8 	.word	0x080335d8

08000884 <EwCopyNativeRow>:
 8000884:	6803      	ldr	r3, [r0, #0]
 8000886:	6809      	ldr	r1, [r1, #0]
 8000888:	3b04      	subs	r3, #4
 800088a:	2a00      	cmp	r2, #0
 800088c:	dc00      	bgt.n	8000890 <EwCopyNativeRow+0xc>
 800088e:	4770      	bx	lr
 8000890:	f851 0b04 	ldr.w	r0, [r1], #4
 8000894:	f843 0f04 	str.w	r0, [r3, #4]!
 8000898:	3a01      	subs	r2, #1
 800089a:	e7f6      	b.n	800088a <EwCopyNativeRow+0x6>

0800089c <EwCopyNativeRowBlend>:
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	6804      	ldr	r4, [r0, #0]
 80008a0:	680d      	ldr	r5, [r1, #0]
 80008a2:	4e22      	ldr	r6, [pc, #136]	; (800092c <EwCopyNativeRowBlend+0x90>)
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	dc00      	bgt.n	80008aa <EwCopyNativeRowBlend+0xe>
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	f855 1b04 	ldr.w	r1, [r5], #4
 80008ae:	0e0f      	lsrs	r7, r1, #24
 80008b0:	2fff      	cmp	r7, #255	; 0xff
 80008b2:	d005      	beq.n	80008c0 <EwCopyNativeRowBlend+0x24>
 80008b4:	f8d4 c000 	ldr.w	ip, [r4]
 80008b8:	ea5f 601c 	movs.w	r0, ip, lsr #24
 80008bc:	d104      	bne.n	80008c8 <EwCopyNativeRowBlend+0x2c>
 80008be:	b107      	cbz	r7, 80008c2 <EwCopyNativeRowBlend+0x26>
 80008c0:	6021      	str	r1, [r4, #0]
 80008c2:	3404      	adds	r4, #4
 80008c4:	3a01      	subs	r2, #1
 80008c6:	e7ed      	b.n	80008a4 <EwCopyNativeRowBlend+0x8>
 80008c8:	2f00      	cmp	r7, #0
 80008ca:	d0fa      	beq.n	80008c2 <EwCopyNativeRowBlend+0x26>
 80008cc:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 80008d0:	fb00 3303 	mla	r3, r0, r3, r3
 80008d4:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80008d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f00c 1eff 	and.w	lr, ip, #16711935	; 0xff00ff
 80008e2:	fb07 0000 	mla	r0, r7, r0, r0
 80008e6:	fb07 1101 	mla	r1, r7, r1, r1
 80008ea:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80008ee:	fb03 000e 	mla	r0, r3, lr, r0
 80008f2:	fb03 110c 	mla	r1, r3, ip, r1
 80008f6:	443b      	add	r3, r7
 80008f8:	2bfe      	cmp	r3, #254	; 0xfe
 80008fa:	ea4f 2010 	mov.w	r0, r0, lsr #8
 80008fe:	ea4f 2111 	mov.w	r1, r1, lsr #8
 8000902:	d809      	bhi.n	8000918 <EwCopyNativeRowBlend+0x7c>
 8000904:	f836 7013 	ldrh.w	r7, [r6, r3, lsl #1]
 8000908:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800090c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000910:	4378      	muls	r0, r7
 8000912:	4379      	muls	r1, r7
 8000914:	0a00      	lsrs	r0, r0, #8
 8000916:	0a09      	lsrs	r1, r1, #8
 8000918:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800091c:	0209      	lsls	r1, r1, #8
 800091e:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8000922:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8000926:	430b      	orrs	r3, r1
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	e7ca      	b.n	80008c2 <EwCopyNativeRowBlend+0x26>
 800092c:	080335d8 	.word	0x080335d8

08000930 <EwCopyNativeRowSolid>:
 8000930:	b530      	push	{r4, r5, lr}
 8000932:	680d      	ldr	r5, [r1, #0]
 8000934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000936:	6804      	ldr	r4, [r0, #0]
 8000938:	1509      	asrs	r1, r1, #20
 800093a:	3101      	adds	r1, #1
 800093c:	2a00      	cmp	r2, #0
 800093e:	dc00      	bgt.n	8000942 <EwCopyNativeRowSolid+0x12>
 8000940:	bd30      	pop	{r4, r5, pc}
 8000942:	f855 3b04 	ldr.w	r3, [r5], #4
 8000946:	0e18      	lsrs	r0, r3, #24
 8000948:	4348      	muls	r0, r1
 800094a:	0a00      	lsrs	r0, r0, #8
 800094c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000950:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000954:	f844 3b04 	str.w	r3, [r4], #4
 8000958:	3a01      	subs	r2, #1
 800095a:	e7ef      	b.n	800093c <EwCopyNativeRowSolid+0xc>

0800095c <EwCopyNativeRowSolidBlend>:
 800095c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000960:	6804      	ldr	r4, [r0, #0]
 8000962:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000964:	680d      	ldr	r5, [r1, #0]
 8000966:	4e24      	ldr	r6, [pc, #144]	; (80009f8 <EwCopyNativeRowSolidBlend+0x9c>)
 8000968:	1500      	asrs	r0, r0, #20
 800096a:	3001      	adds	r0, #1
 800096c:	2a00      	cmp	r2, #0
 800096e:	dc01      	bgt.n	8000974 <EwCopyNativeRowSolidBlend+0x18>
 8000970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000974:	f855 1b04 	ldr.w	r1, [r5], #4
 8000978:	0e0f      	lsrs	r7, r1, #24
 800097a:	d039      	beq.n	80009f0 <EwCopyNativeRowSolidBlend+0x94>
 800097c:	f8d4 e000 	ldr.w	lr, [r4]
 8000980:	fb07 0700 	mla	r7, r7, r0, r0
 8000984:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8000988:	0a3f      	lsrs	r7, r7, #8
 800098a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800098e:	ea5f 681e 	movs.w	r8, lr, lsr #24
 8000992:	fb07 f303 	mul.w	r3, r7, r3
 8000996:	fb07 f101 	mul.w	r1, r7, r1
 800099a:	d00e      	beq.n	80009ba <EwCopyNativeRowSolidBlend+0x5e>
 800099c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80009a0:	fb08 cc0c 	mla	ip, r8, ip, ip
 80009a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80009a8:	f00e 18ff 	and.w	r8, lr, #16711935	; 0xff00ff
 80009ac:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80009b0:	fb0c 3308 	mla	r3, ip, r8, r3
 80009b4:	fb0c 110e 	mla	r1, ip, lr, r1
 80009b8:	4467      	add	r7, ip
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	0a09      	lsrs	r1, r1, #8
 80009be:	b177      	cbz	r7, 80009de <EwCopyNativeRowSolidBlend+0x82>
 80009c0:	3f01      	subs	r7, #1
 80009c2:	2ffe      	cmp	r7, #254	; 0xfe
 80009c4:	d80b      	bhi.n	80009de <EwCopyNativeRowSolidBlend+0x82>
 80009c6:	f836 c017 	ldrh.w	ip, [r6, r7, lsl #1]
 80009ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80009ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80009d2:	fb0c f303 	mul.w	r3, ip, r3
 80009d6:	fb0c f101 	mul.w	r1, ip, r1
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	0a09      	lsrs	r1, r1, #8
 80009de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80009e2:	0209      	lsls	r1, r1, #8
 80009e4:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80009e8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6023      	str	r3, [r4, #0]
 80009f0:	3404      	adds	r4, #4
 80009f2:	3a01      	subs	r2, #1
 80009f4:	e7ba      	b.n	800096c <EwCopyNativeRowSolidBlend+0x10>
 80009f6:	bf00      	nop
 80009f8:	080335d8 	.word	0x080335d8

080009fc <EwCopyNativeRowGradient>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	6804      	ldr	r4, [r0, #0]
 8000a00:	680d      	ldr	r5, [r1, #0]
 8000a02:	e9d3 060c 	ldrd	r0, r6, [r3, #48]	; 0x30
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	dc00      	bgt.n	8000a0c <EwCopyNativeRowGradient+0x10>
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a10:	1507      	asrs	r7, r0, #20
 8000a12:	0e19      	lsrs	r1, r3, #24
 8000a14:	fb07 1101 	mla	r1, r7, r1, r1
 8000a18:	0a09      	lsrs	r1, r1, #8
 8000a1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000a22:	f844 3b04 	str.w	r3, [r4], #4
 8000a26:	4430      	add	r0, r6
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	e7ec      	b.n	8000a06 <EwCopyNativeRowGradient+0xa>

08000a2c <EwCopyNativeRowGradientBlend>:
 8000a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a30:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	; 0x30
 8000a34:	6800      	ldr	r0, [r0, #0]
 8000a36:	680d      	ldr	r5, [r1, #0]
 8000a38:	4f28      	ldr	r7, [pc, #160]	; (8000adc <EwCopyNativeRowGradientBlend+0xb0>)
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	dc01      	bgt.n	8000a42 <EwCopyNativeRowGradientBlend+0x16>
 8000a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a42:	f855 1b04 	ldr.w	r1, [r5], #4
 8000a46:	ea5f 6911 	movs.w	r9, r1, lsr #24
 8000a4a:	d042      	beq.n	8000ad2 <EwCopyNativeRowGradientBlend+0xa6>
 8000a4c:	ea4f 5c24 	mov.w	ip, r4, asr #20
 8000a50:	f109 0e01 	add.w	lr, r9, #1
 8000a54:	f8d0 8000 	ldr.w	r8, [r0]
 8000a58:	fb0c ee0e 	mla	lr, ip, lr, lr
 8000a5c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8000a60:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8000a64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000a68:	ea5f 6918 	movs.w	r9, r8, lsr #24
 8000a6c:	fb0c f303 	mul.w	r3, ip, r3
 8000a70:	fb0c f101 	mul.w	r1, ip, r1
 8000a74:	d00e      	beq.n	8000a94 <EwCopyNativeRowGradientBlend+0x68>
 8000a76:	f5cc 7e80 	rsb	lr, ip, #256	; 0x100
 8000a7a:	fb09 ee0e 	mla	lr, r9, lr, lr
 8000a7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000a82:	f008 19ff 	and.w	r9, r8, #16711935	; 0xff00ff
 8000a86:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8000a8a:	fb0e 3309 	mla	r3, lr, r9, r3
 8000a8e:	fb0e 1108 	mla	r1, lr, r8, r1
 8000a92:	44f4      	add	ip, lr
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	0a09      	lsrs	r1, r1, #8
 8000a98:	f1bc 0f00 	cmp.w	ip, #0
 8000a9c:	d010      	beq.n	8000ac0 <EwCopyNativeRowGradientBlend+0x94>
 8000a9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000aa2:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 8000aa6:	d80b      	bhi.n	8000ac0 <EwCopyNativeRowGradientBlend+0x94>
 8000aa8:	f837 e01c 	ldrh.w	lr, [r7, ip, lsl #1]
 8000aac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000ab0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000ab4:	fb0e f303 	mul.w	r3, lr, r3
 8000ab8:	fb0e f101 	mul.w	r1, lr, r1
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	0a09      	lsrs	r1, r1, #8
 8000ac0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000ac4:	0209      	lsls	r1, r1, #8
 8000ac6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8000aca:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6003      	str	r3, [r0, #0]
 8000ad2:	3004      	adds	r0, #4
 8000ad4:	4434      	add	r4, r6
 8000ad6:	3a01      	subs	r2, #1
 8000ad8:	e7af      	b.n	8000a3a <EwCopyNativeRowGradientBlend+0xe>
 8000ada:	bf00      	nop
 8000adc:	080335d8 	.word	0x080335d8

08000ae0 <EwCopyIndex8Row>:
 8000ae0:	680b      	ldr	r3, [r1, #0]
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	698c      	ldr	r4, [r1, #24]
 8000ae8:	441a      	add	r2, r3
 8000aea:	1ad1      	subs	r1, r2, r3
 8000aec:	2900      	cmp	r1, #0
 8000aee:	dc00      	bgt.n	8000af2 <EwCopyIndex8Row+0x12>
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000af6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8000afa:	f840 1b04 	str.w	r1, [r0], #4
 8000afe:	e7f4      	b.n	8000aea <EwCopyIndex8Row+0xa>

08000b00 <EwCopyIndex8RowBlend>:
 8000b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b04:	680c      	ldr	r4, [r1, #0]
 8000b06:	6800      	ldr	r0, [r0, #0]
 8000b08:	698d      	ldr	r5, [r1, #24]
 8000b0a:	4e25      	ldr	r6, [pc, #148]	; (8000ba0 <EwCopyIndex8RowBlend+0xa0>)
 8000b0c:	4422      	add	r2, r4
 8000b0e:	1b13      	subs	r3, r2, r4
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dc01      	bgt.n	8000b18 <EwCopyIndex8RowBlend+0x18>
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000b1c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000b20:	0e1f      	lsrs	r7, r3, #24
 8000b22:	2fff      	cmp	r7, #255	; 0xff
 8000b24:	d005      	beq.n	8000b32 <EwCopyIndex8RowBlend+0x32>
 8000b26:	f8d0 e000 	ldr.w	lr, [r0]
 8000b2a:	ea5f 611e 	movs.w	r1, lr, lsr #24
 8000b2e:	d103      	bne.n	8000b38 <EwCopyIndex8RowBlend+0x38>
 8000b30:	b107      	cbz	r7, 8000b34 <EwCopyIndex8RowBlend+0x34>
 8000b32:	6003      	str	r3, [r0, #0]
 8000b34:	3004      	adds	r0, #4
 8000b36:	e7ea      	b.n	8000b0e <EwCopyIndex8RowBlend+0xe>
 8000b38:	2f00      	cmp	r7, #0
 8000b3a:	d0fb      	beq.n	8000b34 <EwCopyIndex8RowBlend+0x34>
 8000b3c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8000b40:	fb01 cc0c 	mla	ip, r1, ip, ip
 8000b44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8000b48:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8000b4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000b50:	fb07 1101 	mla	r1, r7, r1, r1
 8000b54:	f00e 18ff 	and.w	r8, lr, #16711935	; 0xff00ff
 8000b58:	fb07 3303 	mla	r3, r7, r3, r3
 8000b5c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8000b60:	4467      	add	r7, ip
 8000b62:	fb0c 1108 	mla	r1, ip, r8, r1
 8000b66:	fb0c 330e 	mla	r3, ip, lr, r3
 8000b6a:	2ffe      	cmp	r7, #254	; 0xfe
 8000b6c:	ea4f 2111 	mov.w	r1, r1, lsr #8
 8000b70:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000b74:	d80b      	bhi.n	8000b8e <EwCopyIndex8RowBlend+0x8e>
 8000b76:	f836 e017 	ldrh.w	lr, [r6, r7, lsl #1]
 8000b7a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000b7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000b82:	fb0e f101 	mul.w	r1, lr, r1
 8000b86:	fb0e f303 	mul.w	r3, lr, r3
 8000b8a:	0a09      	lsrs	r1, r1, #8
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8000b98:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	e7c8      	b.n	8000b32 <EwCopyIndex8RowBlend+0x32>
 8000ba0:	080335d8 	.word	0x080335d8

08000ba4 <EwCopyIndex8RowSolid>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	6805      	ldr	r5, [r0, #0]
 8000ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000baa:	680c      	ldr	r4, [r1, #0]
 8000bac:	698e      	ldr	r6, [r1, #24]
 8000bae:	1500      	asrs	r0, r0, #20
 8000bb0:	3001      	adds	r0, #1
 8000bb2:	4422      	add	r2, r4
 8000bb4:	1b13      	subs	r3, r2, r4
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dc00      	bgt.n	8000bbc <EwCopyIndex8RowSolid+0x18>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000bc0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000bc4:	0e19      	lsrs	r1, r3, #24
 8000bc6:	4341      	muls	r1, r0
 8000bc8:	0a09      	lsrs	r1, r1, #8
 8000bca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000bce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000bd2:	f845 3b04 	str.w	r3, [r5], #4
 8000bd6:	e7ed      	b.n	8000bb4 <EwCopyIndex8RowSolid+0x10>

08000bd8 <EwCopyIndex8RowSolidBlend>:
 8000bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bdc:	6805      	ldr	r5, [r0, #0]
 8000bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000be0:	680c      	ldr	r4, [r1, #0]
 8000be2:	698e      	ldr	r6, [r1, #24]
 8000be4:	4f28      	ldr	r7, [pc, #160]	; (8000c88 <EwCopyIndex8RowSolidBlend+0xb0>)
 8000be6:	1500      	asrs	r0, r0, #20
 8000be8:	3001      	adds	r0, #1
 8000bea:	4422      	add	r2, r4
 8000bec:	1b13      	subs	r3, r2, r4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dc01      	bgt.n	8000bf6 <EwCopyIndex8RowSolidBlend+0x1e>
 8000bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bf6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000bfa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8000bfe:	ea5f 6c11 	movs.w	ip, r1, lsr #24
 8000c02:	d03e      	beq.n	8000c82 <EwCopyIndex8RowSolidBlend+0xaa>
 8000c04:	f8d5 8000 	ldr.w	r8, [r5]
 8000c08:	fb0c 0c00 	mla	ip, ip, r0, r0
 8000c0c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8000c10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8000c14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000c18:	ea5f 6918 	movs.w	r9, r8, lsr #24
 8000c1c:	fb0c f303 	mul.w	r3, ip, r3
 8000c20:	fb0c f101 	mul.w	r1, ip, r1
 8000c24:	d00e      	beq.n	8000c44 <EwCopyIndex8RowSolidBlend+0x6c>
 8000c26:	f5cc 7e80 	rsb	lr, ip, #256	; 0x100
 8000c2a:	fb09 ee0e 	mla	lr, r9, lr, lr
 8000c2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8000c32:	f008 19ff 	and.w	r9, r8, #16711935	; 0xff00ff
 8000c36:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8000c3a:	fb0e 3309 	mla	r3, lr, r9, r3
 8000c3e:	fb0e 1108 	mla	r1, lr, r8, r1
 8000c42:	44f4      	add	ip, lr
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	0a09      	lsrs	r1, r1, #8
 8000c48:	f1bc 0f00 	cmp.w	ip, #0
 8000c4c:	d010      	beq.n	8000c70 <EwCopyIndex8RowSolidBlend+0x98>
 8000c4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000c52:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 8000c56:	d80b      	bhi.n	8000c70 <EwCopyIndex8RowSolidBlend+0x98>
 8000c58:	f837 e01c 	ldrh.w	lr, [r7, ip, lsl #1]
 8000c5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000c60:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000c64:	fb0e f303 	mul.w	r3, lr, r3
 8000c68:	fb0e f101 	mul.w	r1, lr, r1
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	0a09      	lsrs	r1, r1, #8
 8000c70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000c74:	0209      	lsls	r1, r1, #8
 8000c76:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8000c7a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	602b      	str	r3, [r5, #0]
 8000c82:	3504      	adds	r5, #4
 8000c84:	e7b2      	b.n	8000bec <EwCopyIndex8RowSolidBlend+0x14>
 8000c86:	bf00      	nop
 8000c88:	080335d8 	.word	0x080335d8

08000c8c <EwCopyIndex8RowGradient>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	6805      	ldr	r5, [r0, #0]
 8000c90:	6808      	ldr	r0, [r1, #0]
 8000c92:	698e      	ldr	r6, [r1, #24]
 8000c94:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	; 0x30
 8000c98:	4402      	add	r2, r0
 8000c9a:	1a13      	subs	r3, r2, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dc00      	bgt.n	8000ca2 <EwCopyIndex8RowGradient+0x16>
 8000ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ca6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000caa:	ea4f 5c24 	mov.w	ip, r4, asr #20
 8000cae:	0e19      	lsrs	r1, r3, #24
 8000cb0:	fb0c 1101 	mla	r1, ip, r1, r1
 8000cb4:	0a09      	lsrs	r1, r1, #8
 8000cb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000cbe:	f845 3b04 	str.w	r3, [r5], #4
 8000cc2:	443c      	add	r4, r7
 8000cc4:	e7e9      	b.n	8000c9a <EwCopyIndex8RowGradient+0xe>

08000cc6 <EwCopyIndex8RowGradientBlend>:
 8000cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cca:	6804      	ldr	r4, [r0, #0]
 8000ccc:	6808      	ldr	r0, [r1, #0]
 8000cce:	698e      	ldr	r6, [r1, #24]
 8000cd0:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8000d80 <EwCopyIndex8RowGradientBlend+0xba>
 8000cd4:	e9d3 570c 	ldrd	r5, r7, [r3, #48]	; 0x30
 8000cd8:	4402      	add	r2, r0
 8000cda:	1a13      	subs	r3, r2, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dc01      	bgt.n	8000ce4 <EwCopyIndex8RowGradientBlend+0x1e>
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ce8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8000cec:	ea5f 6a11 	movs.w	sl, r1, lsr #24
 8000cf0:	d042      	beq.n	8000d78 <EwCopyIndex8RowGradientBlend+0xb2>
 8000cf2:	ea4f 5e25 	mov.w	lr, r5, asr #20
 8000cf6:	f10a 0801 	add.w	r8, sl, #1
 8000cfa:	f8d4 9000 	ldr.w	r9, [r4]
 8000cfe:	fb0e 8808 	mla	r8, lr, r8, r8
 8000d02:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8000d06:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8000d0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000d0e:	ea5f 6a19 	movs.w	sl, r9, lsr #24
 8000d12:	fb0e f303 	mul.w	r3, lr, r3
 8000d16:	fb0e f101 	mul.w	r1, lr, r1
 8000d1a:	d00e      	beq.n	8000d3a <EwCopyIndex8RowGradientBlend+0x74>
 8000d1c:	f5ce 7880 	rsb	r8, lr, #256	; 0x100
 8000d20:	fb0a 8808 	mla	r8, sl, r8, r8
 8000d24:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8000d28:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 8000d2c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8000d30:	fb08 330a 	mla	r3, r8, sl, r3
 8000d34:	fb08 1109 	mla	r1, r8, r9, r1
 8000d38:	44c6      	add	lr, r8
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	0a09      	lsrs	r1, r1, #8
 8000d3e:	f1be 0f00 	cmp.w	lr, #0
 8000d42:	d010      	beq.n	8000d66 <EwCopyIndex8RowGradientBlend+0xa0>
 8000d44:	f10e 3eff 	add.w	lr, lr, #4294967295
 8000d48:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
 8000d4c:	d80b      	bhi.n	8000d66 <EwCopyIndex8RowGradientBlend+0xa0>
 8000d4e:	f83c 801e 	ldrh.w	r8, [ip, lr, lsl #1]
 8000d52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000d56:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000d5a:	fb08 f303 	mul.w	r3, r8, r3
 8000d5e:	fb08 f101 	mul.w	r1, r8, r1
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	0a09      	lsrs	r1, r1, #8
 8000d66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000d6a:	0209      	lsls	r1, r1, #8
 8000d6c:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8000d70:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6023      	str	r3, [r4, #0]
 8000d78:	3404      	adds	r4, #4
 8000d7a:	443d      	add	r5, r7
 8000d7c:	e7ad      	b.n	8000cda <EwCopyIndex8RowGradientBlend+0x14>
 8000d7e:	bf00      	nop
 8000d80:	080335d8 	.word	0x080335d8

08000d84 <EwCopyAlpha8RowSolid>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	6805      	ldr	r5, [r0, #0]
 8000d88:	691c      	ldr	r4, [r3, #16]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	6809      	ldr	r1, [r1, #0]
 8000d8e:	0900      	lsrs	r0, r0, #4
 8000d90:	0b24      	lsrs	r4, r4, #12
 8000d92:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8000d96:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8000d9a:	4320      	orrs	r0, r4
 8000d9c:	6a1c      	ldr	r4, [r3, #32]
 8000d9e:	f3c4 5407 	ubfx	r4, r4, #20, #8
 8000da2:	4320      	orrs	r0, r4
 8000da4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000da6:	0124      	lsls	r4, r4, #4
 8000da8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8000dac:	ea40 0604 	orr.w	r6, r0, r4
 8000db0:	440a      	add	r2, r1
 8000db2:	0e24      	lsrs	r4, r4, #24
 8000db4:	1a53      	subs	r3, r2, r1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dc00      	bgt.n	8000dbc <EwCopyAlpha8RowSolid+0x38>
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dc0:	b90b      	cbnz	r3, 8000dc6 <EwCopyAlpha8RowSolid+0x42>
 8000dc2:	602b      	str	r3, [r5, #0]
 8000dc4:	e002      	b.n	8000dcc <EwCopyAlpha8RowSolid+0x48>
 8000dc6:	2bff      	cmp	r3, #255	; 0xff
 8000dc8:	d102      	bne.n	8000dd0 <EwCopyAlpha8RowSolid+0x4c>
 8000dca:	602e      	str	r6, [r5, #0]
 8000dcc:	3504      	adds	r5, #4
 8000dce:	e7f1      	b.n	8000db4 <EwCopyAlpha8RowSolid+0x30>
 8000dd0:	fb03 4304 	mla	r3, r3, r4, r4
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8000dda:	e7f2      	b.n	8000dc2 <EwCopyAlpha8RowSolid+0x3e>

08000ddc <EwCopyAlpha8RowSolidBlend>:
 8000ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de0:	691c      	ldr	r4, [r3, #16]
 8000de2:	6807      	ldr	r7, [r0, #0]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	f8d1 c000 	ldr.w	ip, [r1]
 8000dea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000eb4 <EwCopyAlpha8RowSolidBlend+0xd8>
 8000dee:	0900      	lsrs	r0, r0, #4
 8000df0:	0b24      	lsrs	r4, r4, #12
 8000df2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8000df6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8000dfa:	4320      	orrs	r0, r4
 8000dfc:	6a1c      	ldr	r4, [r3, #32]
 8000dfe:	f3c4 5407 	ubfx	r4, r4, #20, #8
 8000e02:	4320      	orrs	r0, r4
 8000e04:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000e06:	0124      	lsls	r4, r4, #4
 8000e08:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8000e0c:	ea40 0304 	orr.w	r3, r0, r4
 8000e10:	0e24      	lsrs	r4, r4, #24
 8000e12:	f3c0 2907 	ubfx	r9, r0, #8, #8
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	f104 0e01 	add.w	lr, r4, #1
 8000e1c:	eb0c 0802 	add.w	r8, ip, r2
 8000e20:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8000e24:	eba8 030c 	sub.w	r3, r8, ip
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dc02      	bgt.n	8000e32 <EwCopyAlpha8RowSolidBlend+0x56>
 8000e2c:	b003      	add	sp, #12
 8000e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e32:	f81c 2b01 	ldrb.w	r2, [ip], #1
 8000e36:	b12a      	cbz	r2, 8000e44 <EwCopyAlpha8RowSolidBlend+0x68>
 8000e38:	2aff      	cmp	r2, #255	; 0xff
 8000e3a:	d105      	bne.n	8000e48 <EwCopyAlpha8RowSolidBlend+0x6c>
 8000e3c:	2cff      	cmp	r4, #255	; 0xff
 8000e3e:	d103      	bne.n	8000e48 <EwCopyAlpha8RowSolidBlend+0x6c>
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	3704      	adds	r7, #4
 8000e46:	e7ed      	b.n	8000e24 <EwCopyAlpha8RowSolidBlend+0x48>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d0fb      	beq.n	8000e44 <EwCopyAlpha8RowSolidBlend+0x68>
 8000e4c:	683e      	ldr	r6, [r7, #0]
 8000e4e:	fb02 e20e 	mla	r2, r2, lr, lr
 8000e52:	0a12      	lsrs	r2, r2, #8
 8000e54:	ea5f 6b16 	movs.w	fp, r6, lsr #24
 8000e58:	fb02 f300 	mul.w	r3, r2, r0
 8000e5c:	fb02 f109 	mul.w	r1, r2, r9
 8000e60:	d00d      	beq.n	8000e7e <EwCopyAlpha8RowSolidBlend+0xa2>
 8000e62:	f5c2 7580 	rsb	r5, r2, #256	; 0x100
 8000e66:	fb0b 5505 	mla	r5, fp, r5, r5
 8000e6a:	0a2d      	lsrs	r5, r5, #8
 8000e6c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8000e70:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8000e74:	fb05 330b 	mla	r3, r5, fp, r3
 8000e78:	fb05 1106 	mla	r1, r5, r6, r1
 8000e7c:	442a      	add	r2, r5
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	0a09      	lsrs	r1, r1, #8
 8000e82:	b162      	cbz	r2, 8000e9e <EwCopyAlpha8RowSolidBlend+0xc2>
 8000e84:	3a01      	subs	r2, #1
 8000e86:	2afe      	cmp	r2, #254	; 0xfe
 8000e88:	d809      	bhi.n	8000e9e <EwCopyAlpha8RowSolidBlend+0xc2>
 8000e8a:	f83a 5012 	ldrh.w	r5, [sl, r2, lsl #1]
 8000e8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000e92:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8000e96:	436b      	muls	r3, r5
 8000e98:	4369      	muls	r1, r5
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	0a09      	lsrs	r1, r1, #8
 8000e9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000ea2:	0209      	lsls	r1, r1, #8
 8000ea4:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8000ea8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8000eac:	430a      	orrs	r2, r1
 8000eae:	603a      	str	r2, [r7, #0]
 8000eb0:	e7c8      	b.n	8000e44 <EwCopyAlpha8RowSolidBlend+0x68>
 8000eb2:	bf00      	nop
 8000eb4:	080335d8 	.word	0x080335d8

08000eb8 <EwCopyAlpha8RowGradient>:
 8000eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ebc:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8000ec0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	691d      	ldr	r5, [r3, #16]
 8000ec6:	6a1e      	ldr	r6, [r3, #32]
 8000ec8:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8000ecc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8000ed0:	6809      	ldr	r1, [r1, #0]
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	6800      	ldr	r0, [r0, #0]
 8000ed6:	013f      	lsls	r7, r7, #4
 8000ed8:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8000edc:	440a      	add	r2, r1
 8000ede:	1a53      	subs	r3, r2, r1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dc01      	bgt.n	8000ee8 <EwCopyAlpha8RowGradient+0x30>
 8000ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee8:	f811 bb01 	ldrb.w	fp, [r1], #1
 8000eec:	f1bb 0f00 	cmp.w	fp, #0
 8000ef0:	d025      	beq.n	8000f3e <EwCopyAlpha8RowGradient+0x86>
 8000ef2:	0923      	lsrs	r3, r4, #4
 8000ef4:	ea4f 3a15 	mov.w	sl, r5, lsr #12
 8000ef8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8000efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f00:	ea43 030a 	orr.w	r3, r3, sl
 8000f04:	f009 4a7f 	and.w	sl, r9, #4278190080	; 0xff000000
 8000f08:	ea43 030a 	orr.w	r3, r3, sl
 8000f0c:	f3c6 5a07 	ubfx	sl, r6, #20, #8
 8000f10:	ea43 030a 	orr.w	r3, r3, sl
 8000f14:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8000f18:	bf1f      	itttt	ne
 8000f1a:	ea4f 6a13 	movne.w	sl, r3, lsr #24
 8000f1e:	fb0b aa0a 	mlane	sl, fp, sl, sl
 8000f22:	f023 437f 	bicne.w	r3, r3, #4278190080	; 0xff000000
 8000f26:	ea4f 2a1a 	movne.w	sl, sl, lsr #8
 8000f2a:	bf18      	it	ne
 8000f2c:	ea43 630a 	orrne.w	r3, r3, sl, lsl #24
 8000f30:	6003      	str	r3, [r0, #0]
 8000f32:	4464      	add	r4, ip
 8000f34:	4475      	add	r5, lr
 8000f36:	4446      	add	r6, r8
 8000f38:	3004      	adds	r0, #4
 8000f3a:	44b9      	add	r9, r7
 8000f3c:	e7cf      	b.n	8000ede <EwCopyAlpha8RowGradient+0x26>
 8000f3e:	f8c0 b000 	str.w	fp, [r0]
 8000f42:	e7f6      	b.n	8000f32 <EwCopyAlpha8RowGradient+0x7a>

08000f44 <EwCopyAlpha8RowGradientBlend>:
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	6805      	ldr	r5, [r0, #0]
 8000f4c:	6858      	ldr	r0, [r3, #4]
 8000f4e:	9001      	str	r0, [sp, #4]
 8000f50:	6958      	ldr	r0, [r3, #20]
 8000f52:	9002      	str	r0, [sp, #8]
 8000f54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f56:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000f58:	680f      	ldr	r7, [r1, #0]
 8000f5a:	9003      	str	r0, [sp, #12]
 8000f5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f5e:	f8d3 c000 	ldr.w	ip, [r3]
 8000f62:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8000f66:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8000f6a:	ea4f 1900 	mov.w	r9, r0, lsl #4
 8000f6e:	0136      	lsls	r6, r6, #4
 8000f70:	eb07 0a02 	add.w	sl, r7, r2
 8000f74:	ebaa 0307 	sub.w	r3, sl, r7
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dc02      	bgt.n	8000f82 <EwCopyAlpha8RowGradientBlend+0x3e>
 8000f7c:	b005      	add	sp, #20
 8000f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f82:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000f86:	b1b3      	cbz	r3, 8000fb6 <EwCopyAlpha8RowGradientBlend+0x72>
 8000f88:	ea4f 101c 	mov.w	r0, ip, lsr #4
 8000f8c:	f400 027f 	and.w	r2, r0, #16711680	; 0xff0000
 8000f90:	ea4f 301e 	mov.w	r0, lr, lsr #12
 8000f94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f98:	4310      	orrs	r0, r2
 8000f9a:	f006 427f 	and.w	r2, r6, #4278190080	; 0xff000000
 8000f9e:	4310      	orrs	r0, r2
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	f3c8 5207 	ubfx	r2, r8, #20, #8
 8000fa6:	ea42 0200 	orr.w	r2, r2, r0
 8000faa:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8000fae:	d10b      	bne.n	8000fc8 <EwCopyAlpha8RowGradientBlend+0x84>
 8000fb0:	28ff      	cmp	r0, #255	; 0xff
 8000fb2:	d109      	bne.n	8000fc8 <EwCopyAlpha8RowGradientBlend+0x84>
 8000fb4:	602a      	str	r2, [r5, #0]
 8000fb6:	9b01      	ldr	r3, [sp, #4]
 8000fb8:	449c      	add	ip, r3
 8000fba:	9b02      	ldr	r3, [sp, #8]
 8000fbc:	449e      	add	lr, r3
 8000fbe:	9b03      	ldr	r3, [sp, #12]
 8000fc0:	3504      	adds	r5, #4
 8000fc2:	4498      	add	r8, r3
 8000fc4:	444e      	add	r6, r9
 8000fc6:	e7d5      	b.n	8000f74 <EwCopyAlpha8RowGradientBlend+0x30>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d0f4      	beq.n	8000fb6 <EwCopyAlpha8RowGradientBlend+0x72>
 8000fcc:	682c      	ldr	r4, [r5, #0]
 8000fce:	3001      	adds	r0, #1
 8000fd0:	fb03 0000 	mla	r0, r3, r0, r0
 8000fd4:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8000fd8:	0a03      	lsrs	r3, r0, #8
 8000fda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fde:	ea5f 6b14 	movs.w	fp, r4, lsr #24
 8000fe2:	fb03 f101 	mul.w	r1, r3, r1
 8000fe6:	fb03 f202 	mul.w	r2, r3, r2
 8000fea:	d00d      	beq.n	8001008 <EwCopyAlpha8RowGradientBlend+0xc4>
 8000fec:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8000ff0:	fb0b 0000 	mla	r0, fp, r0, r0
 8000ff4:	0a00      	lsrs	r0, r0, #8
 8000ff6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8000ffa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000ffe:	fb00 110b 	mla	r1, r0, fp, r1
 8001002:	fb00 2204 	mla	r2, r0, r4, r2
 8001006:	4403      	add	r3, r0
 8001008:	0a09      	lsrs	r1, r1, #8
 800100a:	0a12      	lsrs	r2, r2, #8
 800100c:	b16b      	cbz	r3, 800102a <EwCopyAlpha8RowGradientBlend+0xe6>
 800100e:	3b01      	subs	r3, #1
 8001010:	2bfe      	cmp	r3, #254	; 0xfe
 8001012:	d80a      	bhi.n	800102a <EwCopyAlpha8RowGradientBlend+0xe6>
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <EwCopyAlpha8RowGradientBlend+0xfc>)
 8001016:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800101a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800101e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8001022:	4341      	muls	r1, r0
 8001024:	4342      	muls	r2, r0
 8001026:	0a09      	lsrs	r1, r1, #8
 8001028:	0a12      	lsrs	r2, r2, #8
 800102a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800102e:	0212      	lsls	r2, r2, #8
 8001030:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8001034:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001038:	4311      	orrs	r1, r2
 800103a:	6029      	str	r1, [r5, #0]
 800103c:	e7bb      	b.n	8000fb6 <EwCopyAlpha8RowGradientBlend+0x72>
 800103e:	bf00      	nop
 8001040:	080335d8 	.word	0x080335d8

08001044 <EwCopyRGB565Row>:
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	6800      	ldr	r0, [r0, #0]
 8001048:	680c      	ldr	r4, [r1, #0]
 800104a:	2a00      	cmp	r2, #0
 800104c:	dc00      	bgt.n	8001050 <EwCopyRGB565Row+0xc>
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	f834 1b02 	ldrh.w	r1, [r4], #2
 8001054:	08cb      	lsrs	r3, r1, #3
 8001056:	0a0e      	lsrs	r6, r1, #8
 8001058:	f003 07fc 	and.w	r7, r3, #252	; 0xfc
 800105c:	00c9      	lsls	r1, r1, #3
 800105e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001062:	b2c9      	uxtb	r1, r1
 8001064:	433b      	orrs	r3, r7
 8001066:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800106a:	f006 05f8 	and.w	r5, r6, #248	; 0xf8
 800106e:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
 8001072:	ea45 1156 	orr.w	r1, r5, r6, lsr #5
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800107e:	f840 3b04 	str.w	r3, [r0], #4
 8001082:	3a01      	subs	r2, #1
 8001084:	e7e1      	b.n	800104a <EwCopyRGB565Row+0x6>

08001086 <EwCopyRGB565RowSolid>:
 8001086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001088:	680d      	ldr	r5, [r1, #0]
 800108a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800108c:	6804      	ldr	r4, [r0, #0]
 800108e:	1509      	asrs	r1, r1, #20
 8001090:	3101      	adds	r1, #1
 8001092:	0609      	lsls	r1, r1, #24
 8001094:	2a00      	cmp	r2, #0
 8001096:	dc00      	bgt.n	800109a <EwCopyRGB565RowSolid+0x14>
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800109e:	b1b3      	cbz	r3, 80010ce <EwCopyRGB565RowSolid+0x48>
 80010a0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80010a4:	08d8      	lsrs	r0, r3, #3
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	fa5f fe83 	uxtb.w	lr, r3
 80010ac:	f00c 06f8 	and.w	r6, ip, #248	; 0xf8
 80010b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80010b4:	f000 07fc 	and.w	r7, r0, #252	; 0xfc
 80010b8:	ea46 165c 	orr.w	r6, r6, ip, lsr #5
 80010bc:	ea43 030e 	orr.w	r3, r3, lr
 80010c0:	f3c0 1081 	ubfx	r0, r0, #6, #2
 80010c4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010c8:	4338      	orrs	r0, r7
 80010ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80010ce:	430b      	orrs	r3, r1
 80010d0:	f844 3b04 	str.w	r3, [r4], #4
 80010d4:	3a01      	subs	r2, #1
 80010d6:	e7dd      	b.n	8001094 <EwCopyRGB565RowSolid+0xe>

080010d8 <EwCopyRGB565RowSolidBlend>:
 80010d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010dc:	6805      	ldr	r5, [r0, #0]
 80010de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010e0:	680e      	ldr	r6, [r1, #0]
 80010e2:	4f31      	ldr	r7, [pc, #196]	; (80011a8 <EwCopyRGB565RowSolidBlend+0xd0>)
 80010e4:	1500      	asrs	r0, r0, #20
 80010e6:	1c44      	adds	r4, r0, #1
 80010e8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	dc01      	bgt.n	80010f4 <EwCopyRGB565RowSolidBlend+0x1c>
 80010f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010f4:	f836 1b02 	ldrh.w	r1, [r6], #2
 80010f8:	0a0b      	lsrs	r3, r1, #8
 80010fa:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
 80010fe:	00c9      	lsls	r1, r1, #3
 8001100:	f003 08f8 	and.w	r8, r3, #248	; 0xf8
 8001104:	fa5f f981 	uxtb.w	r9, r1
 8001108:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800110c:	ea48 1853 	orr.w	r8, r8, r3, lsr #5
 8001110:	f00c 0efc 	and.w	lr, ip, #252	; 0xfc
 8001114:	ea41 0309 	orr.w	r3, r1, r9
 8001118:	f3cc 1181 	ubfx	r1, ip, #6, #2
 800111c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001120:	ea41 010e 	orr.w	r1, r1, lr
 8001124:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001128:	f8d5 e000 	ldr.w	lr, [r5]
 800112c:	0a09      	lsrs	r1, r1, #8
 800112e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001132:	fb01 fc04 	mul.w	ip, r1, r4
 8001136:	ea5f 611e 	movs.w	r1, lr, lsr #24
 800113a:	bf18      	it	ne
 800113c:	fb01 0100 	mlane	r1, r1, r0, r0
 8001140:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001144:	bf18      	it	ne
 8001146:	0a09      	lsrne	r1, r1, #8
 8001148:	fb04 f303 	mul.w	r3, r4, r3
 800114c:	bf1f      	itttt	ne
 800114e:	f00e 18ff 	andne.w	r8, lr, #16711935	; 0xff00ff
 8001152:	f3ce 2e07 	ubfxne	lr, lr, #8, #8
 8001156:	fb01 3308 	mlane	r3, r1, r8, r3
 800115a:	fb01 cc0e 	mlane	ip, r1, lr, ip
 800115e:	bf0c      	ite	eq
 8001160:	4621      	moveq	r1, r4
 8001162:	1909      	addne	r1, r1, r4
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800116a:	b179      	cbz	r1, 800118c <EwCopyRGB565RowSolidBlend+0xb4>
 800116c:	3901      	subs	r1, #1
 800116e:	29fe      	cmp	r1, #254	; 0xfe
 8001170:	d80c      	bhi.n	800118c <EwCopyRGB565RowSolidBlend+0xb4>
 8001172:	f837 e011 	ldrh.w	lr, [r7, r1, lsl #1]
 8001176:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800117a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800117e:	fb0e f303 	mul.w	r3, lr, r3
 8001182:	fb0e fc0c 	mul.w	ip, lr, ip
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800118c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001190:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8001194:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001198:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800119c:	ea43 030c 	orr.w	r3, r3, ip
 80011a0:	f845 3b04 	str.w	r3, [r5], #4
 80011a4:	3a01      	subs	r2, #1
 80011a6:	e7a1      	b.n	80010ec <EwCopyRGB565RowSolidBlend+0x14>
 80011a8:	080335d8 	.word	0x080335d8

080011ac <EwCopyRGB565RowGradient>:
 80011ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b0:	6804      	ldr	r4, [r0, #0]
 80011b2:	680d      	ldr	r5, [r1, #0]
 80011b4:	e9d3 060c 	ldrd	r0, r6, [r3, #48]	; 0x30
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dc01      	bgt.n	80011c0 <EwCopyRGB565RowGradient+0x14>
 80011bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011c0:	1503      	asrs	r3, r0, #20
 80011c2:	1c5f      	adds	r7, r3, #1
 80011c4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80011c8:	b1bb      	cbz	r3, 80011fa <EwCopyRGB565RowGradient+0x4e>
 80011ca:	ea4f 2813 	mov.w	r8, r3, lsr #8
 80011ce:	08d9      	lsrs	r1, r3, #3
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	fa5f f983 	uxtb.w	r9, r3
 80011d6:	f008 0ef8 	and.w	lr, r8, #248	; 0xf8
 80011da:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80011de:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
 80011e2:	ea4e 1e58 	orr.w	lr, lr, r8, lsr #5
 80011e6:	ea43 0309 	orr.w	r3, r3, r9
 80011ea:	f3c1 1181 	ubfx	r1, r1, #6, #2
 80011ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80011f2:	ea41 010c 	orr.w	r1, r1, ip
 80011f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011fa:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80011fe:	f844 3b04 	str.w	r3, [r4], #4
 8001202:	4430      	add	r0, r6
 8001204:	3a01      	subs	r2, #1
 8001206:	e7d7      	b.n	80011b8 <EwCopyRGB565RowGradient+0xc>

08001208 <EwCopyRGB565RowGradientBlend>:
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	; 0x30
 8001210:	6800      	ldr	r0, [r0, #0]
 8001212:	680d      	ldr	r5, [r1, #0]
 8001214:	4f33      	ldr	r7, [pc, #204]	; (80012e4 <EwCopyRGB565RowGradientBlend+0xdc>)
 8001216:	2a00      	cmp	r2, #0
 8001218:	dc01      	bgt.n	800121e <EwCopyRGB565RowGradientBlend+0x16>
 800121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800121e:	f835 ab02 	ldrh.w	sl, [r5], #2
 8001222:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8001226:	ea4f 08da 	mov.w	r8, sl, lsr #3
 800122a:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
 800122e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001232:	ea41 1353 	orr.w	r3, r1, r3, lsr #5
 8001236:	fa5f fc8a 	uxtb.w	ip, sl
 800123a:	f3ca 1142 	ubfx	r1, sl, #5, #3
 800123e:	f008 0bfc 	and.w	fp, r8, #252	; 0xfc
 8001242:	ea41 010c 	orr.w	r1, r1, ip
 8001246:	f3c8 1c81 	ubfx	ip, r8, #6, #2
 800124a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800124e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8001252:	ea41 2c0c 	orr.w	ip, r1, ip, lsl #8
 8001256:	f8d0 8000 	ldr.w	r8, [r0]
 800125a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800125e:	ea4f 5924 	mov.w	r9, r4, asr #20
 8001262:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8001266:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800126a:	f109 0e01 	add.w	lr, r9, #1
 800126e:	fb09 3303 	mla	r3, r9, r3, r3
 8001272:	fb09 cc0c 	mla	ip, r9, ip, ip
 8001276:	ea5f 6918 	movs.w	r9, r8, lsr #24
 800127a:	d00d      	beq.n	8001298 <EwCopyRGB565RowGradientBlend+0x90>
 800127c:	f5ce 7180 	rsb	r1, lr, #256	; 0x100
 8001280:	fb09 1101 	mla	r1, r9, r1, r1
 8001284:	0a09      	lsrs	r1, r1, #8
 8001286:	f008 19ff 	and.w	r9, r8, #16711935	; 0xff00ff
 800128a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 800128e:	fb01 3309 	mla	r3, r1, r9, r3
 8001292:	fb01 cc08 	mla	ip, r1, r8, ip
 8001296:	448e      	add	lr, r1
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800129e:	f1be 0f00 	cmp.w	lr, #0
 80012a2:	d010      	beq.n	80012c6 <EwCopyRGB565RowGradientBlend+0xbe>
 80012a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80012a8:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
 80012ac:	d80b      	bhi.n	80012c6 <EwCopyRGB565RowGradientBlend+0xbe>
 80012ae:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
 80012b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80012b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80012ba:	434b      	muls	r3, r1
 80012bc:	fb01 fc0c 	mul.w	ip, r1, ip
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80012c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80012ca:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80012ce:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80012d2:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 80012d6:	ea43 030c 	orr.w	r3, r3, ip
 80012da:	f840 3b04 	str.w	r3, [r0], #4
 80012de:	4434      	add	r4, r6
 80012e0:	3a01      	subs	r2, #1
 80012e2:	e798      	b.n	8001216 <EwCopyRGB565RowGradientBlend+0xe>
 80012e4:	080335d8 	.word	0x080335d8

080012e8 <EwWarpNativeRow>:
 80012e8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80012ec:	6804      	ldr	r4, [r0, #0]
 80012ee:	6888      	ldr	r0, [r1, #8]
 80012f0:	9e06      	ldr	r6, [sp, #24]
 80012f2:	680d      	ldr	r5, [r1, #0]
 80012f4:	1080      	asrs	r0, r0, #2
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	dc01      	bgt.n	80012fe <EwWarpNativeRow+0x16>
 80012fa:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80012fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001300:	1331      	asrs	r1, r6, #12
 8001302:	4379      	muls	r1, r7
 8001304:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001306:	ea4f 4921 	mov.w	r9, r1, asr #16
 800130a:	1319      	asrs	r1, r3, #12
 800130c:	4379      	muls	r1, r7
 800130e:	1409      	asrs	r1, r1, #16
 8001310:	fb00 1109 	mla	r1, r0, r9, r1
 8001314:	3a01      	subs	r2, #1
 8001316:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800131a:	f844 1b04 	str.w	r1, [r4], #4
 800131e:	9907      	ldr	r1, [sp, #28]
 8001320:	440b      	add	r3, r1
 8001322:	9908      	ldr	r1, [sp, #32]
 8001324:	440e      	add	r6, r1
 8001326:	e7e6      	b.n	80012f6 <EwWarpNativeRow+0xe>

08001328 <EwWarpNativeRowFilter>:
 8001328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	461d      	mov	r5, r3
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	688b      	ldr	r3, [r1, #8]
 8001334:	680f      	ldr	r7, [r1, #0]
 8001336:	109b      	asrs	r3, r3, #2
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	009e      	lsls	r6, r3, #2
 800133e:	4614      	mov	r4, r2
 8001340:	2c00      	cmp	r4, #0
 8001342:	dc02      	bgt.n	800134a <EwWarpNativeRowFilter+0x22>
 8001344:	b003      	add	sp, #12
 8001346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800134c:	132b      	asrs	r3, r5, #12
 800134e:	4353      	muls	r3, r2
 8001350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001352:	1310      	asrs	r0, r2, #12
 8001354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001356:	4350      	muls	r0, r2
 8001358:	131b      	asrs	r3, r3, #12
 800135a:	1300      	asrs	r0, r0, #12
 800135c:	3b08      	subs	r3, #8
 800135e:	3808      	subs	r0, #8
 8001360:	9a01      	ldr	r2, [sp, #4]
 8001362:	1101      	asrs	r1, r0, #4
 8001364:	ea4f 1c23 	mov.w	ip, r3, asr #4
 8001368:	fb02 c201 	mla	r2, r2, r1, ip
 800136c:	f000 000f 	and.w	r0, r0, #15
 8001370:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 800137c:	f1c0 0810 	rsb	r8, r0, #16
 8001380:	198a      	adds	r2, r1, r6
 8001382:	f1c3 0e10 	rsb	lr, r3, #16
 8001386:	fb03 f808 	mul.w	r8, r3, r8
 800138a:	fb00 fe0e 	mul.w	lr, r0, lr
 800138e:	4343      	muls	r3, r0
 8001390:	6848      	ldr	r0, [r1, #4]
 8001392:	f852 9c04 	ldr.w	r9, [r2, #-4]
 8001396:	5989      	ldr	r1, [r1, r6]
 8001398:	ea4f 221a 	mov.w	r2, sl, lsr #8
 800139c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80013a0:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 80013a4:	0a02      	lsrs	r2, r0, #8
 80013a6:	ebac 0c0e 	sub.w	ip, ip, lr
 80013aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80013ae:	ebac 0c03 	sub.w	ip, ip, r3
 80013b2:	fb08 f202 	mul.w	r2, r8, r2
 80013b6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80013ba:	fb0c 220b 	mla	r2, ip, fp, r2
 80013be:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80013c2:	ea4f 2b11 	mov.w	fp, r1, lsr #8
 80013c6:	fb08 f000 	mul.w	r0, r8, r0
 80013ca:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80013ce:	fb0c 000a 	mla	r0, ip, sl, r0
 80013d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80013d6:	fb03 220b 	mla	r2, r3, fp, r2
 80013da:	fb03 0001 	mla	r0, r3, r1, r0
 80013de:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 80013e2:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80013e6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80013ea:	fb0e 0009 	mla	r0, lr, r9, r0
 80013ee:	fb0e 220b 	mla	r2, lr, fp, r2
 80013f2:	0a00      	lsrs	r0, r0, #8
 80013f4:	9b00      	ldr	r3, [sp, #0]
 80013f6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80013fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80013fe:	4302      	orrs	r2, r0
 8001400:	f843 2b04 	str.w	r2, [r3], #4
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800140a:	441d      	add	r5, r3
 800140c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800140e:	4413      	add	r3, r2
 8001410:	930c      	str	r3, [sp, #48]	; 0x30
 8001412:	3c01      	subs	r4, #1
 8001414:	e794      	b.n	8001340 <EwWarpNativeRowFilter+0x18>

08001416 <EwWarpNativeRowBlend>:
 8001416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141a:	680f      	ldr	r7, [r1, #0]
 800141c:	6889      	ldr	r1, [r1, #8]
 800141e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001422:	6806      	ldr	r6, [r0, #0]
 8001424:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80014e0 <EwWarpNativeRowBlend+0xca>
 8001428:	ea4f 0ea1 	mov.w	lr, r1, asr #2
 800142c:	2a00      	cmp	r2, #0
 800142e:	dc01      	bgt.n	8001434 <EwWarpNativeRowBlend+0x1e>
 8001430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001434:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001436:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001438:	ea4f 312a 	mov.w	r1, sl, asr #12
 800143c:	4341      	muls	r1, r0
 800143e:	1408      	asrs	r0, r1, #16
 8001440:	1319      	asrs	r1, r3, #12
 8001442:	4361      	muls	r1, r4
 8001444:	1409      	asrs	r1, r1, #16
 8001446:	fb0e 1100 	mla	r1, lr, r0, r1
 800144a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800144e:	0e0c      	lsrs	r4, r1, #24
 8001450:	2cff      	cmp	r4, #255	; 0xff
 8001452:	d005      	beq.n	8001460 <EwWarpNativeRowBlend+0x4a>
 8001454:	f8d6 c000 	ldr.w	ip, [r6]
 8001458:	ea5f 601c 	movs.w	r0, ip, lsr #24
 800145c:	d108      	bne.n	8001470 <EwWarpNativeRowBlend+0x5a>
 800145e:	b104      	cbz	r4, 8001462 <EwWarpNativeRowBlend+0x4c>
 8001460:	6031      	str	r1, [r6, #0]
 8001462:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001464:	440b      	add	r3, r1
 8001466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001468:	3604      	adds	r6, #4
 800146a:	448a      	add	sl, r1
 800146c:	3a01      	subs	r2, #1
 800146e:	e7dd      	b.n	800142c <EwWarpNativeRowBlend+0x16>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d0f6      	beq.n	8001462 <EwWarpNativeRowBlend+0x4c>
 8001474:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
 8001478:	fb00 5505 	mla	r5, r0, r5, r5
 800147c:	0a2d      	lsrs	r5, r5, #8
 800147e:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8001482:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001486:	fb04 0000 	mla	r0, r4, r0, r0
 800148a:	f00c 19ff 	and.w	r9, ip, #16711935	; 0xff00ff
 800148e:	fb04 1101 	mla	r1, r4, r1, r1
 8001492:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8001496:	442c      	add	r4, r5
 8001498:	fb05 0009 	mla	r0, r5, r9, r0
 800149c:	fb05 1c0c 	mla	ip, r5, ip, r1
 80014a0:	2cfe      	cmp	r4, #254	; 0xfe
 80014a2:	ea4f 2010 	mov.w	r0, r0, lsr #8
 80014a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80014aa:	d80c      	bhi.n	80014c6 <EwWarpNativeRowBlend+0xb0>
 80014ac:	f838 b014 	ldrh.w	fp, [r8, r4, lsl #1]
 80014b0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80014b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80014b8:	fb0b f000 	mul.w	r0, fp, r0
 80014bc:	fb0b fc0c 	mul.w	ip, fp, ip
 80014c0:	0a00      	lsrs	r0, r0, #8
 80014c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80014c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80014ca:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80014ce:	ea40 6404 	orr.w	r4, r0, r4, lsl #24
 80014d2:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 80014d6:	ea44 040c 	orr.w	r4, r4, ip
 80014da:	6034      	str	r4, [r6, #0]
 80014dc:	e7c1      	b.n	8001462 <EwWarpNativeRowBlend+0x4c>
 80014de:	bf00      	nop
 80014e0:	080335d8 	.word	0x080335d8

080014e4 <EwWarpNativeRowFilterBlend>:
 80014e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e8:	461e      	mov	r6, r3
 80014ea:	688b      	ldr	r3, [r1, #8]
 80014ec:	6805      	ldr	r5, [r0, #0]
 80014ee:	680f      	ldr	r7, [r1, #0]
 80014f0:	b085      	sub	sp, #20
 80014f2:	109b      	asrs	r3, r3, #2
 80014f4:	9303      	str	r3, [sp, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dc02      	bgt.n	800150a <EwWarpNativeRowFilterBlend+0x26>
 8001504:	b005      	add	sp, #20
 8001506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800150a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800150c:	9c03      	ldr	r4, [sp, #12]
 800150e:	1331      	asrs	r1, r6, #12
 8001510:	4359      	muls	r1, r3
 8001512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001514:	1318      	asrs	r0, r3, #12
 8001516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001518:	4358      	muls	r0, r3
 800151a:	1309      	asrs	r1, r1, #12
 800151c:	1300      	asrs	r0, r0, #12
 800151e:	3908      	subs	r1, #8
 8001520:	3808      	subs	r0, #8
 8001522:	1103      	asrs	r3, r0, #4
 8001524:	110a      	asrs	r2, r1, #4
 8001526:	fb04 2203 	mla	r2, r4, r3, r2
 800152a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 800152e:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 8001532:	9a02      	ldr	r2, [sp, #8]
 8001534:	9c02      	ldr	r4, [sp, #8]
 8001536:	f000 000f 	and.w	r0, r0, #15
 800153a:	f001 010f 	and.w	r1, r1, #15
 800153e:	189a      	adds	r2, r3, r2
 8001540:	f1c0 0810 	rsb	r8, r0, #16
 8001544:	f1c1 0e10 	rsb	lr, r1, #16
 8001548:	fb01 f808 	mul.w	r8, r1, r8
 800154c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001550:	4341      	muls	r1, r0
 8001552:	6858      	ldr	r0, [r3, #4]
 8001554:	f852 9c04 	ldr.w	r9, [r2, #-4]
 8001558:	591b      	ldr	r3, [r3, r4]
 800155a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 800155e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8001562:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8001566:	0a02      	lsrs	r2, r0, #8
 8001568:	ebac 0c0e 	sub.w	ip, ip, lr
 800156c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8001570:	ebac 0c01 	sub.w	ip, ip, r1
 8001574:	fb08 f202 	mul.w	r2, r8, r2
 8001578:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800157c:	fb0c 220b 	mla	r2, ip, fp, r2
 8001580:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8001584:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001588:	fb08 f000 	mul.w	r0, r8, r0
 800158c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001590:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001594:	fb0c 000a 	mla	r0, ip, sl, r0
 8001598:	fb01 220b 	mla	r2, r1, fp, r2
 800159c:	fb01 0003 	mla	r0, r1, r3, r0
 80015a0:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 80015a4:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80015a8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80015ac:	fb0e 0309 	mla	r3, lr, r9, r0
 80015b0:	fb0e 220b 	mla	r2, lr, fp, r2
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80015ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80015be:	4313      	orrs	r3, r2
 80015c0:	0e12      	lsrs	r2, r2, #24
 80015c2:	2aff      	cmp	r2, #255	; 0xff
 80015c4:	d003      	beq.n	80015ce <EwWarpNativeRowFilterBlend+0xea>
 80015c6:	6828      	ldr	r0, [r5, #0]
 80015c8:	0e01      	lsrs	r1, r0, #24
 80015ca:	d10c      	bne.n	80015e6 <EwWarpNativeRowFilterBlend+0x102>
 80015cc:	b102      	cbz	r2, 80015d0 <EwWarpNativeRowFilterBlend+0xec>
 80015ce:	602b      	str	r3, [r5, #0]
 80015d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80015d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80015d4:	441e      	add	r6, r3
 80015d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80015d8:	4413      	add	r3, r2
 80015da:	930e      	str	r3, [sp, #56]	; 0x38
 80015dc:	9b01      	ldr	r3, [sp, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	3504      	adds	r5, #4
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	e78b      	b.n	80014fe <EwWarpNativeRowFilterBlend+0x1a>
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d0f2      	beq.n	80015d0 <EwWarpNativeRowFilterBlend+0xec>
 80015ea:	f1c2 0bff 	rsb	fp, r2, #255	; 0xff
 80015ee:	fb01 bb0b 	mla	fp, r1, fp, fp
 80015f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80015f6:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80015fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80015fe:	fb02 1101 	mla	r1, r2, r1, r1
 8001602:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8001606:	fb02 3303 	mla	r3, r2, r3, r3
 800160a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800160e:	445a      	add	r2, fp
 8001610:	fb0b 110c 	mla	r1, fp, ip, r1
 8001614:	fb0b 3000 	mla	r0, fp, r0, r3
 8001618:	2afe      	cmp	r2, #254	; 0xfe
 800161a:	ea4f 2111 	mov.w	r1, r1, lsr #8
 800161e:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8001622:	d80c      	bhi.n	800163e <EwWarpNativeRowFilterBlend+0x15a>
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <EwWarpNativeRowFilterBlend+0x170>)
 8001626:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 800162a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800162e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001632:	fb0e f101 	mul.w	r1, lr, r1
 8001636:	fb0e f000 	mul.w	r0, lr, r0
 800163a:	0a09      	lsrs	r1, r1, #8
 800163c:	0a00      	lsrs	r0, r0, #8
 800163e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001642:	0200      	lsls	r0, r0, #8
 8001644:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8001648:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 800164c:	4302      	orrs	r2, r0
 800164e:	602a      	str	r2, [r5, #0]
 8001650:	e7be      	b.n	80015d0 <EwWarpNativeRowFilterBlend+0xec>
 8001652:	bf00      	nop
 8001654:	080335d8 	.word	0x080335d8

08001658 <EwWarpNativeRowGradient>:
 8001658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800165e:	6806      	ldr	r6, [r0, #0]
 8001660:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8001662:	f8d1 b000 	ldr.w	fp, [r1]
 8001666:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001668:	6889      	ldr	r1, [r1, #8]
 800166a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800166e:	153f      	asrs	r7, r7, #20
 8001670:	ea4f 0aa1 	mov.w	sl, r1, asr #2
 8001674:	3701      	adds	r7, #1
 8001676:	b940      	cbnz	r0, 800168a <EwWarpNativeRowGradient+0x32>
 8001678:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800167a:	fab0 f080 	clz	r0, r0
 800167e:	0940      	lsrs	r0, r0, #5
 8001680:	4611      	mov	r1, r2
 8001682:	2900      	cmp	r1, #0
 8001684:	dc03      	bgt.n	800168e <EwWarpNativeRowGradient+0x36>
 8001686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800168a:	2000      	movs	r0, #0
 800168c:	e7f8      	b.n	8001680 <EwWarpNativeRowGradient+0x28>
 800168e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001690:	131a      	asrs	r2, r3, #12
 8001692:	436a      	muls	r2, r5
 8001694:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001696:	ea4f 3829 	mov.w	r8, r9, asr #12
 800169a:	fb05 f808 	mul.w	r8, r5, r8
 800169e:	ea4f 4828 	mov.w	r8, r8, asr #16
 80016a2:	fb08 f50a 	mul.w	r5, r8, sl
 80016a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80016aa:	eb05 4222 	add.w	r2, r5, r2, asr #16
 80016ae:	f85b 5022 	ldr.w	r5, [fp, r2, lsl #2]
 80016b2:	bb20      	cbnz	r0, 80016fe <EwWarpNativeRowGradient+0xa6>
 80016b4:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80016b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016b8:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 80016bc:	b16f      	cbz	r7, 80016da <EwWarpNativeRowGradient+0x82>
 80016be:	f1b8 0f00 	cmp.w	r8, #0
 80016c2:	d002      	beq.n	80016ca <EwWarpNativeRowGradient+0x72>
 80016c4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80016c6:	fb07 2208 	mla	r2, r7, r8, r2
 80016ca:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80016cc:	b12f      	cbz	r7, 80016da <EwWarpNativeRowGradient+0x82>
 80016ce:	f1b8 0f00 	cmp.w	r8, #0
 80016d2:	d002      	beq.n	80016da <EwWarpNativeRowGradient+0x82>
 80016d4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80016d6:	fb07 ee08 	mla	lr, r7, r8, lr
 80016da:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80016dc:	b167      	cbz	r7, 80016f8 <EwWarpNativeRowGradient+0xa0>
 80016de:	f1bc 0f00 	cmp.w	ip, #0
 80016e2:	d009      	beq.n	80016f8 <EwWarpNativeRowGradient+0xa0>
 80016e4:	1517      	asrs	r7, r2, #20
 80016e6:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 80016ea:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80016ec:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 80016f0:	fb07 fe0e 	mul.w	lr, r7, lr
 80016f4:	fb0c 220e 	mla	r2, ip, lr, r2
 80016f8:	f3c2 5207 	ubfx	r2, r2, #20, #8
 80016fc:	1c57      	adds	r7, r2, #1
 80016fe:	0e2a      	lsrs	r2, r5, #24
 8001700:	437a      	muls	r2, r7
 8001702:	0a12      	lsrs	r2, r2, #8
 8001704:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8001708:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800170c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800170e:	f846 5b04 	str.w	r5, [r6], #4
 8001712:	4413      	add	r3, r2
 8001714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001716:	3901      	subs	r1, #1
 8001718:	4491      	add	r9, r2
 800171a:	e7b2      	b.n	8001682 <EwWarpNativeRowGradient+0x2a>

0800171c <EwWarpNativeRowFilterGradient>:
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	b087      	sub	sp, #28
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001726:	9002      	str	r0, [sp, #8]
 8001728:	6808      	ldr	r0, [r1, #0]
 800172a:	6889      	ldr	r1, [r1, #8]
 800172c:	9004      	str	r0, [sp, #16]
 800172e:	1089      	asrs	r1, r1, #2
 8001730:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001732:	9105      	str	r1, [sp, #20]
 8001734:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	1500      	asrs	r0, r0, #20
 800173a:	3001      	adds	r0, #1
 800173c:	b971      	cbnz	r1, 800175c <EwWarpNativeRowFilterGradient+0x40>
 800173e:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 8001740:	fab7 f787 	clz	r7, r7
 8001744:	097f      	lsrs	r7, r7, #5
 8001746:	9905      	ldr	r1, [sp, #20]
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	3101      	adds	r1, #1
 800174c:	0089      	lsls	r1, r1, #2
 800174e:	9103      	str	r1, [sp, #12]
 8001750:	9b00      	ldr	r3, [sp, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc04      	bgt.n	8001760 <EwWarpNativeRowFilterGradient+0x44>
 8001756:	b007      	add	sp, #28
 8001758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800175c:	2700      	movs	r7, #0
 800175e:	e7f2      	b.n	8001746 <EwWarpNativeRowFilterGradient+0x2a>
 8001760:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001762:	9b01      	ldr	r3, [sp, #4]
 8001764:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001766:	ea4f 3e21 	mov.w	lr, r1, asr #12
 800176a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800176c:	131e      	asrs	r6, r3, #12
 800176e:	4356      	muls	r6, r2
 8001770:	fb01 fe0e 	mul.w	lr, r1, lr
 8001774:	1332      	asrs	r2, r6, #12
 8001776:	ea4f 312e 	mov.w	r1, lr, asr #12
 800177a:	bb0f      	cbnz	r7, 80017c0 <EwWarpNativeRowFilterGradient+0xa4>
 800177c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800177e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001780:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 8001784:	b15c      	cbz	r4, 800179e <EwWarpNativeRowFilterGradient+0x82>
 8001786:	ea5f 442e 	movs.w	r4, lr, asr #16
 800178a:	d002      	beq.n	8001792 <EwWarpNativeRowFilterGradient+0x76>
 800178c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800178e:	fb03 0004 	mla	r0, r3, r4, r0
 8001792:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001794:	b11b      	cbz	r3, 800179e <EwWarpNativeRowFilterGradient+0x82>
 8001796:	b114      	cbz	r4, 800179e <EwWarpNativeRowFilterGradient+0x82>
 8001798:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800179a:	fb03 cc04 	mla	ip, r3, r4, ip
 800179e:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80017a0:	b15c      	cbz	r4, 80017ba <EwWarpNativeRowFilterGradient+0x9e>
 80017a2:	1436      	asrs	r6, r6, #16
 80017a4:	d009      	beq.n	80017ba <EwWarpNativeRowFilterGradient+0x9e>
 80017a6:	1504      	asrs	r4, r0, #20
 80017a8:	ebc4 5c2c 	rsb	ip, r4, ip, asr #20
 80017ac:	6cac      	ldr	r4, [r5, #72]	; 0x48
 80017ae:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 80017b2:	fb04 fc0c 	mul.w	ip, r4, ip
 80017b6:	fb06 000c 	mla	r0, r6, ip, r0
 80017ba:	f3c0 5007 	ubfx	r0, r0, #20, #8
 80017be:	3001      	adds	r0, #1
 80017c0:	f1a2 0408 	sub.w	r4, r2, #8
 80017c4:	9b05      	ldr	r3, [sp, #20]
 80017c6:	3908      	subs	r1, #8
 80017c8:	110a      	asrs	r2, r1, #4
 80017ca:	1126      	asrs	r6, r4, #4
 80017cc:	fb03 6602 	mla	r6, r3, r2, r6
 80017d0:	9b04      	ldr	r3, [sp, #16]
 80017d2:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
 80017d6:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 80017da:	9b03      	ldr	r3, [sp, #12]
 80017dc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80017e0:	f001 010f 	and.w	r1, r1, #15
 80017e4:	eb0c 0203 	add.w	r2, ip, r3
 80017e8:	f004 040f 	and.w	r4, r4, #15
 80017ec:	f1c1 0810 	rsb	r8, r1, #16
 80017f0:	f852 9c04 	ldr.w	r9, [r2, #-4]
 80017f4:	fb04 f808 	mul.w	r8, r4, r8
 80017f8:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80017fc:	f1c4 0e10 	rsb	lr, r4, #16
 8001800:	fb01 fe0e 	mul.w	lr, r1, lr
 8001804:	434c      	muls	r4, r1
 8001806:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 800180a:	f85c 1003 	ldr.w	r1, [ip, r3]
 800180e:	9b02      	ldr	r3, [sp, #8]
 8001810:	0a32      	lsrs	r2, r6, #8
 8001812:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8001816:	ebac 0c0e 	sub.w	ip, ip, lr
 800181a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800181e:	ebac 0c04 	sub.w	ip, ip, r4
 8001822:	fb08 f202 	mul.w	r2, r8, r2
 8001826:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 800182a:	fb0c 220b 	mla	r2, ip, fp, r2
 800182e:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8001832:	ea4f 2b11 	mov.w	fp, r1, lsr #8
 8001836:	fb08 f606 	mul.w	r6, r8, r6
 800183a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800183e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001842:	fb0c 660a 	mla	r6, ip, sl, r6
 8001846:	fb04 220b 	mla	r2, r4, fp, r2
 800184a:	fb04 6601 	mla	r6, r4, r1, r6
 800184e:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8001852:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8001856:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800185a:	fb0e 6109 	mla	r1, lr, r9, r6
 800185e:	fb0e 220b 	mla	r2, lr, fp, r2
 8001862:	0a09      	lsrs	r1, r1, #8
 8001864:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001868:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800186c:	4311      	orrs	r1, r2
 800186e:	0e12      	lsrs	r2, r2, #24
 8001870:	4342      	muls	r2, r0
 8001872:	0a12      	lsrs	r2, r2, #8
 8001874:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001878:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 800187c:	f843 1b04 	str.w	r1, [r3], #4
 8001880:	9a01      	ldr	r2, [sp, #4]
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001886:	441a      	add	r2, r3
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800188c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800188e:	4413      	add	r3, r2
 8001890:	9310      	str	r3, [sp, #64]	; 0x40
 8001892:	9b00      	ldr	r3, [sp, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	e75a      	b.n	8001750 <EwWarpNativeRowFilterGradient+0x34>

0800189a <EwWarpNativeRowGradientBlend>:
 800189a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80018a0:	6806      	ldr	r6, [r0, #0]
 80018a2:	6808      	ldr	r0, [r1, #0]
 80018a4:	6889      	ldr	r1, [r1, #8]
 80018a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	ea4f 09a1 	mov.w	r9, r1, asr #2
 80018b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018b2:	9001      	str	r0, [sp, #4]
 80018b4:	1509      	asrs	r1, r1, #20
 80018b6:	f101 0e01 	add.w	lr, r1, #1
 80018ba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80018bc:	b949      	cbnz	r1, 80018d2 <EwWarpNativeRowGradientBlend+0x38>
 80018be:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80018c0:	fab5 f585 	clz	r5, r5
 80018c4:	096d      	lsrs	r5, r5, #5
 80018c6:	4610      	mov	r0, r2
 80018c8:	2800      	cmp	r0, #0
 80018ca:	dc04      	bgt.n	80018d6 <EwWarpNativeRowGradientBlend+0x3c>
 80018cc:	b003      	add	sp, #12
 80018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d2:	2500      	movs	r5, #0
 80018d4:	e7f7      	b.n	80018c6 <EwWarpNativeRowGradientBlend+0x2c>
 80018d6:	9b00      	ldr	r3, [sp, #0]
 80018d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80018da:	131a      	asrs	r2, r3, #12
 80018dc:	434a      	muls	r2, r1
 80018de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80018e0:	ea4f 382a 	mov.w	r8, sl, asr #12
 80018e4:	fb01 f808 	mul.w	r8, r1, r8
 80018e8:	ea4f 4728 	mov.w	r7, r8, asr #16
 80018ec:	fb07 f109 	mul.w	r1, r7, r9
 80018f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80018f4:	eb01 4222 	add.w	r2, r1, r2, asr #16
 80018f8:	9901      	ldr	r1, [sp, #4]
 80018fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018fe:	bb0d      	cbnz	r5, 8001944 <EwWarpNativeRowGradientBlend+0xaa>
 8001900:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001902:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001904:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8001908:	b14b      	cbz	r3, 800191e <EwWarpNativeRowGradientBlend+0x84>
 800190a:	b117      	cbz	r7, 8001912 <EwWarpNativeRowGradientBlend+0x78>
 800190c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800190e:	fb03 1107 	mla	r1, r3, r7, r1
 8001912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001914:	b11b      	cbz	r3, 800191e <EwWarpNativeRowGradientBlend+0x84>
 8001916:	b117      	cbz	r7, 800191e <EwWarpNativeRowGradientBlend+0x84>
 8001918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800191a:	fb03 ee07 	mla	lr, r3, r7, lr
 800191e:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8001920:	b167      	cbz	r7, 800193c <EwWarpNativeRowGradientBlend+0xa2>
 8001922:	f1bc 0f00 	cmp.w	ip, #0
 8001926:	d009      	beq.n	800193c <EwWarpNativeRowGradientBlend+0xa2>
 8001928:	150f      	asrs	r7, r1, #20
 800192a:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 800192e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001930:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8001934:	fb07 fe0e 	mul.w	lr, r7, lr
 8001938:	fb0c 110e 	mla	r1, ip, lr, r1
 800193c:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8001940:	f101 0e01 	add.w	lr, r1, #1
 8001944:	0e11      	lsrs	r1, r2, #24
 8001946:	d03a      	beq.n	80019be <EwWarpNativeRowGradientBlend+0x124>
 8001948:	f8d6 8000 	ldr.w	r8, [r6]
 800194c:	fb01 e10e 	mla	r1, r1, lr, lr
 8001950:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8001954:	0a09      	lsrs	r1, r1, #8
 8001956:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800195a:	ea5f 6b18 	movs.w	fp, r8, lsr #24
 800195e:	fb01 f707 	mul.w	r7, r1, r7
 8001962:	fb01 f202 	mul.w	r2, r1, r2
 8001966:	d00e      	beq.n	8001986 <EwWarpNativeRowGradientBlend+0xec>
 8001968:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 800196c:	fb0b cc0c 	mla	ip, fp, ip, ip
 8001970:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8001974:	f008 1bff 	and.w	fp, r8, #16711935	; 0xff00ff
 8001978:	f3c8 2807 	ubfx	r8, r8, #8, #8
 800197c:	fb0c 770b 	mla	r7, ip, fp, r7
 8001980:	fb0c 2208 	mla	r2, ip, r8, r2
 8001984:	4461      	add	r1, ip
 8001986:	0a3f      	lsrs	r7, r7, #8
 8001988:	0a12      	lsrs	r2, r2, #8
 800198a:	b179      	cbz	r1, 80019ac <EwWarpNativeRowGradientBlend+0x112>
 800198c:	3901      	subs	r1, #1
 800198e:	29fe      	cmp	r1, #254	; 0xfe
 8001990:	d80c      	bhi.n	80019ac <EwWarpNativeRowGradientBlend+0x112>
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <EwWarpNativeRowGradientBlend+0x136>)
 8001994:	f833 c011 	ldrh.w	ip, [r3, r1, lsl #1]
 8001998:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 800199c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80019a0:	fb0c f707 	mul.w	r7, ip, r7
 80019a4:	fb0c f202 	mul.w	r2, ip, r2
 80019a8:	0a3f      	lsrs	r7, r7, #8
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80019b0:	0212      	lsls	r2, r2, #8
 80019b2:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 80019b6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80019ba:	4317      	orrs	r7, r2
 80019bc:	6037      	str	r7, [r6, #0]
 80019be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019c0:	9a00      	ldr	r2, [sp, #0]
 80019c2:	441a      	add	r2, r3
 80019c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	449a      	add	sl, r3
 80019ca:	3604      	adds	r6, #4
 80019cc:	3801      	subs	r0, #1
 80019ce:	e77b      	b.n	80018c8 <EwWarpNativeRowGradientBlend+0x2e>
 80019d0:	080335d8 	.word	0x080335d8

080019d4 <EwWarpNativeRowFilterGradientBlend>:
 80019d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d8:	b087      	sub	sp, #28
 80019da:	f8d0 8000 	ldr.w	r8, [r0]
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	680b      	ldr	r3, [r1, #0]
 80019e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80019e4:	9304      	str	r3, [sp, #16]
 80019e6:	688b      	ldr	r3, [r1, #8]
 80019e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80019ea:	109b      	asrs	r3, r3, #2
 80019ec:	9305      	str	r3, [sp, #20]
 80019ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019f0:	1509      	asrs	r1, r1, #20
 80019f2:	3101      	adds	r1, #1
 80019f4:	b973      	cbnz	r3, 8001a14 <EwWarpNativeRowFilterGradientBlend+0x40>
 80019f6:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80019f8:	fab6 f686 	clz	r6, r6
 80019fc:	0976      	lsrs	r6, r6, #5
 80019fe:	9b05      	ldr	r3, [sp, #20]
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	3301      	adds	r3, #1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	9303      	str	r3, [sp, #12]
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	dc04      	bgt.n	8001a18 <EwWarpNativeRowFilterGradientBlend+0x44>
 8001a0e:	b007      	add	sp, #28
 8001a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a14:	2600      	movs	r6, #0
 8001a16:	e7f2      	b.n	80019fe <EwWarpNativeRowFilterGradientBlend+0x2a>
 8001a18:	9b02      	ldr	r3, [sp, #8]
 8001a1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001a1c:	131d      	asrs	r5, r3, #12
 8001a1e:	ea4f 3c22 	mov.w	ip, r2, asr #12
 8001a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001a26:	435d      	muls	r5, r3
 8001a28:	fb02 fc0c 	mul.w	ip, r2, ip
 8001a2c:	ea4f 3e25 	mov.w	lr, r5, asr #12
 8001a30:	ea4f 322c 	mov.w	r2, ip, asr #12
 8001a34:	b9fe      	cbnz	r6, 8001a76 <EwWarpNativeRowFilterGradientBlend+0xa2>
 8001a36:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001a3a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001a3c:	b158      	cbz	r0, 8001a56 <EwWarpNativeRowFilterGradientBlend+0x82>
 8001a3e:	ea5f 402c 	movs.w	r0, ip, asr #16
 8001a42:	d002      	beq.n	8001a4a <EwWarpNativeRowFilterGradientBlend+0x76>
 8001a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a46:	fb03 1100 	mla	r1, r3, r0, r1
 8001a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a4c:	b11b      	cbz	r3, 8001a56 <EwWarpNativeRowFilterGradientBlend+0x82>
 8001a4e:	b110      	cbz	r0, 8001a56 <EwWarpNativeRowFilterGradientBlend+0x82>
 8001a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a52:	fb03 7700 	mla	r7, r3, r0, r7
 8001a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a58:	b150      	cbz	r0, 8001a70 <EwWarpNativeRowFilterGradientBlend+0x9c>
 8001a5a:	142d      	asrs	r5, r5, #16
 8001a5c:	d008      	beq.n	8001a70 <EwWarpNativeRowFilterGradientBlend+0x9c>
 8001a5e:	1508      	asrs	r0, r1, #20
 8001a60:	ebc0 5727 	rsb	r7, r0, r7, asr #20
 8001a64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a66:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8001a6a:	4347      	muls	r7, r0
 8001a6c:	fb05 1107 	mla	r1, r5, r7, r1
 8001a70:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8001a74:	3101      	adds	r1, #1
 8001a76:	f1ae 0008 	sub.w	r0, lr, #8
 8001a7a:	9f05      	ldr	r7, [sp, #20]
 8001a7c:	3a08      	subs	r2, #8
 8001a7e:	1113      	asrs	r3, r2, #4
 8001a80:	1105      	asrs	r5, r0, #4
 8001a82:	fb07 5503 	mla	r5, r7, r3, r5
 8001a86:	9b04      	ldr	r3, [sp, #16]
 8001a88:	f002 020f 	and.w	r2, r2, #15
 8001a8c:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8001a90:	f853 a025 	ldr.w	sl, [r3, r5, lsl #2]
 8001a94:	9b03      	ldr	r3, [sp, #12]
 8001a96:	687d      	ldr	r5, [r7, #4]
 8001a98:	f000 000f 	and.w	r0, r0, #15
 8001a9c:	f1c2 0e10 	rsb	lr, r2, #16
 8001aa0:	f1c0 0c10 	rsb	ip, r0, #16
 8001aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8001aa8:	fb02 fc0c 	mul.w	ip, r2, ip
 8001aac:	4350      	muls	r0, r2
 8001aae:	18fa      	adds	r2, r7, r3
 8001ab0:	58fb      	ldr	r3, [r7, r3]
 8001ab2:	f852 9c04 	ldr.w	r9, [r2, #-4]
 8001ab6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8001aba:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8001abe:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 8001ac2:	0a2a      	lsrs	r2, r5, #8
 8001ac4:	eba7 070c 	sub.w	r7, r7, ip
 8001ac8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8001acc:	1a3f      	subs	r7, r7, r0
 8001ace:	fb0e f202 	mul.w	r2, lr, r2
 8001ad2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8001ad6:	fb07 220b 	mla	r2, r7, fp, r2
 8001ada:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8001ade:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001ae2:	fb0e f505 	mul.w	r5, lr, r5
 8001ae6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001aea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001aee:	fb07 550a 	mla	r5, r7, sl, r5
 8001af2:	fb00 220b 	mla	r2, r0, fp, r2
 8001af6:	fb00 5503 	mla	r5, r0, r3, r5
 8001afa:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8001afe:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8001b02:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001b06:	fb0c 5309 	mla	r3, ip, r9, r5
 8001b0a:	fb0c 220b 	mla	r2, ip, fp, r2
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001b14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	0e12      	lsrs	r2, r2, #24
 8001b1c:	d038      	beq.n	8001b90 <EwWarpNativeRowFilterGradientBlend+0x1bc>
 8001b1e:	f8d8 7000 	ldr.w	r7, [r8]
 8001b22:	fb02 1201 	mla	r2, r2, r1, r1
 8001b26:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8001b2a:	0a12      	lsrs	r2, r2, #8
 8001b2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001b30:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8001b34:	fb02 f000 	mul.w	r0, r2, r0
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	d00d      	beq.n	8001b5a <EwWarpNativeRowFilterGradientBlend+0x186>
 8001b3e:	f5c2 7580 	rsb	r5, r2, #256	; 0x100
 8001b42:	fb0c 5505 	mla	r5, ip, r5, r5
 8001b46:	0a2d      	lsrs	r5, r5, #8
 8001b48:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8001b4c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001b50:	fb05 000c 	mla	r0, r5, ip, r0
 8001b54:	fb05 3307 	mla	r3, r5, r7, r3
 8001b58:	442a      	add	r2, r5
 8001b5a:	0a00      	lsrs	r0, r0, #8
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	b16a      	cbz	r2, 8001b7c <EwWarpNativeRowFilterGradientBlend+0x1a8>
 8001b60:	3a01      	subs	r2, #1
 8001b62:	2afe      	cmp	r2, #254	; 0xfe
 8001b64:	d80a      	bhi.n	8001b7c <EwWarpNativeRowFilterGradientBlend+0x1a8>
 8001b66:	4d11      	ldr	r5, [pc, #68]	; (8001bac <EwWarpNativeRowFilterGradientBlend+0x1d8>)
 8001b68:	f835 5012 	ldrh.w	r5, [r5, r2, lsl #1]
 8001b6c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001b70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001b74:	4368      	muls	r0, r5
 8001b76:	436b      	muls	r3, r5
 8001b78:	0a00      	lsrs	r0, r0, #8
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b86:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001b8a:	4318      	orrs	r0, r3
 8001b8c:	f8c8 0000 	str.w	r0, [r8]
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001b94:	4413      	add	r3, r2
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001b9c:	4413      	add	r3, r2
 8001b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8001ba0:	9b01      	ldr	r3, [sp, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f108 0804 	add.w	r8, r8, #4
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	e72d      	b.n	8001a08 <EwWarpNativeRowFilterGradientBlend+0x34>
 8001bac:	080335d8 	.word	0x080335d8

08001bb0 <EwWarpIndex8Row>:
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8001bb6:	6804      	ldr	r4, [r0, #0]
 8001bb8:	680d      	ldr	r5, [r1, #0]
 8001bba:	698e      	ldr	r6, [r1, #24]
 8001bbc:	688f      	ldr	r7, [r1, #8]
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	dc00      	bgt.n	8001bc4 <EwWarpIndex8Row+0x14>
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bc6:	ea4f 312c 	mov.w	r1, ip, asr #12
 8001bca:	4341      	muls	r1, r0
 8001bcc:	ea4f 4e21 	mov.w	lr, r1, asr #16
 8001bd0:	9908      	ldr	r1, [sp, #32]
 8001bd2:	1318      	asrs	r0, r3, #12
 8001bd4:	4348      	muls	r0, r1
 8001bd6:	1400      	asrs	r0, r0, #16
 8001bd8:	fb07 510e 	mla	r1, r7, lr, r5
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	5c09      	ldrb	r1, [r1, r0]
 8001be0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8001be4:	f844 1b04 	str.w	r1, [r4], #4
 8001be8:	9906      	ldr	r1, [sp, #24]
 8001bea:	440b      	add	r3, r1
 8001bec:	9907      	ldr	r1, [sp, #28]
 8001bee:	448c      	add	ip, r1
 8001bf0:	e7e5      	b.n	8001bbe <EwWarpIndex8Row+0xe>

08001bf2 <EwWarpIndex8RowFilter>:
 8001bf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	6803      	ldr	r3, [r0, #0]
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	688b      	ldr	r3, [r1, #8]
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	680e      	ldr	r6, [r1, #0]
 8001c04:	698f      	ldr	r7, [r1, #24]
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	9b00      	ldr	r3, [sp, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dc02      	bgt.n	8001c18 <EwWarpIndex8RowFilter+0x26>
 8001c12:	b005      	add	sp, #20
 8001c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001c1a:	9c02      	ldr	r4, [sp, #8]
 8001c1c:	132b      	asrs	r3, r5, #12
 8001c1e:	4353      	muls	r3, r2
 8001c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c22:	1310      	asrs	r0, r2, #12
 8001c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001c26:	4350      	muls	r0, r2
 8001c28:	131b      	asrs	r3, r3, #12
 8001c2a:	1300      	asrs	r0, r0, #12
 8001c2c:	3b08      	subs	r3, #8
 8001c2e:	3808      	subs	r0, #8
 8001c30:	1101      	asrs	r1, r0, #4
 8001c32:	111a      	asrs	r2, r3, #4
 8001c34:	fb04 2201 	mla	r2, r4, r1, r2
 8001c38:	18b1      	adds	r1, r6, r2
 8001c3a:	5cb2      	ldrb	r2, [r6, r2]
 8001c3c:	9c03      	ldr	r4, [sp, #12]
 8001c3e:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 8001c42:	784a      	ldrb	r2, [r1, #1]
 8001c44:	f000 000f 	and.w	r0, r0, #15
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	f1c0 0810 	rsb	r8, r0, #16
 8001c50:	f1c3 0e10 	rsb	lr, r3, #16
 8001c54:	fb03 f808 	mul.w	r8, r3, r8
 8001c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8001c5c:	4343      	muls	r3, r0
 8001c5e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8001c62:	9a03      	ldr	r2, [sp, #12]
 8001c64:	188a      	adds	r2, r1, r2
 8001c66:	5d09      	ldrb	r1, [r1, r4]
 8001c68:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001c6c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001c70:	f857 9022 	ldr.w	r9, [r7, r2, lsl #2]
 8001c74:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8001c78:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8001c7c:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8001c80:	0a02      	lsrs	r2, r0, #8
 8001c82:	ebac 0c0e 	sub.w	ip, ip, lr
 8001c86:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8001c8a:	ebac 0c03 	sub.w	ip, ip, r3
 8001c8e:	fb08 f202 	mul.w	r2, r8, r2
 8001c92:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001c96:	fb0c 220b 	mla	r2, ip, fp, r2
 8001c9a:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8001c9e:	ea4f 2b11 	mov.w	fp, r1, lsr #8
 8001ca2:	fb08 f000 	mul.w	r0, r8, r0
 8001ca6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001caa:	fb0c 000a 	mla	r0, ip, sl, r0
 8001cae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001cb2:	fb03 220b 	mla	r2, r3, fp, r2
 8001cb6:	fb03 0001 	mla	r0, r3, r1, r0
 8001cba:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8001cbe:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8001cc2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001cc6:	fb0e 0009 	mla	r0, lr, r9, r0
 8001cca:	fb0e 220b 	mla	r2, lr, fp, r2
 8001cce:	0a00      	lsrs	r0, r0, #8
 8001cd0:	9b01      	ldr	r3, [sp, #4]
 8001cd2:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001cd6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	f843 2b04 	str.w	r2, [r3], #4
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ce6:	441d      	add	r5, r3
 8001ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cea:	4413      	add	r3, r2
 8001cec:	930e      	str	r3, [sp, #56]	; 0x38
 8001cee:	9b00      	ldr	r3, [sp, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	e78a      	b.n	8001c0c <EwWarpIndex8RowFilter+0x1a>

08001cf6 <EwWarpIndex8RowBlend>:
 8001cf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cfa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001cfe:	680f      	ldr	r7, [r1, #0]
 8001d00:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8001d04:	6806      	ldr	r6, [r0, #0]
 8001d06:	6889      	ldr	r1, [r1, #8]
 8001d08:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001dc8 <EwWarpIndex8RowBlend+0xd2>
 8001d0c:	9101      	str	r1, [sp, #4]
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	dc02      	bgt.n	8001d18 <EwWarpIndex8RowBlend+0x22>
 8001d12:	b003      	add	sp, #12
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001d1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001d1c:	ea4f 312a 	mov.w	r1, sl, asr #12
 8001d20:	4341      	muls	r1, r0
 8001d22:	1318      	asrs	r0, r3, #12
 8001d24:	4360      	muls	r0, r4
 8001d26:	9c01      	ldr	r4, [sp, #4]
 8001d28:	1409      	asrs	r1, r1, #16
 8001d2a:	fb04 7101 	mla	r1, r4, r1, r7
 8001d2e:	1400      	asrs	r0, r0, #16
 8001d30:	5c09      	ldrb	r1, [r1, r0]
 8001d32:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8001d36:	0e0c      	lsrs	r4, r1, #24
 8001d38:	2cff      	cmp	r4, #255	; 0xff
 8001d3a:	d005      	beq.n	8001d48 <EwWarpIndex8RowBlend+0x52>
 8001d3c:	f8d6 c000 	ldr.w	ip, [r6]
 8001d40:	ea5f 601c 	movs.w	r0, ip, lsr #24
 8001d44:	d108      	bne.n	8001d58 <EwWarpIndex8RowBlend+0x62>
 8001d46:	b104      	cbz	r4, 8001d4a <EwWarpIndex8RowBlend+0x54>
 8001d48:	6031      	str	r1, [r6, #0]
 8001d4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001d4c:	440b      	add	r3, r1
 8001d4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001d50:	3604      	adds	r6, #4
 8001d52:	448a      	add	sl, r1
 8001d54:	3a01      	subs	r2, #1
 8001d56:	e7da      	b.n	8001d0e <EwWarpIndex8RowBlend+0x18>
 8001d58:	2c00      	cmp	r4, #0
 8001d5a:	d0f6      	beq.n	8001d4a <EwWarpIndex8RowBlend+0x54>
 8001d5c:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
 8001d60:	fb00 5505 	mla	r5, r0, r5, r5
 8001d64:	0a2d      	lsrs	r5, r5, #8
 8001d66:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8001d6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001d6e:	fb04 0000 	mla	r0, r4, r0, r0
 8001d72:	f00c 19ff 	and.w	r9, ip, #16711935	; 0xff00ff
 8001d76:	fb04 1101 	mla	r1, r4, r1, r1
 8001d7a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8001d7e:	442c      	add	r4, r5
 8001d80:	fb05 0009 	mla	r0, r5, r9, r0
 8001d84:	fb05 1c0c 	mla	ip, r5, ip, r1
 8001d88:	2cfe      	cmp	r4, #254	; 0xfe
 8001d8a:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8001d8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8001d92:	d80c      	bhi.n	8001dae <EwWarpIndex8RowBlend+0xb8>
 8001d94:	f838 b014 	ldrh.w	fp, [r8, r4, lsl #1]
 8001d98:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001d9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8001da0:	fb0b f000 	mul.w	r0, fp, r0
 8001da4:	fb0b fc0c 	mul.w	ip, fp, ip
 8001da8:	0a00      	lsrs	r0, r0, #8
 8001daa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8001dae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001db2:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8001db6:	ea40 6404 	orr.w	r4, r0, r4, lsl #24
 8001dba:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 8001dbe:	ea44 040c 	orr.w	r4, r4, ip
 8001dc2:	6034      	str	r4, [r6, #0]
 8001dc4:	e7c1      	b.n	8001d4a <EwWarpIndex8RowBlend+0x54>
 8001dc6:	bf00      	nop
 8001dc8:	080335d8 	.word	0x080335d8

08001dcc <EwWarpIndex8RowFilterBlend>:
 8001dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	461e      	mov	r6, r3
 8001dd4:	680b      	ldr	r3, [r1, #0]
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	688b      	ldr	r3, [r1, #8]
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	6805      	ldr	r5, [r0, #0]
 8001dde:	698f      	ldr	r7, [r1, #24]
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	9b00      	ldr	r3, [sp, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	dc02      	bgt.n	8001df2 <EwWarpIndex8RowFilterBlend+0x26>
 8001dec:	b005      	add	sp, #20
 8001dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001df4:	9c02      	ldr	r4, [sp, #8]
 8001df6:	1331      	asrs	r1, r6, #12
 8001df8:	4359      	muls	r1, r3
 8001dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dfc:	1318      	asrs	r0, r3, #12
 8001dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e00:	4358      	muls	r0, r3
 8001e02:	1309      	asrs	r1, r1, #12
 8001e04:	1300      	asrs	r0, r0, #12
 8001e06:	3908      	subs	r1, #8
 8001e08:	3808      	subs	r0, #8
 8001e0a:	1103      	asrs	r3, r0, #4
 8001e0c:	110a      	asrs	r2, r1, #4
 8001e0e:	f000 000f 	and.w	r0, r0, #15
 8001e12:	f001 010f 	and.w	r1, r1, #15
 8001e16:	f1c0 0810 	rsb	r8, r0, #16
 8001e1a:	f1c1 0e10 	rsb	lr, r1, #16
 8001e1e:	fb04 2203 	mla	r2, r4, r3, r2
 8001e22:	fb01 f808 	mul.w	r8, r1, r8
 8001e26:	fb00 fe0e 	mul.w	lr, r0, lr
 8001e2a:	4341      	muls	r1, r0
 8001e2c:	9b01      	ldr	r3, [sp, #4]
 8001e2e:	9801      	ldr	r0, [sp, #4]
 8001e30:	9c03      	ldr	r4, [sp, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	5c82      	ldrb	r2, [r0, r2]
 8001e36:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 8001e3a:	785a      	ldrb	r2, [r3, #1]
 8001e3c:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8001e40:	9a03      	ldr	r2, [sp, #12]
 8001e42:	189a      	adds	r2, r3, r2
 8001e44:	5d1b      	ldrb	r3, [r3, r4]
 8001e46:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001e4a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8001e4e:	f857 9022 	ldr.w	r9, [r7, r2, lsl #2]
 8001e52:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8001e56:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8001e5a:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8001e5e:	0a02      	lsrs	r2, r0, #8
 8001e60:	ebac 0c0e 	sub.w	ip, ip, lr
 8001e64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8001e68:	ebac 0c01 	sub.w	ip, ip, r1
 8001e6c:	fb08 f202 	mul.w	r2, r8, r2
 8001e70:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001e74:	fb0c 220b 	mla	r2, ip, fp, r2
 8001e78:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8001e7c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001e80:	fb08 f000 	mul.w	r0, r8, r0
 8001e84:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001e88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001e8c:	fb0c 000a 	mla	r0, ip, sl, r0
 8001e90:	fb01 220b 	mla	r2, r1, fp, r2
 8001e94:	fb01 0003 	mla	r0, r1, r3, r0
 8001e98:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8001e9c:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8001ea0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8001ea4:	fb0e 0309 	mla	r3, lr, r9, r0
 8001ea8:	fb0e 220b 	mla	r2, lr, fp, r2
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001eb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	0e12      	lsrs	r2, r2, #24
 8001eba:	2aff      	cmp	r2, #255	; 0xff
 8001ebc:	d003      	beq.n	8001ec6 <EwWarpIndex8RowFilterBlend+0xfa>
 8001ebe:	6828      	ldr	r0, [r5, #0]
 8001ec0:	0e01      	lsrs	r1, r0, #24
 8001ec2:	d10c      	bne.n	8001ede <EwWarpIndex8RowFilterBlend+0x112>
 8001ec4:	b102      	cbz	r2, 8001ec8 <EwWarpIndex8RowFilterBlend+0xfc>
 8001ec6:	602b      	str	r3, [r5, #0]
 8001ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001eca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ecc:	441e      	add	r6, r3
 8001ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ed0:	4413      	add	r3, r2
 8001ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	3504      	adds	r5, #4
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	e783      	b.n	8001de6 <EwWarpIndex8RowFilterBlend+0x1a>
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d0f2      	beq.n	8001ec8 <EwWarpIndex8RowFilterBlend+0xfc>
 8001ee2:	f1c2 0bff 	rsb	fp, r2, #255	; 0xff
 8001ee6:	fb01 bb0b 	mla	fp, r1, fp, fp
 8001eea:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8001eee:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8001ef2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001ef6:	fb02 1101 	mla	r1, r2, r1, r1
 8001efa:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8001efe:	fb02 3303 	mla	r3, r2, r3, r3
 8001f02:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001f06:	445a      	add	r2, fp
 8001f08:	fb0b 110c 	mla	r1, fp, ip, r1
 8001f0c:	fb0b 3000 	mla	r0, fp, r0, r3
 8001f10:	2afe      	cmp	r2, #254	; 0xfe
 8001f12:	ea4f 2111 	mov.w	r1, r1, lsr #8
 8001f16:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8001f1a:	d80c      	bhi.n	8001f36 <EwWarpIndex8RowFilterBlend+0x16a>
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <EwWarpIndex8RowFilterBlend+0x180>)
 8001f1e:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8001f22:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001f26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8001f2a:	fb0e f101 	mul.w	r1, lr, r1
 8001f2e:	fb0e f000 	mul.w	r0, lr, r0
 8001f32:	0a09      	lsrs	r1, r1, #8
 8001f34:	0a00      	lsrs	r0, r0, #8
 8001f36:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8001f3a:	0200      	lsls	r0, r0, #8
 8001f3c:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8001f40:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8001f44:	4302      	orrs	r2, r0
 8001f46:	602a      	str	r2, [r5, #0]
 8001f48:	e7be      	b.n	8001ec8 <EwWarpIndex8RowFilterBlend+0xfc>
 8001f4a:	bf00      	nop
 8001f4c:	080335d8 	.word	0x080335d8

08001f50 <EwWarpIndex8RowGradient>:
 8001f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001f56:	6806      	ldr	r6, [r0, #0]
 8001f58:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8001f5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001f5c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8001f60:	460d      	mov	r5, r1
 8001f62:	153f      	asrs	r7, r7, #20
 8001f64:	6809      	ldr	r1, [r1, #0]
 8001f66:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8001f6a:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8001f6e:	9101      	str	r1, [sp, #4]
 8001f70:	3701      	adds	r7, #1
 8001f72:	b948      	cbnz	r0, 8001f88 <EwWarpIndex8RowGradient+0x38>
 8001f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f76:	fab0 f080 	clz	r0, r0
 8001f7a:	0940      	lsrs	r0, r0, #5
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	2900      	cmp	r1, #0
 8001f80:	dc04      	bgt.n	8001f8c <EwWarpIndex8RowGradient+0x3c>
 8001f82:	b003      	add	sp, #12
 8001f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e7f7      	b.n	8001f7c <EwWarpIndex8RowGradient+0x2c>
 8001f8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001f8e:	131a      	asrs	r2, r3, #12
 8001f90:	436a      	muls	r2, r5
 8001f92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001f94:	ea4f 3829 	mov.w	r8, r9, asr #12
 8001f98:	fb05 f808 	mul.w	r8, r5, r8
 8001f9c:	9d01      	ldr	r5, [sp, #4]
 8001f9e:	ea4f 4828 	mov.w	r8, r8, asr #16
 8001fa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8001fa6:	fb08 fe0a 	mul.w	lr, r8, sl
 8001faa:	eb05 4222 	add.w	r2, r5, r2, asr #16
 8001fae:	f812 200e 	ldrb.w	r2, [r2, lr]
 8001fb2:	f85b 5022 	ldr.w	r5, [fp, r2, lsl #2]
 8001fb6:	bb20      	cbnz	r0, 8002002 <EwWarpIndex8RowGradient+0xb2>
 8001fb8:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8001fba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fbc:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8001fc0:	b16f      	cbz	r7, 8001fde <EwWarpIndex8RowGradient+0x8e>
 8001fc2:	f1b8 0f00 	cmp.w	r8, #0
 8001fc6:	d002      	beq.n	8001fce <EwWarpIndex8RowGradient+0x7e>
 8001fc8:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001fca:	fb07 2208 	mla	r2, r7, r8, r2
 8001fce:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8001fd0:	b12f      	cbz	r7, 8001fde <EwWarpIndex8RowGradient+0x8e>
 8001fd2:	f1b8 0f00 	cmp.w	r8, #0
 8001fd6:	d002      	beq.n	8001fde <EwWarpIndex8RowGradient+0x8e>
 8001fd8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8001fda:	fb07 ee08 	mla	lr, r7, r8, lr
 8001fde:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8001fe0:	b167      	cbz	r7, 8001ffc <EwWarpIndex8RowGradient+0xac>
 8001fe2:	f1bc 0f00 	cmp.w	ip, #0
 8001fe6:	d009      	beq.n	8001ffc <EwWarpIndex8RowGradient+0xac>
 8001fe8:	1517      	asrs	r7, r2, #20
 8001fea:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 8001fee:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001ff0:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8001ff4:	fb07 fe0e 	mul.w	lr, r7, lr
 8001ff8:	fb0c 220e 	mla	r2, ip, lr, r2
 8001ffc:	f3c2 5207 	ubfx	r2, r2, #20, #8
 8002000:	1c57      	adds	r7, r2, #1
 8002002:	0e2a      	lsrs	r2, r5, #24
 8002004:	437a      	muls	r2, r7
 8002006:	0a12      	lsrs	r2, r2, #8
 8002008:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800200c:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002012:	f846 5b04 	str.w	r5, [r6], #4
 8002016:	4413      	add	r3, r2
 8002018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800201a:	3901      	subs	r1, #1
 800201c:	4491      	add	r9, r2
 800201e:	e7ae      	b.n	8001f7e <EwWarpIndex8RowGradient+0x2e>

08002020 <EwWarpIndex8RowFilterGradient>:
 8002020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002024:	b087      	sub	sp, #28
 8002026:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800202a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	6803      	ldr	r3, [r0, #0]
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	680b      	ldr	r3, [r1, #0]
 8002034:	9303      	str	r3, [sp, #12]
 8002036:	688b      	ldr	r3, [r1, #8]
 8002038:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800203a:	9304      	str	r3, [sp, #16]
 800203c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800203e:	1509      	asrs	r1, r1, #20
 8002040:	3101      	adds	r1, #1
 8002042:	b96b      	cbnz	r3, 8002060 <EwWarpIndex8RowFilterGradient+0x40>
 8002044:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8002046:	fab6 f686 	clz	r6, r6
 800204a:	0976      	lsrs	r6, r6, #5
 800204c:	9b04      	ldr	r3, [sp, #16]
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	9305      	str	r3, [sp, #20]
 8002054:	9b00      	ldr	r3, [sp, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	dc04      	bgt.n	8002064 <EwWarpIndex8RowFilterGradient+0x44>
 800205a:	b007      	add	sp, #28
 800205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002060:	2600      	movs	r6, #0
 8002062:	e7f3      	b.n	800204c <EwWarpIndex8RowFilterGradient+0x2c>
 8002064:	9b01      	ldr	r3, [sp, #4]
 8002066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002068:	131d      	asrs	r5, r3, #12
 800206a:	ea4f 3c22 	mov.w	ip, r2, asr #12
 800206e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002070:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002072:	435d      	muls	r5, r3
 8002074:	fb02 fc0c 	mul.w	ip, r2, ip
 8002078:	ea4f 3e25 	mov.w	lr, r5, asr #12
 800207c:	ea4f 322c 	mov.w	r2, ip, asr #12
 8002080:	b9fe      	cbnz	r6, 80020c2 <EwWarpIndex8RowFilterGradient+0xa2>
 8002082:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002084:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002086:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002088:	b158      	cbz	r0, 80020a2 <EwWarpIndex8RowFilterGradient+0x82>
 800208a:	ea5f 402c 	movs.w	r0, ip, asr #16
 800208e:	d002      	beq.n	8002096 <EwWarpIndex8RowFilterGradient+0x76>
 8002090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002092:	fb03 1100 	mla	r1, r3, r0, r1
 8002096:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002098:	b11b      	cbz	r3, 80020a2 <EwWarpIndex8RowFilterGradient+0x82>
 800209a:	b110      	cbz	r0, 80020a2 <EwWarpIndex8RowFilterGradient+0x82>
 800209c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800209e:	fb03 7700 	mla	r7, r3, r0, r7
 80020a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020a4:	b150      	cbz	r0, 80020bc <EwWarpIndex8RowFilterGradient+0x9c>
 80020a6:	142d      	asrs	r5, r5, #16
 80020a8:	d008      	beq.n	80020bc <EwWarpIndex8RowFilterGradient+0x9c>
 80020aa:	1508      	asrs	r0, r1, #20
 80020ac:	ebc0 5727 	rsb	r7, r0, r7, asr #20
 80020b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80020b2:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80020b6:	4347      	muls	r7, r0
 80020b8:	fb05 1107 	mla	r1, r5, r7, r1
 80020bc:	f3c1 5107 	ubfx	r1, r1, #20, #8
 80020c0:	3101      	adds	r1, #1
 80020c2:	f1ae 0008 	sub.w	r0, lr, #8
 80020c6:	9f04      	ldr	r7, [sp, #16]
 80020c8:	3a08      	subs	r2, #8
 80020ca:	1113      	asrs	r3, r2, #4
 80020cc:	1105      	asrs	r5, r0, #4
 80020ce:	fb07 5503 	mla	r5, r7, r3, r5
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	195f      	adds	r7, r3, r5
 80020d6:	5d5b      	ldrb	r3, [r3, r5]
 80020d8:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 80020e2:	9b05      	ldr	r3, [sp, #20]
 80020e4:	f002 020f 	and.w	r2, r2, #15
 80020e8:	f000 000f 	and.w	r0, r0, #15
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	f1c2 0e10 	rsb	lr, r2, #16
 80020f2:	f1c0 0c10 	rsb	ip, r0, #16
 80020f6:	fb00 fe0e 	mul.w	lr, r0, lr
 80020fa:	fb02 fc0c 	mul.w	ip, r2, ip
 80020fe:	4350      	muls	r0, r2
 8002100:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002104:	9a05      	ldr	r2, [sp, #20]
 8002106:	f858 9023 	ldr.w	r9, [r8, r3, lsl #2]
 800210a:	5cba      	ldrb	r2, [r7, r2]
 800210c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8002110:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8002114:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 8002118:	0a2b      	lsrs	r3, r5, #8
 800211a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800211e:	eba7 070c 	sub.w	r7, r7, ip
 8002122:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002126:	1a3f      	subs	r7, r7, r0
 8002128:	fb0e f303 	mul.w	r3, lr, r3
 800212c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8002130:	fb07 330b 	mla	r3, r7, fp, r3
 8002134:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8002138:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 800213c:	fb0e f505 	mul.w	r5, lr, r5
 8002140:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8002144:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002148:	fb07 550a 	mla	r5, r7, sl, r5
 800214c:	fb00 330b 	mla	r3, r0, fp, r3
 8002150:	fb00 5502 	mla	r5, r0, r2, r5
 8002154:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8002158:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 800215c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8002160:	fb0c 5209 	mla	r2, ip, r9, r5
 8002164:	fb0c 330b 	mla	r3, ip, fp, r3
 8002168:	0a12      	lsrs	r2, r2, #8
 800216a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800216e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002172:	431a      	orrs	r2, r3
 8002174:	0e1b      	lsrs	r3, r3, #24
 8002176:	434b      	muls	r3, r1
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800217e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8002182:	9b02      	ldr	r3, [sp, #8]
 8002184:	f843 2b04 	str.w	r2, [r3], #4
 8002188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	9b01      	ldr	r3, [sp, #4]
 800218e:	4413      	add	r3, r2
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002196:	4413      	add	r3, r2
 8002198:	9310      	str	r3, [sp, #64]	; 0x40
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	e758      	b.n	8002054 <EwWarpIndex8RowFilterGradient+0x34>

080021a2 <EwWarpIndex8RowGradientBlend>:
 80021a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	6806      	ldr	r6, [r0, #0]
 80021aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80021ac:	6808      	ldr	r0, [r1, #0]
 80021ae:	9001      	str	r0, [sp, #4]
 80021b0:	6988      	ldr	r0, [r1, #24]
 80021b2:	6889      	ldr	r1, [r1, #8]
 80021b4:	9103      	str	r1, [sp, #12]
 80021b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021b8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	1509      	asrs	r1, r1, #20
 80021c0:	f101 0e01 	add.w	lr, r1, #1
 80021c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80021c6:	9002      	str	r0, [sp, #8]
 80021c8:	b959      	cbnz	r1, 80021e2 <EwWarpIndex8RowGradientBlend+0x40>
 80021ca:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80021cc:	fab5 f585 	clz	r5, r5
 80021d0:	096d      	lsrs	r5, r5, #5
 80021d2:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80022e4 <EwWarpIndex8RowGradientBlend+0x142>
 80021d6:	4610      	mov	r0, r2
 80021d8:	2800      	cmp	r0, #0
 80021da:	dc04      	bgt.n	80021e6 <EwWarpIndex8RowGradientBlend+0x44>
 80021dc:	b005      	add	sp, #20
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	2500      	movs	r5, #0
 80021e4:	e7f5      	b.n	80021d2 <EwWarpIndex8RowGradientBlend+0x30>
 80021e6:	9b00      	ldr	r3, [sp, #0]
 80021e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80021ea:	131a      	asrs	r2, r3, #12
 80021ec:	434a      	muls	r2, r1
 80021ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80021f0:	9b01      	ldr	r3, [sp, #4]
 80021f2:	ea4f 382a 	mov.w	r8, sl, asr #12
 80021f6:	fb01 f808 	mul.w	r8, r1, r8
 80021fa:	9903      	ldr	r1, [sp, #12]
 80021fc:	ea4f 4728 	mov.w	r7, r8, asr #16
 8002200:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002204:	4379      	muls	r1, r7
 8002206:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800220a:	9b02      	ldr	r3, [sp, #8]
 800220c:	5c52      	ldrb	r2, [r2, r1]
 800220e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002212:	bb0d      	cbnz	r5, 8002258 <EwWarpIndex8RowGradientBlend+0xb6>
 8002214:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002218:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 800221c:	b14b      	cbz	r3, 8002232 <EwWarpIndex8RowGradientBlend+0x90>
 800221e:	b117      	cbz	r7, 8002226 <EwWarpIndex8RowGradientBlend+0x84>
 8002220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002222:	fb03 1107 	mla	r1, r3, r7, r1
 8002226:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002228:	b11b      	cbz	r3, 8002232 <EwWarpIndex8RowGradientBlend+0x90>
 800222a:	b117      	cbz	r7, 8002232 <EwWarpIndex8RowGradientBlend+0x90>
 800222c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800222e:	fb03 ee07 	mla	lr, r3, r7, lr
 8002232:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8002234:	b167      	cbz	r7, 8002250 <EwWarpIndex8RowGradientBlend+0xae>
 8002236:	f1bc 0f00 	cmp.w	ip, #0
 800223a:	d009      	beq.n	8002250 <EwWarpIndex8RowGradientBlend+0xae>
 800223c:	150f      	asrs	r7, r1, #20
 800223e:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 8002242:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002244:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002248:	fb07 fe0e 	mul.w	lr, r7, lr
 800224c:	fb0c 110e 	mla	r1, ip, lr, r1
 8002250:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8002254:	f101 0e01 	add.w	lr, r1, #1
 8002258:	0e11      	lsrs	r1, r2, #24
 800225a:	d039      	beq.n	80022d0 <EwWarpIndex8RowGradientBlend+0x12e>
 800225c:	f8d6 8000 	ldr.w	r8, [r6]
 8002260:	fb01 e10e 	mla	r1, r1, lr, lr
 8002264:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8002268:	0a09      	lsrs	r1, r1, #8
 800226a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800226e:	ea5f 6b18 	movs.w	fp, r8, lsr #24
 8002272:	fb01 f707 	mul.w	r7, r1, r7
 8002276:	fb01 f202 	mul.w	r2, r1, r2
 800227a:	d00e      	beq.n	800229a <EwWarpIndex8RowGradientBlend+0xf8>
 800227c:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8002280:	fb0b cc0c 	mla	ip, fp, ip, ip
 8002284:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8002288:	f008 1bff 	and.w	fp, r8, #16711935	; 0xff00ff
 800228c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8002290:	fb0c 770b 	mla	r7, ip, fp, r7
 8002294:	fb0c 2208 	mla	r2, ip, r8, r2
 8002298:	4461      	add	r1, ip
 800229a:	0a3f      	lsrs	r7, r7, #8
 800229c:	0a12      	lsrs	r2, r2, #8
 800229e:	b171      	cbz	r1, 80022be <EwWarpIndex8RowGradientBlend+0x11c>
 80022a0:	3901      	subs	r1, #1
 80022a2:	29fe      	cmp	r1, #254	; 0xfe
 80022a4:	d80b      	bhi.n	80022be <EwWarpIndex8RowGradientBlend+0x11c>
 80022a6:	f839 c011 	ldrh.w	ip, [r9, r1, lsl #1]
 80022aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80022ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80022b2:	fb0c f707 	mul.w	r7, ip, r7
 80022b6:	fb0c f202 	mul.w	r2, ip, r2
 80022ba:	0a3f      	lsrs	r7, r7, #8
 80022bc:	0a12      	lsrs	r2, r2, #8
 80022be:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80022c2:	0212      	lsls	r2, r2, #8
 80022c4:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 80022c8:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80022cc:	4317      	orrs	r7, r2
 80022ce:	6037      	str	r7, [r6, #0]
 80022d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80022d2:	9a00      	ldr	r2, [sp, #0]
 80022d4:	441a      	add	r2, r3
 80022d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80022d8:	9200      	str	r2, [sp, #0]
 80022da:	449a      	add	sl, r3
 80022dc:	3604      	adds	r6, #4
 80022de:	3801      	subs	r0, #1
 80022e0:	e77a      	b.n	80021d8 <EwWarpIndex8RowGradientBlend+0x36>
 80022e2:	bf00      	nop
 80022e4:	080335d8 	.word	0x080335d8

080022e8 <EwWarpIndex8RowFilterGradientBlend>:
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ec:	b087      	sub	sp, #28
 80022ee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80022f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	680b      	ldr	r3, [r1, #0]
 80022fc:	9303      	str	r3, [sp, #12]
 80022fe:	688b      	ldr	r3, [r1, #8]
 8002300:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002302:	9304      	str	r3, [sp, #16]
 8002304:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002306:	1509      	asrs	r1, r1, #20
 8002308:	3101      	adds	r1, #1
 800230a:	b96b      	cbnz	r3, 8002328 <EwWarpIndex8RowFilterGradientBlend+0x40>
 800230c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800230e:	fab6 f686 	clz	r6, r6
 8002312:	0976      	lsrs	r6, r6, #5
 8002314:	9b04      	ldr	r3, [sp, #16]
 8002316:	9201      	str	r2, [sp, #4]
 8002318:	3301      	adds	r3, #1
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	9b01      	ldr	r3, [sp, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dc04      	bgt.n	800232c <EwWarpIndex8RowFilterGradientBlend+0x44>
 8002322:	b007      	add	sp, #28
 8002324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002328:	2600      	movs	r6, #0
 800232a:	e7f3      	b.n	8002314 <EwWarpIndex8RowFilterGradientBlend+0x2c>
 800232c:	9b02      	ldr	r3, [sp, #8]
 800232e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002330:	131d      	asrs	r5, r3, #12
 8002332:	ea4f 3c22 	mov.w	ip, r2, asr #12
 8002336:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800233a:	435d      	muls	r5, r3
 800233c:	fb02 fc0c 	mul.w	ip, r2, ip
 8002340:	ea4f 3e25 	mov.w	lr, r5, asr #12
 8002344:	ea4f 322c 	mov.w	r2, ip, asr #12
 8002348:	b9fe      	cbnz	r6, 800238a <EwWarpIndex8RowFilterGradientBlend+0xa2>
 800234a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800234c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800234e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002350:	b158      	cbz	r0, 800236a <EwWarpIndex8RowFilterGradientBlend+0x82>
 8002352:	ea5f 402c 	movs.w	r0, ip, asr #16
 8002356:	d002      	beq.n	800235e <EwWarpIndex8RowFilterGradientBlend+0x76>
 8002358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800235a:	fb03 1100 	mla	r1, r3, r0, r1
 800235e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002360:	b11b      	cbz	r3, 800236a <EwWarpIndex8RowFilterGradientBlend+0x82>
 8002362:	b110      	cbz	r0, 800236a <EwWarpIndex8RowFilterGradientBlend+0x82>
 8002364:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002366:	fb03 7700 	mla	r7, r3, r0, r7
 800236a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800236c:	b150      	cbz	r0, 8002384 <EwWarpIndex8RowFilterGradientBlend+0x9c>
 800236e:	142d      	asrs	r5, r5, #16
 8002370:	d008      	beq.n	8002384 <EwWarpIndex8RowFilterGradientBlend+0x9c>
 8002372:	1508      	asrs	r0, r1, #20
 8002374:	ebc0 5727 	rsb	r7, r0, r7, asr #20
 8002378:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800237a:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 800237e:	4347      	muls	r7, r0
 8002380:	fb05 1107 	mla	r1, r5, r7, r1
 8002384:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8002388:	3101      	adds	r1, #1
 800238a:	f1ae 0008 	sub.w	r0, lr, #8
 800238e:	9f04      	ldr	r7, [sp, #16]
 8002390:	3a08      	subs	r2, #8
 8002392:	1113      	asrs	r3, r2, #4
 8002394:	1105      	asrs	r5, r0, #4
 8002396:	fb07 5503 	mla	r5, r7, r3, r5
 800239a:	9b03      	ldr	r3, [sp, #12]
 800239c:	195f      	adds	r7, r3, r5
 800239e:	5d5b      	ldrb	r3, [r3, r5]
 80023a0:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	f002 020f 	and.w	r2, r2, #15
 80023aa:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 80023ae:	9b05      	ldr	r3, [sp, #20]
 80023b0:	f000 000f 	and.w	r0, r0, #15
 80023b4:	f1c2 0e10 	rsb	lr, r2, #16
 80023b8:	f1c0 0c10 	rsb	ip, r0, #16
 80023bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80023c0:	fb02 fc0c 	mul.w	ip, r2, ip
 80023c4:	4350      	muls	r0, r2
 80023c6:	18fa      	adds	r2, r7, r3
 80023c8:	5cfb      	ldrb	r3, [r7, r3]
 80023ca:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80023ce:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80023d2:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
 80023d6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80023da:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80023de:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 80023e2:	0a2a      	lsrs	r2, r5, #8
 80023e4:	eba7 070c 	sub.w	r7, r7, ip
 80023e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80023ec:	1a3f      	subs	r7, r7, r0
 80023ee:	fb0e f202 	mul.w	r2, lr, r2
 80023f2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80023f6:	fb07 220b 	mla	r2, r7, fp, r2
 80023fa:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80023fe:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002402:	fb0e f505 	mul.w	r5, lr, r5
 8002406:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800240a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800240e:	fb07 550a 	mla	r5, r7, sl, r5
 8002412:	fb00 220b 	mla	r2, r0, fp, r2
 8002416:	fb00 5503 	mla	r5, r0, r3, r5
 800241a:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 800241e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8002422:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8002426:	fb0c 5309 	mla	r3, ip, r9, r5
 800242a:	fb0c 220b 	mla	r2, ip, fp, r2
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8002434:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002438:	4313      	orrs	r3, r2
 800243a:	0e12      	lsrs	r2, r2, #24
 800243c:	d038      	beq.n	80024b0 <EwWarpIndex8RowFilterGradientBlend+0x1c8>
 800243e:	9800      	ldr	r0, [sp, #0]
 8002440:	6807      	ldr	r7, [r0, #0]
 8002442:	fb02 1201 	mla	r2, r2, r1, r1
 8002446:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002450:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8002454:	fb02 f000 	mul.w	r0, r2, r0
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	d00d      	beq.n	800247a <EwWarpIndex8RowFilterGradientBlend+0x192>
 800245e:	f5c2 7580 	rsb	r5, r2, #256	; 0x100
 8002462:	fb0c 5505 	mla	r5, ip, r5, r5
 8002466:	0a2d      	lsrs	r5, r5, #8
 8002468:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 800246c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8002470:	fb05 000c 	mla	r0, r5, ip, r0
 8002474:	fb05 3307 	mla	r3, r5, r7, r3
 8002478:	442a      	add	r2, r5
 800247a:	0a00      	lsrs	r0, r0, #8
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b16a      	cbz	r2, 800249c <EwWarpIndex8RowFilterGradientBlend+0x1b4>
 8002480:	3a01      	subs	r2, #1
 8002482:	2afe      	cmp	r2, #254	; 0xfe
 8002484:	d80a      	bhi.n	800249c <EwWarpIndex8RowFilterGradientBlend+0x1b4>
 8002486:	4d12      	ldr	r5, [pc, #72]	; (80024d0 <EwWarpIndex8RowFilterGradientBlend+0x1e8>)
 8002488:	f835 5012 	ldrh.w	r5, [r5, r2, lsl #1]
 800248c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8002490:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002494:	4368      	muls	r0, r5
 8002496:	436b      	muls	r3, r5
 8002498:	0a00      	lsrs	r0, r0, #8
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80024a6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80024aa:	4318      	orrs	r0, r3
 80024ac:	9b00      	ldr	r3, [sp, #0]
 80024ae:	6018      	str	r0, [r3, #0]
 80024b0:	9b02      	ldr	r3, [sp, #8]
 80024b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80024b4:	4413      	add	r3, r2
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80024ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80024bc:	4413      	add	r3, r2
 80024be:	9310      	str	r3, [sp, #64]	; 0x40
 80024c0:	9b00      	ldr	r3, [sp, #0]
 80024c2:	3304      	adds	r3, #4
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	e726      	b.n	800231c <EwWarpIndex8RowFilterGradientBlend+0x34>
 80024ce:	bf00      	nop
 80024d0:	080335d8 	.word	0x080335d8

080024d4 <EwWarpAlpha8RowGradient>:
 80024d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d8:	b087      	sub	sp, #28
 80024da:	469e      	mov	lr, r3
 80024dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80024de:	680b      	ldr	r3, [r1, #0]
 80024e0:	9304      	str	r3, [sp, #16]
 80024e2:	688b      	ldr	r3, [r1, #8]
 80024e4:	9305      	str	r3, [sp, #20]
 80024e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024e8:	f8d0 9000 	ldr.w	r9, [r0]
 80024ec:	b9eb      	cbnz	r3, 800252a <EwWarpAlpha8RowGradient+0x56>
 80024ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024f0:	fab3 fb83 	clz	fp, r3
 80024f4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	6a21      	ldr	r1, [r4, #32]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f403 007f 	and.w	r0, r3, #16711680	; 0xff0000
 8002502:	6923      	ldr	r3, [r4, #16]
 8002504:	0b1b      	lsrs	r3, r3, #12
 8002506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800250a:	f3c1 5107 	ubfx	r1, r1, #20, #8
 800250e:	4303      	orrs	r3, r0
 8002510:	430b      	orrs	r3, r1
 8002512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002514:	0109      	lsls	r1, r1, #4
 8002516:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800251a:	4319      	orrs	r1, r3
 800251c:	4694      	mov	ip, r2
 800251e:	f1bc 0f00 	cmp.w	ip, #0
 8002522:	dc05      	bgt.n	8002530 <EwWarpAlpha8RowGradient+0x5c>
 8002524:	b007      	add	sp, #28
 8002526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800252a:	f04f 0b00 	mov.w	fp, #0
 800252e:	e7e3      	b.n	80024f8 <EwWarpAlpha8RowGradient+0x24>
 8002530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002532:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002534:	9d04      	ldr	r5, [sp, #16]
 8002536:	ea4f 332e 	mov.w	r3, lr, asr #12
 800253a:	4353      	muls	r3, r2
 800253c:	141a      	asrs	r2, r3, #16
 800253e:	9203      	str	r2, [sp, #12]
 8002540:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002542:	1312      	asrs	r2, r2, #12
 8002544:	4342      	muls	r2, r0
 8002546:	9805      	ldr	r0, [sp, #20]
 8002548:	1412      	asrs	r2, r2, #16
 800254a:	4350      	muls	r0, r2
 800254c:	eb05 4323 	add.w	r3, r5, r3, asr #16
 8002550:	f813 a000 	ldrb.w	sl, [r3, r0]
 8002554:	f1bb 0f00 	cmp.w	fp, #0
 8002558:	d165      	bne.n	8002626 <EwWarpAlpha8RowGradient+0x152>
 800255a:	68a6      	ldr	r6, [r4, #8]
 800255c:	9600      	str	r6, [sp, #0]
 800255e:	69a6      	ldr	r6, [r4, #24]
 8002560:	9601      	str	r6, [sp, #4]
 8002562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002564:	9602      	str	r6, [sp, #8]
 8002566:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	6921      	ldr	r1, [r4, #16]
 800256c:	6a23      	ldr	r3, [r4, #32]
 800256e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002570:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8002574:	b31e      	cbz	r6, 80025be <EwWarpAlpha8RowGradient+0xea>
 8002576:	b15a      	cbz	r2, 8002590 <EwWarpAlpha8RowGradient+0xbc>
 8002578:	6866      	ldr	r6, [r4, #4]
 800257a:	fb06 0002 	mla	r0, r6, r2, r0
 800257e:	6966      	ldr	r6, [r4, #20]
 8002580:	fb06 1102 	mla	r1, r6, r2, r1
 8002584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002586:	fb06 3302 	mla	r3, r6, r2, r3
 800258a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800258c:	fb06 5502 	mla	r5, r6, r2, r5
 8002590:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8002592:	b1a6      	cbz	r6, 80025be <EwWarpAlpha8RowGradient+0xea>
 8002594:	b19a      	cbz	r2, 80025be <EwWarpAlpha8RowGradient+0xea>
 8002596:	9f00      	ldr	r7, [sp, #0]
 8002598:	68e6      	ldr	r6, [r4, #12]
 800259a:	fb06 7602 	mla	r6, r6, r2, r7
 800259e:	9600      	str	r6, [sp, #0]
 80025a0:	9e01      	ldr	r6, [sp, #4]
 80025a2:	4637      	mov	r7, r6
 80025a4:	69e6      	ldr	r6, [r4, #28]
 80025a6:	fb06 7602 	mla	r6, r6, r2, r7
 80025aa:	9601      	str	r6, [sp, #4]
 80025ac:	9e02      	ldr	r6, [sp, #8]
 80025ae:	4637      	mov	r7, r6
 80025b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025b2:	fb06 7602 	mla	r6, r6, r2, r7
 80025b6:	9602      	str	r6, [sp, #8]
 80025b8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80025ba:	fb06 8802 	mla	r8, r6, r2, r8
 80025be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025c0:	b31a      	cbz	r2, 800260a <EwWarpAlpha8RowGradient+0x136>
 80025c2:	9a03      	ldr	r2, [sp, #12]
 80025c4:	b30a      	cbz	r2, 800260a <EwWarpAlpha8RowGradient+0x136>
 80025c6:	9e03      	ldr	r6, [sp, #12]
 80025c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025ca:	4372      	muls	r2, r6
 80025cc:	9e00      	ldr	r6, [sp, #0]
 80025ce:	1507      	asrs	r7, r0, #20
 80025d0:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 80025d4:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 80025d8:	9f01      	ldr	r7, [sp, #4]
 80025da:	fb02 0006 	mla	r0, r2, r6, r0
 80025de:	150e      	asrs	r6, r1, #20
 80025e0:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 80025e4:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80025e8:	9f02      	ldr	r7, [sp, #8]
 80025ea:	fb02 1106 	mla	r1, r2, r6, r1
 80025ee:	151e      	asrs	r6, r3, #20
 80025f0:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 80025f4:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 80025f8:	fb02 3306 	mla	r3, r2, r6, r3
 80025fc:	152e      	asrs	r6, r5, #20
 80025fe:	ebc6 5628 	rsb	r6, r6, r8, asr #20
 8002602:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8002606:	fb02 5506 	mla	r5, r2, r6, r5
 800260a:	0900      	lsrs	r0, r0, #4
 800260c:	0b09      	lsrs	r1, r1, #12
 800260e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8002612:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8002616:	4301      	orrs	r1, r0
 8002618:	f3c3 5307 	ubfx	r3, r3, #20, #8
 800261c:	012d      	lsls	r5, r5, #4
 800261e:	4319      	orrs	r1, r3
 8002620:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8002624:	4329      	orrs	r1, r5
 8002626:	f1ba 0f00 	cmp.w	sl, #0
 800262a:	d10c      	bne.n	8002646 <EwWarpAlpha8RowGradient+0x172>
 800262c:	f8c9 a000 	str.w	sl, [r9]
 8002630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002632:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002634:	449e      	add	lr, r3
 8002636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002638:	4413      	add	r3, r2
 800263a:	9310      	str	r3, [sp, #64]	; 0x40
 800263c:	f109 0904 	add.w	r9, r9, #4
 8002640:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002644:	e76b      	b.n	800251e <EwWarpAlpha8RowGradient+0x4a>
 8002646:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800264a:	bf1f      	itttt	ne
 800264c:	0e0b      	lsrne	r3, r1, #24
 800264e:	fb0a 3303 	mlane	r3, sl, r3, r3
 8002652:	0a1b      	lsrne	r3, r3, #8
 8002654:	f021 4a7f 	bicne.w	sl, r1, #4278190080	; 0xff000000
 8002658:	bf16      	itet	ne
 800265a:	ea4a 6303 	orrne.w	r3, sl, r3, lsl #24
 800265e:	f8c9 1000 	streq.w	r1, [r9]
 8002662:	f8c9 3000 	strne.w	r3, [r9]
 8002666:	e7e3      	b.n	8002630 <EwWarpAlpha8RowGradient+0x15c>

08002668 <EwWarpAlpha8RowFilterGradient>:
 8002668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266c:	b089      	sub	sp, #36	; 0x24
 800266e:	f8d0 a000 	ldr.w	sl, [r0]
 8002672:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	680b      	ldr	r3, [r1, #0]
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	688b      	ldr	r3, [r1, #8]
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002680:	bb03      	cbnz	r3, 80026c4 <EwWarpAlpha8RowFilterGradient+0x5c>
 8002682:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002684:	fab3 fb83 	clz	fp, r3
 8002688:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	6921      	ldr	r1, [r4, #16]
 8002690:	6a20      	ldr	r0, [r4, #32]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
 8002698:	0b0b      	lsrs	r3, r1, #12
 800269a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800269e:	f3c0 5007 	ubfx	r0, r0, #20, #8
 80026a2:	432b      	orrs	r3, r5
 80026a4:	4303      	orrs	r3, r0
 80026a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80026a8:	4690      	mov	r8, r2
 80026aa:	9a04      	ldr	r2, [sp, #16]
 80026ac:	0100      	lsls	r0, r0, #4
 80026ae:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80026b2:	3201      	adds	r2, #1
 80026b4:	4303      	orrs	r3, r0
 80026b6:	9205      	str	r2, [sp, #20]
 80026b8:	f1b8 0f00 	cmp.w	r8, #0
 80026bc:	dc05      	bgt.n	80026ca <EwWarpAlpha8RowFilterGradient+0x62>
 80026be:	b009      	add	sp, #36	; 0x24
 80026c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c4:	f04f 0b00 	mov.w	fp, #0
 80026c8:	e7e0      	b.n	800268c <EwWarpAlpha8RowFilterGradient+0x24>
 80026ca:	9a02      	ldr	r2, [sp, #8]
 80026cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80026ce:	ea4f 3922 	mov.w	r9, r2, asr #12
 80026d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80026d4:	fb02 f909 	mul.w	r9, r2, r9
 80026d8:	ea4f 3229 	mov.w	r2, r9, asr #12
 80026dc:	9206      	str	r2, [sp, #24]
 80026de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80026e0:	1312      	asrs	r2, r2, #12
 80026e2:	434a      	muls	r2, r1
 80026e4:	1311      	asrs	r1, r2, #12
 80026e6:	9107      	str	r1, [sp, #28]
 80026e8:	f1bb 0f00 	cmp.w	fp, #0
 80026ec:	d162      	bne.n	80027b4 <EwWarpAlpha8RowFilterGradient+0x14c>
 80026ee:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80026f0:	9701      	str	r7, [sp, #4]
 80026f2:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80026f4:	68a6      	ldr	r6, [r4, #8]
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	6921      	ldr	r1, [r4, #16]
 80026fa:	6a23      	ldr	r3, [r4, #32]
 80026fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80026fe:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002702:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 8002706:	9600      	str	r6, [sp, #0]
 8002708:	b307      	cbz	r7, 800274c <EwWarpAlpha8RowFilterGradient+0xe4>
 800270a:	1412      	asrs	r2, r2, #16
 800270c:	d00b      	beq.n	8002726 <EwWarpAlpha8RowFilterGradient+0xbe>
 800270e:	6867      	ldr	r7, [r4, #4]
 8002710:	fb07 0002 	mla	r0, r7, r2, r0
 8002714:	6967      	ldr	r7, [r4, #20]
 8002716:	fb07 1102 	mla	r1, r7, r2, r1
 800271a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800271c:	fb07 3302 	mla	r3, r7, r2, r3
 8002720:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002722:	fb07 5502 	mla	r5, r7, r2, r5
 8002726:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8002728:	b187      	cbz	r7, 800274c <EwWarpAlpha8RowFilterGradient+0xe4>
 800272a:	b17a      	cbz	r2, 800274c <EwWarpAlpha8RowFilterGradient+0xe4>
 800272c:	68e7      	ldr	r7, [r4, #12]
 800272e:	9e00      	ldr	r6, [sp, #0]
 8002730:	fb07 6602 	mla	r6, r7, r2, r6
 8002734:	69e7      	ldr	r7, [r4, #28]
 8002736:	9600      	str	r6, [sp, #0]
 8002738:	fb07 cc02 	mla	ip, r7, r2, ip
 800273c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800273e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002740:	fb07 ee02 	mla	lr, r7, r2, lr
 8002744:	9f01      	ldr	r7, [sp, #4]
 8002746:	fb06 7202 	mla	r2, r6, r2, r7
 800274a:	9201      	str	r2, [sp, #4]
 800274c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800274e:	b31a      	cbz	r2, 8002798 <EwWarpAlpha8RowFilterGradient+0x130>
 8002750:	ea5f 4929 	movs.w	r9, r9, asr #16
 8002754:	d020      	beq.n	8002798 <EwWarpAlpha8RowFilterGradient+0x130>
 8002756:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002758:	9e00      	ldr	r6, [sp, #0]
 800275a:	1507      	asrs	r7, r0, #20
 800275c:	fb02 f209 	mul.w	r2, r2, r9
 8002760:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 8002764:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 8002768:	fb02 0006 	mla	r0, r2, r6, r0
 800276c:	150e      	asrs	r6, r1, #20
 800276e:	ebc6 562c 	rsb	r6, r6, ip, asr #20
 8002772:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002776:	fb02 1106 	mla	r1, r2, r6, r1
 800277a:	151e      	asrs	r6, r3, #20
 800277c:	ebc6 562e 	rsb	r6, r6, lr, asr #20
 8002780:	9f01      	ldr	r7, [sp, #4]
 8002782:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8002786:	fb02 3306 	mla	r3, r2, r6, r3
 800278a:	152e      	asrs	r6, r5, #20
 800278c:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 8002790:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8002794:	fb02 5506 	mla	r5, r2, r6, r5
 8002798:	0900      	lsrs	r0, r0, #4
 800279a:	0b09      	lsrs	r1, r1, #12
 800279c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80027a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80027a4:	4308      	orrs	r0, r1
 80027a6:	f3c3 5307 	ubfx	r3, r3, #20, #8
 80027aa:	012d      	lsls	r5, r5, #4
 80027ac:	4303      	orrs	r3, r0
 80027ae:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80027b2:	432b      	orrs	r3, r5
 80027b4:	9907      	ldr	r1, [sp, #28]
 80027b6:	9a06      	ldr	r2, [sp, #24]
 80027b8:	9e04      	ldr	r6, [sp, #16]
 80027ba:	f1a1 0008 	sub.w	r0, r1, #8
 80027be:	3a08      	subs	r2, #8
 80027c0:	1105      	asrs	r5, r0, #4
 80027c2:	1111      	asrs	r1, r2, #4
 80027c4:	fb06 1105 	mla	r1, r6, r5, r1
 80027c8:	9d03      	ldr	r5, [sp, #12]
 80027ca:	f000 000f 	and.w	r0, r0, #15
 80027ce:	f002 020f 	and.w	r2, r2, #15
 80027d2:	186f      	adds	r7, r5, r1
 80027d4:	f1c0 0610 	rsb	r6, r0, #16
 80027d8:	f1c2 0510 	rsb	r5, r2, #16
 80027dc:	4356      	muls	r6, r2
 80027de:	4345      	muls	r5, r0
 80027e0:	4342      	muls	r2, r0
 80027e2:	9805      	ldr	r0, [sp, #20]
 80027e4:	eb07 0c00 	add.w	ip, r7, r0
 80027e8:	f5c6 7080 	rsb	r0, r6, #256	; 0x100
 80027ec:	1b40      	subs	r0, r0, r5
 80027ee:	eba0 0902 	sub.w	r9, r0, r2
 80027f2:	9803      	ldr	r0, [sp, #12]
 80027f4:	f810 e001 	ldrb.w	lr, [r0, r1]
 80027f8:	7879      	ldrb	r1, [r7, #1]
 80027fa:	9805      	ldr	r0, [sp, #20]
 80027fc:	4371      	muls	r1, r6
 80027fe:	5c3e      	ldrb	r6, [r7, r0]
 8002800:	fb0e 1109 	mla	r1, lr, r9, r1
 8002804:	fb02 1106 	mla	r1, r2, r6, r1
 8002808:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
 800280c:	fb05 1606 	mla	r6, r5, r6, r1
 8002810:	0a36      	lsrs	r6, r6, #8
 8002812:	d102      	bne.n	800281a <EwWarpAlpha8RowFilterGradient+0x1b2>
 8002814:	f8ca 6000 	str.w	r6, [sl]
 8002818:	e003      	b.n	8002822 <EwWarpAlpha8RowFilterGradient+0x1ba>
 800281a:	2eff      	cmp	r6, #255	; 0xff
 800281c:	d10e      	bne.n	800283c <EwWarpAlpha8RowFilterGradient+0x1d4>
 800281e:	f8ca 3000 	str.w	r3, [sl]
 8002822:	9a02      	ldr	r2, [sp, #8]
 8002824:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002826:	440a      	add	r2, r1
 8002828:	9202      	str	r2, [sp, #8]
 800282a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800282c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800282e:	440a      	add	r2, r1
 8002830:	9212      	str	r2, [sp, #72]	; 0x48
 8002832:	f10a 0a04 	add.w	sl, sl, #4
 8002836:	f108 38ff 	add.w	r8, r8, #4294967295
 800283a:	e73d      	b.n	80026b8 <EwWarpAlpha8RowFilterGradient+0x50>
 800283c:	0e19      	lsrs	r1, r3, #24
 800283e:	fb06 1601 	mla	r6, r6, r1, r1
 8002842:	0a36      	lsrs	r6, r6, #8
 8002844:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8002848:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800284c:	e7e2      	b.n	8002814 <EwWarpAlpha8RowFilterGradient+0x1ac>

0800284e <EwWarpAlpha8RowGradientBlend>:
 800284e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002852:	b087      	sub	sp, #28
 8002854:	469e      	mov	lr, r3
 8002856:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002858:	680b      	ldr	r3, [r1, #0]
 800285a:	9304      	str	r3, [sp, #16]
 800285c:	688b      	ldr	r3, [r1, #8]
 800285e:	9305      	str	r3, [sp, #20]
 8002860:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002862:	f8d0 b000 	ldr.w	fp, [r0]
 8002866:	b9eb      	cbnz	r3, 80028a4 <EwWarpAlpha8RowGradientBlend+0x56>
 8002868:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800286a:	fab3 f983 	clz	r9, r3
 800286e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	6921      	ldr	r1, [r4, #16]
 8002876:	6a20      	ldr	r0, [r4, #32]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
 800287e:	0b0b      	lsrs	r3, r1, #12
 8002880:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002884:	f3c0 5007 	ubfx	r0, r0, #20, #8
 8002888:	432b      	orrs	r3, r5
 800288a:	4303      	orrs	r3, r0
 800288c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800288e:	0100      	lsls	r0, r0, #4
 8002890:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8002894:	4303      	orrs	r3, r0
 8002896:	4694      	mov	ip, r2
 8002898:	f1bc 0f00 	cmp.w	ip, #0
 800289c:	dc05      	bgt.n	80028aa <EwWarpAlpha8RowGradientBlend+0x5c>
 800289e:	b007      	add	sp, #28
 80028a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a4:	f04f 0900 	mov.w	r9, #0
 80028a8:	e7e3      	b.n	8002872 <EwWarpAlpha8RowGradientBlend+0x24>
 80028aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80028ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 80028ae:	9d04      	ldr	r5, [sp, #16]
 80028b0:	ea4f 312e 	mov.w	r1, lr, asr #12
 80028b4:	4351      	muls	r1, r2
 80028b6:	140a      	asrs	r2, r1, #16
 80028b8:	9203      	str	r2, [sp, #12]
 80028ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028bc:	1312      	asrs	r2, r2, #12
 80028be:	4342      	muls	r2, r0
 80028c0:	9805      	ldr	r0, [sp, #20]
 80028c2:	1412      	asrs	r2, r2, #16
 80028c4:	4350      	muls	r0, r2
 80028c6:	eb05 4121 	add.w	r1, r5, r1, asr #16
 80028ca:	f811 a000 	ldrb.w	sl, [r1, r0]
 80028ce:	f1b9 0f00 	cmp.w	r9, #0
 80028d2:	d165      	bne.n	80029a0 <EwWarpAlpha8RowGradientBlend+0x152>
 80028d4:	68a6      	ldr	r6, [r4, #8]
 80028d6:	9600      	str	r6, [sp, #0]
 80028d8:	69a6      	ldr	r6, [r4, #24]
 80028da:	9601      	str	r6, [sp, #4]
 80028dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028de:	9602      	str	r6, [sp, #8]
 80028e0:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	6921      	ldr	r1, [r4, #16]
 80028e6:	6a23      	ldr	r3, [r4, #32]
 80028e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80028ea:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80028ee:	b31e      	cbz	r6, 8002938 <EwWarpAlpha8RowGradientBlend+0xea>
 80028f0:	b15a      	cbz	r2, 800290a <EwWarpAlpha8RowGradientBlend+0xbc>
 80028f2:	6866      	ldr	r6, [r4, #4]
 80028f4:	fb06 0002 	mla	r0, r6, r2, r0
 80028f8:	6966      	ldr	r6, [r4, #20]
 80028fa:	fb06 1102 	mla	r1, r6, r2, r1
 80028fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002900:	fb06 3302 	mla	r3, r6, r2, r3
 8002904:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002906:	fb06 5502 	mla	r5, r6, r2, r5
 800290a:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800290c:	b1a6      	cbz	r6, 8002938 <EwWarpAlpha8RowGradientBlend+0xea>
 800290e:	b19a      	cbz	r2, 8002938 <EwWarpAlpha8RowGradientBlend+0xea>
 8002910:	9f00      	ldr	r7, [sp, #0]
 8002912:	68e6      	ldr	r6, [r4, #12]
 8002914:	fb06 7602 	mla	r6, r6, r2, r7
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	9e01      	ldr	r6, [sp, #4]
 800291c:	4637      	mov	r7, r6
 800291e:	69e6      	ldr	r6, [r4, #28]
 8002920:	fb06 7602 	mla	r6, r6, r2, r7
 8002924:	9601      	str	r6, [sp, #4]
 8002926:	9e02      	ldr	r6, [sp, #8]
 8002928:	4637      	mov	r7, r6
 800292a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800292c:	fb06 7602 	mla	r6, r6, r2, r7
 8002930:	9602      	str	r6, [sp, #8]
 8002932:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002934:	fb06 8802 	mla	r8, r6, r2, r8
 8002938:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800293a:	b31a      	cbz	r2, 8002984 <EwWarpAlpha8RowGradientBlend+0x136>
 800293c:	9a03      	ldr	r2, [sp, #12]
 800293e:	b30a      	cbz	r2, 8002984 <EwWarpAlpha8RowGradientBlend+0x136>
 8002940:	9e03      	ldr	r6, [sp, #12]
 8002942:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002944:	4372      	muls	r2, r6
 8002946:	9e00      	ldr	r6, [sp, #0]
 8002948:	1507      	asrs	r7, r0, #20
 800294a:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 800294e:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 8002952:	9f01      	ldr	r7, [sp, #4]
 8002954:	fb02 0006 	mla	r0, r2, r6, r0
 8002958:	150e      	asrs	r6, r1, #20
 800295a:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800295e:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002962:	9f02      	ldr	r7, [sp, #8]
 8002964:	fb02 1106 	mla	r1, r2, r6, r1
 8002968:	151e      	asrs	r6, r3, #20
 800296a:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800296e:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8002972:	fb02 3306 	mla	r3, r2, r6, r3
 8002976:	152e      	asrs	r6, r5, #20
 8002978:	ebc6 5628 	rsb	r6, r6, r8, asr #20
 800297c:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8002980:	fb02 5506 	mla	r5, r2, r6, r5
 8002984:	0900      	lsrs	r0, r0, #4
 8002986:	0b09      	lsrs	r1, r1, #12
 8002988:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800298c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8002990:	4308      	orrs	r0, r1
 8002992:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8002996:	012d      	lsls	r5, r5, #4
 8002998:	4303      	orrs	r3, r0
 800299a:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800299e:	432b      	orrs	r3, r5
 80029a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80029a4:	ea4f 6113 	mov.w	r1, r3, lsr #24
 80029a8:	d10e      	bne.n	80029c8 <EwWarpAlpha8RowGradientBlend+0x17a>
 80029aa:	29ff      	cmp	r1, #255	; 0xff
 80029ac:	d10f      	bne.n	80029ce <EwWarpAlpha8RowGradientBlend+0x180>
 80029ae:	f8cb 3000 	str.w	r3, [fp]
 80029b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80029b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80029b6:	4496      	add	lr, r2
 80029b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80029ba:	440a      	add	r2, r1
 80029bc:	9210      	str	r2, [sp, #64]	; 0x40
 80029be:	f10b 0b04 	add.w	fp, fp, #4
 80029c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80029c6:	e767      	b.n	8002898 <EwWarpAlpha8RowGradientBlend+0x4a>
 80029c8:	f1ba 0f00 	cmp.w	sl, #0
 80029cc:	d0f1      	beq.n	80029b2 <EwWarpAlpha8RowGradientBlend+0x164>
 80029ce:	2900      	cmp	r1, #0
 80029d0:	d0ef      	beq.n	80029b2 <EwWarpAlpha8RowGradientBlend+0x164>
 80029d2:	f8db 6000 	ldr.w	r6, [fp]
 80029d6:	3101      	adds	r1, #1
 80029d8:	fb0a 1101 	mla	r1, sl, r1, r1
 80029dc:	0a09      	lsrs	r1, r1, #8
 80029de:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80029e2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80029e6:	0e37      	lsrs	r7, r6, #24
 80029e8:	fb01 f202 	mul.w	r2, r1, r2
 80029ec:	fb01 f000 	mul.w	r0, r1, r0
 80029f0:	d00d      	beq.n	8002a0e <EwWarpAlpha8RowGradientBlend+0x1c0>
 80029f2:	f5c1 7580 	rsb	r5, r1, #256	; 0x100
 80029f6:	fb07 5505 	mla	r5, r7, r5, r5
 80029fa:	0a2d      	lsrs	r5, r5, #8
 80029fc:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8002a00:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8002a04:	fb05 2207 	mla	r2, r5, r7, r2
 8002a08:	fb05 0006 	mla	r0, r5, r6, r0
 8002a0c:	4429      	add	r1, r5
 8002a0e:	0a12      	lsrs	r2, r2, #8
 8002a10:	0a00      	lsrs	r0, r0, #8
 8002a12:	b169      	cbz	r1, 8002a30 <EwWarpAlpha8RowGradientBlend+0x1e2>
 8002a14:	3901      	subs	r1, #1
 8002a16:	29fe      	cmp	r1, #254	; 0xfe
 8002a18:	d80a      	bhi.n	8002a30 <EwWarpAlpha8RowGradientBlend+0x1e2>
 8002a1a:	4d0b      	ldr	r5, [pc, #44]	; (8002a48 <EwWarpAlpha8RowGradientBlend+0x1fa>)
 8002a1c:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
 8002a20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002a24:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8002a28:	436a      	muls	r2, r5
 8002a2a:	4368      	muls	r0, r5
 8002a2c:	0a12      	lsrs	r2, r2, #8
 8002a2e:	0a00      	lsrs	r0, r0, #8
 8002a30:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002a34:	0200      	lsls	r0, r0, #8
 8002a36:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a3a:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8002a3e:	4302      	orrs	r2, r0
 8002a40:	f8cb 2000 	str.w	r2, [fp]
 8002a44:	e7b5      	b.n	80029b2 <EwWarpAlpha8RowGradientBlend+0x164>
 8002a46:	bf00      	nop
 8002a48:	080335d8 	.word	0x080335d8

08002a4c <EwWarpAlpha8RowFilterGradientBlend>:
 8002a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	b089      	sub	sp, #36	; 0x24
 8002a52:	f8d0 a000 	ldr.w	sl, [r0]
 8002a56:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	680b      	ldr	r3, [r1, #0]
 8002a5c:	9303      	str	r3, [sp, #12]
 8002a5e:	688b      	ldr	r3, [r1, #8]
 8002a60:	9304      	str	r3, [sp, #16]
 8002a62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a64:	bb03      	cbnz	r3, 8002aa8 <EwWarpAlpha8RowFilterGradientBlend+0x5c>
 8002a66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a68:	fab3 fb83 	clz	fp, r3
 8002a6c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6921      	ldr	r1, [r4, #16]
 8002a74:	6a20      	ldr	r0, [r4, #32]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
 8002a7c:	0b0b      	lsrs	r3, r1, #12
 8002a7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a82:	f3c0 5007 	ubfx	r0, r0, #20, #8
 8002a86:	432b      	orrs	r3, r5
 8002a88:	4303      	orrs	r3, r0
 8002a8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002a8c:	4690      	mov	r8, r2
 8002a8e:	9a04      	ldr	r2, [sp, #16]
 8002a90:	0100      	lsls	r0, r0, #4
 8002a92:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8002a96:	3201      	adds	r2, #1
 8002a98:	4303      	orrs	r3, r0
 8002a9a:	9205      	str	r2, [sp, #20]
 8002a9c:	f1b8 0f00 	cmp.w	r8, #0
 8002aa0:	dc05      	bgt.n	8002aae <EwWarpAlpha8RowFilterGradientBlend+0x62>
 8002aa2:	b009      	add	sp, #36	; 0x24
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa8:	f04f 0b00 	mov.w	fp, #0
 8002aac:	e7e0      	b.n	8002a70 <EwWarpAlpha8RowFilterGradientBlend+0x24>
 8002aae:	9a02      	ldr	r2, [sp, #8]
 8002ab0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002ab2:	ea4f 3922 	mov.w	r9, r2, asr #12
 8002ab6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ab8:	fb02 f909 	mul.w	r9, r2, r9
 8002abc:	ea4f 3229 	mov.w	r2, r9, asr #12
 8002ac0:	9206      	str	r2, [sp, #24]
 8002ac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ac4:	1312      	asrs	r2, r2, #12
 8002ac6:	434a      	muls	r2, r1
 8002ac8:	1311      	asrs	r1, r2, #12
 8002aca:	9107      	str	r1, [sp, #28]
 8002acc:	f1bb 0f00 	cmp.w	fp, #0
 8002ad0:	d162      	bne.n	8002b98 <EwWarpAlpha8RowFilterGradientBlend+0x14c>
 8002ad2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002ad4:	9701      	str	r7, [sp, #4]
 8002ad6:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8002ad8:	68a6      	ldr	r6, [r4, #8]
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	6921      	ldr	r1, [r4, #16]
 8002ade:	6a23      	ldr	r3, [r4, #32]
 8002ae0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002ae2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002ae6:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 8002aea:	9600      	str	r6, [sp, #0]
 8002aec:	b307      	cbz	r7, 8002b30 <EwWarpAlpha8RowFilterGradientBlend+0xe4>
 8002aee:	1412      	asrs	r2, r2, #16
 8002af0:	d00b      	beq.n	8002b0a <EwWarpAlpha8RowFilterGradientBlend+0xbe>
 8002af2:	6867      	ldr	r7, [r4, #4]
 8002af4:	fb07 0002 	mla	r0, r7, r2, r0
 8002af8:	6967      	ldr	r7, [r4, #20]
 8002afa:	fb07 1102 	mla	r1, r7, r2, r1
 8002afe:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8002b00:	fb07 3302 	mla	r3, r7, r2, r3
 8002b04:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002b06:	fb07 5502 	mla	r5, r7, r2, r5
 8002b0a:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8002b0c:	b187      	cbz	r7, 8002b30 <EwWarpAlpha8RowFilterGradientBlend+0xe4>
 8002b0e:	b17a      	cbz	r2, 8002b30 <EwWarpAlpha8RowFilterGradientBlend+0xe4>
 8002b10:	68e7      	ldr	r7, [r4, #12]
 8002b12:	9e00      	ldr	r6, [sp, #0]
 8002b14:	fb07 6602 	mla	r6, r7, r2, r6
 8002b18:	69e7      	ldr	r7, [r4, #28]
 8002b1a:	9600      	str	r6, [sp, #0]
 8002b1c:	fb07 cc02 	mla	ip, r7, r2, ip
 8002b20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002b22:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002b24:	fb07 ee02 	mla	lr, r7, r2, lr
 8002b28:	9f01      	ldr	r7, [sp, #4]
 8002b2a:	fb06 7202 	mla	r2, r6, r2, r7
 8002b2e:	9201      	str	r2, [sp, #4]
 8002b30:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002b32:	b31a      	cbz	r2, 8002b7c <EwWarpAlpha8RowFilterGradientBlend+0x130>
 8002b34:	ea5f 4929 	movs.w	r9, r9, asr #16
 8002b38:	d020      	beq.n	8002b7c <EwWarpAlpha8RowFilterGradientBlend+0x130>
 8002b3a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002b3c:	9e00      	ldr	r6, [sp, #0]
 8002b3e:	1507      	asrs	r7, r0, #20
 8002b40:	fb02 f209 	mul.w	r2, r2, r9
 8002b44:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 8002b48:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 8002b4c:	fb02 0006 	mla	r0, r2, r6, r0
 8002b50:	150e      	asrs	r6, r1, #20
 8002b52:	ebc6 562c 	rsb	r6, r6, ip, asr #20
 8002b56:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002b5a:	fb02 1106 	mla	r1, r2, r6, r1
 8002b5e:	151e      	asrs	r6, r3, #20
 8002b60:	ebc6 562e 	rsb	r6, r6, lr, asr #20
 8002b64:	9f01      	ldr	r7, [sp, #4]
 8002b66:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8002b6a:	fb02 3306 	mla	r3, r2, r6, r3
 8002b6e:	152e      	asrs	r6, r5, #20
 8002b70:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 8002b74:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8002b78:	fb02 5506 	mla	r5, r2, r6, r5
 8002b7c:	0900      	lsrs	r0, r0, #4
 8002b7e:	0b09      	lsrs	r1, r1, #12
 8002b80:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8002b84:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8002b88:	4308      	orrs	r0, r1
 8002b8a:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8002b8e:	012d      	lsls	r5, r5, #4
 8002b90:	4303      	orrs	r3, r0
 8002b92:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8002b96:	432b      	orrs	r3, r5
 8002b98:	9907      	ldr	r1, [sp, #28]
 8002b9a:	9a06      	ldr	r2, [sp, #24]
 8002b9c:	9e04      	ldr	r6, [sp, #16]
 8002b9e:	f1a1 0008 	sub.w	r0, r1, #8
 8002ba2:	3a08      	subs	r2, #8
 8002ba4:	1105      	asrs	r5, r0, #4
 8002ba6:	1111      	asrs	r1, r2, #4
 8002ba8:	fb06 1105 	mla	r1, r6, r5, r1
 8002bac:	9d03      	ldr	r5, [sp, #12]
 8002bae:	f000 000f 	and.w	r0, r0, #15
 8002bb2:	f002 020f 	and.w	r2, r2, #15
 8002bb6:	186f      	adds	r7, r5, r1
 8002bb8:	f1c0 0610 	rsb	r6, r0, #16
 8002bbc:	f1c2 0510 	rsb	r5, r2, #16
 8002bc0:	4345      	muls	r5, r0
 8002bc2:	4356      	muls	r6, r2
 8002bc4:	4342      	muls	r2, r0
 8002bc6:	9805      	ldr	r0, [sp, #20]
 8002bc8:	eb07 0c00 	add.w	ip, r7, r0
 8002bcc:	f5c6 7080 	rsb	r0, r6, #256	; 0x100
 8002bd0:	1b40      	subs	r0, r0, r5
 8002bd2:	eba0 0902 	sub.w	r9, r0, r2
 8002bd6:	9803      	ldr	r0, [sp, #12]
 8002bd8:	f810 e001 	ldrb.w	lr, [r0, r1]
 8002bdc:	7879      	ldrb	r1, [r7, #1]
 8002bde:	9805      	ldr	r0, [sp, #20]
 8002be0:	4371      	muls	r1, r6
 8002be2:	5c38      	ldrb	r0, [r7, r0]
 8002be4:	fb0e 1109 	mla	r1, lr, r9, r1
 8002be8:	fb02 1100 	mla	r1, r2, r0, r1
 8002bec:	f81c 0c01 	ldrb.w	r0, [ip, #-1]
 8002bf0:	fb05 1000 	mla	r0, r5, r0, r1
 8002bf4:	0a00      	lsrs	r0, r0, #8
 8002bf6:	28ff      	cmp	r0, #255	; 0xff
 8002bf8:	ea4f 6513 	mov.w	r5, r3, lsr #24
 8002bfc:	d110      	bne.n	8002c20 <EwWarpAlpha8RowFilterGradientBlend+0x1d4>
 8002bfe:	2dff      	cmp	r5, #255	; 0xff
 8002c00:	d110      	bne.n	8002c24 <EwWarpAlpha8RowFilterGradientBlend+0x1d8>
 8002c02:	f8ca 3000 	str.w	r3, [sl]
 8002c06:	9a02      	ldr	r2, [sp, #8]
 8002c08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002c0a:	440a      	add	r2, r1
 8002c0c:	9202      	str	r2, [sp, #8]
 8002c0e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002c12:	440a      	add	r2, r1
 8002c14:	9212      	str	r2, [sp, #72]	; 0x48
 8002c16:	f10a 0a04 	add.w	sl, sl, #4
 8002c1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8002c1e:	e73d      	b.n	8002a9c <EwWarpAlpha8RowFilterGradientBlend+0x50>
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d0f0      	beq.n	8002c06 <EwWarpAlpha8RowFilterGradientBlend+0x1ba>
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d0ee      	beq.n	8002c06 <EwWarpAlpha8RowFilterGradientBlend+0x1ba>
 8002c28:	f8da 7000 	ldr.w	r7, [sl]
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	fb00 5505 	mla	r5, r0, r5, r5
 8002c32:	0a2d      	lsrs	r5, r5, #8
 8002c34:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8002c38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c3c:	0e3e      	lsrs	r6, r7, #24
 8002c3e:	fb05 f202 	mul.w	r2, r5, r2
 8002c42:	fb05 f101 	mul.w	r1, r5, r1
 8002c46:	d00d      	beq.n	8002c64 <EwWarpAlpha8RowFilterGradientBlend+0x218>
 8002c48:	f5c5 7080 	rsb	r0, r5, #256	; 0x100
 8002c4c:	fb06 0000 	mla	r0, r6, r0, r0
 8002c50:	0a00      	lsrs	r0, r0, #8
 8002c52:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8002c56:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8002c5a:	fb00 2206 	mla	r2, r0, r6, r2
 8002c5e:	fb00 1107 	mla	r1, r0, r7, r1
 8002c62:	4405      	add	r5, r0
 8002c64:	0a12      	lsrs	r2, r2, #8
 8002c66:	0a09      	lsrs	r1, r1, #8
 8002c68:	b16d      	cbz	r5, 8002c86 <EwWarpAlpha8RowFilterGradientBlend+0x23a>
 8002c6a:	3d01      	subs	r5, #1
 8002c6c:	2dfe      	cmp	r5, #254	; 0xfe
 8002c6e:	d80a      	bhi.n	8002c86 <EwWarpAlpha8RowFilterGradientBlend+0x23a>
 8002c70:	480a      	ldr	r0, [pc, #40]	; (8002c9c <EwWarpAlpha8RowFilterGradientBlend+0x250>)
 8002c72:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8002c76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002c7a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8002c7e:	4342      	muls	r2, r0
 8002c80:	4341      	muls	r1, r0
 8002c82:	0a12      	lsrs	r2, r2, #8
 8002c84:	0a09      	lsrs	r1, r1, #8
 8002c86:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002c8a:	0209      	lsls	r1, r1, #8
 8002c8c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002c90:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8002c94:	430a      	orrs	r2, r1
 8002c96:	f8ca 2000 	str.w	r2, [sl]
 8002c9a:	e7b4      	b.n	8002c06 <EwWarpAlpha8RowFilterGradientBlend+0x1ba>
 8002c9c:	080335d8 	.word	0x080335d8

08002ca0 <EwWarpRGB565Row>:
 8002ca0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8002ca4:	680d      	ldr	r5, [r1, #0]
 8002ca6:	6889      	ldr	r1, [r1, #8]
 8002ca8:	9e08      	ldr	r6, [sp, #32]
 8002caa:	6804      	ldr	r4, [r0, #0]
 8002cac:	ea4f 0c61 	mov.w	ip, r1, asr #1
 8002cb0:	2a00      	cmp	r2, #0
 8002cb2:	dc01      	bgt.n	8002cb8 <EwWarpRGB565Row+0x18>
 8002cb4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8002cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002cba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002cbc:	1331      	asrs	r1, r6, #12
 8002cbe:	4341      	muls	r1, r0
 8002cc0:	1408      	asrs	r0, r1, #16
 8002cc2:	1319      	asrs	r1, r3, #12
 8002cc4:	4379      	muls	r1, r7
 8002cc6:	1409      	asrs	r1, r1, #16
 8002cc8:	fb0c 1100 	mla	r1, ip, r0, r1
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
 8002cd2:	08c1      	lsrs	r1, r0, #3
 8002cd4:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8002cd8:	f001 0bfc 	and.w	fp, r1, #252	; 0xfc
 8002cdc:	00c0      	lsls	r0, r0, #3
 8002cde:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8002ce2:	b2c0      	uxtb	r0, r0
 8002ce4:	ea41 010b 	orr.w	r1, r1, fp
 8002ce8:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 8002cec:	ea41 1050 	orr.w	r0, r1, r0, lsr #5
 8002cf0:	f00a 08f8 	and.w	r8, sl, #248	; 0xf8
 8002cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cf6:	ea48 1a5a 	orr.w	sl, r8, sl, lsr #5
 8002cfa:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8002cfe:	440b      	add	r3, r1
 8002d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d02:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8002d06:	f844 0b04 	str.w	r0, [r4], #4
 8002d0a:	440e      	add	r6, r1
 8002d0c:	e7d0      	b.n	8002cb0 <EwWarpRGB565Row+0x10>

08002d0e <EwWarpRGB565RowFilter>:
 8002d0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d12:	461d      	mov	r5, r3
 8002d14:	6803      	ldr	r3, [r0, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	688b      	ldr	r3, [r1, #8]
 8002d1a:	680f      	ldr	r7, [r1, #0]
 8002d1c:	105b      	asrs	r3, r3, #1
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	005e      	lsls	r6, r3, #1
 8002d24:	4614      	mov	r4, r2
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	dc02      	bgt.n	8002d30 <EwWarpRGB565RowFilter+0x22>
 8002d2a:	b003      	add	sp, #12
 8002d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d32:	132a      	asrs	r2, r5, #12
 8002d34:	435a      	muls	r2, r3
 8002d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d38:	1318      	asrs	r0, r3, #12
 8002d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d3c:	4358      	muls	r0, r3
 8002d3e:	1312      	asrs	r2, r2, #12
 8002d40:	1300      	asrs	r0, r0, #12
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	3a08      	subs	r2, #8
 8002d46:	3808      	subs	r0, #8
 8002d48:	ea4f 1c20 	mov.w	ip, r0, asr #4
 8002d4c:	1111      	asrs	r1, r2, #4
 8002d4e:	fb03 110c 	mla	r1, r3, ip, r1
 8002d52:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002d56:	eb07 0341 	add.w	r3, r7, r1, lsl #1
 8002d5a:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8002d5e:	f1c0 0808 	rsb	r8, r0, #8
 8002d62:	f1c2 0e08 	rsb	lr, r2, #8
 8002d66:	fb02 f808 	mul.w	r8, r2, r8
 8002d6a:	fb00 fe0e 	mul.w	lr, r0, lr
 8002d6e:	4342      	muls	r2, r0
 8002d70:	f837 a011 	ldrh.w	sl, [r7, r1, lsl #1]
 8002d74:	8858      	ldrh	r0, [r3, #2]
 8002d76:	1999      	adds	r1, r3, r6
 8002d78:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 8002d7c:	f831 9c02 	ldrh.w	r9, [r1, #-2]
 8002d80:	5b9b      	ldrh	r3, [r3, r6]
 8002d82:	ebac 0c0e 	sub.w	ip, ip, lr
 8002d86:	f420 61fc 	bic.w	r1, r0, #2016	; 0x7e0
 8002d8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002d8e:	ebac 0c02 	sub.w	ip, ip, r2
 8002d92:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 8002d96:	fb08 f101 	mul.w	r1, r8, r1
 8002d9a:	fb08 f000 	mul.w	r0, r8, r0
 8002d9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8002da2:	fb0c 110b 	mla	r1, ip, fp, r1
 8002da6:	fb0c 000a 	mla	r0, ip, sl, r0
 8002daa:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8002dae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002db2:	fb02 110b 	mla	r1, r2, fp, r1
 8002db6:	fb02 0003 	mla	r0, r2, r3, r0
 8002dba:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 8002dbe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8002dc2:	fb0e 110b 	mla	r1, lr, fp, r1
 8002dc6:	fb0e 0009 	mla	r0, lr, r9, r0
 8002dca:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8002dce:	ea0b 1191 	and.w	r1, fp, r1, lsr #6
 8002dd2:	ea4f 2e50 	mov.w	lr, r0, lsr #9
 8002dd6:	f00e 0bfc 	and.w	fp, lr, #252	; 0xfc
 8002dda:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 8002dde:	f3ce 1e81 	ubfx	lr, lr, #6, #2
 8002de2:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8002de6:	ea4e 0e0b 	orr.w	lr, lr, fp
 8002dea:	ea48 2e0e 	orr.w	lr, r8, lr, lsl #8
 8002dee:	ea4f 3b51 	mov.w	fp, r1, lsr #13
 8002df2:	ea4b 2111 	orr.w	r1, fp, r1, lsr #8
 8002df6:	ea4e 1858 	orr.w	r8, lr, r8, lsr #5
 8002dfa:	9b00      	ldr	r3, [sp, #0]
 8002dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dfe:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
 8002e02:	f048 417f 	orr.w	r1, r8, #4278190080	; 0xff000000
 8002e06:	f843 1b04 	str.w	r1, [r3], #4
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e0e:	441d      	add	r5, r3
 8002e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e12:	4413      	add	r3, r2
 8002e14:	930c      	str	r3, [sp, #48]	; 0x30
 8002e16:	3c01      	subs	r4, #1
 8002e18:	e785      	b.n	8002d26 <EwWarpRGB565RowFilter+0x18>

08002e1a <EwWarpRGB565RowGradient>:
 8002e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002e20:	6806      	ldr	r6, [r0, #0]
 8002e22:	6808      	ldr	r0, [r1, #0]
 8002e24:	6889      	ldr	r1, [r1, #8]
 8002e26:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8002e28:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8002e2c:	9001      	str	r0, [sp, #4]
 8002e2e:	ea4f 0a61 	mov.w	sl, r1, asr #1
 8002e32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e34:	1509      	asrs	r1, r1, #20
 8002e36:	3101      	adds	r1, #1
 8002e38:	b94d      	cbnz	r5, 8002e4e <EwWarpRGB565RowGradient+0x34>
 8002e3a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002e3c:	fab5 f585 	clz	r5, r5
 8002e40:	096d      	lsrs	r5, r5, #5
 8002e42:	4610      	mov	r0, r2
 8002e44:	2800      	cmp	r0, #0
 8002e46:	dc04      	bgt.n	8002e52 <EwWarpRGB565RowGradient+0x38>
 8002e48:	b003      	add	sp, #12
 8002e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4e:	2500      	movs	r5, #0
 8002e50:	e7f7      	b.n	8002e42 <EwWarpRGB565RowGradient+0x28>
 8002e52:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8002e54:	131a      	asrs	r2, r3, #12
 8002e56:	437a      	muls	r2, r7
 8002e58:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002e5a:	ea4f 3829 	mov.w	r8, r9, asr #12
 8002e5e:	fb07 f808 	mul.w	r8, r7, r8
 8002e62:	ea4f 4828 	mov.w	r8, r8, asr #16
 8002e66:	fb08 f70a 	mul.w	r7, r8, sl
 8002e6a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002e6e:	eb07 4222 	add.w	r2, r7, r2, asr #16
 8002e72:	9f01      	ldr	r7, [sp, #4]
 8002e74:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8002e78:	bb25      	cbnz	r5, 8002ec4 <EwWarpRGB565RowGradient+0xaa>
 8002e7a:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8002e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e7e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8002e82:	b16f      	cbz	r7, 8002ea0 <EwWarpRGB565RowGradient+0x86>
 8002e84:	f1b8 0f00 	cmp.w	r8, #0
 8002e88:	d002      	beq.n	8002e90 <EwWarpRGB565RowGradient+0x76>
 8002e8a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002e8c:	fb07 1108 	mla	r1, r7, r8, r1
 8002e90:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8002e92:	b12f      	cbz	r7, 8002ea0 <EwWarpRGB565RowGradient+0x86>
 8002e94:	f1b8 0f00 	cmp.w	r8, #0
 8002e98:	d002      	beq.n	8002ea0 <EwWarpRGB565RowGradient+0x86>
 8002e9a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8002e9c:	fb07 ee08 	mla	lr, r7, r8, lr
 8002ea0:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8002ea2:	b167      	cbz	r7, 8002ebe <EwWarpRGB565RowGradient+0xa4>
 8002ea4:	f1bc 0f00 	cmp.w	ip, #0
 8002ea8:	d009      	beq.n	8002ebe <EwWarpRGB565RowGradient+0xa4>
 8002eaa:	150f      	asrs	r7, r1, #20
 8002eac:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 8002eb0:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002eb2:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002eb6:	fb07 fe0e 	mul.w	lr, r7, lr
 8002eba:	fb0c 110e 	mla	r1, ip, lr, r1
 8002ebe:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8002ec2:	3101      	adds	r1, #1
 8002ec4:	b1ca      	cbz	r2, 8002efa <EwWarpRGB565RowGradient+0xe0>
 8002ec6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8002eca:	08d7      	lsrs	r7, r2, #3
 8002ecc:	00d2      	lsls	r2, r2, #3
 8002ece:	f00c 08f8 	and.w	r8, ip, #248	; 0xf8
 8002ed2:	fa5f fb82 	uxtb.w	fp, r2
 8002ed6:	f3cc 1c42 	ubfx	ip, ip, #5, #3
 8002eda:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002ede:	f007 0efc 	and.w	lr, r7, #252	; 0xfc
 8002ee2:	ea4c 0c08 	orr.w	ip, ip, r8
 8002ee6:	ea42 020b 	orr.w	r2, r2, fp
 8002eea:	f3c7 1781 	ubfx	r7, r7, #6, #2
 8002eee:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8002ef2:	ea47 070e 	orr.w	r7, r7, lr
 8002ef6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002efa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002efe:	f846 2b04 	str.w	r2, [r6], #4
 8002f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002f04:	4413      	add	r3, r2
 8002f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f08:	3801      	subs	r0, #1
 8002f0a:	4491      	add	r9, r2
 8002f0c:	e79a      	b.n	8002e44 <EwWarpRGB565RowGradient+0x2a>

08002f0e <EwWarpRGB565RowFilterGradient>:
 8002f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f12:	b087      	sub	sp, #28
 8002f14:	6800      	ldr	r0, [r0, #0]
 8002f16:	9002      	str	r0, [sp, #8]
 8002f18:	6808      	ldr	r0, [r1, #0]
 8002f1a:	6889      	ldr	r1, [r1, #8]
 8002f1c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002f1e:	9004      	str	r0, [sp, #16]
 8002f20:	1049      	asrs	r1, r1, #1
 8002f22:	9105      	str	r1, [sp, #20]
 8002f24:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002f26:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	1509      	asrs	r1, r1, #20
 8002f2c:	3101      	adds	r1, #1
 8002f2e:	b970      	cbnz	r0, 8002f4e <EwWarpRGB565RowFilterGradient+0x40>
 8002f30:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 8002f32:	fab7 f787 	clz	r7, r7
 8002f36:	097f      	lsrs	r7, r7, #5
 8002f38:	9805      	ldr	r0, [sp, #20]
 8002f3a:	9200      	str	r2, [sp, #0]
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	0040      	lsls	r0, r0, #1
 8002f40:	9003      	str	r0, [sp, #12]
 8002f42:	9b00      	ldr	r3, [sp, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dc04      	bgt.n	8002f52 <EwWarpRGB565RowFilterGradient+0x44>
 8002f48:	b007      	add	sp, #28
 8002f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f4e:	2700      	movs	r7, #0
 8002f50:	e7f2      	b.n	8002f38 <EwWarpRGB565RowFilterGradient+0x2a>
 8002f52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002f54:	9b01      	ldr	r3, [sp, #4]
 8002f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002f58:	ea4f 3e20 	mov.w	lr, r0, asr #12
 8002f5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002f5e:	131e      	asrs	r6, r3, #12
 8002f60:	4356      	muls	r6, r2
 8002f62:	fb00 fe0e 	mul.w	lr, r0, lr
 8002f66:	1332      	asrs	r2, r6, #12
 8002f68:	ea4f 302e 	mov.w	r0, lr, asr #12
 8002f6c:	bb0f      	cbnz	r7, 8002fb2 <EwWarpRGB565RowFilterGradient+0xa4>
 8002f6e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8002f70:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002f72:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 8002f76:	b15c      	cbz	r4, 8002f90 <EwWarpRGB565RowFilterGradient+0x82>
 8002f78:	ea5f 442e 	movs.w	r4, lr, asr #16
 8002f7c:	d002      	beq.n	8002f84 <EwWarpRGB565RowFilterGradient+0x76>
 8002f7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002f80:	fb03 1104 	mla	r1, r3, r4, r1
 8002f84:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002f86:	b11b      	cbz	r3, 8002f90 <EwWarpRGB565RowFilterGradient+0x82>
 8002f88:	b114      	cbz	r4, 8002f90 <EwWarpRGB565RowFilterGradient+0x82>
 8002f8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002f8c:	fb03 cc04 	mla	ip, r3, r4, ip
 8002f90:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8002f92:	b15c      	cbz	r4, 8002fac <EwWarpRGB565RowFilterGradient+0x9e>
 8002f94:	1436      	asrs	r6, r6, #16
 8002f96:	d009      	beq.n	8002fac <EwWarpRGB565RowFilterGradient+0x9e>
 8002f98:	150c      	asrs	r4, r1, #20
 8002f9a:	ebc4 5c2c 	rsb	ip, r4, ip, asr #20
 8002f9e:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8002fa0:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8002fa4:	fb04 fc0c 	mul.w	ip, r4, ip
 8002fa8:	fb06 110c 	mla	r1, r6, ip, r1
 8002fac:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8002fb0:	3101      	adds	r1, #1
 8002fb2:	f1a2 0408 	sub.w	r4, r2, #8
 8002fb6:	9b05      	ldr	r3, [sp, #20]
 8002fb8:	3808      	subs	r0, #8
 8002fba:	1102      	asrs	r2, r0, #4
 8002fbc:	1126      	asrs	r6, r4, #4
 8002fbe:	fb03 6602 	mla	r6, r3, r2, r6
 8002fc2:	9b04      	ldr	r3, [sp, #16]
 8002fc4:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002fc8:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8002fcc:	f833 a016 	ldrh.w	sl, [r3, r6, lsl #1]
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8002fd6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8002fda:	f3c4 0442 	ubfx	r4, r4, #1, #3
 8002fde:	f1c0 0808 	rsb	r8, r0, #8
 8002fe2:	f1c4 0e08 	rsb	lr, r4, #8
 8002fe6:	fb04 f808 	mul.w	r8, r4, r8
 8002fea:	fb00 fe0e 	mul.w	lr, r0, lr
 8002fee:	4344      	muls	r4, r0
 8002ff0:	eb0c 0003 	add.w	r0, ip, r3
 8002ff4:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 8002ff8:	f830 9c02 	ldrh.w	r9, [r0, #-2]
 8002ffc:	ebac 0c0e 	sub.w	ip, ip, lr
 8003000:	f426 60fc 	bic.w	r0, r6, #2016	; 0x7e0
 8003004:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8003008:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 800300c:	ebac 0c04 	sub.w	ip, ip, r4
 8003010:	fb08 f000 	mul.w	r0, r8, r0
 8003014:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8003018:	fb08 f606 	mul.w	r6, r8, r6
 800301c:	fb0c 000b 	mla	r0, ip, fp, r0
 8003020:	fb0c 660a 	mla	r6, ip, sl, r6
 8003024:	f422 6bfc 	bic.w	fp, r2, #2016	; 0x7e0
 8003028:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800302c:	fb04 000b 	mla	r0, r4, fp, r0
 8003030:	fb04 6602 	mla	r6, r4, r2, r6
 8003034:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 8003038:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 800303c:	fb0e 000b 	mla	r0, lr, fp, r0
 8003040:	fb0e 6e09 	mla	lr, lr, r9, r6
 8003044:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003048:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800304c:	ea03 1090 	and.w	r0, r3, r0, lsr #6
 8003050:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8003054:	ea50 000e 	orrs.w	r0, r0, lr
 8003058:	d016      	beq.n	8003088 <EwWarpRGB565RowFilterGradient+0x17a>
 800305a:	0a06      	lsrs	r6, r0, #8
 800305c:	08c2      	lsrs	r2, r0, #3
 800305e:	00c0      	lsls	r0, r0, #3
 8003060:	fa5f fe80 	uxtb.w	lr, r0
 8003064:	f006 04f8 	and.w	r4, r6, #248	; 0xf8
 8003068:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800306c:	f002 0cfc 	and.w	ip, r2, #252	; 0xfc
 8003070:	ea44 1456 	orr.w	r4, r4, r6, lsr #5
 8003074:	ea40 000e 	orr.w	r0, r0, lr
 8003078:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800307c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003080:	ea42 020c 	orr.w	r2, r2, ip
 8003084:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003088:	9b02      	ldr	r3, [sp, #8]
 800308a:	9a01      	ldr	r2, [sp, #4]
 800308c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8003090:	f843 0b04 	str.w	r0, [r3], #4
 8003094:	9302      	str	r3, [sp, #8]
 8003096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003098:	441a      	add	r2, r3
 800309a:	9201      	str	r2, [sp, #4]
 800309c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800309e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030a0:	4413      	add	r3, r2
 80030a2:	9310      	str	r3, [sp, #64]	; 0x40
 80030a4:	9b00      	ldr	r3, [sp, #0]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	e74a      	b.n	8002f42 <EwWarpRGB565RowFilterGradient+0x34>

080030ac <EwWarpRGB565RowGradientBlend>:
 80030ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80030b2:	6806      	ldr	r6, [r0, #0]
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	6889      	ldr	r1, [r1, #8]
 80030b8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80030ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	ea4f 0961 	mov.w	r9, r1, asr #1
 80030c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030c6:	9001      	str	r0, [sp, #4]
 80030c8:	1509      	asrs	r1, r1, #20
 80030ca:	3101      	adds	r1, #1
 80030cc:	b94d      	cbnz	r5, 80030e2 <EwWarpRGB565RowGradientBlend+0x36>
 80030ce:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80030d0:	fab5 f585 	clz	r5, r5
 80030d4:	096d      	lsrs	r5, r5, #5
 80030d6:	4610      	mov	r0, r2
 80030d8:	2800      	cmp	r0, #0
 80030da:	dc04      	bgt.n	80030e6 <EwWarpRGB565RowGradientBlend+0x3a>
 80030dc:	b003      	add	sp, #12
 80030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e2:	2500      	movs	r5, #0
 80030e4:	e7f7      	b.n	80030d6 <EwWarpRGB565RowGradientBlend+0x2a>
 80030e6:	9b00      	ldr	r3, [sp, #0]
 80030e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80030ea:	131a      	asrs	r2, r3, #12
 80030ec:	437a      	muls	r2, r7
 80030ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80030f0:	ea4f 382a 	mov.w	r8, sl, asr #12
 80030f4:	fb07 f808 	mul.w	r8, r7, r8
 80030f8:	ea4f 4828 	mov.w	r8, r8, asr #16
 80030fc:	fb08 f709 	mul.w	r7, r8, r9
 8003100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003104:	eb07 4222 	add.w	r2, r7, r2, asr #16
 8003108:	9f01      	ldr	r7, [sp, #4]
 800310a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800310e:	bb25      	cbnz	r5, 800315a <EwWarpRGB565RowGradientBlend+0xae>
 8003110:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8003112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003114:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8003118:	b16f      	cbz	r7, 8003136 <EwWarpRGB565RowGradientBlend+0x8a>
 800311a:	f1b8 0f00 	cmp.w	r8, #0
 800311e:	d002      	beq.n	8003126 <EwWarpRGB565RowGradientBlend+0x7a>
 8003120:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8003122:	fb07 1108 	mla	r1, r7, r8, r1
 8003126:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8003128:	b12f      	cbz	r7, 8003136 <EwWarpRGB565RowGradientBlend+0x8a>
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	d002      	beq.n	8003136 <EwWarpRGB565RowGradientBlend+0x8a>
 8003130:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8003132:	fb07 ee08 	mla	lr, r7, r8, lr
 8003136:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8003138:	b167      	cbz	r7, 8003154 <EwWarpRGB565RowGradientBlend+0xa8>
 800313a:	f1bc 0f00 	cmp.w	ip, #0
 800313e:	d009      	beq.n	8003154 <EwWarpRGB565RowGradientBlend+0xa8>
 8003140:	150f      	asrs	r7, r1, #20
 8003142:	ebc7 5e2e 	rsb	lr, r7, lr, asr #20
 8003146:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8003148:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 800314c:	fb07 fe0e 	mul.w	lr, r7, lr
 8003150:	fb0c 110e 	mla	r1, ip, lr, r1
 8003154:	f3c1 5107 	ubfx	r1, r1, #20, #8
 8003158:	3101      	adds	r1, #1
 800315a:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800315e:	08d7      	lsrs	r7, r2, #3
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	f00e 0cf8 	and.w	ip, lr, #248	; 0xf8
 8003166:	fa5f fb82 	uxtb.w	fp, r2
 800316a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800316e:	f007 08fc 	and.w	r8, r7, #252	; 0xfc
 8003172:	ea4c 1c5e 	orr.w	ip, ip, lr, lsr #5
 8003176:	ea42 020b 	orr.w	r2, r2, fp
 800317a:	f3c7 1781 	ubfx	r7, r7, #6, #2
 800317e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8003182:	ea47 0708 	orr.w	r7, r7, r8
 8003186:	ea4c 2e07 	orr.w	lr, ip, r7, lsl #8
 800318a:	f8d6 8000 	ldr.w	r8, [r6]
 800318e:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 8003192:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8003196:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800319a:	ea5f 6e18 	movs.w	lr, r8, lsr #24
 800319e:	fb01 f707 	mul.w	r7, r1, r7
 80031a2:	fb0c fc01 	mul.w	ip, ip, r1
 80031a6:	d036      	beq.n	8003216 <EwWarpRGB565RowGradientBlend+0x16a>
 80031a8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80031ac:	fb0e 2202 	mla	r2, lr, r2, r2
 80031b0:	0a12      	lsrs	r2, r2, #8
 80031b2:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 80031b6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80031ba:	fb02 770e 	mla	r7, r2, lr, r7
 80031be:	fb02 cc08 	mla	ip, r2, r8, ip
 80031c2:	440a      	add	r2, r1
 80031c4:	0a3f      	lsrs	r7, r7, #8
 80031c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80031ca:	b182      	cbz	r2, 80031ee <EwWarpRGB565RowGradientBlend+0x142>
 80031cc:	3a01      	subs	r2, #1
 80031ce:	2afe      	cmp	r2, #254	; 0xfe
 80031d0:	d80d      	bhi.n	80031ee <EwWarpRGB565RowGradientBlend+0x142>
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <EwWarpRGB565RowGradientBlend+0x170>)
 80031d4:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80031d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80031dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80031e0:	fb0e f707 	mul.w	r7, lr, r7
 80031e4:	fb0e fc0c 	mul.w	ip, lr, ip
 80031e8:	0a3f      	lsrs	r7, r7, #8
 80031ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80031ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80031f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031f4:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 80031f8:	9a00      	ldr	r2, [sp, #0]
 80031fa:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80031fe:	441a      	add	r2, r3
 8003200:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 8003204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003206:	9200      	str	r2, [sp, #0]
 8003208:	ea47 070c 	orr.w	r7, r7, ip
 800320c:	f846 7b04 	str.w	r7, [r6], #4
 8003210:	449a      	add	sl, r3
 8003212:	3801      	subs	r0, #1
 8003214:	e760      	b.n	80030d8 <EwWarpRGB565RowGradientBlend+0x2c>
 8003216:	460a      	mov	r2, r1
 8003218:	e7d4      	b.n	80031c4 <EwWarpRGB565RowGradientBlend+0x118>
 800321a:	bf00      	nop
 800321c:	080335d8 	.word	0x080335d8

08003220 <EwWarpRGB565RowFilterGradientBlend>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	b087      	sub	sp, #28
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	680b      	ldr	r3, [r1, #0]
 800322e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	688b      	ldr	r3, [r1, #8]
 8003234:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003236:	105b      	asrs	r3, r3, #1
 8003238:	9305      	str	r3, [sp, #20]
 800323a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800323c:	1509      	asrs	r1, r1, #20
 800323e:	3101      	adds	r1, #1
 8003240:	b973      	cbnz	r3, 8003260 <EwWarpRGB565RowFilterGradientBlend+0x40>
 8003242:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8003244:	fab7 f787 	clz	r7, r7
 8003248:	097f      	lsrs	r7, r7, #5
 800324a:	9b05      	ldr	r3, [sp, #20]
 800324c:	9201      	str	r2, [sp, #4]
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	9303      	str	r3, [sp, #12]
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	dc04      	bgt.n	8003264 <EwWarpRGB565RowFilterGradientBlend+0x44>
 800325a:	b007      	add	sp, #28
 800325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003260:	2700      	movs	r7, #0
 8003262:	e7f2      	b.n	800324a <EwWarpRGB565RowFilterGradientBlend+0x2a>
 8003264:	9b02      	ldr	r3, [sp, #8]
 8003266:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003268:	131d      	asrs	r5, r3, #12
 800326a:	ea4f 3e22 	mov.w	lr, r2, asr #12
 800326e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003270:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003272:	435d      	muls	r5, r3
 8003274:	fb02 fe0e 	mul.w	lr, r2, lr
 8003278:	132b      	asrs	r3, r5, #12
 800327a:	ea4f 322e 	mov.w	r2, lr, asr #12
 800327e:	bb0f      	cbnz	r7, 80032c4 <EwWarpRGB565RowFilterGradientBlend+0xa4>
 8003280:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003282:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003284:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 8003288:	b158      	cbz	r0, 80032a2 <EwWarpRGB565RowFilterGradientBlend+0x82>
 800328a:	ea5f 402e 	movs.w	r0, lr, asr #16
 800328e:	d002      	beq.n	8003296 <EwWarpRGB565RowFilterGradientBlend+0x76>
 8003290:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003292:	fb06 1100 	mla	r1, r6, r0, r1
 8003296:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8003298:	b11e      	cbz	r6, 80032a2 <EwWarpRGB565RowFilterGradientBlend+0x82>
 800329a:	b110      	cbz	r0, 80032a2 <EwWarpRGB565RowFilterGradientBlend+0x82>
 800329c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800329e:	fb06 cc00 	mla	ip, r6, r0, ip
 80032a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032a4:	b158      	cbz	r0, 80032be <EwWarpRGB565RowFilterGradientBlend+0x9e>
 80032a6:	142d      	asrs	r5, r5, #16
 80032a8:	d009      	beq.n	80032be <EwWarpRGB565RowFilterGradientBlend+0x9e>
 80032aa:	1508      	asrs	r0, r1, #20
 80032ac:	ebc0 5c2c 	rsb	ip, r0, ip, asr #20
 80032b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032b2:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80032b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80032ba:	fb05 110c 	mla	r1, r5, ip, r1
 80032be:	f3c1 5107 	ubfx	r1, r1, #20, #8
 80032c2:	3101      	adds	r1, #1
 80032c4:	f1a3 0008 	sub.w	r0, r3, #8
 80032c8:	9e05      	ldr	r6, [sp, #20]
 80032ca:	3a08      	subs	r2, #8
 80032cc:	1113      	asrs	r3, r2, #4
 80032ce:	1105      	asrs	r5, r0, #4
 80032d0:	fb06 5503 	mla	r5, r6, r3, r5
 80032d4:	9b04      	ldr	r3, [sp, #16]
 80032d6:	f3c2 0242 	ubfx	r2, r2, #1, #3
 80032da:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 80032de:	f833 a015 	ldrh.w	sl, [r3, r5, lsl #1]
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 80032e8:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80032ec:	f1c2 0808 	rsb	r8, r2, #8
 80032f0:	f1c0 0e08 	rsb	lr, r0, #8
 80032f4:	fb00 f808 	mul.w	r8, r0, r8
 80032f8:	fb02 fe0e 	mul.w	lr, r2, lr
 80032fc:	4350      	muls	r0, r2
 80032fe:	eb0c 0203 	add.w	r2, ip, r3
 8003302:	f83c 3003 	ldrh.w	r3, [ip, r3]
 8003306:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800330a:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 800330e:	ebac 0c0e 	sub.w	ip, ip, lr
 8003312:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8003316:	ebac 0c00 	sub.w	ip, ip, r0
 800331a:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 800331e:	fb08 f202 	mul.w	r2, r8, r2
 8003322:	fb0c 220b 	mla	r2, ip, fp, r2
 8003326:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 800332a:	fb00 220b 	mla	r2, r0, fp, r2
 800332e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8003332:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 8003336:	fb0e 220b 	mla	r2, lr, fp, r2
 800333a:	fb08 f505 	mul.w	r5, r8, r5
 800333e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8003342:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8003346:	ea06 1292 	and.w	r2, r6, r2, lsr #6
 800334a:	fb0c 550a 	mla	r5, ip, sl, r5
 800334e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003352:	fb00 5503 	mla	r5, r0, r3, r5
 8003356:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 800335a:	00d3      	lsls	r3, r2, #3
 800335c:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
 8003360:	fb0e 5509 	mla	r5, lr, r9, r5
 8003364:	ea4f 3b52 	mov.w	fp, r2, lsr #13
 8003368:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800336c:	ea4f 2e55 	mov.w	lr, r5, lsr #9
 8003370:	4303      	orrs	r3, r0
 8003372:	ea4b 2b12 	orr.w	fp, fp, r2, lsr #8
 8003376:	ea43 4b0b 	orr.w	fp, r3, fp, lsl #16
 800337a:	f00e 08fc 	and.w	r8, lr, #252	; 0xfc
 800337e:	9b00      	ldr	r3, [sp, #0]
 8003380:	f3ce 1e81 	ubfx	lr, lr, #6, #2
 8003384:	ea4e 0e08 	orr.w	lr, lr, r8
 8003388:	681d      	ldr	r5, [r3, #0]
 800338a:	ea4b 200e 	orr.w	r0, fp, lr, lsl #8
 800338e:	0a00      	lsrs	r0, r0, #8
 8003390:	f00b 12ff 	and.w	r2, fp, #16711935	; 0xff00ff
 8003394:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8003398:	ea5f 6c15 	movs.w	ip, r5, lsr #24
 800339c:	fb01 f202 	mul.w	r2, r1, r2
 80033a0:	fb01 f000 	mul.w	r0, r1, r0
 80033a4:	d036      	beq.n	8003414 <EwWarpRGB565RowFilterGradientBlend+0x1f4>
 80033a6:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 80033aa:	fb0c 3303 	mla	r3, ip, r3, r3
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80033b4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80033b8:	fb03 220c 	mla	r2, r3, ip, r2
 80033bc:	fb03 0005 	mla	r0, r3, r5, r0
 80033c0:	440b      	add	r3, r1
 80033c2:	0a12      	lsrs	r2, r2, #8
 80033c4:	0a00      	lsrs	r0, r0, #8
 80033c6:	b16b      	cbz	r3, 80033e4 <EwWarpRGB565RowFilterGradientBlend+0x1c4>
 80033c8:	3b01      	subs	r3, #1
 80033ca:	2bfe      	cmp	r3, #254	; 0xfe
 80033cc:	d80a      	bhi.n	80033e4 <EwWarpRGB565RowFilterGradientBlend+0x1c4>
 80033ce:	4d12      	ldr	r5, [pc, #72]	; (8003418 <EwWarpRGB565RowFilterGradientBlend+0x1f8>)
 80033d0:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80033d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80033d8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80033dc:	436a      	muls	r2, r5
 80033de:	4368      	muls	r0, r5
 80033e0:	0a12      	lsrs	r2, r2, #8
 80033e2:	0a00      	lsrs	r0, r0, #8
 80033e4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80033e8:	0200      	lsls	r0, r0, #8
 80033ea:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80033ee:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	4302      	orrs	r2, r0
 80033f6:	f843 2b04 	str.w	r2, [r3], #4
 80033fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	9b02      	ldr	r3, [sp, #8]
 8003400:	4413      	add	r3, r2
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003408:	4413      	add	r3, r2
 800340a:	9310      	str	r3, [sp, #64]	; 0x40
 800340c:	9b01      	ldr	r3, [sp, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	e71f      	b.n	8003254 <EwWarpRGB565RowFilterGradientBlend+0x34>
 8003414:	460b      	mov	r3, r1
 8003416:	e7d4      	b.n	80033c2 <EwWarpRGB565RowFilterGradientBlend+0x1a2>
 8003418:	080335d8 	.word	0x080335d8

0800341c <EwScreenSetPixelSolid>:
 800341c:	b530      	push	{r4, r5, lr}
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	691d      	ldr	r5, [r3, #16]
 8003422:	0924      	lsrs	r4, r4, #4
 8003424:	0b2d      	lsrs	r5, r5, #12
 8003426:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800342a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800342e:	432c      	orrs	r4, r5
 8003430:	6a1d      	ldr	r5, [r3, #32]
 8003432:	f3c5 5507 	ubfx	r5, r5, #20, #8
 8003436:	432c      	orrs	r4, r5
 8003438:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800343a:	012d      	lsls	r5, r5, #4
 800343c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8003440:	ea44 0305 	orr.w	r3, r4, r5
 8003444:	6884      	ldr	r4, [r0, #8]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	0049      	lsls	r1, r1, #1
 800344a:	0ead      	lsrs	r5, r5, #26
 800344c:	fb04 1202 	mla	r2, r4, r2, r1
 8003450:	d015      	beq.n	800347e <EwScreenSetPixelSolid+0x62>
 8003452:	0a19      	lsrs	r1, r3, #8
 8003454:	f3c3 04c4 	ubfx	r4, r3, #3, #5
 8003458:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	4321      	orrs	r1, r4
 8003460:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003464:	fb05 1101 	mla	r1, r5, r1, r1
 8003468:	fb05 3303 	mla	r3, r5, r3, r3
 800346c:	0989      	lsrs	r1, r1, #6
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8003474:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003478:	ea41 0503 	orr.w	r5, r1, r3
 800347c:	b2ad      	uxth	r5, r5
 800347e:	5285      	strh	r5, [r0, r2]
 8003480:	bd30      	pop	{r4, r5, pc}

08003482 <EwScreenSetPixelSolidBlend>:
 8003482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003484:	681c      	ldr	r4, [r3, #0]
 8003486:	691d      	ldr	r5, [r3, #16]
 8003488:	0924      	lsrs	r4, r4, #4
 800348a:	0b2d      	lsrs	r5, r5, #12
 800348c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8003490:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8003494:	432c      	orrs	r4, r5
 8003496:	6a1d      	ldr	r5, [r3, #32]
 8003498:	f3c5 5507 	ubfx	r5, r5, #20, #8
 800349c:	432c      	orrs	r4, r5
 800349e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80034a0:	012d      	lsls	r5, r5, #4
 80034a2:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 80034a6:	ea44 0305 	orr.w	r3, r4, r5
 80034aa:	0eac      	lsrs	r4, r5, #26
 80034ac:	d028      	beq.n	8003500 <EwScreenSetPixelSolidBlend+0x7e>
 80034ae:	6885      	ldr	r5, [r0, #8]
 80034b0:	6800      	ldr	r0, [r0, #0]
 80034b2:	0049      	lsls	r1, r1, #1
 80034b4:	fb05 1102 	mla	r1, r5, r2, r1
 80034b8:	0a1a      	lsrs	r2, r3, #8
 80034ba:	f3c3 05c4 	ubfx	r5, r3, #3, #5
 80034be:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2c3f      	cmp	r4, #63	; 0x3f
 80034c6:	ea42 0205 	orr.w	r2, r2, r5
 80034ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80034ce:	d015      	beq.n	80034fc <EwScreenSetPixelSolidBlend+0x7a>
 80034d0:	5a45      	ldrh	r5, [r0, r1]
 80034d2:	f1c4 063f 	rsb	r6, r4, #63	; 0x3f
 80034d6:	f425 67fc 	bic.w	r7, r5, #2016	; 0x7e0
 80034da:	fb04 3303 	mla	r3, r4, r3, r3
 80034de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80034e2:	fb04 2202 	mla	r2, r4, r2, r2
 80034e6:	fb06 3305 	mla	r3, r6, r5, r3
 80034ea:	fb06 2207 	mla	r2, r6, r7, r2
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80034f4:	ea04 1292 	and.w	r2, r4, r2, lsr #6
 80034f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80034fc:	4313      	orrs	r3, r2
 80034fe:	5243      	strh	r3, [r0, r1]
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003502 <EwScreenFillRowSolid>:
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	b530      	push	{r4, r5, lr}
 8003506:	6914      	ldr	r4, [r2, #16]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	0b24      	lsrs	r4, r4, #12
 800350c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8003510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003514:	4323      	orrs	r3, r4
 8003516:	6a14      	ldr	r4, [r2, #32]
 8003518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800351a:	f3c4 5407 	ubfx	r4, r4, #20, #8
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4323      	orrs	r3, r4
 8003522:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003526:	4313      	orrs	r3, r2
 8003528:	0e92      	lsrs	r2, r2, #26
 800352a:	6804      	ldr	r4, [r0, #0]
 800352c:	d014      	beq.n	8003558 <EwScreenFillRowSolid+0x56>
 800352e:	0a18      	lsrs	r0, r3, #8
 8003530:	f3c3 05c4 	ubfx	r5, r3, #3, #5
 8003534:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	4328      	orrs	r0, r5
 800353c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003540:	fb02 0000 	mla	r0, r2, r0, r0
 8003544:	fb02 3303 	mla	r3, r2, r3, r3
 8003548:	0980      	lsrs	r0, r0, #6
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8003550:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003554:	4303      	orrs	r3, r0
 8003556:	b29a      	uxth	r2, r3
 8003558:	07a0      	lsls	r0, r4, #30
 800355a:	d004      	beq.n	8003566 <EwScreenFillRowSolid+0x64>
 800355c:	2900      	cmp	r1, #0
 800355e:	dd0a      	ble.n	8003576 <EwScreenFillRowSolid+0x74>
 8003560:	f824 2b02 	strh.w	r2, [r4], #2
 8003564:	3901      	subs	r1, #1
 8003566:	2900      	cmp	r1, #0
 8003568:	dd05      	ble.n	8003576 <EwScreenFillRowSolid+0x74>
 800356a:	07cb      	lsls	r3, r1, #31
 800356c:	bf44      	itt	mi
 800356e:	f101 31ff 	addmi.w	r1, r1, #4294967295
 8003572:	f824 2011 	strhmi.w	r2, [r4, r1, lsl #1]
 8003576:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800357a:	1049      	asrs	r1, r1, #1
 800357c:	2900      	cmp	r1, #0
 800357e:	dc00      	bgt.n	8003582 <EwScreenFillRowSolid+0x80>
 8003580:	bd30      	pop	{r4, r5, pc}
 8003582:	f844 2b04 	str.w	r2, [r4], #4
 8003586:	3901      	subs	r1, #1
 8003588:	e7f8      	b.n	800357c <EwScreenFillRowSolid+0x7a>

0800358a <EwScreenFillRowSolidBlend>:
 800358a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	6804      	ldr	r4, [r0, #0]
 8003592:	6910      	ldr	r0, [r2, #16]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	0b00      	lsrs	r0, r0, #12
 8003598:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800359c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035a0:	4303      	orrs	r3, r0
 80035a2:	6a10      	ldr	r0, [r2, #32]
 80035a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035a6:	f3c0 5007 	ubfx	r0, r0, #20, #8
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	4303      	orrs	r3, r0
 80035ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80035b2:	4313      	orrs	r3, r2
 80035b4:	0a1d      	lsrs	r5, r3, #8
 80035b6:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 80035ba:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	0e92      	lsrs	r2, r2, #26
 80035c2:	4305      	orrs	r5, r0
 80035c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80035c8:	f1c2 063f 	rsb	r6, r2, #63	; 0x3f
 80035cc:	fb02 5705 	mla	r7, r2, r5, r5
 80035d0:	fb02 3c03 	mla	ip, r2, r3, r3
 80035d4:	f64f 0e1f 	movw	lr, #63519	; 0xf81f
 80035d8:	2900      	cmp	r1, #0
 80035da:	dc01      	bgt.n	80035e0 <EwScreenFillRowSolidBlend+0x56>
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e0:	b192      	cbz	r2, 8003608 <EwScreenFillRowSolidBlend+0x7e>
 80035e2:	2a3f      	cmp	r2, #63	; 0x3f
 80035e4:	d013      	beq.n	800360e <EwScreenFillRowSolidBlend+0x84>
 80035e6:	8820      	ldrh	r0, [r4, #0]
 80035e8:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 80035ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80035f0:	fb06 c000 	mla	r0, r6, r0, ip
 80035f4:	fb06 7808 	mla	r8, r6, r8, r7
 80035f8:	0980      	lsrs	r0, r0, #6
 80035fa:	ea0e 1898 	and.w	r8, lr, r8, lsr #6
 80035fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8003602:	ea48 0000 	orr.w	r0, r8, r0
 8003606:	8020      	strh	r0, [r4, #0]
 8003608:	3402      	adds	r4, #2
 800360a:	3901      	subs	r1, #1
 800360c:	e7e4      	b.n	80035d8 <EwScreenFillRowSolidBlend+0x4e>
 800360e:	4618      	mov	r0, r3
 8003610:	46a8      	mov	r8, r5
 8003612:	e7f6      	b.n	8003602 <EwScreenFillRowSolidBlend+0x78>

08003614 <EwScreenFillRowGradient>:
 8003614:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003616:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800361a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003622:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003624:	6806      	ldr	r6, [r0, #0]
 8003626:	6914      	ldr	r4, [r2, #16]
 8003628:	6810      	ldr	r0, [r2, #0]
 800362a:	6a15      	ldr	r5, [r2, #32]
 800362c:	6857      	ldr	r7, [r2, #4]
 800362e:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8003632:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8003636:	2900      	cmp	r1, #0
 8003638:	dc01      	bgt.n	800363e <EwScreenFillRowGradient+0x2a>
 800363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363e:	0903      	lsrs	r3, r0, #4
 8003640:	0b22      	lsrs	r2, r4, #12
 8003642:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800364a:	4313      	orrs	r3, r2
 800364c:	f009 427f 	and.w	r2, r9, #4278190080	; 0xff000000
 8003650:	4313      	orrs	r3, r2
 8003652:	f3c5 5a07 	ubfx	sl, r5, #20, #8
 8003656:	ea43 0a0a 	orr.w	sl, r3, sl
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	d017      	beq.n	800368e <EwScreenFillRowGradient+0x7a>
 800365e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8003662:	f3ca 0bc4 	ubfx	fp, sl, #3, #5
 8003666:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 800366a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800366e:	ea42 020b 	orr.w	r2, r2, fp
 8003672:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8003676:	fb03 2202 	mla	r2, r3, r2, r2
 800367a:	fb03 a30a 	mla	r3, r3, sl, sl
 800367e:	0992      	lsrs	r2, r2, #6
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8003686:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800368a:	4313      	orrs	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	f826 3b02 	strh.w	r3, [r6], #2
 8003692:	4438      	add	r0, r7
 8003694:	4464      	add	r4, ip
 8003696:	4475      	add	r5, lr
 8003698:	3901      	subs	r1, #1
 800369a:	44c1      	add	r9, r8
 800369c:	e7cb      	b.n	8003636 <EwScreenFillRowGradient+0x22>

0800369e <EwScreenFillRowGradientBlend>:
 800369e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	6853      	ldr	r3, [r2, #4]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6953      	ldr	r3, [r2, #20]
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80036ae:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80036b4:	6805      	ldr	r5, [r0, #0]
 80036b6:	6817      	ldr	r7, [r2, #0]
 80036b8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80036bc:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80036c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036c4:	0124      	lsls	r4, r4, #4
 80036c6:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 80036ca:	2900      	cmp	r1, #0
 80036cc:	dc02      	bgt.n	80036d4 <EwScreenFillRowGradientBlend+0x36>
 80036ce:	b005      	add	sp, #20
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d4:	093b      	lsrs	r3, r7, #4
 80036d6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80036da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80036de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f004 427f 	and.w	r2, r4, #4278190080	; 0xff000000
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f3ce 5007 	ubfx	r0, lr, #20, #8
 80036ee:	4318      	orrs	r0, r3
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	d021      	beq.n	8003738 <EwScreenFillRowGradientBlend+0x9a>
 80036f4:	0a02      	lsrs	r2, r0, #8
 80036f6:	f3c0 06c4 	ubfx	r6, r0, #3, #5
 80036fa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80036fe:	0940      	lsrs	r0, r0, #5
 8003700:	2b3f      	cmp	r3, #63	; 0x3f
 8003702:	ea42 0206 	orr.w	r2, r2, r6
 8003706:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800370a:	d013      	beq.n	8003734 <EwScreenFillRowGradientBlend+0x96>
 800370c:	882e      	ldrh	r6, [r5, #0]
 800370e:	f1c3 093f 	rsb	r9, r3, #63	; 0x3f
 8003712:	f426 6bfc 	bic.w	fp, r6, #2016	; 0x7e0
 8003716:	fb03 0000 	mla	r0, r3, r0, r0
 800371a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800371e:	fb03 2202 	mla	r2, r3, r2, r2
 8003722:	fb09 0006 	mla	r0, r9, r6, r0
 8003726:	fb09 220b 	mla	r2, r9, fp, r2
 800372a:	0980      	lsrs	r0, r0, #6
 800372c:	ea0a 1292 	and.w	r2, sl, r2, lsr #6
 8003730:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8003734:	4302      	orrs	r2, r0
 8003736:	802a      	strh	r2, [r5, #0]
 8003738:	9b01      	ldr	r3, [sp, #4]
 800373a:	441f      	add	r7, r3
 800373c:	9b02      	ldr	r3, [sp, #8]
 800373e:	449c      	add	ip, r3
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	3502      	adds	r5, #2
 8003744:	449e      	add	lr, r3
 8003746:	3901      	subs	r1, #1
 8003748:	4444      	add	r4, r8
 800374a:	e7be      	b.n	80036ca <EwScreenFillRowGradientBlend+0x2c>

0800374c <EwScreenCopyNativeRow>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	6800      	ldr	r0, [r0, #0]
 8003750:	680c      	ldr	r4, [r1, #0]
 8003752:	2a00      	cmp	r2, #0
 8003754:	dc00      	bgt.n	8003758 <EwScreenCopyNativeRow+0xc>
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	f854 3b04 	ldr.w	r3, [r4], #4
 800375c:	0e9d      	lsrs	r5, r3, #26
 800375e:	d018      	beq.n	8003792 <EwScreenCopyNativeRow+0x46>
 8003760:	0a19      	lsrs	r1, r3, #8
 8003762:	f3c3 06c4 	ubfx	r6, r3, #3, #5
 8003766:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	4331      	orrs	r1, r6
 800376e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003772:	fb05 1101 	mla	r1, r5, r1, r1
 8003776:	fb05 3303 	mla	r3, r5, r3, r3
 800377a:	0989      	lsrs	r1, r1, #6
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8003782:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003786:	430b      	orrs	r3, r1
 8003788:	b29b      	uxth	r3, r3
 800378a:	f820 3b02 	strh.w	r3, [r0], #2
 800378e:	3a01      	subs	r2, #1
 8003790:	e7df      	b.n	8003752 <EwScreenCopyNativeRow+0x6>
 8003792:	462b      	mov	r3, r5
 8003794:	e7f9      	b.n	800378a <EwScreenCopyNativeRow+0x3e>

08003796 <EwScreenCopyNativeRowBlend>:
 8003796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	6800      	ldr	r0, [r0, #0]
 800379c:	680c      	ldr	r4, [r1, #0]
 800379e:	4d18      	ldr	r5, [pc, #96]	; (8003800 <EwScreenCopyNativeRowBlend+0x6a>)
 80037a0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	dc01      	bgt.n	80037ac <EwScreenCopyNativeRowBlend+0x16>
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80037b0:	0e9f      	lsrs	r7, r3, #26
 80037b2:	d021      	beq.n	80037f8 <EwScreenCopyNativeRowBlend+0x62>
 80037b4:	0a19      	lsrs	r1, r3, #8
 80037b6:	f3c3 0cc4 	ubfx	ip, r3, #3, #5
 80037ba:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2f3f      	cmp	r7, #63	; 0x3f
 80037c2:	ea41 010c 	orr.w	r1, r1, ip
 80037c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80037ca:	d013      	beq.n	80037f4 <EwScreenCopyNativeRowBlend+0x5e>
 80037cc:	f8b0 c000 	ldrh.w	ip, [r0]
 80037d0:	f1c7 0e3f 	rsb	lr, r7, #63	; 0x3f
 80037d4:	f42c 68fc 	bic.w	r8, ip, #2016	; 0x7e0
 80037d8:	fb07 1101 	mla	r1, r7, r1, r1
 80037dc:	ea0c 0c05 	and.w	ip, ip, r5
 80037e0:	fb07 3303 	mla	r3, r7, r3, r3
 80037e4:	fb0e 1108 	mla	r1, lr, r8, r1
 80037e8:	fb0e 330c 	mla	r3, lr, ip, r3
 80037ec:	ea06 1191 	and.w	r1, r6, r1, lsr #6
 80037f0:	ea05 1393 	and.w	r3, r5, r3, lsr #6
 80037f4:	430b      	orrs	r3, r1
 80037f6:	8003      	strh	r3, [r0, #0]
 80037f8:	3002      	adds	r0, #2
 80037fa:	3a01      	subs	r2, #1
 80037fc:	e7d2      	b.n	80037a4 <EwScreenCopyNativeRowBlend+0xe>
 80037fe:	bf00      	nop
 8003800:	00fc07e0 	.word	0x00fc07e0

08003804 <EwScreenCopyNativeRowSolid>:
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	6804      	ldr	r4, [r0, #0]
 8003808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800380a:	680d      	ldr	r5, [r1, #0]
 800380c:	1580      	asrs	r0, r0, #22
 800380e:	3001      	adds	r0, #1
 8003810:	2a00      	cmp	r2, #0
 8003812:	dc00      	bgt.n	8003816 <EwScreenCopyNativeRowSolid+0x12>
 8003814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	0e1e      	lsrs	r6, r3, #24
 800381c:	fb06 0600 	mla	r6, r6, r0, r0
 8003820:	0a36      	lsrs	r6, r6, #8
 8003822:	d016      	beq.n	8003852 <EwScreenCopyNativeRowSolid+0x4e>
 8003824:	0a19      	lsrs	r1, r3, #8
 8003826:	f3c3 07c4 	ubfx	r7, r3, #3, #5
 800382a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	4339      	orrs	r1, r7
 8003832:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003836:	4371      	muls	r1, r6
 8003838:	4373      	muls	r3, r6
 800383a:	0989      	lsrs	r1, r1, #6
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8003842:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003846:	430b      	orrs	r3, r1
 8003848:	b29b      	uxth	r3, r3
 800384a:	f824 3b02 	strh.w	r3, [r4], #2
 800384e:	3a01      	subs	r2, #1
 8003850:	e7de      	b.n	8003810 <EwScreenCopyNativeRowSolid+0xc>
 8003852:	4633      	mov	r3, r6
 8003854:	e7f9      	b.n	800384a <EwScreenCopyNativeRowSolid+0x46>

08003856 <EwScreenCopyNativeRowSolidBlend>:
 8003856:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800385a:	6804      	ldr	r4, [r0, #0]
 800385c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800385e:	680d      	ldr	r5, [r1, #0]
 8003860:	4e19      	ldr	r6, [pc, #100]	; (80038c8 <EwScreenCopyNativeRowSolidBlend+0x72>)
 8003862:	1580      	asrs	r0, r0, #22
 8003864:	3001      	adds	r0, #1
 8003866:	f64f 071f 	movw	r7, #63519	; 0xf81f
 800386a:	2a00      	cmp	r2, #0
 800386c:	dc01      	bgt.n	8003872 <EwScreenCopyNativeRowSolidBlend+0x1c>
 800386e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003872:	f855 3b04 	ldr.w	r3, [r5], #4
 8003876:	ea5f 6c93 	movs.w	ip, r3, lsr #26
 800387a:	d021      	beq.n	80038c0 <EwScreenCopyNativeRowSolidBlend+0x6a>
 800387c:	0a19      	lsrs	r1, r3, #8
 800387e:	f3c3 09c4 	ubfx	r9, r3, #3, #5
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	f403 6efc 	and.w	lr, r3, #2016	; 0x7e0
 8003888:	fb0c 0c00 	mla	ip, ip, r0, r0
 800388c:	8823      	ldrh	r3, [r4, #0]
 800388e:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8003892:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8003896:	ea41 0909 	orr.w	r9, r1, r9
 800389a:	f1cc 0840 	rsb	r8, ip, #64	; 0x40
 800389e:	f423 61fc 	bic.w	r1, r3, #2016	; 0x7e0
 80038a2:	4033      	ands	r3, r6
 80038a4:	fb08 f101 	mul.w	r1, r8, r1
 80038a8:	fb08 f303 	mul.w	r3, r8, r3
 80038ac:	fb0c 1109 	mla	r1, ip, r9, r1
 80038b0:	fb0c 330e 	mla	r3, ip, lr, r3
 80038b4:	ea07 1191 	and.w	r1, r7, r1, lsr #6
 80038b8:	ea06 1393 	and.w	r3, r6, r3, lsr #6
 80038bc:	430b      	orrs	r3, r1
 80038be:	8023      	strh	r3, [r4, #0]
 80038c0:	3402      	adds	r4, #2
 80038c2:	3a01      	subs	r2, #1
 80038c4:	e7d1      	b.n	800386a <EwScreenCopyNativeRowSolidBlend+0x14>
 80038c6:	bf00      	nop
 80038c8:	00fc07e0 	.word	0x00fc07e0

080038cc <EwScreenCopyNativeRowGradient>:
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	; 0x30
 80038d2:	6805      	ldr	r5, [r0, #0]
 80038d4:	680e      	ldr	r6, [r1, #0]
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	dc00      	bgt.n	80038dc <EwScreenCopyNativeRowGradient+0x10>
 80038da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038dc:	f856 1b04 	ldr.w	r1, [r6], #4
 80038e0:	15a3      	asrs	r3, r4, #22
 80038e2:	0e08      	lsrs	r0, r1, #24
 80038e4:	3301      	adds	r3, #1
 80038e6:	fb00 3303 	mla	r3, r0, r3, r3
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	d013      	beq.n	8003916 <EwScreenCopyNativeRowGradient+0x4a>
 80038ee:	0a08      	lsrs	r0, r1, #8
 80038f0:	f3c1 0cc4 	ubfx	ip, r1, #3, #5
 80038f4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80038f8:	0949      	lsrs	r1, r1, #5
 80038fa:	ea40 000c 	orr.w	r0, r0, ip
 80038fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8003902:	4358      	muls	r0, r3
 8003904:	434b      	muls	r3, r1
 8003906:	0980      	lsrs	r0, r0, #6
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 800390e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003912:	4303      	orrs	r3, r0
 8003914:	b29b      	uxth	r3, r3
 8003916:	f825 3b02 	strh.w	r3, [r5], #2
 800391a:	443c      	add	r4, r7
 800391c:	3a01      	subs	r2, #1
 800391e:	e7da      	b.n	80038d6 <EwScreenCopyNativeRowGradient+0xa>

08003920 <EwScreenCopyNativeRowGradientBlend>:
 8003920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	; 0x30
 8003928:	6800      	ldr	r0, [r0, #0]
 800392a:	680d      	ldr	r5, [r1, #0]
 800392c:	4e1b      	ldr	r6, [pc, #108]	; (800399c <EwScreenCopyNativeRowGradientBlend+0x7c>)
 800392e:	f64f 0c1f 	movw	ip, #63519	; 0xf81f
 8003932:	2a00      	cmp	r2, #0
 8003934:	dc01      	bgt.n	800393a <EwScreenCopyNativeRowGradientBlend+0x1a>
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	f855 3b04 	ldr.w	r3, [r5], #4
 800393e:	ea5f 6a93 	movs.w	sl, r3, lsr #26
 8003942:	d026      	beq.n	8003992 <EwScreenCopyNativeRowGradientBlend+0x72>
 8003944:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003948:	f3c3 01c4 	ubfx	r1, r3, #3, #5
 800394c:	f409 4978 	and.w	r9, r9, #63488	; 0xf800
 8003950:	ea49 0901 	orr.w	r9, r9, r1
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	15a1      	asrs	r1, r4, #22
 8003958:	f10a 0e01 	add.w	lr, sl, #1
 800395c:	f403 68fc 	and.w	r8, r3, #2016	; 0x7e0
 8003960:	fb01 ee0e 	mla	lr, r1, lr, lr
 8003964:	8803      	ldrh	r3, [r0, #0]
 8003966:	ea4f 119e 	mov.w	r1, lr, lsr #6
 800396a:	f1c1 0e40 	rsb	lr, r1, #64	; 0x40
 800396e:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 8003972:	4033      	ands	r3, r6
 8003974:	fb0e fa0a 	mul.w	sl, lr, sl
 8003978:	fb0e f303 	mul.w	r3, lr, r3
 800397c:	fb01 a909 	mla	r9, r1, r9, sl
 8003980:	fb01 3308 	mla	r3, r1, r8, r3
 8003984:	ea0c 1999 	and.w	r9, ip, r9, lsr #6
 8003988:	ea06 1393 	and.w	r3, r6, r3, lsr #6
 800398c:	ea49 0303 	orr.w	r3, r9, r3
 8003990:	8003      	strh	r3, [r0, #0]
 8003992:	443c      	add	r4, r7
 8003994:	3002      	adds	r0, #2
 8003996:	3a01      	subs	r2, #1
 8003998:	e7cb      	b.n	8003932 <EwScreenCopyNativeRowGradientBlend+0x12>
 800399a:	bf00      	nop
 800399c:	00fc07e0 	.word	0x00fc07e0

080039a0 <EwScreenCopyIndex8Row>:
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	6804      	ldr	r4, [r0, #0]
 80039a4:	6808      	ldr	r0, [r1, #0]
 80039a6:	698d      	ldr	r5, [r1, #24]
 80039a8:	4402      	add	r2, r0
 80039aa:	1a13      	subs	r3, r2, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	dc00      	bgt.n	80039b2 <EwScreenCopyIndex8Row+0x12>
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80039b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80039ba:	0e9e      	lsrs	r6, r3, #26
 80039bc:	d017      	beq.n	80039ee <EwScreenCopyIndex8Row+0x4e>
 80039be:	0a19      	lsrs	r1, r3, #8
 80039c0:	f3c3 07c4 	ubfx	r7, r3, #3, #5
 80039c4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	4339      	orrs	r1, r7
 80039cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80039d0:	fb06 1101 	mla	r1, r6, r1, r1
 80039d4:	fb06 3303 	mla	r3, r6, r3, r3
 80039d8:	0989      	lsrs	r1, r1, #6
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80039e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80039e4:	430b      	orrs	r3, r1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f824 3b02 	strh.w	r3, [r4], #2
 80039ec:	e7dd      	b.n	80039aa <EwScreenCopyIndex8Row+0xa>
 80039ee:	4633      	mov	r3, r6
 80039f0:	e7fa      	b.n	80039e8 <EwScreenCopyIndex8Row+0x48>

080039f2 <EwScreenCopyIndex8RowBlend>:
 80039f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	6804      	ldr	r4, [r0, #0]
 80039f8:	6808      	ldr	r0, [r1, #0]
 80039fa:	698d      	ldr	r5, [r1, #24]
 80039fc:	4402      	add	r2, r0
 80039fe:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8003a02:	1a13      	subs	r3, r2, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dc01      	bgt.n	8003a0c <EwScreenCopyIndex8RowBlend+0x1a>
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003a10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003a14:	0e9f      	lsrs	r7, r3, #26
 8003a16:	d022      	beq.n	8003a5e <EwScreenCopyIndex8RowBlend+0x6c>
 8003a18:	0a19      	lsrs	r1, r3, #8
 8003a1a:	f3c3 0cc4 	ubfx	ip, r3, #3, #5
 8003a1e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2f3f      	cmp	r7, #63	; 0x3f
 8003a26:	ea41 010c 	orr.w	r1, r1, ip
 8003a2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003a2e:	d014      	beq.n	8003a5a <EwScreenCopyIndex8RowBlend+0x68>
 8003a30:	f8b4 c000 	ldrh.w	ip, [r4]
 8003a34:	f1c7 0e3f 	rsb	lr, r7, #63	; 0x3f
 8003a38:	f42c 68fc 	bic.w	r8, ip, #2016	; 0x7e0
 8003a3c:	fb07 3303 	mla	r3, r7, r3, r3
 8003a40:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8003a44:	fb07 1101 	mla	r1, r7, r1, r1
 8003a48:	fb0e 330c 	mla	r3, lr, ip, r3
 8003a4c:	fb0e 1108 	mla	r1, lr, r8, r1
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	ea06 1191 	and.w	r1, r6, r1, lsr #6
 8003a56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	8023      	strh	r3, [r4, #0]
 8003a5e:	3402      	adds	r4, #2
 8003a60:	e7cf      	b.n	8003a02 <EwScreenCopyIndex8RowBlend+0x10>

08003a62 <EwScreenCopyIndex8RowSolid>:
 8003a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a64:	6805      	ldr	r5, [r0, #0]
 8003a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a68:	680c      	ldr	r4, [r1, #0]
 8003a6a:	698e      	ldr	r6, [r1, #24]
 8003a6c:	1580      	asrs	r0, r0, #22
 8003a6e:	3001      	adds	r0, #1
 8003a70:	4422      	add	r2, r4
 8003a72:	1b13      	subs	r3, r2, r4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dc00      	bgt.n	8003a7a <EwScreenCopyIndex8RowSolid+0x18>
 8003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a7e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003a82:	0e1f      	lsrs	r7, r3, #24
 8003a84:	fb07 0700 	mla	r7, r7, r0, r0
 8003a88:	0a3f      	lsrs	r7, r7, #8
 8003a8a:	d016      	beq.n	8003aba <EwScreenCopyIndex8RowSolid+0x58>
 8003a8c:	0a19      	lsrs	r1, r3, #8
 8003a8e:	f3c3 0cc4 	ubfx	ip, r3, #3, #5
 8003a92:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	ea41 010c 	orr.w	r1, r1, ip
 8003a9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003aa0:	4379      	muls	r1, r7
 8003aa2:	437b      	muls	r3, r7
 8003aa4:	0989      	lsrs	r1, r1, #6
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8003aac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f825 3b02 	strh.w	r3, [r5], #2
 8003ab8:	e7db      	b.n	8003a72 <EwScreenCopyIndex8RowSolid+0x10>
 8003aba:	463b      	mov	r3, r7
 8003abc:	e7fa      	b.n	8003ab4 <EwScreenCopyIndex8RowSolid+0x52>

08003abe <EwScreenCopyIndex8RowSolidBlend>:
 8003abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac2:	6804      	ldr	r4, [r0, #0]
 8003ac4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ac6:	698e      	ldr	r6, [r1, #24]
 8003ac8:	6809      	ldr	r1, [r1, #0]
 8003aca:	4d1c      	ldr	r5, [pc, #112]	; (8003b3c <EwScreenCopyIndex8RowSolidBlend+0x7e>)
 8003acc:	1580      	asrs	r0, r0, #22
 8003ace:	3001      	adds	r0, #1
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8003ad6:	1a53      	subs	r3, r2, r1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	dc01      	bgt.n	8003ae0 <EwScreenCopyIndex8RowSolidBlend+0x22>
 8003adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ae4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003ae8:	ea5f 6893 	movs.w	r8, r3, lsr #26
 8003aec:	d023      	beq.n	8003b36 <EwScreenCopyIndex8RowSolidBlend+0x78>
 8003aee:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8003af2:	f3c3 09c4 	ubfx	r9, r3, #3, #5
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f403 6efc 	and.w	lr, r3, #2016	; 0x7e0
 8003afc:	fb08 0800 	mla	r8, r8, r0, r0
 8003b00:	8823      	ldrh	r3, [r4, #0]
 8003b02:	ea4f 1898 	mov.w	r8, r8, lsr #6
 8003b06:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8003b0a:	ea4c 0909 	orr.w	r9, ip, r9
 8003b0e:	f1c8 0a40 	rsb	sl, r8, #64	; 0x40
 8003b12:	f423 6cfc 	bic.w	ip, r3, #2016	; 0x7e0
 8003b16:	402b      	ands	r3, r5
 8003b18:	fb0a fc0c 	mul.w	ip, sl, ip
 8003b1c:	fb0a f303 	mul.w	r3, sl, r3
 8003b20:	fb08 cc09 	mla	ip, r8, r9, ip
 8003b24:	fb08 330e 	mla	r3, r8, lr, r3
 8003b28:	ea07 1c9c 	and.w	ip, r7, ip, lsr #6
 8003b2c:	ea05 1393 	and.w	r3, r5, r3, lsr #6
 8003b30:	ea4c 0303 	orr.w	r3, ip, r3
 8003b34:	8023      	strh	r3, [r4, #0]
 8003b36:	3402      	adds	r4, #2
 8003b38:	e7cd      	b.n	8003ad6 <EwScreenCopyIndex8RowSolidBlend+0x18>
 8003b3a:	bf00      	nop
 8003b3c:	00fc07e0 	.word	0x00fc07e0

08003b40 <EwScreenCopyIndex8RowGradient>:
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	6805      	ldr	r5, [r0, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	698e      	ldr	r6, [r1, #24]
 8003b48:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	; 0x30
 8003b4c:	4402      	add	r2, r0
 8003b4e:	1a13      	subs	r3, r2, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dc00      	bgt.n	8003b56 <EwScreenCopyIndex8RowGradient+0x16>
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b5a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003b5e:	15a3      	asrs	r3, r4, #22
 8003b60:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 8003b64:	3301      	adds	r3, #1
 8003b66:	fb0c 3303 	mla	r3, ip, r3, r3
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	d017      	beq.n	8003b9e <EwScreenCopyIndex8RowGradient+0x5e>
 8003b6e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8003b72:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
 8003b76:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8003b7a:	0949      	lsrs	r1, r1, #5
 8003b7c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8003b80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8003b84:	fb0c fc03 	mul.w	ip, ip, r3
 8003b88:	434b      	muls	r3, r1
 8003b8a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8003b94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003b98:	ea4c 0303 	orr.w	r3, ip, r3
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f825 3b02 	strh.w	r3, [r5], #2
 8003ba2:	443c      	add	r4, r7
 8003ba4:	e7d3      	b.n	8003b4e <EwScreenCopyIndex8RowGradient+0xe>

08003ba6 <EwScreenCopyIndex8RowGradientBlend>:
 8003ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003baa:	6804      	ldr	r4, [r0, #0]
 8003bac:	6808      	ldr	r0, [r1, #0]
 8003bae:	698f      	ldr	r7, [r1, #24]
 8003bb0:	4e1d      	ldr	r6, [pc, #116]	; (8003c28 <EwScreenCopyIndex8RowGradientBlend+0x82>)
 8003bb2:	e9d3 5c0c 	ldrd	r5, ip, [r3, #48]	; 0x30
 8003bb6:	4402      	add	r2, r0
 8003bb8:	f64f 0e1f 	movw	lr, #63519	; 0xf81f
 8003bbc:	1a13      	subs	r3, r2, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dc01      	bgt.n	8003bc6 <EwScreenCopyIndex8RowGradientBlend+0x20>
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003bce:	ea5f 6a93 	movs.w	sl, r3, lsr #26
 8003bd2:	d026      	beq.n	8003c22 <EwScreenCopyIndex8RowGradientBlend+0x7c>
 8003bd4:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8003bd8:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8003bdc:	f3c3 0bc4 	ubfx	fp, r3, #3, #5
 8003be0:	ea48 0b0b 	orr.w	fp, r8, fp
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	15a9      	asrs	r1, r5, #22
 8003be8:	f10a 0801 	add.w	r8, sl, #1
 8003bec:	f403 69fc 	and.w	r9, r3, #2016	; 0x7e0
 8003bf0:	fb01 8808 	mla	r8, r1, r8, r8
 8003bf4:	8823      	ldrh	r3, [r4, #0]
 8003bf6:	ea4f 1198 	mov.w	r1, r8, lsr #6
 8003bfa:	f1c1 0a40 	rsb	sl, r1, #64	; 0x40
 8003bfe:	f423 68fc 	bic.w	r8, r3, #2016	; 0x7e0
 8003c02:	4033      	ands	r3, r6
 8003c04:	fb0a f808 	mul.w	r8, sl, r8
 8003c08:	fb0a f303 	mul.w	r3, sl, r3
 8003c0c:	fb01 880b 	mla	r8, r1, fp, r8
 8003c10:	fb01 3309 	mla	r3, r1, r9, r3
 8003c14:	ea0e 1898 	and.w	r8, lr, r8, lsr #6
 8003c18:	ea06 1393 	and.w	r3, r6, r3, lsr #6
 8003c1c:	ea48 0303 	orr.w	r3, r8, r3
 8003c20:	8023      	strh	r3, [r4, #0]
 8003c22:	4465      	add	r5, ip
 8003c24:	3402      	adds	r4, #2
 8003c26:	e7c9      	b.n	8003bbc <EwScreenCopyIndex8RowGradientBlend+0x16>
 8003c28:	00fc07e0 	.word	0x00fc07e0

08003c2c <EwScreenCopyAlpha8RowSolid>:
 8003c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c30:	691c      	ldr	r4, [r3, #16]
 8003c32:	6805      	ldr	r5, [r0, #0]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f8df e080 	ldr.w	lr, [pc, #128]	; 8003cb8 <EwScreenCopyAlpha8RowSolid+0x8c>
 8003c3a:	0900      	lsrs	r0, r0, #4
 8003c3c:	0b24      	lsrs	r4, r4, #12
 8003c3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8003c42:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8003c46:	4320      	orrs	r0, r4
 8003c48:	6a1c      	ldr	r4, [r3, #32]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f3c4 5407 	ubfx	r4, r4, #20, #8
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4320      	orrs	r0, r4
 8003c54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c58:	4303      	orrs	r3, r0
 8003c5a:	0a18      	lsrs	r0, r3, #8
 8003c5c:	f3c3 04c4 	ubfx	r4, r3, #3, #5
 8003c60:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8003c64:	4320      	orrs	r0, r4
 8003c66:	680c      	ldr	r4, [r1, #0]
 8003c68:	095e      	lsrs	r6, r3, #5
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8003c70:	1c5f      	adds	r7, r3, #1
 8003c72:	4422      	add	r2, r4
 8003c74:	f64f 0c1f 	movw	ip, #63519	; 0xf81f
 8003c78:	1b11      	subs	r1, r2, r4
 8003c7a:	2900      	cmp	r1, #0
 8003c7c:	dc01      	bgt.n	8003c82 <EwScreenCopyAlpha8RowSolid+0x56>
 8003c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c86:	0889      	lsrs	r1, r1, #2
 8003c88:	d102      	bne.n	8003c90 <EwScreenCopyAlpha8RowSolid+0x64>
 8003c8a:	8029      	strh	r1, [r5, #0]
 8003c8c:	3502      	adds	r5, #2
 8003c8e:	e7f3      	b.n	8003c78 <EwScreenCopyAlpha8RowSolid+0x4c>
 8003c90:	293f      	cmp	r1, #63	; 0x3f
 8003c92:	d101      	bne.n	8003c98 <EwScreenCopyAlpha8RowSolid+0x6c>
 8003c94:	2b3f      	cmp	r3, #63	; 0x3f
 8003c96:	d00c      	beq.n	8003cb2 <EwScreenCopyAlpha8RowSolid+0x86>
 8003c98:	fb01 7107 	mla	r1, r1, r7, r7
 8003c9c:	0989      	lsrs	r1, r1, #6
 8003c9e:	fb01 f800 	mul.w	r8, r1, r0
 8003ca2:	4371      	muls	r1, r6
 8003ca4:	ea0c 1898 	and.w	r8, ip, r8, lsr #6
 8003ca8:	ea0e 1191 	and.w	r1, lr, r1, lsr #6
 8003cac:	ea48 0101 	orr.w	r1, r8, r1
 8003cb0:	e7eb      	b.n	8003c8a <EwScreenCopyAlpha8RowSolid+0x5e>
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4680      	mov	r8, r0
 8003cb6:	e7f9      	b.n	8003cac <EwScreenCopyAlpha8RowSolid+0x80>
 8003cb8:	00fc07e0 	.word	0x00fc07e0

08003cbc <EwScreenCopyAlpha8RowSolidBlend>:
 8003cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc0:	691c      	ldr	r4, [r3, #16]
 8003cc2:	6805      	ldr	r5, [r0, #0]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f8d1 c000 	ldr.w	ip, [r1]
 8003cca:	0900      	lsrs	r0, r0, #4
 8003ccc:	0b24      	lsrs	r4, r4, #12
 8003cce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8003cd2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8003cd6:	4320      	orrs	r0, r4
 8003cd8:	6a1c      	ldr	r4, [r3, #32]
 8003cda:	f3c4 5407 	ubfx	r4, r4, #20, #8
 8003cde:	4320      	orrs	r0, r4
 8003ce0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003ce2:	0124      	lsls	r4, r4, #4
 8003ce4:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8003ce8:	ea40 0304 	orr.w	r3, r0, r4
 8003cec:	0a1f      	lsrs	r7, r3, #8
 8003cee:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 8003cf2:	0ea4      	lsrs	r4, r4, #26
 8003cf4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	eb0c 0802 	add.w	r8, ip, r2
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <EwScreenCopyAlpha8RowSolidBlend+0xac>)
 8003d00:	4307      	orrs	r7, r0
 8003d02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003d06:	f104 0e01 	add.w	lr, r4, #1
 8003d0a:	f64f 091f 	movw	r9, #63519	; 0xf81f
 8003d0e:	eba8 010c 	sub.w	r1, r8, ip
 8003d12:	2900      	cmp	r1, #0
 8003d14:	dc01      	bgt.n	8003d1a <EwScreenCopyAlpha8RowSolidBlend+0x5e>
 8003d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1a:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8003d1e:	0889      	lsrs	r1, r1, #2
 8003d20:	d01d      	beq.n	8003d5e <EwScreenCopyAlpha8RowSolidBlend+0xa2>
 8003d22:	b1e4      	cbz	r4, 8003d5e <EwScreenCopyAlpha8RowSolidBlend+0xa2>
 8003d24:	293f      	cmp	r1, #63	; 0x3f
 8003d26:	d101      	bne.n	8003d2c <EwScreenCopyAlpha8RowSolidBlend+0x70>
 8003d28:	2c3f      	cmp	r4, #63	; 0x3f
 8003d2a:	d01a      	beq.n	8003d62 <EwScreenCopyAlpha8RowSolidBlend+0xa6>
 8003d2c:	8828      	ldrh	r0, [r5, #0]
 8003d2e:	fb01 e10e 	mla	r1, r1, lr, lr
 8003d32:	ea4f 1a91 	mov.w	sl, r1, lsr #6
 8003d36:	f1ca 0b40 	rsb	fp, sl, #64	; 0x40
 8003d3a:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8003d3e:	ea00 0102 	and.w	r1, r0, r2
 8003d42:	fb0b f606 	mul.w	r6, fp, r6
 8003d46:	fb0b f101 	mul.w	r1, fp, r1
 8003d4a:	fb0a 6607 	mla	r6, sl, r7, r6
 8003d4e:	fb0a 1103 	mla	r1, sl, r3, r1
 8003d52:	ea09 1696 	and.w	r6, r9, r6, lsr #6
 8003d56:	ea02 1191 	and.w	r1, r2, r1, lsr #6
 8003d5a:	4331      	orrs	r1, r6
 8003d5c:	8029      	strh	r1, [r5, #0]
 8003d5e:	3502      	adds	r5, #2
 8003d60:	e7d5      	b.n	8003d0e <EwScreenCopyAlpha8RowSolidBlend+0x52>
 8003d62:	4619      	mov	r1, r3
 8003d64:	463e      	mov	r6, r7
 8003d66:	e7f8      	b.n	8003d5a <EwScreenCopyAlpha8RowSolidBlend+0x9e>
 8003d68:	00fc07e0 	.word	0x00fc07e0

08003d6c <EwScreenCopyAlpha8RowGradient>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b085      	sub	sp, #20
 8003d72:	6806      	ldr	r6, [r0, #0]
 8003d74:	6858      	ldr	r0, [r3, #4]
 8003d76:	9001      	str	r0, [sp, #4]
 8003d78:	6958      	ldr	r0, [r3, #20]
 8003d7a:	9002      	str	r0, [sp, #8]
 8003d7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d7e:	9003      	str	r0, [sp, #12]
 8003d80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d82:	680d      	ldr	r5, [r1, #0]
 8003d84:	681f      	ldr	r7, [r3, #0]
 8003d86:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003d8a:	f8d3 e020 	ldr.w	lr, [r3, #32]
 8003d8e:	f8df b098 	ldr.w	fp, [pc, #152]	; 8003e28 <EwScreenCopyAlpha8RowGradient+0xbc>
 8003d92:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8003d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d98:	eb05 0902 	add.w	r9, r5, r2
 8003d9c:	0100      	lsls	r0, r0, #4
 8003d9e:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8003da2:	eba9 0305 	sub.w	r3, r9, r5
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	dc02      	bgt.n	8003db0 <EwScreenCopyAlpha8RowGradient+0x44>
 8003daa:	b005      	add	sp, #20
 8003dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003db4:	b1cb      	cbz	r3, 8003dea <EwScreenCopyAlpha8RowGradient+0x7e>
 8003db6:	093a      	lsrs	r2, r7, #4
 8003db8:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 8003dbc:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8003dc0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	f000 417f 	and.w	r1, r0, #4278190080	; 0xff000000
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	f3ce 5107 	ubfx	r1, lr, #20, #8
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	d10b      	bne.n	8003dee <EwScreenCopyAlpha8RowGradient+0x82>
 8003dd6:	8033      	strh	r3, [r6, #0]
 8003dd8:	9b01      	ldr	r3, [sp, #4]
 8003dda:	441f      	add	r7, r3
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	449c      	add	ip, r3
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	3602      	adds	r6, #2
 8003de4:	449e      	add	lr, r3
 8003de6:	4440      	add	r0, r8
 8003de8:	e7db      	b.n	8003da2 <EwScreenCopyAlpha8RowGradient+0x36>
 8003dea:	461a      	mov	r2, r3
 8003dec:	e7f1      	b.n	8003dd2 <EwScreenCopyAlpha8RowGradient+0x66>
 8003dee:	0a11      	lsrs	r1, r2, #8
 8003df0:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 8003df4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8003df8:	4321      	orrs	r1, r4
 8003dfa:	2b3f      	cmp	r3, #63	; 0x3f
 8003dfc:	ea4f 1452 	mov.w	r4, r2, lsr #5
 8003e00:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8003e04:	ea4f 6292 	mov.w	r2, r2, lsr #26
 8003e08:	d101      	bne.n	8003e0e <EwScreenCopyAlpha8RowGradient+0xa2>
 8003e0a:	2a3f      	cmp	r2, #63	; 0x3f
 8003e0c:	d009      	beq.n	8003e22 <EwScreenCopyAlpha8RowGradient+0xb6>
 8003e0e:	3301      	adds	r3, #1
 8003e10:	fb02 3303 	mla	r3, r2, r3, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	4359      	muls	r1, r3
 8003e18:	435c      	muls	r4, r3
 8003e1a:	ea0a 1191 	and.w	r1, sl, r1, lsr #6
 8003e1e:	ea0b 1494 	and.w	r4, fp, r4, lsr #6
 8003e22:	4321      	orrs	r1, r4
 8003e24:	8031      	strh	r1, [r6, #0]
 8003e26:	e7d7      	b.n	8003dd8 <EwScreenCopyAlpha8RowGradient+0x6c>
 8003e28:	00fc07e0 	.word	0x00fc07e0

08003e2c <EwScreenCopyAlpha8RowGradientBlend>:
 8003e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e30:	b087      	sub	sp, #28
 8003e32:	6807      	ldr	r7, [r0, #0]
 8003e34:	6858      	ldr	r0, [r3, #4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	6958      	ldr	r0, [r3, #20]
 8003e3a:	9002      	str	r0, [sp, #8]
 8003e3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e3e:	680e      	ldr	r6, [r1, #0]
 8003e40:	9003      	str	r0, [sp, #12]
 8003e42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e44:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003e46:	f8d3 c000 	ldr.w	ip, [r3]
 8003e4a:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8003e4e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8003e52:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8003f0c <EwScreenCopyAlpha8RowGradientBlend+0xe0>
 8003e56:	0100      	lsls	r0, r0, #4
 8003e58:	18b3      	adds	r3, r6, r2
 8003e5a:	9004      	str	r0, [sp, #16]
 8003e5c:	0124      	lsls	r4, r4, #4
 8003e5e:	9305      	str	r3, [sp, #20]
 8003e60:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8003e64:	9b05      	ldr	r3, [sp, #20]
 8003e66:	1b9b      	subs	r3, r3, r6
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dc02      	bgt.n	8003e72 <EwScreenCopyAlpha8RowGradientBlend+0x46>
 8003e6c:	b007      	add	sp, #28
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	d045      	beq.n	8003f06 <EwScreenCopyAlpha8RowGradientBlend+0xda>
 8003e7a:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8003e7e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8003e82:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8003e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f004 427f 	and.w	r2, r4, #4278190080	; 0xff000000
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f3c8 5207 	ubfx	r2, r8, #20, #8
 8003e96:	4313      	orrs	r3, r2
 8003e98:	08ad      	lsrs	r5, r5, #2
 8003e9a:	d02a      	beq.n	8003ef2 <EwScreenCopyAlpha8RowGradientBlend+0xc6>
 8003e9c:	ea5f 6a93 	movs.w	sl, r3, lsr #26
 8003ea0:	d027      	beq.n	8003ef2 <EwScreenCopyAlpha8RowGradientBlend+0xc6>
 8003ea2:	0a19      	lsrs	r1, r3, #8
 8003ea4:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 8003ea8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	2d3f      	cmp	r5, #63	; 0x3f
 8003eb0:	ea41 0102 	orr.w	r1, r1, r2
 8003eb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003eb8:	d102      	bne.n	8003ec0 <EwScreenCopyAlpha8RowGradientBlend+0x94>
 8003eba:	f1ba 0f3f 	cmp.w	sl, #63	; 0x3f
 8003ebe:	d016      	beq.n	8003eee <EwScreenCopyAlpha8RowGradientBlend+0xc2>
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	fb0a 5505 	mla	r5, sl, r5, r5
 8003ec6:	8838      	ldrh	r0, [r7, #0]
 8003ec8:	09aa      	lsrs	r2, r5, #6
 8003eca:	f1c2 0a40 	rsb	sl, r2, #64	; 0x40
 8003ece:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 8003ed2:	ea00 0009 	and.w	r0, r0, r9
 8003ed6:	fb0a f505 	mul.w	r5, sl, r5
 8003eda:	fb0a f000 	mul.w	r0, sl, r0
 8003ede:	fb02 5101 	mla	r1, r2, r1, r5
 8003ee2:	fb02 0003 	mla	r0, r2, r3, r0
 8003ee6:	ea0b 1191 	and.w	r1, fp, r1, lsr #6
 8003eea:	ea09 1390 	and.w	r3, r9, r0, lsr #6
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	803b      	strh	r3, [r7, #0]
 8003ef2:	9b01      	ldr	r3, [sp, #4]
 8003ef4:	449c      	add	ip, r3
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	449e      	add	lr, r3
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	4498      	add	r8, r3
 8003efe:	9b04      	ldr	r3, [sp, #16]
 8003f00:	3702      	adds	r7, #2
 8003f02:	441c      	add	r4, r3
 8003f04:	e7ae      	b.n	8003e64 <EwScreenCopyAlpha8RowGradientBlend+0x38>
 8003f06:	462b      	mov	r3, r5
 8003f08:	e7c6      	b.n	8003e98 <EwScreenCopyAlpha8RowGradientBlend+0x6c>
 8003f0a:	bf00      	nop
 8003f0c:	00fc07e0 	.word	0x00fc07e0

08003f10 <EwScreenCopyRGB565Row>:
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	6809      	ldr	r1, [r1, #0]
 8003f14:	3b02      	subs	r3, #2
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	dc00      	bgt.n	8003f1c <EwScreenCopyRGB565Row+0xc>
 8003f1a:	4770      	bx	lr
 8003f1c:	f831 0b02 	ldrh.w	r0, [r1], #2
 8003f20:	f823 0f02 	strh.w	r0, [r3, #2]!
 8003f24:	3a01      	subs	r2, #1
 8003f26:	e7f6      	b.n	8003f16 <EwScreenCopyRGB565Row+0x6>

08003f28 <EwScreenCopyRGB565RowSolid>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	680d      	ldr	r5, [r1, #0]
 8003f2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2e:	6804      	ldr	r4, [r0, #0]
 8003f30:	1589      	asrs	r1, r1, #22
 8003f32:	3101      	adds	r1, #1
 8003f34:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	dc00      	bgt.n	8003f3e <EwScreenCopyRGB565RowSolid+0x16>
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003f42:	b15b      	cbz	r3, 8003f5c <EwScreenCopyRGB565RowSolid+0x34>
 8003f44:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8003f48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003f4c:	434b      	muls	r3, r1
 8003f4e:	4348      	muls	r0, r1
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	ea06 1090 	and.w	r0, r6, r0, lsr #6
 8003f56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003f5a:	4303      	orrs	r3, r0
 8003f5c:	f824 3b02 	strh.w	r3, [r4], #2
 8003f60:	3a01      	subs	r2, #1
 8003f62:	e7e9      	b.n	8003f38 <EwScreenCopyRGB565RowSolid+0x10>

08003f64 <EwScreenCopyRGB565RowSolidBlend>:
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f66:	6804      	ldr	r4, [r0, #0]
 8003f68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f6a:	680d      	ldr	r5, [r1, #0]
 8003f6c:	1580      	asrs	r0, r0, #22
 8003f6e:	1c46      	adds	r6, r0, #1
 8003f70:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8003f74:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	dc00      	bgt.n	8003f7e <EwScreenCopyRGB565RowSolidBlend+0x1a>
 8003f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7e:	8823      	ldrh	r3, [r4, #0]
 8003f80:	f835 cb02 	ldrh.w	ip, [r5], #2
 8003f84:	f423 61fc 	bic.w	r1, r3, #2016	; 0x7e0
 8003f88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003f8c:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8003f90:	4343      	muls	r3, r0
 8003f92:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8003f96:	4341      	muls	r1, r0
 8003f98:	fb06 330c 	mla	r3, r6, ip, r3
 8003f9c:	fb06 110e 	mla	r1, r6, lr, r1
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	ea07 1191 	and.w	r1, r7, r1, lsr #6
 8003fa6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003faa:	430b      	orrs	r3, r1
 8003fac:	f824 3b02 	strh.w	r3, [r4], #2
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	e7e1      	b.n	8003f78 <EwScreenCopyRGB565RowSolidBlend+0x14>

08003fb4 <EwScreenCopyRGB565RowGradient>:
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	; 0x30
 8003fba:	6805      	ldr	r5, [r0, #0]
 8003fbc:	680e      	ldr	r6, [r1, #0]
 8003fbe:	f64f 0c1f 	movw	ip, #63519	; 0xf81f
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	dc00      	bgt.n	8003fc8 <EwScreenCopyRGB565RowGradient+0x14>
 8003fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc8:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003fcc:	b17b      	cbz	r3, 8003fee <EwScreenCopyRGB565RowGradient+0x3a>
 8003fce:	ea4f 5ea4 	mov.w	lr, r4, asr #22
 8003fd2:	f403 61fc 	and.w	r1, r3, #2016	; 0x7e0
 8003fd6:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8003fda:	fb0e 1301 	mla	r3, lr, r1, r1
 8003fde:	fb0e 0000 	mla	r0, lr, r0, r0
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	ea0c 1090 	and.w	r0, ip, r0, lsr #6
 8003fe8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003fec:	4303      	orrs	r3, r0
 8003fee:	f825 3b02 	strh.w	r3, [r5], #2
 8003ff2:	443c      	add	r4, r7
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	e7e4      	b.n	8003fc2 <EwScreenCopyRGB565RowGradient+0xe>

08003ff8 <EwScreenCopyRGB565RowGradientBlend>:
 8003ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ffc:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	; 0x30
 8004000:	6800      	ldr	r0, [r0, #0]
 8004002:	680d      	ldr	r5, [r1, #0]
 8004004:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8004008:	2a00      	cmp	r2, #0
 800400a:	dc01      	bgt.n	8004010 <EwScreenCopyRGB565RowGradientBlend+0x18>
 800400c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004010:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004014:	f8b0 c000 	ldrh.w	ip, [r0]
 8004018:	ea4f 58a4 	mov.w	r8, r4, asr #22
 800401c:	f423 61fc 	bic.w	r1, r3, #2016	; 0x7e0
 8004020:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004024:	f1c8 0e3f 	rsb	lr, r8, #63	; 0x3f
 8004028:	f42c 69fc 	bic.w	r9, ip, #2016	; 0x7e0
 800402c:	fb08 3303 	mla	r3, r8, r3, r3
 8004030:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8004034:	fb08 1101 	mla	r1, r8, r1, r1
 8004038:	fb0e 330c 	mla	r3, lr, ip, r3
 800403c:	fb0e 1109 	mla	r1, lr, r9, r1
 8004040:	099b      	lsrs	r3, r3, #6
 8004042:	ea07 1191 	and.w	r1, r7, r1, lsr #6
 8004046:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800404a:	430b      	orrs	r3, r1
 800404c:	f820 3b02 	strh.w	r3, [r0], #2
 8004050:	4434      	add	r4, r6
 8004052:	3a01      	subs	r2, #1
 8004054:	e7d8      	b.n	8004008 <EwScreenCopyRGB565RowGradientBlend+0x10>

08004056 <EwScreenWarpNativeRow>:
 8004056:	e92d 4cf0 	stmdb	sp!, {r4, r5, r6, r7, sl, fp, lr}
 800405a:	680d      	ldr	r5, [r1, #0]
 800405c:	6889      	ldr	r1, [r1, #8]
 800405e:	9e07      	ldr	r6, [sp, #28]
 8004060:	6804      	ldr	r4, [r0, #0]
 8004062:	ea4f 0ca1 	mov.w	ip, r1, asr #2
 8004066:	2a00      	cmp	r2, #0
 8004068:	dc01      	bgt.n	800406e <EwScreenWarpNativeRow+0x18>
 800406a:	e8bd 8cf0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, fp, pc}
 800406e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004070:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004072:	1331      	asrs	r1, r6, #12
 8004074:	4341      	muls	r1, r0
 8004076:	1408      	asrs	r0, r1, #16
 8004078:	1319      	asrs	r1, r3, #12
 800407a:	4379      	muls	r1, r7
 800407c:	1409      	asrs	r1, r1, #16
 800407e:	fb0c 1100 	mla	r1, ip, r0, r1
 8004082:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
 8004086:	ea5f 6b90 	movs.w	fp, r0, lsr #26
 800408a:	d020      	beq.n	80040ce <EwScreenWarpNativeRow+0x78>
 800408c:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8004090:	f3c0 01c4 	ubfx	r1, r0, #3, #5
 8004094:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8004098:	ea4a 0a01 	orr.w	sl, sl, r1
 800409c:	0941      	lsrs	r1, r0, #5
 800409e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80040a2:	fb0b aa0a 	mla	sl, fp, sl, sl
 80040a6:	fb0b 1101 	mla	r1, fp, r1, r1
 80040aa:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
 80040ae:	0989      	lsrs	r1, r1, #6
 80040b0:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 80040b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80040b8:	ea4a 0101 	orr.w	r1, sl, r1
 80040bc:	b289      	uxth	r1, r1
 80040be:	f824 1b02 	strh.w	r1, [r4], #2
 80040c2:	9908      	ldr	r1, [sp, #32]
 80040c4:	440b      	add	r3, r1
 80040c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040c8:	3a01      	subs	r2, #1
 80040ca:	440e      	add	r6, r1
 80040cc:	e7cb      	b.n	8004066 <EwScreenWarpNativeRow+0x10>
 80040ce:	4659      	mov	r1, fp
 80040d0:	e7f5      	b.n	80040be <EwScreenWarpNativeRow+0x68>

080040d2 <EwScreenWarpNativeRowFilter>:
 80040d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	461d      	mov	r5, r3
 80040d8:	6803      	ldr	r3, [r0, #0]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	688b      	ldr	r3, [r1, #8]
 80040de:	680f      	ldr	r7, [r1, #0]
 80040e0:	109b      	asrs	r3, r3, #2
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	3301      	adds	r3, #1
 80040e6:	009e      	lsls	r6, r3, #2
 80040e8:	4614      	mov	r4, r2
 80040ea:	2c00      	cmp	r4, #0
 80040ec:	dc02      	bgt.n	80040f4 <EwScreenWarpNativeRowFilter+0x22>
 80040ee:	b003      	add	sp, #12
 80040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040f6:	1329      	asrs	r1, r5, #12
 80040f8:	4359      	muls	r1, r3
 80040fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040fc:	1318      	asrs	r0, r3, #12
 80040fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004100:	4358      	muls	r0, r3
 8004102:	1309      	asrs	r1, r1, #12
 8004104:	1300      	asrs	r0, r0, #12
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	3908      	subs	r1, #8
 800410a:	3808      	subs	r0, #8
 800410c:	ea4f 1c20 	mov.w	ip, r0, asr #4
 8004110:	110a      	asrs	r2, r1, #4
 8004112:	fb03 220c 	mla	r2, r3, ip, r2
 8004116:	f000 000f 	and.w	r0, r0, #15
 800411a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 800411e:	f001 010f 	and.w	r1, r1, #15
 8004122:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 8004126:	f1c0 0810 	rsb	r8, r0, #16
 800412a:	199a      	adds	r2, r3, r6
 800412c:	f1c1 0e10 	rsb	lr, r1, #16
 8004130:	fb01 f808 	mul.w	r8, r1, r8
 8004134:	fb00 fe0e 	mul.w	lr, r0, lr
 8004138:	4341      	muls	r1, r0
 800413a:	6858      	ldr	r0, [r3, #4]
 800413c:	f852 9c04 	ldr.w	r9, [r2, #-4]
 8004140:	599b      	ldr	r3, [r3, r6]
 8004142:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8004146:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 800414a:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 800414e:	0a02      	lsrs	r2, r0, #8
 8004150:	ebac 0c0e 	sub.w	ip, ip, lr
 8004154:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004158:	ebac 0c01 	sub.w	ip, ip, r1
 800415c:	fb08 f202 	mul.w	r2, r8, r2
 8004160:	fb0c 220b 	mla	r2, ip, fp, r2
 8004164:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8004168:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800416c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004170:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8004174:	fb08 f000 	mul.w	r0, r8, r0
 8004178:	fb01 220b 	mla	r2, r1, fp, r2
 800417c:	fb0c 000a 	mla	r0, ip, sl, r0
 8004180:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8004184:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004188:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800418c:	fb01 0003 	mla	r0, r1, r3, r0
 8004190:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004194:	fb0e 220b 	mla	r2, lr, fp, r2
 8004198:	fb0e 0e09 	mla	lr, lr, r9, r0
 800419c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80041a0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80041a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80041a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80041ac:	0e92      	lsrs	r2, r2, #26
 80041ae:	d016      	beq.n	80041de <EwScreenWarpNativeRowFilter+0x10c>
 80041b0:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80041b4:	f3ce 03c4 	ubfx	r3, lr, #3, #5
 80041b8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80041bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80041c0:	430b      	orrs	r3, r1
 80041c2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80041c6:	fb02 3303 	mla	r3, r2, r3, r3
 80041ca:	fb02 e20e 	mla	r2, r2, lr, lr
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	0992      	lsrs	r2, r2, #6
 80041d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80041d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80041da:	431a      	orrs	r2, r3
 80041dc:	b292      	uxth	r2, r2
 80041de:	9b00      	ldr	r3, [sp, #0]
 80041e0:	f823 2b02 	strh.w	r2, [r3], #2
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ea:	441d      	add	r5, r3
 80041ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041ee:	4413      	add	r3, r2
 80041f0:	930c      	str	r3, [sp, #48]	; 0x30
 80041f2:	3c01      	subs	r4, #1
 80041f4:	e779      	b.n	80040ea <EwScreenWarpNativeRowFilter+0x18>

080041f6 <EwScreenWarpNativeRowBlend>:
 80041f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	688f      	ldr	r7, [r1, #8]
 80041fc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004200:	6805      	ldr	r5, [r0, #0]
 8004202:	680e      	ldr	r6, [r1, #0]
 8004204:	10bf      	asrs	r7, r7, #2
 8004206:	f64f 091f 	movw	r9, #63519	; 0xf81f
 800420a:	2a00      	cmp	r2, #0
 800420c:	dc01      	bgt.n	8004212 <EwScreenWarpNativeRowBlend+0x1c>
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004214:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004216:	ea4f 312b 	mov.w	r1, fp, asr #12
 800421a:	4341      	muls	r1, r0
 800421c:	1408      	asrs	r0, r1, #16
 800421e:	1319      	asrs	r1, r3, #12
 8004220:	4361      	muls	r1, r4
 8004222:	1409      	asrs	r1, r1, #16
 8004224:	fb07 1100 	mla	r1, r7, r0, r1
 8004228:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 800422c:	0e84      	lsrs	r4, r0, #26
 800422e:	d022      	beq.n	8004276 <EwScreenWarpNativeRowBlend+0x80>
 8004230:	0a01      	lsrs	r1, r0, #8
 8004232:	f3c0 0ec4 	ubfx	lr, r0, #3, #5
 8004236:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800423a:	0940      	lsrs	r0, r0, #5
 800423c:	2c3f      	cmp	r4, #63	; 0x3f
 800423e:	ea41 010e 	orr.w	r1, r1, lr
 8004242:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004246:	d014      	beq.n	8004272 <EwScreenWarpNativeRowBlend+0x7c>
 8004248:	f8b5 e000 	ldrh.w	lr, [r5]
 800424c:	f1c4 083f 	rsb	r8, r4, #63	; 0x3f
 8004250:	f42e 6afc 	bic.w	sl, lr, #2016	; 0x7e0
 8004254:	fb04 0000 	mla	r0, r4, r0, r0
 8004258:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 800425c:	fb04 1101 	mla	r1, r4, r1, r1
 8004260:	fb08 000e 	mla	r0, r8, lr, r0
 8004264:	fb08 110a 	mla	r1, r8, sl, r1
 8004268:	0980      	lsrs	r0, r0, #6
 800426a:	ea09 1191 	and.w	r1, r9, r1, lsr #6
 800426e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004272:	4301      	orrs	r1, r0
 8004274:	8029      	strh	r1, [r5, #0]
 8004276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004278:	440b      	add	r3, r1
 800427a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800427c:	3502      	adds	r5, #2
 800427e:	448b      	add	fp, r1
 8004280:	3a01      	subs	r2, #1
 8004282:	e7c2      	b.n	800420a <EwScreenWarpNativeRowBlend+0x14>

08004284 <EwScreenWarpNativeRowFilterBlend>:
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	461e      	mov	r6, r3
 800428a:	688b      	ldr	r3, [r1, #8]
 800428c:	6805      	ldr	r5, [r0, #0]
 800428e:	680f      	ldr	r7, [r1, #0]
 8004290:	b085      	sub	sp, #20
 8004292:	109b      	asrs	r3, r3, #2
 8004294:	9303      	str	r3, [sp, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	dc02      	bgt.n	80042aa <EwScreenWarpNativeRowFilterBlend+0x26>
 80042a4:	b005      	add	sp, #20
 80042a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042ac:	9c03      	ldr	r4, [sp, #12]
 80042ae:	1331      	asrs	r1, r6, #12
 80042b0:	4359      	muls	r1, r3
 80042b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b4:	1318      	asrs	r0, r3, #12
 80042b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042b8:	4358      	muls	r0, r3
 80042ba:	1309      	asrs	r1, r1, #12
 80042bc:	1300      	asrs	r0, r0, #12
 80042be:	3908      	subs	r1, #8
 80042c0:	3808      	subs	r0, #8
 80042c2:	1102      	asrs	r2, r0, #4
 80042c4:	110b      	asrs	r3, r1, #4
 80042c6:	fb04 3302 	mla	r3, r4, r2, r3
 80042ca:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80042ce:	f857 a023 	ldr.w	sl, [r7, r3, lsl #2]
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	9c02      	ldr	r4, [sp, #8]
 80042d6:	f000 000f 	and.w	r0, r0, #15
 80042da:	f001 010f 	and.w	r1, r1, #15
 80042de:	18d3      	adds	r3, r2, r3
 80042e0:	f1c0 0810 	rsb	r8, r0, #16
 80042e4:	f1c1 0e10 	rsb	lr, r1, #16
 80042e8:	fb01 f808 	mul.w	r8, r1, r8
 80042ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80042f0:	4341      	muls	r1, r0
 80042f2:	6850      	ldr	r0, [r2, #4]
 80042f4:	f853 9c04 	ldr.w	r9, [r3, #-4]
 80042f8:	5912      	ldr	r2, [r2, r4]
 80042fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80042fe:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8004302:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8004306:	0a03      	lsrs	r3, r0, #8
 8004308:	ebac 0c0e 	sub.w	ip, ip, lr
 800430c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004310:	ebac 0c01 	sub.w	ip, ip, r1
 8004314:	fb08 f303 	mul.w	r3, r8, r3
 8004318:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800431c:	fb0c 330b 	mla	r3, ip, fp, r3
 8004320:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8004324:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8004328:	fb08 f000 	mul.w	r0, r8, r0
 800432c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004330:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004334:	fb0c 000a 	mla	r0, ip, sl, r0
 8004338:	fb01 330b 	mla	r3, r1, fp, r3
 800433c:	fb01 0002 	mla	r0, r1, r2, r0
 8004340:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8004344:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004348:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800434c:	fb0e 0209 	mla	r2, lr, r9, r0
 8004350:	fb0e 330b 	mla	r3, lr, fp, r3
 8004354:	0a12      	lsrs	r2, r2, #8
 8004356:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800435a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800435e:	431a      	orrs	r2, r3
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	d023      	beq.n	80043ac <EwScreenWarpNativeRowFilterBlend+0x128>
 8004364:	0a11      	lsrs	r1, r2, #8
 8004366:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 800436a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800436e:	0952      	lsrs	r2, r2, #5
 8004370:	2b3f      	cmp	r3, #63	; 0x3f
 8004372:	ea41 0100 	orr.w	r1, r1, r0
 8004376:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800437a:	d015      	beq.n	80043a8 <EwScreenWarpNativeRowFilterBlend+0x124>
 800437c:	8828      	ldrh	r0, [r5, #0]
 800437e:	f1c3 0c3f 	rsb	ip, r3, #63	; 0x3f
 8004382:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8004386:	fb03 1101 	mla	r1, r3, r1, r1
 800438a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800438e:	fb03 2302 	mla	r3, r3, r2, r2
 8004392:	fb0c 3200 	mla	r2, ip, r0, r3
 8004396:	fb0c 110e 	mla	r1, ip, lr, r1
 800439a:	0992      	lsrs	r2, r2, #6
 800439c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80043a0:	ea03 1191 	and.w	r1, r3, r1, lsr #6
 80043a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80043a8:	430a      	orrs	r2, r1
 80043aa:	802a      	strh	r2, [r5, #0]
 80043ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043b0:	441e      	add	r6, r3
 80043b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b4:	4413      	add	r3, r2
 80043b6:	930e      	str	r3, [sp, #56]	; 0x38
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	3502      	adds	r5, #2
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	e76d      	b.n	800429e <EwScreenWarpNativeRowFilterBlend+0x1a>

080043c2 <EwScreenWarpNativeRowGradient>:
 80043c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80043c8:	f8d0 c000 	ldr.w	ip, [r0]
 80043cc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80043ce:	6808      	ldr	r0, [r1, #0]
 80043d0:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 80043d4:	6889      	ldr	r1, [r1, #8]
 80043d6:	9001      	str	r0, [sp, #4]
 80043d8:	15b7      	asrs	r7, r6, #22
 80043da:	ea4f 0ba1 	mov.w	fp, r1, asr #2
 80043de:	3701      	adds	r7, #1
 80043e0:	f1ba 0f00 	cmp.w	sl, #0
 80043e4:	d109      	bne.n	80043fa <EwScreenWarpNativeRowGradient+0x38>
 80043e6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80043e8:	fab5 f585 	clz	r5, r5
 80043ec:	096d      	lsrs	r5, r5, #5
 80043ee:	4610      	mov	r0, r2
 80043f0:	2800      	cmp	r0, #0
 80043f2:	dc04      	bgt.n	80043fe <EwScreenWarpNativeRowGradient+0x3c>
 80043f4:	b003      	add	sp, #12
 80043f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fa:	2500      	movs	r5, #0
 80043fc:	e7f7      	b.n	80043ee <EwScreenWarpNativeRowGradient+0x2c>
 80043fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004400:	131a      	asrs	r2, r3, #12
 8004402:	434a      	muls	r2, r1
 8004404:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004406:	ea4f 3921 	mov.w	r9, r1, asr #12
 800440a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800440c:	fb01 f909 	mul.w	r9, r1, r9
 8004410:	ea4f 4929 	mov.w	r9, r9, asr #16
 8004414:	fb09 f10b 	mul.w	r1, r9, fp
 8004418:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800441c:	eb01 4222 	add.w	r2, r1, r2, asr #16
 8004420:	9901      	ldr	r1, [sp, #4]
 8004422:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004426:	bb25      	cbnz	r5, 8004472 <EwScreenWarpNativeRowGradient+0xb0>
 8004428:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800442c:	f1ba 0f00 	cmp.w	sl, #0
 8004430:	d046      	beq.n	80044c0 <EwScreenWarpNativeRowGradient+0xfe>
 8004432:	f1b9 0f00 	cmp.w	r9, #0
 8004436:	d045      	beq.n	80044c4 <EwScreenWarpNativeRowGradient+0x102>
 8004438:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800443a:	fb02 6209 	mla	r2, r2, r9, r6
 800443e:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8004440:	b12f      	cbz	r7, 800444e <EwScreenWarpNativeRowGradient+0x8c>
 8004442:	f1b9 0f00 	cmp.w	r9, #0
 8004446:	d002      	beq.n	800444e <EwScreenWarpNativeRowGradient+0x8c>
 8004448:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800444a:	fb07 8809 	mla	r8, r7, r9, r8
 800444e:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8004450:	b167      	cbz	r7, 800446c <EwScreenWarpNativeRowGradient+0xaa>
 8004452:	f1be 0f00 	cmp.w	lr, #0
 8004456:	d009      	beq.n	800446c <EwScreenWarpNativeRowGradient+0xaa>
 8004458:	1517      	asrs	r7, r2, #20
 800445a:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 800445e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8004460:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8004464:	fb07 f808 	mul.w	r8, r7, r8
 8004468:	fb0e 2208 	mla	r2, lr, r8, r2
 800446c:	f3c2 5285 	ubfx	r2, r2, #22, #6
 8004470:	1c57      	adds	r7, r2, #1
 8004472:	0e0a      	lsrs	r2, r1, #24
 8004474:	fb02 7207 	mla	r2, r2, r7, r7
 8004478:	0a12      	lsrs	r2, r2, #8
 800447a:	d017      	beq.n	80044ac <EwScreenWarpNativeRowGradient+0xea>
 800447c:	ea4f 2811 	mov.w	r8, r1, lsr #8
 8004480:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
 8004484:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8004488:	0949      	lsrs	r1, r1, #5
 800448a:	ea48 0e0e 	orr.w	lr, r8, lr
 800448e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004492:	fb0e fe02 	mul.w	lr, lr, r2
 8004496:	434a      	muls	r2, r1
 8004498:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800449c:	0992      	lsrs	r2, r2, #6
 800449e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80044a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80044a6:	ea4e 0202 	orr.w	r2, lr, r2
 80044aa:	b292      	uxth	r2, r2
 80044ac:	f82c 2b02 	strh.w	r2, [ip], #2
 80044b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80044b4:	4413      	add	r3, r2
 80044b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044b8:	440a      	add	r2, r1
 80044ba:	920c      	str	r2, [sp, #48]	; 0x30
 80044bc:	3801      	subs	r0, #1
 80044be:	e797      	b.n	80043f0 <EwScreenWarpNativeRowGradient+0x2e>
 80044c0:	4632      	mov	r2, r6
 80044c2:	e7c4      	b.n	800444e <EwScreenWarpNativeRowGradient+0x8c>
 80044c4:	4632      	mov	r2, r6
 80044c6:	e7ba      	b.n	800443e <EwScreenWarpNativeRowGradient+0x7c>

080044c8 <EwScreenWarpNativeRowFilterGradient>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	b089      	sub	sp, #36	; 0x24
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	680b      	ldr	r3, [r1, #0]
 80044d6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80044d8:	9306      	str	r3, [sp, #24]
 80044da:	688b      	ldr	r3, [r1, #8]
 80044dc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80044e0:	109b      	asrs	r3, r3, #2
 80044e2:	9307      	str	r3, [sp, #28]
 80044e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044e6:	9303      	str	r3, [sp, #12]
 80044e8:	ea4f 51a8 	mov.w	r1, r8, asr #22
 80044ec:	3101      	adds	r1, #1
 80044ee:	b973      	cbnz	r3, 800450e <EwScreenWarpNativeRowFilterGradient+0x46>
 80044f0:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80044f2:	fab6 f686 	clz	r6, r6
 80044f6:	0976      	lsrs	r6, r6, #5
 80044f8:	9b07      	ldr	r3, [sp, #28]
 80044fa:	9201      	str	r2, [sp, #4]
 80044fc:	3301      	adds	r3, #1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	9305      	str	r3, [sp, #20]
 8004502:	9b01      	ldr	r3, [sp, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dc04      	bgt.n	8004512 <EwScreenWarpNativeRowFilterGradient+0x4a>
 8004508:	b009      	add	sp, #36	; 0x24
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	2600      	movs	r6, #0
 8004510:	e7f2      	b.n	80044f8 <EwScreenWarpNativeRowFilterGradient+0x30>
 8004512:	9b02      	ldr	r3, [sp, #8]
 8004514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004516:	1318      	asrs	r0, r3, #12
 8004518:	ea4f 3c22 	mov.w	ip, r2, asr #12
 800451c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800451e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004520:	4358      	muls	r0, r3
 8004522:	fb02 fc0c 	mul.w	ip, r2, ip
 8004526:	ea4f 3e20 	mov.w	lr, r0, asr #12
 800452a:	ea4f 352c 	mov.w	r5, ip, asr #12
 800452e:	bb0e      	cbnz	r6, 8004574 <EwScreenWarpNativeRowFilterGradient+0xac>
 8004530:	9a03      	ldr	r2, [sp, #12]
 8004532:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004534:	2a00      	cmp	r2, #0
 8004536:	f000 809d 	beq.w	8004674 <EwScreenWarpNativeRowFilterGradient+0x1ac>
 800453a:	ea5f 422c 	movs.w	r2, ip, asr #16
 800453e:	f000 809b 	beq.w	8004678 <EwScreenWarpNativeRowFilterGradient+0x1b0>
 8004542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004544:	fb01 8102 	mla	r1, r1, r2, r8
 8004548:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800454a:	b11b      	cbz	r3, 8004554 <EwScreenWarpNativeRowFilterGradient+0x8c>
 800454c:	b112      	cbz	r2, 8004554 <EwScreenWarpNativeRowFilterGradient+0x8c>
 800454e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004550:	fb03 7702 	mla	r7, r3, r2, r7
 8004554:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004556:	b152      	cbz	r2, 800456e <EwScreenWarpNativeRowFilterGradient+0xa6>
 8004558:	1400      	asrs	r0, r0, #16
 800455a:	d008      	beq.n	800456e <EwScreenWarpNativeRowFilterGradient+0xa6>
 800455c:	150a      	asrs	r2, r1, #20
 800455e:	ebc2 5727 	rsb	r7, r2, r7, asr #20
 8004562:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004564:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8004568:	4357      	muls	r7, r2
 800456a:	fb00 1107 	mla	r1, r0, r7, r1
 800456e:	f3c1 5185 	ubfx	r1, r1, #22, #6
 8004572:	3101      	adds	r1, #1
 8004574:	f1ae 0008 	sub.w	r0, lr, #8
 8004578:	9a07      	ldr	r2, [sp, #28]
 800457a:	3d08      	subs	r5, #8
 800457c:	112b      	asrs	r3, r5, #4
 800457e:	1107      	asrs	r7, r0, #4
 8004580:	fb02 7703 	mla	r7, r2, r3, r7
 8004584:	9b06      	ldr	r3, [sp, #24]
 8004586:	eb03 0287 	add.w	r2, r3, r7, lsl #2
 800458a:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 800458e:	9b05      	ldr	r3, [sp, #20]
 8004590:	9f05      	ldr	r7, [sp, #20]
 8004592:	f005 050f 	and.w	r5, r5, #15
 8004596:	f000 000f 	and.w	r0, r0, #15
 800459a:	18d3      	adds	r3, r2, r3
 800459c:	f1c5 0e10 	rsb	lr, r5, #16
 80045a0:	f1c0 0c10 	rsb	ip, r0, #16
 80045a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80045a8:	fb05 fc0c 	mul.w	ip, r5, ip
 80045ac:	4368      	muls	r0, r5
 80045ae:	6855      	ldr	r5, [r2, #4]
 80045b0:	f853 9c04 	ldr.w	r9, [r3, #-4]
 80045b4:	59d2      	ldr	r2, [r2, r7]
 80045b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80045ba:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 80045be:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 80045c2:	0a2b      	lsrs	r3, r5, #8
 80045c4:	eba7 070c 	sub.w	r7, r7, ip
 80045c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80045cc:	1a3f      	subs	r7, r7, r0
 80045ce:	fb0e f303 	mul.w	r3, lr, r3
 80045d2:	fb07 330b 	mla	r3, r7, fp, r3
 80045d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80045da:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80045de:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80045e2:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80045e6:	fb0e f505 	mul.w	r5, lr, r5
 80045ea:	fb00 330b 	mla	r3, r0, fp, r3
 80045ee:	fb07 550a 	mla	r5, r7, sl, r5
 80045f2:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 80045f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80045fa:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80045fe:	fb00 5502 	mla	r5, r0, r2, r5
 8004602:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004606:	fb0c 330b 	mla	r3, ip, fp, r3
 800460a:	fb0c 5c09 	mla	ip, ip, r9, r5
 800460e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8004612:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004616:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 800461a:	ea43 0c0c 	orr.w	ip, r3, ip
 800461e:	0e1b      	lsrs	r3, r3, #24
 8004620:	fb03 1301 	mla	r3, r3, r1, r1
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	d015      	beq.n	8004654 <EwScreenWarpNativeRowFilterGradient+0x18c>
 8004628:	ea4f 201c 	mov.w	r0, ip, lsr #8
 800462c:	f3cc 02c4 	ubfx	r2, ip, #3, #5
 8004630:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8004634:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004638:	4302      	orrs	r2, r0
 800463a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 800463e:	435a      	muls	r2, r3
 8004640:	fb0c f303 	mul.w	r3, ip, r3
 8004644:	0992      	lsrs	r2, r2, #6
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 800464c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004650:	4313      	orrs	r3, r2
 8004652:	b29b      	uxth	r3, r3
 8004654:	9a04      	ldr	r2, [sp, #16]
 8004656:	f822 3b02 	strh.w	r3, [r2], #2
 800465a:	9b02      	ldr	r3, [sp, #8]
 800465c:	9204      	str	r2, [sp, #16]
 800465e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004660:	4413      	add	r3, r2
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004666:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004668:	4413      	add	r3, r2
 800466a:	9312      	str	r3, [sp, #72]	; 0x48
 800466c:	9b01      	ldr	r3, [sp, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	e746      	b.n	8004502 <EwScreenWarpNativeRowFilterGradient+0x3a>
 8004674:	4641      	mov	r1, r8
 8004676:	e76d      	b.n	8004554 <EwScreenWarpNativeRowFilterGradient+0x8c>
 8004678:	4641      	mov	r1, r8
 800467a:	e765      	b.n	8004548 <EwScreenWarpNativeRowFilterGradient+0x80>

0800467c <EwScreenWarpNativeRowGradientBlend>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	b085      	sub	sp, #20
 8004682:	f8d0 c000 	ldr.w	ip, [r0]
 8004686:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004688:	6808      	ldr	r0, [r1, #0]
 800468a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800468c:	6889      	ldr	r1, [r1, #8]
 800468e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	1089      	asrs	r1, r1, #2
 8004696:	ea4f 58a6 	mov.w	r8, r6, asr #22
 800469a:	9002      	str	r0, [sp, #8]
 800469c:	9103      	str	r1, [sp, #12]
 800469e:	f108 0801 	add.w	r8, r8, #1
 80046a2:	f1ba 0f00 	cmp.w	sl, #0
 80046a6:	d109      	bne.n	80046bc <EwScreenWarpNativeRowGradientBlend+0x40>
 80046a8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80046aa:	fab5 f585 	clz	r5, r5
 80046ae:	096d      	lsrs	r5, r5, #5
 80046b0:	4610      	mov	r0, r2
 80046b2:	2800      	cmp	r0, #0
 80046b4:	dc04      	bgt.n	80046c0 <EwScreenWarpNativeRowGradientBlend+0x44>
 80046b6:	b005      	add	sp, #20
 80046b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046bc:	2500      	movs	r5, #0
 80046be:	e7f7      	b.n	80046b0 <EwScreenWarpNativeRowGradientBlend+0x34>
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80046c4:	131a      	asrs	r2, r3, #12
 80046c6:	434a      	muls	r2, r1
 80046c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80046ca:	ea4f 3921 	mov.w	r9, r1, asr #12
 80046ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80046d0:	fb01 f909 	mul.w	r9, r1, r9
 80046d4:	9903      	ldr	r1, [sp, #12]
 80046d6:	ea4f 4729 	mov.w	r7, r9, asr #16
 80046da:	4379      	muls	r1, r7
 80046dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80046e0:	eb01 4222 	add.w	r2, r1, r2, asr #16
 80046e4:	9902      	ldr	r1, [sp, #8]
 80046e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80046ea:	bb15      	cbnz	r5, 8004732 <EwScreenWarpNativeRowGradientBlend+0xb6>
 80046ec:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80046f0:	f1ba 0f00 	cmp.w	sl, #0
 80046f4:	d054      	beq.n	80047a0 <EwScreenWarpNativeRowGradientBlend+0x124>
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	d054      	beq.n	80047a4 <EwScreenWarpNativeRowGradientBlend+0x128>
 80046fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046fc:	fb02 6207 	mla	r2, r2, r7, r6
 8004700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004702:	b11b      	cbz	r3, 800470c <EwScreenWarpNativeRowGradientBlend+0x90>
 8004704:	b117      	cbz	r7, 800470c <EwScreenWarpNativeRowGradientBlend+0x90>
 8004706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004708:	fb03 8807 	mla	r8, r3, r7, r8
 800470c:	6d67      	ldr	r7, [r4, #84]	; 0x54
 800470e:	b167      	cbz	r7, 800472a <EwScreenWarpNativeRowGradientBlend+0xae>
 8004710:	f1be 0f00 	cmp.w	lr, #0
 8004714:	d009      	beq.n	800472a <EwScreenWarpNativeRowGradientBlend+0xae>
 8004716:	1517      	asrs	r7, r2, #20
 8004718:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 800471c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800471e:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8004722:	fb07 f808 	mul.w	r8, r7, r8
 8004726:	fb0e 2208 	mla	r2, lr, r8, r2
 800472a:	f3c2 5285 	ubfx	r2, r2, #22, #6
 800472e:	f102 0801 	add.w	r8, r2, #1
 8004732:	0e8a      	lsrs	r2, r1, #26
 8004734:	d028      	beq.n	8004788 <EwScreenWarpNativeRowGradientBlend+0x10c>
 8004736:	ea4f 2911 	mov.w	r9, r1, lsr #8
 800473a:	f3c1 07c4 	ubfx	r7, r1, #3, #5
 800473e:	f409 4978 	and.w	r9, r9, #63488	; 0xf800
 8004742:	ea49 0907 	orr.w	r9, r9, r7
 8004746:	fb02 8208 	mla	r2, r2, r8, r8
 800474a:	f8bc 7000 	ldrh.w	r7, [ip]
 800474e:	0992      	lsrs	r2, r2, #6
 8004750:	f1c2 0b40 	rsb	fp, r2, #64	; 0x40
 8004754:	f427 6efc 	bic.w	lr, r7, #2016	; 0x7e0
 8004758:	0949      	lsrs	r1, r1, #5
 800475a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 800475e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004762:	fb0b f707 	mul.w	r7, fp, r7
 8004766:	fb0b fe0e 	mul.w	lr, fp, lr
 800476a:	fb02 7701 	mla	r7, r2, r1, r7
 800476e:	fb02 ee09 	mla	lr, r2, r9, lr
 8004772:	09bf      	lsrs	r7, r7, #6
 8004774:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004778:	ea03 1e9e 	and.w	lr, r3, lr, lsr #6
 800477c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8004780:	ea4e 0e07 	orr.w	lr, lr, r7
 8004784:	f8ac e000 	strh.w	lr, [ip]
 8004788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800478a:	9a01      	ldr	r2, [sp, #4]
 800478c:	441a      	add	r2, r3
 800478e:	9201      	str	r2, [sp, #4]
 8004790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004794:	4413      	add	r3, r2
 8004796:	930e      	str	r3, [sp, #56]	; 0x38
 8004798:	f10c 0c02 	add.w	ip, ip, #2
 800479c:	3801      	subs	r0, #1
 800479e:	e788      	b.n	80046b2 <EwScreenWarpNativeRowGradientBlend+0x36>
 80047a0:	4632      	mov	r2, r6
 80047a2:	e7b3      	b.n	800470c <EwScreenWarpNativeRowGradientBlend+0x90>
 80047a4:	4632      	mov	r2, r6
 80047a6:	e7ab      	b.n	8004700 <EwScreenWarpNativeRowGradientBlend+0x84>

080047a8 <EwScreenWarpNativeRowFilterGradientBlend>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	b089      	sub	sp, #36	; 0x24
 80047ae:	9303      	str	r3, [sp, #12]
 80047b0:	6803      	ldr	r3, [r0, #0]
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	680b      	ldr	r3, [r1, #0]
 80047b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80047b8:	9306      	str	r3, [sp, #24]
 80047ba:	688b      	ldr	r3, [r1, #8]
 80047bc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80047c0:	109b      	asrs	r3, r3, #2
 80047c2:	9307      	str	r3, [sp, #28]
 80047c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	ea4f 51a8 	mov.w	r1, r8, asr #22
 80047cc:	3101      	adds	r1, #1
 80047ce:	b973      	cbnz	r3, 80047ee <EwScreenWarpNativeRowFilterGradientBlend+0x46>
 80047d0:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80047d2:	fab6 f686 	clz	r6, r6
 80047d6:	0976      	lsrs	r6, r6, #5
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	9202      	str	r2, [sp, #8]
 80047dc:	3301      	adds	r3, #1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	9305      	str	r3, [sp, #20]
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dc04      	bgt.n	80047f2 <EwScreenWarpNativeRowFilterGradientBlend+0x4a>
 80047e8:	b009      	add	sp, #36	; 0x24
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	2600      	movs	r6, #0
 80047f0:	e7f2      	b.n	80047d8 <EwScreenWarpNativeRowFilterGradientBlend+0x30>
 80047f2:	9b03      	ldr	r3, [sp, #12]
 80047f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047f6:	1318      	asrs	r0, r3, #12
 80047f8:	ea4f 3c22 	mov.w	ip, r2, asr #12
 80047fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004800:	4358      	muls	r0, r3
 8004802:	fb02 fc0c 	mul.w	ip, r2, ip
 8004806:	ea4f 3e20 	mov.w	lr, r0, asr #12
 800480a:	ea4f 352c 	mov.w	r5, ip, asr #12
 800480e:	bb0e      	cbnz	r6, 8004854 <EwScreenWarpNativeRowFilterGradientBlend+0xac>
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004814:	2a00      	cmp	r2, #0
 8004816:	f000 80a7 	beq.w	8004968 <EwScreenWarpNativeRowFilterGradientBlend+0x1c0>
 800481a:	ea5f 422c 	movs.w	r2, ip, asr #16
 800481e:	f000 80a5 	beq.w	800496c <EwScreenWarpNativeRowFilterGradientBlend+0x1c4>
 8004822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004824:	fb01 8102 	mla	r1, r1, r2, r8
 8004828:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800482a:	b11b      	cbz	r3, 8004834 <EwScreenWarpNativeRowFilterGradientBlend+0x8c>
 800482c:	b112      	cbz	r2, 8004834 <EwScreenWarpNativeRowFilterGradientBlend+0x8c>
 800482e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004830:	fb03 7702 	mla	r7, r3, r2, r7
 8004834:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004836:	b152      	cbz	r2, 800484e <EwScreenWarpNativeRowFilterGradientBlend+0xa6>
 8004838:	1400      	asrs	r0, r0, #16
 800483a:	d008      	beq.n	800484e <EwScreenWarpNativeRowFilterGradientBlend+0xa6>
 800483c:	150a      	asrs	r2, r1, #20
 800483e:	ebc2 5727 	rsb	r7, r2, r7, asr #20
 8004842:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004844:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8004848:	4357      	muls	r7, r2
 800484a:	fb00 1107 	mla	r1, r0, r7, r1
 800484e:	f3c1 5185 	ubfx	r1, r1, #22, #6
 8004852:	3101      	adds	r1, #1
 8004854:	f1ae 0008 	sub.w	r0, lr, #8
 8004858:	9a07      	ldr	r2, [sp, #28]
 800485a:	3d08      	subs	r5, #8
 800485c:	112b      	asrs	r3, r5, #4
 800485e:	1107      	asrs	r7, r0, #4
 8004860:	fb02 7703 	mla	r7, r2, r3, r7
 8004864:	9b06      	ldr	r3, [sp, #24]
 8004866:	eb03 0287 	add.w	r2, r3, r7, lsl #2
 800486a:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 800486e:	9b05      	ldr	r3, [sp, #20]
 8004870:	9f05      	ldr	r7, [sp, #20]
 8004872:	f005 050f 	and.w	r5, r5, #15
 8004876:	f000 000f 	and.w	r0, r0, #15
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	f1c5 0e10 	rsb	lr, r5, #16
 8004880:	f1c0 0c10 	rsb	ip, r0, #16
 8004884:	fb00 fe0e 	mul.w	lr, r0, lr
 8004888:	fb05 fc0c 	mul.w	ip, r5, ip
 800488c:	4368      	muls	r0, r5
 800488e:	6855      	ldr	r5, [r2, #4]
 8004890:	f853 9c04 	ldr.w	r9, [r3, #-4]
 8004894:	59d2      	ldr	r2, [r2, r7]
 8004896:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800489a:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 800489e:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 80048a2:	0a2b      	lsrs	r3, r5, #8
 80048a4:	eba7 070c 	sub.w	r7, r7, ip
 80048a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80048ac:	1a3f      	subs	r7, r7, r0
 80048ae:	fb0e f303 	mul.w	r3, lr, r3
 80048b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80048b6:	fb07 330b 	mla	r3, r7, fp, r3
 80048ba:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80048be:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80048c2:	fb0e f505 	mul.w	r5, lr, r5
 80048c6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80048ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80048ce:	fb07 550a 	mla	r5, r7, sl, r5
 80048d2:	fb00 330b 	mla	r3, r0, fp, r3
 80048d6:	fb00 5502 	mla	r5, r0, r2, r5
 80048da:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 80048de:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80048e2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80048e6:	fb0c 5209 	mla	r2, ip, r9, r5
 80048ea:	fb0c 330b 	mla	r3, ip, fp, r3
 80048ee:	0a12      	lsrs	r2, r2, #8
 80048f0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80048f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80048f8:	431a      	orrs	r2, r3
 80048fa:	0e9b      	lsrs	r3, r3, #26
 80048fc:	d025      	beq.n	800494a <EwScreenWarpNativeRowFilterGradientBlend+0x1a2>
 80048fe:	0a17      	lsrs	r7, r2, #8
 8004900:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 8004904:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8004908:	4307      	orrs	r7, r0
 800490a:	9801      	ldr	r0, [sp, #4]
 800490c:	fb03 1301 	mla	r3, r3, r1, r1
 8004910:	8800      	ldrh	r0, [r0, #0]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	f1c3 0c40 	rsb	ip, r3, #64	; 0x40
 8004918:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 800491c:	0952      	lsrs	r2, r2, #5
 800491e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004922:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004926:	fb0c f000 	mul.w	r0, ip, r0
 800492a:	fb03 0002 	mla	r0, r3, r2, r0
 800492e:	fb0c f505 	mul.w	r5, ip, r5
 8004932:	fb03 5507 	mla	r5, r3, r7, r5
 8004936:	0980      	lsrs	r0, r0, #6
 8004938:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800493c:	ea03 1595 	and.w	r5, r3, r5, lsr #6
 8004940:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	4305      	orrs	r5, r0
 8004948:	801d      	strh	r5, [r3, #0]
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800494e:	4413      	add	r3, r2
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004956:	4413      	add	r3, r2
 8004958:	9312      	str	r3, [sp, #72]	; 0x48
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	3302      	adds	r3, #2
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	3b01      	subs	r3, #1
 8004964:	9302      	str	r3, [sp, #8]
 8004966:	e73c      	b.n	80047e2 <EwScreenWarpNativeRowFilterGradientBlend+0x3a>
 8004968:	4641      	mov	r1, r8
 800496a:	e763      	b.n	8004834 <EwScreenWarpNativeRowFilterGradientBlend+0x8c>
 800496c:	4641      	mov	r1, r8
 800496e:	e75b      	b.n	8004828 <EwScreenWarpNativeRowFilterGradientBlend+0x80>

08004970 <EwScreenWarpIndex8Row>:
 8004970:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8004974:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004978:	6805      	ldr	r5, [r0, #0]
 800497a:	680e      	ldr	r6, [r1, #0]
 800497c:	698f      	ldr	r7, [r1, #24]
 800497e:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8004982:	2a00      	cmp	r2, #0
 8004984:	dc01      	bgt.n	800498a <EwScreenWarpIndex8Row+0x1a>
 8004986:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
 800498a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800498c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800498e:	ea4f 312c 	mov.w	r1, ip, asr #12
 8004992:	4341      	muls	r1, r0
 8004994:	1318      	asrs	r0, r3, #12
 8004996:	4360      	muls	r0, r4
 8004998:	1409      	asrs	r1, r1, #16
 800499a:	1400      	asrs	r0, r0, #16
 800499c:	fb0a 6101 	mla	r1, sl, r1, r6
 80049a0:	5c09      	ldrb	r1, [r1, r0]
 80049a2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80049a6:	0e8c      	lsrs	r4, r1, #26
 80049a8:	d016      	beq.n	80049d8 <EwScreenWarpIndex8Row+0x68>
 80049aa:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80049ae:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 80049b2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80049b6:	0949      	lsrs	r1, r1, #5
 80049b8:	ea4e 0000 	orr.w	r0, lr, r0
 80049bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80049c0:	fb04 0000 	mla	r0, r4, r0, r0
 80049c4:	fb04 1401 	mla	r4, r4, r1, r1
 80049c8:	0980      	lsrs	r0, r0, #6
 80049ca:	09a4      	lsrs	r4, r4, #6
 80049cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80049d0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80049d4:	4304      	orrs	r4, r0
 80049d6:	b2a4      	uxth	r4, r4
 80049d8:	9907      	ldr	r1, [sp, #28]
 80049da:	f825 4b02 	strh.w	r4, [r5], #2
 80049de:	440b      	add	r3, r1
 80049e0:	9908      	ldr	r1, [sp, #32]
 80049e2:	3a01      	subs	r2, #1
 80049e4:	448c      	add	ip, r1
 80049e6:	e7cc      	b.n	8004982 <EwScreenWarpIndex8Row+0x12>

080049e8 <EwScreenWarpIndex8RowFilter>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	b085      	sub	sp, #20
 80049ee:	461d      	mov	r5, r3
 80049f0:	6803      	ldr	r3, [r0, #0]
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	688b      	ldr	r3, [r1, #8]
 80049f6:	9302      	str	r3, [sp, #8]
 80049f8:	680e      	ldr	r6, [r1, #0]
 80049fa:	698f      	ldr	r7, [r1, #24]
 80049fc:	9200      	str	r2, [sp, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	9303      	str	r3, [sp, #12]
 8004a02:	9b00      	ldr	r3, [sp, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dc02      	bgt.n	8004a0e <EwScreenWarpIndex8RowFilter+0x26>
 8004a08:	b005      	add	sp, #20
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a10:	9c02      	ldr	r4, [sp, #8]
 8004a12:	1329      	asrs	r1, r5, #12
 8004a14:	4359      	muls	r1, r3
 8004a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a18:	1318      	asrs	r0, r3, #12
 8004a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a1c:	4358      	muls	r0, r3
 8004a1e:	1309      	asrs	r1, r1, #12
 8004a20:	1300      	asrs	r0, r0, #12
 8004a22:	3908      	subs	r1, #8
 8004a24:	3808      	subs	r0, #8
 8004a26:	1103      	asrs	r3, r0, #4
 8004a28:	110a      	asrs	r2, r1, #4
 8004a2a:	fb04 2203 	mla	r2, r4, r3, r2
 8004a2e:	18b3      	adds	r3, r6, r2
 8004a30:	5cb2      	ldrb	r2, [r6, r2]
 8004a32:	9c03      	ldr	r4, [sp, #12]
 8004a34:	f857 a022 	ldr.w	sl, [r7, r2, lsl #2]
 8004a38:	785a      	ldrb	r2, [r3, #1]
 8004a3a:	f000 000f 	and.w	r0, r0, #15
 8004a3e:	f001 010f 	and.w	r1, r1, #15
 8004a42:	f1c0 0810 	rsb	r8, r0, #16
 8004a46:	f1c1 0e10 	rsb	lr, r1, #16
 8004a4a:	fb01 f808 	mul.w	r8, r1, r8
 8004a4e:	fb00 fe0e 	mul.w	lr, r0, lr
 8004a52:	4341      	muls	r1, r0
 8004a54:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8004a58:	9a03      	ldr	r2, [sp, #12]
 8004a5a:	189a      	adds	r2, r3, r2
 8004a5c:	5d1b      	ldrb	r3, [r3, r4]
 8004a5e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8004a62:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004a66:	f857 9022 	ldr.w	r9, [r7, r2, lsl #2]
 8004a6a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8004a6e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8004a72:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8004a76:	0a02      	lsrs	r2, r0, #8
 8004a78:	ebac 0c0e 	sub.w	ip, ip, lr
 8004a7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004a80:	ebac 0c01 	sub.w	ip, ip, r1
 8004a84:	fb08 f202 	mul.w	r2, r8, r2
 8004a88:	fb0c 220b 	mla	r2, ip, fp, r2
 8004a8c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8004a90:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8004a94:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004a98:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8004a9c:	fb08 f000 	mul.w	r0, r8, r0
 8004aa0:	fb01 220b 	mla	r2, r1, fp, r2
 8004aa4:	fb0c 000a 	mla	r0, ip, sl, r0
 8004aa8:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8004aac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004ab0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004ab4:	fb01 0003 	mla	r0, r1, r3, r0
 8004ab8:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004abc:	fb0e 220b 	mla	r2, lr, fp, r2
 8004ac0:	fb0e 0e09 	mla	lr, lr, r9, r0
 8004ac4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8004ac8:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8004acc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8004ad0:	ea42 0e0e 	orr.w	lr, r2, lr
 8004ad4:	0e92      	lsrs	r2, r2, #26
 8004ad6:	d016      	beq.n	8004b06 <EwScreenWarpIndex8RowFilter+0x11e>
 8004ad8:	ea4f 211e 	mov.w	r1, lr, lsr #8
 8004adc:	f3ce 03c4 	ubfx	r3, lr, #3, #5
 8004ae0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8004ae4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8004aee:	fb02 3303 	mla	r3, r2, r3, r3
 8004af2:	fb02 e20e 	mla	r2, r2, lr, lr
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	0992      	lsrs	r2, r2, #6
 8004afa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8004afe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004b02:	431a      	orrs	r2, r3
 8004b04:	b292      	uxth	r2, r2
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	f823 2b02 	strh.w	r2, [r3], #2
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b12:	441d      	add	r5, r3
 8004b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b16:	4413      	add	r3, r2
 8004b18:	930e      	str	r3, [sp, #56]	; 0x38
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	e76f      	b.n	8004a02 <EwScreenWarpIndex8RowFilter+0x1a>

08004b22 <EwScreenWarpIndex8RowBlend>:
 8004b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b26:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004b2a:	6805      	ldr	r5, [r0, #0]
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	698f      	ldr	r7, [r1, #24]
 8004b30:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004b34:	f64f 091f 	movw	r9, #63519	; 0xf81f
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	dc01      	bgt.n	8004b40 <EwScreenWarpIndex8RowBlend+0x1e>
 8004b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004b44:	ea4f 312b 	mov.w	r1, fp, asr #12
 8004b48:	4341      	muls	r1, r0
 8004b4a:	1318      	asrs	r0, r3, #12
 8004b4c:	4360      	muls	r0, r4
 8004b4e:	1409      	asrs	r1, r1, #16
 8004b50:	1400      	asrs	r0, r0, #16
 8004b52:	fb0c 6101 	mla	r1, ip, r1, r6
 8004b56:	5c09      	ldrb	r1, [r1, r0]
 8004b58:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
 8004b5c:	0e84      	lsrs	r4, r0, #26
 8004b5e:	d022      	beq.n	8004ba6 <EwScreenWarpIndex8RowBlend+0x84>
 8004b60:	0a01      	lsrs	r1, r0, #8
 8004b62:	f3c0 0ec4 	ubfx	lr, r0, #3, #5
 8004b66:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8004b6a:	0940      	lsrs	r0, r0, #5
 8004b6c:	2c3f      	cmp	r4, #63	; 0x3f
 8004b6e:	ea41 010e 	orr.w	r1, r1, lr
 8004b72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004b76:	d014      	beq.n	8004ba2 <EwScreenWarpIndex8RowBlend+0x80>
 8004b78:	f8b5 e000 	ldrh.w	lr, [r5]
 8004b7c:	f1c4 083f 	rsb	r8, r4, #63	; 0x3f
 8004b80:	f42e 6afc 	bic.w	sl, lr, #2016	; 0x7e0
 8004b84:	fb04 0000 	mla	r0, r4, r0, r0
 8004b88:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8004b8c:	fb04 1101 	mla	r1, r4, r1, r1
 8004b90:	fb08 000e 	mla	r0, r8, lr, r0
 8004b94:	fb08 110a 	mla	r1, r8, sl, r1
 8004b98:	0980      	lsrs	r0, r0, #6
 8004b9a:	ea09 1191 	and.w	r1, r9, r1, lsr #6
 8004b9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004ba2:	4301      	orrs	r1, r0
 8004ba4:	8029      	strh	r1, [r5, #0]
 8004ba6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ba8:	440b      	add	r3, r1
 8004baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bac:	3502      	adds	r5, #2
 8004bae:	448b      	add	fp, r1
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	e7c1      	b.n	8004b38 <EwScreenWarpIndex8RowBlend+0x16>

08004bb4 <EwScreenWarpIndex8RowFilterBlend>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	461e      	mov	r6, r3
 8004bbc:	680b      	ldr	r3, [r1, #0]
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	688b      	ldr	r3, [r1, #8]
 8004bc2:	9302      	str	r3, [sp, #8]
 8004bc4:	6805      	ldr	r5, [r0, #0]
 8004bc6:	698f      	ldr	r7, [r1, #24]
 8004bc8:	9200      	str	r2, [sp, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	9303      	str	r3, [sp, #12]
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dc02      	bgt.n	8004bda <EwScreenWarpIndex8RowFilterBlend+0x26>
 8004bd4:	b005      	add	sp, #20
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bdc:	9c02      	ldr	r4, [sp, #8]
 8004bde:	1331      	asrs	r1, r6, #12
 8004be0:	4359      	muls	r1, r3
 8004be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be4:	1318      	asrs	r0, r3, #12
 8004be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004be8:	4358      	muls	r0, r3
 8004bea:	1309      	asrs	r1, r1, #12
 8004bec:	1300      	asrs	r0, r0, #12
 8004bee:	3908      	subs	r1, #8
 8004bf0:	3808      	subs	r0, #8
 8004bf2:	1102      	asrs	r2, r0, #4
 8004bf4:	110b      	asrs	r3, r1, #4
 8004bf6:	f000 000f 	and.w	r0, r0, #15
 8004bfa:	f001 010f 	and.w	r1, r1, #15
 8004bfe:	f1c0 0810 	rsb	r8, r0, #16
 8004c02:	f1c1 0e10 	rsb	lr, r1, #16
 8004c06:	fb04 3302 	mla	r3, r4, r2, r3
 8004c0a:	fb01 f808 	mul.w	r8, r1, r8
 8004c0e:	fb00 fe0e 	mul.w	lr, r0, lr
 8004c12:	4341      	muls	r1, r0
 8004c14:	9a01      	ldr	r2, [sp, #4]
 8004c16:	9801      	ldr	r0, [sp, #4]
 8004c18:	9c03      	ldr	r4, [sp, #12]
 8004c1a:	441a      	add	r2, r3
 8004c1c:	5cc3      	ldrb	r3, [r0, r3]
 8004c1e:	f857 a023 	ldr.w	sl, [r7, r3, lsl #2]
 8004c22:	7853      	ldrb	r3, [r2, #1]
 8004c24:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	5d12      	ldrb	r2, [r2, r4]
 8004c2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004c32:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004c36:	f857 9023 	ldr.w	r9, [r7, r3, lsl #2]
 8004c3a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8004c3e:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8004c42:	f5c8 7c80 	rsb	ip, r8, #256	; 0x100
 8004c46:	0a03      	lsrs	r3, r0, #8
 8004c48:	ebac 0c0e 	sub.w	ip, ip, lr
 8004c4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004c50:	ebac 0c01 	sub.w	ip, ip, r1
 8004c54:	fb08 f303 	mul.w	r3, r8, r3
 8004c58:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8004c5c:	fb0c 330b 	mla	r3, ip, fp, r3
 8004c60:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8004c64:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8004c68:	fb08 f000 	mul.w	r0, r8, r0
 8004c6c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004c70:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004c74:	fb0c 000a 	mla	r0, ip, sl, r0
 8004c78:	fb01 330b 	mla	r3, r1, fp, r3
 8004c7c:	fb01 0002 	mla	r0, r1, r2, r0
 8004c80:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8004c84:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004c88:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004c8c:	fb0e 0209 	mla	r2, lr, r9, r0
 8004c90:	fb0e 330b 	mla	r3, lr, fp, r3
 8004c94:	0a12      	lsrs	r2, r2, #8
 8004c96:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004c9a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	d023      	beq.n	8004cec <EwScreenWarpIndex8RowFilterBlend+0x138>
 8004ca4:	0a11      	lsrs	r1, r2, #8
 8004ca6:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 8004caa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8004cae:	0952      	lsrs	r2, r2, #5
 8004cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8004cb2:	ea41 0100 	orr.w	r1, r1, r0
 8004cb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004cba:	d015      	beq.n	8004ce8 <EwScreenWarpIndex8RowFilterBlend+0x134>
 8004cbc:	8828      	ldrh	r0, [r5, #0]
 8004cbe:	f1c3 0c3f 	rsb	ip, r3, #63	; 0x3f
 8004cc2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8004cc6:	fb03 1101 	mla	r1, r3, r1, r1
 8004cca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8004cce:	fb03 2302 	mla	r3, r3, r2, r2
 8004cd2:	fb0c 3200 	mla	r2, ip, r0, r3
 8004cd6:	fb0c 110e 	mla	r1, ip, lr, r1
 8004cda:	0992      	lsrs	r2, r2, #6
 8004cdc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004ce0:	ea03 1191 	and.w	r1, r3, r1, lsr #6
 8004ce4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	802a      	strh	r2, [r5, #0]
 8004cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cf0:	441e      	add	r6, r3
 8004cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf4:	4413      	add	r3, r2
 8004cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8004cf8:	9b00      	ldr	r3, [sp, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	3502      	adds	r5, #2
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	e765      	b.n	8004bce <EwScreenWarpIndex8RowFilterBlend+0x1a>

08004d02 <EwScreenWarpIndex8RowGradient>:
 8004d02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8004d08:	f8d0 a000 	ldr.w	sl, [r0]
 8004d0c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004d0e:	6808      	ldr	r0, [r1, #0]
 8004d10:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
 8004d14:	9000      	str	r0, [sp, #0]
 8004d16:	15b7      	asrs	r7, r6, #22
 8004d18:	6988      	ldr	r0, [r1, #24]
 8004d1a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8004d1e:	9001      	str	r0, [sp, #4]
 8004d20:	3701      	adds	r7, #1
 8004d22:	f1bc 0f00 	cmp.w	ip, #0
 8004d26:	d109      	bne.n	8004d3c <EwScreenWarpIndex8RowGradient+0x3a>
 8004d28:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004d2a:	fab5 f585 	clz	r5, r5
 8004d2e:	096d      	lsrs	r5, r5, #5
 8004d30:	4610      	mov	r0, r2
 8004d32:	2800      	cmp	r0, #0
 8004d34:	dc04      	bgt.n	8004d40 <EwScreenWarpIndex8RowGradient+0x3e>
 8004d36:	b003      	add	sp, #12
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	e7f7      	b.n	8004d30 <EwScreenWarpIndex8RowGradient+0x2e>
 8004d40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d42:	131a      	asrs	r2, r3, #12
 8004d44:	434a      	muls	r2, r1
 8004d46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d48:	ea4f 3921 	mov.w	r9, r1, asr #12
 8004d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004d4e:	fb01 f909 	mul.w	r9, r1, r9
 8004d52:	9900      	ldr	r1, [sp, #0]
 8004d54:	ea4f 4929 	mov.w	r9, r9, asr #16
 8004d58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004d5c:	fb09 f80b 	mul.w	r8, r9, fp
 8004d60:	eb01 4222 	add.w	r2, r1, r2, asr #16
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	f812 2008 	ldrb.w	r2, [r2, r8]
 8004d6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004d6e:	bb25      	cbnz	r5, 8004dba <EwScreenWarpIndex8RowGradient+0xb8>
 8004d70:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8004d74:	f1bc 0f00 	cmp.w	ip, #0
 8004d78:	d046      	beq.n	8004e08 <EwScreenWarpIndex8RowGradient+0x106>
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	d045      	beq.n	8004e0c <EwScreenWarpIndex8RowGradient+0x10a>
 8004d80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d82:	fb02 6209 	mla	r2, r2, r9, r6
 8004d86:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8004d88:	b12f      	cbz	r7, 8004d96 <EwScreenWarpIndex8RowGradient+0x94>
 8004d8a:	f1b9 0f00 	cmp.w	r9, #0
 8004d8e:	d002      	beq.n	8004d96 <EwScreenWarpIndex8RowGradient+0x94>
 8004d90:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8004d92:	fb07 8809 	mla	r8, r7, r9, r8
 8004d96:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8004d98:	b167      	cbz	r7, 8004db4 <EwScreenWarpIndex8RowGradient+0xb2>
 8004d9a:	f1be 0f00 	cmp.w	lr, #0
 8004d9e:	d009      	beq.n	8004db4 <EwScreenWarpIndex8RowGradient+0xb2>
 8004da0:	1517      	asrs	r7, r2, #20
 8004da2:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 8004da6:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8004da8:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8004dac:	fb07 f808 	mul.w	r8, r7, r8
 8004db0:	fb0e 2208 	mla	r2, lr, r8, r2
 8004db4:	f3c2 5285 	ubfx	r2, r2, #22, #6
 8004db8:	1c57      	adds	r7, r2, #1
 8004dba:	0e0a      	lsrs	r2, r1, #24
 8004dbc:	fb02 7207 	mla	r2, r2, r7, r7
 8004dc0:	0a12      	lsrs	r2, r2, #8
 8004dc2:	d017      	beq.n	8004df4 <EwScreenWarpIndex8RowGradient+0xf2>
 8004dc4:	ea4f 2811 	mov.w	r8, r1, lsr #8
 8004dc8:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
 8004dcc:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8004dd0:	0949      	lsrs	r1, r1, #5
 8004dd2:	ea48 0e0e 	orr.w	lr, r8, lr
 8004dd6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004dda:	fb0e fe02 	mul.w	lr, lr, r2
 8004dde:	434a      	muls	r2, r1
 8004de0:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 8004de4:	0992      	lsrs	r2, r2, #6
 8004de6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8004dea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004dee:	ea4e 0202 	orr.w	r2, lr, r2
 8004df2:	b292      	uxth	r2, r2
 8004df4:	f82a 2b02 	strh.w	r2, [sl], #2
 8004df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dfa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004dfc:	4413      	add	r3, r2
 8004dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e00:	440a      	add	r2, r1
 8004e02:	920c      	str	r2, [sp, #48]	; 0x30
 8004e04:	3801      	subs	r0, #1
 8004e06:	e794      	b.n	8004d32 <EwScreenWarpIndex8RowGradient+0x30>
 8004e08:	4632      	mov	r2, r6
 8004e0a:	e7c4      	b.n	8004d96 <EwScreenWarpIndex8RowGradient+0x94>
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	e7ba      	b.n	8004d86 <EwScreenWarpIndex8RowGradient+0x84>

08004e10 <EwScreenWarpIndex8RowFilterGradient>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	b089      	sub	sp, #36	; 0x24
 8004e16:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	6803      	ldr	r3, [r0, #0]
 8004e1e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	688b      	ldr	r3, [r1, #8]
 8004e28:	9306      	str	r3, [sp, #24]
 8004e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	1599      	asrs	r1, r3, #22
 8004e30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	3101      	adds	r1, #1
 8004e36:	b96b      	cbnz	r3, 8004e54 <EwScreenWarpIndex8RowFilterGradient+0x44>
 8004e38:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8004e3a:	fab6 f686 	clz	r6, r6
 8004e3e:	0976      	lsrs	r6, r6, #5
 8004e40:	9b06      	ldr	r3, [sp, #24]
 8004e42:	9201      	str	r2, [sp, #4]
 8004e44:	3301      	adds	r3, #1
 8004e46:	9307      	str	r3, [sp, #28]
 8004e48:	9b01      	ldr	r3, [sp, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dc04      	bgt.n	8004e58 <EwScreenWarpIndex8RowFilterGradient+0x48>
 8004e4e:	b009      	add	sp, #36	; 0x24
 8004e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e54:	2600      	movs	r6, #0
 8004e56:	e7f3      	b.n	8004e40 <EwScreenWarpIndex8RowFilterGradient+0x30>
 8004e58:	9b02      	ldr	r3, [sp, #8]
 8004e5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e5c:	1318      	asrs	r0, r3, #12
 8004e5e:	ea4f 3c22 	mov.w	ip, r2, asr #12
 8004e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e66:	4358      	muls	r0, r3
 8004e68:	fb02 fc0c 	mul.w	ip, r2, ip
 8004e6c:	ea4f 3e20 	mov.w	lr, r0, asr #12
 8004e70:	ea4f 352c 	mov.w	r5, ip, asr #12
 8004e74:	bb16      	cbnz	r6, 8004ebc <EwScreenWarpIndex8RowFilterGradient+0xac>
 8004e76:	9a03      	ldr	r2, [sp, #12]
 8004e78:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	f000 80a4 	beq.w	8004fc8 <EwScreenWarpIndex8RowFilterGradient+0x1b8>
 8004e80:	ea5f 422c 	movs.w	r2, ip, asr #16
 8004e84:	f000 80a2 	beq.w	8004fcc <EwScreenWarpIndex8RowFilterGradient+0x1bc>
 8004e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	fb01 3102 	mla	r1, r1, r2, r3
 8004e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e92:	b11b      	cbz	r3, 8004e9c <EwScreenWarpIndex8RowFilterGradient+0x8c>
 8004e94:	b112      	cbz	r2, 8004e9c <EwScreenWarpIndex8RowFilterGradient+0x8c>
 8004e96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e98:	fb03 7702 	mla	r7, r3, r2, r7
 8004e9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e9e:	b152      	cbz	r2, 8004eb6 <EwScreenWarpIndex8RowFilterGradient+0xa6>
 8004ea0:	1400      	asrs	r0, r0, #16
 8004ea2:	d008      	beq.n	8004eb6 <EwScreenWarpIndex8RowFilterGradient+0xa6>
 8004ea4:	150a      	asrs	r2, r1, #20
 8004ea6:	ebc2 5727 	rsb	r7, r2, r7, asr #20
 8004eaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004eac:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8004eb0:	4357      	muls	r7, r2
 8004eb2:	fb00 1107 	mla	r1, r0, r7, r1
 8004eb6:	f3c1 5185 	ubfx	r1, r1, #22, #6
 8004eba:	3101      	adds	r1, #1
 8004ebc:	f1ae 0008 	sub.w	r0, lr, #8
 8004ec0:	9a06      	ldr	r2, [sp, #24]
 8004ec2:	3d08      	subs	r5, #8
 8004ec4:	112b      	asrs	r3, r5, #4
 8004ec6:	1107      	asrs	r7, r0, #4
 8004ec8:	fb02 7703 	mla	r7, r2, r3, r7
 8004ecc:	9b05      	ldr	r3, [sp, #20]
 8004ece:	19da      	adds	r2, r3, r7
 8004ed0:	5ddb      	ldrb	r3, [r3, r7]
 8004ed2:	9f07      	ldr	r7, [sp, #28]
 8004ed4:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
 8004ed8:	7853      	ldrb	r3, [r2, #1]
 8004eda:	f005 050f 	and.w	r5, r5, #15
 8004ede:	f000 000f 	and.w	r0, r0, #15
 8004ee2:	f1c5 0e10 	rsb	lr, r5, #16
 8004ee6:	f1c0 0c10 	rsb	ip, r0, #16
 8004eea:	fb00 fe0e 	mul.w	lr, r0, lr
 8004eee:	fb05 fc0c 	mul.w	ip, r5, ip
 8004ef2:	4368      	muls	r0, r5
 8004ef4:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8004ef8:	9b07      	ldr	r3, [sp, #28]
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	5dd2      	ldrb	r2, [r2, r7]
 8004efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004f02:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004f06:	f858 9023 	ldr.w	r9, [r8, r3, lsl #2]
 8004f0a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8004f0e:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8004f12:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 8004f16:	0a2b      	lsrs	r3, r5, #8
 8004f18:	eba7 070c 	sub.w	r7, r7, ip
 8004f1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004f20:	1a3f      	subs	r7, r7, r0
 8004f22:	fb0e f303 	mul.w	r3, lr, r3
 8004f26:	fb07 330b 	mla	r3, r7, fp, r3
 8004f2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8004f2e:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8004f32:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004f36:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8004f3a:	fb0e f505 	mul.w	r5, lr, r5
 8004f3e:	fb00 330b 	mla	r3, r0, fp, r3
 8004f42:	fb07 550a 	mla	r5, r7, sl, r5
 8004f46:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8004f4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004f4e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8004f52:	fb00 5502 	mla	r5, r0, r2, r5
 8004f56:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8004f5a:	fb0c 330b 	mla	r3, ip, fp, r3
 8004f5e:	fb0c 5c09 	mla	ip, ip, r9, r5
 8004f62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8004f66:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004f6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8004f6e:	ea43 0c0c 	orr.w	ip, r3, ip
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	fb03 1301 	mla	r3, r3, r1, r1
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	d015      	beq.n	8004fa8 <EwScreenWarpIndex8RowFilterGradient+0x198>
 8004f7c:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8004f80:	f3cc 02c4 	ubfx	r2, ip, #3, #5
 8004f84:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8004f88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004f8c:	4302      	orrs	r2, r0
 8004f8e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8004f92:	435a      	muls	r2, r3
 8004f94:	fb0c f303 	mul.w	r3, ip, r3
 8004f98:	0992      	lsrs	r2, r2, #6
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8004fa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	9a04      	ldr	r2, [sp, #16]
 8004faa:	f822 3b02 	strh.w	r3, [r2], #2
 8004fae:	9b02      	ldr	r3, [sp, #8]
 8004fb0:	9204      	str	r2, [sp, #16]
 8004fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fb4:	4413      	add	r3, r2
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fbc:	4413      	add	r3, r2
 8004fbe:	9312      	str	r3, [sp, #72]	; 0x48
 8004fc0:	9b01      	ldr	r3, [sp, #4]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	e73f      	b.n	8004e48 <EwScreenWarpIndex8RowFilterGradient+0x38>
 8004fc8:	9900      	ldr	r1, [sp, #0]
 8004fca:	e767      	b.n	8004e9c <EwScreenWarpIndex8RowFilterGradient+0x8c>
 8004fcc:	9900      	ldr	r1, [sp, #0]
 8004fce:	e75f      	b.n	8004e90 <EwScreenWarpIndex8RowFilterGradient+0x80>

08004fd0 <EwScreenWarpIndex8RowGradientBlend>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	f8d0 c000 	ldr.w	ip, [r0]
 8004fda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004fdc:	6808      	ldr	r0, [r1, #0]
 8004fde:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004fe0:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 8004fe4:	9001      	str	r0, [sp, #4]
 8004fe6:	ea4f 58a6 	mov.w	r8, r6, asr #22
 8004fea:	6988      	ldr	r0, [r1, #24]
 8004fec:	6889      	ldr	r1, [r1, #8]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	9002      	str	r0, [sp, #8]
 8004ff2:	9103      	str	r1, [sp, #12]
 8004ff4:	f108 0801 	add.w	r8, r8, #1
 8004ff8:	f1ba 0f00 	cmp.w	sl, #0
 8004ffc:	d109      	bne.n	8005012 <EwScreenWarpIndex8RowGradientBlend+0x42>
 8004ffe:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005000:	fab5 f585 	clz	r5, r5
 8005004:	096d      	lsrs	r5, r5, #5
 8005006:	4610      	mov	r0, r2
 8005008:	2800      	cmp	r0, #0
 800500a:	dc04      	bgt.n	8005016 <EwScreenWarpIndex8RowGradientBlend+0x46>
 800500c:	b005      	add	sp, #20
 800500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005012:	2500      	movs	r5, #0
 8005014:	e7f7      	b.n	8005006 <EwScreenWarpIndex8RowGradientBlend+0x36>
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	9911      	ldr	r1, [sp, #68]	; 0x44
 800501a:	131a      	asrs	r2, r3, #12
 800501c:	434a      	muls	r2, r1
 800501e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	ea4f 3921 	mov.w	r9, r1, asr #12
 8005026:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005028:	fb01 f909 	mul.w	r9, r1, r9
 800502c:	9903      	ldr	r1, [sp, #12]
 800502e:	ea4f 4729 	mov.w	r7, r9, asr #16
 8005032:	4379      	muls	r1, r7
 8005034:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005038:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	5c52      	ldrb	r2, [r2, r1]
 8005040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005044:	bb15      	cbnz	r5, 800508c <EwScreenWarpIndex8RowGradientBlend+0xbc>
 8005046:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800504a:	f1ba 0f00 	cmp.w	sl, #0
 800504e:	d054      	beq.n	80050fa <EwScreenWarpIndex8RowGradientBlend+0x12a>
 8005050:	2f00      	cmp	r7, #0
 8005052:	d054      	beq.n	80050fe <EwScreenWarpIndex8RowGradientBlend+0x12e>
 8005054:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005056:	fb02 6207 	mla	r2, r2, r7, r6
 800505a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800505c:	b11b      	cbz	r3, 8005066 <EwScreenWarpIndex8RowGradientBlend+0x96>
 800505e:	b117      	cbz	r7, 8005066 <EwScreenWarpIndex8RowGradientBlend+0x96>
 8005060:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005062:	fb03 8807 	mla	r8, r3, r7, r8
 8005066:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005068:	b167      	cbz	r7, 8005084 <EwScreenWarpIndex8RowGradientBlend+0xb4>
 800506a:	f1be 0f00 	cmp.w	lr, #0
 800506e:	d009      	beq.n	8005084 <EwScreenWarpIndex8RowGradientBlend+0xb4>
 8005070:	1517      	asrs	r7, r2, #20
 8005072:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 8005076:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005078:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 800507c:	fb07 f808 	mul.w	r8, r7, r8
 8005080:	fb0e 2208 	mla	r2, lr, r8, r2
 8005084:	f3c2 5285 	ubfx	r2, r2, #22, #6
 8005088:	f102 0801 	add.w	r8, r2, #1
 800508c:	0e8a      	lsrs	r2, r1, #26
 800508e:	d028      	beq.n	80050e2 <EwScreenWarpIndex8RowGradientBlend+0x112>
 8005090:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8005094:	f3c1 07c4 	ubfx	r7, r1, #3, #5
 8005098:	f409 4978 	and.w	r9, r9, #63488	; 0xf800
 800509c:	ea49 0907 	orr.w	r9, r9, r7
 80050a0:	fb02 8208 	mla	r2, r2, r8, r8
 80050a4:	f8bc 7000 	ldrh.w	r7, [ip]
 80050a8:	0992      	lsrs	r2, r2, #6
 80050aa:	f1c2 0b40 	rsb	fp, r2, #64	; 0x40
 80050ae:	f427 6efc 	bic.w	lr, r7, #2016	; 0x7e0
 80050b2:	0949      	lsrs	r1, r1, #5
 80050b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80050b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80050bc:	fb0b f707 	mul.w	r7, fp, r7
 80050c0:	fb0b fe0e 	mul.w	lr, fp, lr
 80050c4:	fb02 7701 	mla	r7, r2, r1, r7
 80050c8:	fb02 ee09 	mla	lr, r2, r9, lr
 80050cc:	09bf      	lsrs	r7, r7, #6
 80050ce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80050d2:	ea03 1e9e 	and.w	lr, r3, lr, lsr #6
 80050d6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80050da:	ea4e 0e07 	orr.w	lr, lr, r7
 80050de:	f8ac e000 	strh.w	lr, [ip]
 80050e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e4:	9a00      	ldr	r2, [sp, #0]
 80050e6:	441a      	add	r2, r3
 80050e8:	9200      	str	r2, [sp, #0]
 80050ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ee:	4413      	add	r3, r2
 80050f0:	930e      	str	r3, [sp, #56]	; 0x38
 80050f2:	f10c 0c02 	add.w	ip, ip, #2
 80050f6:	3801      	subs	r0, #1
 80050f8:	e786      	b.n	8005008 <EwScreenWarpIndex8RowGradientBlend+0x38>
 80050fa:	4632      	mov	r2, r6
 80050fc:	e7b3      	b.n	8005066 <EwScreenWarpIndex8RowGradientBlend+0x96>
 80050fe:	4632      	mov	r2, r6
 8005100:	e7ab      	b.n	800505a <EwScreenWarpIndex8RowGradientBlend+0x8a>

08005102 <EwScreenWarpIndex8RowFilterGradientBlend>:
 8005102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005106:	b089      	sub	sp, #36	; 0x24
 8005108:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800510c:	9303      	str	r3, [sp, #12]
 800510e:	6803      	ldr	r3, [r0, #0]
 8005110:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	680b      	ldr	r3, [r1, #0]
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	688b      	ldr	r3, [r1, #8]
 800511a:	9306      	str	r3, [sp, #24]
 800511c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	1599      	asrs	r1, r3, #22
 8005122:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005124:	9304      	str	r3, [sp, #16]
 8005126:	3101      	adds	r1, #1
 8005128:	b96b      	cbnz	r3, 8005146 <EwScreenWarpIndex8RowFilterGradientBlend+0x44>
 800512a:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800512c:	fab6 f686 	clz	r6, r6
 8005130:	0976      	lsrs	r6, r6, #5
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	9202      	str	r2, [sp, #8]
 8005136:	3301      	adds	r3, #1
 8005138:	9307      	str	r3, [sp, #28]
 800513a:	9b02      	ldr	r3, [sp, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dc04      	bgt.n	800514a <EwScreenWarpIndex8RowFilterGradientBlend+0x48>
 8005140:	b009      	add	sp, #36	; 0x24
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2600      	movs	r6, #0
 8005148:	e7f3      	b.n	8005132 <EwScreenWarpIndex8RowFilterGradientBlend+0x30>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800514e:	1318      	asrs	r0, r3, #12
 8005150:	ea4f 3c22 	mov.w	ip, r2, asr #12
 8005154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005156:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005158:	4358      	muls	r0, r3
 800515a:	fb02 fc0c 	mul.w	ip, r2, ip
 800515e:	ea4f 3e20 	mov.w	lr, r0, asr #12
 8005162:	ea4f 352c 	mov.w	r5, ip, asr #12
 8005166:	bb16      	cbnz	r6, 80051ae <EwScreenWarpIndex8RowFilterGradientBlend+0xac>
 8005168:	9a04      	ldr	r2, [sp, #16]
 800516a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 80ae 	beq.w	80052ce <EwScreenWarpIndex8RowFilterGradientBlend+0x1cc>
 8005172:	ea5f 422c 	movs.w	r2, ip, asr #16
 8005176:	f000 80ac 	beq.w	80052d2 <EwScreenWarpIndex8RowFilterGradientBlend+0x1d0>
 800517a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800517c:	9b00      	ldr	r3, [sp, #0]
 800517e:	fb01 3102 	mla	r1, r1, r2, r3
 8005182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005184:	b11b      	cbz	r3, 800518e <EwScreenWarpIndex8RowFilterGradientBlend+0x8c>
 8005186:	b112      	cbz	r2, 800518e <EwScreenWarpIndex8RowFilterGradientBlend+0x8c>
 8005188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800518a:	fb03 7702 	mla	r7, r3, r2, r7
 800518e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005190:	b152      	cbz	r2, 80051a8 <EwScreenWarpIndex8RowFilterGradientBlend+0xa6>
 8005192:	1400      	asrs	r0, r0, #16
 8005194:	d008      	beq.n	80051a8 <EwScreenWarpIndex8RowFilterGradientBlend+0xa6>
 8005196:	150a      	asrs	r2, r1, #20
 8005198:	ebc2 5727 	rsb	r7, r2, r7, asr #20
 800519c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800519e:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80051a2:	4357      	muls	r7, r2
 80051a4:	fb00 1107 	mla	r1, r0, r7, r1
 80051a8:	f3c1 5185 	ubfx	r1, r1, #22, #6
 80051ac:	3101      	adds	r1, #1
 80051ae:	f1ae 0008 	sub.w	r0, lr, #8
 80051b2:	9a06      	ldr	r2, [sp, #24]
 80051b4:	3d08      	subs	r5, #8
 80051b6:	112b      	asrs	r3, r5, #4
 80051b8:	1107      	asrs	r7, r0, #4
 80051ba:	fb02 7703 	mla	r7, r2, r3, r7
 80051be:	9b05      	ldr	r3, [sp, #20]
 80051c0:	19da      	adds	r2, r3, r7
 80051c2:	5ddb      	ldrb	r3, [r3, r7]
 80051c4:	9f07      	ldr	r7, [sp, #28]
 80051c6:	f858 a023 	ldr.w	sl, [r8, r3, lsl #2]
 80051ca:	7853      	ldrb	r3, [r2, #1]
 80051cc:	f005 050f 	and.w	r5, r5, #15
 80051d0:	f000 000f 	and.w	r0, r0, #15
 80051d4:	f1c5 0e10 	rsb	lr, r5, #16
 80051d8:	f1c0 0c10 	rsb	ip, r0, #16
 80051dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80051e0:	fb05 fc0c 	mul.w	ip, r5, ip
 80051e4:	4368      	muls	r0, r5
 80051e6:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 80051ea:	9b07      	ldr	r3, [sp, #28]
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	5dd2      	ldrb	r2, [r2, r7]
 80051f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051f4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80051f8:	f858 9023 	ldr.w	r9, [r8, r3, lsl #2]
 80051fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8005200:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8005204:	f5ce 7780 	rsb	r7, lr, #256	; 0x100
 8005208:	0a2b      	lsrs	r3, r5, #8
 800520a:	eba7 070c 	sub.w	r7, r7, ip
 800520e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005212:	1a3f      	subs	r7, r7, r0
 8005214:	fb0e f303 	mul.w	r3, lr, r3
 8005218:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 800521c:	fb07 330b 	mla	r3, r7, fp, r3
 8005220:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8005224:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8005228:	fb0e f505 	mul.w	r5, lr, r5
 800522c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8005230:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8005234:	fb07 550a 	mla	r5, r7, sl, r5
 8005238:	fb00 330b 	mla	r3, r0, fp, r3
 800523c:	fb00 5502 	mla	r5, r0, r2, r5
 8005240:	ea4f 2b19 	mov.w	fp, r9, lsr #8
 8005244:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8005248:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 800524c:	fb0c 5209 	mla	r2, ip, r9, r5
 8005250:	fb0c 330b 	mla	r3, ip, fp, r3
 8005254:	0a12      	lsrs	r2, r2, #8
 8005256:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800525a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800525e:	431a      	orrs	r2, r3
 8005260:	0e9b      	lsrs	r3, r3, #26
 8005262:	d025      	beq.n	80052b0 <EwScreenWarpIndex8RowFilterGradientBlend+0x1ae>
 8005264:	0a17      	lsrs	r7, r2, #8
 8005266:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 800526a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800526e:	4307      	orrs	r7, r0
 8005270:	9801      	ldr	r0, [sp, #4]
 8005272:	fb03 1301 	mla	r3, r3, r1, r1
 8005276:	8800      	ldrh	r0, [r0, #0]
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	f1c3 0c40 	rsb	ip, r3, #64	; 0x40
 800527e:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 8005282:	0952      	lsrs	r2, r2, #5
 8005284:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8005288:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800528c:	fb0c f000 	mul.w	r0, ip, r0
 8005290:	fb03 0002 	mla	r0, r3, r2, r0
 8005294:	fb0c f505 	mul.w	r5, ip, r5
 8005298:	fb03 5507 	mla	r5, r3, r7, r5
 800529c:	0980      	lsrs	r0, r0, #6
 800529e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80052a2:	ea03 1595 	and.w	r5, r3, r5, lsr #6
 80052a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	4305      	orrs	r5, r0
 80052ae:	801d      	strh	r5, [r3, #0]
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052b4:	4413      	add	r3, r2
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80052ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052bc:	4413      	add	r3, r2
 80052be:	9312      	str	r3, [sp, #72]	; 0x48
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	3302      	adds	r3, #2
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	9b02      	ldr	r3, [sp, #8]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	e735      	b.n	800513a <EwScreenWarpIndex8RowFilterGradientBlend+0x38>
 80052ce:	9900      	ldr	r1, [sp, #0]
 80052d0:	e75d      	b.n	800518e <EwScreenWarpIndex8RowFilterGradientBlend+0x8c>
 80052d2:	9900      	ldr	r1, [sp, #0]
 80052d4:	e755      	b.n	8005182 <EwScreenWarpIndex8RowFilterGradientBlend+0x80>

080052d6 <EwScreenWarpAlpha8RowGradient>:
 80052d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	b08d      	sub	sp, #52	; 0x34
 80052dc:	f8d0 c000 	ldr.w	ip, [r0]
 80052e0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80052e2:	9306      	str	r3, [sp, #24]
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	9309      	str	r3, [sp, #36]	; 0x24
 80052e8:	688b      	ldr	r3, [r1, #8]
 80052ea:	930a      	str	r3, [sp, #40]	; 0x28
 80052ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052ee:	9307      	str	r3, [sp, #28]
 80052f0:	bb1b      	cbnz	r3, 800533a <EwScreenWarpAlpha8RowGradient+0x64>
 80052f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052f4:	fab3 fe83 	clz	lr, r3
 80052f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 800530a:	f8d4 b020 	ldr.w	fp, [r4, #32]
 800530e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8005312:	ea4f 3319 	mov.w	r3, r9, lsr #12
 8005316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800531a:	f3cb 5507 	ubfx	r5, fp, #20, #8
 800531e:	430b      	orrs	r3, r1
 8005320:	432b      	orrs	r3, r5
 8005322:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8005326:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800532a:	432b      	orrs	r3, r5
 800532c:	4690      	mov	r8, r2
 800532e:	f1b8 0f00 	cmp.w	r8, #0
 8005332:	dc05      	bgt.n	8005340 <EwScreenWarpAlpha8RowGradient+0x6a>
 8005334:	b00d      	add	sp, #52	; 0x34
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	f04f 0e00 	mov.w	lr, #0
 800533e:	e7dd      	b.n	80052fc <EwScreenWarpAlpha8RowGradient+0x26>
 8005340:	9a06      	ldr	r2, [sp, #24]
 8005342:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005344:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005346:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005348:	1312      	asrs	r2, r2, #12
 800534a:	434a      	muls	r2, r1
 800534c:	1411      	asrs	r1, r2, #16
 800534e:	9108      	str	r1, [sp, #32]
 8005350:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005352:	1309      	asrs	r1, r1, #12
 8005354:	4341      	muls	r1, r0
 8005356:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005358:	1409      	asrs	r1, r1, #16
 800535a:	4348      	muls	r0, r1
 800535c:	eb05 4222 	add.w	r2, r5, r2, asr #16
 8005360:	5c12      	ldrb	r2, [r2, r0]
 8005362:	920b      	str	r2, [sp, #44]	; 0x2c
 8005364:	f1be 0f00 	cmp.w	lr, #0
 8005368:	d16a      	bne.n	8005440 <EwScreenWarpAlpha8RowGradient+0x16a>
 800536a:	68a3      	ldr	r3, [r4, #8]
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	69a3      	ldr	r3, [r4, #24]
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	9b07      	ldr	r3, [sp, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d071      	beq.n	8005464 <EwScreenWarpAlpha8RowGradient+0x18e>
 8005380:	2900      	cmp	r1, #0
 8005382:	f000 8095 	beq.w	80054b0 <EwScreenWarpAlpha8RowGradient+0x1da>
 8005386:	9b01      	ldr	r3, [sp, #4]
 8005388:	6860      	ldr	r0, [r4, #4]
 800538a:	6962      	ldr	r2, [r4, #20]
 800538c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800538e:	fb00 3001 	mla	r0, r0, r1, r3
 8005392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005394:	fb02 9201 	mla	r2, r2, r1, r9
 8005398:	fb03 b301 	mla	r3, r3, r1, fp
 800539c:	fb05 a501 	mla	r5, r5, r1, sl
 80053a0:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80053a2:	b1bf      	cbz	r7, 80053d4 <EwScreenWarpAlpha8RowGradient+0xfe>
 80053a4:	b1b1      	cbz	r1, 80053d4 <EwScreenWarpAlpha8RowGradient+0xfe>
 80053a6:	68e7      	ldr	r7, [r4, #12]
 80053a8:	9e02      	ldr	r6, [sp, #8]
 80053aa:	fb07 6601 	mla	r6, r7, r1, r6
 80053ae:	9f03      	ldr	r7, [sp, #12]
 80053b0:	9602      	str	r6, [sp, #8]
 80053b2:	463e      	mov	r6, r7
 80053b4:	69e7      	ldr	r7, [r4, #28]
 80053b6:	fb07 6701 	mla	r7, r7, r1, r6
 80053ba:	9703      	str	r7, [sp, #12]
 80053bc:	9f04      	ldr	r7, [sp, #16]
 80053be:	463e      	mov	r6, r7
 80053c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80053c2:	fb07 6701 	mla	r7, r7, r1, r6
 80053c6:	9704      	str	r7, [sp, #16]
 80053c8:	9f05      	ldr	r7, [sp, #20]
 80053ca:	463e      	mov	r6, r7
 80053cc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80053ce:	fb07 6101 	mla	r1, r7, r1, r6
 80053d2:	9105      	str	r1, [sp, #20]
 80053d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80053d6:	b329      	cbz	r1, 8005424 <EwScreenWarpAlpha8RowGradient+0x14e>
 80053d8:	9908      	ldr	r1, [sp, #32]
 80053da:	b319      	cbz	r1, 8005424 <EwScreenWarpAlpha8RowGradient+0x14e>
 80053dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053de:	9f08      	ldr	r7, [sp, #32]
 80053e0:	9e02      	ldr	r6, [sp, #8]
 80053e2:	434f      	muls	r7, r1
 80053e4:	4639      	mov	r1, r7
 80053e6:	1507      	asrs	r7, r0, #20
 80053e8:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 80053ec:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 80053f0:	9f03      	ldr	r7, [sp, #12]
 80053f2:	fb01 0006 	mla	r0, r1, r6, r0
 80053f6:	1516      	asrs	r6, r2, #20
 80053f8:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 80053fc:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8005400:	9f04      	ldr	r7, [sp, #16]
 8005402:	fb01 2206 	mla	r2, r1, r6, r2
 8005406:	151e      	asrs	r6, r3, #20
 8005408:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800540c:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8005410:	9f05      	ldr	r7, [sp, #20]
 8005412:	fb01 3306 	mla	r3, r1, r6, r3
 8005416:	152e      	asrs	r6, r5, #20
 8005418:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800541c:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8005420:	fb01 5506 	mla	r5, r1, r6, r5
 8005424:	0900      	lsrs	r0, r0, #4
 8005426:	0b12      	lsrs	r2, r2, #12
 8005428:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800542c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005430:	4310      	orrs	r0, r2
 8005432:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8005436:	012d      	lsls	r5, r5, #4
 8005438:	4303      	orrs	r3, r0
 800543a:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800543e:	432b      	orrs	r3, r5
 8005440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005442:	0892      	lsrs	r2, r2, #2
 8005444:	d113      	bne.n	800546e <EwScreenWarpAlpha8RowGradient+0x198>
 8005446:	f8ac 2000 	strh.w	r2, [ip]
 800544a:	9a06      	ldr	r2, [sp, #24]
 800544c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800544e:	440a      	add	r2, r1
 8005450:	9206      	str	r2, [sp, #24]
 8005452:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005454:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005456:	440a      	add	r2, r1
 8005458:	9216      	str	r2, [sp, #88]	; 0x58
 800545a:	f10c 0c02 	add.w	ip, ip, #2
 800545e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005462:	e764      	b.n	800532e <EwScreenWarpAlpha8RowGradient+0x58>
 8005464:	9801      	ldr	r0, [sp, #4]
 8005466:	4655      	mov	r5, sl
 8005468:	465b      	mov	r3, fp
 800546a:	464a      	mov	r2, r9
 800546c:	e7b2      	b.n	80053d4 <EwScreenWarpAlpha8RowGradient+0xfe>
 800546e:	0a19      	lsrs	r1, r3, #8
 8005470:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 8005474:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8005478:	4301      	orrs	r1, r0
 800547a:	2a3f      	cmp	r2, #63	; 0x3f
 800547c:	ea4f 1053 	mov.w	r0, r3, lsr #5
 8005480:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8005484:	ea4f 6593 	mov.w	r5, r3, lsr #26
 8005488:	d101      	bne.n	800548e <EwScreenWarpAlpha8RowGradient+0x1b8>
 800548a:	2d3f      	cmp	r5, #63	; 0x3f
 800548c:	d00c      	beq.n	80054a8 <EwScreenWarpAlpha8RowGradient+0x1d2>
 800548e:	3201      	adds	r2, #1
 8005490:	fb05 2202 	mla	r2, r5, r2, r2
 8005494:	0992      	lsrs	r2, r2, #6
 8005496:	4350      	muls	r0, r2
 8005498:	4351      	muls	r1, r2
 800549a:	f64f 051f 	movw	r5, #63519	; 0xf81f
 800549e:	0980      	lsrs	r0, r0, #6
 80054a0:	ea05 1191 	and.w	r1, r5, r1, lsr #6
 80054a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80054a8:	4301      	orrs	r1, r0
 80054aa:	f8ac 1000 	strh.w	r1, [ip]
 80054ae:	e7cc      	b.n	800544a <EwScreenWarpAlpha8RowGradient+0x174>
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	4655      	mov	r5, sl
 80054b4:	465b      	mov	r3, fp
 80054b6:	464a      	mov	r2, r9
 80054b8:	e772      	b.n	80053a0 <EwScreenWarpAlpha8RowGradient+0xca>

080054ba <EwScreenWarpAlpha8RowFilterGradient>:
 80054ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054be:	b08d      	sub	sp, #52	; 0x34
 80054c0:	9305      	str	r3, [sp, #20]
 80054c2:	6803      	ldr	r3, [r0, #0]
 80054c4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	680b      	ldr	r3, [r1, #0]
 80054ca:	9307      	str	r3, [sp, #28]
 80054cc:	688b      	ldr	r3, [r1, #8]
 80054ce:	9308      	str	r3, [sp, #32]
 80054d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054d2:	9306      	str	r3, [sp, #24]
 80054d4:	bb3b      	cbnz	r3, 8005526 <EwScreenWarpAlpha8RowFilterGradient+0x6c>
 80054d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	9303      	str	r3, [sp, #12]
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	9b00      	ldr	r3, [sp, #0]
 80054ea:	f8d4 b020 	ldr.w	fp, [r4, #32]
 80054ee:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80054f2:	9204      	str	r2, [sp, #16]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	9a08      	ldr	r2, [sp, #32]
 80054fe:	0b1b      	lsrs	r3, r3, #12
 8005500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005504:	f3cb 5507 	ubfx	r5, fp, #20, #8
 8005508:	430b      	orrs	r3, r1
 800550a:	432b      	orrs	r3, r5
 800550c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8005510:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005514:	3201      	adds	r2, #1
 8005516:	432b      	orrs	r3, r5
 8005518:	9209      	str	r2, [sp, #36]	; 0x24
 800551a:	9a04      	ldr	r2, [sp, #16]
 800551c:	2a00      	cmp	r2, #0
 800551e:	dc04      	bgt.n	800552a <EwScreenWarpAlpha8RowFilterGradient+0x70>
 8005520:	b00d      	add	sp, #52	; 0x34
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	2300      	movs	r3, #0
 8005528:	e7d9      	b.n	80054de <EwScreenWarpAlpha8RowFilterGradient+0x24>
 800552a:	9a05      	ldr	r2, [sp, #20]
 800552c:	ea4f 3922 	mov.w	r9, r2, asr #12
 8005530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005532:	fb02 f909 	mul.w	r9, r2, r9
 8005536:	ea4f 3229 	mov.w	r2, r9, asr #12
 800553a:	920a      	str	r2, [sp, #40]	; 0x28
 800553c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800553e:	1311      	asrs	r1, r2, #12
 8005540:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005542:	4351      	muls	r1, r2
 8005544:	130a      	asrs	r2, r1, #12
 8005546:	920b      	str	r2, [sp, #44]	; 0x2c
 8005548:	9a03      	ldr	r2, [sp, #12]
 800554a:	2a00      	cmp	r2, #0
 800554c:	d15c      	bne.n	8005608 <EwScreenWarpAlpha8RowFilterGradient+0x14e>
 800554e:	9b06      	ldr	r3, [sp, #24]
 8005550:	68a6      	ldr	r6, [r4, #8]
 8005552:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8005556:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 800555a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8093 	beq.w	800568a <EwScreenWarpAlpha8RowFilterGradient+0x1d0>
 8005564:	1409      	asrs	r1, r1, #16
 8005566:	f000 80ba 	beq.w	80056de <EwScreenWarpAlpha8RowFilterGradient+0x224>
 800556a:	9b00      	ldr	r3, [sp, #0]
 800556c:	6860      	ldr	r0, [r4, #4]
 800556e:	6962      	ldr	r2, [r4, #20]
 8005570:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005572:	fb00 3001 	mla	r0, r0, r1, r3
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	fb02 3201 	mla	r2, r2, r1, r3
 800557c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557e:	fb05 a501 	mla	r5, r5, r1, sl
 8005582:	fb03 b301 	mla	r3, r3, r1, fp
 8005586:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005588:	b167      	cbz	r7, 80055a4 <EwScreenWarpAlpha8RowFilterGradient+0xea>
 800558a:	b159      	cbz	r1, 80055a4 <EwScreenWarpAlpha8RowFilterGradient+0xea>
 800558c:	68e7      	ldr	r7, [r4, #12]
 800558e:	fb07 6601 	mla	r6, r7, r1, r6
 8005592:	69e7      	ldr	r7, [r4, #28]
 8005594:	fb07 cc01 	mla	ip, r7, r1, ip
 8005598:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800559a:	fb07 ee01 	mla	lr, r7, r1, lr
 800559e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80055a0:	fb07 8801 	mla	r8, r7, r1, r8
 80055a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055a6:	b309      	cbz	r1, 80055ec <EwScreenWarpAlpha8RowFilterGradient+0x132>
 80055a8:	ea5f 4929 	movs.w	r9, r9, asr #16
 80055ac:	d01e      	beq.n	80055ec <EwScreenWarpAlpha8RowFilterGradient+0x132>
 80055ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055b0:	1507      	asrs	r7, r0, #20
 80055b2:	fb01 f109 	mul.w	r1, r1, r9
 80055b6:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 80055ba:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 80055be:	fb01 0006 	mla	r0, r1, r6, r0
 80055c2:	1516      	asrs	r6, r2, #20
 80055c4:	ebc6 562c 	rsb	r6, r6, ip, asr #20
 80055c8:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 80055cc:	fb01 2206 	mla	r2, r1, r6, r2
 80055d0:	151e      	asrs	r6, r3, #20
 80055d2:	ebc6 562e 	rsb	r6, r6, lr, asr #20
 80055d6:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 80055da:	fb01 3306 	mla	r3, r1, r6, r3
 80055de:	152e      	asrs	r6, r5, #20
 80055e0:	ebc6 5628 	rsb	r6, r6, r8, asr #20
 80055e4:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 80055e8:	fb01 5506 	mla	r5, r1, r6, r5
 80055ec:	0900      	lsrs	r0, r0, #4
 80055ee:	0b12      	lsrs	r2, r2, #12
 80055f0:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80055f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80055f8:	4310      	orrs	r0, r2
 80055fa:	f3c3 5307 	ubfx	r3, r3, #20, #8
 80055fe:	012d      	lsls	r5, r5, #4
 8005600:	4303      	orrs	r3, r0
 8005602:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005606:	432b      	orrs	r3, r5
 8005608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800560a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800560c:	9e08      	ldr	r6, [sp, #32]
 800560e:	f1a1 0008 	sub.w	r0, r1, #8
 8005612:	3a08      	subs	r2, #8
 8005614:	1105      	asrs	r5, r0, #4
 8005616:	1111      	asrs	r1, r2, #4
 8005618:	fb06 1105 	mla	r1, r6, r5, r1
 800561c:	9d07      	ldr	r5, [sp, #28]
 800561e:	f000 000f 	and.w	r0, r0, #15
 8005622:	f002 020f 	and.w	r2, r2, #15
 8005626:	186f      	adds	r7, r5, r1
 8005628:	f1c0 0610 	rsb	r6, r0, #16
 800562c:	f1c2 0510 	rsb	r5, r2, #16
 8005630:	4356      	muls	r6, r2
 8005632:	4345      	muls	r5, r0
 8005634:	4342      	muls	r2, r0
 8005636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005638:	eb07 0c00 	add.w	ip, r7, r0
 800563c:	f5c6 7080 	rsb	r0, r6, #256	; 0x100
 8005640:	1b40      	subs	r0, r0, r5
 8005642:	eba0 0802 	sub.w	r8, r0, r2
 8005646:	9807      	ldr	r0, [sp, #28]
 8005648:	f810 e001 	ldrb.w	lr, [r0, r1]
 800564c:	7879      	ldrb	r1, [r7, #1]
 800564e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005650:	4371      	muls	r1, r6
 8005652:	5c3e      	ldrb	r6, [r7, r0]
 8005654:	fb0e 1108 	mla	r1, lr, r8, r1
 8005658:	fb02 1106 	mla	r1, r2, r6, r1
 800565c:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
 8005660:	fb05 1106 	mla	r1, r5, r6, r1
 8005664:	0a8d      	lsrs	r5, r1, #10
 8005666:	d115      	bne.n	8005694 <EwScreenWarpAlpha8RowFilterGradient+0x1da>
 8005668:	9a02      	ldr	r2, [sp, #8]
 800566a:	8015      	strh	r5, [r2, #0]
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005670:	440a      	add	r2, r1
 8005672:	9205      	str	r2, [sp, #20]
 8005674:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005676:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005678:	440a      	add	r2, r1
 800567a:	9216      	str	r2, [sp, #88]	; 0x58
 800567c:	9a02      	ldr	r2, [sp, #8]
 800567e:	3202      	adds	r2, #2
 8005680:	9202      	str	r2, [sp, #8]
 8005682:	9a04      	ldr	r2, [sp, #16]
 8005684:	3a01      	subs	r2, #1
 8005686:	9204      	str	r2, [sp, #16]
 8005688:	e747      	b.n	800551a <EwScreenWarpAlpha8RowFilterGradient+0x60>
 800568a:	e9dd 0200 	ldrd	r0, r2, [sp]
 800568e:	4655      	mov	r5, sl
 8005690:	465b      	mov	r3, fp
 8005692:	e787      	b.n	80055a4 <EwScreenWarpAlpha8RowFilterGradient+0xea>
 8005694:	0a1f      	lsrs	r7, r3, #8
 8005696:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 800569a:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 800569e:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 80056a2:	2d3e      	cmp	r5, #62	; 0x3e
 80056a4:	ea47 0702 	orr.w	r7, r7, r2
 80056a8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80056ac:	ea4f 6893 	mov.w	r8, r3, lsr #26
 80056b0:	d901      	bls.n	80056b6 <EwScreenWarpAlpha8RowFilterGradient+0x1fc>
 80056b2:	4545      	cmp	r5, r8
 80056b4:	d00e      	beq.n	80056d4 <EwScreenWarpAlpha8RowFilterGradient+0x21a>
 80056b6:	3501      	adds	r5, #1
 80056b8:	fb08 5505 	mla	r5, r8, r5, r5
 80056bc:	09ad      	lsrs	r5, r5, #6
 80056be:	fb05 fc0c 	mul.w	ip, r5, ip
 80056c2:	436f      	muls	r7, r5
 80056c4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80056c8:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 80056cc:	ea02 1797 	and.w	r7, r2, r7, lsr #6
 80056d0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80056d4:	9a02      	ldr	r2, [sp, #8]
 80056d6:	ea47 070c 	orr.w	r7, r7, ip
 80056da:	8017      	strh	r7, [r2, #0]
 80056dc:	e7c6      	b.n	800566c <EwScreenWarpAlpha8RowFilterGradient+0x1b2>
 80056de:	e9dd 0200 	ldrd	r0, r2, [sp]
 80056e2:	4655      	mov	r5, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	e74e      	b.n	8005586 <EwScreenWarpAlpha8RowFilterGradient+0xcc>

080056e8 <EwScreenWarpAlpha8RowGradientBlend>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	b08d      	sub	sp, #52	; 0x34
 80056ee:	f8d0 e000 	ldr.w	lr, [r0]
 80056f2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	680b      	ldr	r3, [r1, #0]
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	688b      	ldr	r3, [r1, #8]
 80056fc:	930a      	str	r3, [sp, #40]	; 0x28
 80056fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005700:	9307      	str	r3, [sp, #28]
 8005702:	bb23      	cbnz	r3, 800574e <EwScreenWarpAlpha8RowGradientBlend+0x66>
 8005704:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005706:	fab3 f883 	clz	r8, r3
 800570a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800570e:	f8d4 9000 	ldr.w	r9, [r4]
 8005712:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8005716:	f8d4 b020 	ldr.w	fp, [r4, #32]
 800571a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800571e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005722:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 8005726:	ea4f 331c 	mov.w	r3, ip, lsr #12
 800572a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800572e:	f3cb 5507 	ubfx	r5, fp, #20, #8
 8005732:	430b      	orrs	r3, r1
 8005734:	432b      	orrs	r3, r5
 8005736:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800573a:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 800573e:	432b      	orrs	r3, r5
 8005740:	9205      	str	r2, [sp, #20]
 8005742:	9a05      	ldr	r2, [sp, #20]
 8005744:	2a00      	cmp	r2, #0
 8005746:	dc05      	bgt.n	8005754 <EwScreenWarpAlpha8RowGradientBlend+0x6c>
 8005748:	b00d      	add	sp, #52	; 0x34
 800574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	e7dc      	b.n	800570e <EwScreenWarpAlpha8RowGradientBlend+0x26>
 8005754:	9a06      	ldr	r2, [sp, #24]
 8005756:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005758:	981a      	ldr	r0, [sp, #104]	; 0x68
 800575a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800575c:	1312      	asrs	r2, r2, #12
 800575e:	434a      	muls	r2, r1
 8005760:	1411      	asrs	r1, r2, #16
 8005762:	9108      	str	r1, [sp, #32]
 8005764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005766:	1309      	asrs	r1, r1, #12
 8005768:	4341      	muls	r1, r0
 800576a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800576c:	1409      	asrs	r1, r1, #16
 800576e:	4348      	muls	r0, r1
 8005770:	eb05 4222 	add.w	r2, r5, r2, asr #16
 8005774:	5c12      	ldrb	r2, [r2, r0]
 8005776:	920b      	str	r2, [sp, #44]	; 0x2c
 8005778:	f1b8 0f00 	cmp.w	r8, #0
 800577c:	d169      	bne.n	8005852 <EwScreenWarpAlpha8RowGradientBlend+0x16a>
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	69a3      	ldr	r3, [r4, #24]
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	9b07      	ldr	r3, [sp, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 809a 	beq.w	80058ca <EwScreenWarpAlpha8RowGradientBlend+0x1e2>
 8005796:	2900      	cmp	r1, #0
 8005798:	f000 809c 	beq.w	80058d4 <EwScreenWarpAlpha8RowGradientBlend+0x1ec>
 800579c:	6860      	ldr	r0, [r4, #4]
 800579e:	6962      	ldr	r2, [r4, #20]
 80057a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80057a4:	fb00 9001 	mla	r0, r0, r1, r9
 80057a8:	fb02 c201 	mla	r2, r2, r1, ip
 80057ac:	fb03 b301 	mla	r3, r3, r1, fp
 80057b0:	fb05 a501 	mla	r5, r5, r1, sl
 80057b4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80057b6:	b1b6      	cbz	r6, 80057e6 <EwScreenWarpAlpha8RowGradientBlend+0xfe>
 80057b8:	b1a9      	cbz	r1, 80057e6 <EwScreenWarpAlpha8RowGradientBlend+0xfe>
 80057ba:	9f01      	ldr	r7, [sp, #4]
 80057bc:	68e6      	ldr	r6, [r4, #12]
 80057be:	fb06 7601 	mla	r6, r6, r1, r7
 80057c2:	9601      	str	r6, [sp, #4]
 80057c4:	9f02      	ldr	r7, [sp, #8]
 80057c6:	69e6      	ldr	r6, [r4, #28]
 80057c8:	fb06 7601 	mla	r6, r6, r1, r7
 80057cc:	9602      	str	r6, [sp, #8]
 80057ce:	9e03      	ldr	r6, [sp, #12]
 80057d0:	4637      	mov	r7, r6
 80057d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057d4:	fb06 7601 	mla	r6, r6, r1, r7
 80057d8:	9603      	str	r6, [sp, #12]
 80057da:	9e04      	ldr	r6, [sp, #16]
 80057dc:	4637      	mov	r7, r6
 80057de:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80057e0:	fb06 7101 	mla	r1, r6, r1, r7
 80057e4:	9104      	str	r1, [sp, #16]
 80057e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80057e8:	b329      	cbz	r1, 8005836 <EwScreenWarpAlpha8RowGradientBlend+0x14e>
 80057ea:	9908      	ldr	r1, [sp, #32]
 80057ec:	b319      	cbz	r1, 8005836 <EwScreenWarpAlpha8RowGradientBlend+0x14e>
 80057ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057f0:	9e08      	ldr	r6, [sp, #32]
 80057f2:	9f01      	ldr	r7, [sp, #4]
 80057f4:	434e      	muls	r6, r1
 80057f6:	4631      	mov	r1, r6
 80057f8:	1506      	asrs	r6, r0, #20
 80057fa:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 80057fe:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 8005802:	9f02      	ldr	r7, [sp, #8]
 8005804:	fb01 0006 	mla	r0, r1, r6, r0
 8005808:	1516      	asrs	r6, r2, #20
 800580a:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800580e:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8005812:	9f03      	ldr	r7, [sp, #12]
 8005814:	fb01 2206 	mla	r2, r1, r6, r2
 8005818:	151e      	asrs	r6, r3, #20
 800581a:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800581e:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8005822:	9f04      	ldr	r7, [sp, #16]
 8005824:	fb01 3306 	mla	r3, r1, r6, r3
 8005828:	152e      	asrs	r6, r5, #20
 800582a:	ebc6 5627 	rsb	r6, r6, r7, asr #20
 800582e:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8005832:	fb01 5506 	mla	r5, r1, r6, r5
 8005836:	0900      	lsrs	r0, r0, #4
 8005838:	0b12      	lsrs	r2, r2, #12
 800583a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800583e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005842:	4310      	orrs	r0, r2
 8005844:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8005848:	012d      	lsls	r5, r5, #4
 800584a:	4303      	orrs	r3, r0
 800584c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005850:	432b      	orrs	r3, r5
 8005852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005854:	0892      	lsrs	r2, r2, #2
 8005856:	d02b      	beq.n	80058b0 <EwScreenWarpAlpha8RowGradientBlend+0x1c8>
 8005858:	0e9e      	lsrs	r6, r3, #26
 800585a:	d029      	beq.n	80058b0 <EwScreenWarpAlpha8RowGradientBlend+0x1c8>
 800585c:	0a18      	lsrs	r0, r3, #8
 800585e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8005862:	f3c3 01c4 	ubfx	r1, r3, #3, #5
 8005866:	095d      	lsrs	r5, r3, #5
 8005868:	2a3f      	cmp	r2, #63	; 0x3f
 800586a:	ea40 0001 	orr.w	r0, r0, r1
 800586e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8005872:	d101      	bne.n	8005878 <EwScreenWarpAlpha8RowGradientBlend+0x190>
 8005874:	2e3f      	cmp	r6, #63	; 0x3f
 8005876:	d018      	beq.n	80058aa <EwScreenWarpAlpha8RowGradientBlend+0x1c2>
 8005878:	3201      	adds	r2, #1
 800587a:	f8be 1000 	ldrh.w	r1, [lr]
 800587e:	fb06 2202 	mla	r2, r6, r2, r2
 8005882:	0992      	lsrs	r2, r2, #6
 8005884:	f1c2 0740 	rsb	r7, r2, #64	; 0x40
 8005888:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 800588c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8005890:	4379      	muls	r1, r7
 8005892:	437e      	muls	r6, r7
 8005894:	fb02 1505 	mla	r5, r2, r5, r1
 8005898:	fb02 6000 	mla	r0, r2, r0, r6
 800589c:	09ad      	lsrs	r5, r5, #6
 800589e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80058a2:	ea06 1090 	and.w	r0, r6, r0, lsr #6
 80058a6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80058aa:	4328      	orrs	r0, r5
 80058ac:	f8ae 0000 	strh.w	r0, [lr]
 80058b0:	9a06      	ldr	r2, [sp, #24]
 80058b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80058b4:	440a      	add	r2, r1
 80058b6:	9206      	str	r2, [sp, #24]
 80058b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80058ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058bc:	440a      	add	r2, r1
 80058be:	9216      	str	r2, [sp, #88]	; 0x58
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	f10e 0e02 	add.w	lr, lr, #2
 80058c6:	3a01      	subs	r2, #1
 80058c8:	e73a      	b.n	8005740 <EwScreenWarpAlpha8RowGradientBlend+0x58>
 80058ca:	4655      	mov	r5, sl
 80058cc:	465b      	mov	r3, fp
 80058ce:	4662      	mov	r2, ip
 80058d0:	4648      	mov	r0, r9
 80058d2:	e788      	b.n	80057e6 <EwScreenWarpAlpha8RowGradientBlend+0xfe>
 80058d4:	4655      	mov	r5, sl
 80058d6:	465b      	mov	r3, fp
 80058d8:	4662      	mov	r2, ip
 80058da:	4648      	mov	r0, r9
 80058dc:	e76a      	b.n	80057b4 <EwScreenWarpAlpha8RowGradientBlend+0xcc>

080058de <EwScreenWarpAlpha8RowFilterGradientBlend>:
 80058de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e2:	b08d      	sub	sp, #52	; 0x34
 80058e4:	9305      	str	r3, [sp, #20]
 80058e6:	6803      	ldr	r3, [r0, #0]
 80058e8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	680b      	ldr	r3, [r1, #0]
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	688b      	ldr	r3, [r1, #8]
 80058f2:	9308      	str	r3, [sp, #32]
 80058f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058f6:	9306      	str	r3, [sp, #24]
 80058f8:	bb3b      	cbnz	r3, 800594a <EwScreenWarpAlpha8RowFilterGradientBlend+0x6c>
 80058fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	9b00      	ldr	r3, [sp, #0]
 800590e:	f8d4 b020 	ldr.w	fp, [r4, #32]
 8005912:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8005916:	9204      	str	r2, [sp, #16]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	9a08      	ldr	r2, [sp, #32]
 8005922:	0b1b      	lsrs	r3, r3, #12
 8005924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005928:	f3cb 5507 	ubfx	r5, fp, #20, #8
 800592c:	430b      	orrs	r3, r1
 800592e:	432b      	orrs	r3, r5
 8005930:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8005934:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005938:	3201      	adds	r2, #1
 800593a:	432b      	orrs	r3, r5
 800593c:	9209      	str	r2, [sp, #36]	; 0x24
 800593e:	9a04      	ldr	r2, [sp, #16]
 8005940:	2a00      	cmp	r2, #0
 8005942:	dc04      	bgt.n	800594e <EwScreenWarpAlpha8RowFilterGradientBlend+0x70>
 8005944:	b00d      	add	sp, #52	; 0x34
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	2300      	movs	r3, #0
 800594c:	e7d9      	b.n	8005902 <EwScreenWarpAlpha8RowFilterGradientBlend+0x24>
 800594e:	9a05      	ldr	r2, [sp, #20]
 8005950:	ea4f 3922 	mov.w	r9, r2, asr #12
 8005954:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005956:	fb02 f909 	mul.w	r9, r2, r9
 800595a:	ea4f 3229 	mov.w	r2, r9, asr #12
 800595e:	920a      	str	r2, [sp, #40]	; 0x28
 8005960:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005962:	1311      	asrs	r1, r2, #12
 8005964:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005966:	4351      	muls	r1, r2
 8005968:	130a      	asrs	r2, r1, #12
 800596a:	920b      	str	r2, [sp, #44]	; 0x2c
 800596c:	9a03      	ldr	r2, [sp, #12]
 800596e:	2a00      	cmp	r2, #0
 8005970:	d15c      	bne.n	8005a2c <EwScreenWarpAlpha8RowFilterGradientBlend+0x14e>
 8005972:	9b06      	ldr	r3, [sp, #24]
 8005974:	68a6      	ldr	r6, [r4, #8]
 8005976:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800597a:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 800597e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80c2 	beq.w	8005b0c <EwScreenWarpAlpha8RowFilterGradientBlend+0x22e>
 8005988:	1409      	asrs	r1, r1, #16
 800598a:	f000 80c4 	beq.w	8005b16 <EwScreenWarpAlpha8RowFilterGradientBlend+0x238>
 800598e:	9b00      	ldr	r3, [sp, #0]
 8005990:	6860      	ldr	r0, [r4, #4]
 8005992:	6962      	ldr	r2, [r4, #20]
 8005994:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005996:	fb00 3001 	mla	r0, r0, r1, r3
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	fb02 3201 	mla	r2, r2, r1, r3
 80059a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a2:	fb05 a501 	mla	r5, r5, r1, sl
 80059a6:	fb03 b301 	mla	r3, r3, r1, fp
 80059aa:	6d67      	ldr	r7, [r4, #84]	; 0x54
 80059ac:	b167      	cbz	r7, 80059c8 <EwScreenWarpAlpha8RowFilterGradientBlend+0xea>
 80059ae:	b159      	cbz	r1, 80059c8 <EwScreenWarpAlpha8RowFilterGradientBlend+0xea>
 80059b0:	68e7      	ldr	r7, [r4, #12]
 80059b2:	fb07 6601 	mla	r6, r7, r1, r6
 80059b6:	69e7      	ldr	r7, [r4, #28]
 80059b8:	fb07 cc01 	mla	ip, r7, r1, ip
 80059bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80059be:	fb07 ee01 	mla	lr, r7, r1, lr
 80059c2:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80059c4:	fb07 8801 	mla	r8, r7, r1, r8
 80059c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80059ca:	b309      	cbz	r1, 8005a10 <EwScreenWarpAlpha8RowFilterGradientBlend+0x132>
 80059cc:	ea5f 4929 	movs.w	r9, r9, asr #16
 80059d0:	d01e      	beq.n	8005a10 <EwScreenWarpAlpha8RowFilterGradientBlend+0x132>
 80059d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059d4:	1507      	asrs	r7, r0, #20
 80059d6:	fb01 f109 	mul.w	r1, r1, r9
 80059da:	ebc7 5626 	rsb	r6, r7, r6, asr #20
 80059de:	f000 607f 	and.w	r0, r0, #267386880	; 0xff00000
 80059e2:	fb01 0006 	mla	r0, r1, r6, r0
 80059e6:	1516      	asrs	r6, r2, #20
 80059e8:	ebc6 562c 	rsb	r6, r6, ip, asr #20
 80059ec:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 80059f0:	fb01 2206 	mla	r2, r1, r6, r2
 80059f4:	151e      	asrs	r6, r3, #20
 80059f6:	ebc6 562e 	rsb	r6, r6, lr, asr #20
 80059fa:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 80059fe:	fb01 3306 	mla	r3, r1, r6, r3
 8005a02:	152e      	asrs	r6, r5, #20
 8005a04:	ebc6 5628 	rsb	r6, r6, r8, asr #20
 8005a08:	f005 657f 	and.w	r5, r5, #267386880	; 0xff00000
 8005a0c:	fb01 5506 	mla	r5, r1, r6, r5
 8005a10:	0900      	lsrs	r0, r0, #4
 8005a12:	0b12      	lsrs	r2, r2, #12
 8005a14:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8005a18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005a1c:	4310      	orrs	r0, r2
 8005a1e:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8005a22:	012d      	lsls	r5, r5, #4
 8005a24:	4303      	orrs	r3, r0
 8005a26:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005a2a:	432b      	orrs	r3, r5
 8005a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a30:	9e08      	ldr	r6, [sp, #32]
 8005a32:	f1a1 0008 	sub.w	r0, r1, #8
 8005a36:	3a08      	subs	r2, #8
 8005a38:	1105      	asrs	r5, r0, #4
 8005a3a:	1111      	asrs	r1, r2, #4
 8005a3c:	fb06 1105 	mla	r1, r6, r5, r1
 8005a40:	9d07      	ldr	r5, [sp, #28]
 8005a42:	f000 000f 	and.w	r0, r0, #15
 8005a46:	f002 020f 	and.w	r2, r2, #15
 8005a4a:	186f      	adds	r7, r5, r1
 8005a4c:	f1c0 0610 	rsb	r6, r0, #16
 8005a50:	f1c2 0510 	rsb	r5, r2, #16
 8005a54:	4356      	muls	r6, r2
 8005a56:	4345      	muls	r5, r0
 8005a58:	4342      	muls	r2, r0
 8005a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a5c:	eb07 0c00 	add.w	ip, r7, r0
 8005a60:	f5c6 7080 	rsb	r0, r6, #256	; 0x100
 8005a64:	1b40      	subs	r0, r0, r5
 8005a66:	eba0 0802 	sub.w	r8, r0, r2
 8005a6a:	9807      	ldr	r0, [sp, #28]
 8005a6c:	f810 e001 	ldrb.w	lr, [r0, r1]
 8005a70:	7879      	ldrb	r1, [r7, #1]
 8005a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a74:	4371      	muls	r1, r6
 8005a76:	5c3e      	ldrb	r6, [r7, r0]
 8005a78:	fb0e 1108 	mla	r1, lr, r8, r1
 8005a7c:	fb02 1106 	mla	r1, r2, r6, r1
 8005a80:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8005a84:	fb05 1502 	mla	r5, r5, r2, r1
 8005a88:	0aad      	lsrs	r5, r5, #10
 8005a8a:	d030      	beq.n	8005aee <EwScreenWarpAlpha8RowFilterGradientBlend+0x210>
 8005a8c:	0e9e      	lsrs	r6, r3, #26
 8005a8e:	d02e      	beq.n	8005aee <EwScreenWarpAlpha8RowFilterGradientBlend+0x210>
 8005a90:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8005a94:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8005a98:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 8005a9c:	ea4f 1853 	mov.w	r8, r3, lsr #5
 8005aa0:	2d3e      	cmp	r5, #62	; 0x3e
 8005aa2:	ea4c 0c02 	orr.w	ip, ip, r2
 8005aa6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8005aaa:	d901      	bls.n	8005ab0 <EwScreenWarpAlpha8RowFilterGradientBlend+0x1d2>
 8005aac:	42b5      	cmp	r5, r6
 8005aae:	d019      	beq.n	8005ae4 <EwScreenWarpAlpha8RowFilterGradientBlend+0x206>
 8005ab0:	9a02      	ldr	r2, [sp, #8]
 8005ab2:	3501      	adds	r5, #1
 8005ab4:	8817      	ldrh	r7, [r2, #0]
 8005ab6:	fb06 5505 	mla	r5, r6, r5, r5
 8005aba:	09aa      	lsrs	r2, r5, #6
 8005abc:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
 8005ac0:	f427 61fc 	bic.w	r1, r7, #2016	; 0x7e0
 8005ac4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8005ac8:	4347      	muls	r7, r0
 8005aca:	4341      	muls	r1, r0
 8005acc:	fb02 7808 	mla	r8, r2, r8, r7
 8005ad0:	fb02 1c0c 	mla	ip, r2, ip, r1
 8005ad4:	ea4f 1898 	mov.w	r8, r8, lsr #6
 8005ad8:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8005adc:	ea01 1c9c 	and.w	ip, r1, ip, lsr #6
 8005ae0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8005ae4:	9a02      	ldr	r2, [sp, #8]
 8005ae6:	ea4c 0c08 	orr.w	ip, ip, r8
 8005aea:	f8a2 c000 	strh.w	ip, [r2]
 8005aee:	9a05      	ldr	r2, [sp, #20]
 8005af0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005af2:	440a      	add	r2, r1
 8005af4:	9205      	str	r2, [sp, #20]
 8005af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005af8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005afa:	440a      	add	r2, r1
 8005afc:	9216      	str	r2, [sp, #88]	; 0x58
 8005afe:	9a02      	ldr	r2, [sp, #8]
 8005b00:	3202      	adds	r2, #2
 8005b02:	9202      	str	r2, [sp, #8]
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	3a01      	subs	r2, #1
 8005b08:	9204      	str	r2, [sp, #16]
 8005b0a:	e718      	b.n	800593e <EwScreenWarpAlpha8RowFilterGradientBlend+0x60>
 8005b0c:	e9dd 0200 	ldrd	r0, r2, [sp]
 8005b10:	4655      	mov	r5, sl
 8005b12:	465b      	mov	r3, fp
 8005b14:	e758      	b.n	80059c8 <EwScreenWarpAlpha8RowFilterGradientBlend+0xea>
 8005b16:	e9dd 0200 	ldrd	r0, r2, [sp]
 8005b1a:	4655      	mov	r5, sl
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	e744      	b.n	80059aa <EwScreenWarpAlpha8RowFilterGradientBlend+0xcc>

08005b20 <EwScreenWarpRGB565Row>:
 8005b20:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005b24:	6804      	ldr	r4, [r0, #0]
 8005b26:	6888      	ldr	r0, [r1, #8]
 8005b28:	9e06      	ldr	r6, [sp, #24]
 8005b2a:	680d      	ldr	r5, [r1, #0]
 8005b2c:	1040      	asrs	r0, r0, #1
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	dc01      	bgt.n	8005b36 <EwScreenWarpRGB565Row+0x16>
 8005b32:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8005b36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005b38:	1331      	asrs	r1, r6, #12
 8005b3a:	4379      	muls	r1, r7
 8005b3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b3e:	ea4f 4921 	mov.w	r9, r1, asr #16
 8005b42:	1319      	asrs	r1, r3, #12
 8005b44:	4379      	muls	r1, r7
 8005b46:	1409      	asrs	r1, r1, #16
 8005b48:	fb00 1109 	mla	r1, r0, r9, r1
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 8005b52:	f824 1b02 	strh.w	r1, [r4], #2
 8005b56:	9907      	ldr	r1, [sp, #28]
 8005b58:	440b      	add	r3, r1
 8005b5a:	9908      	ldr	r1, [sp, #32]
 8005b5c:	440e      	add	r6, r1
 8005b5e:	e7e6      	b.n	8005b2e <EwScreenWarpRGB565Row+0xe>

08005b60 <EwScreenWarpRGB565RowFilter>:
 8005b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	461d      	mov	r5, r3
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	688b      	ldr	r3, [r1, #8]
 8005b6c:	680f      	ldr	r7, [r1, #0]
 8005b6e:	105b      	asrs	r3, r3, #1
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	3301      	adds	r3, #1
 8005b74:	005e      	lsls	r6, r3, #1
 8005b76:	4614      	mov	r4, r2
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	dc02      	bgt.n	8005b82 <EwScreenWarpRGB565RowFilter+0x22>
 8005b7c:	b003      	add	sp, #12
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b84:	132b      	asrs	r3, r5, #12
 8005b86:	4353      	muls	r3, r2
 8005b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b8a:	1310      	asrs	r0, r2, #12
 8005b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b8e:	4350      	muls	r0, r2
 8005b90:	131b      	asrs	r3, r3, #12
 8005b92:	1300      	asrs	r0, r0, #12
 8005b94:	3b08      	subs	r3, #8
 8005b96:	3808      	subs	r0, #8
 8005b98:	9a01      	ldr	r2, [sp, #4]
 8005b9a:	1101      	asrs	r1, r0, #4
 8005b9c:	ea4f 1c23 	mov.w	ip, r3, asr #4
 8005ba0:	fb02 c201 	mla	r2, r2, r1, ip
 8005ba4:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005ba8:	eb07 0142 	add.w	r1, r7, r2, lsl #1
 8005bac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005bb0:	f1c0 0808 	rsb	r8, r0, #8
 8005bb4:	f1c3 0e08 	rsb	lr, r3, #8
 8005bb8:	f837 a012 	ldrh.w	sl, [r7, r2, lsl #1]
 8005bbc:	fb03 f808 	mul.w	r8, r3, r8
 8005bc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8005bc4:	4343      	muls	r3, r0
 8005bc6:	198a      	adds	r2, r1, r6
 8005bc8:	8848      	ldrh	r0, [r1, #2]
 8005bca:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005bce:	5b89      	ldrh	r1, [r1, r6]
 8005bd0:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 8005bd4:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8005bd8:	ebac 0c0e 	sub.w	ip, ip, lr
 8005bdc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8005be0:	ebac 0c03 	sub.w	ip, ip, r3
 8005be4:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 8005be8:	fb08 f202 	mul.w	r2, r8, r2
 8005bec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8005bf0:	fb08 f000 	mul.w	r0, r8, r0
 8005bf4:	fb0c 220b 	mla	r2, ip, fp, r2
 8005bf8:	fb0c 000a 	mla	r0, ip, sl, r0
 8005bfc:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8005c00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8005c04:	fb03 220b 	mla	r2, r3, fp, r2
 8005c08:	fb03 0001 	mla	r0, r3, r1, r0
 8005c0c:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 8005c10:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8005c14:	fb0e 220b 	mla	r2, lr, fp, r2
 8005c18:	fb0e 0009 	mla	r0, lr, r9, r0
 8005c1c:	0992      	lsrs	r2, r2, #6
 8005c1e:	0980      	lsrs	r0, r0, #6
 8005c20:	9b00      	ldr	r3, [sp, #0]
 8005c22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8005c26:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8005c2a:	4310      	orrs	r0, r2
 8005c2c:	f823 0b02 	strh.w	r0, [r3], #2
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c36:	441d      	add	r5, r3
 8005c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c3a:	4413      	add	r3, r2
 8005c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8005c3e:	3c01      	subs	r4, #1
 8005c40:	e79a      	b.n	8005b78 <EwScreenWarpRGB565RowFilter+0x18>

08005c42 <EwScreenWarpRGB565RowGradient>:
 8005c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c46:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005c48:	f8d0 a000 	ldr.w	sl, [r0]
 8005c4c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8005c4e:	6808      	ldr	r0, [r1, #0]
 8005c50:	6889      	ldr	r1, [r1, #8]
 8005c52:	f8d4 c050 	ldr.w	ip, [r4, #80]	; 0x50
 8005c56:	9000      	str	r0, [sp, #0]
 8005c58:	1049      	asrs	r1, r1, #1
 8005c5a:	15b7      	asrs	r7, r6, #22
 8005c5c:	9101      	str	r1, [sp, #4]
 8005c5e:	3701      	adds	r7, #1
 8005c60:	f1bc 0f00 	cmp.w	ip, #0
 8005c64:	d10b      	bne.n	8005c7e <EwScreenWarpRGB565RowGradient+0x3c>
 8005c66:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005c68:	fab5 f585 	clz	r5, r5
 8005c6c:	096d      	lsrs	r5, r5, #5
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8005c74:	2800      	cmp	r0, #0
 8005c76:	dc04      	bgt.n	8005c82 <EwScreenWarpRGB565RowGradient+0x40>
 8005c78:	b003      	add	sp, #12
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7e:	2500      	movs	r5, #0
 8005c80:	e7f5      	b.n	8005c6e <EwScreenWarpRGB565RowGradient+0x2c>
 8005c82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c84:	131a      	asrs	r2, r3, #12
 8005c86:	434a      	muls	r2, r1
 8005c88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c8a:	ea4f 3921 	mov.w	r9, r1, asr #12
 8005c8e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c90:	fb01 f909 	mul.w	r9, r1, r9
 8005c94:	9901      	ldr	r1, [sp, #4]
 8005c96:	ea4f 4929 	mov.w	r9, r9, asr #16
 8005c9a:	fb09 f101 	mul.w	r1, r9, r1
 8005c9e:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005ca2:	eb01 4222 	add.w	r2, r1, r2, asr #16
 8005ca6:	9900      	ldr	r1, [sp, #0]
 8005ca8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005cac:	bb25      	cbnz	r5, 8005cf8 <EwScreenWarpRGB565RowGradient+0xb6>
 8005cae:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8005cb2:	f1bc 0f00 	cmp.w	ip, #0
 8005cb6:	d036      	beq.n	8005d26 <EwScreenWarpRGB565RowGradient+0xe4>
 8005cb8:	f1b9 0f00 	cmp.w	r9, #0
 8005cbc:	d035      	beq.n	8005d2a <EwScreenWarpRGB565RowGradient+0xe8>
 8005cbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005cc0:	fb02 6209 	mla	r2, r2, r9, r6
 8005cc4:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005cc6:	b12f      	cbz	r7, 8005cd4 <EwScreenWarpRGB565RowGradient+0x92>
 8005cc8:	f1b9 0f00 	cmp.w	r9, #0
 8005ccc:	d002      	beq.n	8005cd4 <EwScreenWarpRGB565RowGradient+0x92>
 8005cce:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8005cd0:	fb07 8809 	mla	r8, r7, r9, r8
 8005cd4:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005cd6:	b167      	cbz	r7, 8005cf2 <EwScreenWarpRGB565RowGradient+0xb0>
 8005cd8:	f1be 0f00 	cmp.w	lr, #0
 8005cdc:	d009      	beq.n	8005cf2 <EwScreenWarpRGB565RowGradient+0xb0>
 8005cde:	1517      	asrs	r7, r2, #20
 8005ce0:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 8005ce4:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005ce6:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8005cea:	fb07 f808 	mul.w	r8, r7, r8
 8005cee:	fb0e 2208 	mla	r2, lr, r8, r2
 8005cf2:	f3c2 5285 	ubfx	r2, r2, #22, #6
 8005cf6:	1c57      	adds	r7, r2, #1
 8005cf8:	b159      	cbz	r1, 8005d12 <EwScreenWarpRGB565RowGradient+0xd0>
 8005cfa:	f421 62fc 	bic.w	r2, r1, #2016	; 0x7e0
 8005cfe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8005d02:	4379      	muls	r1, r7
 8005d04:	437a      	muls	r2, r7
 8005d06:	0989      	lsrs	r1, r1, #6
 8005d08:	ea0b 1292 	and.w	r2, fp, r2, lsr #6
 8005d0c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8005d10:	4311      	orrs	r1, r2
 8005d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d14:	f82a 1b02 	strh.w	r1, [sl], #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d1e:	440a      	add	r2, r1
 8005d20:	920c      	str	r2, [sp, #48]	; 0x30
 8005d22:	3801      	subs	r0, #1
 8005d24:	e7a6      	b.n	8005c74 <EwScreenWarpRGB565RowGradient+0x32>
 8005d26:	4632      	mov	r2, r6
 8005d28:	e7d4      	b.n	8005cd4 <EwScreenWarpRGB565RowGradient+0x92>
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	e7ca      	b.n	8005cc4 <EwScreenWarpRGB565RowGradient+0x82>

08005d2e <EwScreenWarpRGB565RowFilterGradient>:
 8005d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	6803      	ldr	r3, [r0, #0]
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	688b      	ldr	r3, [r1, #8]
 8005d40:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d42:	105b      	asrs	r3, r3, #1
 8005d44:	9306      	str	r3, [sp, #24]
 8005d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	1599      	asrs	r1, r3, #22
 8005d4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	3101      	adds	r1, #1
 8005d52:	b97b      	cbnz	r3, 8005d74 <EwScreenWarpRGB565RowFilterGradient+0x46>
 8005d54:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005d56:	fab7 f787 	clz	r7, r7
 8005d5a:	097f      	lsrs	r7, r7, #5
 8005d5c:	9b06      	ldr	r3, [sp, #24]
 8005d5e:	4e58      	ldr	r6, [pc, #352]	; (8005ec0 <EwScreenWarpRGB565RowFilterGradient+0x192>)
 8005d60:	9201      	str	r2, [sp, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	9307      	str	r3, [sp, #28]
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dc04      	bgt.n	8005d78 <EwScreenWarpRGB565RowFilterGradient+0x4a>
 8005d6e:	b009      	add	sp, #36	; 0x24
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	2700      	movs	r7, #0
 8005d76:	e7f1      	b.n	8005d5c <EwScreenWarpRGB565RowFilterGradient+0x2e>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d7c:	1318      	asrs	r0, r3, #12
 8005d7e:	ea4f 3e22 	mov.w	lr, r2, asr #12
 8005d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d86:	4358      	muls	r0, r3
 8005d88:	fb02 fe0e 	mul.w	lr, r2, lr
 8005d8c:	ea4f 3820 	mov.w	r8, r0, asr #12
 8005d90:	ea4f 352e 	mov.w	r5, lr, asr #12
 8005d94:	bb27      	cbnz	r7, 8005de0 <EwScreenWarpRGB565RowFilterGradient+0xb2>
 8005d96:	9a03      	ldr	r2, [sp, #12]
 8005d98:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f000 808b 	beq.w	8005eb8 <EwScreenWarpRGB565RowFilterGradient+0x18a>
 8005da2:	ea5f 422e 	movs.w	r2, lr, asr #16
 8005da6:	f000 8089 	beq.w	8005ebc <EwScreenWarpRGB565RowFilterGradient+0x18e>
 8005daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dac:	9b00      	ldr	r3, [sp, #0]
 8005dae:	fb01 3102 	mla	r1, r1, r2, r3
 8005db2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005db4:	b11b      	cbz	r3, 8005dbe <EwScreenWarpRGB565RowFilterGradient+0x90>
 8005db6:	b112      	cbz	r2, 8005dbe <EwScreenWarpRGB565RowFilterGradient+0x90>
 8005db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dba:	fb03 cc02 	mla	ip, r3, r2, ip
 8005dbe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dc0:	b15a      	cbz	r2, 8005dda <EwScreenWarpRGB565RowFilterGradient+0xac>
 8005dc2:	1400      	asrs	r0, r0, #16
 8005dc4:	d009      	beq.n	8005dda <EwScreenWarpRGB565RowFilterGradient+0xac>
 8005dc6:	150a      	asrs	r2, r1, #20
 8005dc8:	ebc2 5c2c 	rsb	ip, r2, ip, asr #20
 8005dcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005dce:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8005dd2:	fb02 fc0c 	mul.w	ip, r2, ip
 8005dd6:	fb00 110c 	mla	r1, r0, ip, r1
 8005dda:	f3c1 5185 	ubfx	r1, r1, #22, #6
 8005dde:	3101      	adds	r1, #1
 8005de0:	f1a8 0008 	sub.w	r0, r8, #8
 8005de4:	9b06      	ldr	r3, [sp, #24]
 8005de6:	3d08      	subs	r5, #8
 8005de8:	ea4f 1c25 	mov.w	ip, r5, asr #4
 8005dec:	1102      	asrs	r2, r0, #4
 8005dee:	fb03 220c 	mla	r2, r3, ip, r2
 8005df2:	9b05      	ldr	r3, [sp, #20]
 8005df4:	f3c5 0542 	ubfx	r5, r5, #1, #3
 8005df8:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8005dfc:	f833 a012 	ldrh.w	sl, [r3, r2, lsl #1]
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8005e06:	f1c5 0808 	rsb	r8, r5, #8
 8005e0a:	f1c0 0e08 	rsb	lr, r0, #8
 8005e0e:	fb00 f808 	mul.w	r8, r0, r8
 8005e12:	fb05 fe0e 	mul.w	lr, r5, lr
 8005e16:	4368      	muls	r0, r5
 8005e18:	eb0c 0203 	add.w	r2, ip, r3
 8005e1c:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 8005e20:	f83c 3003 	ldrh.w	r3, [ip, r3]
 8005e24:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005e28:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 8005e2c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8005e30:	ebac 0c0e 	sub.w	ip, ip, lr
 8005e34:	4035      	ands	r5, r6
 8005e36:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 8005e3a:	ebac 0c00 	sub.w	ip, ip, r0
 8005e3e:	fb08 f202 	mul.w	r2, r8, r2
 8005e42:	ea0a 0a06 	and.w	sl, sl, r6
 8005e46:	fb08 f505 	mul.w	r5, r8, r5
 8005e4a:	fb0c 220b 	mla	r2, ip, fp, r2
 8005e4e:	fb0c 550a 	mla	r5, ip, sl, r5
 8005e52:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8005e56:	4033      	ands	r3, r6
 8005e58:	fb00 220b 	mla	r2, r0, fp, r2
 8005e5c:	fb00 5503 	mla	r5, r0, r3, r5
 8005e60:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 8005e64:	ea09 0906 	and.w	r9, r9, r6
 8005e68:	fb0e 220b 	mla	r2, lr, fp, r2
 8005e6c:	fb0e 5509 	mla	r5, lr, r9, r5
 8005e70:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8005e74:	ea0b 1292 	and.w	r2, fp, r2, lsr #6
 8005e78:	ea06 1595 	and.w	r5, r6, r5, lsr #6
 8005e7c:	432a      	orrs	r2, r5
 8005e7e:	d00b      	beq.n	8005e98 <EwScreenWarpRGB565RowFilterGradient+0x16a>
 8005e80:	ea02 0c0b 	and.w	ip, r2, fp
 8005e84:	4032      	ands	r2, r6
 8005e86:	fb0c fc01 	mul.w	ip, ip, r1
 8005e8a:	434a      	muls	r2, r1
 8005e8c:	ea0b 1c9c 	and.w	ip, fp, ip, lsr #6
 8005e90:	ea06 1292 	and.w	r2, r6, r2, lsr #6
 8005e94:	ea4c 0202 	orr.w	r2, ip, r2
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	f823 2b02 	strh.w	r2, [r3], #2
 8005e9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eac:	4413      	add	r3, r2
 8005eae:	9312      	str	r3, [sp, #72]	; 0x48
 8005eb0:	9b01      	ldr	r3, [sp, #4]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	e757      	b.n	8005d68 <EwScreenWarpRGB565RowFilterGradient+0x3a>
 8005eb8:	9900      	ldr	r1, [sp, #0]
 8005eba:	e780      	b.n	8005dbe <EwScreenWarpRGB565RowFilterGradient+0x90>
 8005ebc:	9900      	ldr	r1, [sp, #0]
 8005ebe:	e778      	b.n	8005db2 <EwScreenWarpRGB565RowFilterGradient+0x84>
 8005ec0:	00fc07e0 	.word	0x00fc07e0

08005ec4 <EwScreenWarpRGB565RowGradientBlend>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	460d      	mov	r5, r1
 8005ecc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005ece:	6809      	ldr	r1, [r1, #0]
 8005ed0:	9102      	str	r1, [sp, #8]
 8005ed2:	68a9      	ldr	r1, [r5, #8]
 8005ed4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005ed6:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 8005eda:	f8d0 c000 	ldr.w	ip, [r0]
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	1049      	asrs	r1, r1, #1
 8005ee2:	ea4f 58a5 	mov.w	r8, r5, asr #22
 8005ee6:	9103      	str	r1, [sp, #12]
 8005ee8:	f108 0801 	add.w	r8, r8, #1
 8005eec:	f1ba 0f00 	cmp.w	sl, #0
 8005ef0:	d10b      	bne.n	8005f0a <EwScreenWarpRGB565RowGradientBlend+0x46>
 8005ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ef4:	fab0 f080 	clz	r0, r0
 8005ef8:	0940      	lsrs	r0, r0, #5
 8005efa:	4611      	mov	r1, r2
 8005efc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8005f00:	2900      	cmp	r1, #0
 8005f02:	dc04      	bgt.n	8005f0e <EwScreenWarpRGB565RowGradientBlend+0x4a>
 8005f04:	b005      	add	sp, #20
 8005f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7f5      	b.n	8005efa <EwScreenWarpRGB565RowGradientBlend+0x36>
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005f12:	131a      	asrs	r2, r3, #12
 8005f14:	4372      	muls	r2, r6
 8005f16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005f18:	ea4f 3926 	mov.w	r9, r6, asr #12
 8005f1c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005f1e:	fb06 f909 	mul.w	r9, r6, r9
 8005f22:	9e03      	ldr	r6, [sp, #12]
 8005f24:	ea4f 4729 	mov.w	r7, r9, asr #16
 8005f28:	437e      	muls	r6, r7
 8005f2a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005f2e:	eb06 4222 	add.w	r2, r6, r2, asr #16
 8005f32:	9e02      	ldr	r6, [sp, #8]
 8005f34:	f836 6012 	ldrh.w	r6, [r6, r2, lsl #1]
 8005f38:	bb10      	cbnz	r0, 8005f80 <EwScreenWarpRGB565RowGradientBlend+0xbc>
 8005f3a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8005f3e:	f1ba 0f00 	cmp.w	sl, #0
 8005f42:	d043      	beq.n	8005fcc <EwScreenWarpRGB565RowGradientBlend+0x108>
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	d043      	beq.n	8005fd0 <EwScreenWarpRGB565RowGradientBlend+0x10c>
 8005f48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f4a:	fb02 5207 	mla	r2, r2, r7, r5
 8005f4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f50:	b11b      	cbz	r3, 8005f5a <EwScreenWarpRGB565RowGradientBlend+0x96>
 8005f52:	b117      	cbz	r7, 8005f5a <EwScreenWarpRGB565RowGradientBlend+0x96>
 8005f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f56:	fb03 8807 	mla	r8, r3, r7, r8
 8005f5a:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005f5c:	b167      	cbz	r7, 8005f78 <EwScreenWarpRGB565RowGradientBlend+0xb4>
 8005f5e:	f1be 0f00 	cmp.w	lr, #0
 8005f62:	d009      	beq.n	8005f78 <EwScreenWarpRGB565RowGradientBlend+0xb4>
 8005f64:	1517      	asrs	r7, r2, #20
 8005f66:	ebc7 5828 	rsb	r8, r7, r8, asr #20
 8005f6a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005f6c:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 8005f70:	fb07 f808 	mul.w	r8, r7, r8
 8005f74:	fb0e 2208 	mla	r2, lr, r8, r2
 8005f78:	f3c2 5285 	ubfx	r2, r2, #22, #6
 8005f7c:	f102 0801 	add.w	r8, r2, #1
 8005f80:	f8bc 7000 	ldrh.w	r7, [ip]
 8005f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f86:	f1c8 0240 	rsb	r2, r8, #64	; 0x40
 8005f8a:	f427 6efc 	bic.w	lr, r7, #2016	; 0x7e0
 8005f8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8005f92:	fb02 fe0e 	mul.w	lr, r2, lr
 8005f96:	4357      	muls	r7, r2
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	f426 69fc 	bic.w	r9, r6, #2016	; 0x7e0
 8005f9e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8005fa2:	441a      	add	r2, r3
 8005fa4:	fb08 7706 	mla	r7, r8, r6, r7
 8005fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005faa:	9201      	str	r2, [sp, #4]
 8005fac:	fb08 ee09 	mla	lr, r8, r9, lr
 8005fb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fb2:	09bf      	lsrs	r7, r7, #6
 8005fb4:	ea0b 1e9e 	and.w	lr, fp, lr, lsr #6
 8005fb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8005fbc:	ea4e 0e07 	orr.w	lr, lr, r7
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f82c eb02 	strh.w	lr, [ip], #2
 8005fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc8:	3901      	subs	r1, #1
 8005fca:	e799      	b.n	8005f00 <EwScreenWarpRGB565RowGradientBlend+0x3c>
 8005fcc:	462a      	mov	r2, r5
 8005fce:	e7c4      	b.n	8005f5a <EwScreenWarpRGB565RowGradientBlend+0x96>
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	e7bc      	b.n	8005f4e <EwScreenWarpRGB565RowGradientBlend+0x8a>

08005fd4 <EwScreenWarpRGB565RowFilterGradientBlend>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	b089      	sub	sp, #36	; 0x24
 8005fda:	9303      	str	r3, [sp, #12]
 8005fdc:	6803      	ldr	r3, [r0, #0]
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	680b      	ldr	r3, [r1, #0]
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	688b      	ldr	r3, [r1, #8]
 8005fe6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005fe8:	105b      	asrs	r3, r3, #1
 8005fea:	9306      	str	r3, [sp, #24]
 8005fec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	159b      	asrs	r3, r3, #22
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	9104      	str	r1, [sp, #16]
 8005ff8:	b979      	cbnz	r1, 800601a <EwScreenWarpRGB565RowFilterGradientBlend+0x46>
 8005ffa:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8005ffc:	fab7 f787 	clz	r7, r7
 8006000:	097f      	lsrs	r7, r7, #5
 8006002:	9906      	ldr	r1, [sp, #24]
 8006004:	4d5e      	ldr	r5, [pc, #376]	; (8006180 <EwScreenWarpRGB565RowFilterGradientBlend+0x1ac>)
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	3101      	adds	r1, #1
 800600a:	0049      	lsls	r1, r1, #1
 800600c:	9107      	str	r1, [sp, #28]
 800600e:	9a02      	ldr	r2, [sp, #8]
 8006010:	2a00      	cmp	r2, #0
 8006012:	dc04      	bgt.n	800601e <EwScreenWarpRGB565RowFilterGradientBlend+0x4a>
 8006014:	b009      	add	sp, #36	; 0x24
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	2700      	movs	r7, #0
 800601c:	e7f1      	b.n	8006002 <EwScreenWarpRGB565RowFilterGradientBlend+0x2e>
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006022:	1311      	asrs	r1, r2, #12
 8006024:	ea4f 3e20 	mov.w	lr, r0, asr #12
 8006028:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800602a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800602c:	4351      	muls	r1, r2
 800602e:	fb00 fe0e 	mul.w	lr, r0, lr
 8006032:	ea4f 3821 	mov.w	r8, r1, asr #12
 8006036:	ea4f 362e 	mov.w	r6, lr, asr #12
 800603a:	bb27      	cbnz	r7, 8006086 <EwScreenWarpRGB565RowFilterGradientBlend+0xb2>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8097 	beq.w	8006176 <EwScreenWarpRGB565RowFilterGradientBlend+0x1a2>
 8006048:	ea5f 402e 	movs.w	r0, lr, asr #16
 800604c:	f000 8095 	beq.w	800617a <EwScreenWarpRGB565RowFilterGradientBlend+0x1a6>
 8006050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006052:	9a00      	ldr	r2, [sp, #0]
 8006054:	fb03 2300 	mla	r3, r3, r0, r2
 8006058:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800605a:	b11a      	cbz	r2, 8006064 <EwScreenWarpRGB565RowFilterGradientBlend+0x90>
 800605c:	b110      	cbz	r0, 8006064 <EwScreenWarpRGB565RowFilterGradientBlend+0x90>
 800605e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006060:	fb02 cc00 	mla	ip, r2, r0, ip
 8006064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006066:	b158      	cbz	r0, 8006080 <EwScreenWarpRGB565RowFilterGradientBlend+0xac>
 8006068:	1409      	asrs	r1, r1, #16
 800606a:	d009      	beq.n	8006080 <EwScreenWarpRGB565RowFilterGradientBlend+0xac>
 800606c:	1518      	asrs	r0, r3, #20
 800606e:	ebc0 5c2c 	rsb	ip, r0, ip, asr #20
 8006072:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006074:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8006078:	fb00 fc0c 	mul.w	ip, r0, ip
 800607c:	fb01 330c 	mla	r3, r1, ip, r3
 8006080:	f3c3 5385 	ubfx	r3, r3, #22, #6
 8006084:	3301      	adds	r3, #1
 8006086:	f1a8 0108 	sub.w	r1, r8, #8
 800608a:	9a06      	ldr	r2, [sp, #24]
 800608c:	3e08      	subs	r6, #8
 800608e:	ea4f 1c26 	mov.w	ip, r6, asr #4
 8006092:	1108      	asrs	r0, r1, #4
 8006094:	fb02 000c 	mla	r0, r2, ip, r0
 8006098:	9a05      	ldr	r2, [sp, #20]
 800609a:	f3c6 0642 	ubfx	r6, r6, #1, #3
 800609e:	f832 a010 	ldrh.w	sl, [r2, r0, lsl #1]
 80060a2:	eb02 0c40 	add.w	ip, r2, r0, lsl #1
 80060a6:	f3c1 0142 	ubfx	r1, r1, #1, #3
 80060aa:	9a07      	ldr	r2, [sp, #28]
 80060ac:	f1c6 0808 	rsb	r8, r6, #8
 80060b0:	f1c1 0e08 	rsb	lr, r1, #8
 80060b4:	fb01 f808 	mul.w	r8, r1, r8
 80060b8:	fb06 fe0e 	mul.w	lr, r6, lr
 80060bc:	4371      	muls	r1, r6
 80060be:	eb0c 0002 	add.w	r0, ip, r2
 80060c2:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80060c6:	f83c 2002 	ldrh.w	r2, [ip, r2]
 80060ca:	f830 9c02 	ldrh.w	r9, [r0, #-2]
 80060ce:	f1c8 0c40 	rsb	ip, r8, #64	; 0x40
 80060d2:	f426 60fc 	bic.w	r0, r6, #2016	; 0x7e0
 80060d6:	ebac 0c0e 	sub.w	ip, ip, lr
 80060da:	402e      	ands	r6, r5
 80060dc:	ebac 0c01 	sub.w	ip, ip, r1
 80060e0:	f42a 6bfc 	bic.w	fp, sl, #2016	; 0x7e0
 80060e4:	fb08 f000 	mul.w	r0, r8, r0
 80060e8:	fb08 f606 	mul.w	r6, r8, r6
 80060ec:	ea0a 0a05 	and.w	sl, sl, r5
 80060f0:	fb0c 000b 	mla	r0, ip, fp, r0
 80060f4:	fb0c 660a 	mla	r6, ip, sl, r6
 80060f8:	f422 6bfc 	bic.w	fp, r2, #2016	; 0x7e0
 80060fc:	402a      	ands	r2, r5
 80060fe:	fb01 6602 	mla	r6, r1, r2, r6
 8006102:	9a01      	ldr	r2, [sp, #4]
 8006104:	fb01 000b 	mla	r0, r1, fp, r0
 8006108:	f429 6bfc 	bic.w	fp, r9, #2016	; 0x7e0
 800610c:	ea09 0905 	and.w	r9, r9, r5
 8006110:	f8b2 c000 	ldrh.w	ip, [r2]
 8006114:	fb0e 000b 	mla	r0, lr, fp, r0
 8006118:	fb0e 6609 	mla	r6, lr, r9, r6
 800611c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8006120:	ea0b 1090 	and.w	r0, fp, r0, lsr #6
 8006124:	ea05 1696 	and.w	r6, r5, r6, lsr #6
 8006128:	4330      	orrs	r0, r6
 800612a:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
 800612e:	f42c 62fc 	bic.w	r2, ip, #2016	; 0x7e0
 8006132:	ea0c 0c05 	and.w	ip, ip, r5
 8006136:	ea00 010b 	and.w	r1, r0, fp
 800613a:	fb08 f202 	mul.w	r2, r8, r2
 800613e:	4028      	ands	r0, r5
 8006140:	fb08 fc0c 	mul.w	ip, r8, ip
 8006144:	fb03 2201 	mla	r2, r3, r1, r2
 8006148:	fb03 c000 	mla	r0, r3, r0, ip
 800614c:	ea0b 1292 	and.w	r2, fp, r2, lsr #6
 8006150:	ea05 1090 	and.w	r0, r5, r0, lsr #6
 8006154:	4310      	orrs	r0, r2
 8006156:	9a01      	ldr	r2, [sp, #4]
 8006158:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800615a:	f822 0b02 	strh.w	r0, [r2], #2
 800615e:	9201      	str	r2, [sp, #4]
 8006160:	9a03      	ldr	r2, [sp, #12]
 8006162:	440a      	add	r2, r1
 8006164:	9203      	str	r2, [sp, #12]
 8006166:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006168:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800616a:	440a      	add	r2, r1
 800616c:	9212      	str	r2, [sp, #72]	; 0x48
 800616e:	9a02      	ldr	r2, [sp, #8]
 8006170:	3a01      	subs	r2, #1
 8006172:	9202      	str	r2, [sp, #8]
 8006174:	e74b      	b.n	800600e <EwScreenWarpRGB565RowFilterGradientBlend+0x3a>
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	e774      	b.n	8006064 <EwScreenWarpRGB565RowFilterGradientBlend+0x90>
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	e76c      	b.n	8006058 <EwScreenWarpRGB565RowFilterGradientBlend+0x84>
 800617e:	bf00      	nop
 8006180:	00fc07e0 	.word	0x00fc07e0

08006184 <EwWarpNativeRowSolid>:
 8006184:	f7fb ba68 	b.w	8001658 <EwWarpNativeRowGradient>

08006188 <EwWarpNativeRowSolidBlend>:
 8006188:	f7fb bb87 	b.w	800189a <EwWarpNativeRowGradientBlend>

0800618c <EwWarpNativeRowFilterSolid>:
 800618c:	f7fb bac6 	b.w	800171c <EwWarpNativeRowFilterGradient>

08006190 <EwWarpNativeRowFilterSolidBlend>:
 8006190:	f7fb bc20 	b.w	80019d4 <EwWarpNativeRowFilterGradientBlend>

08006194 <EwWarpIndex8RowSolid>:
 8006194:	f7fb bedc 	b.w	8001f50 <EwWarpIndex8RowGradient>

08006198 <EwWarpIndex8RowSolidBlend>:
 8006198:	f7fc b803 	b.w	80021a2 <EwWarpIndex8RowGradientBlend>

0800619c <EwWarpIndex8RowFilterSolid>:
 800619c:	f7fb bf40 	b.w	8002020 <EwWarpIndex8RowFilterGradient>

080061a0 <EwWarpIndex8RowFilterSolidBlend>:
 80061a0:	f7fc b8a2 	b.w	80022e8 <EwWarpIndex8RowFilterGradientBlend>

080061a4 <EwWarpAlpha8RowSolid>:
 80061a4:	f7fc b996 	b.w	80024d4 <EwWarpAlpha8RowGradient>

080061a8 <EwWarpAlpha8RowSolidBlend>:
 80061a8:	f7fc bb51 	b.w	800284e <EwWarpAlpha8RowGradientBlend>

080061ac <EwWarpAlpha8RowFilterSolid>:
 80061ac:	f7fc ba5c 	b.w	8002668 <EwWarpAlpha8RowFilterGradient>

080061b0 <EwWarpAlpha8RowFilterSolidBlend>:
 80061b0:	f7fc bc4c 	b.w	8002a4c <EwWarpAlpha8RowFilterGradientBlend>

080061b4 <EwWarpRGB565RowSolid>:
 80061b4:	f7fc be31 	b.w	8002e1a <EwWarpRGB565RowGradient>

080061b8 <EwWarpRGB565RowSolidBlend>:
 80061b8:	f7fc bf78 	b.w	80030ac <EwWarpRGB565RowGradientBlend>

080061bc <EwWarpRGB565RowFilterSolid>:
 80061bc:	f7fc bea7 	b.w	8002f0e <EwWarpRGB565RowFilterGradient>

080061c0 <EwWarpRGB565RowFilterSolidBlend>:
 80061c0:	f7fd b82e 	b.w	8003220 <EwWarpRGB565RowFilterGradientBlend>

080061c4 <EwScreenWarpNativeRowSolid>:
 80061c4:	f7fe b8fd 	b.w	80043c2 <EwScreenWarpNativeRowGradient>

080061c8 <EwScreenWarpNativeRowSolidBlend>:
 80061c8:	f7fe ba58 	b.w	800467c <EwScreenWarpNativeRowGradientBlend>

080061cc <EwScreenWarpNativeRowFilterSolid>:
 80061cc:	f7fe b97c 	b.w	80044c8 <EwScreenWarpNativeRowFilterGradient>

080061d0 <EwScreenWarpNativeRowFilterSolidBlend>:
 80061d0:	f7fe baea 	b.w	80047a8 <EwScreenWarpNativeRowFilterGradientBlend>

080061d4 <EwScreenWarpIndex8RowSolid>:
 80061d4:	f7fe bd95 	b.w	8004d02 <EwScreenWarpIndex8RowGradient>

080061d8 <EwScreenWarpIndex8RowSolidBlend>:
 80061d8:	f7fe befa 	b.w	8004fd0 <EwScreenWarpIndex8RowGradientBlend>

080061dc <EwScreenWarpIndex8RowFilterSolid>:
 80061dc:	f7fe be18 	b.w	8004e10 <EwScreenWarpIndex8RowFilterGradient>

080061e0 <EwScreenWarpIndex8RowFilterSolidBlend>:
 80061e0:	f7fe bf8f 	b.w	8005102 <EwScreenWarpIndex8RowFilterGradientBlend>

080061e4 <EwScreenWarpAlpha8RowSolid>:
 80061e4:	f7ff b877 	b.w	80052d6 <EwScreenWarpAlpha8RowGradient>

080061e8 <EwScreenWarpAlpha8RowSolidBlend>:
 80061e8:	f7ff ba7e 	b.w	80056e8 <EwScreenWarpAlpha8RowGradientBlend>

080061ec <EwScreenWarpAlpha8RowFilterSolid>:
 80061ec:	f7ff b965 	b.w	80054ba <EwScreenWarpAlpha8RowFilterGradient>

080061f0 <EwScreenWarpAlpha8RowFilterSolidBlend>:
 80061f0:	f7ff bb75 	b.w	80058de <EwScreenWarpAlpha8RowFilterGradientBlend>

080061f4 <EwScreenWarpRGB565RowSolid>:
 80061f4:	f7ff bd25 	b.w	8005c42 <EwScreenWarpRGB565RowGradient>

080061f8 <EwScreenWarpRGB565RowSolidBlend>:
 80061f8:	f7ff be64 	b.w	8005ec4 <EwScreenWarpRGB565RowGradientBlend>

080061fc <EwScreenWarpRGB565RowFilterSolid>:
 80061fc:	f7ff bd97 	b.w	8005d2e <EwScreenWarpRGB565RowFilterGradient>

08006200 <EwScreenWarpRGB565RowFilterSolidBlend>:
 8006200:	f7ff bee8 	b.w	8005fd4 <EwScreenWarpRGB565RowFilterGradientBlend>
 8006204:	2390      	movs	r3, #144	; 0x90
 8006206:	b530      	push	{r4, r5, lr}
 8006208:	4359      	muls	r1, r3
 800620a:	4d0b      	ldr	r5, [pc, #44]	; (8006238 <EwScreenWarpRGB565RowFilterSolidBlend+0x38>)
 800620c:	18c4      	adds	r4, r0, r3
 800620e:	1a09      	subs	r1, r1, r0
 8006210:	1843      	adds	r3, r0, r1
 8006212:	105a      	asrs	r2, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	bfb8      	it	lt
 800621c:	425b      	neglt	r3, r3
 800621e:	5caa      	ldrb	r2, [r5, r2]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	fa42 f303 	asr.w	r3, r2, r3
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 800622e:	f800 3b01 	strb.w	r3, [r0], #1
 8006232:	42a0      	cmp	r0, r4
 8006234:	d1ec      	bne.n	8006210 <EwScreenWarpRGB565RowFilterSolidBlend+0x10>
 8006236:	bd30      	pop	{r4, r5, pc}
 8006238:	080337dc 	.word	0x080337dc
 800623c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006240:	4607      	mov	r7, r0
 8006242:	4688      	mov	r8, r1
 8006244:	460d      	mov	r5, r1
 8006246:	b2c0      	uxtb	r0, r0
 8006248:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800624c:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8006250:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8006254:	fa5f f488 	uxtb.w	r4, r8
 8006258:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800625c:	0e2d      	lsrs	r5, r5, #24
 800625e:	1a24      	subs	r4, r4, r0
 8006260:	eba6 060e 	sub.w	r6, r6, lr
 8006264:	eba1 010c 	sub.w	r1, r1, ip
 8006268:	eba5 6517 	sub.w	r5, r5, r7, lsr #24
 800626c:	4356      	muls	r6, r2
 800626e:	4351      	muls	r1, r2
 8006270:	4355      	muls	r5, r2
 8006272:	fb96 f6f3 	sdiv	r6, r6, r3
 8006276:	4362      	muls	r2, r4
 8006278:	fb91 f1f3 	sdiv	r1, r1, r3
 800627c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006280:	fb92 f3f3 	sdiv	r3, r2, r3
 8006284:	4403      	add	r3, r0
 8006286:	4476      	add	r6, lr
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2000      	movs	r0, #0
 800628c:	4461      	add	r1, ip
 800628e:	f363 0007 	bfi	r0, r3, #0, #8
 8006292:	b2f6      	uxtb	r6, r6
 8006294:	eb05 6517 	add.w	r5, r5, r7, lsr #24
 8006298:	f366 200f 	bfi	r0, r6, #8, #8
 800629c:	b2c9      	uxtb	r1, r1
 800629e:	f361 4017 	bfi	r0, r1, #16, #8
 80062a2:	b2ed      	uxtb	r5, r5
 80062a4:	f365 601f 	bfi	r0, r5, #24, #8
 80062a8:	b004      	add	sp, #16
 80062aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ae:	edd0 7a07 	vldr	s15, [r0, #28]
 80062b2:	eeb0 7a67 	vmov.f32	s14, s15
 80062b6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80062ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062bc:	ee17 4a10 	vmov	r4, s14
 80062c0:	ed90 7a08 	vldr	s14, [r0, #32]
 80062c4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80062c8:	6845      	ldr	r5, [r0, #4]
 80062ca:	eef0 6a47 	vmov.f32	s13, s14
 80062ce:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80062d2:	4414      	add	r4, r2
 80062d4:	ee16 6a90 	vmov	r6, s13
 80062d8:	fb0c 3606 	mla	r6, ip, r6, r3
 80062dc:	604c      	str	r4, [r1, #4]
 80062de:	608e      	str	r6, [r1, #8]
 80062e0:	f101 040c 	add.w	r4, r1, #12
 80062e4:	302c      	adds	r0, #44	; 0x2c
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	dc19      	bgt.n	800631e <EwScreenWarpRGB565RowFilterSolidBlend+0x11e>
 80062ea:	684a      	ldr	r2, [r1, #4]
 80062ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d104      	bne.n	80062fe <EwScreenWarpRGB565RowFilterSolidBlend+0xfe>
 80062f4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80062f8:	688b      	ldr	r3, [r1, #8]
 80062fa:	4298      	cmp	r0, r3
 80062fc:	d005      	beq.n	800630a <EwScreenWarpRGB565RowFilterSolidBlend+0x10a>
 80062fe:	4623      	mov	r3, r4
 8006300:	f843 2b08 	str.w	r2, [r3], #8
 8006304:	688a      	ldr	r2, [r1, #8]
 8006306:	6062      	str	r2, [r4, #4]
 8006308:	461c      	mov	r4, r3
 800630a:	1a63      	subs	r3, r4, r1
 800630c:	2b10      	cmp	r3, #16
 800630e:	dd04      	ble.n	800631a <EwScreenWarpRGB565RowFilterSolidBlend+0x11a>
 8006310:	109b      	asrs	r3, r3, #2
 8006312:	3b03      	subs	r3, #3
 8006314:	105b      	asrs	r3, r3, #1
 8006316:	600b      	str	r3, [r1, #0]
 8006318:	4621      	mov	r1, r4
 800631a:	4608      	mov	r0, r1
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006322:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006326:	eef4 6a67 	vcmp.f32	s13, s15
 800632a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632e:	d104      	bne.n	800633a <EwScreenWarpRGB565RowFilterSolidBlend+0x13a>
 8006330:	eeb4 6a47 	vcmp.f32	s12, s14
 8006334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006338:	d017      	beq.n	800636a <EwScreenWarpRGB565RowFilterSolidBlend+0x16a>
 800633a:	eef0 7a66 	vmov.f32	s15, s13
 800633e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006342:	4626      	mov	r6, r4
 8006344:	ee17 7a90 	vmov	r7, s15
 8006348:	eef0 7a46 	vmov.f32	s15, s12
 800634c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006350:	4417      	add	r7, r2
 8006352:	f846 7b08 	str.w	r7, [r6], #8
 8006356:	ee17 7a90 	vmov	r7, s15
 800635a:	fb0c 3707 	mla	r7, ip, r7, r3
 800635e:	6067      	str	r7, [r4, #4]
 8006360:	eeb0 7a46 	vmov.f32	s14, s12
 8006364:	eef0 7a66 	vmov.f32	s15, s13
 8006368:	4634      	mov	r4, r6
 800636a:	3d01      	subs	r5, #1
 800636c:	3008      	adds	r0, #8
 800636e:	e7ba      	b.n	80062e6 <EwScreenWarpRGB565RowFilterSolidBlend+0xe6>

08006370 <UpdateWatermark2>:
 8006370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4c34      	ldr	r4, [pc, #208]	; (8006448 <UpdateWatermark2+0xd8>)
 8006376:	ab02      	add	r3, sp, #8
 8006378:	e903 0003 	stmdb	r3, {r0, r1}
 800637c:	4617      	mov	r7, r2
 800637e:	4606      	mov	r6, r0
 8006380:	4689      	mov	r9, r1
 8006382:	f023 fa1b 	bl	80297bc <EwGetTicks>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	4283      	cmp	r3, r0
 800638a:	4605      	mov	r5, r0
 800638c:	d248      	bcs.n	8006420 <UpdateWatermark2+0xb0>
 800638e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	d121      	bne.n	80063dc <UpdateWatermark2+0x6c>
 8006398:	3e90      	subs	r6, #144	; 0x90
 800639a:	f1a9 0733 	sub.w	r7, r9, #51	; 0x33
 800639e:	4631      	mov	r1, r6
 80063a0:	4640      	mov	r0, r8
 80063a2:	6126      	str	r6, [r4, #16]
 80063a4:	6167      	str	r7, [r4, #20]
 80063a6:	f023 fa43 	bl	8029830 <EwMathRandInt32>
 80063aa:	6961      	ldr	r1, [r4, #20]
 80063ac:	6120      	str	r0, [r4, #16]
 80063ae:	4640      	mov	r0, r8
 80063b0:	f023 fa3e 	bl	8029830 <EwMathRandInt32>
 80063b4:	21ff      	movs	r1, #255	; 0xff
 80063b6:	6160      	str	r0, [r4, #20]
 80063b8:	4640      	mov	r0, r8
 80063ba:	f023 fa39 	bl	8029830 <EwMathRandInt32>
 80063be:	6963      	ldr	r3, [r4, #20]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	7620      	strb	r0, [r4, #24]
 80063c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80063cc:	42b2      	cmp	r2, r6
 80063ce:	bfd4      	ite	le
 80063d0:	6122      	strle	r2, [r4, #16]
 80063d2:	6126      	strgt	r6, [r4, #16]
 80063d4:	429f      	cmp	r7, r3
 80063d6:	bfd4      	ite	le
 80063d8:	6167      	strle	r7, [r4, #20]
 80063da:	6163      	strgt	r3, [r4, #20]
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	d128      	bne.n	800643c <UpdateWatermark2+0xcc>
 80063ea:	69e3      	ldr	r3, [r4, #28]
 80063ec:	fab3 f383 	clz	r3, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	61e3      	str	r3, [r4, #28]
 80063f4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80063f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80063fc:	f023 fa18 	bl	8029830 <EwMathRandInt32>
 8006400:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006404:	4283      	cmp	r3, r0
 8006406:	bfa8      	it	ge
 8006408:	4603      	movge	r3, r0
 800640a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800640e:	bfac      	ite	ge
 8006410:	18ea      	addge	r2, r5, r3
 8006412:	f505 62fa 	addlt.w	r2, r5, #2000	; 0x7d0
 8006416:	2300      	movs	r3, #0
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	60a5      	str	r5, [r4, #8]
 800641c:	60e3      	str	r3, [r4, #12]
 800641e:	e00a      	b.n	8006436 <UpdateWatermark2+0xc6>
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	4283      	cmp	r3, r0
 8006424:	d8b3      	bhi.n	800638e <UpdateWatermark2+0x1e>
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	60e2      	str	r2, [r4, #12]
 800642c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006430:	4357      	muls	r7, r2
 8006432:	42bb      	cmp	r3, r7
 8006434:	dcab      	bgt.n	800638e <UpdateWatermark2+0x1e>
 8006436:	b003      	add	sp, #12
 8006438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800643c:	f247 5130 	movw	r1, #30000	; 0x7530
 8006440:	f242 7010 	movw	r0, #10000	; 0x2710
 8006444:	e7da      	b.n	80063fc <UpdateWatermark2+0x8c>
 8006446:	bf00      	nop
 8006448:	200000f4 	.word	0x200000f4
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	b08b      	sub	sp, #44	; 0x2c
 8006452:	9005      	str	r0, [sp, #20]
 8006454:	a80a      	add	r0, sp, #40	; 0x28
 8006456:	e900 0006 	stmdb	r0, {r1, r2}
 800645a:	9306      	str	r3, [sp, #24]
 800645c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800645e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006460:	2b01      	cmp	r3, #1
 8006462:	461f      	mov	r7, r3
 8006464:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8006468:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
 800646c:	bfb8      	it	lt
 800646e:	2701      	movlt	r7, #1
 8006470:	b362      	cbz	r2, 80064cc <UpdateWatermark2+0x15c>
 8006472:	2b01      	cmp	r3, #1
 8006474:	dd2a      	ble.n	80064cc <UpdateWatermark2+0x15c>
 8006476:	4d73      	ldr	r5, [pc, #460]	; (8006644 <UpdateWatermark2+0x2d4>)
 8006478:	fb09 f308 	mul.w	r3, r9, r8
 800647c:	015c      	lsls	r4, r3, #5
 800647e:	682e      	ldr	r6, [r5, #0]
 8006480:	fb96 f6f4 	sdiv	r6, r6, r4
 8006484:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8006488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800648c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006490:	fb94 f3f3 	sdiv	r3, r4, r3
 8006494:	42b3      	cmp	r3, r6
 8006496:	bfb8      	it	lt
 8006498:	4633      	movlt	r3, r6
 800649a:	429d      	cmp	r5, r3
 800649c:	bfd4      	ite	le
 800649e:	195b      	addle	r3, r3, r5
 80064a0:	18db      	addgt	r3, r3, r3
 80064a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80064a6:	105b      	asrs	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	bfb8      	it	lt
 80064ac:	2301      	movlt	r3, #1
 80064ae:	429f      	cmp	r7, r3
 80064b0:	dd0c      	ble.n	80064cc <UpdateWatermark2+0x15c>
 80064b2:	45c8      	cmp	r8, r9
 80064b4:	da04      	bge.n	80064c0 <UpdateWatermark2+0x150>
 80064b6:	b339      	cbz	r1, 8006508 <UpdateWatermark2+0x198>
 80064b8:	b138      	cbz	r0, 80064ca <UpdateWatermark2+0x15a>
 80064ba:	4601      	mov	r1, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	e004      	b.n	80064ca <UpdateWatermark2+0x15a>
 80064c0:	b1f0      	cbz	r0, 8006500 <UpdateWatermark2+0x190>
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d1fa      	bne.n	80064bc <UpdateWatermark2+0x14c>
 80064c6:	4619      	mov	r1, r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80064d0:	4599      	cmp	r9, r3
 80064d2:	dc1c      	bgt.n	800650e <UpdateWatermark2+0x19e>
 80064d4:	4598      	cmp	r8, r3
 80064d6:	bfd7      	itett	le
 80064d8:	9b18      	ldrle	r3, [sp, #96]	; 0x60
 80064da:	2400      	movgt	r4, #0
 80064dc:	1c5c      	addle	r4, r3, #1
 80064de:	f04f 0b01 	movle.w	fp, #1
 80064e2:	bfc8      	it	gt
 80064e4:	46a3      	movgt	fp, r4
 80064e6:	f1b9 0f00 	cmp.w	r9, #0
 80064ea:	dc12      	bgt.n	8006512 <UpdateWatermark2+0x1a2>
 80064ec:	4642      	mov	r2, r8
 80064ee:	4649      	mov	r1, r9
 80064f0:	20b3      	movs	r0, #179	; 0xb3
 80064f2:	f012 fbf7 	bl	8018ce4 <EwErrorDD>
 80064f6:	2400      	movs	r4, #0
 80064f8:	4620      	mov	r0, r4
 80064fa:	b00b      	add	sp, #44	; 0x2c
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	2900      	cmp	r1, #0
 8006502:	d1e2      	bne.n	80064ca <UpdateWatermark2+0x15a>
 8006504:	4611      	mov	r1, r2
 8006506:	e7e0      	b.n	80064ca <UpdateWatermark2+0x15a>
 8006508:	4619      	mov	r1, r3
 800650a:	4613      	mov	r3, r2
 800650c:	e7dd      	b.n	80064ca <UpdateWatermark2+0x15a>
 800650e:	2400      	movs	r4, #0
 8006510:	46a3      	mov	fp, r4
 8006512:	f1b8 0f00 	cmp.w	r8, #0
 8006516:	dde9      	ble.n	80064ec <UpdateWatermark2+0x17c>
 8006518:	f5cb 6280 	rsb	r2, fp, #1024	; 0x400
 800651c:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 8006520:	ea4f 0642 	mov.w	r6, r2, lsl #1
 8006524:	dce2      	bgt.n	80064ec <UpdateWatermark2+0x17c>
 8006526:	4546      	cmp	r6, r8
 8006528:	dbe0      	blt.n	80064ec <UpdateWatermark2+0x17c>
 800652a:	eb09 0304 	add.w	r3, r9, r4
 800652e:	4426      	add	r6, r4
 8006530:	9302      	str	r3, [sp, #8]
 8006532:	fbb6 f2f3 	udiv	r2, r6, r3
 8006536:	eb08 0304 	add.w	r3, r8, r4
 800653a:	9303      	str	r3, [sp, #12]
 800653c:	fbb6 f6f3 	udiv	r6, r6, r3
 8006540:	b110      	cbz	r0, 8006548 <UpdateWatermark2+0x1d8>
 8006542:	4282      	cmp	r2, r0
 8006544:	bfa8      	it	ge
 8006546:	4602      	movge	r2, r0
 8006548:	b111      	cbz	r1, 8006550 <UpdateWatermark2+0x1e0>
 800654a:	428e      	cmp	r6, r1
 800654c:	bfa8      	it	ge
 800654e:	460e      	movge	r6, r1
 8006550:	4356      	muls	r6, r2
 8006552:	ebc7 05c7 	rsb	r5, r7, r7, lsl #3
 8006556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006558:	eb07 0a06 	add.w	sl, r7, r6
 800655c:	350b      	adds	r5, #11
 800655e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006562:	fbba faf6 	udiv	sl, sl, r6
 8006566:	4455      	add	r5, sl
 8006568:	00ad      	lsls	r5, r5, #2
 800656a:	429f      	cmp	r7, r3
 800656c:	bfb8      	it	lt
 800656e:	eb05 0543 	addlt.w	r5, r5, r3, lsl #1
 8006572:	4628      	mov	r0, r5
 8006574:	9201      	str	r2, [sp, #4]
 8006576:	f023 f8fb 	bl	8029770 <EwAlloc>
 800657a:	9a01      	ldr	r2, [sp, #4]
 800657c:	4604      	mov	r4, r0
 800657e:	b928      	cbnz	r0, 800658c <UpdateWatermark2+0x21c>
 8006580:	2022      	movs	r0, #34	; 0x22
 8006582:	f013 fb41 	bl	8019c08 <EwImmediateReclaimMemory>
 8006586:	9a01      	ldr	r2, [sp, #4]
 8006588:	2800      	cmp	r0, #0
 800658a:	d1f2      	bne.n	8006572 <UpdateWatermark2+0x202>
 800658c:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8006590:	eb03 018a 	add.w	r1, r3, sl, lsl #2
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	9101      	str	r1, [sp, #4]
 8006598:	b91c      	cbnz	r4, 80065a2 <UpdateWatermark2+0x232>
 800659a:	2022      	movs	r0, #34	; 0x22
 800659c:	f012 fb84 	bl	8018ca8 <EwError>
 80065a0:	e7aa      	b.n	80064f8 <UpdateWatermark2+0x188>
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	9207      	str	r2, [sp, #28]
 80065a8:	f023 f90a 	bl	80297c0 <EwZero>
 80065ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80065b0:	9a07      	ldr	r2, [sp, #28]
 80065b2:	2000      	movs	r0, #0
 80065b4:	fbb0 f1f6 	udiv	r1, r0, r6
 80065b8:	fb06 0111 	mls	r1, r6, r1, r0
 80065bc:	fbb1 fef2 	udiv	lr, r1, r2
 80065c0:	fb02 131e 	mls	r3, r2, lr, r1
 80065c4:	9902      	ldr	r1, [sp, #8]
 80065c6:	fb01 b103 	mla	r1, r1, r3, fp
 80065ca:	f8cc 1004 	str.w	r1, [ip, #4]
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	3001      	adds	r0, #1
 80065d2:	fb01 b10e 	mla	r1, r1, lr, fp
 80065d6:	4287      	cmp	r7, r0
 80065d8:	f8cc 1008 	str.w	r1, [ip, #8]
 80065dc:	f10c 0c1c 	add.w	ip, ip, #28
 80065e0:	d1e8      	bne.n	80065b4 <UpdateWatermark2+0x244>
 80065e2:	9a05      	ldr	r2, [sp, #20]
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80065e8:	e9c4 2900 	strd	r2, r9, [r4]
 80065ec:	9a06      	ldr	r2, [sp, #24]
 80065ee:	60e2      	str	r2, [r4, #12]
 80065f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	6162      	str	r2, [r4, #20]
 80065f6:	4297      	cmp	r7, r2
 80065f8:	6223      	str	r3, [r4, #32]
 80065fa:	4613      	mov	r3, r2
 80065fc:	bfb8      	it	lt
 80065fe:	9a01      	ldrlt	r2, [sp, #4]
 8006600:	6127      	str	r7, [r4, #16]
 8006602:	bfbc      	itt	lt
 8006604:	231c      	movlt	r3, #28
 8006606:	fb03 2707 	mlalt	r7, r3, r7, r2
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <UpdateWatermark2+0x2d8>)
 800660c:	f8c4 8008 	str.w	r8, [r4, #8]
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 8006616:	440d      	add	r5, r1
 8006618:	601d      	str	r5, [r3, #0]
 800661a:	4b0c      	ldr	r3, [pc, #48]	; (800664c <UpdateWatermark2+0x2dc>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	bfa8      	it	ge
 8006620:	2700      	movge	r7, #0
 8006622:	4295      	cmp	r5, r2
 8006624:	bfc8      	it	gt
 8006626:	601d      	strgt	r5, [r3, #0]
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <UpdateWatermark2+0x2e0>)
 800662a:	61a7      	str	r7, [r4, #24]
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <UpdateWatermark2+0x2e4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4419      	add	r1, r3
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <UpdateWatermark2+0x2e8>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	440d      	add	r5, r1
 800663a:	4295      	cmp	r5, r2
 800663c:	f77f af5c 	ble.w	80064f8 <UpdateWatermark2+0x188>
 8006640:	601d      	str	r5, [r3, #0]
 8006642:	e759      	b.n	80064f8 <UpdateWatermark2+0x188>
 8006644:	20000014 	.word	0x20000014
 8006648:	200002e8 	.word	0x200002e8
 800664c:	20000304 	.word	0x20000304
 8006650:	200002d8 	.word	0x200002d8
 8006654:	200002e4 	.word	0x200002e4
 8006658:	200002ec 	.word	0x200002ec
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8006664:	b097      	sub	sp, #92	; 0x5c
 8006666:	2500      	movs	r5, #0
 8006668:	1c4e      	adds	r6, r1, #1
 800666a:	3b01      	subs	r3, #1
 800666c:	fb93 f3f6 	sdiv	r3, r3, r6
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 8006676:	4604      	mov	r4, r0
 8006678:	46a8      	mov	r8, r5
 800667a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800667e:	46aa      	mov	sl, r5
 8006680:	1c57      	adds	r7, r2, #1
 8006682:	3b01      	subs	r3, #1
 8006684:	fb93 fbf7 	sdiv	fp, r3, r7
 8006688:	45d8      	cmp	r8, fp
 800668a:	dd0a      	ble.n	80066a2 <UpdateWatermark2+0x332>
 800668c:	2500      	movs	r5, #0
 800668e:	46a8      	mov	r8, r5
 8006690:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006694:	46aa      	mov	sl, r5
 8006696:	9b07      	ldr	r3, [sp, #28]
 8006698:	4598      	cmp	r8, r3
 800669a:	dd2b      	ble.n	80066f4 <UpdateWatermark2+0x384>
 800669c:	b017      	add	sp, #92	; 0x5c
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	2302      	movs	r3, #2
 80066a4:	e9cd a302 	strd	sl, r3, [sp, #8]
 80066a8:	2301      	movs	r3, #1
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80066b0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80066b4:	f8cd a004 	str.w	sl, [sp, #4]
 80066b8:	462a      	mov	r2, r5
 80066ba:	2100      	movs	r1, #0
 80066bc:	4620      	mov	r0, r4
 80066be:	f00c fe7b 	bl	80133b8 <EwLockSurface>
 80066c2:	b198      	cbz	r0, 80066ec <UpdateWatermark2+0x37c>
 80066c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066c6:	b128      	cbz	r0, 80066d4 <UpdateWatermark2+0x364>
 80066c8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80066cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ce:	4359      	muls	r1, r3
 80066d0:	f023 f876 	bl	80297c0 <EwZero>
 80066d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80066d6:	b128      	cbz	r0, 80066e4 <UpdateWatermark2+0x374>
 80066d8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80066dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066de:	4359      	muls	r1, r3
 80066e0:	f023 f86e 	bl	80297c0 <EwZero>
 80066e4:	4649      	mov	r1, r9
 80066e6:	4620      	mov	r0, r4
 80066e8:	f00c fb16 	bl	8012d18 <EwUnlockSurface>
 80066ec:	f108 0801 	add.w	r8, r8, #1
 80066f0:	443d      	add	r5, r7
 80066f2:	e7c9      	b.n	8006688 <UpdateWatermark2+0x318>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e9cd a302 	strd	sl, r3, [sp, #8]
 80066fa:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f8cd 9010 	str.w	r9, [sp, #16]
 8006704:	f8cd a004 	str.w	sl, [sp, #4]
 8006708:	2301      	movs	r3, #1
 800670a:	2200      	movs	r2, #0
 800670c:	4629      	mov	r1, r5
 800670e:	4620      	mov	r0, r4
 8006710:	f00c fe52 	bl	80133b8 <EwLockSurface>
 8006714:	b170      	cbz	r0, 8006734 <UpdateWatermark2+0x3c4>
 8006716:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006718:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800671c:	f9b4 7024 	ldrsh.w	r7, [r4, #36]	; 0x24
 8006720:	b9c8      	cbnz	r0, 8006756 <UpdateWatermark2+0x3e6>
 8006722:	f1bb 0f00 	cmp.w	fp, #0
 8006726:	d001      	beq.n	800672c <UpdateWatermark2+0x3bc>
 8006728:	2f00      	cmp	r7, #0
 800672a:	dc16      	bgt.n	800675a <UpdateWatermark2+0x3ea>
 800672c:	4649      	mov	r1, r9
 800672e:	4620      	mov	r0, r4
 8006730:	f00c faf2 	bl	8012d18 <EwUnlockSurface>
 8006734:	f108 0801 	add.w	r8, r8, #1
 8006738:	4435      	add	r5, r6
 800673a:	e7ac      	b.n	8006696 <UpdateWatermark2+0x326>
 800673c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800673e:	9209      	str	r2, [sp, #36]	; 0x24
 8006740:	9008      	str	r0, [sp, #32]
 8006742:	f023 f83d 	bl	80297c0 <EwZero>
 8006746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006748:	990c      	ldr	r1, [sp, #48]	; 0x30
 800674a:	9808      	ldr	r0, [sp, #32]
 800674c:	3a01      	subs	r2, #1
 800674e:	4408      	add	r0, r1
 8006750:	2a00      	cmp	r2, #0
 8006752:	dcf3      	bgt.n	800673c <UpdateWatermark2+0x3cc>
 8006754:	e7e5      	b.n	8006722 <UpdateWatermark2+0x3b2>
 8006756:	463a      	mov	r2, r7
 8006758:	e7fa      	b.n	8006750 <UpdateWatermark2+0x3e0>
 800675a:	4658      	mov	r0, fp
 800675c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800675e:	f023 f82f 	bl	80297c0 <EwZero>
 8006762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006764:	3f01      	subs	r7, #1
 8006766:	4493      	add	fp, r2
 8006768:	e7de      	b.n	8006728 <UpdateWatermark2+0x3b8>
 800676a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676e:	ed2d 8b0e 	vpush	{d8-d14}
 8006772:	b089      	sub	sp, #36	; 0x24
 8006774:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	7a83      	ldrb	r3, [r0, #10]
 800677c:	9302      	str	r3, [sp, #8]
 800677e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	9b05      	ldr	r3, [sp, #20]
 8006786:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8006788:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800678c:	edd0 ca07 	vldr	s25, [r0, #28]
 8006790:	ed90 da08 	vldr	s26, [r0, #32]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	e9dd 4820 	ldrd	r4, r8, [sp, #128]	; 0x80
 800679c:	e9dd 5622 	ldrd	r5, r6, [sp, #136]	; 0x88
 80067a0:	4682      	mov	sl, r0
 80067a2:	eeb0 8a40 	vmov.f32	s16, s0
 80067a6:	eef0 8a60 	vmov.f32	s17, s1
 80067aa:	eeb0 aa41 	vmov.f32	s20, s2
 80067ae:	eef0 aa61 	vmov.f32	s21, s3
 80067b2:	d15d      	bne.n	8006870 <UpdateWatermark2+0x500>
 80067b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80067b8:	eee0 7a00 	vfma.f32	s15, s0, s0
 80067bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c4:	eeb0 8a67 	vmov.f32	s16, s15
 80067c8:	dd05      	ble.n	80067d6 <UpdateWatermark2+0x466>
 80067ca:	eeb0 0a67 	vmov.f32	s0, s15
 80067ce:	f023 f81b 	bl	8029808 <EwMathSqrt>
 80067d2:	eeb0 8a40 	vmov.f32	s16, s0
 80067d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80067da:	ee87 baa8 	vdiv.f32	s22, s15, s17
 80067de:	46c3      	mov	fp, r8
 80067e0:	f10a 032c 	add.w	r3, sl, #44	; 0x2c
 80067e4:	2200      	movs	r2, #0
 80067e6:	ed9f cac6 	vldr	s24, [pc, #792]	; 8006b00 <UpdateWatermark2+0x790>
 80067ea:	eef0 ba4c 	vmov.f32	s23, s24
 80067ee:	454a      	cmp	r2, r9
 80067f0:	db41      	blt.n	8006876 <UpdateWatermark2+0x506>
 80067f2:	ed58 7a03 	vldr	s15, [r8, #-12]
 80067f6:	ed18 7a02 	vldr	s14, [r8, #-8]
 80067fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 80067fc:	ee67 7acc 	vnmul.f32	s15, s15, s24
 8006800:	f06f 020b 	mvn.w	r2, #11
 8006804:	eee7 7a2b 	vfma.f32	s15, s14, s23
 8006808:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800680c:	fb02 8303 	mla	r3, r2, r3, r8
 8006810:	eb08 0e02 	add.w	lr, r8, r2
 8006814:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006816:	ed48 7a01 	vstr	s15, [r8, #-4]
 800681a:	3a01      	subs	r2, #1
 800681c:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006820:	2900      	cmp	r1, #0
 8006822:	9206      	str	r2, [sp, #24]
 8006824:	edda 7a07 	vldr	s15, [sl, #28]
 8006828:	edda 6a08 	vldr	s13, [sl, #32]
 800682c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006830:	bfd8      	it	le
 8006832:	2200      	movle	r2, #0
 8006834:	f1c9 0301 	rsb	r3, r9, #1
 8006838:	9207      	str	r2, [sp, #28]
 800683a:	4620      	mov	r0, r4
 800683c:	f04f 0c01 	mov.w	ip, #1
 8006840:	eeb1 3a68 	vneg.f32	s6, s17
 8006844:	454b      	cmp	r3, r9
 8006846:	dd5b      	ble.n	8006900 <UpdateWatermark2+0x590>
 8006848:	6843      	ldr	r3, [r0, #4]
 800684a:	6063      	str	r3, [r4, #4]
 800684c:	4623      	mov	r3, r4
 800684e:	6882      	ldr	r2, [r0, #8]
 8006850:	f843 2f08 	str.w	r2, [r3, #8]!
 8006854:	1a1b      	subs	r3, r3, r0
 8006856:	2b0c      	cmp	r3, #12
 8006858:	dd05      	ble.n	8006866 <UpdateWatermark2+0x4f6>
 800685a:	109b      	asrs	r3, r3, #2
 800685c:	3b02      	subs	r3, #2
 800685e:	105b      	asrs	r3, r3, #1
 8006860:	6003      	str	r3, [r0, #0]
 8006862:	f104 000c 	add.w	r0, r4, #12
 8006866:	b009      	add	sp, #36	; 0x24
 8006868:	ecbd 8b0e 	vpop	{d8-d14}
 800686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006870:	ed9f baa3 	vldr	s22, [pc, #652]	; 8006b00 <UpdateWatermark2+0x790>
 8006874:	e7b3      	b.n	80067de <UpdateWatermark2+0x46e>
 8006876:	ed13 ea01 	vldr	s28, [r3, #-4]
 800687a:	ed53 da02 	vldr	s27, [r3, #-8]
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	ee7e 9a4d 	vsub.f32	s19, s28, s26
 8006884:	ee3d 9aec 	vsub.f32	s18, s27, s25
 8006888:	ee29 0aa9 	vmul.f32	s0, s19, s19
 800688c:	9306      	str	r3, [sp, #24]
 800688e:	eea9 0a09 	vfma.f32	s0, s18, s18
 8006892:	f022 ffb9 	bl	8029808 <EwMathSqrt>
 8006896:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689e:	bfc8      	it	gt
 80068a0:	ee89 9a00 	vdivgt.f32	s18, s18, s0
 80068a4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068a8:	bfc8      	it	gt
 80068aa:	eec9 9a80 	vdivgt.f32	s19, s19, s0
 80068ae:	ee69 7a4c 	vnmul.f32	s15, s18, s24
 80068b2:	eef4 ca6d 	vcmp.f32	s25, s27
 80068b6:	eeeb 7aa9 	vfma.f32	s15, s23, s19
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	ed4b 7a01 	vstr	s15, [fp, #-4]
 80068c2:	ed4b 9a02 	vstr	s19, [fp, #-8]
 80068c6:	ed0b 9a03 	vstr	s18, [fp, #-12]
 80068ca:	d10c      	bne.n	80068e6 <UpdateWatermark2+0x576>
 80068cc:	eeb4 da4e 	vcmp.f32	s26, s28
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	bf01      	itttt	eq
 80068d6:	eef0 9a4c 	vmoveq.f32	s19, s24
 80068da:	eeb0 9a6b 	vmoveq.f32	s18, s23
 80068de:	eeb0 ea4d 	vmoveq.f32	s28, s26
 80068e2:	eef0 da6c 	vmoveq.f32	s27, s25
 80068e6:	3201      	adds	r2, #1
 80068e8:	f1ab 0b0c 	sub.w	fp, fp, #12
 80068ec:	3308      	adds	r3, #8
 80068ee:	eeb0 ca69 	vmov.f32	s24, s19
 80068f2:	eef0 ba49 	vmov.f32	s23, s18
 80068f6:	eeb0 da4e 	vmov.f32	s26, s28
 80068fa:	eef0 ca6d 	vmov.f32	s25, s27
 80068fe:	e776      	b.n	80067ee <UpdateWatermark2+0x47e>
 8006900:	9a01      	ldr	r2, [sp, #4]
 8006902:	edde 5a00 	vldr	s11, [lr]
 8006906:	ed92 4a00 	vldr	s8, [r2]
 800690a:	ed9e 5a01 	vldr	s10, [lr, #4]
 800690e:	edd2 3a01 	vldr	s7, [r2, #4]
 8006912:	f1bc 3fff 	cmp.w	ip, #4294967295
 8006916:	bf0c      	ite	eq
 8006918:	ed1e 7a01 	vldreq	s14, [lr, #-4]
 800691c:	ed9e 7a02 	vldrne	s14, [lr, #8]
 8006920:	eef4 7a44 	vcmp.f32	s15, s8
 8006924:	bf02      	ittt	eq
 8006926:	eef1 5a65 	vnegeq.f32	s11, s11
 800692a:	eeb1 5a45 	vnegeq.f32	s10, s10
 800692e:	eeb1 7a47 	vnegeq.f32	s14, s14
 8006932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006936:	ee28 6aa5 	vmul.f32	s12, s17, s11
 800693a:	ee68 4a85 	vmul.f32	s9, s17, s10
 800693e:	d111      	bne.n	8006964 <UpdateWatermark2+0x5f4>
 8006940:	eef4 6a63 	vcmp.f32	s13, s7
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	d10c      	bne.n	8006964 <UpdateWatermark2+0x5f4>
 800694a:	b93b      	cbnz	r3, 800695c <UpdateWatermark2+0x5ec>
 800694c:	f1cc 0c00 	rsb	ip, ip, #0
 8006950:	9a01      	ldr	r2, [sp, #4]
 8006952:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	3301      	adds	r3, #1
 800695a:	e773      	b.n	8006844 <UpdateWatermark2+0x4d4>
 800695c:	220c      	movs	r2, #12
 800695e:	fb02 ee1c 	mls	lr, r2, ip, lr
 8006962:	e7f5      	b.n	8006950 <UpdateWatermark2+0x5e0>
 8006964:	9a02      	ldr	r2, [sp, #8]
 8006966:	b99a      	cbnz	r2, 8006990 <UpdateWatermark2+0x620>
 8006968:	9a03      	ldr	r2, [sp, #12]
 800696a:	2a01      	cmp	r2, #1
 800696c:	d107      	bne.n	800697e <UpdateWatermark2+0x60e>
 800696e:	42a0      	cmp	r0, r4
 8006970:	d103      	bne.n	800697a <UpdateWatermark2+0x60a>
 8006972:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006976:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800697a:	454b      	cmp	r3, r9
 800697c:	d004      	beq.n	8006988 <UpdateWatermark2+0x618>
 800697e:	9a04      	ldr	r2, [sp, #16]
 8006980:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006984:	d104      	bne.n	8006990 <UpdateWatermark2+0x620>
 8006986:	b91b      	cbnz	r3, 8006990 <UpdateWatermark2+0x620>
 8006988:	ee34 4a06 	vadd.f32	s8, s8, s12
 800698c:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8006990:	9a05      	ldr	r2, [sp, #20]
 8006992:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006996:	f040 80c3 	bne.w	8006b20 <UpdateWatermark2+0x7b0>
 800699a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	f340 8198 	ble.w	8006cd6 <UpdateWatermark2+0x966>
 80069a6:	9a02      	ldr	r2, [sp, #8]
 80069a8:	b92a      	cbnz	r2, 80069b6 <UpdateWatermark2+0x646>
 80069aa:	42a0      	cmp	r0, r4
 80069ac:	f000 81f6 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f000 81f3 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 80069b6:	ee3b 2aa5 	vadd.f32	s4, s23, s11
 80069ba:	ee7c 2a05 	vadd.f32	s5, s24, s10
 80069be:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80069c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c6:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 80069ca:	bf4c      	ite	mi
 80069cc:	eef1 1a42 	vnegmi.f32	s3, s4
 80069d0:	eef0 1a42 	vmovpl.f32	s3, s4
 80069d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d8:	bf4c      	ite	mi
 80069da:	eeb1 7a62 	vnegmi.f32	s14, s5
 80069de:	eeb0 7a62 	vmovpl.f32	s14, s5
 80069e2:	eef4 1ac7 	vcmpe.f32	s3, s14
 80069e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ea:	dd7d      	ble.n	8006ae8 <UpdateWatermark2+0x778>
 80069ec:	ee35 ca4c 	vsub.f32	s24, s10, s24
 80069f0:	ee8c 7a02 	vdiv.f32	s14, s24, s4
 80069f4:	f104 0108 	add.w	r1, r4, #8
 80069f8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	bf48      	it	mi
 8006a02:	eeb1 7a47 	vnegmi.f32	s14, s14
 8006a06:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8006a12:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006a16:	db75      	blt.n	8006b04 <UpdateWatermark2+0x794>
 8006a18:	eeb4 bac7 	vcmpe.f32	s22, s14
 8006a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a20:	d870      	bhi.n	8006b04 <UpdateWatermark2+0x794>
 8006a22:	ee28 7ac7 	vnmul.f32	s14, s17, s14
 8006a26:	42a0      	cmp	r0, r4
 8006a28:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006a2c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006a30:	ee17 2a90 	vmov	r2, s15
 8006a34:	442a      	add	r2, r5
 8006a36:	f040 8135 	bne.w	8006ca4 <UpdateWatermark2+0x934>
 8006a3a:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006a3e:	6042      	str	r2, [r0, #4]
 8006a40:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8006a44:	ee16 2a90 	vmov	r2, s13
 8006a48:	fb07 6202 	mla	r2, r7, r2, r6
 8006a4c:	6082      	str	r2, [r0, #8]
 8006a4e:	460c      	mov	r4, r1
 8006a50:	ee74 7a24 	vadd.f32	s15, s8, s9
 8006a54:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006a58:	ee17 2a90 	vmov	r2, s15
 8006a5c:	ee73 7ac6 	vsub.f32	s15, s7, s12
 8006a60:	442a      	add	r2, r5
 8006a62:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006a66:	6062      	str	r2, [r4, #4]
 8006a68:	ee17 1a90 	vmov	r1, s15
 8006a6c:	fb07 6101 	mla	r1, r7, r1, r6
 8006a70:	60a1      	str	r1, [r4, #8]
 8006a72:	9902      	ldr	r1, [sp, #8]
 8006a74:	f104 0208 	add.w	r2, r4, #8
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	f040 81cd 	bne.w	8006e18 <UpdateWatermark2+0xaa8>
 8006a7e:	9903      	ldr	r1, [sp, #12]
 8006a80:	2902      	cmp	r1, #2
 8006a82:	f040 819d 	bne.w	8006dc0 <UpdateWatermark2+0xa50>
 8006a86:	454b      	cmp	r3, r9
 8006a88:	f040 81ef 	bne.w	8006e6a <UpdateWatermark2+0xafa>
 8006a8c:	ee74 7a06 	vadd.f32	s15, s8, s12
 8006a90:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006a94:	ee17 2a90 	vmov	r2, s15
 8006a98:	ee73 7aa4 	vadd.f32	s15, s7, s9
 8006a9c:	442a      	add	r2, r5
 8006a9e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006aa2:	60e2      	str	r2, [r4, #12]
 8006aa4:	ee17 1a90 	vmov	r1, s15
 8006aa8:	fb07 6101 	mla	r1, r7, r1, r6
 8006aac:	f104 0210 	add.w	r2, r4, #16
 8006ab0:	6121      	str	r1, [r4, #16]
 8006ab2:	9903      	ldr	r1, [sp, #12]
 8006ab4:	2903      	cmp	r1, #3
 8006ab6:	d101      	bne.n	8006abc <UpdateWatermark2+0x74c>
 8006ab8:	454b      	cmp	r3, r9
 8006aba:	d004      	beq.n	8006ac6 <UpdateWatermark2+0x756>
 8006abc:	9904      	ldr	r1, [sp, #16]
 8006abe:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8006ac2:	d10a      	bne.n	8006ada <UpdateWatermark2+0x76a>
 8006ac4:	b963      	cbnz	r3, 8006ae0 <UpdateWatermark2+0x770>
 8006ac6:	eeb1 6a46 	vneg.f32	s12, s12
 8006aca:	4692      	mov	sl, r2
 8006acc:	2400      	movs	r4, #0
 8006ace:	9906      	ldr	r1, [sp, #24]
 8006ad0:	42a1      	cmp	r1, r4
 8006ad2:	f300 8182 	bgt.w	8006dda <UpdateWatermark2+0xa6a>
 8006ad6:	9907      	ldr	r1, [sp, #28]
 8006ad8:	440a      	add	r2, r1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 81b5 	beq.w	8006e4a <UpdateWatermark2+0xada>
 8006ae0:	210c      	movs	r1, #12
 8006ae2:	fb01 ee1c 	mls	lr, r1, ip, lr
 8006ae6:	e1b2      	b.n	8006e4e <UpdateWatermark2+0xade>
 8006ae8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	bfca      	itet	gt
 8006af2:	ee75 baeb 	vsubgt.f32	s23, s11, s23
 8006af6:	eeb0 7a48 	vmovle.f32	s14, s16
 8006afa:	ee8b 7aa2 	vdivgt.f32	s14, s23, s5
 8006afe:	e779      	b.n	80069f4 <UpdateWatermark2+0x684>
 8006b00:	00000000 	.word	0x00000000
 8006b04:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006b08:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8006b0c:	ee17 2a90 	vmov	r2, s15
 8006b10:	442a      	add	r2, r5
 8006b12:	6062      	str	r2, [r4, #4]
 8006b14:	ee16 2a90 	vmov	r2, s13
 8006b18:	fb07 6202 	mla	r2, r7, r2, r6
 8006b1c:	60a2      	str	r2, [r4, #8]
 8006b1e:	e796      	b.n	8006a4e <UpdateWatermark2+0x6de>
 8006b20:	9a05      	ldr	r2, [sp, #20]
 8006b22:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006b26:	d158      	bne.n	8006bda <UpdateWatermark2+0x86a>
 8006b28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b30:	f340 80d1 	ble.w	8006cd6 <UpdateWatermark2+0x966>
 8006b34:	9a02      	ldr	r2, [sp, #8]
 8006b36:	b92a      	cbnz	r2, 8006b44 <UpdateWatermark2+0x7d4>
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	f000 812f 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f000 812c 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 8006b44:	ee2c ca28 	vmul.f32	s24, s24, s17
 8006b48:	ee2b 7ae8 	vnmul.f32	s14, s23, s17
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	f04f 0b00 	mov.w	fp, #0
 8006b52:	eef1 1a46 	vneg.f32	s3, s12
 8006b56:	9925      	ldr	r1, [sp, #148]	; 0x94
 8006b58:	4559      	cmp	r1, fp
 8006b5a:	f102 0a08 	add.w	sl, r2, #8
 8006b5e:	d112      	bne.n	8006b86 <UpdateWatermark2+0x816>
 8006b60:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8006b64:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006b68:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006b6c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8006b70:	ee17 1a90 	vmov	r1, s15
 8006b74:	4429      	add	r1, r5
 8006b76:	6051      	str	r1, [r2, #4]
 8006b78:	ee16 1a90 	vmov	r1, s13
 8006b7c:	fb07 6101 	mla	r1, r7, r1, r6
 8006b80:	6091      	str	r1, [r2, #8]
 8006b82:	4654      	mov	r4, sl
 8006b84:	e764      	b.n	8006a50 <UpdateWatermark2+0x6e0>
 8006b86:	ee6a 2ac7 	vnmul.f32	s5, s21, s14
 8006b8a:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8006b8e:	eeec 2a0a 	vfma.f32	s5, s24, s20
 8006b92:	f10b 0b01 	add.w	fp, fp, #1
 8006b96:	eeac 7a2a 	vfma.f32	s14, s24, s21
 8006b9a:	ee27 2a64 	vnmul.f32	s4, s14, s9
 8006b9e:	eea1 2aa2 	vfma.f32	s4, s3, s5
 8006ba2:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	d9d9      	bls.n	8006b60 <UpdateWatermark2+0x7f0>
 8006bac:	ee32 2aa7 	vadd.f32	s4, s5, s15
 8006bb0:	eeb0 ca62 	vmov.f32	s24, s5
 8006bb4:	eebe 2ace 	vcvt.s32.f32	s4, s4, #4
 8006bb8:	ee12 2a10 	vmov	r2, s4
 8006bbc:	ee37 2a26 	vadd.f32	s4, s14, s13
 8006bc0:	442a      	add	r2, r5
 8006bc2:	eebe 2ace 	vcvt.s32.f32	s4, s4, #4
 8006bc6:	f84a 2c04 	str.w	r2, [sl, #-4]
 8006bca:	ee12 2a10 	vmov	r2, s4
 8006bce:	fb07 6202 	mla	r2, r7, r2, r6
 8006bd2:	f844 203b 	str.w	r2, [r4, fp, lsl #3]
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	e7bd      	b.n	8006b56 <UpdateWatermark2+0x7e6>
 8006bda:	9a05      	ldr	r2, [sp, #20]
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	d17a      	bne.n	8006cd6 <UpdateWatermark2+0x966>
 8006be0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	dd75      	ble.n	8006cd6 <UpdateWatermark2+0x966>
 8006bea:	9a02      	ldr	r2, [sp, #8]
 8006bec:	b92a      	cbnz	r2, 8006bfa <UpdateWatermark2+0x88a>
 8006bee:	42a0      	cmp	r0, r4
 8006bf0:	f000 80d4 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f000 80d1 	beq.w	8006d9c <UpdateWatermark2+0xa2c>
 8006bfa:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8006bfe:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006c02:	eeb0 7a67 	vmov.f32	s14, s15
 8006c06:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006c0a:	42a0      	cmp	r0, r4
 8006c0c:	ee17 ba10 	vmov	fp, s14
 8006c10:	eeb0 7a66 	vmov.f32	s14, s13
 8006c14:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006c18:	44ab      	add	fp, r5
 8006c1a:	ee17 aa10 	vmov	sl, s14
 8006c1e:	fb07 6a0a 	mla	sl, r7, sl, r6
 8006c22:	d20c      	bcs.n	8006c3e <UpdateWatermark2+0x8ce>
 8006c24:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	ebab 0101 	sub.w	r1, fp, r1
 8006c2e:	3110      	adds	r1, #16
 8006c30:	2920      	cmp	r1, #32
 8006c32:	ebaa 0202 	sub.w	r2, sl, r2
 8006c36:	d802      	bhi.n	8006c3e <UpdateWatermark2+0x8ce>
 8006c38:	3210      	adds	r2, #16
 8006c3a:	2a20      	cmp	r2, #32
 8006c3c:	d903      	bls.n	8006c46 <UpdateWatermark2+0x8d6>
 8006c3e:	e9c4 ba01 	strd	fp, sl, [r4, #4]
 8006c42:	3408      	adds	r4, #8
 8006c44:	e704      	b.n	8006a50 <UpdateWatermark2+0x6e0>
 8006c46:	ee3b 2aa5 	vadd.f32	s4, s23, s11
 8006c4a:	ee7c 2a05 	vadd.f32	s5, s24, s10
 8006c4e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8006c5a:	bf4c      	ite	mi
 8006c5c:	eef1 1a42 	vnegmi.f32	s3, s4
 8006c60:	eef0 1a42 	vmovpl.f32	s3, s4
 8006c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c68:	bf4c      	ite	mi
 8006c6a:	eeb1 7a62 	vnegmi.f32	s14, s5
 8006c6e:	eeb0 7a62 	vmovpl.f32	s14, s5
 8006c72:	eef4 1ac7 	vcmpe.f32	s3, s14
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	dd1f      	ble.n	8006cbc <UpdateWatermark2+0x94c>
 8006c7c:	ee35 ca4c 	vsub.f32	s24, s10, s24
 8006c80:	ee8c 7a02 	vdiv.f32	s14, s24, s4
 8006c84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	d501      	bpl.n	8006c92 <UpdateWatermark2+0x922>
 8006c8e:	eeb1 7a47 	vneg.f32	s14, s14
 8006c92:	ee28 7ac7 	vnmul.f32	s14, s17, s14
 8006c96:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006c9a:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006c9e:	ee17 2a90 	vmov	r2, s15
 8006ca2:	442a      	add	r2, r5
 8006ca4:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006ca8:	f844 2c04 	str.w	r2, [r4, #-4]
 8006cac:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8006cb0:	ee16 2a90 	vmov	r2, s13
 8006cb4:	fb07 6202 	mla	r2, r7, r2, r6
 8006cb8:	6022      	str	r2, [r4, #0]
 8006cba:	e6c9      	b.n	8006a50 <UpdateWatermark2+0x6e0>
 8006cbc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	dd04      	ble.n	8006cd0 <UpdateWatermark2+0x960>
 8006cc6:	ee75 baeb 	vsub.f32	s23, s11, s23
 8006cca:	ee8b 7aa2 	vdiv.f32	s14, s23, s5
 8006cce:	e7d9      	b.n	8006c84 <UpdateWatermark2+0x914>
 8006cd0:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8006b00 <UpdateWatermark2+0x790>
 8006cd4:	e7dd      	b.n	8006c92 <UpdateWatermark2+0x922>
 8006cd6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	d55d      	bpl.n	8006d9c <UpdateWatermark2+0xa2c>
 8006ce0:	9a02      	ldr	r2, [sp, #8]
 8006ce2:	b91a      	cbnz	r2, 8006cec <UpdateWatermark2+0x97c>
 8006ce4:	42a0      	cmp	r0, r4
 8006ce6:	d059      	beq.n	8006d9c <UpdateWatermark2+0xa2c>
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d057      	beq.n	8006d9c <UpdateWatermark2+0xa2c>
 8006cec:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8006cf0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006cf4:	eeb0 7a67 	vmov.f32	s14, s15
 8006cf8:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006cfc:	42a0      	cmp	r0, r4
 8006cfe:	ee17 ba10 	vmov	fp, s14
 8006d02:	eeb0 7a66 	vmov.f32	s14, s13
 8006d06:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006d0a:	44ab      	add	fp, r5
 8006d0c:	ee17 aa10 	vmov	sl, s14
 8006d10:	fb07 6a0a 	mla	sl, r7, sl, r6
 8006d14:	d293      	bcs.n	8006c3e <UpdateWatermark2+0x8ce>
 8006d16:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	ebab 0101 	sub.w	r1, fp, r1
 8006d20:	3110      	adds	r1, #16
 8006d22:	2920      	cmp	r1, #32
 8006d24:	ebaa 0202 	sub.w	r2, sl, r2
 8006d28:	d889      	bhi.n	8006c3e <UpdateWatermark2+0x8ce>
 8006d2a:	3210      	adds	r2, #16
 8006d2c:	2a20      	cmp	r2, #32
 8006d2e:	d886      	bhi.n	8006c3e <UpdateWatermark2+0x8ce>
 8006d30:	ee3b 2aa5 	vadd.f32	s4, s23, s11
 8006d34:	ee7c 2a05 	vadd.f32	s5, s24, s10
 8006d38:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8006d44:	bf4c      	ite	mi
 8006d46:	eef1 1a42 	vnegmi.f32	s3, s4
 8006d4a:	eef0 1a42 	vmovpl.f32	s3, s4
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	bf4c      	ite	mi
 8006d54:	eeb1 7a62 	vnegmi.f32	s14, s5
 8006d58:	eeb0 7a62 	vmovpl.f32	s14, s5
 8006d5c:	eef4 1ac7 	vcmpe.f32	s3, s14
 8006d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d64:	dd0d      	ble.n	8006d82 <UpdateWatermark2+0xa12>
 8006d66:	ee35 ca4c 	vsub.f32	s24, s10, s24
 8006d6a:	ee8c 7a02 	vdiv.f32	s14, s24, s4
 8006d6e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d76:	d501      	bpl.n	8006d7c <UpdateWatermark2+0xa0c>
 8006d78:	eeb1 7a47 	vneg.f32	s14, s14
 8006d7c:	ee27 7a43 	vnmul.f32	s14, s14, s6
 8006d80:	e789      	b.n	8006c96 <UpdateWatermark2+0x926>
 8006d82:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8a:	dd04      	ble.n	8006d96 <UpdateWatermark2+0xa26>
 8006d8c:	ee75 baeb 	vsub.f32	s23, s11, s23
 8006d90:	ee8b 7aa2 	vdiv.f32	s14, s23, s5
 8006d94:	e7eb      	b.n	8006d6e <UpdateWatermark2+0x9fe>
 8006d96:	ed1f 7aa6 	vldr	s14, [pc, #-664]	; 8006b00 <UpdateWatermark2+0x790>
 8006d9a:	e7ef      	b.n	8006d7c <UpdateWatermark2+0xa0c>
 8006d9c:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8006da0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006da4:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8006da8:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8006dac:	ee17 2a90 	vmov	r2, s15
 8006db0:	442a      	add	r2, r5
 8006db2:	6062      	str	r2, [r4, #4]
 8006db4:	ee16 2a90 	vmov	r2, s13
 8006db8:	fb07 6202 	mla	r2, r7, r2, r6
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	e740      	b.n	8006c42 <UpdateWatermark2+0x8d2>
 8006dc0:	9904      	ldr	r1, [sp, #16]
 8006dc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006dc6:	f47f ae74 	bne.w	8006ab2 <UpdateWatermark2+0x742>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f43f ae5e 	beq.w	8006a8c <UpdateWatermark2+0x71c>
 8006dd0:	9903      	ldr	r1, [sp, #12]
 8006dd2:	2903      	cmp	r1, #3
 8006dd4:	f47f ae84 	bne.w	8006ae0 <UpdateWatermark2+0x770>
 8006dd8:	e66e      	b.n	8006ab8 <UpdateWatermark2+0x748>
 8006dda:	ee6a 7ac6 	vnmul.f32	s15, s21, s12
 8006dde:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8006de2:	eee4 7a8a 	vfma.f32	s15, s9, s20
 8006de6:	3401      	adds	r4, #1
 8006de8:	eea4 6aaa 	vfma.f32	s12, s9, s21
 8006dec:	ee34 7a27 	vadd.f32	s14, s8, s15
 8006df0:	eef0 4a67 	vmov.f32	s9, s15
 8006df4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006df8:	ee17 1a10 	vmov	r1, s14
 8006dfc:	ee33 7a86 	vadd.f32	s14, s7, s12
 8006e00:	4429      	add	r1, r5
 8006e02:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8006e06:	f8ca 1004 	str.w	r1, [sl, #4]
 8006e0a:	ee17 1a10 	vmov	r1, s14
 8006e0e:	fb07 6101 	mla	r1, r7, r1, r6
 8006e12:	f84a 1f08 	str.w	r1, [sl, #8]!
 8006e16:	e65a      	b.n	8006ace <UpdateWatermark2+0x75e>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f47f ae61 	bne.w	8006ae0 <UpdateWatermark2+0x770>
 8006e1e:	6842      	ldr	r2, [r0, #4]
 8006e20:	ed58 5a03 	vldr	s11, [r8, #-12]
 8006e24:	ed18 5a02 	vldr	s10, [r8, #-8]
 8006e28:	60e2      	str	r2, [r4, #12]
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	6881      	ldr	r1, [r0, #8]
 8006e2e:	f842 1f10 	str.w	r1, [r2, #16]!
 8006e32:	1a12      	subs	r2, r2, r0
 8006e34:	1092      	asrs	r2, r2, #2
 8006e36:	3a02      	subs	r2, #2
 8006e38:	1052      	asrs	r2, r2, #1
 8006e3a:	6002      	str	r2, [r0, #0]
 8006e3c:	f104 0014 	add.w	r0, r4, #20
 8006e40:	eef1 5a65 	vneg.f32	s11, s11
 8006e44:	eeb1 5a45 	vneg.f32	s10, s10
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f1cc 0c00 	rsb	ip, ip, #0
 8006e4e:	4614      	mov	r4, r2
 8006e50:	9a01      	ldr	r2, [sp, #4]
 8006e52:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	eeb0 ca45 	vmov.f32	s24, s10
 8006e5c:	eef0 ba65 	vmov.f32	s23, s11
 8006e60:	eef0 6a63 	vmov.f32	s13, s7
 8006e64:	eef0 7a44 	vmov.f32	s15, s8
 8006e68:	e576      	b.n	8006958 <UpdateWatermark2+0x5e8>
 8006e6a:	9904      	ldr	r1, [sp, #16]
 8006e6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006e70:	f47f ae24 	bne.w	8006abc <UpdateWatermark2+0x74c>
 8006e74:	e7a9      	b.n	8006dca <UpdateWatermark2+0xa5a>
 8006e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	b091      	sub	sp, #68	; 0x44
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	ae0c      	add	r6, sp, #48	; 0x30
 8006e80:	f8d0 b000 	ldr.w	fp, [r0]
 8006e84:	2210      	movs	r2, #16
 8006e86:	2100      	movs	r1, #0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f029 fff5 	bl	8030e78 <memset>
 8006e8e:	7c2f      	ldrb	r7, [r5, #16]
 8006e90:	b9b7      	cbnz	r7, 8006ec0 <UpdateWatermark2+0xb50>
 8006e92:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8006e96:	9306      	str	r3, [sp, #24]
 8006e98:	ab01      	add	r3, sp, #4
 8006e9a:	46b9      	mov	r9, r7
 8006e9c:	46ba      	mov	sl, r7
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	f10d 0820 	add.w	r8, sp, #32
 8006ea4:	f1bb 0f00 	cmp.w	fp, #0
 8006ea8:	dc0d      	bgt.n	8006ec6 <UpdateWatermark2+0xb56>
 8006eaa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006eae:	f105 0414 	add.w	r4, r5, #20
 8006eb2:	e9c5 a901 	strd	sl, r9, [r5, #4]
 8006eb6:	60ef      	str	r7, [r5, #12]
 8006eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	742b      	strb	r3, [r5, #16]
 8006ec0:	b011      	add	sp, #68	; 0x44
 8006ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec6:	9b06      	ldr	r3, [sp, #24]
 8006ec8:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8006ecc:	9306      	str	r3, [sp, #24]
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	d048      	beq.n	8006f64 <UpdateWatermark2+0xbf4>
 8006ed2:	7ae3      	ldrb	r3, [r4, #11]
 8006ed4:	bb6b      	cbnz	r3, 8006f32 <UpdateWatermark2+0xbc2>
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d043      	beq.n	8006f64 <UpdateWatermark2+0xbf4>
 8006edc:	edd4 6a07 	vldr	s13, [r4, #28]
 8006ee0:	ed94 6a08 	vldr	s12, [r4, #32]
 8006ee4:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8006ee8:	eef0 7a46 	vmov.f32	s15, s12
 8006eec:	eeb0 7a66 	vmov.f32	s14, s13
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	dc3a      	bgt.n	8006f6a <UpdateWatermark2+0xbfa>
 8006ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006efc:	ee17 2a90 	vmov	r2, s15
 8006f00:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8006f04:	3201      	adds	r2, #1
 8006f06:	ee17 3a10 	vmov	r3, s14
 8006f0a:	9200      	str	r2, [sp, #0]
 8006f0c:	ee17 2a90 	vmov	r2, s15
 8006f10:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8006f14:	3301      	adds	r3, #1
 8006f16:	ee17 1a90 	vmov	r1, s15
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f012 ffd8 	bl	8019ed0 <EwNewRect>
 8006f20:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8006f24:	f104 0c0c 	add.w	ip, r4, #12
 8006f28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8006f2c:	f04f 0301 	mov.w	r3, #1
 8006f30:	72e3      	strb	r3, [r4, #11]
 8006f32:	7a63      	ldrb	r3, [r4, #9]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf18      	it	ne
 8006f38:	f10a 0a01 	addne.w	sl, sl, #1
 8006f3c:	7aa3      	ldrb	r3, [r4, #10]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf18      	it	ne
 8006f42:	f109 0901 	addne.w	r9, r9, #1
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	340c      	adds	r4, #12
 8006f4a:	441f      	add	r7, r3
 8006f4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f50:	9c07      	ldr	r4, [sp, #28]
 8006f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f013 f873 	bl	801a04a <EwUnionRect>
 8006f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f68:	e79c      	b.n	8006ea4 <UpdateWatermark2+0xb34>
 8006f6a:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006f6e:	eef4 5a66 	vcmp.f32	s11, s13
 8006f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f76:	eef4 5a47 	vcmp.f32	s11, s14
 8006f7a:	bf48      	it	mi
 8006f7c:	eef0 6a65 	vmovmi.f32	s13, s11
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	bfc8      	it	gt
 8006f86:	eeb0 7a65 	vmovgt.f32	s14, s11
 8006f8a:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006f8e:	eef4 5a46 	vcmp.f32	s11, s12
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	eef4 5a67 	vcmp.f32	s11, s15
 8006f9a:	bf48      	it	mi
 8006f9c:	eeb0 6a65 	vmovmi.f32	s12, s11
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	bfc8      	it	gt
 8006fa6:	eef0 7a65 	vmovgt.f32	s15, s11
 8006faa:	3b01      	subs	r3, #1
 8006fac:	3208      	adds	r2, #8
 8006fae:	e79f      	b.n	8006ef0 <UpdateWatermark2+0xb80>
 8006fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb2:	b097      	sub	sp, #92	; 0x5c
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006fba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc0:	f240 631c 	movw	r3, #1564	; 0x61c
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	d038      	beq.n	800703e <UpdateWatermark2+0xcce>
 8006fcc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006fd0:	f1a3 020b 	sub.w	r2, r3, #11
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	2a04      	cmp	r2, #4
 8006fd8:	d931      	bls.n	800703e <UpdateWatermark2+0xcce>
 8006fda:	3b2a      	subs	r3, #42	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d92d      	bls.n	800703e <UpdateWatermark2+0xcce>
 8006fe2:	f5a1 5301 	sub.w	r3, r1, #8256	; 0x2040
 8006fe6:	3b26      	subs	r3, #38	; 0x26
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	f64f 67ff 	movw	r7, #65279	; 0xfeff
 8006fee:	d902      	bls.n	8006ff6 <UpdateWatermark2+0xc86>
 8006ff0:	290a      	cmp	r1, #10
 8006ff2:	bf18      	it	ne
 8006ff4:	460f      	movne	r7, r1
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	6930      	ldr	r0, [r6, #16]
 8006ffa:	f00c f84d 	bl	8013098 <EwFindGlyph>
 8006ffe:	4601      	mov	r1, r0
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 808a 	bne.w	800711a <UpdateWatermark2+0xdaa>
 8007006:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800700a:	429f      	cmp	r7, r3
 800700c:	d01a      	beq.n	8007044 <UpdateWatermark2+0xcd4>
 800700e:	ac09      	add	r4, sp, #36	; 0x24
 8007010:	2d00      	cmp	r5, #0
 8007012:	d038      	beq.n	8007086 <UpdateWatermark2+0xd16>
 8007014:	ab06      	add	r3, sp, #24
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	ab05      	add	r3, sp, #20
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	6970      	ldr	r0, [r6, #20]
 800701e:	9402      	str	r4, [sp, #8]
 8007020:	ab08      	add	r3, sp, #32
 8007022:	aa07      	add	r2, sp, #28
 8007024:	4629      	mov	r1, r5
 8007026:	f010 fd89 	bl	8017b3c <EwFntGetGlyphMetrics>
 800702a:	bb60      	cbnz	r0, 8007086 <UpdateWatermark2+0xd16>
 800702c:	2dad      	cmp	r5, #173	; 0xad
 800702e:	d03d      	beq.n	80070ac <UpdateWatermark2+0xd3c>
 8007030:	2da0      	cmp	r5, #160	; 0xa0
 8007032:	d10f      	bne.n	8007054 <UpdateWatermark2+0xce4>
 8007034:	2120      	movs	r1, #32
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ffba 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800703c:	e006      	b.n	800704c <UpdateWatermark2+0xcdc>
 800703e:	f64f 67ff 	movw	r7, #65279	; 0xfeff
 8007042:	e7d8      	b.n	8006ff6 <UpdateWatermark2+0xc86>
 8007044:	6932      	ldr	r2, [r6, #16]
 8007046:	463b      	mov	r3, r7
 8007048:	f00b fefd 	bl	8012e46 <EwCreateGlyph>
 800704c:	4604      	mov	r4, r0
 800704e:	4620      	mov	r0, r4
 8007050:	b017      	add	sp, #92	; 0x5c
 8007052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007054:	2d20      	cmp	r5, #32
 8007056:	d106      	bne.n	8007066 <UpdateWatermark2+0xcf6>
 8007058:	462a      	mov	r2, r5
 800705a:	69b1      	ldr	r1, [r6, #24]
 800705c:	20b4      	movs	r0, #180	; 0xb4
 800705e:	f011 fe31 	bl	8018cc4 <EwErrorSD>
 8007062:	89b5      	ldrh	r5, [r6, #12]
 8007064:	e7d4      	b.n	8007010 <UpdateWatermark2+0xca0>
 8007066:	89b3      	ldrh	r3, [r6, #12]
 8007068:	42ab      	cmp	r3, r5
 800706a:	d006      	beq.n	800707a <UpdateWatermark2+0xd0a>
 800706c:	69b1      	ldr	r1, [r6, #24]
 800706e:	462a      	mov	r2, r5
 8007070:	20b4      	movs	r0, #180	; 0xb4
 8007072:	f011 fe27 	bl	8018cc4 <EwErrorSD>
 8007076:	89b1      	ldrh	r1, [r6, #12]
 8007078:	e7dd      	b.n	8007036 <UpdateWatermark2+0xcc6>
 800707a:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800707e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8007082:	9009      	str	r0, [sp, #36]	; 0x24
 8007084:	4605      	mov	r5, r0
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <UpdateWatermark2+0xdb0>)
 8007088:	9805      	ldr	r0, [sp, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	1c42      	adds	r2, r0, #1
 800708e:	429a      	cmp	r2, r3
 8007090:	da05      	bge.n	800709e <UpdateWatermark2+0xd2e>
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <UpdateWatermark2+0xdb4>)
 8007094:	9906      	ldr	r1, [sp, #24]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	1c4a      	adds	r2, r1, #1
 800709a:	429a      	cmp	r2, r3
 800709c:	db08      	blt.n	80070b0 <UpdateWatermark2+0xd40>
 800709e:	69b1      	ldr	r1, [r6, #24]
 80070a0:	463a      	mov	r2, r7
 80070a2:	2094      	movs	r0, #148	; 0x94
 80070a4:	f011 fe0e 	bl	8018cc4 <EwErrorSD>
 80070a8:	2400      	movs	r4, #0
 80070aa:	e7d0      	b.n	800704e <UpdateWatermark2+0xcde>
 80070ac:	252d      	movs	r5, #45	; 0x2d
 80070ae:	e7b1      	b.n	8007014 <UpdateWatermark2+0xca4>
 80070b0:	6932      	ldr	r2, [r6, #16]
 80070b2:	463b      	mov	r3, r7
 80070b4:	f00b fec7 	bl	8012e46 <EwCreateGlyph>
 80070b8:	4604      	mov	r4, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d0c7      	beq.n	800704e <UpdateWatermark2+0xcde>
 80070be:	2d00      	cmp	r5, #0
 80070c0:	d0c5      	beq.n	800704e <UpdateWatermark2+0xcde>
 80070c2:	9b07      	ldr	r3, [sp, #28]
 80070c4:	8403      	strh	r3, [r0, #32]
 80070c6:	9b08      	ldr	r3, [sp, #32]
 80070c8:	8443      	strh	r3, [r0, #34]	; 0x22
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	8483      	strh	r3, [r0, #36]	; 0x24
 80070ce:	aa0a      	add	r2, sp, #40	; 0x28
 80070d0:	2182      	movs	r1, #130	; 0x82
 80070d2:	f00c fa1b 	bl	801350c <EwLockGlyphCache>
 80070d6:	b1d0      	cbz	r0, 800710e <UpdateWatermark2+0xd9e>
 80070d8:	6970      	ldr	r0, [r6, #20]
 80070da:	aa0a      	add	r2, sp, #40	; 0x28
 80070dc:	4629      	mov	r1, r5
 80070de:	f010 fdf0 	bl	8017cc2 <EwFntLoadGlyph>
 80070e2:	b978      	cbnz	r0, 8007104 <UpdateWatermark2+0xd94>
 80070e4:	463a      	mov	r2, r7
 80070e6:	69b1      	ldr	r1, [r6, #24]
 80070e8:	20b8      	movs	r0, #184	; 0xb8
 80070ea:	f011 fdeb 	bl	8018cc4 <EwErrorSD>
 80070ee:	a90a      	add	r1, sp, #40	; 0x28
 80070f0:	4620      	mov	r0, r4
 80070f2:	f00b fffc 	bl	80130ee <EwUnlockGlyphCache>
 80070f6:	4620      	mov	r0, r4
 80070f8:	f00b fff0 	bl	80130dc <EwFreeGlyph>
 80070fc:	4620      	mov	r0, r4
 80070fe:	f00b fff1 	bl	80130e4 <EwDiscardGlyph>
 8007102:	e7d1      	b.n	80070a8 <UpdateWatermark2+0xd38>
 8007104:	a90a      	add	r1, sp, #40	; 0x28
 8007106:	4620      	mov	r0, r4
 8007108:	f00b fff1 	bl	80130ee <EwUnlockGlyphCache>
 800710c:	e79f      	b.n	800704e <UpdateWatermark2+0xcde>
 800710e:	69b1      	ldr	r1, [r6, #24]
 8007110:	463a      	mov	r2, r7
 8007112:	20b9      	movs	r0, #185	; 0xb9
 8007114:	f011 fdd6 	bl	8018cc4 <EwErrorSD>
 8007118:	e799      	b.n	800704e <UpdateWatermark2+0xcde>
 800711a:	4604      	mov	r4, r0
 800711c:	e797      	b.n	800704e <UpdateWatermark2+0xcde>
 800711e:	bf00      	nop
 8007120:	2000001c 	.word	0x2000001c
 8007124:	20000020 	.word	0x20000020
 8007128:	b510      	push	{r4, lr}
 800712a:	b158      	cbz	r0, 8007144 <UpdateWatermark2+0xdd4>
 800712c:	4c08      	ldr	r4, [pc, #32]	; (8007150 <UpdateWatermark2+0xde0>)
 800712e:	4602      	mov	r2, r0
 8007130:	4610      	mov	r0, r2
 8007132:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007136:	f1a1 0309 	sub.w	r3, r1, #9
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b17      	cmp	r3, #23
 800713e:	d902      	bls.n	8007146 <UpdateWatermark2+0xdd6>
 8007140:	292c      	cmp	r1, #44	; 0x2c
 8007142:	d0f5      	beq.n	8007130 <UpdateWatermark2+0xdc0>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	fa24 f303 	lsr.w	r3, r4, r3
 800714a:	07db      	lsls	r3, r3, #31
 800714c:	d4f0      	bmi.n	8007130 <UpdateWatermark2+0xdc0>
 800714e:	e7f9      	b.n	8007144 <UpdateWatermark2+0xdd4>
 8007150:	0080001b 	.word	0x0080001b
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	6800      	ldr	r0, [r0, #0]
 800715a:	460d      	mov	r5, r1
 800715c:	f7ff ffe4 	bl	8007128 <UpdateWatermark2+0xdb8>
 8007160:	b178      	cbz	r0, 8007182 <UpdateWatermark2+0xe12>
 8007162:	8803      	ldrh	r3, [r0, #0]
 8007164:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007168:	2a01      	cmp	r2, #1
 800716a:	d80b      	bhi.n	8007184 <UpdateWatermark2+0xe14>
 800716c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007170:	424b      	negs	r3, r1
 8007172:	414b      	adcs	r3, r1
 8007174:	1c82      	adds	r2, r0, #2
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	4282      	cmp	r2, r0
 800717a:	6022      	str	r2, [r4, #0]
 800717c:	bf94      	ite	ls
 800717e:	2000      	movls	r0, #0
 8007180:	2001      	movhi	r0, #1
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	4602      	mov	r2, r0
 8007186:	e7f7      	b.n	8007178 <UpdateWatermark2+0xe08>
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4604      	mov	r4, r0
 800718c:	ed2d 8b02 	vpush	{d8}
 8007190:	6800      	ldr	r0, [r0, #0]
 8007192:	460d      	mov	r5, r1
 8007194:	f7ff ffc8 	bl	8007128 <UpdateWatermark2+0xdb8>
 8007198:	2800      	cmp	r0, #0
 800719a:	f000 808d 	beq.w	80072b8 <UpdateWatermark2+0xf48>
 800719e:	8803      	ldrh	r3, [r0, #0]
 80071a0:	2b2b      	cmp	r3, #43	; 0x2b
 80071a2:	d001      	beq.n	80071a8 <UpdateWatermark2+0xe38>
 80071a4:	2b2d      	cmp	r3, #45	; 0x2d
 80071a6:	d137      	bne.n	8007218 <UpdateWatermark2+0xea8>
 80071a8:	2b2d      	cmp	r3, #45	; 0x2d
 80071aa:	f100 0202 	add.w	r2, r0, #2
 80071ae:	bf0c      	ite	eq
 80071b0:	f04f 37ff 	moveq.w	r7, #4294967295
 80071b4:	2701      	movne	r7, #1
 80071b6:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80072bc <UpdateWatermark2+0xf4c>
 80071ba:	2300      	movs	r3, #0
 80071bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80071c0:	e008      	b.n	80071d4 <UpdateWatermark2+0xe64>
 80071c2:	ee07 6a90 	vmov	s15, r6
 80071c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ca:	3301      	adds	r3, #1
 80071cc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80071d0:	eeb0 8a67 	vmov.f32	s16, s15
 80071d4:	4611      	mov	r1, r2
 80071d6:	f832 cb02 	ldrh.w	ip, [r2], #2
 80071da:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
 80071de:	fa1f fe86 	uxth.w	lr, r6
 80071e2:	f1be 0f09 	cmp.w	lr, #9
 80071e6:	d9ec      	bls.n	80071c2 <UpdateWatermark2+0xe52>
 80071e8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80072c0 <UpdateWatermark2+0xf50>
 80071ec:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 80071f0:	bf18      	it	ne
 80071f2:	460a      	movne	r2, r1
 80071f4:	eef0 6a47 	vmov.f32	s13, s14
 80071f8:	4616      	mov	r6, r2
 80071fa:	f832 1b02 	ldrh.w	r1, [r2], #2
 80071fe:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
 8007202:	fa1f fe8c 	uxth.w	lr, ip
 8007206:	f1be 0f09 	cmp.w	lr, #9
 800720a:	d908      	bls.n	800721e <UpdateWatermark2+0xeae>
 800720c:	b98b      	cbnz	r3, 8007232 <UpdateWatermark2+0xec2>
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	ecbd 8b02 	vpop	{d8}
 8007214:	4618      	mov	r0, r3
 8007216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007218:	4602      	mov	r2, r0
 800721a:	2701      	movs	r7, #1
 800721c:	e7cb      	b.n	80071b6 <UpdateWatermark2+0xe46>
 800721e:	ee07 ca90 	vmov	s15, ip
 8007222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007226:	3301      	adds	r3, #1
 8007228:	eea7 8a87 	vfma.f32	s16, s15, s14
 800722c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007230:	e7e2      	b.n	80071f8 <UpdateWatermark2+0xe88>
 8007232:	f021 0120 	bic.w	r1, r1, #32
 8007236:	2945      	cmp	r1, #69	; 0x45
 8007238:	d131      	bne.n	800729e <UpdateWatermark2+0xf2e>
 800723a:	8873      	ldrh	r3, [r6, #2]
 800723c:	2b2b      	cmp	r3, #43	; 0x2b
 800723e:	d001      	beq.n	8007244 <UpdateWatermark2+0xed4>
 8007240:	2b2d      	cmp	r3, #45	; 0x2d
 8007242:	d135      	bne.n	80072b0 <UpdateWatermark2+0xf40>
 8007244:	2b2d      	cmp	r3, #45	; 0x2d
 8007246:	f106 0104 	add.w	r1, r6, #4
 800724a:	bf0c      	ite	eq
 800724c:	f04f 3cff 	moveq.w	ip, #4294967295
 8007250:	f04f 0c01 	movne.w	ip, #1
 8007254:	eddf 0a19 	vldr	s1, [pc, #100]	; 80072bc <UpdateWatermark2+0xf4c>
 8007258:	2300      	movs	r3, #0
 800725a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800725e:	e008      	b.n	8007272 <UpdateWatermark2+0xf02>
 8007260:	ee07 2a90 	vmov	s15, r2
 8007264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007268:	3301      	adds	r3, #1
 800726a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800726e:	eef0 0a67 	vmov.f32	s1, s15
 8007272:	460e      	mov	r6, r1
 8007274:	f831 2b02 	ldrh.w	r2, [r1], #2
 8007278:	3a30      	subs	r2, #48	; 0x30
 800727a:	fa1f fe82 	uxth.w	lr, r2
 800727e:	f1be 0f09 	cmp.w	lr, #9
 8007282:	d9ed      	bls.n	8007260 <UpdateWatermark2+0xef0>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0c2      	beq.n	800720e <UpdateWatermark2+0xe9e>
 8007288:	f1bc 3fff 	cmp.w	ip, #4294967295
 800728c:	bf08      	it	eq
 800728e:	eef1 0a60 	vnegeq.f32	s1, s1
 8007292:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8007296:	f022 fac9 	bl	802982c <EwMathPow>
 800729a:	ee28 8a00 	vmul.f32	s16, s16, s0
 800729e:	3701      	adds	r7, #1
 80072a0:	bf08      	it	eq
 80072a2:	eeb1 8a48 	vnegeq.f32	s16, s16
 80072a6:	6026      	str	r6, [r4, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	ed85 8a00 	vstr	s16, [r5]
 80072ae:	e7af      	b.n	8007210 <UpdateWatermark2+0xea0>
 80072b0:	1cb1      	adds	r1, r6, #2
 80072b2:	f04f 0c01 	mov.w	ip, #1
 80072b6:	e7cd      	b.n	8007254 <UpdateWatermark2+0xee4>
 80072b8:	4603      	mov	r3, r0
 80072ba:	e7a9      	b.n	8007210 <UpdateWatermark2+0xea0>
 80072bc:	00000000 	.word	0x00000000
 80072c0:	3dcccccd 	.word	0x3dcccccd

080072c4 <UpdateWatermark1>:
 80072c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c6:	4d17      	ldr	r5, [pc, #92]	; (8007324 <UpdateWatermark1+0x60>)
 80072c8:	ab02      	add	r3, sp, #8
 80072ca:	4614      	mov	r4, r2
 80072cc:	e903 0003 	stmdb	r3, {r0, r1}
 80072d0:	f022 fa74 	bl	80297bc <EwGetTicks>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	4283      	cmp	r3, r0
 80072d8:	bf38      	it	cc
 80072da:	f04f 34ff 	movcc.w	r4, #4294967295
 80072de:	68eb      	ldr	r3, [r5, #12]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	60ea      	str	r2, [r5, #12]
 80072e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072e8:	4354      	muls	r4, r2
 80072ea:	42a3      	cmp	r3, r4
 80072ec:	dd18      	ble.n	8007320 <UpdateWatermark1+0x5c>
 80072ee:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80072f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80072f6:	f022 fa9b 	bl	8029830 <EwMathRandInt32>
 80072fa:	f64e 2460 	movw	r4, #60000	; 0xea60
 80072fe:	4284      	cmp	r4, r0
 8007300:	bfa8      	it	ge
 8007302:	4604      	movge	r4, r0
 8007304:	f022 fa5a 	bl	80297bc <EwGetTicks>
 8007308:	4b07      	ldr	r3, [pc, #28]	; (8007328 <UpdateWatermark1+0x64>)
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <UpdateWatermark1+0x68>)
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8007312:	bfac      	ite	ge
 8007314:	1900      	addge	r0, r0, r4
 8007316:	f500 60fa 	addlt.w	r0, r0, #2000	; 0x7d0
 800731a:	2300      	movs	r3, #0
 800731c:	6028      	str	r0, [r5, #0]
 800731e:	60eb      	str	r3, [r5, #12]
 8007320:	b003      	add	sp, #12
 8007322:	bd30      	pop	{r4, r5, pc}
 8007324:	200000f4 	.word	0x200000f4
 8007328:	20000000 	.word	0x20000000
 800732c:	08006371 	.word	0x08006371
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	b0b1      	sub	sp, #196	; 0xc4
 8007338:	b178      	cbz	r0, 800735a <UpdateWatermark1+0x96>
 800733a:	2900      	cmp	r1, #0
 800733c:	f2c0 81e9 	blt.w	8007712 <UpdateWatermark1+0x44e>
 8007340:	6943      	ldr	r3, [r0, #20]
 8007342:	428b      	cmp	r3, r1
 8007344:	f340 81e5 	ble.w	8007712 <UpdateWatermark1+0x44e>
 8007348:	6983      	ldr	r3, [r0, #24]
 800734a:	b153      	cbz	r3, 8007362 <UpdateWatermark1+0x9e>
 800734c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	dc07      	bgt.n	8007366 <UpdateWatermark1+0xa2>
 8007356:	2500      	movs	r5, #0
 8007358:	462c      	mov	r4, r5
 800735a:	4620      	mov	r0, r4
 800735c:	b031      	add	sp, #196	; 0xc4
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	460b      	mov	r3, r1
 8007364:	e7f4      	b.n	8007350 <UpdateWatermark1+0x8c>
 8007366:	221c      	movs	r2, #28
 8007368:	4353      	muls	r3, r2
 800736a:	930c      	str	r3, [sp, #48]	; 0x30
 800736c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800736e:	6a23      	ldr	r3, [r4, #32]
 8007370:	930d      	str	r3, [sp, #52]	; 0x34
 8007372:	4413      	add	r3, r2
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007378:	589d      	ldr	r5, [r3, r2]
 800737a:	b9a5      	cbnz	r5, 80073a6 <UpdateWatermark1+0xe2>
 800737c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800737e:	950a      	str	r5, [sp, #40]	; 0x28
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	4293      	cmp	r3, r2
 8007384:	da18      	bge.n	80073b8 <UpdateWatermark1+0xf4>
 8007386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007388:	980a      	ldr	r0, [sp, #40]	; 0x28
 800738a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800738e:	b97b      	cbnz	r3, 80073b0 <UpdateWatermark1+0xec>
 8007390:	69e0      	ldr	r0, [r4, #28]
 8007392:	2800      	cmp	r0, #0
 8007394:	d043      	beq.n	800741e <UpdateWatermark1+0x15a>
 8007396:	f010 f992 	bl	80176be <EwBmpOpen>
 800739a:	4682      	mov	sl, r0
 800739c:	b9a0      	cbnz	r0, 80073c8 <UpdateWatermark1+0x104>
 800739e:	4602      	mov	r2, r0
 80073a0:	69e1      	ldr	r1, [r4, #28]
 80073a2:	2084      	movs	r0, #132	; 0x84
 80073a4:	e00d      	b.n	80073c2 <UpdateWatermark1+0xfe>
 80073a6:	4baa      	ldr	r3, [pc, #680]	; (8007650 <UpdateWatermark1+0x38c>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	632b      	str	r3, [r5, #48]	; 0x30
 80073ac:	9d07      	ldr	r5, [sp, #28]
 80073ae:	e7d3      	b.n	8007358 <UpdateWatermark1+0x94>
 80073b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b2:	3301      	adds	r3, #1
 80073b4:	930a      	str	r3, [sp, #40]	; 0x28
 80073b6:	e7e3      	b.n	8007380 <UpdateWatermark1+0xbc>
 80073b8:	d1ea      	bne.n	8007390 <UpdateWatermark1+0xcc>
 80073ba:	460a      	mov	r2, r1
 80073bc:	69e1      	ldr	r1, [r4, #28]
 80073be:	f44f 709f 	mov.w	r0, #318	; 0x13e
 80073c2:	f011 fc87 	bl	8018cd4 <EwErrorPD>
 80073c6:	e7c7      	b.n	8007358 <UpdateWatermark1+0x94>
 80073c8:	aa11      	add	r2, sp, #68	; 0x44
 80073ca:	2100      	movs	r1, #0
 80073cc:	f010 fa0c 	bl	80177e8 <EwBmpGetFrameMemory>
 80073d0:	1e03      	subs	r3, r0, #0
 80073d2:	bf18      	it	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	9308      	str	r3, [sp, #32]
 80073d8:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	f8d4 b000 	ldr.w	fp, [r4]
 80073e4:	6892      	ldr	r2, [r2, #8]
 80073e6:	9f07      	ldr	r7, [sp, #28]
 80073e8:	f04f 0e1c 	mov.w	lr, #28
 80073ec:	fb0e 9303 	mla	r3, lr, r3, r9
 80073f0:	f1a3 0e1c 	sub.w	lr, r3, #28
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4616      	mov	r6, r2
 80073fa:	469c      	mov	ip, r3
 80073fc:	45b9      	cmp	r9, r7
 80073fe:	d20b      	bcs.n	8007418 <UpdateWatermark1+0x154>
 8007400:	9808      	ldr	r0, [sp, #32]
 8007402:	b920      	cbnz	r0, 800740e <UpdateWatermark1+0x14a>
 8007404:	687d      	ldr	r5, [r7, #4]
 8007406:	f857 0c18 	ldr.w	r0, [r7, #-24]
 800740a:	4285      	cmp	r5, r0
 800740c:	dc0a      	bgt.n	8007424 <UpdateWatermark1+0x160>
 800740e:	68bd      	ldr	r5, [r7, #8]
 8007410:	f857 0c14 	ldr.w	r0, [r7, #-20]
 8007414:	4285      	cmp	r5, r0
 8007416:	dc05      	bgt.n	8007424 <UpdateWatermark1+0x160>
 8007418:	9807      	ldr	r0, [sp, #28]
 800741a:	9006      	str	r0, [sp, #24]
 800741c:	e025      	b.n	800746a <UpdateWatermark1+0x1a6>
 800741e:	4682      	mov	sl, r0
 8007420:	9008      	str	r0, [sp, #32]
 8007422:	e7d9      	b.n	80073d8 <UpdateWatermark1+0x114>
 8007424:	f857 5c18 	ldr.w	r5, [r7, #-24]
 8007428:	f857 0c14 	ldr.w	r0, [r7, #-20]
 800742c:	42ab      	cmp	r3, r5
 800742e:	bfa8      	it	ge
 8007430:	462b      	movge	r3, r5
 8007432:	4282      	cmp	r2, r0
 8007434:	bfa8      	it	ge
 8007436:	4602      	movge	r2, r0
 8007438:	45ac      	cmp	ip, r5
 800743a:	bfb8      	it	lt
 800743c:	46ac      	movlt	ip, r5
 800743e:	4286      	cmp	r6, r0
 8007440:	f1a7 071c 	sub.w	r7, r7, #28
 8007444:	bfb8      	it	lt
 8007446:	4606      	movlt	r6, r0
 8007448:	e7d8      	b.n	80073fc <UpdateWatermark1+0x138>
 800744a:	9806      	ldr	r0, [sp, #24]
 800744c:	301c      	adds	r0, #28
 800744e:	9006      	str	r0, [sp, #24]
 8007450:	6840      	ldr	r0, [r0, #4]
 8007452:	4283      	cmp	r3, r0
 8007454:	bfa8      	it	ge
 8007456:	4603      	movge	r3, r0
 8007458:	42aa      	cmp	r2, r5
 800745a:	bfa8      	it	ge
 800745c:	462a      	movge	r2, r5
 800745e:	4584      	cmp	ip, r0
 8007460:	bfb8      	it	lt
 8007462:	4684      	movlt	ip, r0
 8007464:	42ae      	cmp	r6, r5
 8007466:	bfb8      	it	lt
 8007468:	462e      	movlt	r6, r5
 800746a:	9806      	ldr	r0, [sp, #24]
 800746c:	4586      	cmp	lr, r0
 800746e:	d90e      	bls.n	800748e <UpdateWatermark1+0x1ca>
 8007470:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007472:	9808      	ldr	r0, [sp, #32]
 8007474:	b938      	cbnz	r0, 8007486 <UpdateWatermark1+0x1c2>
 8007476:	9806      	ldr	r0, [sp, #24]
 8007478:	6840      	ldr	r0, [r0, #4]
 800747a:	9009      	str	r0, [sp, #36]	; 0x24
 800747c:	9806      	ldr	r0, [sp, #24]
 800747e:	6a01      	ldr	r1, [r0, #32]
 8007480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007482:	4288      	cmp	r0, r1
 8007484:	dbe1      	blt.n	800744a <UpdateWatermark1+0x186>
 8007486:	9806      	ldr	r0, [sp, #24]
 8007488:	6880      	ldr	r0, [r0, #8]
 800748a:	42a8      	cmp	r0, r5
 800748c:	dbdd      	blt.n	800744a <UpdateWatermark1+0x186>
 800748e:	2b01      	cmp	r3, #1
 8007490:	d142      	bne.n	8007518 <UpdateWatermark1+0x254>
 8007492:	1e51      	subs	r1, r2, #1
 8007494:	4248      	negs	r0, r1
 8007496:	4148      	adcs	r0, r1
 8007498:	9009      	str	r0, [sp, #36]	; 0x24
 800749a:	6860      	ldr	r0, [r4, #4]
 800749c:	4403      	add	r3, r0
 800749e:	eb03 080c 	add.w	r8, r3, ip
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	441a      	add	r2, r3
 80074a6:	4416      	add	r6, r2
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	d036      	beq.n	800751c <UpdateWatermark1+0x258>
 80074ae:	69e3      	ldr	r3, [r4, #28]
 80074b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b2:	eba7 0909 	sub.w	r9, r7, r9
 80074b6:	4b67      	ldr	r3, [pc, #412]	; (8007654 <UpdateWatermark1+0x390>)
 80074b8:	ea4f 09a9 	mov.w	r9, r9, asr #2
 80074bc:	fb03 f909 	mul.w	r9, r3, r9
 80074c0:	aa11      	add	r2, sp, #68	; 0x44
 80074c2:	4649      	mov	r1, r9
 80074c4:	4650      	mov	r0, sl
 80074c6:	f010 f98f 	bl	80177e8 <EwBmpGetFrameMemory>
 80074ca:	9008      	str	r0, [sp, #32]
 80074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80074d4:	4623      	mov	r3, r4
 80074d6:	4632      	mov	r2, r6
 80074d8:	4641      	mov	r1, r8
 80074da:	4658      	mov	r0, fp
 80074dc:	f00b fbc2 	bl	8012c64 <EwFindSurface>
 80074e0:	4605      	mov	r5, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f040 8098 	bne.w	8007618 <UpdateWatermark1+0x354>
 80074e8:	9b08      	ldr	r3, [sp, #32]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d165      	bne.n	80075ba <UpdateWatermark1+0x2f6>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80074f6:	4623      	mov	r3, r4
 80074f8:	4632      	mov	r2, r6
 80074fa:	4641      	mov	r1, r8
 80074fc:	4658      	mov	r0, fp
 80074fe:	f00b f999 	bl	8012834 <EwCreateSurface>
 8007502:	4605      	mov	r5, r0
 8007504:	bb58      	cbnz	r0, 800755e <UpdateWatermark1+0x29a>
 8007506:	f1bb 0f00 	cmp.w	fp, #0
 800750a:	d10b      	bne.n	8007524 <UpdateWatermark1+0x260>
 800750c:	4632      	mov	r2, r6
 800750e:	4641      	mov	r1, r8
 8007510:	206f      	movs	r0, #111	; 0x6f
 8007512:	f011 fbe7 	bl	8018ce4 <EwErrorDD>
 8007516:	e016      	b.n	8007546 <UpdateWatermark1+0x282>
 8007518:	2000      	movs	r0, #0
 800751a:	e7bd      	b.n	8007498 <UpdateWatermark1+0x1d4>
 800751c:	46d1      	mov	r9, sl
 800751e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007522:	e7d3      	b.n	80074cc <UpdateWatermark1+0x208>
 8007524:	f1bb 0f02 	cmp.w	fp, #2
 8007528:	d006      	beq.n	8007538 <UpdateWatermark1+0x274>
 800752a:	f1bb 0f01 	cmp.w	fp, #1
 800752e:	d107      	bne.n	8007540 <UpdateWatermark1+0x27c>
 8007530:	4632      	mov	r2, r6
 8007532:	4641      	mov	r1, r8
 8007534:	2071      	movs	r0, #113	; 0x71
 8007536:	e7ec      	b.n	8007512 <UpdateWatermark1+0x24e>
 8007538:	4632      	mov	r2, r6
 800753a:	4641      	mov	r1, r8
 800753c:	2070      	movs	r0, #112	; 0x70
 800753e:	e7e8      	b.n	8007512 <UpdateWatermark1+0x24e>
 8007540:	f1bb 0f03 	cmp.w	fp, #3
 8007544:	d007      	beq.n	8007556 <UpdateWatermark1+0x292>
 8007546:	f1ba 0f00 	cmp.w	sl, #0
 800754a:	f43f af04 	beq.w	8007356 <UpdateWatermark1+0x92>
 800754e:	4650      	mov	r0, sl
 8007550:	f010 f902 	bl	8017758 <EwBmpClose>
 8007554:	e700      	b.n	8007358 <UpdateWatermark1+0x94>
 8007556:	4632      	mov	r2, r6
 8007558:	4641      	mov	r1, r8
 800755a:	2072      	movs	r0, #114	; 0x72
 800755c:	e7d9      	b.n	8007512 <UpdateWatermark1+0x24e>
 800755e:	f1ba 0f00 	cmp.w	sl, #0
 8007562:	d055      	beq.n	8007610 <UpdateWatermark1+0x34c>
 8007564:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007568:	f1d3 0800 	rsbs	r8, r3, #0
 800756c:	eb48 0803 	adc.w	r8, r8, r3
 8007570:	2301      	movs	r3, #1
 8007572:	930b      	str	r3, [sp, #44]	; 0x2c
 8007574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007578:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800757c:	463b      	mov	r3, r7
 800757e:	9a06      	ldr	r2, [sp, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d24e      	bcs.n	8007622 <UpdateWatermark1+0x35e>
 8007584:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007588:	589b      	ldr	r3, [r3, r2]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f aee3 	beq.w	8007356 <UpdateWatermark1+0x92>
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 810c 	beq.w	80077b0 <UpdateWatermark1+0x4ec>
 8007598:	f1ba 0f00 	cmp.w	sl, #0
 800759c:	f040 8102 	bne.w	80077a4 <UpdateWatermark1+0x4e0>
 80075a0:	4b2b      	ldr	r3, [pc, #172]	; (8007650 <UpdateWatermark1+0x38c>)
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	b11b      	cbz	r3, 80075ae <UpdateWatermark1+0x2ea>
 80075a6:	f1bb 0f00 	cmp.w	fp, #0
 80075aa:	f000 8101 	beq.w	80077b0 <UpdateWatermark1+0x4ec>
 80075ae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff f852 	bl	800665c <UpdateWatermark2+0x2ec>
 80075b8:	e0fa      	b.n	80077b0 <UpdateWatermark1+0x4ec>
 80075ba:	ab11      	add	r3, sp, #68	; 0x44
 80075bc:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80075c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	4632      	mov	r2, r6
 80075c6:	4623      	mov	r3, r4
 80075c8:	4641      	mov	r1, r8
 80075ca:	4658      	mov	r0, fp
 80075cc:	f00b fac6 	bl	8012b5c <EwCreateConstSurface>
 80075d0:	4605      	mov	r5, r0
 80075d2:	bb08      	cbnz	r0, 8007618 <UpdateWatermark1+0x354>
 80075d4:	f1bb 0f00 	cmp.w	fp, #0
 80075d8:	d105      	bne.n	80075e6 <UpdateWatermark1+0x322>
 80075da:	4632      	mov	r2, r6
 80075dc:	4641      	mov	r1, r8
 80075de:	2077      	movs	r0, #119	; 0x77
 80075e0:	f011 fb80 	bl	8018ce4 <EwErrorDD>
 80075e4:	e7b3      	b.n	800754e <UpdateWatermark1+0x28a>
 80075e6:	f1bb 0f02 	cmp.w	fp, #2
 80075ea:	d006      	beq.n	80075fa <UpdateWatermark1+0x336>
 80075ec:	f1bb 0f01 	cmp.w	fp, #1
 80075f0:	d107      	bne.n	8007602 <UpdateWatermark1+0x33e>
 80075f2:	4632      	mov	r2, r6
 80075f4:	4641      	mov	r1, r8
 80075f6:	2079      	movs	r0, #121	; 0x79
 80075f8:	e7f2      	b.n	80075e0 <UpdateWatermark1+0x31c>
 80075fa:	4632      	mov	r2, r6
 80075fc:	4641      	mov	r1, r8
 80075fe:	2078      	movs	r0, #120	; 0x78
 8007600:	e7ee      	b.n	80075e0 <UpdateWatermark1+0x31c>
 8007602:	f1bb 0f03 	cmp.w	fp, #3
 8007606:	d1a2      	bne.n	800754e <UpdateWatermark1+0x28a>
 8007608:	4632      	mov	r2, r6
 800760a:	4641      	mov	r1, r8
 800760c:	207a      	movs	r0, #122	; 0x7a
 800760e:	e7e7      	b.n	80075e0 <UpdateWatermark1+0x31c>
 8007610:	46d0      	mov	r8, sl
 8007612:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007616:	e7ad      	b.n	8007574 <UpdateWatermark1+0x2b0>
 8007618:	f04f 0800 	mov.w	r8, #0
 800761c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8007620:	e7a8      	b.n	8007574 <UpdateWatermark1+0x2b0>
 8007622:	f843 5b1c 	str.w	r5, [r3], #28
 8007626:	e7aa      	b.n	800757e <UpdateWatermark1+0x2ba>
 8007628:	f1bb 0f01 	cmp.w	fp, #1
 800762c:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
 8007630:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007634:	d110      	bne.n	8007658 <UpdateWatermark1+0x394>
 8007636:	ae18      	add	r6, sp, #96	; 0x60
 8007638:	9604      	str	r6, [sp, #16]
 800763a:	f04f 090a 	mov.w	r9, #10
 800763e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8007642:	e9cd 6902 	strd	r6, r9, [sp, #8]
 8007646:	2600      	movs	r6, #0
 8007648:	e9cd 0600 	strd	r0, r6, [sp]
 800764c:	e017      	b.n	800767e <UpdateWatermark1+0x3ba>
 800764e:	bf00      	nop
 8007650:	200000f4 	.word	0x200000f4
 8007654:	b6db6db7 	.word	0xb6db6db7
 8007658:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800765a:	2e00      	cmp	r6, #0
 800765c:	d051      	beq.n	8007702 <UpdateWatermark1+0x43e>
 800765e:	f1bb 0f03 	cmp.w	fp, #3
 8007662:	d14e      	bne.n	8007702 <UpdateWatermark1+0x43e>
 8007664:	ae18      	add	r6, sp, #96	; 0x60
 8007666:	9604      	str	r6, [sp, #16]
 8007668:	f04f 0e02 	mov.w	lr, #2
 800766c:	2600      	movs	r6, #0
 800766e:	e9cd 6e02 	strd	r6, lr, [sp, #8]
 8007672:	3002      	adds	r0, #2
 8007674:	9601      	str	r6, [sp, #4]
 8007676:	9000      	str	r0, [sp, #0]
 8007678:	3302      	adds	r3, #2
 800767a:	3a01      	subs	r2, #1
 800767c:	3901      	subs	r1, #1
 800767e:	4628      	mov	r0, r5
 8007680:	f00b fe9a 	bl	80133b8 <EwLockSurface>
 8007684:	4606      	mov	r6, r0
 8007686:	b920      	cbnz	r0, 8007692 <UpdateWatermark1+0x3ce>
 8007688:	4602      	mov	r2, r0
 800768a:	4629      	mov	r1, r5
 800768c:	2088      	movs	r0, #136	; 0x88
 800768e:	f011 fb21 	bl	8018cd4 <EwErrorPD>
 8007692:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
 8007696:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800769a:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 800769e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80076a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80076a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80076aa:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80076ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80076b2:	b1d6      	cbz	r6, 80076ea <UpdateWatermark1+0x426>
 80076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b6:	b143      	cbz	r3, 80076ca <UpdateWatermark1+0x406>
 80076b8:	f1bb 0f03 	cmp.w	fp, #3
 80076bc:	d105      	bne.n	80076ca <UpdateWatermark1+0x406>
 80076be:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 80076c2:	441a      	add	r2, r3
 80076c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80076c6:	4413      	add	r3, r2
 80076c8:	9324      	str	r3, [sp, #144]	; 0x90
 80076ca:	f1b8 0f00 	cmp.w	r8, #0
 80076ce:	d022      	beq.n	8007716 <UpdateWatermark1+0x452>
 80076d0:	a924      	add	r1, sp, #144	; 0x90
 80076d2:	4650      	mov	r0, sl
 80076d4:	f010 f970 	bl	80179b8 <EwBmpLoadClut>
 80076d8:	4606      	mov	r6, r0
 80076da:	b9e0      	cbnz	r0, 8007716 <UpdateWatermark1+0x452>
 80076dc:	4602      	mov	r2, r0
 80076de:	69e1      	ldr	r1, [r4, #28]
 80076e0:	208e      	movs	r0, #142	; 0x8e
 80076e2:	f011 faf7 	bl	8018cd4 <EwErrorPD>
 80076e6:	f04f 0800 	mov.w	r8, #0
 80076ea:	a918      	add	r1, sp, #96	; 0x60
 80076ec:	4628      	mov	r0, r5
 80076ee:	f00b fb13 	bl	8012d18 <EwUnlockSurface>
 80076f2:	b926      	cbnz	r6, 80076fe <UpdateWatermark1+0x43a>
 80076f4:	69e1      	ldr	r1, [r4, #28]
 80076f6:	4632      	mov	r2, r6
 80076f8:	2087      	movs	r0, #135	; 0x87
 80076fa:	f011 faeb 	bl	8018cd4 <EwErrorPD>
 80076fe:	371c      	adds	r7, #28
 8007700:	e056      	b.n	80077b0 <UpdateWatermark1+0x4ec>
 8007702:	ae18      	add	r6, sp, #96	; 0x60
 8007704:	9604      	str	r6, [sp, #16]
 8007706:	f04f 0c02 	mov.w	ip, #2
 800770a:	2600      	movs	r6, #0
 800770c:	e9cd 6c02 	strd	r6, ip, [sp, #8]
 8007710:	e79a      	b.n	8007648 <UpdateWatermark1+0x384>
 8007712:	2400      	movs	r4, #0
 8007714:	e621      	b.n	800735a <UpdateWatermark1+0x96>
 8007716:	6a21      	ldr	r1, [r4, #32]
 8007718:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <UpdateWatermark1+0x514>)
 800771a:	1a79      	subs	r1, r7, r1
 800771c:	1089      	asrs	r1, r1, #2
 800771e:	aa24      	add	r2, sp, #144	; 0x90
 8007720:	4359      	muls	r1, r3
 8007722:	4650      	mov	r0, sl
 8007724:	f010 f8a4 	bl	8017870 <EwBmpLoadFrame>
 8007728:	4606      	mov	r6, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d0db      	beq.n	80076e6 <UpdateWatermark1+0x422>
 800772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0d8      	beq.n	80076e6 <UpdateWatermark1+0x422>
 8007734:	f1bb 0f03 	cmp.w	fp, #3
 8007738:	d1d5      	bne.n	80076e6 <UpdateWatermark1+0x422>
 800773a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800773c:	9208      	str	r2, [sp, #32]
 800773e:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 8007742:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007744:	f9bd 9080 	ldrsh.w	r9, [sp, #128]	; 0x80
 8007748:	920a      	str	r2, [sp, #40]	; 0x28
 800774a:	9a08      	ldr	r2, [sp, #32]
 800774c:	930f      	str	r3, [sp, #60]	; 0x3c
 800774e:	eba3 0802 	sub.w	r8, r3, r2
 8007752:	f1a9 0202 	sub.w	r2, r9, #2
 8007756:	0052      	lsls	r2, r2, #1
 8007758:	4619      	mov	r1, r3
 800775a:	4640      	mov	r0, r8
 800775c:	920e      	str	r2, [sp, #56]	; 0x38
 800775e:	f022 f837 	bl	80297d0 <EwCopy>
 8007762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007764:	1e98      	subs	r0, r3, #2
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	4358      	muls	r0, r3
 800776a:	1ac1      	subs	r1, r0, r3
 800776c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007770:	4419      	add	r1, r3
 8007772:	4418      	add	r0, r3
 8007774:	f022 f82c 	bl	80297d0 <EwCopy>
 8007778:	f1a9 0903 	sub.w	r9, r9, #3
 800777c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800777e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	ddae      	ble.n	80076e6 <UpdateWatermark1+0x422>
 8007788:	f8b8 3000 	ldrh.w	r3, [r8]
 800778c:	f828 3c02 	strh.w	r3, [r8, #-2]
 8007790:	f939 3008 	ldrsh.w	r3, [r9, r8]
 8007794:	f822 3008 	strh.w	r3, [r2, r8]
 8007798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779a:	3b01      	subs	r3, #1
 800779c:	930a      	str	r3, [sp, #40]	; 0x28
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	4498      	add	r8, r3
 80077a2:	e7ee      	b.n	8007782 <UpdateWatermark1+0x4be>
 80077a4:	9b08      	ldr	r3, [sp, #32]
 80077a6:	b91b      	cbnz	r3, 80077b0 <UpdateWatermark1+0x4ec>
 80077a8:	f1bb 0f03 	cmp.w	fp, #3
 80077ac:	f47f aeff 	bne.w	80075ae <UpdateWatermark1+0x2ea>
 80077b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b2:	b11b      	cbz	r3, 80077bc <UpdateWatermark1+0x4f8>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	42bb      	cmp	r3, r7
 80077b8:	f4bf af36 	bcs.w	8007628 <UpdateWatermark1+0x364>
 80077bc:	f1ba 0f00 	cmp.w	sl, #0
 80077c0:	d002      	beq.n	80077c8 <UpdateWatermark1+0x504>
 80077c2:	4650      	mov	r0, sl
 80077c4:	f00f ffc8 	bl	8017758 <EwBmpClose>
 80077c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077cc:	589b      	ldr	r3, [r3, r2]
 80077ce:	4a03      	ldr	r2, [pc, #12]	; (80077dc <UpdateWatermark1+0x518>)
 80077d0:	6a12      	ldr	r2, [r2, #32]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
 80077d4:	e5ea      	b.n	80073ac <UpdateWatermark1+0xe8>
 80077d6:	bf00      	nop
 80077d8:	b6db6db7 	.word	0xb6db6db7
 80077dc:	200000f4 	.word	0x200000f4
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	6900      	ldr	r0, [r0, #16]
 80077e6:	460d      	mov	r5, r1
 80077e8:	f00b fc56 	bl	8013098 <EwFindGlyph>
 80077ec:	b928      	cbnz	r0, 80077fa <UpdateWatermark1+0x536>
 80077ee:	6960      	ldr	r0, [r4, #20]
 80077f0:	4629      	mov	r1, r5
 80077f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f6:	f010 ba59 	b.w	8017cac <EwFntIsGlyphAvailable>
 80077fa:	2001      	movs	r0, #1
 80077fc:	bd38      	pop	{r3, r4, r5, pc}

080077fe <EwEnableGfxTaskTracing>:
 80077fe:	4b02      	ldr	r3, [pc, #8]	; (8007808 <EwEnableGfxTaskTracing+0xa>)
 8007800:	6298      	str	r0, [r3, #40]	; 0x28
 8007802:	20be      	movs	r0, #190	; 0xbe
 8007804:	f011 ba50 	b.w	8018ca8 <EwError>
 8007808:	200000f4 	.word	0x200000f4

0800780c <EwFreeBitmap>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	b340      	cbz	r0, 8007864 <EwFreeBitmap+0x58>
 8007812:	6900      	ldr	r0, [r0, #16]
 8007814:	b330      	cbz	r0, 8007864 <EwFreeBitmap+0x58>
 8007816:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007818:	b325      	cbz	r5, 8007864 <EwFreeBitmap+0x58>
 800781a:	4913      	ldr	r1, [pc, #76]	; (8007868 <EwFreeBitmap+0x5c>)
 800781c:	680a      	ldr	r2, [r1, #0]
 800781e:	f1a2 032c 	sub.w	r3, r2, #44	; 0x2c
 8007822:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 8007826:	221c      	movs	r2, #28
 8007828:	fb02 3310 	mls	r3, r2, r0, r3
 800782c:	69a2      	ldr	r2, [r4, #24]
 800782e:	600b      	str	r3, [r1, #0]
 8007830:	b11a      	cbz	r2, 800783a <EwFreeBitmap+0x2e>
 8007832:	6962      	ldr	r2, [r4, #20]
 8007834:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8007838:	600b      	str	r3, [r1, #0]
 800783a:	2500      	movs	r5, #0
 800783c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783e:	42ab      	cmp	r3, r5
 8007840:	dc08      	bgt.n	8007854 <EwFreeBitmap+0x48>
 8007842:	2300      	movs	r3, #0
 8007844:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8007848:	6263      	str	r3, [r4, #36]	; 0x24
 800784a:	4620      	mov	r0, r4
 800784c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007850:	f021 bf90 	b.w	8029774 <EwFree>
 8007854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800785a:	b108      	cbz	r0, 8007860 <EwFreeBitmap+0x54>
 800785c:	f00b fa42 	bl	8012ce4 <EwFreeSurface>
 8007860:	3501      	adds	r5, #1
 8007862:	e7eb      	b.n	800783c <EwFreeBitmap+0x30>
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	200002e8 	.word	0x200002e8

0800786c <EwDoneGraphicsEngine>:
 800786c:	b510      	push	{r4, lr}
 800786e:	4c0b      	ldr	r4, [pc, #44]	; (800789c <EwDoneGraphicsEngine+0x30>)
 8007870:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007872:	b118      	cbz	r0, 800787c <EwDoneGraphicsEngine+0x10>
 8007874:	f7ff ffca 	bl	800780c <EwFreeBitmap>
 8007878:	2300      	movs	r3, #0
 800787a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800787c:	4908      	ldr	r1, [pc, #32]	; (80078a0 <EwDoneGraphicsEngine+0x34>)
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <EwDoneGraphicsEngine+0x38>)
 8007880:	680b      	ldr	r3, [r1, #0]
 8007882:	6810      	ldr	r0, [r2, #0]
 8007884:	4403      	add	r3, r0
 8007886:	600b      	str	r3, [r1, #0]
 8007888:	2300      	movs	r3, #0
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	f010 f932 	bl	8017af4 <EwFntDone>
 8007890:	f00f ff14 	bl	80176bc <EwBmpDone>
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007898:	f00a bf74 	b.w	8012784 <EwDoneGfxCore>
 800789c:	200000f4 	.word	0x200000f4
 80078a0:	200002e8 	.word	0x200002e8
 80078a4:	20000318 	.word	0x20000318

080078a8 <EwCreateBitmap>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	ac06      	add	r4, sp, #24
 80078ae:	e884 0006 	stmia.w	r4, {r1, r2}
 80078b2:	1c42      	adds	r2, r0, #1
 80078b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078b6:	d106      	bne.n	80078c6 <EwCreateBitmap+0x1e>
 80078b8:	207b      	movs	r0, #123	; 0x7b
 80078ba:	f011 f9f5 	bl	8018ca8 <EwError>
 80078be:	2400      	movs	r4, #0
 80078c0:	4620      	mov	r0, r4
 80078c2:	b008      	add	sp, #32
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	4d16      	ldr	r5, [pc, #88]	; (8007920 <EwCreateBitmap+0x78>)
 80078c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80078ca:	b111      	cbz	r1, 80078d2 <EwCreateBitmap+0x2a>
 80078cc:	fab0 f180 	clz	r1, r0
 80078d0:	0949      	lsrs	r1, r1, #5
 80078d2:	4a14      	ldr	r2, [pc, #80]	; (8007924 <EwCreateBitmap+0x7c>)
 80078d4:	6852      	ldr	r2, [r2, #4]
 80078d6:	b11a      	cbz	r2, 80078e0 <EwCreateBitmap+0x38>
 80078d8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80078da:	fab2 f282 	clz	r2, r2
 80078de:	0952      	lsrs	r2, r2, #5
 80078e0:	2500      	movs	r5, #0
 80078e2:	e9cd 1503 	strd	r1, r5, [sp, #12]
 80078e6:	e9cd 6101 	strd	r6, r1, [sp, #4]
 80078ea:	9205      	str	r2, [sp, #20]
 80078ec:	9600      	str	r6, [sp, #0]
 80078ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 80078f2:	f7fe fdab 	bl	800644c <UpdateWatermark2+0xdc>
 80078f6:	4604      	mov	r4, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d0e1      	beq.n	80078c0 <EwCreateBitmap+0x18>
 80078fc:	6963      	ldr	r3, [r4, #20]
 80078fe:	42ab      	cmp	r3, r5
 8007900:	ddde      	ble.n	80078c0 <EwCreateBitmap+0x18>
 8007902:	4629      	mov	r1, r5
 8007904:	4620      	mov	r0, r4
 8007906:	f7ff fd13 	bl	8007330 <UpdateWatermark1+0x6c>
 800790a:	b938      	cbnz	r0, 800791c <EwCreateBitmap+0x74>
 800790c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8007910:	f011 f9ca 	bl	8018ca8 <EwError>
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff79 	bl	800780c <EwFreeBitmap>
 800791a:	e7d0      	b.n	80078be <EwCreateBitmap+0x16>
 800791c:	3501      	adds	r5, #1
 800791e:	e7ed      	b.n	80078fc <EwCreateBitmap+0x54>
 8007920:	200000f4 	.word	0x200000f4
 8007924:	20000000 	.word	0x20000000

08007928 <EwLoadBitmap>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4b5c      	ldr	r3, [pc, #368]	; (8007aa0 <EwLoadBitmap+0x178>)
 800792e:	b09b      	sub	sp, #108	; 0x6c
 8007930:	685e      	ldr	r6, [r3, #4]
 8007932:	4607      	mov	r7, r0
 8007934:	b948      	cbnz	r0, 800794a <EwLoadBitmap+0x22>
 8007936:	2200      	movs	r2, #0
 8007938:	4639      	mov	r1, r7
 800793a:	2084      	movs	r0, #132	; 0x84
 800793c:	f011 f9ca 	bl	8018cd4 <EwErrorPD>
 8007940:	2400      	movs	r4, #0
 8007942:	4620      	mov	r0, r4
 8007944:	b01b      	add	sp, #108	; 0x6c
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	f00f feb8 	bl	80176be <EwBmpOpen>
 800794e:	4605      	mov	r5, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	d0f0      	beq.n	8007936 <EwLoadBitmap+0xe>
 8007954:	ab0c      	add	r3, sp, #48	; 0x30
 8007956:	9302      	str	r3, [sp, #8]
 8007958:	ab0b      	add	r3, sp, #44	; 0x2c
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	ab0a      	add	r3, sp, #40	; 0x28
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	aa08      	add	r2, sp, #32
 8007962:	ab09      	add	r3, sp, #36	; 0x24
 8007964:	a907      	add	r1, sp, #28
 8007966:	f00f fef8 	bl	801775a <EwBmpGetMetrics>
 800796a:	4604      	mov	r4, r0
 800796c:	b940      	cbnz	r0, 8007980 <EwLoadBitmap+0x58>
 800796e:	4628      	mov	r0, r5
 8007970:	f00f fef2 	bl	8017758 <EwBmpClose>
 8007974:	4622      	mov	r2, r4
 8007976:	4639      	mov	r1, r7
 8007978:	2085      	movs	r0, #133	; 0x85
 800797a:	f011 f9ab 	bl	8018cd4 <EwErrorPD>
 800797e:	e7e0      	b.n	8007942 <EwLoadBitmap+0x1a>
 8007980:	aa13      	add	r2, sp, #76	; 0x4c
 8007982:	2100      	movs	r1, #0
 8007984:	4628      	mov	r0, r5
 8007986:	f00f ff2f 	bl	80177e8 <EwBmpGetFrameMemory>
 800798a:	4b46      	ldr	r3, [pc, #280]	; (8007aa4 <EwLoadBitmap+0x17c>)
 800798c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800798e:	4602      	mov	r2, r0
 8007990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007994:	b128      	cbz	r0, 80079a2 <EwLoadBitmap+0x7a>
 8007996:	2901      	cmp	r1, #1
 8007998:	dd29      	ble.n	80079ee <EwLoadBitmap+0xc6>
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfd4      	ite	le
 800799e:	2600      	movle	r6, #0
 80079a0:	2601      	movgt	r6, #1
 80079a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079a4:	9011      	str	r0, [sp, #68]	; 0x44
 80079a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80079a8:	9012      	str	r0, [sp, #72]	; 0x48
 80079aa:	e9dd 0407 	ldrd	r0, r4, [sp, #28]
 80079ae:	f1b2 0c00 	subs.w	ip, r2, #0
 80079b2:	f1a0 0803 	sub.w	r8, r0, #3
 80079b6:	bf18      	it	ne
 80079b8:	f04f 0c01 	movne.w	ip, #1
 80079bc:	f1d8 0e00 	rsbs	lr, r8, #0
 80079c0:	eb4e 0e08 	adc.w	lr, lr, r8
 80079c4:	b1ae      	cbz	r6, 80079f2 <EwLoadBitmap+0xca>
 80079c6:	fab2 f282 	clz	r2, r2
 80079ca:	0952      	lsrs	r2, r2, #5
 80079cc:	e9cd e204 	strd	lr, r2, [sp, #16]
 80079d0:	2200      	movs	r2, #0
 80079d2:	e9cd 4100 	strd	r4, r1, [sp]
 80079d6:	e9cd c202 	strd	ip, r2, [sp, #8]
 80079da:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 80079de:	f7fe fd35 	bl	800644c <UpdateWatermark2+0xdc>
 80079e2:	4604      	mov	r4, r0
 80079e4:	b938      	cbnz	r0, 80079f6 <EwLoadBitmap+0xce>
 80079e6:	4628      	mov	r0, r5
 80079e8:	f00f feb6 	bl	8017758 <EwBmpClose>
 80079ec:	e7a9      	b.n	8007942 <EwLoadBitmap+0x1a>
 80079ee:	2600      	movs	r6, #0
 80079f0:	e7d7      	b.n	80079a2 <EwLoadBitmap+0x7a>
 80079f2:	4632      	mov	r2, r6
 80079f4:	e7ea      	b.n	80079cc <EwLoadBitmap+0xa4>
 80079f6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	dd03      	ble.n	8007a06 <EwLoadBitmap+0xde>
 80079fe:	6981      	ldr	r1, [r0, #24]
 8007a00:	4628      	mov	r0, r5
 8007a02:	f010 f827 	bl	8017a54 <EwBmpLoadMappingTable>
 8007a06:	f04f 0900 	mov.w	r9, #0
 8007a0a:	f04f 0b1c 	mov.w	fp, #28
 8007a0e:	e029      	b.n	8007a64 <EwLoadBitmap+0x13c>
 8007a10:	6a23      	ldr	r3, [r4, #32]
 8007a12:	fb0b 3809 	mla	r8, fp, r9, r3
 8007a16:	ab10      	add	r3, sp, #64	; 0x40
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	ab0f      	add	r3, sp, #60	; 0x3c
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	aa0d      	add	r2, sp, #52	; 0x34
 8007a20:	ab0e      	add	r3, sp, #56	; 0x38
 8007a22:	4649      	mov	r1, r9
 8007a24:	4628      	mov	r0, r5
 8007a26:	f00f fec7 	bl	80177b8 <EwBmpGetFrameMetrics>
 8007a2a:	b958      	cbnz	r0, 8007a44 <EwLoadBitmap+0x11c>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	4639      	mov	r1, r7
 8007a30:	2086      	movs	r0, #134	; 0x86
 8007a32:	f011 f94f 	bl	8018cd4 <EwErrorPD>
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7ff fee8 	bl	800780c <EwFreeBitmap>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f00f fe8b 	bl	8017758 <EwBmpClose>
 8007a42:	e77d      	b.n	8007940 <EwLoadBitmap+0x18>
 8007a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a48:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a4a:	f8c8 300c 	str.w	r3, [r8, #12]
 8007a4e:	441a      	add	r2, r3
 8007a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a52:	f8c8 1010 	str.w	r1, [r8, #16]
 8007a56:	440b      	add	r3, r1
 8007a58:	f8c8 2014 	str.w	r2, [r8, #20]
 8007a5c:	f8c8 3018 	str.w	r3, [r8, #24]
 8007a60:	f109 0901 	add.w	r9, r9, #1
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	454b      	cmp	r3, r9
 8007a68:	dcd2      	bgt.n	8007a10 <EwLoadBitmap+0xe8>
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f00f fe74 	bl	8017758 <EwBmpClose>
 8007a70:	61e7      	str	r7, [r4, #28]
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	f47f af65 	bne.w	8007942 <EwLoadBitmap+0x1a>
 8007a78:	6963      	ldr	r3, [r4, #20]
 8007a7a:	42b3      	cmp	r3, r6
 8007a7c:	f77f af61 	ble.w	8007942 <EwLoadBitmap+0x1a>
 8007a80:	4631      	mov	r1, r6
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7ff fc54 	bl	8007330 <UpdateWatermark1+0x6c>
 8007a88:	b938      	cbnz	r0, 8007a9a <EwLoadBitmap+0x172>
 8007a8a:	f240 1041 	movw	r0, #321	; 0x141
 8007a8e:	f011 f90b 	bl	8018ca8 <EwError>
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff feba 	bl	800780c <EwFreeBitmap>
 8007a98:	e752      	b.n	8007940 <EwLoadBitmap+0x18>
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7ec      	b.n	8007a78 <EwLoadBitmap+0x150>
 8007a9e:	bf00      	nop
 8007aa0:	20000000 	.word	0x20000000
 8007aa4:	200000f4 	.word	0x200000f4

08007aa8 <EwLockBitmap>:
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	b092      	sub	sp, #72	; 0x48
 8007ab0:	ad18      	add	r5, sp, #96	; 0x60
 8007ab2:	e885 000c 	stmia.w	r5, {r2, r3}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 8007abc:	4688      	mov	r8, r1
 8007abe:	f7ff fc37 	bl	8007330 <UpdateWatermark1+0x6c>
 8007ac2:	e9dd 6218 	ldrd	r6, r2, [sp, #96]	; 0x60
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	b118      	cbz	r0, 8007ad2 <EwLockBitmap+0x2a>
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	db01      	blt.n	8007ad2 <EwLockBitmap+0x2a>
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	da06      	bge.n	8007ae0 <EwLockBitmap+0x38>
 8007ad2:	4642      	mov	r2, r8
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	208f      	movs	r0, #143	; 0x8f
 8007ad8:	f011 f8fc 	bl	8018cd4 <EwErrorPD>
 8007adc:	2400      	movs	r4, #0
 8007ade:	e02c      	b.n	8007b3a <EwLockBitmap+0x92>
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ae4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007ae6:	428b      	cmp	r3, r1
 8007ae8:	bfa8      	it	ge
 8007aea:	460b      	movge	r3, r1
 8007aec:	68a1      	ldr	r1, [r4, #8]
 8007aee:	4288      	cmp	r0, r1
 8007af0:	bfa8      	it	ge
 8007af2:	4608      	movge	r0, r1
 8007af4:	429e      	cmp	r6, r3
 8007af6:	daf1      	bge.n	8007adc <EwLockBitmap+0x34>
 8007af8:	4282      	cmp	r2, r0
 8007afa:	daef      	bge.n	8007adc <EwLockBitmap+0x34>
 8007afc:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
 8007b00:	3c00      	subs	r4, #0
 8007b02:	bf18      	it	ne
 8007b04:	2401      	movne	r4, #1
 8007b06:	b10d      	cbz	r5, 8007b0c <EwLockBitmap+0x64>
 8007b08:	f044 0402 	orr.w	r4, r4, #2
 8007b0c:	ad06      	add	r5, sp, #24
 8007b0e:	e9d7 1c01 	ldrd	r1, ip, [r7, #4]
 8007b12:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8007b16:	2400      	movs	r4, #0
 8007b18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007b1c:	1a80      	subs	r0, r0, r2
 8007b1e:	9000      	str	r0, [sp, #0]
 8007b20:	6838      	ldr	r0, [r7, #0]
 8007b22:	1b9b      	subs	r3, r3, r6
 8007b24:	4462      	add	r2, ip
 8007b26:	4431      	add	r1, r6
 8007b28:	f00b fc46 	bl	80133b8 <EwLockSurface>
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	b950      	cbnz	r0, 8007b46 <EwLockBitmap+0x9e>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	2089      	movs	r0, #137	; 0x89
 8007b36:	f011 f8cd 	bl	8018cd4 <EwErrorPD>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	b012      	add	sp, #72	; 0x48
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	b002      	add	sp, #8
 8007b44:	4770      	bx	lr
 8007b46:	204c      	movs	r0, #76	; 0x4c
 8007b48:	f021 fe12 	bl	8029770 <EwAlloc>
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	b960      	cbnz	r0, 8007b6a <EwLockBitmap+0xc2>
 8007b50:	2018      	movs	r0, #24
 8007b52:	f012 f859 	bl	8019c08 <EwImmediateReclaimMemory>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d1f5      	bne.n	8007b46 <EwLockBitmap+0x9e>
 8007b5a:	6838      	ldr	r0, [r7, #0]
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f00b f8db 	bl	8012d18 <EwUnlockSurface>
 8007b62:	2018      	movs	r0, #24
 8007b64:	f011 f8a0 	bl	8018ca8 <EwError>
 8007b68:	e7e7      	b.n	8007b3a <EwLockBitmap+0x92>
 8007b6a:	9b06      	ldr	r3, [sp, #24]
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	9b07      	ldr	r3, [sp, #28]
 8007b70:	6043      	str	r3, [r0, #4]
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	6083      	str	r3, [r0, #8]
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	60c3      	str	r3, [r0, #12]
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7c:	6103      	str	r3, [r0, #16]
 8007b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b80:	6143      	str	r3, [r0, #20]
 8007b82:	f100 0618 	add.w	r6, r0, #24
 8007b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007b8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b92:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007b96:	4a0b      	ldr	r2, [pc, #44]	; (8007bc4 <EwLockBitmap+0x11c>)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8007b9c:	6813      	ldr	r3, [r2, #0]
 8007b9e:	334c      	adds	r3, #76	; 0x4c
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <EwLockBitmap+0x120>)
 8007ba4:	6811      	ldr	r1, [r2, #0]
 8007ba6:	428b      	cmp	r3, r1
 8007ba8:	dd00      	ble.n	8007bac <EwLockBitmap+0x104>
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <EwLockBitmap+0x124>)
 8007bae:	4908      	ldr	r1, [pc, #32]	; (8007bd0 <EwLockBitmap+0x128>)
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	6809      	ldr	r1, [r1, #0]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	4413      	add	r3, r2
 8007bb8:	4a06      	ldr	r2, [pc, #24]	; (8007bd4 <EwLockBitmap+0x12c>)
 8007bba:	6811      	ldr	r1, [r2, #0]
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	ddbc      	ble.n	8007b3a <EwLockBitmap+0x92>
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	e7ba      	b.n	8007b3a <EwLockBitmap+0x92>
 8007bc4:	200002e8 	.word	0x200002e8
 8007bc8:	20000304 	.word	0x20000304
 8007bcc:	200002d8 	.word	0x200002d8
 8007bd0:	200002e4 	.word	0x200002e4
 8007bd4:	200002ec 	.word	0x200002ec

08007bd8 <EwUnlockBitmap>:
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b170      	cbz	r0, 8007bfc <EwUnlockBitmap+0x24>
 8007bde:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007be0:	b160      	cbz	r0, 8007bfc <EwUnlockBitmap+0x24>
 8007be2:	f104 0118 	add.w	r1, r4, #24
 8007be6:	f00b f897 	bl	8012d18 <EwUnlockSurface>
 8007bea:	2300      	movs	r3, #0
 8007bec:	64a3      	str	r3, [r4, #72]	; 0x48
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f021 fdc0 	bl	8029774 <EwFree>
 8007bf4:	4a02      	ldr	r2, [pc, #8]	; (8007c00 <EwUnlockBitmap+0x28>)
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	3b4c      	subs	r3, #76	; 0x4c
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	200002e8 	.word	0x200002e8

08007c04 <EwInitGraphicsEngine>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	b08b      	sub	sp, #44	; 0x2c
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	f021 f894 	bl	8028d38 <GfxInitGfx>
 8007c10:	4604      	mov	r4, r0
 8007c12:	b930      	cbnz	r0, 8007c22 <EwInitGraphicsEngine+0x1e>
 8007c14:	2065      	movs	r0, #101	; 0x65
 8007c16:	f011 f847 	bl	8018ca8 <EwError>
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	b00b      	add	sp, #44	; 0x2c
 8007c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c22:	f00a fea5 	bl	8012970 <EwInitGfxCore>
 8007c26:	4604      	mov	r4, r0
 8007c28:	b908      	cbnz	r0, 8007c2e <EwInitGraphicsEngine+0x2a>
 8007c2a:	2069      	movs	r0, #105	; 0x69
 8007c2c:	e7f3      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f00f fd32 	bl	8017698 <EwBmpInit>
 8007c34:	4604      	mov	r4, r0
 8007c36:	b918      	cbnz	r0, 8007c40 <EwInitGraphicsEngine+0x3c>
 8007c38:	f00a fda4 	bl	8012784 <EwDoneGfxCore>
 8007c3c:	206a      	movs	r0, #106	; 0x6a
 8007c3e:	e7ea      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007c40:	4628      	mov	r0, r5
 8007c42:	f00f ff55 	bl	8017af0 <EwFntInit>
 8007c46:	4604      	mov	r4, r0
 8007c48:	b928      	cbnz	r0, 8007c56 <EwInitGraphicsEngine+0x52>
 8007c4a:	f00f fd37 	bl	80176bc <EwBmpDone>
 8007c4e:	f00a fd99 	bl	8012784 <EwDoneGfxCore>
 8007c52:	206b      	movs	r0, #107	; 0x6b
 8007c54:	e7df      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007c56:	4628      	mov	r0, r5
 8007c58:	f009 f971 	bl	8010f3e <EwInitBidi>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	b938      	cbnz	r0, 8007c70 <EwInitGraphicsEngine+0x6c>
 8007c60:	f00f ff48 	bl	8017af4 <EwFntDone>
 8007c64:	f00f fd2a 	bl	80176bc <EwBmpDone>
 8007c68:	f00a fd8c 	bl	8012784 <EwDoneGfxCore>
 8007c6c:	206c      	movs	r0, #108	; 0x6c
 8007c6e:	e7d2      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007c70:	4628      	mov	r0, r5
 8007c72:	f006 fd23 	bl	800e6bc <EwInitAttrText>
 8007c76:	4604      	mov	r4, r0
 8007c78:	b938      	cbnz	r0, 8007c8a <EwInitGraphicsEngine+0x86>
 8007c7a:	f00f ff3b 	bl	8017af4 <EwFntDone>
 8007c7e:	f00f fd1d 	bl	80176bc <EwBmpDone>
 8007c82:	f00a fd7f 	bl	8012784 <EwDoneGfxCore>
 8007c86:	206d      	movs	r0, #109	; 0x6d
 8007c88:	e7c5      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f00d fefa 	bl	8015a84 <EwGfxTasksInit>
 8007c90:	4604      	mov	r4, r0
 8007c92:	b938      	cbnz	r0, 8007ca4 <EwInitGraphicsEngine+0xa0>
 8007c94:	f00f ff2e 	bl	8017af4 <EwFntDone>
 8007c98:	f00f fd10 	bl	80176bc <EwBmpDone>
 8007c9c:	f00a fd72 	bl	8012784 <EwDoneGfxCore>
 8007ca0:	206e      	movs	r0, #110	; 0x6e
 8007ca2:	e7b8      	b.n	8007c16 <EwInitGraphicsEngine+0x12>
 8007ca4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8007d98 <EwInitGraphicsEngine+0x194>
 8007ca8:	f247 5130 	movw	r1, #30000	; 0x7530
 8007cac:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cb0:	f8d8 9000 	ldr.w	r9, [r8]
 8007cb4:	f021 fdbc 	bl	8029830 <EwMathRandInt32>
 8007cb8:	ac04      	add	r4, sp, #16
 8007cba:	2233      	movs	r2, #51	; 0x33
 8007cbc:	2190      	movs	r1, #144	; 0x90
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f012 f88f 	bl	8019de4 <EwNewPoint>
 8007cc6:	ad06      	add	r5, sp, #24
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2333      	movs	r3, #51	; 0x33
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	2390      	movs	r3, #144	; 0x90
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f04f 0a01 	mov.w	sl, #1
 8007cd8:	f012 f8fa 	bl	8019ed0 <EwNewRect>
 8007cdc:	f8cd a000 	str.w	sl, [sp]
 8007ce0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2002      	movs	r0, #2
 8007ce8:	f7ff fdde 	bl	80078a8 <EwCreateBitmap>
 8007cec:	4606      	mov	r6, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d03e      	beq.n	8007d70 <EwInitGraphicsEngine+0x16c>
 8007cf2:	2400      	movs	r4, #0
 8007cf4:	f8cd a00c 	str.w	sl, [sp, #12]
 8007cf8:	9402      	str	r4, [sp, #8]
 8007cfa:	ab0a      	add	r3, sp, #40	; 0x28
 8007cfc:	e913 0003 	ldmdb	r3, {r0, r1}
 8007d00:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007d04:	4621      	mov	r1, r4
 8007d06:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff fecc 	bl	8007aa8 <EwLockBitmap>
 8007d10:	4605      	mov	r5, r0
 8007d12:	b398      	cbz	r0, 8007d7c <EwInitGraphicsEngine+0x178>
 8007d14:	f8d0 a000 	ldr.w	sl, [r0]
 8007d18:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4650      	mov	r0, sl
 8007d20:	3401      	adds	r4, #1
 8007d22:	f7fe fa6f 	bl	8006204 <EwScreenWarpRGB565RowFilterSolidBlend+0x4>
 8007d26:	2c33      	cmp	r4, #51	; 0x33
 8007d28:	44da      	add	sl, fp
 8007d2a:	d1f7      	bne.n	8007d1c <EwInitGraphicsEngine+0x118>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7ff ff53 	bl	8007bd8 <EwUnlockBitmap>
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <EwInitGraphicsEngine+0x184>)
 8007d34:	f8d8 3000 	ldr.w	r3, [r8]
 8007d38:	6811      	ldr	r1, [r2, #0]
 8007d3a:	4c14      	ldr	r4, [pc, #80]	; (8007d8c <EwInitGraphicsEngine+0x188>)
 8007d3c:	f8c8 9000 	str.w	r9, [r8]
 8007d40:	f64e 2060 	movw	r0, #60000	; 0xea60
 8007d44:	eba3 0309 	sub.w	r3, r3, r9
 8007d48:	440b      	add	r3, r1
 8007d4a:	4287      	cmp	r7, r0
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	62e6      	str	r6, [r4, #44]	; 0x2c
 8007d50:	bfa8      	it	ge
 8007d52:	4607      	movge	r7, r0
 8007d54:	f021 fd32 	bl	80297bc <EwGetTicks>
 8007d58:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <EwInitGraphicsEngine+0x18c>)
 8007d5a:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <EwInitGraphicsEngine+0x190>)
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f5b7 6ffa 	cmp.w	r7, #2000	; 0x7d0
 8007d62:	bfac      	ite	ge
 8007d64:	19c0      	addge	r0, r0, r7
 8007d66:	f500 60fa 	addlt.w	r0, r0, #2000	; 0x7d0
 8007d6a:	6020      	str	r0, [r4, #0]
 8007d6c:	2401      	movs	r4, #1
 8007d6e:	e754      	b.n	8007c1a <EwInitGraphicsEngine+0x16>
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <EwInitGraphicsEngine+0x188>)
 8007d72:	62d8      	str	r0, [r3, #44]	; 0x2c
 8007d74:	f7ff fd7a 	bl	800786c <EwDoneGraphicsEngine>
 8007d78:	2400      	movs	r4, #0
 8007d7a:	e74e      	b.n	8007c1a <EwInitGraphicsEngine+0x16>
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff fd45 	bl	800780c <EwFreeBitmap>
 8007d82:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <EwInitGraphicsEngine+0x188>)
 8007d84:	62dd      	str	r5, [r3, #44]	; 0x2c
 8007d86:	e7f5      	b.n	8007d74 <EwInitGraphicsEngine+0x170>
 8007d88:	20000318 	.word	0x20000318
 8007d8c:	200000f4 	.word	0x200000f4
 8007d90:	20000000 	.word	0x20000000
 8007d94:	080072c5 	.word	0x080072c5
 8007d98:	200002e8 	.word	0x200002e8

08007d9c <EwModifyBitmapPalette>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	b095      	sub	sp, #84	; 0x54
 8007da2:	460f      	mov	r7, r1
 8007da4:	4615      	mov	r5, r2
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	4604      	mov	r4, r0
 8007daa:	b110      	cbz	r0, 8007db2 <EwModifyBitmapPalette+0x16>
 8007dac:	6803      	ldr	r3, [r0, #0]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d007      	beq.n	8007dc2 <EwModifyBitmapPalette+0x26>
 8007db2:	2200      	movs	r2, #0
 8007db4:	4621      	mov	r1, r4
 8007db6:	2090      	movs	r0, #144	; 0x90
 8007db8:	b015      	add	sp, #84	; 0x54
 8007dba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbe:	f010 bf89 	b.w	8018cd4 <EwErrorPD>
 8007dc2:	9b07      	ldr	r3, [sp, #28]
 8007dc4:	b13b      	cbz	r3, 8007dd6 <EwModifyBitmapPalette+0x3a>
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	db05      	blt.n	8007dd6 <EwModifyBitmapPalette+0x3a>
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	dd03      	ble.n	8007dd6 <EwModifyBitmapPalette+0x3a>
 8007dce:	188b      	adds	r3, r1, r2
 8007dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd4:	dd03      	ble.n	8007dde <EwModifyBitmapPalette+0x42>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4621      	mov	r1, r4
 8007dda:	2091      	movs	r0, #145	; 0x91
 8007ddc:	e7ec      	b.n	8007db8 <EwModifyBitmapPalette+0x1c>
 8007dde:	69c6      	ldr	r6, [r0, #28]
 8007de0:	b17e      	cbz	r6, 8007e02 <EwModifyBitmapPalette+0x66>
 8007de2:	4601      	mov	r1, r0
 8007de4:	2200      	movs	r2, #0
 8007de6:	f240 103d 	movw	r0, #317	; 0x13d
 8007dea:	e7e5      	b.n	8007db8 <EwModifyBitmapPalette+0x1c>
 8007dec:	4631      	mov	r1, r6
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff fa9e 	bl	8007330 <UpdateWatermark1+0x6c>
 8007df4:	b920      	cbnz	r0, 8007e00 <EwModifyBitmapPalette+0x64>
 8007df6:	4632      	mov	r2, r6
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f240 103f 	movw	r0, #319	; 0x13f
 8007dfe:	e7db      	b.n	8007db8 <EwModifyBitmapPalette+0x1c>
 8007e00:	3601      	adds	r6, #1
 8007e02:	6963      	ldr	r3, [r4, #20]
 8007e04:	42b3      	cmp	r3, r6
 8007e06:	dcf1      	bgt.n	8007dec <EwModifyBitmapPalette+0x50>
 8007e08:	2600      	movs	r6, #0
 8007e0a:	f10d 0b20 	add.w	fp, sp, #32
 8007e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e10:	42b3      	cmp	r3, r6
 8007e12:	dd15      	ble.n	8007e40 <EwModifyBitmapPalette+0xa4>
 8007e14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e16:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
 8007e1a:	f8cd b010 	str.w	fp, [sp, #16]
 8007e1e:	2308      	movs	r3, #8
 8007e20:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8007e24:	2300      	movs	r3, #0
 8007e26:	461a      	mov	r2, r3
 8007e28:	9701      	str	r7, [sp, #4]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4650      	mov	r0, sl
 8007e30:	f00b fac2 	bl	80133b8 <EwLockSurface>
 8007e34:	4602      	mov	r2, r0
 8007e36:	b930      	cbnz	r0, 8007e46 <EwModifyBitmapPalette+0xaa>
 8007e38:	4651      	mov	r1, sl
 8007e3a:	208a      	movs	r0, #138	; 0x8a
 8007e3c:	f010 ff4a 	bl	8018cd4 <EwErrorPD>
 8007e40:	b015      	add	sp, #84	; 0x54
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8007e52:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007e56:	f898 1001 	ldrb.w	r1, [r8, #1]
 8007e5a:	f818 0b04 	ldrb.w	r0, [r8], #4
 8007e5e:	f7f8 fb7f 	bl	8000560 <EwPackClutEntry>
 8007e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e64:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 8007e68:	f109 0901 	add.w	r9, r9, #1
 8007e6c:	454d      	cmp	r5, r9
 8007e6e:	d1ee      	bne.n	8007e4e <EwModifyBitmapPalette+0xb2>
 8007e70:	4659      	mov	r1, fp
 8007e72:	4650      	mov	r0, sl
 8007e74:	f00a ff50 	bl	8012d18 <EwUnlockSurface>
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e7c8      	b.n	8007e0e <EwModifyBitmapPalette+0x72>

08007e7c <EwFlushBitmap>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b958      	cbnz	r0, 8007e9a <EwFlushBitmap+0x1e>
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e8a:	b108      	cbz	r0, 8007e90 <EwFlushBitmap+0x14>
 8007e8c:	f00b f9fc 	bl	8013288 <EwFlushTasks>
 8007e90:	3501      	adds	r5, #1
 8007e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dcf5      	bgt.n	8007e84 <EwFlushBitmap+0x8>
 8007e98:	e7f3      	b.n	8007e82 <EwFlushBitmap+0x6>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	e7f9      	b.n	8007e92 <EwFlushBitmap+0x16>

08007e9e <EwGetFontResource>:
 8007e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea0:	b08d      	sub	sp, #52	; 0x34
 8007ea2:	af04      	add	r7, sp, #16
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	b166      	cbz	r6, 8007ec6 <EwGetFontResource+0x28>
 8007eac:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
 8007eb0:	b14d      	cbz	r5, 8007ec6 <EwGetFontResource+0x28>
 8007eb2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007eb6:	f104 0401 	add.w	r4, r4, #1
 8007eba:	bf28      	it	cs
 8007ebc:	2520      	movcs	r5, #32
 8007ebe:	2c1f      	cmp	r4, #31
 8007ec0:	f807 5b01 	strb.w	r5, [r7], #1
 8007ec4:	d1f1      	bne.n	8007eaa <EwGetFontResource+0xc>
 8007ec6:	ad0c      	add	r5, sp, #48	; 0x30
 8007ec8:	442c      	add	r4, r5
 8007eca:	2500      	movs	r5, #0
 8007ecc:	f804 5c20 	strb.w	r5, [r4, #-32]
 8007ed0:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8007ed4:	9403      	str	r4, [sp, #12]
 8007ed6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007ed8:	9402      	str	r4, [sp, #8]
 8007eda:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8007ede:	9401      	str	r4, [sp, #4]
 8007ee0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007ee2:	9400      	str	r4, [sp, #0]
 8007ee4:	f00f fe07 	bl	8017af6 <EwFntGetResource>
 8007ee8:	b00d      	add	sp, #52	; 0x34
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eec <EwLoadFont>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	b940      	cbnz	r0, 8007f06 <EwLoadFont+0x1a>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	2092      	movs	r0, #146	; 0x92
 8007efa:	f010 feeb 	bl	8018cd4 <EwErrorPD>
 8007efe:	462c      	mov	r4, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	b006      	add	sp, #24
 8007f04:	bd70      	pop	{r4, r5, r6, pc}
 8007f06:	f00f fdf8 	bl	8017afa <EwFntOpen>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	b948      	cbnz	r0, 8007f22 <EwLoadFont+0x36>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f00f fe05 	bl	8017b1e <EwFntGetResourceName>
 8007f14:	4632      	mov	r2, r6
 8007f16:	4601      	mov	r1, r0
 8007f18:	2092      	movs	r0, #146	; 0x92
 8007f1a:	f010 fed3 	bl	8018cc4 <EwErrorSD>
 8007f1e:	4634      	mov	r4, r6
 8007f20:	e7ee      	b.n	8007f00 <EwLoadFont+0x14>
 8007f22:	f10d 030a 	add.w	r3, sp, #10
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	aa04      	add	r2, sp, #16
 8007f2a:	ab05      	add	r3, sp, #20
 8007f2c:	a903      	add	r1, sp, #12
 8007f2e:	f00f fdf9 	bl	8017b24 <EwFntGetMetrics>
 8007f32:	4604      	mov	r4, r0
 8007f34:	b958      	cbnz	r0, 8007f4e <EwLoadFont+0x62>
 8007f36:	4630      	mov	r0, r6
 8007f38:	f00f fdf0 	bl	8017b1c <EwFntClose>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f00f fdee 	bl	8017b1e <EwFntGetResourceName>
 8007f42:	4622      	mov	r2, r4
 8007f44:	4601      	mov	r1, r0
 8007f46:	2093      	movs	r0, #147	; 0x93
 8007f48:	f010 febc 	bl	8018cc4 <EwErrorSD>
 8007f4c:	e7d8      	b.n	8007f00 <EwLoadFont+0x14>
 8007f4e:	201c      	movs	r0, #28
 8007f50:	f021 fc0e 	bl	8029770 <EwAlloc>
 8007f54:	4604      	mov	r4, r0
 8007f56:	b958      	cbnz	r0, 8007f70 <EwLoadFont+0x84>
 8007f58:	2019      	movs	r0, #25
 8007f5a:	f011 fe55 	bl	8019c08 <EwImmediateReclaimMemory>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d1f5      	bne.n	8007f4e <EwLoadFont+0x62>
 8007f62:	4630      	mov	r0, r6
 8007f64:	f00f fdda 	bl	8017b1c <EwFntClose>
 8007f68:	2019      	movs	r0, #25
 8007f6a:	f010 fe9d 	bl	8018ca8 <EwError>
 8007f6e:	e7c7      	b.n	8007f00 <EwLoadFont+0x14>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	6003      	str	r3, [r0, #0]
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	6043      	str	r3, [r0, #4]
 8007f78:	9b05      	ldr	r3, [sp, #20]
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007f80:	8183      	strh	r3, [r0, #12]
 8007f82:	e9c0 5604 	strd	r5, r6, [r0, #16]
 8007f86:	4628      	mov	r0, r5
 8007f88:	f00f fdc9 	bl	8017b1e <EwFntGetResourceName>
 8007f8c:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <EwLoadFont+0xcc>)
 8007f8e:	61a0      	str	r0, [r4, #24]
 8007f90:	6813      	ldr	r3, [r2, #0]
 8007f92:	331c      	adds	r3, #28
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <EwLoadFont+0xd0>)
 8007f98:	6811      	ldr	r1, [r2, #0]
 8007f9a:	428b      	cmp	r3, r1
 8007f9c:	dd00      	ble.n	8007fa0 <EwLoadFont+0xb4>
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <EwLoadFont+0xd4>)
 8007fa2:	4908      	ldr	r1, [pc, #32]	; (8007fc4 <EwLoadFont+0xd8>)
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6809      	ldr	r1, [r1, #0]
 8007fa8:	440a      	add	r2, r1
 8007faa:	4413      	add	r3, r2
 8007fac:	4a06      	ldr	r2, [pc, #24]	; (8007fc8 <EwLoadFont+0xdc>)
 8007fae:	6811      	ldr	r1, [r2, #0]
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	dda5      	ble.n	8007f00 <EwLoadFont+0x14>
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e7a3      	b.n	8007f00 <EwLoadFont+0x14>
 8007fb8:	200002e8 	.word	0x200002e8
 8007fbc:	20000304 	.word	0x20000304
 8007fc0:	200002d8 	.word	0x200002d8
 8007fc4:	200002e4 	.word	0x200002e4
 8007fc8:	200002ec 	.word	0x200002ec

08007fcc <EwFreeFont>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b158      	cbz	r0, 8007fea <EwFreeFont+0x1e>
 8007fd2:	6940      	ldr	r0, [r0, #20]
 8007fd4:	f00f fda2 	bl	8017b1c <EwFntClose>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	6163      	str	r3, [r4, #20]
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f021 fbc9 	bl	8029774 <EwFree>
 8007fe2:	4a02      	ldr	r2, [pc, #8]	; (8007fec <EwFreeFont+0x20>)
 8007fe4:	6813      	ldr	r3, [r2, #0]
 8007fe6:	3b1c      	subs	r3, #28
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	bd10      	pop	{r4, pc}
 8007fec:	200002e8 	.word	0x200002e8

08007ff0 <EwInitViewport>:
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff6:	b08b      	sub	sp, #44	; 0x2c
 8007ff8:	ac0a      	add	r4, sp, #40	; 0x28
 8007ffa:	e904 0003 	stmdb	r4, {r0, r1}
 8007ffe:	2800      	cmp	r0, #0
 8008000:	a914      	add	r1, sp, #80	; 0x50
 8008002:	e881 000c 	stmia.w	r1, {r2, r3}
 8008006:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008008:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800800c:	4682      	mov	sl, r0
 800800e:	dd10      	ble.n	8008032 <EwInitViewport+0x42>
 8008010:	f1b9 0f00 	cmp.w	r9, #0
 8008014:	dd0d      	ble.n	8008032 <EwInitViewport+0x42>
 8008016:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008018:	eba3 0b02 	sub.w	fp, r3, r2
 800801c:	f1bb 0f00 	cmp.w	fp, #0
 8008020:	4615      	mov	r5, r2
 8008022:	dd06      	ble.n	8008032 <EwInitViewport+0x42>
 8008024:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8008028:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800802a:	eba2 0608 	sub.w	r6, r2, r8
 800802e:	2e00      	cmp	r6, #0
 8008030:	dc09      	bgt.n	8008046 <EwInitViewport+0x56>
 8008032:	2095      	movs	r0, #149	; 0x95
 8008034:	f010 fe38 	bl	8018ca8 <EwError>
 8008038:	2400      	movs	r4, #0
 800803a:	4620      	mov	r0, r4
 800803c:	b00b      	add	sp, #44	; 0x2c
 800803e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008042:	b002      	add	sp, #8
 8008044:	4770      	bx	lr
 8008046:	20b8      	movs	r0, #184	; 0xb8
 8008048:	f021 fb92 	bl	8029770 <EwAlloc>
 800804c:	4604      	mov	r4, r0
 800804e:	b918      	cbnz	r0, 8008058 <EwInitViewport+0x68>
 8008050:	201a      	movs	r0, #26
 8008052:	f010 fe29 	bl	8018ca8 <EwError>
 8008056:	e7f0      	b.n	800803a <EwInitViewport+0x4a>
 8008058:	9919      	ldr	r1, [sp, #100]	; 0x64
 800805a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800805c:	f8cd b000 	str.w	fp, [sp]
 8008060:	f381 0108 	usat	r1, #8, r1
 8008064:	9103      	str	r1, [sp, #12]
 8008066:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008068:	e9cd 7305 	strd	r7, r3, [sp, #20]
 800806c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	462a      	mov	r2, r5
 8008072:	4643      	mov	r3, r8
 8008074:	e9cd 6101 	strd	r6, r1, [sp, #4]
 8008078:	4650      	mov	r0, sl
 800807a:	4649      	mov	r1, r9
 800807c:	f020 fe9a 	bl	8028db4 <GfxInitViewport>
 8008080:	21b8      	movs	r1, #184	; 0xb8
 8008082:	4605      	mov	r5, r0
 8008084:	4620      	mov	r0, r4
 8008086:	f021 fb9b 	bl	80297c0 <EwZero>
 800808a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800808e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008090:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8008094:	6323      	str	r3, [r4, #48]	; 0x30
 8008096:	2300      	movs	r3, #0
 8008098:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800809c:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 80080a0:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
 80080a4:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80080a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80080ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080b0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80080b4:	e9c4 372a 	strd	r3, r7, [r4, #168]	; 0xa8
 80080b8:	6361      	str	r1, [r4, #52]	; 0x34
 80080ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80080bc:	f04f 31ff 	mov.w	r1, #4294967295
 80080c0:	2201      	movs	r2, #1
 80080c2:	60a1      	str	r1, [r4, #8]
 80080c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080c8:	e9c4 a900 	strd	sl, r9, [r4]
 80080cc:	e9c4 2206 	strd	r2, r2, [r4, #24]
 80080d0:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
 80080d4:	e9c4 352c 	strd	r3, r5, [r4, #176]	; 0xb0
 80080d8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80080da:	6761      	str	r1, [r4, #116]	; 0x74
 80080dc:	b935      	cbnz	r5, 80080ec <EwInitViewport+0xfc>
 80080de:	4620      	mov	r0, r4
 80080e0:	f021 fb48 	bl	8029774 <EwFree>
 80080e4:	2096      	movs	r0, #150	; 0x96
 80080e6:	f010 fddf 	bl	8018ca8 <EwError>
 80080ea:	462c      	mov	r4, r5
 80080ec:	490a      	ldr	r1, [pc, #40]	; (8008118 <EwInitViewport+0x128>)
 80080ee:	680b      	ldr	r3, [r1, #0]
 80080f0:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <EwInitViewport+0x12c>)
 80080f6:	600a      	str	r2, [r1, #0]
 80080f8:	6819      	ldr	r1, [r3, #0]
 80080fa:	428a      	cmp	r2, r1
 80080fc:	bfc8      	it	gt
 80080fe:	601a      	strgt	r2, [r3, #0]
 8008100:	4907      	ldr	r1, [pc, #28]	; (8008120 <EwInitViewport+0x130>)
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <EwInitViewport+0x134>)
 8008104:	6809      	ldr	r1, [r1, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	440b      	add	r3, r1
 800810a:	4413      	add	r3, r2
 800810c:	4a06      	ldr	r2, [pc, #24]	; (8008128 <EwInitViewport+0x138>)
 800810e:	6811      	ldr	r1, [r2, #0]
 8008110:	428b      	cmp	r3, r1
 8008112:	bfc8      	it	gt
 8008114:	6013      	strgt	r3, [r2, #0]
 8008116:	e790      	b.n	800803a <EwInitViewport+0x4a>
 8008118:	200002e8 	.word	0x200002e8
 800811c:	20000304 	.word	0x20000304
 8008120:	200002e4 	.word	0x200002e4
 8008124:	200002d8 	.word	0x200002d8
 8008128:	200002ec 	.word	0x200002ec

0800812c <EwBeginUpdate>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4604      	mov	r4, r0
 8008130:	b110      	cbz	r0, 8008138 <EwBeginUpdate+0xc>
 8008132:	f890 60a0 	ldrb.w	r6, [r0, #160]	; 0xa0
 8008136:	b136      	cbz	r6, 8008146 <EwBeginUpdate+0x1a>
 8008138:	2200      	movs	r2, #0
 800813a:	4621      	mov	r1, r4
 800813c:	2097      	movs	r0, #151	; 0x97
 800813e:	f010 fdc9 	bl	8018cd4 <EwErrorPD>
 8008142:	2000      	movs	r0, #0
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 800814a:	f020 ff21 	bl	8028f90 <GfxBeginUpdate>
 800814e:	b918      	cbnz	r0, 8008158 <EwBeginUpdate+0x2c>
 8008150:	4602      	mov	r2, r0
 8008152:	4621      	mov	r1, r4
 8008154:	209a      	movs	r0, #154	; 0x9a
 8008156:	e7f2      	b.n	800813e <EwBeginUpdate+0x12>
 8008158:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800815c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008160:	2301      	movs	r3, #1
 8008162:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8008166:	f104 030c 	add.w	r3, r4, #12
 800816a:	e883 0003 	stmia.w	r3, {r0, r1}
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 8008174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 800817e:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8008182:	e9c4 6624 	strd	r6, r6, [r4, #144]	; 0x90
 8008186:	e883 0003 	stmia.w	r3, {r0, r1}
 800818a:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <EwBeginUpdate+0x94>)
 800818c:	2210      	movs	r2, #16
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008194:	4798      	blx	r3
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <EwBeginUpdate+0x98>)
 8008198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800819a:	3201      	adds	r2, #1
 800819c:	2a10      	cmp	r2, #16
 800819e:	635a      	str	r2, [r3, #52]	; 0x34
 80081a0:	dd0a      	ble.n	80081b8 <EwBeginUpdate+0x8c>
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80081aa:	7e1a      	ldrb	r2, [r3, #24]
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	645a      	str	r2, [r3, #68]	; 0x44
 80081b4:	635e      	str	r6, [r3, #52]	; 0x34
 80081b6:	601e      	str	r6, [r3, #0]
 80081b8:	f104 0008 	add.w	r0, r4, #8
 80081bc:	e7c2      	b.n	8008144 <EwBeginUpdate+0x18>
 80081be:	bf00      	nop
 80081c0:	20000000 	.word	0x20000000
 80081c4:	200000f4 	.word	0x200000f4

080081c8 <EwBeginUpdateArea>:
 80081c8:	b084      	sub	sp, #16
 80081ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ce:	b08d      	sub	sp, #52	; 0x34
 80081d0:	ae17      	add	r6, sp, #92	; 0x5c
 80081d2:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80081d6:	4604      	mov	r4, r0
 80081d8:	b110      	cbz	r0, 80081e0 <EwBeginUpdateArea+0x18>
 80081da:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
 80081de:	b155      	cbz	r5, 80081f6 <EwBeginUpdateArea+0x2e>
 80081e0:	2098      	movs	r0, #152	; 0x98
 80081e2:	2200      	movs	r2, #0
 80081e4:	4621      	mov	r1, r4
 80081e6:	f010 fd75 	bl	8018cd4 <EwErrorPD>
 80081ea:	2000      	movs	r0, #0
 80081ec:	b00d      	add	sp, #52	; 0x34
 80081ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f2:	b004      	add	sp, #16
 80081f4:	4770      	bx	lr
 80081f6:	6843      	ldr	r3, [r0, #4]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	af08      	add	r7, sp, #32
 80081fc:	6803      	ldr	r3, [r0, #0]
 80081fe:	462a      	mov	r2, r5
 8008200:	4638      	mov	r0, r7
 8008202:	4629      	mov	r1, r5
 8008204:	f011 fe64 	bl	8019ed0 <EwNewRect>
 8008208:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800820c:	f10d 0c04 	add.w	ip, sp, #4
 8008210:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8008214:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800821c:	4630      	mov	r0, r6
 800821e:	f011 fedb 	bl	8019fd8 <EwIntersectRect>
 8008222:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008226:	e9dd 8717 	ldrd	r8, r7, [sp, #92]	; 0x5c
 800822a:	e9dd a919 	ldrd	sl, r9, [sp, #100]	; 0x64
 800822e:	f011 fead 	bl	8019f8c <EwIsRectEmpty>
 8008232:	4606      	mov	r6, r0
 8008234:	b9a0      	cbnz	r0, 8008260 <EwBeginUpdateArea+0x98>
 8008236:	eba9 0b07 	sub.w	fp, r9, r7
 800823a:	f8cd b000 	str.w	fp, [sp]
 800823e:	ebaa 0308 	sub.w	r3, sl, r8
 8008242:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	463a      	mov	r2, r7
 800824a:	4641      	mov	r1, r8
 800824c:	f020 feae 	bl	8028fac <GfxBeginUpdateArea>
 8008250:	9b07      	ldr	r3, [sp, #28]
 8008252:	4605      	mov	r5, r0
 8008254:	b930      	cbnz	r0, 8008264 <EwBeginUpdateArea+0x9c>
 8008256:	4602      	mov	r2, r0
 8008258:	4621      	mov	r1, r4
 800825a:	209b      	movs	r0, #155	; 0x9b
 800825c:	f010 fd3a 	bl	8018cd4 <EwErrorPD>
 8008260:	4628      	mov	r0, r5
 8008262:	e7c3      	b.n	80081ec <EwBeginUpdateArea+0x24>
 8008264:	e9c4 3b03 	strd	r3, fp, [r4, #12]
 8008268:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800826c:	4b13      	ldr	r3, [pc, #76]	; (80082bc <EwBeginUpdateArea+0xf4>)
 800826e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8008272:	2201      	movs	r2, #1
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 800827a:	e9c4 8724 	strd	r8, r7, [r4, #144]	; 0x90
 800827e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008282:	e9c4 a926 	strd	sl, r9, [r4, #152]	; 0x98
 8008286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800828a:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
 800828e:	4798      	blx	r3
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <EwBeginUpdateArea+0xf8>)
 8008292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008294:	3201      	adds	r2, #1
 8008296:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800829a:	635a      	str	r2, [r3, #52]	; 0x34
 800829c:	dd0a      	ble.n	80082b4 <EwBeginUpdateArea+0xec>
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80082a6:	7e1a      	ldrb	r2, [r3, #24]
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	645a      	str	r2, [r3, #68]	; 0x44
 80082b0:	635e      	str	r6, [r3, #52]	; 0x34
 80082b2:	601e      	str	r6, [r3, #0]
 80082b4:	f104 0008 	add.w	r0, r4, #8
 80082b8:	e798      	b.n	80081ec <EwBeginUpdateArea+0x24>
 80082ba:	bf00      	nop
 80082bc:	20000000 	.word	0x20000000
 80082c0:	200000f4 	.word	0x200000f4

080082c4 <EwFillRectangle>:
 80082c4:	b082      	sub	sp, #8
 80082c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	b089      	sub	sp, #36	; 0x24
 80082cc:	ac12      	add	r4, sp, #72	; 0x48
 80082ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80082d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	4688      	mov	r8, r1
 80082e4:	f89d b078 	ldrb.w	fp, [sp, #120]	; 0x78
 80082e8:	4682      	mov	sl, r0
 80082ea:	f7ff f821 	bl	8007330 <UpdateWatermark1+0x6c>
 80082ee:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80082f2:	f89d 206a 	ldrb.w	r2, [sp, #106]	; 0x6a
 80082f6:	f89d 1069 	ldrb.w	r1, [sp, #105]	; 0x69
 80082fa:	4607      	mov	r7, r0
 80082fc:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8008300:	f7f8 f927 	bl	8000552 <EwPackColor>
 8008304:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 8008308:	f89d 206e 	ldrb.w	r2, [sp, #110]	; 0x6e
 800830c:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 8008310:	4604      	mov	r4, r0
 8008312:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8008316:	f7f8 f91c 	bl	8000552 <EwPackColor>
 800831a:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 800831e:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 8008322:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
 8008326:	4681      	mov	r9, r0
 8008328:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
 800832c:	f7f8 f911 	bl	8000552 <EwPackColor>
 8008330:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8008334:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
 8008338:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
 800833c:	4605      	mov	r5, r0
 800833e:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
 8008342:	f7f8 f906 	bl	8000552 <EwPackColor>
 8008346:	4606      	mov	r6, r0
 8008348:	b12f      	cbz	r7, 8008356 <EwFillRectangle+0x92>
 800834a:	6838      	ldr	r0, [r7, #0]
 800834c:	8c03      	ldrh	r3, [r0, #32]
 800834e:	3301      	adds	r3, #1
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b01      	cmp	r3, #1
 8008354:	d908      	bls.n	8008368 <EwFillRectangle+0xa4>
 8008356:	4642      	mov	r2, r8
 8008358:	4651      	mov	r1, sl
 800835a:	209c      	movs	r0, #156	; 0x9c
 800835c:	b009      	add	sp, #36	; 0x24
 800835e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008362:	b002      	add	sp, #8
 8008364:	f010 bcb6 	b.w	8018cd4 <EwErrorPD>
 8008368:	6983      	ldr	r3, [r0, #24]
 800836a:	b90b      	cbnz	r3, 8008370 <EwFillRectangle+0xac>
 800836c:	69c3      	ldr	r3, [r0, #28]
 800836e:	b123      	cbz	r3, 800837a <EwFillRectangle+0xb6>
 8008370:	4642      	mov	r2, r8
 8008372:	4651      	mov	r1, sl
 8008374:	f240 1055 	movw	r0, #341	; 0x155
 8008378:	e7f0      	b.n	800835c <EwFillRectangle+0x98>
 800837a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800837c:	9a04      	ldr	r2, [sp, #16]
 800837e:	9905      	ldr	r1, [sp, #20]
 8008380:	4293      	cmp	r3, r2
 8008382:	bfb8      	it	lt
 8008384:	4613      	movlt	r3, r2
 8008386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008388:	428a      	cmp	r2, r1
 800838a:	bfa8      	it	ge
 800838c:	460a      	movge	r2, r1
 800838e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008392:	428a      	cmp	r2, r1
 8008394:	bfa8      	it	ge
 8008396:	460a      	movge	r2, r1
 8008398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800839c:	429a      	cmp	r2, r3
 800839e:	9200      	str	r2, [sp, #0]
 80083a0:	f340 808b 	ble.w	80084ba <EwFillRectangle+0x1f6>
 80083a4:	9901      	ldr	r1, [sp, #4]
 80083a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083a8:	4291      	cmp	r1, r2
 80083aa:	bfb8      	it	lt
 80083ac:	4611      	movlt	r1, r2
 80083ae:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 80083b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b4:	9902      	ldr	r1, [sp, #8]
 80083b6:	428a      	cmp	r2, r1
 80083b8:	bfa8      	it	ge
 80083ba:	460a      	movge	r2, r1
 80083bc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80083c0:	428a      	cmp	r2, r1
 80083c2:	bfa8      	it	ge
 80083c4:	460a      	movge	r2, r1
 80083c6:	4542      	cmp	r2, r8
 80083c8:	9203      	str	r2, [sp, #12]
 80083ca:	dd76      	ble.n	80084ba <EwFillRectangle+0x1f6>
 80083cc:	f1bb 0f00 	cmp.w	fp, #0
 80083d0:	d00e      	beq.n	80083f0 <EwFillRectangle+0x12c>
 80083d2:	ea44 0209 	orr.w	r2, r4, r9
 80083d6:	432a      	orrs	r2, r5
 80083d8:	4332      	orrs	r2, r6
 80083da:	0e12      	lsrs	r2, r2, #24
 80083dc:	d06d      	beq.n	80084ba <EwFillRectangle+0x1f6>
 80083de:	ea04 0209 	and.w	r2, r4, r9
 80083e2:	402a      	ands	r2, r5
 80083e4:	4032      	ands	r2, r6
 80083e6:	0e12      	lsrs	r2, r2, #24
 80083e8:	2aff      	cmp	r2, #255	; 0xff
 80083ea:	bf08      	it	eq
 80083ec:	f04f 0b00 	moveq.w	fp, #0
 80083f0:	9306      	str	r3, [sp, #24]
 80083f2:	f00a fe85 	bl	8013100 <EwInitIssue>
 80083f6:	9b06      	ldr	r3, [sp, #24]
 80083f8:	4602      	mov	r2, r0
 80083fa:	b910      	cbnz	r0, 8008402 <EwFillRectangle+0x13e>
 80083fc:	4651      	mov	r1, sl
 80083fe:	207c      	movs	r0, #124	; 0x7c
 8008400:	e7ac      	b.n	800835c <EwFillRectangle+0x98>
 8008402:	2118      	movs	r1, #24
 8008404:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8008408:	f00a ff1b 	bl	8013242 <EwAllocTaskData>
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	8939      	ldrh	r1, [r7, #8]
 8008410:	9a06      	ldr	r2, [sp, #24]
 8008412:	4682      	mov	sl, r0
 8008414:	88b8      	ldrh	r0, [r7, #4]
 8008416:	4403      	add	r3, r0
 8008418:	f8aa 3000 	strh.w	r3, [sl]
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	440b      	add	r3, r1
 8008420:	f8aa 3002 	strh.w	r3, [sl, #2]
 8008424:	9b05      	ldr	r3, [sp, #20]
 8008426:	4418      	add	r0, r3
 8008428:	9b02      	ldr	r3, [sp, #8]
 800842a:	f8aa 0004 	strh.w	r0, [sl, #4]
 800842e:	4419      	add	r1, r3
 8008430:	f8aa 1006 	strh.w	r1, [sl, #6]
 8008434:	4610      	mov	r0, r2
 8008436:	2100      	movs	r1, #0
 8008438:	e9ca 4902 	strd	r4, r9, [sl, #8]
 800843c:	e9ca 6504 	strd	r6, r5, [sl, #16]
 8008440:	f00a fec6 	bl	80131d0 <EwAllocTask>
 8008444:	2201      	movs	r2, #1
 8008446:	9b07      	ldr	r3, [sp, #28]
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	8082      	strh	r2, [r0, #4]
 800844c:	88ba      	ldrh	r2, [r7, #4]
 800844e:	f8c0 a010 	str.w	sl, [r0, #16]
 8008452:	4413      	add	r3, r2
 8008454:	440a      	add	r2, r1
 8008456:	8103      	strh	r3, [r0, #8]
 8008458:	893b      	ldrh	r3, [r7, #8]
 800845a:	8182      	strh	r2, [r0, #12]
 800845c:	9a03      	ldr	r2, [sp, #12]
 800845e:	4498      	add	r8, r3
 8008460:	f1bb 0f00 	cmp.w	fp, #0
 8008464:	4413      	add	r3, r2
 8008466:	81c3      	strh	r3, [r0, #14]
 8008468:	f240 1301 	movw	r3, #257	; 0x101
 800846c:	bf08      	it	eq
 800846e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8008472:	454c      	cmp	r4, r9
 8008474:	f8a0 800a 	strh.w	r8, [r0, #10]
 8008478:	d014      	beq.n	80084a4 <EwFillRectangle+0x1e0>
 800847a:	42b5      	cmp	r5, r6
 800847c:	d016      	beq.n	80084ac <EwFillRectangle+0x1e8>
 800847e:	42ac      	cmp	r4, r5
 8008480:	d114      	bne.n	80084ac <EwFillRectangle+0x1e8>
 8008482:	45b1      	cmp	r9, r6
 8008484:	d112      	bne.n	80084ac <EwFillRectangle+0x1e8>
 8008486:	f043 0306 	orr.w	r3, r3, #6
 800848a:	80c3      	strh	r3, [r0, #6]
 800848c:	6838      	ldr	r0, [r7, #0]
 800848e:	b009      	add	sp, #36	; 0x24
 8008490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	b002      	add	sp, #8
 8008496:	f00a bf43 	b.w	8013320 <EwDoneIssue>
 800849a:	42b5      	cmp	r5, r6
 800849c:	e7f2      	b.n	8008484 <EwFillRectangle+0x1c0>
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	e7f2      	b.n	800848a <EwFillRectangle+0x1c6>
 80084a4:	42ac      	cmp	r4, r5
 80084a6:	d104      	bne.n	80084b2 <EwFillRectangle+0x1ee>
 80084a8:	42b4      	cmp	r4, r6
 80084aa:	d0f8      	beq.n	800849e <EwFillRectangle+0x1da>
 80084ac:	f043 0304 	orr.w	r3, r3, #4
 80084b0:	e7eb      	b.n	800848a <EwFillRectangle+0x1c6>
 80084b2:	42b4      	cmp	r4, r6
 80084b4:	d1f1      	bne.n	800849a <EwFillRectangle+0x1d6>
 80084b6:	42a5      	cmp	r5, r4
 80084b8:	e7f7      	b.n	80084aa <EwFillRectangle+0x1e6>
 80084ba:	b009      	add	sp, #36	; 0x24
 80084bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	b002      	add	sp, #8
 80084c2:	4770      	bx	lr

080084c4 <EwDrawBorder>:
 80084c4:	b082      	sub	sp, #8
 80084c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	b09b      	sub	sp, #108	; 0x6c
 80084cc:	4689      	mov	r9, r1
 80084ce:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 80084d0:	f89d b0c4 	ldrb.w	fp, [sp, #196]	; 0xc4
 80084d4:	a924      	add	r1, sp, #144	; 0x90
 80084d6:	2e00      	cmp	r6, #0
 80084d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80084dc:	4680      	mov	r8, r0
 80084de:	dd2a      	ble.n	8008536 <EwDrawBorder+0x72>
 80084e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80084e2:	9310      	str	r3, [sp, #64]	; 0x40
 80084e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80084e8:	930d      	str	r3, [sp, #52]	; 0x34
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	ebb3 0f46 	cmp.w	r3, r6, lsl #1
 80084f0:	ea4f 0146 	mov.w	r1, r6, lsl #1
 80084f4:	dd06      	ble.n	8008504 <EwDrawBorder+0x40>
 80084f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80084f8:	f8dd a0ac 	ldr.w	sl, [sp, #172]	; 0xac
 80084fc:	ebaa 0203 	sub.w	r2, sl, r3
 8008500:	4291      	cmp	r1, r2
 8008502:	db1d      	blt.n	8008540 <EwDrawBorder+0x7c>
 8008504:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008506:	9309      	str	r3, [sp, #36]	; 0x24
 8008508:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800850a:	9308      	str	r3, [sp, #32]
 800850c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008512:	9306      	str	r3, [sp, #24]
 8008514:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008518:	ab28      	add	r3, sp, #160	; 0xa0
 800851a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800851c:	ac02      	add	r4, sp, #8
 800851e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008522:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008526:	e88d 0003 	stmia.w	sp, {r0, r1}
 800852a:	ab24      	add	r3, sp, #144	; 0x90
 800852c:	cb0c      	ldmia	r3, {r2, r3}
 800852e:	4649      	mov	r1, r9
 8008530:	4640      	mov	r0, r8
 8008532:	f7ff fec7 	bl	80082c4 <EwFillRectangle>
 8008536:	b01b      	add	sp, #108	; 0x6c
 8008538:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	b002      	add	sp, #8
 800853e:	4770      	bx	lr
 8008540:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008542:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008546:	18f3      	adds	r3, r6, r3
 8008548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800854a:	9315      	str	r3, [sp, #84]	; 0x54
 800854c:	9311      	str	r3, [sp, #68]	; 0x44
 800854e:	ab01      	add	r3, sp, #4
 8008550:	930e      	str	r3, [sp, #56]	; 0x38
 8008552:	9214      	str	r2, [sp, #80]	; 0x50
 8008554:	ab12      	add	r3, sp, #72	; 0x48
 8008556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800855a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800855e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	ad16      	add	r5, sp, #88	; 0x58
 8008564:	ab24      	add	r3, sp, #144	; 0x90
 8008566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008568:	4628      	mov	r0, r5
 800856a:	f011 fd35 	bl	8019fd8 <EwIntersectRect>
 800856e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008570:	9309      	str	r3, [sp, #36]	; 0x24
 8008572:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008574:	9308      	str	r3, [sp, #32]
 8008576:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008578:	9307      	str	r3, [sp, #28]
 800857a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800857c:	9306      	str	r3, [sp, #24]
 800857e:	ab02      	add	r3, sp, #8
 8008580:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008584:	930f      	str	r3, [sp, #60]	; 0x3c
 8008586:	ab28      	add	r3, sp, #160	; 0xa0
 8008588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800858a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800858c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8008590:	af18      	add	r7, sp, #96	; 0x60
 8008592:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008596:	e88d 0003 	stmia.w	sp, {r0, r1}
 800859a:	4649      	mov	r1, r9
 800859c:	e895 000c 	ldmia.w	r5, {r2, r3}
 80085a0:	4640      	mov	r0, r8
 80085a2:	f7ff fe8f 	bl	80082c4 <EwFillRectangle>
 80085a6:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 80085aa:	ebaa 0a06 	sub.w	sl, sl, r6
 80085ae:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80085b2:	ab12      	add	r3, sp, #72	; 0x48
 80085b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80085b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80085bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	ab24      	add	r3, sp, #144	; 0x90
 80085c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085c4:	4628      	mov	r0, r5
 80085c6:	f011 fd07 	bl	8019fd8 <EwIntersectRect>
 80085ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80085cc:	9309      	str	r3, [sp, #36]	; 0x24
 80085ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80085d4:	9307      	str	r3, [sp, #28]
 80085d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80085d8:	9306      	str	r3, [sp, #24]
 80085da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80085de:	ab28      	add	r3, sp, #160	; 0xa0
 80085e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80085e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80085e8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80085ec:	e88d 0003 	stmia.w	sp, {r0, r1}
 80085f0:	4649      	mov	r1, r9
 80085f2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7ff fe64 	bl	80082c4 <EwFillRectangle>
 80085fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008602:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8008606:	18f3      	adds	r3, r6, r3
 8008608:	9314      	str	r3, [sp, #80]	; 0x50
 800860a:	ab12      	add	r3, sp, #72	; 0x48
 800860c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800860e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008614:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	ab24      	add	r3, sp, #144	; 0x90
 800861a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800861c:	4628      	mov	r0, r5
 800861e:	f011 fcdb 	bl	8019fd8 <EwIntersectRect>
 8008622:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008628:	9308      	str	r3, [sp, #32]
 800862a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800862c:	9307      	str	r3, [sp, #28]
 800862e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008630:	9306      	str	r3, [sp, #24]
 8008632:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008636:	ab28      	add	r3, sp, #160	; 0xa0
 8008638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800863a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800863c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008640:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008644:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008648:	4649      	mov	r1, r9
 800864a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800864e:	4640      	mov	r0, r8
 8008650:	f7ff fe38 	bl	80082c4 <EwFillRectangle>
 8008654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008656:	9314      	str	r3, [sp, #80]	; 0x50
 8008658:	1b9e      	subs	r6, r3, r6
 800865a:	9612      	str	r6, [sp, #72]	; 0x48
 800865c:	ab12      	add	r3, sp, #72	; 0x48
 800865e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008660:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008666:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	ab24      	add	r3, sp, #144	; 0x90
 800866c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800866e:	4628      	mov	r0, r5
 8008670:	f011 fcb2 	bl	8019fd8 <EwIntersectRect>
 8008674:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800867a:	9308      	str	r3, [sp, #32]
 800867c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008682:	9306      	str	r3, [sp, #24]
 8008684:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008688:	ab28      	add	r3, sp, #160	; 0xa0
 800868a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800868c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800868e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008692:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008696:	e88d 0003 	stmia.w	sp, {r0, r1}
 800869a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800869e:	e746      	b.n	800852e <EwDrawBorder+0x6a>

080086a0 <EwCreatePath>:
 80086a0:	f100 0110 	add.w	r1, r0, #16
 80086a4:	2800      	cmp	r0, #0
 80086a6:	b570      	push	{r4, r5, r6, lr}
 80086a8:	4606      	mov	r6, r0
 80086aa:	ea4f 0481 	mov.w	r4, r1, lsl #2
 80086ae:	dd0d      	ble.n	80086cc <EwCreatePath+0x2c>
 80086b0:	4620      	mov	r0, r4
 80086b2:	f021 f85d 	bl	8029770 <EwAlloc>
 80086b6:	4605      	mov	r5, r0
 80086b8:	b950      	cbnz	r0, 80086d0 <EwCreatePath+0x30>
 80086ba:	201b      	movs	r0, #27
 80086bc:	f011 faa4 	bl	8019c08 <EwImmediateReclaimMemory>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1f5      	bne.n	80086b0 <EwCreatePath+0x10>
 80086c4:	201b      	movs	r0, #27
 80086c6:	f010 faef 	bl	8018ca8 <EwError>
 80086ca:	e01f      	b.n	800870c <EwCreatePath+0x6c>
 80086cc:	2500      	movs	r5, #0
 80086ce:	e01d      	b.n	800870c <EwCreatePath+0x6c>
 80086d0:	4621      	mov	r1, r4
 80086d2:	f021 f875 	bl	80297c0 <EwZero>
 80086d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80086da:	626b      	str	r3, [r5, #36]	; 0x24
 80086dc:	636b      	str	r3, [r5, #52]	; 0x34
 80086de:	2301      	movs	r3, #1
 80086e0:	742b      	strb	r3, [r5, #16]
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <EwCreatePath+0x70>)
 80086e4:	602e      	str	r6, [r5, #0]
 80086e6:	6819      	ldr	r1, [r3, #0]
 80086e8:	4421      	add	r1, r4
 80086ea:	6019      	str	r1, [r3, #0]
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <EwCreatePath+0x74>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4291      	cmp	r1, r2
 80086f2:	dd00      	ble.n	80086f6 <EwCreatePath+0x56>
 80086f4:	6019      	str	r1, [r3, #0]
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <EwCreatePath+0x78>)
 80086f8:	4a08      	ldr	r2, [pc, #32]	; (800871c <EwCreatePath+0x7c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	4413      	add	r3, r2
 8008700:	4419      	add	r1, r3
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <EwCreatePath+0x80>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	4291      	cmp	r1, r2
 8008708:	dd00      	ble.n	800870c <EwCreatePath+0x6c>
 800870a:	6019      	str	r1, [r3, #0]
 800870c:	4628      	mov	r0, r5
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	200002e8 	.word	0x200002e8
 8008714:	20000304 	.word	0x20000304
 8008718:	200002d8 	.word	0x200002d8
 800871c:	200002e4 	.word	0x200002e4
 8008720:	200002ec 	.word	0x200002ec

08008724 <EwGetSVGParserStatus>:
 8008724:	4b01      	ldr	r3, [pc, #4]	; (800872c <EwGetSVGParserStatus+0x8>)
 8008726:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	200000f4 	.word	0x200000f4

08008730 <EwGetSVGParserErrorPos>:
 8008730:	4b01      	ldr	r3, [pc, #4]	; (8008738 <EwGetSVGParserErrorPos+0x8>)
 8008732:	6898      	ldr	r0, [r3, #8]
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000000 	.word	0x20000000

0800873c <EwFreePath>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	4604      	mov	r4, r0
 8008740:	2800      	cmp	r0, #0
 8008742:	d035      	beq.n	80087b0 <EwFreePath+0x74>
 8008744:	6803      	ldr	r3, [r0, #0]
 8008746:	4d1b      	ldr	r5, [pc, #108]	; (80087b4 <EwFreePath+0x78>)
 8008748:	f103 0210 	add.w	r2, r3, #16
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8008756:	b97e      	cbnz	r6, 8008778 <EwFreePath+0x3c>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	330f      	adds	r3, #15
 800875e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008762:	1c51      	adds	r1, r2, #1
 8008764:	2900      	cmp	r1, #0
 8008766:	4694      	mov	ip, r2
 8008768:	dc0f      	bgt.n	800878a <EwFreePath+0x4e>
 800876a:	2300      	movs	r3, #0
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	4620      	mov	r0, r4
 8008770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008774:	f020 bffe 	b.w	8029774 <EwFree>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	6837      	ldr	r7, [r6, #0]
 800877c:	3b1c      	subs	r3, #28
 800877e:	4630      	mov	r0, r6
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f020 fff7 	bl	8029774 <EwFree>
 8008786:	63e7      	str	r7, [r4, #60]	; 0x3c
 8008788:	e7e4      	b.n	8008754 <EwFreePath+0x18>
 800878a:	461f      	mov	r7, r3
 800878c:	f853 0904 	ldr.w	r0, [r3], #-4
 8008790:	3a01      	subs	r2, #1
 8008792:	2800      	cmp	r0, #0
 8008794:	d0e5      	beq.n	8008762 <EwFreePath+0x26>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	f8c4 c000 	str.w	ip, [r4]
 800879e:	3201      	adds	r2, #1
 80087a0:	3b24      	subs	r3, #36	; 0x24
 80087a2:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f020 ffe4 	bl	8029774 <EwFree>
 80087ac:	603e      	str	r6, [r7, #0]
 80087ae:	e7d3      	b.n	8008758 <EwFreePath+0x1c>
 80087b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200002e8 	.word	0x200002e8

080087b8 <EwGetMaxNoOfSubPaths>:
 80087b8:	b100      	cbz	r0, 80087bc <EwGetMaxNoOfSubPaths+0x4>
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	4770      	bx	lr

080087be <EwInitSubPath>:
 80087be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	4690      	mov	r8, r2
 80087c6:	4604      	mov	r4, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d037      	beq.n	800883c <EwInitSubPath+0x7e>
 80087cc:	6803      	ldr	r3, [r0, #0]
 80087ce:	428b      	cmp	r3, r1
 80087d0:	dd34      	ble.n	800883c <EwInitSubPath+0x7e>
 80087d2:	2900      	cmp	r1, #0
 80087d4:	db32      	blt.n	800883c <EwInitSubPath+0x7e>
 80087d6:	f100 0940 	add.w	r9, r0, #64	; 0x40
 80087da:	2a00      	cmp	r2, #0
 80087dc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 80087e0:	bfcb      	itete	gt
 80087e2:	00d5      	lslgt	r5, r2, #3
 80087e4:	f04f 0800 	movle.w	r8, #0
 80087e8:	352c      	addgt	r5, #44	; 0x2c
 80087ea:	4645      	movle	r5, r8
 80087ec:	eb09 0a81 	add.w	sl, r9, r1, lsl #2
 80087f0:	b338      	cbz	r0, 8008842 <EwInitSubPath+0x84>
 80087f2:	6807      	ldr	r7, [r0, #0]
 80087f4:	00ff      	lsls	r7, r7, #3
 80087f6:	372c      	adds	r7, #44	; 0x2c
 80087f8:	42bd      	cmp	r5, r7
 80087fa:	d008      	beq.n	800880e <EwInitSubPath+0x50>
 80087fc:	4a24      	ldr	r2, [pc, #144]	; (8008890 <EwInitSubPath+0xd2>)
 80087fe:	6813      	ldr	r3, [r2, #0]
 8008800:	1bdb      	subs	r3, r3, r7
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	f020 ffb6 	bl	8029774 <EwFree>
 8008808:	2300      	movs	r3, #0
 800880a:	f849 3026 	str.w	r3, [r9, r6, lsl #2]
 800880e:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
 8008812:	bb63      	cbnz	r3, 800886e <EwInitSubPath+0xb0>
 8008814:	b35d      	cbz	r5, 800886e <EwInitSubPath+0xb0>
 8008816:	4628      	mov	r0, r5
 8008818:	f020 ffaa 	bl	8029770 <EwAlloc>
 800881c:	f8ca 0000 	str.w	r0, [sl]
 8008820:	b988      	cbnz	r0, 8008846 <EwInitSubPath+0x88>
 8008822:	201c      	movs	r0, #28
 8008824:	f011 f9f0 	bl	8019c08 <EwImmediateReclaimMemory>
 8008828:	2800      	cmp	r0, #0
 800882a:	d1f4      	bne.n	8008816 <EwInitSubPath+0x58>
 800882c:	f859 a026 	ldr.w	sl, [r9, r6, lsl #2]
 8008830:	f1ba 0f00 	cmp.w	sl, #0
 8008834:	d107      	bne.n	8008846 <EwInitSubPath+0x88>
 8008836:	201c      	movs	r0, #28
 8008838:	f010 fa36 	bl	8018ca8 <EwError>
 800883c:	2000      	movs	r0, #0
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	4607      	mov	r7, r0
 8008844:	e7e3      	b.n	800880e <EwInitSubPath+0x50>
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <EwInitSubPath+0xd2>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4415      	add	r5, r2
 800884c:	601d      	str	r5, [r3, #0]
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <EwInitSubPath+0xd6>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4295      	cmp	r5, r2
 8008854:	bfc8      	it	gt
 8008856:	601d      	strgt	r5, [r3, #0]
 8008858:	4a0f      	ldr	r2, [pc, #60]	; (8008898 <EwInitSubPath+0xda>)
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <EwInitSubPath+0xde>)
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4413      	add	r3, r2
 8008862:	441d      	add	r5, r3
 8008864:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <EwInitSubPath+0xe2>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4295      	cmp	r5, r2
 800886a:	bfc8      	it	gt
 800886c:	601d      	strgt	r5, [r3, #0]
 800886e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 8008872:	b140      	cbz	r0, 8008886 <EwInitSubPath+0xc8>
 8008874:	2124      	movs	r1, #36	; 0x24
 8008876:	f020 ffa3 	bl	80297c0 <EwZero>
 800887a:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
 800887e:	2201      	movs	r2, #1
 8008880:	f8c3 8000 	str.w	r8, [r3]
 8008884:	72da      	strb	r2, [r3, #11]
 8008886:	b10f      	cbz	r7, 800888c <EwInitSubPath+0xce>
 8008888:	2300      	movs	r3, #0
 800888a:	7423      	strb	r3, [r4, #16]
 800888c:	2001      	movs	r0, #1
 800888e:	e7d6      	b.n	800883e <EwInitSubPath+0x80>
 8008890:	200002e8 	.word	0x200002e8
 8008894:	20000304 	.word	0x20000304
 8008898:	200002e4 	.word	0x200002e4
 800889c:	200002d8 	.word	0x200002d8
 80088a0:	200002ec 	.word	0x200002ec

080088a4 <EwBeginSubPath>:
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d04a      	beq.n	800893e <EwBeginSubPath+0x9a>
 80088a8:	6803      	ldr	r3, [r0, #0]
 80088aa:	428b      	cmp	r3, r1
 80088ac:	dd47      	ble.n	800893e <EwBeginSubPath+0x9a>
 80088ae:	2900      	cmp	r1, #0
 80088b0:	db45      	blt.n	800893e <EwBeginSubPath+0x9a>
 80088b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d040      	beq.n	800893e <EwBeginSubPath+0x9a>
 80088bc:	ed90 5a09 	vldr	s10, [r0, #36]	; 0x24
 80088c0:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80088c4:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 80088c8:	ed90 6a0c 	vldr	s12, [r0, #48]	; 0x30
 80088cc:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 80088d0:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
 80088d4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80088d8:	eeb4 5a64 	vcmp.f32	s10, s9
 80088dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e0:	d118      	bne.n	8008914 <EwBeginSubPath+0x70>
 80088e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80088e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ea:	d113      	bne.n	8008914 <EwBeginSubPath+0x70>
 80088ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80088f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f4:	d10e      	bne.n	8008914 <EwBeginSubPath+0x70>
 80088f6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80088fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fe:	d109      	bne.n	8008914 <EwBeginSubPath+0x70>
 8008900:	eef4 5a64 	vcmp.f32	s11, s9
 8008904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008908:	d104      	bne.n	8008914 <EwBeginSubPath+0x70>
 800890a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800890e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008912:	d00b      	beq.n	800892c <EwBeginSubPath+0x88>
 8008914:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008918:	ee60 0aa5 	vmul.f32	s1, s1, s11
 800891c:	eee5 7a00 	vfma.f32	s15, s10, s0
 8008920:	eee0 0a06 	vfma.f32	s1, s0, s12
 8008924:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008928:	ee70 0aa6 	vadd.f32	s1, s1, s13
 800892c:	2200      	movs	r2, #0
 800892e:	2101      	movs	r1, #1
 8008930:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8008934:	ed83 0a07 	vstr	s0, [r3, #28]
 8008938:	edc3 0a08 	vstr	s1, [r3, #32]
 800893c:	7402      	strb	r2, [r0, #16]
 800893e:	4770      	bx	lr

08008940 <EwAddSubPathLine>:
 8008940:	b510      	push	{r4, lr}
 8008942:	2800      	cmp	r0, #0
 8008944:	d059      	beq.n	80089fa <EwAddSubPathLine+0xba>
 8008946:	6803      	ldr	r3, [r0, #0]
 8008948:	428b      	cmp	r3, r1
 800894a:	dd56      	ble.n	80089fa <EwAddSubPathLine+0xba>
 800894c:	2900      	cmp	r1, #0
 800894e:	db54      	blt.n	80089fa <EwAddSubPathLine+0xba>
 8008950:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008954:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008956:	2a00      	cmp	r2, #0
 8008958:	d04f      	beq.n	80089fa <EwAddSubPathLine+0xba>
 800895a:	7a91      	ldrb	r1, [r2, #10]
 800895c:	2900      	cmp	r1, #0
 800895e:	d14c      	bne.n	80089fa <EwAddSubPathLine+0xba>
 8008960:	e9d2 4300 	ldrd	r4, r3, [r2]
 8008964:	42a3      	cmp	r3, r4
 8008966:	da4a      	bge.n	80089fe <EwAddSubPathLine+0xbe>
 8008968:	f240 1401 	movw	r4, #257	; 0x101
 800896c:	8114      	strh	r4, [r2, #8]
 800896e:	72d1      	strb	r1, [r2, #11]
 8008970:	ed90 5a09 	vldr	s10, [r0, #36]	; 0x24
 8008974:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8008978:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800897c:	ed90 6a0c 	vldr	s12, [r0, #48]	; 0x30
 8008980:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8008984:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
 8008988:	7401      	strb	r1, [r0, #16]
 800898a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800898e:	eeb4 5a64 	vcmp.f32	s10, s9
 8008992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008996:	d118      	bne.n	80089ca <EwAddSubPathLine+0x8a>
 8008998:	eef5 7a40 	vcmp.f32	s15, #0.0
 800899c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a0:	d113      	bne.n	80089ca <EwAddSubPathLine+0x8a>
 80089a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80089a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089aa:	d10e      	bne.n	80089ca <EwAddSubPathLine+0x8a>
 80089ac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80089b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b4:	d109      	bne.n	80089ca <EwAddSubPathLine+0x8a>
 80089b6:	eef4 5a64 	vcmp.f32	s11, s9
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	d104      	bne.n	80089ca <EwAddSubPathLine+0x8a>
 80089c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80089c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c8:	d00b      	beq.n	80089e2 <EwAddSubPathLine+0xa2>
 80089ca:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80089ce:	ee60 0aa5 	vmul.f32	s1, s1, s11
 80089d2:	eee5 7a00 	vfma.f32	s15, s10, s0
 80089d6:	eee6 0a00 	vfma.f32	s1, s12, s0
 80089da:	ee37 0a87 	vadd.f32	s0, s15, s14
 80089de:	ee70 0aa6 	vadd.f32	s1, s1, s13
 80089e2:	1c58      	adds	r0, r3, #1
 80089e4:	f102 011c 	add.w	r1, r2, #28
 80089e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80089ec:	ed81 0a00 	vstr	s0, [r1]
 80089f0:	edc1 0a01 	vstr	s1, [r1, #4]
 80089f4:	6050      	str	r0, [r2, #4]
 80089f6:	4618      	mov	r0, r3
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	2300      	movs	r3, #0
 80089fc:	e7fb      	b.n	80089f6 <EwAddSubPathLine+0xb6>
 80089fe:	460b      	mov	r3, r1
 8008a00:	e7f9      	b.n	80089f6 <EwAddSubPathLine+0xb6>

08008a02 <EwAddSubPathBezier2>:
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	f340 80a3 	ble.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f000 80a0 	beq.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a10:	6803      	ldr	r3, [r0, #0]
 8008a12:	428b      	cmp	r3, r1
 8008a14:	f340 809c 	ble.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	f2c0 8099 	blt.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a24:	2900      	cmp	r1, #0
 8008a26:	f000 8093 	beq.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a2a:	7a8c      	ldrb	r4, [r1, #10]
 8008a2c:	2c00      	cmp	r4, #0
 8008a2e:	f040 808f 	bne.w	8008b50 <EwAddSubPathBezier2+0x14e>
 8008a32:	684b      	ldr	r3, [r1, #4]
 8008a34:	680d      	ldr	r5, [r1, #0]
 8008a36:	189e      	adds	r6, r3, r2
 8008a38:	42ae      	cmp	r6, r5
 8008a3a:	f300 808b 	bgt.w	8008b54 <EwAddSubPathBezier2+0x152>
 8008a3e:	f240 1501 	movw	r5, #257	; 0x101
 8008a42:	810d      	strh	r5, [r1, #8]
 8008a44:	72cc      	strb	r4, [r1, #11]
 8008a46:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 8008a4a:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8008a4e:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 8008a52:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 8008a56:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8008a5a:	edd0 5a0e 	vldr	s11, [r0, #56]	; 0x38
 8008a5e:	7404      	strb	r4, [r0, #16]
 8008a60:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8008a64:	eef4 4a44 	vcmp.f32	s9, s8
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	d118      	bne.n	8008aa0 <EwAddSubPathBezier2+0x9e>
 8008a6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	d113      	bne.n	8008aa0 <EwAddSubPathBezier2+0x9e>
 8008a78:	eef5 6a40 	vcmp.f32	s13, #0.0
 8008a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a80:	d10e      	bne.n	8008aa0 <EwAddSubPathBezier2+0x9e>
 8008a82:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8008a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8a:	d109      	bne.n	8008aa0 <EwAddSubPathBezier2+0x9e>
 8008a8c:	eeb4 7a44 	vcmp.f32	s14, s8
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	d104      	bne.n	8008aa0 <EwAddSubPathBezier2+0x9e>
 8008a96:	eef5 5a40 	vcmp.f32	s11, #0.0
 8008a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9e:	d017      	beq.n	8008ad0 <EwAddSubPathBezier2+0xce>
 8008aa0:	ee27 6aa0 	vmul.f32	s12, s15, s1
 8008aa4:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8008aa8:	ee67 0a20 	vmul.f32	s1, s14, s1
 8008aac:	ee67 1a21 	vmul.f32	s3, s14, s3
 8008ab0:	eee5 0a00 	vfma.f32	s1, s10, s0
 8008ab4:	eee5 1a01 	vfma.f32	s3, s10, s2
 8008ab8:	eea4 6a80 	vfma.f32	s12, s9, s0
 8008abc:	eee4 7a81 	vfma.f32	s15, s9, s2
 8008ac0:	ee70 0aa5 	vadd.f32	s1, s1, s11
 8008ac4:	ee75 1aa1 	vadd.f32	s3, s11, s3
 8008ac8:	ee36 1aa7 	vadd.f32	s2, s13, s15
 8008acc:	ee36 0a26 	vadd.f32	s0, s12, s13
 8008ad0:	ee07 2a90 	vmov	s15, r2
 8008ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ad8:	f101 041c 	add.w	r4, r1, #28
 8008adc:	ee84 6a27 	vdiv.f32	s12, s8, s15
 8008ae0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	3008      	adds	r0, #8
 8008ae8:	4605      	mov	r5, r0
 8008aea:	edd4 4a00 	vldr	s9, [r4]
 8008aee:	edd4 3a01 	vldr	s7, [r4, #4]
 8008af2:	eeb0 7a46 	vmov.f32	s14, s12
 8008af6:	2401      	movs	r4, #1
 8008af8:	4294      	cmp	r4, r2
 8008afa:	f105 0508 	add.w	r5, r5, #8
 8008afe:	d109      	bne.n	8008b14 <EwAddSubPathBezier2+0x112>
 8008b00:	3c01      	subs	r4, #1
 8008b02:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008b06:	ed80 1a00 	vstr	s2, [r0]
 8008b0a:	edc0 1a01 	vstr	s3, [r0, #4]
 8008b0e:	604e      	str	r6, [r1, #4]
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	ee74 7a47 	vsub.f32	s15, s8, s14
 8008b18:	ee67 5a07 	vmul.f32	s11, s14, s14
 8008b1c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008b20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b24:	3401      	adds	r4, #1
 8008b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008b2e:	ee60 6a27 	vmul.f32	s13, s0, s15
 8008b32:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008b36:	eee4 6a85 	vfma.f32	s13, s9, s10
 8008b3a:	eee3 7a85 	vfma.f32	s15, s7, s10
 8008b3e:	eee1 6a25 	vfma.f32	s13, s2, s11
 8008b42:	eee1 7aa5 	vfma.f32	s15, s3, s11
 8008b46:	ed45 6a02 	vstr	s13, [r5, #-8]
 8008b4a:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008b4e:	e7d3      	b.n	8008af8 <EwAddSubPathBezier2+0xf6>
 8008b50:	2300      	movs	r3, #0
 8008b52:	e7dd      	b.n	8008b10 <EwAddSubPathBezier2+0x10e>
 8008b54:	4623      	mov	r3, r4
 8008b56:	e7db      	b.n	8008b10 <EwAddSubPathBezier2+0x10e>

08008b58 <EwAddSubPathBezier3>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	ed2d 8b02 	vpush	{d8}
 8008b60:	f340 80bf 	ble.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f000 80bc 	beq.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b6a:	6803      	ldr	r3, [r0, #0]
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	f340 80b8 	ble.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b72:	2900      	cmp	r1, #0
 8008b74:	f2c0 80b5 	blt.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	f000 80af 	beq.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b84:	7a8c      	ldrb	r4, [r1, #10]
 8008b86:	2c00      	cmp	r4, #0
 8008b88:	f040 80ab 	bne.w	8008ce2 <EwAddSubPathBezier3+0x18a>
 8008b8c:	684b      	ldr	r3, [r1, #4]
 8008b8e:	680d      	ldr	r5, [r1, #0]
 8008b90:	189e      	adds	r6, r3, r2
 8008b92:	42ae      	cmp	r6, r5
 8008b94:	f300 80a7 	bgt.w	8008ce6 <EwAddSubPathBezier3+0x18e>
 8008b98:	f240 1501 	movw	r5, #257	; 0x101
 8008b9c:	810d      	strh	r5, [r1, #8]
 8008b9e:	72cc      	strb	r4, [r1, #11]
 8008ba0:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 8008ba4:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8008ba8:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 8008bac:	edd0 5a0c 	vldr	s11, [r0, #48]	; 0x30
 8008bb0:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8008bb4:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 8008bb8:	7404      	strb	r4, [r0, #16]
 8008bba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008bbe:	eef4 4a45 	vcmp.f32	s9, s10
 8008bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc6:	d118      	bne.n	8008bfa <EwAddSubPathBezier3+0xa2>
 8008bc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd0:	d113      	bne.n	8008bfa <EwAddSubPathBezier3+0xa2>
 8008bd2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	d10e      	bne.n	8008bfa <EwAddSubPathBezier3+0xa2>
 8008bdc:	eef5 5a40 	vcmp.f32	s11, #0.0
 8008be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be4:	d109      	bne.n	8008bfa <EwAddSubPathBezier3+0xa2>
 8008be6:	eeb4 7a45 	vcmp.f32	s14, s10
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	d104      	bne.n	8008bfa <EwAddSubPathBezier3+0xa2>
 8008bf0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	d023      	beq.n	8008c42 <EwAddSubPathBezier3+0xea>
 8008bfa:	ee27 4aa0 	vmul.f32	s8, s15, s1
 8008bfe:	ee67 3aa1 	vmul.f32	s7, s15, s3
 8008c02:	ee67 0a20 	vmul.f32	s1, s14, s1
 8008c06:	ee67 1a21 	vmul.f32	s3, s14, s3
 8008c0a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008c0e:	ee27 7a22 	vmul.f32	s14, s14, s5
 8008c12:	eee5 0a80 	vfma.f32	s1, s11, s0
 8008c16:	eee5 1a81 	vfma.f32	s3, s11, s2
 8008c1a:	eea5 7a82 	vfma.f32	s14, s11, s4
 8008c1e:	eea4 4a80 	vfma.f32	s8, s9, s0
 8008c22:	eee4 3a81 	vfma.f32	s7, s9, s2
 8008c26:	eee4 7a82 	vfma.f32	s15, s9, s4
 8008c2a:	ee70 0a86 	vadd.f32	s1, s1, s12
 8008c2e:	ee76 1a21 	vadd.f32	s3, s12, s3
 8008c32:	ee76 2a07 	vadd.f32	s5, s12, s14
 8008c36:	ee36 2aa7 	vadd.f32	s4, s13, s15
 8008c3a:	ee36 1aa3 	vadd.f32	s2, s13, s7
 8008c3e:	ee34 0a26 	vadd.f32	s0, s8, s13
 8008c42:	ee07 2a90 	vmov	s15, r2
 8008c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c4a:	f101 041c 	add.w	r4, r1, #28
 8008c4e:	eec5 4a27 	vdiv.f32	s9, s10, s15
 8008c52:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8008c56:	4620      	mov	r0, r4
 8008c58:	3008      	adds	r0, #8
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	ed94 3a00 	vldr	s6, [r4]
 8008c60:	ed94 8a01 	vldr	s16, [r4, #4]
 8008c64:	eef0 6a64 	vmov.f32	s13, s9
 8008c68:	2401      	movs	r4, #1
 8008c6a:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8008c6e:	4294      	cmp	r4, r2
 8008c70:	f105 0508 	add.w	r5, r5, #8
 8008c74:	d10b      	bne.n	8008c8e <EwAddSubPathBezier3+0x136>
 8008c76:	3c01      	subs	r4, #1
 8008c78:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008c7c:	ed80 2a00 	vstr	s4, [r0]
 8008c80:	edc0 2a01 	vstr	s5, [r0, #4]
 8008c84:	604e      	str	r6, [r1, #4]
 8008c86:	ecbd 8b02 	vpop	{d8}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	ee35 7a66 	vsub.f32	s14, s10, s13
 8008c92:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8008c96:	ee67 7a07 	vmul.f32	s15, s14, s14
 8008c9a:	3401      	adds	r4, #1
 8008c9c:	ee67 3a27 	vmul.f32	s7, s14, s15
 8008ca0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008ca4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cac:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008cb0:	ee20 6a27 	vmul.f32	s12, s0, s15
 8008cb4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008cb8:	eea3 6a23 	vfma.f32	s12, s6, s7
 8008cbc:	eee8 7a23 	vfma.f32	s15, s16, s7
 8008cc0:	eea1 6a07 	vfma.f32	s12, s2, s14
 8008cc4:	eee1 7a87 	vfma.f32	s15, s3, s14
 8008cc8:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8008ccc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008cd0:	eea2 6a25 	vfma.f32	s12, s4, s11
 8008cd4:	eee2 7aa5 	vfma.f32	s15, s5, s11
 8008cd8:	ed05 6a02 	vstr	s12, [r5, #-8]
 8008cdc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008ce0:	e7c5      	b.n	8008c6e <EwAddSubPathBezier3+0x116>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e7cf      	b.n	8008c86 <EwAddSubPathBezier3+0x12e>
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	e7cd      	b.n	8008c86 <EwAddSubPathBezier3+0x12e>

08008cea <EwAddSubPathArc>:
 8008cea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cee:	1e16      	subs	r6, r2, #0
 8008cf0:	ed2d 8b0a 	vpush	{d8-d12}
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	eef0 9a40 	vmov.f32	s19, s0
 8008cfc:	eeb0 aa60 	vmov.f32	s20, s1
 8008d00:	eef0 aa41 	vmov.f32	s21, s2
 8008d04:	eeb0 ba61 	vmov.f32	s22, s3
 8008d08:	eeb0 8a42 	vmov.f32	s16, s4
 8008d0c:	eeb0 9a62 	vmov.f32	s18, s5
 8008d10:	dd19      	ble.n	8008d46 <EwAddSubPathArc+0x5c>
 8008d12:	eeb4 2a62 	vcmp.f32	s4, s5
 8008d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1a:	d014      	beq.n	8008d46 <EwAddSubPathArc+0x5c>
 8008d1c:	b198      	cbz	r0, 8008d46 <EwAddSubPathArc+0x5c>
 8008d1e:	6803      	ldr	r3, [r0, #0]
 8008d20:	428b      	cmp	r3, r1
 8008d22:	dd10      	ble.n	8008d46 <EwAddSubPathArc+0x5c>
 8008d24:	2900      	cmp	r1, #0
 8008d26:	db0e      	blt.n	8008d46 <EwAddSubPathArc+0x5c>
 8008d28:	f100 0a40 	add.w	sl, r0, #64	; 0x40
 8008d2c:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f000 80b2 	beq.w	8008e9a <EwAddSubPathArc+0x1b0>
 8008d36:	7a03      	ldrb	r3, [r0, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80bc 	beq.w	8008eb6 <EwAddSubPathArc+0x1cc>
 8008d3e:	f106 0901 	add.w	r9, r6, #1
 8008d42:	7a83      	ldrb	r3, [r0, #10]
 8008d44:	b10b      	cbz	r3, 8008d4a <EwAddSubPathArc+0x60>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e0a7      	b.n	8008e9a <EwAddSubPathArc+0x1b0>
 8008d4a:	6841      	ldr	r1, [r0, #4]
 8008d4c:	6802      	ldr	r2, [r0, #0]
 8008d4e:	eb01 0509 	add.w	r5, r1, r9
 8008d52:	4295      	cmp	r5, r2
 8008d54:	dcf7      	bgt.n	8008d46 <EwAddSubPathArc+0x5c>
 8008d56:	ee07 6a10 	vmov	s14, r6
 8008d5a:	ee79 7a48 	vsub.f32	s15, s18, s16
 8008d5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008d62:	f240 1201 	movw	r2, #257	; 0x101
 8008d66:	8102      	strh	r2, [r0, #8]
 8008d68:	72c3      	strb	r3, [r0, #11]
 8008d6a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8008d6e:	eba9 0506 	sub.w	r5, r9, r6
 8008d72:	7423      	strb	r3, [r4, #16]
 8008d74:	301c      	adds	r0, #28
 8008d76:	440d      	add	r5, r1
 8008d78:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8008d7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008d80:	eeb4 7a67 	vcmp.f32	s14, s15
 8008d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d88:	f040 808b 	bne.w	8008ea2 <EwAddSubPathArc+0x1b8>
 8008d8c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8008d90:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d98:	f040 8083 	bne.w	8008ea2 <EwAddSubPathArc+0x1b8>
 8008d9c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8008da0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da8:	d17b      	bne.n	8008ea2 <EwAddSubPathArc+0x1b8>
 8008daa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8008dae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	d174      	bne.n	8008ea2 <EwAddSubPathArc+0x1b8>
 8008db8:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8008dbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8008dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc4:	d16d      	bne.n	8008ea2 <EwAddSubPathArc+0x1b8>
 8008dc6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	bf14      	ite	ne
 8008dd4:	f04f 0801 	movne.w	r8, #1
 8008dd8:	f04f 0800 	moveq.w	r8, #0
 8008ddc:	3501      	adds	r5, #1
 8008dde:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8008de2:	eef0 ba48 	vmov.f32	s23, s16
 8008de6:	f04f 0b00 	mov.w	fp, #0
 8008dea:	eef5 ca00 	vmov.f32	s25, #80	; 0x3e800000  0.250
 8008dee:	eeb0 0a48 	vmov.f32	s0, s16
 8008df2:	f020 fcf7 	bl	80297e4 <EwMathCos>
 8008df6:	eef0 8a69 	vmov.f32	s17, s19
 8008dfa:	eee0 8a2a 	vfma.f32	s17, s0, s21
 8008dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8008e02:	f020 fce7 	bl	80297d4 <EwMathSin>
 8008e06:	eef0 7a4a 	vmov.f32	s15, s20
 8008e0a:	eee0 7a0b 	vfma.f32	s15, s0, s22
 8008e0e:	f1b8 0f00 	cmp.w	r8, #0
 8008e12:	d017      	beq.n	8008e44 <EwAddSubPathArc+0x15a>
 8008e14:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8008e18:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8008e1c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8008e20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008e28:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8008e2c:	eea6 7aa8 	vfma.f32	s14, s13, s17
 8008e30:	eee6 7a28 	vfma.f32	s15, s12, s17
 8008e34:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8008e38:	ed94 6a0e 	vldr	s12, [r4, #56]	; 0x38
 8008e3c:	ee77 8a26 	vadd.f32	s17, s14, s13
 8008e40:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e44:	f1bb 0f00 	cmp.w	fp, #0
 8008e48:	d117      	bne.n	8008e7a <EwAddSubPathArc+0x190>
 8008e4a:	454e      	cmp	r6, r9
 8008e4c:	da15      	bge.n	8008e7a <EwAddSubPathArc+0x190>
 8008e4e:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008e52:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008e56:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8008e5a:	ee78 5ae6 	vsub.f32	s11, s17, s13
 8008e5e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8008e62:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8008e66:	eeb4 7a6c 	vcmp.f32	s14, s25
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	bf48      	it	mi
 8008e70:	eef0 7a46 	vmovmi.f32	s15, s12
 8008e74:	bf48      	it	mi
 8008e76:	eef0 8a66 	vmovmi.f32	s17, s13
 8008e7a:	f10b 0b01 	add.w	fp, fp, #1
 8008e7e:	455e      	cmp	r6, fp
 8008e80:	ee7b ba8c 	vadd.f32	s23, s23, s24
 8008e84:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008e88:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008e8c:	da0c      	bge.n	8008ea8 <EwAddSubPathArc+0x1be>
 8008e8e:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8008e92:	6858      	ldr	r0, [r3, #4]
 8008e94:	4448      	add	r0, r9
 8008e96:	6058      	str	r0, [r3, #4]
 8008e98:	1b80      	subs	r0, r0, r6
 8008e9a:	ecbd 8b0a 	vpop	{d8-d12}
 8008e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	f04f 0801 	mov.w	r8, #1
 8008ea6:	e799      	b.n	8008ddc <EwAddSubPathArc+0xf2>
 8008ea8:	bf14      	ite	ne
 8008eaa:	eeb0 8a6b 	vmovne.f32	s16, s23
 8008eae:	eeb0 8a49 	vmoveq.f32	s16, s18
 8008eb2:	3508      	adds	r5, #8
 8008eb4:	e79b      	b.n	8008dee <EwAddSubPathArc+0x104>
 8008eb6:	46b1      	mov	r9, r6
 8008eb8:	e743      	b.n	8008d42 <EwAddSubPathArc+0x58>

08008eba <EwAddSubPathCopy>:
 8008eba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebe:	460e      	mov	r6, r1
 8008ec0:	e9dd c408 	ldrd	ip, r4, [sp, #32]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b340      	cbz	r0, 8008f1a <EwAddSubPathCopy+0x60>
 8008ec8:	6801      	ldr	r1, [r0, #0]
 8008eca:	42b1      	cmp	r1, r6
 8008ecc:	dd25      	ble.n	8008f1a <EwAddSubPathCopy+0x60>
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	db23      	blt.n	8008f1a <EwAddSubPathCopy+0x60>
 8008ed2:	b312      	cbz	r2, 8008f1a <EwAddSubPathCopy+0x60>
 8008ed4:	6811      	ldr	r1, [r2, #0]
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	dd1f      	ble.n	8008f1a <EwAddSubPathCopy+0x60>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	db1d      	blt.n	8008f1a <EwAddSubPathCopy+0x60>
 8008ede:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008ee2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008ee4:	b1cb      	cbz	r3, 8008f1a <EwAddSubPathCopy+0x60>
 8008ee6:	f1bc 0f00 	cmp.w	ip, #0
 8008eea:	db16      	blt.n	8008f1a <EwAddSubPathCopy+0x60>
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	f000 808d 	beq.w	800900c <EwAddSubPathCopy+0x152>
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	bfb8      	it	lt
 8008ef6:	eba2 040c 	sublt.w	r4, r2, ip
 8008efa:	eb04 010c 	add.w	r1, r4, ip
 8008efe:	4291      	cmp	r1, r2
 8008f00:	dc0b      	bgt.n	8008f1a <EwAddSubPathCopy+0x60>
 8008f02:	f100 0840 	add.w	r8, r0, #64	; 0x40
 8008f06:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
 8008f0a:	b130      	cbz	r0, 8008f1a <EwAddSubPathCopy+0x60>
 8008f0c:	7a02      	ldrb	r2, [r0, #8]
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	f000 8081 	beq.w	8009016 <EwAddSubPathCopy+0x15c>
 8008f14:	1c67      	adds	r7, r4, #1
 8008f16:	7a81      	ldrb	r1, [r0, #10]
 8008f18:	b109      	cbz	r1, 8008f1e <EwAddSubPathCopy+0x64>
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	e076      	b.n	800900c <EwAddSubPathCopy+0x152>
 8008f1e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008f22:	6802      	ldr	r2, [r0, #0]
 8008f24:	eb0e 0907 	add.w	r9, lr, r7
 8008f28:	4591      	cmp	r9, r2
 8008f2a:	dcf6      	bgt.n	8008f1a <EwAddSubPathCopy+0x60>
 8008f2c:	f240 1201 	movw	r2, #257	; 0x101
 8008f30:	8102      	strh	r2, [r0, #8]
 8008f32:	72c1      	strb	r1, [r0, #11]
 8008f34:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
 8008f38:	7429      	strb	r1, [r5, #16]
 8008f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f3e:	1b3a      	subs	r2, r7, r4
 8008f40:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f44:	301c      	adds	r0, #28
 8008f46:	4472      	add	r2, lr
 8008f48:	f103 011c 	add.w	r1, r3, #28
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8008f54:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8008f58:	d15b      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008f5a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8008f5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f66:	d154      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008f68:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8008f6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d14d      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008f76:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
 8008f7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f82:	d146      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008f84:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8008f88:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f90:	d13f      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008f92:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8008f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9e:	d138      	bne.n	8009012 <EwAddSubPathCopy+0x158>
 8008fa0:	1c62      	adds	r2, r4, #1
 8008fa2:	00d2      	lsls	r2, r2, #3
 8008fa4:	f020 fc14 	bl	80297d0 <EwCopy>
 8008fa8:	e02a      	b.n	8009000 <EwAddSubPathCopy+0x146>
 8008faa:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8008fae:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008fb2:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fba:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
 8008fbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8008fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fcc:	ed40 7a02 	vstr	s15, [r0, #-8]
 8008fd0:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8008fd4:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008fd8:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fe0:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
 8008fe4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008fe8:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
 8008fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff0:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	f100 0008 	add.w	r0, r0, #8
 8008ffa:	f101 0108 	add.w	r1, r1, #8
 8008ffe:	dad4      	bge.n	8008faa <EwAddSubPathCopy+0xf0>
 8009000:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8009004:	6853      	ldr	r3, [r2, #4]
 8009006:	441f      	add	r7, r3
 8009008:	6057      	str	r7, [r2, #4]
 800900a:	1b3c      	subs	r4, r7, r4
 800900c:	4620      	mov	r0, r4
 800900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009012:	2300      	movs	r3, #0
 8009014:	e7ee      	b.n	8008ff4 <EwAddSubPathCopy+0x13a>
 8009016:	4627      	mov	r7, r4
 8009018:	e77d      	b.n	8008f16 <EwAddSubPathCopy+0x5c>

0800901a <EwCloseSubPath>:
 800901a:	b510      	push	{r4, lr}
 800901c:	2800      	cmp	r0, #0
 800901e:	d042      	beq.n	80090a6 <EwCloseSubPath+0x8c>
 8009020:	6803      	ldr	r3, [r0, #0]
 8009022:	428b      	cmp	r3, r1
 8009024:	dd3f      	ble.n	80090a6 <EwCloseSubPath+0x8c>
 8009026:	2900      	cmp	r1, #0
 8009028:	db3d      	blt.n	80090a6 <EwCloseSubPath+0x8c>
 800902a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800902e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009030:	b3cb      	cbz	r3, 80090a6 <EwCloseSubPath+0x8c>
 8009032:	7a9a      	ldrb	r2, [r3, #10]
 8009034:	bbba      	cbnz	r2, 80090a6 <EwCloseSubPath+0x8c>
 8009036:	7a59      	ldrb	r1, [r3, #9]
 8009038:	b3a9      	cbz	r1, 80090a6 <EwCloseSubPath+0x8c>
 800903a:	2101      	movs	r1, #1
 800903c:	725a      	strb	r2, [r3, #9]
 800903e:	7299      	strb	r1, [r3, #10]
 8009040:	7402      	strb	r2, [r0, #16]
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	ed93 7a07 	vldr	s14, [r3, #28]
 8009048:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80090b4 <EwCloseSubPath+0x9a>
 800904c:	f103 021c 	add.w	r2, r3, #28
 8009050:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8009054:	edd0 7a00 	vldr	s15, [r0]
 8009058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800905c:	00cc      	lsls	r4, r1, #3
 800905e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009066:	dc18      	bgt.n	800909a <EwCloseSubPath+0x80>
 8009068:	eddf 6a13 	vldr	s13, [pc, #76]	; 80090b8 <EwCloseSubPath+0x9e>
 800906c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009074:	d411      	bmi.n	800909a <EwCloseSubPath+0x80>
 8009076:	3404      	adds	r4, #4
 8009078:	4422      	add	r2, r4
 800907a:	edd2 7a00 	vldr	s15, [r2]
 800907e:	edd3 5a08 	vldr	s11, [r3, #32]
 8009082:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009086:	eef4 7ac6 	vcmpe.f32	s15, s12
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	dc04      	bgt.n	800909a <EwCloseSubPath+0x80>
 8009090:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	d506      	bpl.n	80090a8 <EwCloseSubPath+0x8e>
 800909a:	3101      	adds	r1, #1
 800909c:	6059      	str	r1, [r3, #4]
 800909e:	ed80 7a02 	vstr	s14, [r0, #8]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	60c3      	str	r3, [r0, #12]
 80090a6:	bd10      	pop	{r4, pc}
 80090a8:	ed80 7a00 	vstr	s14, [r0]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e7f9      	b.n	80090a6 <EwCloseSubPath+0x8c>
 80090b2:	bf00      	nop
 80090b4:	3a83126f 	.word	0x3a83126f
 80090b8:	ba83126f 	.word	0xba83126f

080090bc <EwShiftSubPathNodes>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	460e      	mov	r6, r1
 80090c0:	ed2d 8b02 	vpush	{d8}
 80090c4:	4605      	mov	r5, r0
 80090c6:	eeb0 8a40 	vmov.f32	s16, s0
 80090ca:	eef0 8a60 	vmov.f32	s17, s1
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d051      	beq.n	8009176 <EwShiftSubPathNodes+0xba>
 80090d2:	6803      	ldr	r3, [r0, #0]
 80090d4:	428b      	cmp	r3, r1
 80090d6:	dd4e      	ble.n	8009176 <EwShiftSubPathNodes+0xba>
 80090d8:	2900      	cmp	r1, #0
 80090da:	db4c      	blt.n	8009176 <EwShiftSubPathNodes+0xba>
 80090dc:	f100 0740 	add.w	r7, r0, #64	; 0x40
 80090e0:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d046      	beq.n	8009176 <EwShiftSubPathNodes+0xba>
 80090e8:	7a04      	ldrb	r4, [r0, #8]
 80090ea:	b35c      	cbz	r4, 8009144 <EwShiftSubPathNodes+0x88>
 80090ec:	7a84      	ldrb	r4, [r0, #10]
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	d141      	bne.n	8009176 <EwShiftSubPathNodes+0xba>
 80090f2:	2a00      	cmp	r2, #0
 80090f4:	dd26      	ble.n	8009144 <EwShiftSubPathNodes+0x88>
 80090f6:	6841      	ldr	r1, [r0, #4]
 80090f8:	428a      	cmp	r2, r1
 80090fa:	bfa8      	it	ge
 80090fc:	460a      	movge	r2, r1
 80090fe:	4614      	mov	r4, r2
 8009100:	1a8a      	subs	r2, r1, r2
 8009102:	301c      	adds	r0, #28
 8009104:	3201      	adds	r2, #1
 8009106:	00d2      	lsls	r2, r2, #3
 8009108:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 800910c:	f020 fb5e 	bl	80297cc <EwMove>
 8009110:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009118:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800911c:	d116      	bne.n	800914c <EwShiftSubPathNodes+0x90>
 800911e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	d111      	bne.n	800914c <EwShiftSubPathNodes+0x90>
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	4294      	cmp	r4, r2
 800912c:	eba2 0204 	sub.w	r2, r2, r4
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	bfa8      	it	ge
 8009134:	2100      	movge	r1, #0
 8009136:	f04f 0200 	mov.w	r2, #0
 800913a:	bfb8      	it	lt
 800913c:	2101      	movlt	r1, #1
 800913e:	7259      	strb	r1, [r3, #9]
 8009140:	72da      	strb	r2, [r3, #11]
 8009142:	742a      	strb	r2, [r5, #16]
 8009144:	ecbd 8b02 	vpop	{d8}
 8009148:	4620      	mov	r0, r4
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914c:	6859      	ldr	r1, [r3, #4]
 800914e:	f103 021c 	add.w	r2, r3, #28
 8009152:	2900      	cmp	r1, #0
 8009154:	f102 0208 	add.w	r2, r2, #8
 8009158:	dbe6      	blt.n	8009128 <EwShiftSubPathNodes+0x6c>
 800915a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800915e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009162:	3901      	subs	r1, #1
 8009164:	ed42 7a02 	vstr	s15, [r2, #-8]
 8009168:	ed52 7a01 	vldr	s15, [r2, #-4]
 800916c:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009170:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009174:	e7ed      	b.n	8009152 <EwShiftSubPathNodes+0x96>
 8009176:	2400      	movs	r4, #0
 8009178:	e7e4      	b.n	8009144 <EwShiftSubPathNodes+0x88>

0800917a <EwSetSubPathNode>:
 800917a:	b530      	push	{r4, r5, lr}
 800917c:	2800      	cmp	r0, #0
 800917e:	d05f      	beq.n	8009240 <EwSetSubPathNode+0xc6>
 8009180:	6803      	ldr	r3, [r0, #0]
 8009182:	428b      	cmp	r3, r1
 8009184:	dd5c      	ble.n	8009240 <EwSetSubPathNode+0xc6>
 8009186:	2900      	cmp	r1, #0
 8009188:	db5a      	blt.n	8009240 <EwSetSubPathNode+0xc6>
 800918a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800918e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d055      	beq.n	8009240 <EwSetSubPathNode+0xc6>
 8009194:	685c      	ldr	r4, [r3, #4]
 8009196:	4294      	cmp	r4, r2
 8009198:	db52      	blt.n	8009240 <EwSetSubPathNode+0xc6>
 800919a:	2a00      	cmp	r2, #0
 800919c:	db50      	blt.n	8009240 <EwSetSubPathNode+0xc6>
 800919e:	ed90 5a09 	vldr	s10, [r0, #36]	; 0x24
 80091a2:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80091a6:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 80091aa:	ed90 6a0c 	vldr	s12, [r0, #48]	; 0x30
 80091ae:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 80091b2:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
 80091b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80091ba:	eeb4 5a64 	vcmp.f32	s10, s9
 80091be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c2:	d118      	bne.n	80091f6 <EwSetSubPathNode+0x7c>
 80091c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091cc:	d113      	bne.n	80091f6 <EwSetSubPathNode+0x7c>
 80091ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80091d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d6:	d10e      	bne.n	80091f6 <EwSetSubPathNode+0x7c>
 80091d8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80091dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e0:	d109      	bne.n	80091f6 <EwSetSubPathNode+0x7c>
 80091e2:	eef4 5a64 	vcmp.f32	s11, s9
 80091e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ea:	d104      	bne.n	80091f6 <EwSetSubPathNode+0x7c>
 80091ec:	eef5 6a40 	vcmp.f32	s13, #0.0
 80091f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f4:	d00b      	beq.n	800920e <EwSetSubPathNode+0x94>
 80091f6:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80091fa:	ee60 0aa5 	vmul.f32	s1, s1, s11
 80091fe:	eee5 7a00 	vfma.f32	s15, s10, s0
 8009202:	eee0 0a06 	vfma.f32	s1, s0, s12
 8009206:	ee37 0a87 	vadd.f32	s0, s15, s14
 800920a:	ee70 0aa6 	vadd.f32	s1, s1, s13
 800920e:	f103 011c 	add.w	r1, r3, #28
 8009212:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009216:	ed85 0a00 	vstr	s0, [r5]
 800921a:	edc5 0a01 	vstr	s1, [r5, #4]
 800921e:	b982      	cbnz	r2, 8009242 <EwSetSubPathNode+0xc8>
 8009220:	7a9a      	ldrb	r2, [r3, #10]
 8009222:	b152      	cbz	r2, 800923a <EwSetSubPathNode+0xc0>
 8009224:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8009228:	ed82 0a00 	vstr	s0, [r2]
 800922c:	edc2 0a01 	vstr	s1, [r2, #4]
 8009230:	b91c      	cbnz	r4, 800923a <EwSetSubPathNode+0xc0>
 8009232:	ed83 0a07 	vstr	s0, [r3, #28]
 8009236:	edc3 0a08 	vstr	s1, [r3, #32]
 800923a:	2200      	movs	r2, #0
 800923c:	72da      	strb	r2, [r3, #11]
 800923e:	7402      	strb	r2, [r0, #16]
 8009240:	bd30      	pop	{r4, r5, pc}
 8009242:	4294      	cmp	r4, r2
 8009244:	d1f9      	bne.n	800923a <EwSetSubPathNode+0xc0>
 8009246:	7a9a      	ldrb	r2, [r3, #10]
 8009248:	2a00      	cmp	r2, #0
 800924a:	d1f2      	bne.n	8009232 <EwSetSubPathNode+0xb8>
 800924c:	e7f5      	b.n	800923a <EwSetSubPathNode+0xc0>

0800924e <EwGetSubPathNodeX>:
 800924e:	b190      	cbz	r0, 8009276 <EwGetSubPathNodeX+0x28>
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	428b      	cmp	r3, r1
 8009254:	dd0f      	ble.n	8009276 <EwGetSubPathNodeX+0x28>
 8009256:	2900      	cmp	r1, #0
 8009258:	db0d      	blt.n	8009276 <EwGetSubPathNodeX+0x28>
 800925a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800925e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009260:	b14b      	cbz	r3, 8009276 <EwGetSubPathNodeX+0x28>
 8009262:	6859      	ldr	r1, [r3, #4]
 8009264:	4291      	cmp	r1, r2
 8009266:	db06      	blt.n	8009276 <EwGetSubPathNodeX+0x28>
 8009268:	2a00      	cmp	r2, #0
 800926a:	db04      	blt.n	8009276 <EwGetSubPathNodeX+0x28>
 800926c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009270:	ed93 0a07 	vldr	s0, [r3, #28]
 8009274:	4770      	bx	lr
 8009276:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800927c <EwGetSubPathNodeX+0x2e>
 800927a:	4770      	bx	lr
 800927c:	00000000 	.word	0x00000000

08009280 <EwGetSubPathNodeY>:
 8009280:	b190      	cbz	r0, 80092a8 <EwGetSubPathNodeY+0x28>
 8009282:	6803      	ldr	r3, [r0, #0]
 8009284:	428b      	cmp	r3, r1
 8009286:	dd0f      	ble.n	80092a8 <EwGetSubPathNodeY+0x28>
 8009288:	2900      	cmp	r1, #0
 800928a:	db0d      	blt.n	80092a8 <EwGetSubPathNodeY+0x28>
 800928c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009290:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009292:	b14b      	cbz	r3, 80092a8 <EwGetSubPathNodeY+0x28>
 8009294:	6859      	ldr	r1, [r3, #4]
 8009296:	4291      	cmp	r1, r2
 8009298:	db06      	blt.n	80092a8 <EwGetSubPathNodeY+0x28>
 800929a:	2a00      	cmp	r2, #0
 800929c:	db04      	blt.n	80092a8 <EwGetSubPathNodeY+0x28>
 800929e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a2:	ed93 0a08 	vldr	s0, [r3, #32]
 80092a6:	4770      	bx	lr
 80092a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092b0 <EwGetSubPathNodeY+0x30>
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	00000000 	.word	0x00000000

080092b4 <EwSetNoOfSubPathEdges>:
 80092b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	460f      	mov	r7, r1
 80092ba:	4606      	mov	r6, r0
 80092bc:	b360      	cbz	r0, 8009318 <EwSetNoOfSubPathEdges+0x64>
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	428b      	cmp	r3, r1
 80092c2:	dd29      	ble.n	8009318 <EwSetNoOfSubPathEdges+0x64>
 80092c4:	2900      	cmp	r1, #0
 80092c6:	db27      	blt.n	8009318 <EwSetNoOfSubPathEdges+0x64>
 80092c8:	f100 0840 	add.w	r8, r0, #64	; 0x40
 80092cc:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 80092d0:	b313      	cbz	r3, 8009318 <EwSetNoOfSubPathEdges+0x64>
 80092d2:	7a99      	ldrb	r1, [r3, #10]
 80092d4:	bb01      	cbnz	r1, 8009318 <EwSetNoOfSubPathEdges+0x64>
 80092d6:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	6858      	ldr	r0, [r3, #4]
 80092de:	4294      	cmp	r4, r2
 80092e0:	bfa8      	it	ge
 80092e2:	4614      	movge	r4, r2
 80092e4:	1a25      	subs	r5, r4, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d013      	beq.n	8009312 <EwSetNoOfSubPathEdges+0x5e>
 80092ea:	dd05      	ble.n	80092f8 <EwSetNoOfSubPathEdges+0x44>
 80092ec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80092f0:	00e9      	lsls	r1, r5, #3
 80092f2:	3024      	adds	r0, #36	; 0x24
 80092f4:	f020 fa64 	bl	80297c0 <EwZero>
 80092f8:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	605c      	str	r4, [r3, #4]
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	bfd4      	ite	le
 8009306:	2400      	movle	r4, #0
 8009308:	2401      	movgt	r4, #1
 800930a:	721c      	strb	r4, [r3, #8]
 800930c:	725c      	strb	r4, [r3, #9]
 800930e:	72da      	strb	r2, [r3, #11]
 8009310:	7432      	strb	r2, [r6, #16]
 8009312:	4628      	mov	r0, r5
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	2500      	movs	r5, #0
 800931a:	e7fa      	b.n	8009312 <EwSetNoOfSubPathEdges+0x5e>

0800931c <EwGetNoOfSubPathEdges>:
 800931c:	b158      	cbz	r0, 8009336 <EwGetNoOfSubPathEdges+0x1a>
 800931e:	6803      	ldr	r3, [r0, #0]
 8009320:	428b      	cmp	r3, r1
 8009322:	dd07      	ble.n	8009334 <EwGetNoOfSubPathEdges+0x18>
 8009324:	2900      	cmp	r1, #0
 8009326:	db05      	blt.n	8009334 <EwGetNoOfSubPathEdges+0x18>
 8009328:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800932c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800932e:	b110      	cbz	r0, 8009336 <EwGetNoOfSubPathEdges+0x1a>
 8009330:	6840      	ldr	r0, [r0, #4]
 8009332:	4770      	bx	lr
 8009334:	2000      	movs	r0, #0
 8009336:	4770      	bx	lr

08009338 <EwGetNoOfFreeSubPathEdges>:
 8009338:	b178      	cbz	r0, 800935a <EwGetNoOfFreeSubPathEdges+0x22>
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	428b      	cmp	r3, r1
 800933e:	dd0b      	ble.n	8009358 <EwGetNoOfFreeSubPathEdges+0x20>
 8009340:	2900      	cmp	r1, #0
 8009342:	db09      	blt.n	8009358 <EwGetNoOfFreeSubPathEdges+0x20>
 8009344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009348:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800934a:	b130      	cbz	r0, 800935a <EwGetNoOfFreeSubPathEdges+0x22>
 800934c:	7a83      	ldrb	r3, [r0, #10]
 800934e:	b91b      	cbnz	r3, 8009358 <EwGetNoOfFreeSubPathEdges+0x20>
 8009350:	e9d0 3000 	ldrd	r3, r0, [r0]
 8009354:	1a18      	subs	r0, r3, r0
 8009356:	4770      	bx	lr
 8009358:	2000      	movs	r0, #0
 800935a:	4770      	bx	lr
 800935c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800935e:	680c      	ldr	r4, [r1, #0]
 8009360:	460e      	mov	r6, r1
 8009362:	4621      	mov	r1, r4
 8009364:	4605      	mov	r5, r0
 8009366:	f7ff ffe7 	bl	8009338 <EwGetNoOfFreeSubPathEdges>
 800936a:	4290      	cmp	r0, r2
 800936c:	da1f      	bge.n	80093ae <EwGetNoOfFreeSubPathEdges+0x76>
 800936e:	4628      	mov	r0, r5
 8009370:	f7ff ffd4 	bl	800931c <EwGetNoOfSubPathEdges>
 8009374:	3401      	adds	r4, #1
 8009376:	f004 0401 	and.w	r4, r4, #1
 800937a:	bf48      	it	mi
 800937c:	4264      	negmi	r4, r4
 800937e:	4402      	add	r2, r0
 8009380:	4607      	mov	r7, r0
 8009382:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009386:	4621      	mov	r1, r4
 8009388:	4628      	mov	r0, r5
 800938a:	f7ff fa18 	bl	80087be <EwInitSubPath>
 800938e:	b178      	cbz	r0, 80093b0 <EwGetNoOfFreeSubPathEdges+0x78>
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	462a      	mov	r2, r5
 8009396:	6833      	ldr	r3, [r6, #0]
 8009398:	9701      	str	r7, [sp, #4]
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff fd8c 	bl	8008eba <EwAddSubPathCopy>
 80093a2:	6831      	ldr	r1, [r6, #0]
 80093a4:	2201      	movs	r2, #1
 80093a6:	4628      	mov	r0, r5
 80093a8:	f7ff fa09 	bl	80087be <EwInitSubPath>
 80093ac:	6034      	str	r4, [r6, #0]
 80093ae:	2001      	movs	r0, #1
 80093b0:	b003      	add	sp, #12
 80093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093b4 <EwIsSubPathClosed>:
 80093b4:	b178      	cbz	r0, 80093d6 <EwIsSubPathClosed+0x22>
 80093b6:	6803      	ldr	r3, [r0, #0]
 80093b8:	428b      	cmp	r3, r1
 80093ba:	dd0b      	ble.n	80093d4 <EwIsSubPathClosed+0x20>
 80093bc:	2900      	cmp	r1, #0
 80093be:	db09      	blt.n	80093d4 <EwIsSubPathClosed+0x20>
 80093c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80093c4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80093c6:	b118      	cbz	r0, 80093d0 <EwIsSubPathClosed+0x1c>
 80093c8:	7a80      	ldrb	r0, [r0, #10]
 80093ca:	3800      	subs	r0, #0
 80093cc:	bf18      	it	ne
 80093ce:	2001      	movne	r0, #1
 80093d0:	b2c0      	uxtb	r0, r0
 80093d2:	4770      	bx	lr
 80093d4:	2000      	movs	r0, #0
 80093d6:	4770      	bx	lr

080093d8 <EwGetSubPathBounds>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	4615      	mov	r5, r2
 80093de:	4608      	mov	r0, r1
 80093e0:	b149      	cbz	r1, 80093f6 <EwGetSubPathBounds+0x1e>
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	dd06      	ble.n	80093f6 <EwGetSubPathBounds+0x1e>
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	db04      	blt.n	80093f6 <EwGetSubPathBounds+0x1e>
 80093ec:	f101 0640 	add.w	r6, r1, #64	; 0x40
 80093f0:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 80093f4:	b933      	cbnz	r3, 8009404 <EwGetSubPathBounds+0x2c>
 80093f6:	2210      	movs	r2, #16
 80093f8:	2100      	movs	r1, #0
 80093fa:	4620      	mov	r0, r4
 80093fc:	f027 fd3c 	bl	8030e78 <memset>
 8009400:	4620      	mov	r0, r4
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f7fd fd37 	bl	8006e76 <UpdateWatermark2+0xb06>
 8009408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800940c:	330c      	adds	r3, #12
 800940e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009414:	e7f4      	b.n	8009400 <EwGetSubPathBounds+0x28>

08009416 <EwGetPathBounds>:
 8009416:	b538      	push	{r3, r4, r5, lr}
 8009418:	4605      	mov	r5, r0
 800941a:	460c      	mov	r4, r1
 800941c:	b921      	cbnz	r1, 8009428 <EwGetPathBounds+0x12>
 800941e:	2210      	movs	r2, #16
 8009420:	f027 fd2a 	bl	8030e78 <memset>
 8009424:	4628      	mov	r0, r5
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	4608      	mov	r0, r1
 800942a:	f7fd fd24 	bl	8006e76 <UpdateWatermark2+0xb06>
 800942e:	f104 0114 	add.w	r1, r4, #20
 8009432:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8009434:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009438:	e7f4      	b.n	8009424 <EwGetPathBounds+0xe>

0800943a <EwTranslatePathMatrix>:
 800943a:	b1b8      	cbz	r0, 800946c <EwTranslatePathMatrix+0x32>
 800943c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8009440:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8009444:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009448:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800944c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8009450:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8009454:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
 8009458:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 800945c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009460:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8009464:	eee7 7a20 	vfma.f32	s15, s14, s1
 8009468:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800946c:	4770      	bx	lr

0800946e <EwScalePathMatrix>:
 800946e:	b1b8      	cbz	r0, 80094a0 <EwScalePathMatrix+0x32>
 8009470:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8009474:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009478:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800947c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8009480:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009484:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
 8009488:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800948c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009490:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8009494:	ed80 0a0c 	vstr	s0, [r0, #48]	; 0x30
 8009498:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800949c:	edc0 0a0d 	vstr	s1, [r0, #52]	; 0x34
 80094a0:	4770      	bx	lr

080094a2 <EwRotatePathMatrix>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	ed2d 8b02 	vpush	{d8}
 80094a8:	4604      	mov	r4, r0
 80094aa:	eef0 8a40 	vmov.f32	s17, s0
 80094ae:	f020 f991 	bl	80297d4 <EwMathSin>
 80094b2:	eeb0 8a40 	vmov.f32	s16, s0
 80094b6:	eeb0 0a68 	vmov.f32	s0, s17
 80094ba:	f020 f993 	bl	80297e4 <EwMathCos>
 80094be:	b1fc      	cbz	r4, 8009500 <EwRotatePathMatrix+0x5e>
 80094c0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80094c4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80094c8:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
 80094cc:	ee27 6a08 	vmul.f32	s12, s14, s16
 80094d0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80094d4:	eea7 6a80 	vfma.f32	s12, s15, s0
 80094d8:	eea8 7a67 	vfms.f32	s14, s16, s15
 80094dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80094e0:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
 80094e4:	ee67 6a88 	vmul.f32	s13, s15, s16
 80094e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80094ec:	eee5 6a80 	vfma.f32	s13, s11, s0
 80094f0:	eee8 7a65 	vfms.f32	s15, s16, s11
 80094f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80094f8:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 80094fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8009500:	ecbd 8b02 	vpop	{d8}
 8009504:	bd10      	pop	{r4, pc}

08009506 <EwPushPathMatrix>:
 8009506:	b510      	push	{r4, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	2800      	cmp	r0, #0
 800950c:	d030      	beq.n	8009570 <EwPushPathMatrix+0x6a>
 800950e:	201c      	movs	r0, #28
 8009510:	f020 f92e 	bl	8029770 <EwAlloc>
 8009514:	b948      	cbnz	r0, 800952a <EwPushPathMatrix+0x24>
 8009516:	201d      	movs	r0, #29
 8009518:	f010 fb76 	bl	8019c08 <EwImmediateReclaimMemory>
 800951c:	2800      	cmp	r0, #0
 800951e:	d1f6      	bne.n	800950e <EwPushPathMatrix+0x8>
 8009520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009524:	201d      	movs	r0, #29
 8009526:	f00f bbbf 	b.w	8018ca8 <EwError>
 800952a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800952c:	6043      	str	r3, [r0, #4]
 800952e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009530:	6083      	str	r3, [r0, #8]
 8009532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009534:	60c3      	str	r3, [r0, #12]
 8009536:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009538:	6103      	str	r3, [r0, #16]
 800953a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800953c:	6143      	str	r3, [r0, #20]
 800953e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009540:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <EwPushPathMatrix+0x6e>)
 8009542:	6183      	str	r3, [r0, #24]
 8009544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009546:	6003      	str	r3, [r0, #0]
 8009548:	6813      	ldr	r3, [r2, #0]
 800954a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800954c:	331c      	adds	r3, #28
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	4a09      	ldr	r2, [pc, #36]	; (8009578 <EwPushPathMatrix+0x72>)
 8009552:	6811      	ldr	r1, [r2, #0]
 8009554:	428b      	cmp	r3, r1
 8009556:	dd00      	ble.n	800955a <EwPushPathMatrix+0x54>
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	4a08      	ldr	r2, [pc, #32]	; (800957c <EwPushPathMatrix+0x76>)
 800955c:	4908      	ldr	r1, [pc, #32]	; (8009580 <EwPushPathMatrix+0x7a>)
 800955e:	6812      	ldr	r2, [r2, #0]
 8009560:	6809      	ldr	r1, [r1, #0]
 8009562:	440a      	add	r2, r1
 8009564:	4413      	add	r3, r2
 8009566:	4a07      	ldr	r2, [pc, #28]	; (8009584 <EwPushPathMatrix+0x7e>)
 8009568:	6811      	ldr	r1, [r2, #0]
 800956a:	428b      	cmp	r3, r1
 800956c:	dd00      	ble.n	8009570 <EwPushPathMatrix+0x6a>
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	200002e8 	.word	0x200002e8
 8009578:	20000304 	.word	0x20000304
 800957c:	200002d8 	.word	0x200002d8
 8009580:	200002e4 	.word	0x200002e4
 8009584:	200002ec 	.word	0x200002ec

08009588 <EwPopPathMatrix>:
 8009588:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800958a:	b1a3      	cbz	r3, 80095b6 <EwPopPathMatrix+0x2e>
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	6242      	str	r2, [r0, #36]	; 0x24
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	6282      	str	r2, [r0, #40]	; 0x28
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009598:	691a      	ldr	r2, [r3, #16]
 800959a:	6302      	str	r2, [r0, #48]	; 0x30
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	6342      	str	r2, [r0, #52]	; 0x34
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	490a      	ldr	r1, [pc, #40]	; (80095cc <EwPopPathMatrix+0x44>)
 80095a4:	6382      	str	r2, [r0, #56]	; 0x38
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	63c2      	str	r2, [r0, #60]	; 0x3c
 80095aa:	680a      	ldr	r2, [r1, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3a1c      	subs	r2, #28
 80095b0:	600a      	str	r2, [r1, #0]
 80095b2:	f020 b8df 	b.w	8029774 <EwFree>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80095bc:	6242      	str	r2, [r0, #36]	; 0x24
 80095be:	6283      	str	r3, [r0, #40]	; 0x28
 80095c0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80095c2:	6303      	str	r3, [r0, #48]	; 0x30
 80095c4:	6342      	str	r2, [r0, #52]	; 0x34
 80095c6:	6383      	str	r3, [r0, #56]	; 0x38
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	200002e8 	.word	0x200002e8

080095d0 <EwCreatePathFromSVGString>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b0c 	vpush	{d8-d13}
 80095d8:	b095      	sub	sp, #84	; 0x54
 80095da:	4680      	mov	r8, r0
 80095dc:	f7fd fda4 	bl	8007128 <UpdateWatermark2+0xdb8>
 80095e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095e4:	2300      	movs	r3, #0
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	f8df a384 	ldr.w	sl, [pc, #900]	; 8009970 <EwCreatePathFromSVGString+0x3a0>
 80095ee:	f8df b384 	ldr.w	fp, [pc, #900]	; 8009974 <EwCreatePathFromSVGString+0x3a4>
 80095f2:	9309      	str	r3, [sp, #36]	; 0x24
 80095f4:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80095f8:	f04f 0500 	mov.w	r5, #0
 80095fc:	bf4c      	ite	mi
 80095fe:	eeb1 9a40 	vnegmi.f32	s18, s0
 8009602:	eeb0 9a40 	vmovpl.f32	s18, s0
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	930b      	str	r3, [sp, #44]	; 0x2c
 800960e:	930c      	str	r3, [sp, #48]	; 0x30
 8009610:	930d      	str	r3, [sp, #52]	; 0x34
 8009612:	930e      	str	r3, [sp, #56]	; 0x38
 8009614:	930f      	str	r3, [sp, #60]	; 0x3c
 8009616:	9310      	str	r3, [sp, #64]	; 0x40
 8009618:	9311      	str	r3, [sp, #68]	; 0x44
 800961a:	f04f 33ff 	mov.w	r3, #4294967295
 800961e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 8009622:	eeb0 8a40 	vmov.f32	s16, s0
 8009626:	eef0 8a60 	vmov.f32	s17, s1
 800962a:	eef0 aa41 	vmov.f32	s21, s2
 800962e:	eef0 9a61 	vmov.f32	s19, s3
 8009632:	eeb0 aa42 	vmov.f32	s20, s4
 8009636:	4606      	mov	r6, r0
 8009638:	9007      	str	r0, [sp, #28]
 800963a:	bf4c      	ite	mi
 800963c:	eeb1 ba60 	vnegmi.f32	s22, s1
 8009640:	eeb0 ba60 	vmovpl.f32	s22, s1
 8009644:	9508      	str	r5, [sp, #32]
 8009646:	f8ca 5048 	str.w	r5, [sl, #72]	; 0x48
 800964a:	f8cb 3008 	str.w	r3, [fp, #8]
 800964e:	b108      	cbz	r0, 8009654 <EwCreatePathFromSVGString+0x84>
 8009650:	8803      	ldrh	r3, [r0, #0]
 8009652:	b94b      	cbnz	r3, 8009668 <EwCreatePathFromSVGString+0x98>
 8009654:	2301      	movs	r3, #1
 8009656:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 800965a:	2500      	movs	r5, #0
 800965c:	4628      	mov	r0, r5
 800965e:	b015      	add	sp, #84	; 0x54
 8009660:	ecbd 8b0c 	vpop	{d8-d13}
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	f023 0320 	bic.w	r3, r3, #32
 800966c:	2b4d      	cmp	r3, #77	; 0x4d
 800966e:	d117      	bne.n	80096a0 <EwCreatePathFromSVGString+0xd0>
 8009670:	4cbb      	ldr	r4, [pc, #748]	; (8009960 <EwCreatePathFromSVGString+0x390>)
 8009672:	4601      	mov	r1, r0
 8009674:	462a      	mov	r2, r5
 8009676:	4628      	mov	r0, r5
 8009678:	460f      	mov	r7, r1
 800967a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800967e:	b9c3      	cbnz	r3, 80096b2 <EwCreatePathFromSVGString+0xe2>
 8009680:	b105      	cbz	r5, 8009684 <EwCreatePathFromSVGString+0xb4>
 8009682:	9707      	str	r7, [sp, #28]
 8009684:	f7ff f80c 	bl	80086a0 <EwCreatePath>
 8009688:	4605      	mov	r5, r0
 800968a:	bb88      	cbnz	r0, 80096f0 <EwCreatePathFromSVGString+0x120>
 800968c:	9807      	ldr	r0, [sp, #28]
 800968e:	eba0 0008 	sub.w	r0, r0, r8
 8009692:	2304      	movs	r3, #4
 8009694:	1040      	asrs	r0, r0, #1
 8009696:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 800969a:	f8cb 0008 	str.w	r0, [fp, #8]
 800969e:	e7dd      	b.n	800965c <EwCreatePathFromSVGString+0x8c>
 80096a0:	eba0 0608 	sub.w	r6, r0, r8
 80096a4:	2302      	movs	r3, #2
 80096a6:	1076      	asrs	r6, r6, #1
 80096a8:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 80096ac:	f8cb 6008 	str.w	r6, [fp, #8]
 80096b0:	e7d4      	b.n	800965c <EwCreatePathFromSVGString+0x8c>
 80096b2:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
 80096b6:	2d19      	cmp	r5, #25
 80096b8:	bf9c      	itt	ls
 80096ba:	3b20      	subls	r3, #32
 80096bc:	b29b      	uxthls	r3, r3
 80096be:	2b4d      	cmp	r3, #77	; 0x4d
 80096c0:	d103      	bne.n	80096ca <EwCreatePathFromSVGString+0xfa>
 80096c2:	3001      	adds	r0, #1
 80096c4:	2200      	movs	r2, #0
 80096c6:	2501      	movs	r5, #1
 80096c8:	e7d6      	b.n	8009678 <EwCreatePathFromSVGString+0xa8>
 80096ca:	2b5a      	cmp	r3, #90	; 0x5a
 80096cc:	d101      	bne.n	80096d2 <EwCreatePathFromSVGString+0x102>
 80096ce:	3201      	adds	r2, #1
 80096d0:	e7f9      	b.n	80096c6 <EwCreatePathFromSVGString+0xf6>
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	d0f7      	beq.n	80096c6 <EwCreatePathFromSVGString+0xf6>
 80096d6:	3b41      	subs	r3, #65	; 0x41
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b15      	cmp	r3, #21
 80096dc:	d8f3      	bhi.n	80096c6 <EwCreatePathFromSVGString+0xf6>
 80096de:	fa24 f303 	lsr.w	r3, r4, r3
 80096e2:	43db      	mvns	r3, r3
 80096e4:	f013 0301 	ands.w	r3, r3, #1
 80096e8:	bf04      	itt	eq
 80096ea:	3001      	addeq	r0, #1
 80096ec:	461a      	moveq	r2, r3
 80096ee:	e7ea      	b.n	80096c6 <EwCreatePathFromSVGString+0xf6>
 80096f0:	2002      	movs	r0, #2
 80096f2:	f7fe ffd5 	bl	80086a0 <EwCreatePath>
 80096f6:	4604      	mov	r4, r0
 80096f8:	b960      	cbnz	r0, 8009714 <EwCreatePathFromSVGString+0x144>
 80096fa:	4628      	mov	r0, r5
 80096fc:	f7ff f81e 	bl	800873c <EwFreePath>
 8009700:	9807      	ldr	r0, [sp, #28]
 8009702:	eba0 0008 	sub.w	r0, r0, r8
 8009706:	2304      	movs	r3, #4
 8009708:	1040      	asrs	r0, r0, #1
 800970a:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 800970e:	f8cb 0008 	str.w	r0, [fp, #8]
 8009712:	e7a2      	b.n	800965a <EwCreatePathFromSVGString+0x8a>
 8009714:	eef5 aa40 	vcmp.f32	s21, #0.0
 8009718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971c:	d115      	bne.n	800974a <EwCreatePathFromSVGString+0x17a>
 800971e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8009722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009726:	d110      	bne.n	800974a <EwCreatePathFromSVGString+0x17a>
 8009728:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800972c:	eeb4 8a67 	vcmp.f32	s16, s15
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	d109      	bne.n	800974a <EwCreatePathFromSVGString+0x17a>
 8009736:	eef4 9a67 	vcmp.f32	s19, s15
 800973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973e:	d104      	bne.n	800974a <EwCreatePathFromSVGString+0x17a>
 8009740:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8009744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009748:	d011      	beq.n	800976e <EwCreatePathFromSVGString+0x19e>
 800974a:	eef0 0a69 	vmov.f32	s1, s19
 800974e:	4628      	mov	r0, r5
 8009750:	eeb0 0a6a 	vmov.f32	s0, s21
 8009754:	f7ff fe71 	bl	800943a <EwTranslatePathMatrix>
 8009758:	eeb0 0a4a 	vmov.f32	s0, s20
 800975c:	f7ff fea1 	bl	80094a2 <EwRotatePathMatrix>
 8009760:	eef0 0a68 	vmov.f32	s1, s17
 8009764:	eeb0 0a48 	vmov.f32	s0, s16
 8009768:	4628      	mov	r0, r5
 800976a:	f7ff fe80 	bl	800946e <EwScalePathMatrix>
 800976e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009772:	2100      	movs	r1, #0
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff f822 	bl	80087be <EwInitSubPath>
 800977a:	b978      	cbnz	r0, 800979c <EwCreatePathFromSVGString+0x1cc>
 800977c:	4620      	mov	r0, r4
 800977e:	f7fe ffdd 	bl	800873c <EwFreePath>
 8009782:	4628      	mov	r0, r5
 8009784:	f7fe ffda 	bl	800873c <EwFreePath>
 8009788:	2304      	movs	r3, #4
 800978a:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 800978e:	9b07      	ldr	r3, [sp, #28]
 8009790:	eba3 0308 	sub.w	r3, r3, r8
 8009794:	105b      	asrs	r3, r3, #1
 8009796:	f8cb 3008 	str.w	r3, [fp, #8]
 800979a:	e75e      	b.n	800965a <EwCreatePathFromSVGString+0x8a>
 800979c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80097a0:	eddf 7a70 	vldr	s15, [pc, #448]	; 8009964 <EwCreatePathFromSVGString+0x394>
 80097a4:	ed9f 8a70 	vldr	s16, [pc, #448]	; 8009968 <EwCreatePathFromSVGString+0x398>
 80097a8:	eddf 9a70 	vldr	s19, [pc, #448]	; 800996c <EwCreatePathFromSVGString+0x39c>
 80097ac:	9607      	str	r6, [sp, #28]
 80097ae:	ee29 9a27 	vmul.f32	s18, s18, s15
 80097b2:	eef0 8a48 	vmov.f32	s17, s16
 80097b6:	f04f 0900 	mov.w	r9, #0
 80097ba:	9b07      	ldr	r3, [sp, #28]
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b91b      	cbnz	r3, 80097c8 <EwCreatePathFromSVGString+0x1f8>
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7fe ffbb 	bl	800873c <EwFreePath>
 80097c6:	e749      	b.n	800965c <EwCreatePathFromSVGString+0x8c>
 80097c8:	9908      	ldr	r1, [sp, #32]
 80097ca:	eef0 0a48 	vmov.f32	s1, s16
 80097ce:	eeb0 0a68 	vmov.f32	s0, s17
 80097d2:	4620      	mov	r0, r4
 80097d4:	2700      	movs	r7, #0
 80097d6:	f7ff f865 	bl	80088a4 <EwBeginSubPath>
 80097da:	9704      	str	r7, [sp, #16]
 80097dc:	9b07      	ldr	r3, [sp, #28]
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	881e      	ldrh	r6, [r3, #0]
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	f000 854d 	beq.w	800a282 <EwCreatePathFromSVGString+0xcb2>
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	f026 0320 	bic.w	r3, r6, #32
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	b112      	cbz	r2, 80097f8 <EwCreatePathFromSVGString+0x228>
 80097f2:	2b4d      	cmp	r3, #77	; 0x4d
 80097f4:	f000 8545 	beq.w	800a282 <EwCreatePathFromSVGString+0xcb2>
 80097f8:	9a03      	ldr	r2, [sp, #12]
 80097fa:	2b4d      	cmp	r3, #77	; 0x4d
 80097fc:	f102 0002 	add.w	r0, r2, #2
 8009800:	9007      	str	r0, [sp, #28]
 8009802:	d14f      	bne.n	80098a4 <EwCreatePathFromSVGString+0x2d4>
 8009804:	a90a      	add	r1, sp, #40	; 0x28
 8009806:	a807      	add	r0, sp, #28
 8009808:	f7fd fcbe 	bl	8007188 <UpdateWatermark2+0xe18>
 800980c:	2800      	cmp	r0, #0
 800980e:	f000 855b 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009812:	a90b      	add	r1, sp, #44	; 0x2c
 8009814:	a807      	add	r0, sp, #28
 8009816:	f7fd fcb7 	bl	8007188 <UpdateWatermark2+0xe18>
 800981a:	2800      	cmp	r0, #0
 800981c:	f000 8554 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009820:	ed9d 4a0a 	vldr	s8, [sp, #40]	; 0x28
 8009824:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 8009828:	9908      	ldr	r1, [sp, #32]
 800982a:	2e4d      	cmp	r6, #77	; 0x4d
 800982c:	bf1c      	itt	ne
 800982e:	ee34 4a28 	vaddne.f32	s8, s8, s17
 8009832:	ee73 3a88 	vaddne.f32	s7, s7, s16
 8009836:	eeb0 0a44 	vmov.f32	s0, s8
 800983a:	eef0 0a63 	vmov.f32	s1, s7
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff f830 	bl	80088a4 <EwBeginSubPath>
 8009844:	a90a      	add	r1, sp, #40	; 0x28
 8009846:	a807      	add	r0, sp, #28
 8009848:	eeb0 8a63 	vmov.f32	s16, s7
 800984c:	eef0 8a44 	vmov.f32	s17, s8
 8009850:	f7fd fc9a 	bl	8007188 <UpdateWatermark2+0xe18>
 8009854:	b920      	cbnz	r0, 8009860 <EwCreatePathFromSVGString+0x290>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	3301      	adds	r3, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	4637      	mov	r7, r6
 800985e:	e7bd      	b.n	80097dc <EwCreatePathFromSVGString+0x20c>
 8009860:	a90b      	add	r1, sp, #44	; 0x2c
 8009862:	a807      	add	r0, sp, #28
 8009864:	f7fd fc90 	bl	8007188 <UpdateWatermark2+0xe18>
 8009868:	2800      	cmp	r0, #0
 800986a:	f000 852d 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 800986e:	2201      	movs	r2, #1
 8009870:	a908      	add	r1, sp, #32
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff fd72 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009878:	2800      	cmp	r0, #0
 800987a:	f000 853b 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 800987e:	ed9d 4a0a 	vldr	s8, [sp, #40]	; 0x28
 8009882:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 8009886:	9908      	ldr	r1, [sp, #32]
 8009888:	2e4d      	cmp	r6, #77	; 0x4d
 800988a:	bf1c      	itt	ne
 800988c:	ee34 4a28 	vaddne.f32	s8, s8, s17
 8009890:	ee73 3a88 	vaddne.f32	s7, s7, s16
 8009894:	eeb0 0a44 	vmov.f32	s0, s8
 8009898:	eef0 0a63 	vmov.f32	s1, s7
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff f84f 	bl	8008940 <EwAddSubPathLine>
 80098a2:	e7cf      	b.n	8009844 <EwCreatePathFromSVGString+0x274>
 80098a4:	2b4c      	cmp	r3, #76	; 0x4c
 80098a6:	d132      	bne.n	800990e <EwCreatePathFromSVGString+0x33e>
 80098a8:	a90a      	add	r1, sp, #40	; 0x28
 80098aa:	a807      	add	r0, sp, #28
 80098ac:	f7fd fc6c 	bl	8007188 <UpdateWatermark2+0xe18>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	f000 8509 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 80098b6:	a90b      	add	r1, sp, #44	; 0x2c
 80098b8:	a807      	add	r0, sp, #28
 80098ba:	f7fd fc65 	bl	8007188 <UpdateWatermark2+0xe18>
 80098be:	2800      	cmp	r0, #0
 80098c0:	f000 8502 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 80098c4:	2201      	movs	r2, #1
 80098c6:	a908      	add	r1, sp, #32
 80098c8:	4620      	mov	r0, r4
 80098ca:	f7ff fd47 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f000 8510 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 80098d4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80098d8:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 80098dc:	9908      	ldr	r1, [sp, #32]
 80098de:	2e4c      	cmp	r6, #76	; 0x4c
 80098e0:	bf19      	ittee	ne
 80098e2:	ee78 8aa7 	vaddne.f32	s17, s17, s15
 80098e6:	ee38 8a07 	vaddne.f32	s16, s16, s14
 80098ea:	eeb0 8a47 	vmoveq.f32	s16, s14
 80098ee:	eef0 8a67 	vmoveq.f32	s17, s15
 80098f2:	eef0 0a48 	vmov.f32	s1, s16
 80098f6:	eeb0 0a68 	vmov.f32	s0, s17
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7ff f820 	bl	8008940 <EwAddSubPathLine>
 8009900:	a90a      	add	r1, sp, #40	; 0x28
 8009902:	a807      	add	r0, sp, #28
 8009904:	f7fd fc40 	bl	8007188 <UpdateWatermark2+0xe18>
 8009908:	2800      	cmp	r0, #0
 800990a:	d1d4      	bne.n	80098b6 <EwCreatePathFromSVGString+0x2e6>
 800990c:	e7a3      	b.n	8009856 <EwCreatePathFromSVGString+0x286>
 800990e:	2b48      	cmp	r3, #72	; 0x48
 8009910:	d132      	bne.n	8009978 <EwCreatePathFromSVGString+0x3a8>
 8009912:	a90a      	add	r1, sp, #40	; 0x28
 8009914:	a807      	add	r0, sp, #28
 8009916:	f7fd fc37 	bl	8007188 <UpdateWatermark2+0xe18>
 800991a:	2800      	cmp	r0, #0
 800991c:	f000 84d4 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009920:	2201      	movs	r2, #1
 8009922:	a908      	add	r1, sp, #32
 8009924:	4620      	mov	r0, r4
 8009926:	f7ff fd19 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 800992a:	2800      	cmp	r0, #0
 800992c:	f000 84e2 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 8009930:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009934:	9908      	ldr	r1, [sp, #32]
 8009936:	2e48      	cmp	r6, #72	; 0x48
 8009938:	bf14      	ite	ne
 800993a:	ee78 8aa7 	vaddne.f32	s17, s17, s15
 800993e:	eef0 8a67 	vmoveq.f32	s17, s15
 8009942:	eef0 0a48 	vmov.f32	s1, s16
 8009946:	eeb0 0a68 	vmov.f32	s0, s17
 800994a:	4620      	mov	r0, r4
 800994c:	f7fe fff8 	bl	8008940 <EwAddSubPathLine>
 8009950:	a90a      	add	r1, sp, #40	; 0x28
 8009952:	a807      	add	r0, sp, #28
 8009954:	f7fd fc18 	bl	8007188 <UpdateWatermark2+0xe18>
 8009958:	2800      	cmp	r0, #0
 800995a:	d1e1      	bne.n	8009920 <EwCreatePathFromSVGString+0x350>
 800995c:	e77b      	b.n	8009856 <EwCreatePathFromSVGString+0x286>
 800995e:	bf00      	nop
 8009960:	002d0885 	.word	0x002d0885
 8009964:	3d800000 	.word	0x3d800000
 8009968:	00000000 	.word	0x00000000
 800996c:	43b40000 	.word	0x43b40000
 8009970:	200000f4 	.word	0x200000f4
 8009974:	20000000 	.word	0x20000000
 8009978:	2b56      	cmp	r3, #86	; 0x56
 800997a:	d125      	bne.n	80099c8 <EwCreatePathFromSVGString+0x3f8>
 800997c:	a90b      	add	r1, sp, #44	; 0x2c
 800997e:	a807      	add	r0, sp, #28
 8009980:	f7fd fc02 	bl	8007188 <UpdateWatermark2+0xe18>
 8009984:	2800      	cmp	r0, #0
 8009986:	f000 849f 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 800998a:	2201      	movs	r2, #1
 800998c:	a908      	add	r1, sp, #32
 800998e:	4620      	mov	r0, r4
 8009990:	f7ff fce4 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009994:	2800      	cmp	r0, #0
 8009996:	f000 84ad 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 800999a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800999e:	9908      	ldr	r1, [sp, #32]
 80099a0:	2e56      	cmp	r6, #86	; 0x56
 80099a2:	bf14      	ite	ne
 80099a4:	ee38 8a27 	vaddne.f32	s16, s16, s15
 80099a8:	eeb0 8a67 	vmoveq.f32	s16, s15
 80099ac:	eef0 0a48 	vmov.f32	s1, s16
 80099b0:	eeb0 0a68 	vmov.f32	s0, s17
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7fe ffc3 	bl	8008940 <EwAddSubPathLine>
 80099ba:	a90b      	add	r1, sp, #44	; 0x2c
 80099bc:	a807      	add	r0, sp, #28
 80099be:	f7fd fbe3 	bl	8007188 <UpdateWatermark2+0xe18>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1e1      	bne.n	800998a <EwCreatePathFromSVGString+0x3ba>
 80099c6:	e746      	b.n	8009856 <EwCreatePathFromSVGString+0x286>
 80099c8:	2b43      	cmp	r3, #67	; 0x43
 80099ca:	f040 80b7 	bne.w	8009b3c <EwCreatePathFromSVGString+0x56c>
 80099ce:	a90a      	add	r1, sp, #40	; 0x28
 80099d0:	a807      	add	r0, sp, #28
 80099d2:	f7fd fbd9 	bl	8007188 <UpdateWatermark2+0xe18>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f000 8476 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 80099dc:	a90b      	add	r1, sp, #44	; 0x2c
 80099de:	a807      	add	r0, sp, #28
 80099e0:	f7fd fbd2 	bl	8007188 <UpdateWatermark2+0xe18>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f000 846f 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 80099ea:	a90c      	add	r1, sp, #48	; 0x30
 80099ec:	a807      	add	r0, sp, #28
 80099ee:	f7fd fbcb 	bl	8007188 <UpdateWatermark2+0xe18>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	f000 8468 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 80099f8:	a90d      	add	r1, sp, #52	; 0x34
 80099fa:	a807      	add	r0, sp, #28
 80099fc:	f7fd fbc4 	bl	8007188 <UpdateWatermark2+0xe18>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f000 8461 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009a06:	a90e      	add	r1, sp, #56	; 0x38
 8009a08:	a807      	add	r0, sp, #28
 8009a0a:	f7fd fbbd 	bl	8007188 <UpdateWatermark2+0xe18>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f000 845a 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009a14:	a90f      	add	r1, sp, #60	; 0x3c
 8009a16:	a807      	add	r0, sp, #28
 8009a18:	f7fd fbb6 	bl	8007188 <UpdateWatermark2+0xe18>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f000 8453 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009a22:	2e63      	cmp	r6, #99	; 0x63
 8009a24:	d123      	bne.n	8009a6e <EwCreatePathFromSVGString+0x49e>
 8009a26:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009a2a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009a2e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8009a32:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8009a36:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009a3a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8009a3e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009a42:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009a46:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8009a4a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8009a4e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009a52:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8009a56:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8009a5a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009a5e:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
 8009a62:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8009a66:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009a6a:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8009a6e:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009a72:	ee70 8a68 	vsub.f32	s17, s0, s17
 8009a76:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8009a7a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009a7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009a82:	eea8 0aa8 	vfma.f32	s0, s17, s17
 8009a86:	f01f febf 	bl	8029808 <EwMathSqrt>
 8009a8a:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009a8e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009a92:	eeb0 8a40 	vmov.f32	s16, s0
 8009a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a9a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8009a9e:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8009aa2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009aa6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009aaa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009aae:	f01f feab 	bl	8029808 <EwMathSqrt>
 8009ab2:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8009ab6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8009aba:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ac2:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8009ac6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8009aca:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ace:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ad2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009ad6:	f01f fe97 	bl	8029808 <EwMathSqrt>
 8009ada:	ee38 0a00 	vadd.f32	s0, s16, s0
 8009ade:	a908      	add	r1, sp, #32
 8009ae0:	ee20 0a09 	vmul.f32	s0, s0, s18
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009aea:	ee17 2a90 	vmov	r2, s15
 8009aee:	2a07      	cmp	r2, #7
 8009af0:	bfd8      	it	le
 8009af2:	3202      	addle	r2, #2
 8009af4:	3201      	adds	r2, #1
 8009af6:	9203      	str	r2, [sp, #12]
 8009af8:	f7ff fc30 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f000 83f9 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 8009b02:	9908      	ldr	r1, [sp, #32]
 8009b04:	9a03      	ldr	r2, [sp, #12]
 8009b06:	eddd 2a0f 	vldr	s5, [sp, #60]	; 0x3c
 8009b0a:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 8009b0e:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8009b12:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8009b16:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8009b1a:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f7ff f81a 	bl	8008b58 <EwAddSubPathBezier3>
 8009b24:	a90a      	add	r1, sp, #40	; 0x28
 8009b26:	a807      	add	r0, sp, #28
 8009b28:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8009b2c:	ed9d 8a0f 	vldr	s16, [sp, #60]	; 0x3c
 8009b30:	f7fd fb2a 	bl	8007188 <UpdateWatermark2+0xe18>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f47f af51 	bne.w	80099dc <EwCreatePathFromSVGString+0x40c>
 8009b3a:	e68c      	b.n	8009856 <EwCreatePathFromSVGString+0x286>
 8009b3c:	2b53      	cmp	r3, #83	; 0x53
 8009b3e:	f040 80c0 	bne.w	8009cc2 <EwCreatePathFromSVGString+0x6f2>
 8009b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b44:	930a      	str	r3, [sp, #40]	; 0x28
 8009b46:	a90c      	add	r1, sp, #48	; 0x30
 8009b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b4c:	a807      	add	r0, sp, #28
 8009b4e:	f7fd fb1b 	bl	8007188 <UpdateWatermark2+0xe18>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f000 83b8 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009b58:	a90d      	add	r1, sp, #52	; 0x34
 8009b5a:	a807      	add	r0, sp, #28
 8009b5c:	f7fd fb14 	bl	8007188 <UpdateWatermark2+0xe18>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f000 83b1 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009b66:	a90e      	add	r1, sp, #56	; 0x38
 8009b68:	a807      	add	r0, sp, #28
 8009b6a:	f7fd fb0d 	bl	8007188 <UpdateWatermark2+0xe18>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f000 83aa 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009b74:	a90f      	add	r1, sp, #60	; 0x3c
 8009b76:	a807      	add	r0, sp, #28
 8009b78:	f7fd fb06 	bl	8007188 <UpdateWatermark2+0xe18>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f000 83a3 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009b82:	2e73      	cmp	r6, #115	; 0x73
 8009b84:	d117      	bne.n	8009bb6 <EwCreatePathFromSVGString+0x5e6>
 8009b86:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009b8a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009b8e:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8009b92:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8009b96:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009b9a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8009b9e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8009ba2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009ba6:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
 8009baa:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8009bae:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009bb2:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8009bb6:	f027 0730 	bic.w	r7, r7, #48	; 0x30
 8009bba:	b2bf      	uxth	r7, r7
 8009bbc:	2f43      	cmp	r7, #67	; 0x43
 8009bbe:	d17b      	bne.n	8009cb8 <EwCreatePathFromSVGString+0x6e8>
 8009bc0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009bc4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8009bc8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009bcc:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8009bd0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8009bd4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009bd8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009bdc:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8009be0:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009be4:	ee70 8a68 	vsub.f32	s17, s0, s17
 8009be8:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8009bec:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009bf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009bf4:	eea8 0aa8 	vfma.f32	s0, s17, s17
 8009bf8:	f01f fe06 	bl	8029808 <EwMathSqrt>
 8009bfc:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009c00:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009c04:	eeb0 8a40 	vmov.f32	s16, s0
 8009c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c0c:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8009c10:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8009c14:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009c18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c1c:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009c20:	f01f fdf2 	bl	8029808 <EwMathSqrt>
 8009c24:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8009c28:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8009c2c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c34:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8009c38:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8009c3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009c40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c44:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009c48:	f01f fdde 	bl	8029808 <EwMathSqrt>
 8009c4c:	ee38 0a00 	vadd.f32	s0, s16, s0
 8009c50:	a908      	add	r1, sp, #32
 8009c52:	ee20 0a09 	vmul.f32	s0, s0, s18
 8009c56:	4620      	mov	r0, r4
 8009c58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009c5c:	ee17 2a90 	vmov	r2, s15
 8009c60:	2a07      	cmp	r2, #7
 8009c62:	bfd8      	it	le
 8009c64:	3202      	addle	r2, #2
 8009c66:	3201      	adds	r2, #1
 8009c68:	9203      	str	r2, [sp, #12]
 8009c6a:	f7ff fb77 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f000 8340 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 8009c74:	9908      	ldr	r1, [sp, #32]
 8009c76:	9a03      	ldr	r2, [sp, #12]
 8009c78:	eddd 2a0f 	vldr	s5, [sp, #60]	; 0x3c
 8009c7c:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 8009c80:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8009c84:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8009c88:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8009c8c:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7fe ff61 	bl	8008b58 <EwAddSubPathBezier3>
 8009c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c98:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9a:	a90c      	add	r1, sp, #48	; 0x30
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8009ca2:	ed9d 8a0f 	vldr	s16, [sp, #60]	; 0x3c
 8009ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca8:	a807      	add	r0, sp, #28
 8009caa:	f7fd fa6d 	bl	8007188 <UpdateWatermark2+0xe18>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f add1 	beq.w	8009856 <EwCreatePathFromSVGString+0x286>
 8009cb4:	4637      	mov	r7, r6
 8009cb6:	e74f      	b.n	8009b58 <EwCreatePathFromSVGString+0x588>
 8009cb8:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8009cbc:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8009cc0:	e78e      	b.n	8009be0 <EwCreatePathFromSVGString+0x610>
 8009cc2:	2b51      	cmp	r3, #81	; 0x51
 8009cc4:	f040 8084 	bne.w	8009dd0 <EwCreatePathFromSVGString+0x800>
 8009cc8:	a90a      	add	r1, sp, #40	; 0x28
 8009cca:	a807      	add	r0, sp, #28
 8009ccc:	f7fd fa5c 	bl	8007188 <UpdateWatermark2+0xe18>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f000 82f9 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009cd6:	a90b      	add	r1, sp, #44	; 0x2c
 8009cd8:	a807      	add	r0, sp, #28
 8009cda:	f7fd fa55 	bl	8007188 <UpdateWatermark2+0xe18>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f000 82f2 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009ce4:	a90c      	add	r1, sp, #48	; 0x30
 8009ce6:	a807      	add	r0, sp, #28
 8009ce8:	f7fd fa4e 	bl	8007188 <UpdateWatermark2+0xe18>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f000 82eb 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009cf2:	a90d      	add	r1, sp, #52	; 0x34
 8009cf4:	a807      	add	r0, sp, #28
 8009cf6:	f7fd fa47 	bl	8007188 <UpdateWatermark2+0xe18>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f000 82e4 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009d00:	2e71      	cmp	r6, #113	; 0x71
 8009d02:	d117      	bne.n	8009d34 <EwCreatePathFromSVGString+0x764>
 8009d04:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009d08:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009d0c:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8009d10:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8009d14:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009d18:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8009d1c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009d20:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009d24:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8009d28:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8009d2c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009d30:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8009d34:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009d38:	ee70 8a68 	vsub.f32	s17, s0, s17
 8009d3c:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8009d40:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009d44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d48:	eea8 0aa8 	vfma.f32	s0, s17, s17
 8009d4c:	f01f fd5c 	bl	8029808 <EwMathSqrt>
 8009d50:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009d54:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009d58:	eeb0 8a40 	vmov.f32	s16, s0
 8009d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d60:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8009d64:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8009d68:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009d6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d70:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009d74:	f01f fd48 	bl	8029808 <EwMathSqrt>
 8009d78:	ee38 0a00 	vadd.f32	s0, s16, s0
 8009d7c:	a908      	add	r1, sp, #32
 8009d7e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8009d82:	4620      	mov	r0, r4
 8009d84:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009d88:	ee17 2a90 	vmov	r2, s15
 8009d8c:	2a07      	cmp	r2, #7
 8009d8e:	bfd8      	it	le
 8009d90:	3202      	addle	r2, #2
 8009d92:	3201      	adds	r2, #1
 8009d94:	9203      	str	r2, [sp, #12]
 8009d96:	f7ff fae1 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f000 82aa 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 8009da0:	9908      	ldr	r1, [sp, #32]
 8009da2:	9a03      	ldr	r2, [sp, #12]
 8009da4:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8009da8:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8009dac:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8009db0:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7fe fe24 	bl	8008a02 <EwAddSubPathBezier2>
 8009dba:	a90a      	add	r1, sp, #40	; 0x28
 8009dbc:	a807      	add	r0, sp, #28
 8009dbe:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 8009dc2:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
 8009dc6:	f7fd f9df 	bl	8007188 <UpdateWatermark2+0xe18>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d183      	bne.n	8009cd6 <EwCreatePathFromSVGString+0x706>
 8009dce:	e542      	b.n	8009856 <EwCreatePathFromSVGString+0x286>
 8009dd0:	2b54      	cmp	r3, #84	; 0x54
 8009dd2:	f040 8088 	bne.w	8009ee6 <EwCreatePathFromSVGString+0x916>
 8009dd6:	a90c      	add	r1, sp, #48	; 0x30
 8009dd8:	a807      	add	r0, sp, #28
 8009dda:	f7fd f9d5 	bl	8007188 <UpdateWatermark2+0xe18>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f000 8272 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009de4:	a90d      	add	r1, sp, #52	; 0x34
 8009de6:	a807      	add	r0, sp, #28
 8009de8:	f7fd f9ce 	bl	8007188 <UpdateWatermark2+0xe18>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f000 826b 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009df2:	2e74      	cmp	r6, #116	; 0x74
 8009df4:	d10b      	bne.n	8009e0e <EwCreatePathFromSVGString+0x83e>
 8009df6:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009dfa:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8009dfe:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8009e02:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8009e06:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009e0a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8009e0e:	f027 0720 	bic.w	r7, r7, #32
 8009e12:	b2bf      	uxth	r7, r7
 8009e14:	2f51      	cmp	r7, #81	; 0x51
 8009e16:	d001      	beq.n	8009e1c <EwCreatePathFromSVGString+0x84c>
 8009e18:	2f54      	cmp	r7, #84	; 0x54
 8009e1a:	d15f      	bne.n	8009edc <EwCreatePathFromSVGString+0x90c>
 8009e1c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009e20:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8009e24:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009e28:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8009e2c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8009e30:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009e34:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009e38:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8009e3c:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009e40:	ee70 8a68 	vsub.f32	s17, s0, s17
 8009e44:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
 8009e48:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009e4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e50:	eea8 0aa8 	vfma.f32	s0, s17, s17
 8009e54:	f01f fcd8 	bl	8029808 <EwMathSqrt>
 8009e58:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009e5c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8009e60:	eeb0 8a40 	vmov.f32	s16, s0
 8009e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e68:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8009e6c:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8009e70:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009e74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009e78:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8009e7c:	f01f fcc4 	bl	8029808 <EwMathSqrt>
 8009e80:	ee38 0a00 	vadd.f32	s0, s16, s0
 8009e84:	a908      	add	r1, sp, #32
 8009e86:	ee20 0a09 	vmul.f32	s0, s0, s18
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009e90:	ee17 2a90 	vmov	r2, s15
 8009e94:	2a07      	cmp	r2, #7
 8009e96:	bfd8      	it	le
 8009e98:	3202      	addle	r2, #2
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	f7ff fa5d 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f000 8226 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 8009ea8:	9908      	ldr	r1, [sp, #32]
 8009eaa:	9a03      	ldr	r2, [sp, #12]
 8009eac:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
 8009eb0:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
 8009eb4:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8009eb8:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f7fe fda0 	bl	8008a02 <EwAddSubPathBezier2>
 8009ec2:	a90c      	add	r1, sp, #48	; 0x30
 8009ec4:	a807      	add	r0, sp, #28
 8009ec6:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 8009eca:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
 8009ece:	f7fd f95b 	bl	8007188 <UpdateWatermark2+0xe18>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f acbf 	beq.w	8009856 <EwCreatePathFromSVGString+0x286>
 8009ed8:	4637      	mov	r7, r6
 8009eda:	e783      	b.n	8009de4 <EwCreatePathFromSVGString+0x814>
 8009edc:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8009ee0:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8009ee4:	e7aa      	b.n	8009e3c <EwCreatePathFromSVGString+0x86c>
 8009ee6:	2b41      	cmp	r3, #65	; 0x41
 8009ee8:	f040 81b2 	bne.w	800a250 <EwCreatePathFromSVGString+0xc80>
 8009eec:	a910      	add	r1, sp, #64	; 0x40
 8009eee:	a807      	add	r0, sp, #28
 8009ef0:	f7fd f94a 	bl	8007188 <UpdateWatermark2+0xe18>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f000 81e7 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009efa:	ed9f aad2 	vldr	s20, [pc, #840]	; 800a244 <EwCreatePathFromSVGString+0xc74>
 8009efe:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8009f02:	a911      	add	r1, sp, #68	; 0x44
 8009f04:	a807      	add	r0, sp, #28
 8009f06:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8009f0a:	f7fd f93d 	bl	8007188 <UpdateWatermark2+0xe18>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f000 81da 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f14:	a909      	add	r1, sp, #36	; 0x24
 8009f16:	a807      	add	r0, sp, #28
 8009f18:	f7fd f936 	bl	8007188 <UpdateWatermark2+0xe18>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f000 81d3 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f22:	a912      	add	r1, sp, #72	; 0x48
 8009f24:	a807      	add	r0, sp, #28
 8009f26:	f7fd f915 	bl	8007154 <UpdateWatermark2+0xde4>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f000 81cc 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f30:	a913      	add	r1, sp, #76	; 0x4c
 8009f32:	a807      	add	r0, sp, #28
 8009f34:	f7fd f90e 	bl	8007154 <UpdateWatermark2+0xde4>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f000 81c5 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f3e:	a90c      	add	r1, sp, #48	; 0x30
 8009f40:	a807      	add	r0, sp, #28
 8009f42:	f7fd f921 	bl	8007188 <UpdateWatermark2+0xe18>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f000 81be 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f4c:	a90d      	add	r1, sp, #52	; 0x34
 8009f4e:	a807      	add	r0, sp, #28
 8009f50:	f7fd f91a 	bl	8007188 <UpdateWatermark2+0xe18>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f000 81b7 	beq.w	800a2c8 <EwCreatePathFromSVGString+0xcf8>
 8009f5a:	2e61      	cmp	r6, #97	; 0x61
 8009f5c:	d10b      	bne.n	8009f76 <EwCreatePathFromSVGString+0x9a6>
 8009f5e:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 8009f62:	ee70 8a28 	vadd.f32	s17, s0, s17
 8009f66:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8009f6a:	edcd 8a0c 	vstr	s17, [sp, #48]	; 0x30
 8009f6e:	ee30 8a08 	vadd.f32	s16, s0, s16
 8009f72:	ed8d 8a0d 	vstr	s16, [sp, #52]	; 0x34
 8009f76:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8009f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f82:	f240 81d6 	bls.w	800a332 <EwCreatePathFromSVGString+0xd62>
 8009f86:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8009f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f92:	f240 81ce 	bls.w	800a332 <EwCreatePathFromSVGString+0xd62>
 8009f96:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8009f9a:	f01f fc1b 	bl	80297d4 <EwMathSin>
 8009f9e:	eef0 ca40 	vmov.f32	s25, s0
 8009fa2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8009fa6:	f01f fc1d 	bl	80297e4 <EwMathCos>
 8009faa:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
 8009fae:	ed9d ca0b 	vldr	s24, [sp, #44]	; 0x2c
 8009fb2:	ed9d da0c 	vldr	s26, [sp, #48]	; 0x30
 8009fb6:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8009fba:	ee7c 7a66 	vsub.f32	s15, s24, s13
 8009fbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fc6:	ee3b 8a4d 	vsub.f32	s16, s22, s26
 8009fca:	ee6c aaa7 	vmul.f32	s21, s25, s15
 8009fce:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009fd2:	ee3b ba0d 	vadd.f32	s22, s22, s26
 8009fd6:	eee0 aa08 	vfma.f32	s21, s0, s16
 8009fda:	ee3c ca26 	vadd.f32	s24, s24, s13
 8009fde:	ee28 8a6c 	vnmul.f32	s16, s16, s25
 8009fe2:	ee2b da07 	vmul.f32	s26, s22, s14
 8009fe6:	eea0 8a27 	vfma.f32	s16, s0, s15
 8009fea:	ee2c ca07 	vmul.f32	s24, s24, s14
 8009fee:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8009ff2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8009ff6:	ee6a 6aaa 	vmul.f32	s13, s21, s21
 8009ffa:	ee27 7a07 	vmul.f32	s14, s14, s14
 8009ffe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a002:	ee86 ba87 	vdiv.f32	s22, s13, s14
 800a006:	ee68 6a08 	vmul.f32	s13, s16, s16
 800a00a:	eef0 8a40 	vmov.f32	s17, s0
 800a00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a012:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a016:	ee3b ba07 	vadd.f32	s22, s22, s14
 800a01a:	eeb4 bae7 	vcmpe.f32	s22, s15
 800a01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a022:	dd13      	ble.n	800a04c <EwCreatePathFromSVGString+0xa7c>
 800a024:	eeb0 0a4b 	vmov.f32	s0, s22
 800a028:	f01f fbee 	bl	8029808 <EwMathSqrt>
 800a02c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800a030:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a034:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 800a038:	eeb0 0a4b 	vmov.f32	s0, s22
 800a03c:	f01f fbe4 	bl	8029808 <EwMathSqrt>
 800a040:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800a044:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a048:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
 800a04c:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800a050:	eddd ba10 	vldr	s23, [sp, #64]	; 0x40
 800a054:	ee27 baaa 	vmul.f32	s22, s15, s21
 800a058:	ee2b 7aa7 	vmul.f32	s14, s23, s15
 800a05c:	ee6b ba88 	vmul.f32	s23, s23, s16
 800a060:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800a064:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a068:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	f000 815f 	beq.w	800a332 <EwCreatePathFromSVGString+0xd62>
 800a074:	eef0 6a67 	vmov.f32	s13, s15
 800a078:	eed7 6a07 	vfnms.f32	s13, s14, s14
 800a07c:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800a080:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a088:	bf48      	it	mi
 800a08a:	eeb1 0a40 	vnegmi.f32	s0, s0
 800a08e:	f01f fbbb 	bl	8029808 <EwMathSqrt>
 800a092:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a096:	429a      	cmp	r2, r3
 800a098:	bf08      	it	eq
 800a09a:	eeb1 0a40 	vnegeq.f32	s0, s0
 800a09e:	ee60 7a4b 	vnmul.f32	s15, s0, s22
 800a0a2:	eddd 5a10 	vldr	s11, [sp, #64]	; 0x40
 800a0a6:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 800a0aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a0ae:	ee60 ba2b 	vmul.f32	s23, s0, s23
 800a0b2:	ee27 ba6c 	vnmul.f32	s22, s14, s25
 800a0b6:	eecb 6a86 	vdiv.f32	s13, s23, s12
 800a0ba:	ee7a 7ae6 	vsub.f32	s15, s21, s13
 800a0be:	eea8 baa6 	vfma.f32	s22, s17, s13
 800a0c2:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a0c6:	ee3b ba0d 	vadd.f32	s22, s22, s26
 800a0ca:	eeec 8aa6 	vfma.f32	s17, s25, s13
 800a0ce:	eec7 caa5 	vdiv.f32	s25, s15, s11
 800a0d2:	ee7a 7aa6 	vadd.f32	s15, s21, s13
 800a0d6:	ee78 8a8c 	vadd.f32	s17, s17, s24
 800a0da:	eec7 aaa5 	vdiv.f32	s21, s15, s11
 800a0de:	ee78 7a47 	vsub.f32	s15, s16, s14
 800a0e2:	ee38 8a07 	vadd.f32	s16, s16, s14
 800a0e6:	ee87 da86 	vdiv.f32	s26, s15, s12
 800a0ea:	ee88 ca06 	vdiv.f32	s24, s16, s12
 800a0ee:	ee2d 0a0d 	vmul.f32	s0, s26, s26
 800a0f2:	eeac 0aac 	vfma.f32	s0, s25, s25
 800a0f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a102:	f000 8116 	beq.w	800a332 <EwCreatePathFromSVGString+0xd62>
 800a106:	f01f fb7f 	bl	8029808 <EwMathSqrt>
 800a10a:	ee8c 0a80 	vdiv.f32	s0, s25, s0
 800a10e:	f01f fb71 	bl	80297f4 <EwMathArcCos>
 800a112:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 800a116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11a:	eef0 ba40 	vmov.f32	s23, s0
 800a11e:	bf48      	it	mi
 800a120:	eef1 ba40 	vnegmi.f32	s23, s0
 800a124:	ee2c 0a0c 	vmul.f32	s0, s24, s24
 800a128:	eeaa 0aaa 	vfma.f32	s0, s21, s21
 800a12c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a130:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a138:	f000 80fb 	beq.w	800a332 <EwCreatePathFromSVGString+0xd62>
 800a13c:	eef1 da4c 	vneg.f32	s27, s24
 800a140:	ee2c ca4d 	vnmul.f32	s24, s24, s26
 800a144:	f01f fb60 	bl	8029808 <EwMathSqrt>
 800a148:	eeaa caec 	vfms.f32	s24, s21, s25
 800a14c:	ee8c 0a00 	vdiv.f32	s0, s24, s0
 800a150:	f01f fb50 	bl	80297f4 <EwMathArcCos>
 800a154:	ee6a aa8d 	vmul.f32	s21, s21, s26
 800a158:	eeb0 8a40 	vmov.f32	s16, s0
 800a15c:	eeed aaac 	vfma.f32	s21, s27, s25
 800a160:	eef5 aac0 	vcmpe.f32	s21, #0.0
 800a164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a168:	d501      	bpl.n	800a16e <EwCreatePathFromSVGString+0xb9e>
 800a16a:	eeb1 8a40 	vneg.f32	s16, s0
 800a16e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	dc5f      	bgt.n	800a238 <EwCreatePathFromSVGString+0xc68>
 800a178:	eeb4 8aca 	vcmpe.f32	s16, s20
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d45d      	bmi.n	800a23e <EwCreatePathFromSVGString+0xc6e>
 800a182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a184:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 80f1 	bne.w	800a370 <EwCreatePathFromSVGString+0xda0>
 800a18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a192:	dd01      	ble.n	800a198 <EwCreatePathFromSVGString+0xbc8>
 800a194:	ee38 8a69 	vsub.f32	s16, s16, s19
 800a198:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 800a19c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800a1a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a248 <EwCreatePathFromSVGString+0xc78>
 800a1a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a1ac:	a908      	add	r1, sp, #32
 800a1ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a1b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1bc:	ee17 2a90 	vmov	r2, s15
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	bfb8      	it	lt
 800a1c4:	4252      	neglt	r2, r2
 800a1c6:	2a07      	cmp	r2, #7
 800a1c8:	bfd8      	it	le
 800a1ca:	3202      	addle	r2, #2
 800a1cc:	3201      	adds	r2, #1
 800a1ce:	9205      	str	r2, [sp, #20]
 800a1d0:	f7ff f8c4 	bl	800935c <EwGetNoOfFreeSubPathEdges+0x24>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f000 808d 	beq.w	800a2f4 <EwCreatePathFromSVGString+0xd24>
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7ff f993 	bl	8009506 <EwPushPathMatrix>
 800a1e0:	eef0 0a68 	vmov.f32	s1, s17
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	eeb0 0a4b 	vmov.f32	s0, s22
 800a1ea:	f7ff f926 	bl	800943a <EwTranslatePathMatrix>
 800a1ee:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800a1f2:	f7ff f956 	bl	80094a2 <EwRotatePathMatrix>
 800a1f6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a24c <EwCreatePathFromSVGString+0xc7c>
 800a1fa:	9908      	ldr	r1, [sp, #32]
 800a1fc:	9a05      	ldr	r2, [sp, #20]
 800a1fe:	eddd 1a11 	vldr	s3, [sp, #68]	; 0x44
 800a202:	ed9d 1a10 	vldr	s2, [sp, #64]	; 0x40
 800a206:	ee7b 2a88 	vadd.f32	s5, s23, s16
 800a20a:	eeb0 2a6b 	vmov.f32	s4, s23
 800a20e:	eeb0 0a60 	vmov.f32	s0, s1
 800a212:	4620      	mov	r0, r4
 800a214:	f7fe fd69 	bl	8008cea <EwAddSubPathArc>
 800a218:	4620      	mov	r0, r4
 800a21a:	f7ff f9b5 	bl	8009588 <EwPopPathMatrix>
 800a21e:	a910      	add	r1, sp, #64	; 0x40
 800a220:	a807      	add	r0, sp, #28
 800a222:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 800a226:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
 800a22a:	f7fc ffad 	bl	8007188 <UpdateWatermark2+0xe18>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f47f ae65 	bne.w	8009efe <EwCreatePathFromSVGString+0x92e>
 800a234:	f7ff bb0f 	b.w	8009856 <EwCreatePathFromSVGString+0x286>
 800a238:	ee38 8a69 	vsub.f32	s16, s16, s19
 800a23c:	e797      	b.n	800a16e <EwCreatePathFromSVGString+0xb9e>
 800a23e:	ee38 8a29 	vadd.f32	s16, s16, s19
 800a242:	e799      	b.n	800a178 <EwCreatePathFromSVGString+0xba8>
 800a244:	c3b40000 	.word	0xc3b40000
 800a248:	3c0ee7a7 	.word	0x3c0ee7a7
 800a24c:	00000000 	.word	0x00000000
 800a250:	2b5a      	cmp	r3, #90	; 0x5a
 800a252:	9908      	ldr	r1, [sp, #32]
 800a254:	d136      	bne.n	800a2c4 <EwCreatePathFromSVGString+0xcf4>
 800a256:	9103      	str	r1, [sp, #12]
 800a258:	f7fc ff66 	bl	8007128 <UpdateWatermark2+0xdb8>
 800a25c:	9903      	ldr	r1, [sp, #12]
 800a25e:	9007      	str	r0, [sp, #28]
 800a260:	4620      	mov	r0, r4
 800a262:	f7fe feda 	bl	800901a <EwCloseSubPath>
 800a266:	9908      	ldr	r1, [sp, #32]
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7fe ffee 	bl	800924e <EwGetSubPathNodeX>
 800a272:	9903      	ldr	r1, [sp, #12]
 800a274:	4620      	mov	r0, r4
 800a276:	eef0 8a40 	vmov.f32	s17, s0
 800a27a:	f7ff f801 	bl	8009280 <EwGetSubPathNodeY>
 800a27e:	eeb0 8a40 	vmov.f32	s16, s0
 800a282:	9908      	ldr	r1, [sp, #32]
 800a284:	4620      	mov	r0, r4
 800a286:	f7ff f849 	bl	800931c <EwGetNoOfSubPathEdges>
 800a28a:	4649      	mov	r1, r9
 800a28c:	4606      	mov	r6, r0
 800a28e:	4602      	mov	r2, r0
 800a290:	4628      	mov	r0, r5
 800a292:	f7fe fa94 	bl	80087be <EwInitSubPath>
 800a296:	b368      	cbz	r0, 800a2f4 <EwCreatePathFromSVGString+0xd24>
 800a298:	2300      	movs	r3, #0
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4649      	mov	r1, r9
 800a29e:	9b08      	ldr	r3, [sp, #32]
 800a2a0:	9601      	str	r6, [sp, #4]
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f7fe fe08 	bl	8008eba <EwAddSubPathCopy>
 800a2aa:	9908      	ldr	r1, [sp, #32]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f7ff f881 	bl	80093b4 <EwIsSubPathClosed>
 800a2b2:	b118      	cbz	r0, 800a2bc <EwCreatePathFromSVGString+0xcec>
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f7fe feaf 	bl	800901a <EwCloseSubPath>
 800a2bc:	f109 0901 	add.w	r9, r9, #1
 800a2c0:	f7ff ba7b 	b.w	80097ba <EwCreatePathFromSVGString+0x1ea>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	9307      	str	r3, [sp, #28]
 800a2c8:	9908      	ldr	r1, [sp, #32]
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7ff f826 	bl	800931c <EwGetNoOfSubPathEdges>
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7fe fa71 	bl	80087be <EwInitSubPath>
 800a2dc:	b140      	cbz	r0, 800a2f0 <EwCreatePathFromSVGString+0xd20>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	9601      	str	r6, [sp, #4]
 800a2e4:	9b08      	ldr	r3, [sp, #32]
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7fe fde5 	bl	8008eba <EwAddSubPathCopy>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e014      	b.n	800a31e <EwCreatePathFromSVGString+0xd4e>
 800a2f4:	9908      	ldr	r1, [sp, #32]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff f810 	bl	800931c <EwGetNoOfSubPathEdges>
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	4606      	mov	r6, r0
 800a300:	4602      	mov	r2, r0
 800a302:	4628      	mov	r0, r5
 800a304:	f7fe fa5b 	bl	80087be <EwInitSubPath>
 800a308:	b140      	cbz	r0, 800a31c <EwCreatePathFromSVGString+0xd4c>
 800a30a:	2300      	movs	r3, #0
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	9601      	str	r6, [sp, #4]
 800a310:	9b08      	ldr	r3, [sp, #32]
 800a312:	4622      	mov	r2, r4
 800a314:	4649      	mov	r1, r9
 800a316:	4628      	mov	r0, r5
 800a318:	f7fe fdcf 	bl	8008eba <EwAddSubPathCopy>
 800a31c:	2304      	movs	r3, #4
 800a31e:	9807      	ldr	r0, [sp, #28]
 800a320:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 800a324:	eba0 0008 	sub.w	r0, r0, r8
 800a328:	1040      	asrs	r0, r0, #1
 800a32a:	f8cb 0008 	str.w	r0, [fp, #8]
 800a32e:	f7ff ba47 	b.w	80097c0 <EwCreatePathFromSVGString+0x1f0>
 800a332:	9908      	ldr	r1, [sp, #32]
 800a334:	4620      	mov	r0, r4
 800a336:	f7fe fff1 	bl	800931c <EwGetNoOfSubPathEdges>
 800a33a:	4649      	mov	r1, r9
 800a33c:	4606      	mov	r6, r0
 800a33e:	4602      	mov	r2, r0
 800a340:	4628      	mov	r0, r5
 800a342:	f7fe fa3c 	bl	80087be <EwInitSubPath>
 800a346:	b140      	cbz	r0, 800a35a <EwCreatePathFromSVGString+0xd8a>
 800a348:	2300      	movs	r3, #0
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	9601      	str	r6, [sp, #4]
 800a34e:	9b08      	ldr	r3, [sp, #32]
 800a350:	4622      	mov	r2, r4
 800a352:	4649      	mov	r1, r9
 800a354:	4628      	mov	r0, r5
 800a356:	f7fe fdb0 	bl	8008eba <EwAddSubPathCopy>
 800a35a:	4b09      	ldr	r3, [pc, #36]	; (800a380 <EwCreatePathFromSVGString+0xdb0>)
 800a35c:	2203      	movs	r2, #3
 800a35e:	649a      	str	r2, [r3, #72]	; 0x48
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	eba3 0008 	sub.w	r0, r3, r8
 800a366:	4b07      	ldr	r3, [pc, #28]	; (800a384 <EwCreatePathFromSVGString+0xdb4>)
 800a368:	1040      	asrs	r0, r0, #1
 800a36a:	6098      	str	r0, [r3, #8]
 800a36c:	f7ff ba28 	b.w	80097c0 <EwCreatePathFromSVGString+0x1f0>
 800a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a374:	f57f af10 	bpl.w	800a198 <EwCreatePathFromSVGString+0xbc8>
 800a378:	ee38 8a29 	vadd.f32	s16, s16, s19
 800a37c:	e70c      	b.n	800a198 <EwCreatePathFromSVGString+0xbc8>
 800a37e:	bf00      	nop
 800a380:	200000f4 	.word	0x200000f4
 800a384:	20000000 	.word	0x20000000

0800a388 <EwInitPathMatrix>:
 800a388:	b140      	cbz	r0, 800a39c <EwInitPathMatrix+0x14>
 800a38a:	2300      	movs	r3, #0
 800a38c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a390:	6242      	str	r2, [r0, #36]	; 0x24
 800a392:	6283      	str	r3, [r0, #40]	; 0x28
 800a394:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a396:	6303      	str	r3, [r0, #48]	; 0x30
 800a398:	6342      	str	r2, [r0, #52]	; 0x34
 800a39a:	6383      	str	r3, [r0, #56]	; 0x38
 800a39c:	4770      	bx	lr

0800a39e <EwFillPath>:
 800a39e:	b082      	sub	sp, #8
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	ed2d 8b02 	vpush	{d8}
 800a3a8:	b095      	sub	sp, #84	; 0x54
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	9321      	str	r3, [sp, #132]	; 0x84
 800a3ae:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800a3b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a3b4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800a3b8:	9312      	str	r3, [sp, #72]	; 0x48
 800a3ba:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
 800a3be:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3c6:	9306      	str	r3, [sp, #24]
 800a3c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a3d0:	9307      	str	r3, [sp, #28]
 800a3d2:	4616      	mov	r6, r2
 800a3d4:	f89d 70a4 	ldrb.w	r7, [sp, #164]	; 0xa4
 800a3d8:	4681      	mov	r9, r0
 800a3da:	f7fc ffa9 	bl	8007330 <UpdateWatermark1+0x6c>
 800a3de:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
 800a3e2:	f89d 20b2 	ldrb.w	r2, [sp, #178]	; 0xb2
 800a3e6:	f89d 10b1 	ldrb.w	r1, [sp, #177]	; 0xb1
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
 800a3f0:	f7f6 f8af 	bl	8000552 <EwPackColor>
 800a3f4:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 800a3f8:	f89d 20b6 	ldrb.w	r2, [sp, #182]	; 0xb6
 800a3fc:	f89d 10b5 	ldrb.w	r1, [sp, #181]	; 0xb5
 800a400:	4683      	mov	fp, r0
 800a402:	f89d 00b4 	ldrb.w	r0, [sp, #180]	; 0xb4
 800a406:	f7f6 f8a4 	bl	8000552 <EwPackColor>
 800a40a:	f89d 30bf 	ldrb.w	r3, [sp, #191]	; 0xbf
 800a40e:	f89d 20be 	ldrb.w	r2, [sp, #190]	; 0xbe
 800a412:	f89d 10bd 	ldrb.w	r1, [sp, #189]	; 0xbd
 800a416:	9005      	str	r0, [sp, #20]
 800a418:	f89d 00bc 	ldrb.w	r0, [sp, #188]	; 0xbc
 800a41c:	f7f6 f899 	bl	8000552 <EwPackColor>
 800a420:	f89d 30bb 	ldrb.w	r3, [sp, #187]	; 0xbb
 800a424:	9002      	str	r0, [sp, #8]
 800a426:	f89d 20ba 	ldrb.w	r2, [sp, #186]	; 0xba
 800a42a:	f89d 10b9 	ldrb.w	r1, [sp, #185]	; 0xb9
 800a42e:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
 800a432:	f7f6 f88e 	bl	8000552 <EwPackColor>
 800a436:	46a8      	mov	r8, r5
 800a438:	9003      	str	r0, [sp, #12]
 800a43a:	b1d5      	cbz	r5, 800a472 <EwFillPath+0xd4>
 800a43c:	f858 3b40 	ldr.w	r3, [r8], #64
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	2f00      	cmp	r7, #0
 800a444:	bf14      	ite	ne
 800a446:	f04f 33ff 	movne.w	r3, #4294967295
 800a44a:	2301      	moveq	r3, #1
 800a44c:	9311      	str	r3, [sp, #68]	; 0x44
 800a44e:	b12c      	cbz	r4, 800a45c <EwFillPath+0xbe>
 800a450:	6822      	ldr	r2, [r4, #0]
 800a452:	8c13      	ldrh	r3, [r2, #32]
 800a454:	3301      	adds	r3, #1
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d90c      	bls.n	800a476 <EwFillPath+0xd8>
 800a45c:	4632      	mov	r2, r6
 800a45e:	4649      	mov	r1, r9
 800a460:	209d      	movs	r0, #157	; 0x9d
 800a462:	b015      	add	sp, #84	; 0x54
 800a464:	ecbd 8b02 	vpop	{d8}
 800a468:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	b002      	add	sp, #8
 800a46e:	f00e bc31 	b.w	8018cd4 <EwErrorPD>
 800a472:	9504      	str	r5, [sp, #16]
 800a474:	e7e5      	b.n	800a442 <EwFillPath+0xa4>
 800a476:	6993      	ldr	r3, [r2, #24]
 800a478:	b90b      	cbnz	r3, 800a47e <EwFillPath+0xe0>
 800a47a:	69d3      	ldr	r3, [r2, #28]
 800a47c:	b123      	cbz	r3, 800a488 <EwFillPath+0xea>
 800a47e:	4632      	mov	r2, r6
 800a480:	4649      	mov	r1, r9
 800a482:	f44f 70ab 	mov.w	r0, #342	; 0x156
 800a486:	e7ec      	b.n	800a462 <EwFillPath+0xc4>
 800a488:	2d00      	cmp	r5, #0
 800a48a:	f000 8145 	beq.w	800a718 <EwFillPath+0x37a>
 800a48e:	4628      	mov	r0, r5
 800a490:	e9dd 6a2a 	ldrd	r6, sl, [sp, #168]	; 0xa8
 800a494:	f7fc fcef 	bl	8006e76 <UpdateWatermark2+0xb06>
 800a498:	68eb      	ldr	r3, [r5, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 813c 	beq.w	800a718 <EwFillPath+0x37a>
 800a4a0:	6a2b      	ldr	r3, [r5, #32]
 800a4a2:	69aa      	ldr	r2, [r5, #24]
 800a4a4:	2f00      	cmp	r7, #0
 800a4a6:	d165      	bne.n	800a574 <EwFillPath+0x1d6>
 800a4a8:	9906      	ldr	r1, [sp, #24]
 800a4aa:	eb01 070a 	add.w	r7, r1, sl
 800a4ae:	443a      	add	r2, r7
 800a4b0:	1e51      	subs	r1, r2, #1
 800a4b2:	443b      	add	r3, r7
 800a4b4:	9a08      	ldr	r2, [sp, #32]
 800a4b6:	eb06 0a02 	add.w	sl, r6, r2
 800a4ba:	696a      	ldr	r2, [r5, #20]
 800a4bc:	9e08      	ldr	r6, [sp, #32]
 800a4be:	4452      	add	r2, sl
 800a4c0:	1e50      	subs	r0, r2, #1
 800a4c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4c4:	42b2      	cmp	r2, r6
 800a4c6:	bfb8      	it	lt
 800a4c8:	4632      	movlt	r2, r6
 800a4ca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a4ce:	4290      	cmp	r0, r2
 800a4d0:	bfb8      	it	lt
 800a4d2:	4610      	movlt	r0, r2
 800a4d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a4d6:	900d      	str	r0, [sp, #52]	; 0x34
 800a4d8:	69ea      	ldr	r2, [r5, #28]
 800a4da:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800a4dc:	4452      	add	r2, sl
 800a4de:	42b0      	cmp	r0, r6
 800a4e0:	f102 0201 	add.w	r2, r2, #1
 800a4e4:	bfa8      	it	ge
 800a4e6:	4630      	movge	r0, r6
 800a4e8:	4282      	cmp	r2, r0
 800a4ea:	bfa8      	it	ge
 800a4ec:	4602      	movge	r2, r0
 800a4ee:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a4f2:	4282      	cmp	r2, r0
 800a4f4:	bfa8      	it	ge
 800a4f6:	4602      	movge	r2, r0
 800a4f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a4fa:	920a      	str	r2, [sp, #40]	; 0x28
 800a4fc:	4282      	cmp	r2, r0
 800a4fe:	f103 0301 	add.w	r3, r3, #1
 800a502:	f340 8109 	ble.w	800a718 <EwFillPath+0x37a>
 800a506:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a508:	9806      	ldr	r0, [sp, #24]
 800a50a:	4282      	cmp	r2, r0
 800a50c:	bfb8      	it	lt
 800a50e:	4602      	movlt	r2, r0
 800a510:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a514:	428a      	cmp	r2, r1
 800a516:	bfb8      	it	lt
 800a518:	460a      	movlt	r2, r1
 800a51a:	920c      	str	r2, [sp, #48]	; 0x30
 800a51c:	9907      	ldr	r1, [sp, #28]
 800a51e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a520:	428a      	cmp	r2, r1
 800a522:	bfa8      	it	ge
 800a524:	460a      	movge	r2, r1
 800a526:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a52a:	428a      	cmp	r2, r1
 800a52c:	bfa8      	it	ge
 800a52e:	460a      	movge	r2, r1
 800a530:	429a      	cmp	r2, r3
 800a532:	bfa8      	it	ge
 800a534:	461a      	movge	r2, r3
 800a536:	4613      	mov	r3, r2
 800a538:	920b      	str	r2, [sp, #44]	; 0x2c
 800a53a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a53c:	4293      	cmp	r3, r2
 800a53e:	f340 80eb 	ble.w	800a718 <EwFillPath+0x37a>
 800a542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a544:	b14b      	cbz	r3, 800a55a <EwFillPath+0x1bc>
 800a546:	9b05      	ldr	r3, [sp, #20]
 800a548:	9a02      	ldr	r2, [sp, #8]
 800a54a:	ea4b 0303 	orr.w	r3, fp, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	9a03      	ldr	r2, [sp, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	0e1b      	lsrs	r3, r3, #24
 800a556:	f000 80df 	beq.w	800a718 <EwFillPath+0x37a>
 800a55a:	6863      	ldr	r3, [r4, #4]
 800a55c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a55e:	6820      	ldr	r0, [r4, #0]
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	9310      	str	r3, [sp, #64]	; 0x40
 800a564:	f008 fdcc 	bl	8013100 <EwInitIssue>
 800a568:	4606      	mov	r6, r0
 800a56a:	b950      	cbnz	r0, 800a582 <EwFillPath+0x1e4>
 800a56c:	2200      	movs	r2, #0
 800a56e:	4649      	mov	r1, r9
 800a570:	207d      	movs	r0, #125	; 0x7d
 800a572:	e776      	b.n	800a462 <EwFillPath+0xc4>
 800a574:	9907      	ldr	r1, [sp, #28]
 800a576:	eb01 070a 	add.w	r7, r1, sl
 800a57a:	1afb      	subs	r3, r7, r3
 800a57c:	1e59      	subs	r1, r3, #1
 800a57e:	1abb      	subs	r3, r7, r2
 800a580:	e798      	b.n	800a4b4 <EwFillPath+0x116>
 800a582:	68a9      	ldr	r1, [r5, #8]
 800a584:	686b      	ldr	r3, [r5, #4]
 800a586:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a58a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a58e:	4419      	add	r1, r3
 800a590:	68eb      	ldr	r3, [r5, #12]
 800a592:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800a596:	3108      	adds	r1, #8
 800a598:	0089      	lsls	r1, r1, #2
 800a59a:	f008 fe52 	bl	8013242 <EwAllocTaskData>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d175      	bne.n	800a690 <EwFillPath+0x2f2>
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	f008 febb 	bl	8013320 <EwDoneIssue>
 800a5aa:	6820      	ldr	r0, [r4, #0]
 800a5ac:	f008 fe6c 	bl	8013288 <EwFlushTasks>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	f008 fda5 	bl	8013100 <EwInitIssue>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d0d7      	beq.n	800a56c <EwFillPath+0x1ce>
 800a5bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5be:	4453      	add	r3, sl
 800a5c0:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 800a5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5c6:	443b      	add	r3, r7
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	2120      	movs	r1, #32
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	ee08 3a10 	vmov	s16, r3
 800a5d2:	f008 fe36 	bl	8013242 <EwAllocTaskData>
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	8922      	ldrh	r2, [r4, #8]
 800a5da:	4605      	mov	r5, r0
 800a5dc:	4601      	mov	r1, r0
 800a5de:	88a0      	ldrh	r0, [r4, #4]
 800a5e0:	4403      	add	r3, r0
 800a5e2:	f821 3b1c 	strh.w	r3, [r1], #28
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	f8c5 b00c 	str.w	fp, [r5, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	806b      	strh	r3, [r5, #2]
 800a5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f2:	4418      	add	r0, r3
 800a5f4:	9b07      	ldr	r3, [sp, #28]
 800a5f6:	80a8      	strh	r0, [r5, #4]
 800a5f8:	441a      	add	r2, r3
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	612b      	str	r3, [r5, #16]
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	616b      	str	r3, [r5, #20]
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	61ab      	str	r3, [r5, #24]
 800a606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a608:	812b      	strh	r3, [r5, #8]
 800a60a:	2300      	movs	r3, #0
 800a60c:	80ea      	strh	r2, [r5, #6]
 800a60e:	816b      	strh	r3, [r5, #10]
 800a610:	9b04      	ldr	r3, [sp, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	dc40      	bgt.n	800a698 <EwFillPath+0x2fa>
 800a616:	2700      	movs	r7, #0
 800a618:	f841 7b04 	str.w	r7, [r1], #4
 800a61c:	4630      	mov	r0, r6
 800a61e:	f008 fe2a 	bl	8013276 <EwFreeTaskData>
 800a622:	4639      	mov	r1, r7
 800a624:	4630      	mov	r0, r6
 800a626:	f008 fdd3 	bl	80131d0 <EwAllocTask>
 800a62a:	2309      	movs	r3, #9
 800a62c:	88a2      	ldrh	r2, [r4, #4]
 800a62e:	8083      	strh	r3, [r0, #4]
 800a630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a632:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a634:	6105      	str	r5, [r0, #16]
 800a636:	4413      	add	r3, r2
 800a638:	8103      	strh	r3, [r0, #8]
 800a63a:	8923      	ldrh	r3, [r4, #8]
 800a63c:	4419      	add	r1, r3
 800a63e:	8141      	strh	r1, [r0, #10]
 800a640:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a642:	440a      	add	r2, r1
 800a644:	8182      	strh	r2, [r0, #12]
 800a646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a648:	4413      	add	r3, r2
 800a64a:	81c3      	strh	r3, [r0, #14]
 800a64c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a650:	42bb      	cmp	r3, r7
 800a652:	bf14      	ite	ne
 800a654:	2308      	movne	r3, #8
 800a656:	463b      	moveq	r3, r7
 800a658:	42ba      	cmp	r2, r7
 800a65a:	bf18      	it	ne
 800a65c:	f043 0301 	orrne.w	r3, r3, #1
 800a660:	9a05      	ldr	r2, [sp, #20]
 800a662:	4593      	cmp	fp, r2
 800a664:	9a02      	ldr	r2, [sp, #8]
 800a666:	d049      	beq.n	800a6fc <EwFillPath+0x35e>
 800a668:	9903      	ldr	r1, [sp, #12]
 800a66a:	428a      	cmp	r2, r1
 800a66c:	d04b      	beq.n	800a706 <EwFillPath+0x368>
 800a66e:	4593      	cmp	fp, r2
 800a670:	d149      	bne.n	800a706 <EwFillPath+0x368>
 800a672:	9a05      	ldr	r2, [sp, #20]
 800a674:	428a      	cmp	r2, r1
 800a676:	d146      	bne.n	800a706 <EwFillPath+0x368>
 800a678:	f043 0306 	orr.w	r3, r3, #6
 800a67c:	80c3      	strh	r3, [r0, #6]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	b015      	add	sp, #84	; 0x54
 800a682:	ecbd 8b02 	vpop	{d8}
 800a686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	b002      	add	sp, #8
 800a68c:	f008 be48 	b.w	8013320 <EwDoneIssue>
 800a690:	4630      	mov	r0, r6
 800a692:	f008 fdf0 	bl	8013276 <EwFreeTaskData>
 800a696:	e791      	b.n	800a5bc <EwFillPath+0x21e>
 800a698:	f8d8 3000 	ldr.w	r3, [r8]
 800a69c:	b313      	cbz	r3, 800a6e4 <EwFillPath+0x346>
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f008 fde9 	bl	8013276 <EwFreeTaskData>
 800a6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a8:	6859      	ldr	r1, [r3, #4]
 800a6aa:	3103      	adds	r1, #3
 800a6ac:	004f      	lsls	r7, r1, #1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	00c9      	lsls	r1, r1, #3
 800a6b2:	f008 fdc6 	bl	8013242 <EwAllocTaskData>
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	b950      	cbnz	r0, 800a6d0 <EwFillPath+0x332>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f008 fdda 	bl	8013276 <EwFreeTaskData>
 800a6c2:	6820      	ldr	r0, [r4, #0]
 800a6c4:	f008 fe2c 	bl	8013320 <EwDoneIssue>
 800a6c8:	463a      	mov	r2, r7
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	20bb      	movs	r0, #187	; 0xbb
 800a6ce:	e6c8      	b.n	800a462 <EwFillPath+0xc4>
 800a6d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	f8d8 0000 	ldr.w	r0, [r8]
 800a6d8:	ee18 3a10 	vmov	r3, s16
 800a6dc:	4652      	mov	r2, sl
 800a6de:	f7fb fde6 	bl	80062ae <EwScreenWarpRGB565RowFilterSolidBlend+0xae>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	9b04      	ldr	r3, [sp, #16]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	f108 0804 	add.w	r8, r8, #4
 800a6ee:	e78f      	b.n	800a610 <EwFillPath+0x272>
 800a6f0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6f4:	e7be      	b.n	800a674 <EwFillPath+0x2d6>
 800a6f6:	f043 0302 	orr.w	r3, r3, #2
 800a6fa:	e7bf      	b.n	800a67c <EwFillPath+0x2de>
 800a6fc:	4593      	cmp	fp, r2
 800a6fe:	d105      	bne.n	800a70c <EwFillPath+0x36e>
 800a700:	9a03      	ldr	r2, [sp, #12]
 800a702:	4593      	cmp	fp, r2
 800a704:	d0f7      	beq.n	800a6f6 <EwFillPath+0x358>
 800a706:	f043 0304 	orr.w	r3, r3, #4
 800a70a:	e7b7      	b.n	800a67c <EwFillPath+0x2de>
 800a70c:	9a03      	ldr	r2, [sp, #12]
 800a70e:	4593      	cmp	fp, r2
 800a710:	d1ee      	bne.n	800a6f0 <EwFillPath+0x352>
 800a712:	9a02      	ldr	r2, [sp, #8]
 800a714:	455a      	cmp	r2, fp
 800a716:	e7f5      	b.n	800a704 <EwFillPath+0x366>
 800a718:	b015      	add	sp, #84	; 0x54
 800a71a:	ecbd 8b02 	vpop	{d8}
 800a71e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a722:	b002      	add	sp, #8
 800a724:	4770      	bx	lr

0800a726 <EwStrokePath>:
 800a726:	b082      	sub	sp, #8
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	ed2d 8b04 	vpush	{d8-d9}
 800a730:	b09f      	sub	sp, #124	; 0x7c
 800a732:	4688      	mov	r8, r1
 800a734:	932d      	str	r3, [sp, #180]	; 0xb4
 800a736:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 800a73a:	9319      	str	r3, [sp, #100]	; 0x64
 800a73c:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 800a740:	931d      	str	r3, [sp, #116]	; 0x74
 800a742:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800a744:	9310      	str	r3, [sp, #64]	; 0x40
 800a746:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a748:	9311      	str	r3, [sp, #68]	; 0x44
 800a74a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a74c:	9315      	str	r3, [sp, #84]	; 0x54
 800a74e:	4611      	mov	r1, r2
 800a750:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800a752:	9312      	str	r3, [sp, #72]	; 0x48
 800a754:	eeb0 8a40 	vmov.f32	s16, s0
 800a758:	eeb0 9a60 	vmov.f32	s18, s1
 800a75c:	4615      	mov	r5, r2
 800a75e:	f89d 60d4 	ldrb.w	r6, [sp, #212]	; 0xd4
 800a762:	f8dd 90e0 	ldr.w	r9, [sp, #224]	; 0xe0
 800a766:	4607      	mov	r7, r0
 800a768:	f7fc fde2 	bl	8007330 <UpdateWatermark1+0x6c>
 800a76c:	f89d 30e7 	ldrb.w	r3, [sp, #231]	; 0xe7
 800a770:	f89d 20e6 	ldrb.w	r2, [sp, #230]	; 0xe6
 800a774:	f89d 10e5 	ldrb.w	r1, [sp, #229]	; 0xe5
 800a778:	4604      	mov	r4, r0
 800a77a:	f89d 00e4 	ldrb.w	r0, [sp, #228]	; 0xe4
 800a77e:	f7f5 fee8 	bl	8000552 <EwPackColor>
 800a782:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
 800a786:	f89d 20ea 	ldrb.w	r2, [sp, #234]	; 0xea
 800a78a:	f89d 10e9 	ldrb.w	r1, [sp, #233]	; 0xe9
 800a78e:	9008      	str	r0, [sp, #32]
 800a790:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
 800a794:	f7f5 fedd 	bl	8000552 <EwPackColor>
 800a798:	f89d 30f3 	ldrb.w	r3, [sp, #243]	; 0xf3
 800a79c:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
 800a7a0:	f89d 10f1 	ldrb.w	r1, [sp, #241]	; 0xf1
 800a7a4:	900d      	str	r0, [sp, #52]	; 0x34
 800a7a6:	f89d 00f0 	ldrb.w	r0, [sp, #240]	; 0xf0
 800a7aa:	f7f5 fed2 	bl	8000552 <EwPackColor>
 800a7ae:	f89d 30ef 	ldrb.w	r3, [sp, #239]	; 0xef
 800a7b2:	9009      	str	r0, [sp, #36]	; 0x24
 800a7b4:	f89d 20ee 	ldrb.w	r2, [sp, #238]	; 0xee
 800a7b8:	f89d 10ed 	ldrb.w	r1, [sp, #237]	; 0xed
 800a7bc:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
 800a7c0:	f7f5 fec7 	bl	8000552 <EwPackColor>
 800a7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800a7c6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ca:	d049      	beq.n	800a860 <EwStrokePath+0x13a>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	f852 3b40 	ldr.w	r3, [r2], #64
 800a7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d4:	9218      	str	r2, [sp, #96]	; 0x60
 800a7d6:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 800a7da:	2e00      	cmp	r6, #0
 800a7dc:	fa5f fb89 	uxtb.w	fp, r9
 800a7e0:	9307      	str	r3, [sp, #28]
 800a7e2:	bf14      	ite	ne
 800a7e4:	f04f 33ff 	movne.w	r3, #4294967295
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	f1bb 0f03 	cmp.w	fp, #3
 800a7ee:	f409 097f 	and.w	r9, r9, #16711680	; 0xff0000
 800a7f2:	931c      	str	r3, [sp, #112]	; 0x70
 800a7f4:	d108      	bne.n	800a808 <EwStrokePath+0xe2>
 800a7f6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800a7fa:	eeb4 8a67 	vcmp.f32	s16, s15
 800a7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a802:	bf48      	it	mi
 800a804:	f04f 0b02 	movmi.w	fp, #2
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a80e:	d109      	bne.n	800a824 <EwStrokePath+0xfe>
 800a810:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800a814:	eeb4 8a67 	vcmp.f32	s16, s15
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	bf48      	it	mi
 800a81e:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	f5b9 3f00 	cmp.w	r9, #131072	; 0x20000
 800a828:	d108      	bne.n	800a83c <EwStrokePath+0x116>
 800a82a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800a82e:	eeb4 8a67 	vcmp.f32	s16, s15
 800a832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a836:	bf48      	it	mi
 800a838:	f04f 0900 	movmi.w	r9, #0
 800a83c:	b12c      	cbz	r4, 800a84a <EwStrokePath+0x124>
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	8c13      	ldrh	r3, [r2, #32]
 800a842:	3301      	adds	r3, #1
 800a844:	b29b      	uxth	r3, r3
 800a846:	2b01      	cmp	r3, #1
 800a848:	d90f      	bls.n	800a86a <EwStrokePath+0x144>
 800a84a:	462a      	mov	r2, r5
 800a84c:	4639      	mov	r1, r7
 800a84e:	209e      	movs	r0, #158	; 0x9e
 800a850:	b01f      	add	sp, #124	; 0x7c
 800a852:	ecbd 8b04 	vpop	{d8-d9}
 800a856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85a:	b002      	add	sp, #8
 800a85c:	f00e ba3a 	b.w	8018cd4 <EwErrorPD>
 800a860:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800a864:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a868:	e7b5      	b.n	800a7d6 <EwStrokePath+0xb0>
 800a86a:	6993      	ldr	r3, [r2, #24]
 800a86c:	b90b      	cbnz	r3, 800a872 <EwStrokePath+0x14c>
 800a86e:	69d3      	ldr	r3, [r2, #28]
 800a870:	b123      	cbz	r3, 800a87c <EwStrokePath+0x156>
 800a872:	462a      	mov	r2, r5
 800a874:	4639      	mov	r1, r7
 800a876:	f240 1057 	movw	r0, #343	; 0x157
 800a87a:	e7e9      	b.n	800a850 <EwStrokePath+0x12a>
 800a87c:	f1b8 0f00 	cmp.w	r8, #0
 800a880:	f000 8233 	beq.w	800acea <EwStrokePath+0x5c4>
 800a884:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88c:	f240 822d 	bls.w	800acea <EwStrokePath+0x5c4>
 800a890:	4640      	mov	r0, r8
 800a892:	e9dd 5a36 	ldrd	r5, sl, [sp, #216]	; 0xd8
 800a896:	f7fc faee 	bl	8006e76 <UpdateWatermark2+0xb06>
 800a89a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 8223 	beq.w	800acea <EwStrokePath+0x5c4>
 800a8a4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800a8a8:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 800a8ac:	ee68 8a00 	vmul.f32	s17, s16, s0
 800a8b0:	f040 80ad 	bne.w	800aa0e <EwStrokePath+0x2e8>
 800a8b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a8b8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800a8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c0:	dd04      	ble.n	800a8cc <EwStrokePath+0x1a6>
 800a8c2:	ee68 7a89 	vmul.f32	s15, s17, s18
 800a8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8ca:	e001      	b.n	800a8d0 <EwStrokePath+0x1aa>
 800a8cc:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800a8d0:	ee17 3a90 	vmov	r3, s15
 800a8d4:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800a8d8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	f040 80a5 	bne.w	800aa2c <EwStrokePath+0x306>
 800a8e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a8e4:	eb0a 0600 	add.w	r6, sl, r0
 800a8e8:	eb06 0c02 	add.w	ip, r6, r2
 800a8ec:	ebac 0c03 	sub.w	ip, ip, r3
 800a8f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8f4:	1872      	adds	r2, r6, r1
 800a8f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a8f8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800a8fa:	eb05 0a01 	add.w	sl, r5, r1
 800a8fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a900:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800a904:	42a8      	cmp	r0, r5
 800a906:	4451      	add	r1, sl
 800a908:	eba1 0103 	sub.w	r1, r1, r3
 800a90c:	bfb8      	it	lt
 800a90e:	4628      	movlt	r0, r5
 800a910:	3902      	subs	r1, #2
 800a912:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a916:	4281      	cmp	r1, r0
 800a918:	bfb8      	it	lt
 800a91a:	4601      	movlt	r1, r0
 800a91c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a91e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800a920:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a922:	4288      	cmp	r0, r1
 800a924:	bfa8      	it	ge
 800a926:	4608      	movge	r0, r1
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	4288      	cmp	r0, r1
 800a92c:	bfa8      	it	ge
 800a92e:	4608      	movge	r0, r1
 800a930:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800a934:	4451      	add	r1, sl
 800a936:	441a      	add	r2, r3
 800a938:	440b      	add	r3, r1
 800a93a:	3301      	adds	r3, #1
 800a93c:	4298      	cmp	r0, r3
 800a93e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a940:	bfa8      	it	ge
 800a942:	4618      	movge	r0, r3
 800a944:	4288      	cmp	r0, r1
 800a946:	f102 0201 	add.w	r2, r2, #1
 800a94a:	9013      	str	r0, [sp, #76]	; 0x4c
 800a94c:	f340 81cd 	ble.w	800acea <EwStrokePath+0x5c4>
 800a950:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a952:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a954:	428b      	cmp	r3, r1
 800a956:	bfb8      	it	lt
 800a958:	460b      	movlt	r3, r1
 800a95a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a95e:	4563      	cmp	r3, ip
 800a960:	bfb8      	it	lt
 800a962:	4663      	movlt	r3, ip
 800a964:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a966:	9316      	str	r3, [sp, #88]	; 0x58
 800a968:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a96a:	428b      	cmp	r3, r1
 800a96c:	bfa8      	it	ge
 800a96e:	460b      	movge	r3, r1
 800a970:	68b9      	ldr	r1, [r7, #8]
 800a972:	428b      	cmp	r3, r1
 800a974:	bfa8      	it	ge
 800a976:	460b      	movge	r3, r1
 800a978:	4293      	cmp	r3, r2
 800a97a:	bfa8      	it	ge
 800a97c:	4613      	movge	r3, r2
 800a97e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a980:	9314      	str	r3, [sp, #80]	; 0x50
 800a982:	4293      	cmp	r3, r2
 800a984:	f340 81b1 	ble.w	800acea <EwStrokePath+0x5c4>
 800a988:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a98a:	b14b      	cbz	r3, 800a9a0 <EwStrokePath+0x27a>
 800a98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a98e:	9b08      	ldr	r3, [sp, #32]
 800a990:	4313      	orrs	r3, r2
 800a992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a994:	4313      	orrs	r3, r2
 800a996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a998:	4313      	orrs	r3, r2
 800a99a:	0e1b      	lsrs	r3, r3, #24
 800a99c:	f000 81a5 	beq.w	800acea <EwStrokePath+0x5c4>
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a4:	f1bb 0f03 	cmp.w	fp, #3
 800a9a8:	68a3      	ldr	r3, [r4, #8]
 800a9aa:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9ac:	d006      	beq.n	800a9bc <EwStrokePath+0x296>
 800a9ae:	9b07      	ldr	r3, [sp, #28]
 800a9b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9b4:	d002      	beq.n	800a9bc <EwStrokePath+0x296>
 800a9b6:	f5b9 3f00 	cmp.w	r9, #131072	; 0x20000
 800a9ba:	d142      	bne.n	800aa42 <EwStrokePath+0x31c>
 800a9bc:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ac74 <EwStrokePath+0x54e>
 800a9c0:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a9c4:	f01e ff50 	bl	8029868 <EwMathCeil>
 800a9c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a9cc:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800ac78 <EwStrokePath+0x552>
 800a9d0:	ee10 3a10 	vmov	r3, s0
 800a9d4:	3302      	adds	r3, #2
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9e0:	eec7 9a27 	vdiv.f32	s19, s14, s15
 800a9e4:	eeb0 0a69 	vmov.f32	s0, s19
 800a9e8:	f01e fefc 	bl	80297e4 <EwMathCos>
 800a9ec:	eeb0 8a40 	vmov.f32	s16, s0
 800a9f0:	eeb0 0a69 	vmov.f32	s0, s19
 800a9f4:	f01e feee 	bl	80297d4 <EwMathSin>
 800a9f8:	eef0 9a40 	vmov.f32	s19, s0
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	f008 fb7f 	bl	8013100 <EwInitIssue>
 800aa02:	4605      	mov	r5, r0
 800aa04:	bb20      	cbnz	r0, 800aa50 <EwStrokePath+0x32a>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4639      	mov	r1, r7
 800aa0a:	207e      	movs	r0, #126	; 0x7e
 800aa0c:	e720      	b.n	800a850 <EwStrokePath+0x12a>
 800aa0e:	f1bb 0f01 	cmp.w	fp, #1
 800aa12:	d003      	beq.n	800aa1c <EwStrokePath+0x2f6>
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa1a:	d104      	bne.n	800aa26 <EwStrokePath+0x300>
 800aa1c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800aa20:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800aa24:	e74f      	b.n	800a8c6 <EwStrokePath+0x1a0>
 800aa26:	ee78 7a80 	vadd.f32	s15, s17, s0
 800aa2a:	e74c      	b.n	800a8c6 <EwStrokePath+0x1a0>
 800aa2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa2e:	eb0a 0600 	add.w	r6, sl, r0
 800aa32:	eba6 0c01 	sub.w	ip, r6, r1
 800aa36:	ebac 0c03 	sub.w	ip, ip, r3
 800aa3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa3e:	1ab2      	subs	r2, r6, r2
 800aa40:	e759      	b.n	800a8f6 <EwStrokePath+0x1d0>
 800aa42:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 800ac7c <EwStrokePath+0x556>
 800aa46:	2300      	movs	r3, #0
 800aa48:	eef0 9a48 	vmov.f32	s19, s16
 800aa4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4e:	e7d5      	b.n	800a9fc <EwStrokePath+0x2d6>
 800aa50:	e9d8 0202 	ldrd	r0, r2, [r8, #8]
 800aa54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa58:	f04f 0c06 	mov.w	ip, #6
 800aa5c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800aa60:	fb0c 1100 	mla	r1, ip, r0, r1
 800aa64:	3101      	adds	r1, #1
 800aa66:	f1bb 0f03 	cmp.w	fp, #3
 800aa6a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aa6e:	f040 80a6 	bne.w	800abbe <EwStrokePath+0x498>
 800aa72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa74:	3801      	subs	r0, #1
 800aa76:	ea4f 0840 	mov.w	r8, r0, lsl #1
 800aa7a:	9807      	ldr	r0, [sp, #28]
 800aa7c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800aa80:	fb08 1103 	mla	r1, r8, r3, r1
 800aa84:	f040 80a3 	bne.w	800abce <EwStrokePath+0x4a8>
 800aa88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa8a:	3801      	subs	r0, #1
 800aa8c:	0040      	lsls	r0, r0, #1
 800aa8e:	900e      	str	r0, [sp, #56]	; 0x38
 800aa90:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa92:	f5b9 3f00 	cmp.w	r9, #131072	; 0x20000
 800aa96:	fb00 1103 	mla	r1, r0, r3, r1
 800aa9a:	eba2 0303 	sub.w	r3, r2, r3
 800aa9e:	f040 809d 	bne.w	800abdc <EwStrokePath+0x4b6>
 800aaa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaa4:	3a01      	subs	r2, #1
 800aaa6:	0052      	lsls	r2, r2, #1
 800aaa8:	920f      	str	r2, [sp, #60]	; 0x3c
 800aaaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aaac:	fb02 1103 	mla	r1, r2, r3, r1
 800aab0:	3107      	adds	r1, #7
 800aab2:	0089      	lsls	r1, r1, #2
 800aab4:	4628      	mov	r0, r5
 800aab6:	f008 fbc4 	bl	8013242 <EwAllocTaskData>
 800aaba:	4601      	mov	r1, r0
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f040 8093 	bne.w	800abe8 <EwStrokePath+0x4c2>
 800aac2:	6820      	ldr	r0, [r4, #0]
 800aac4:	f008 fc2c 	bl	8013320 <EwDoneIssue>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	f008 fbdd 	bl	8013288 <EwFlushTasks>
 800aace:	6820      	ldr	r0, [r4, #0]
 800aad0:	f008 fb16 	bl	8013100 <EwInitIssue>
 800aad4:	4605      	mov	r5, r0
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d095      	beq.n	800aa06 <EwStrokePath+0x2e0>
 800aada:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aadc:	4453      	add	r3, sl
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	931a      	str	r3, [sp, #104]	; 0x68
 800aae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aae4:	4433      	add	r3, r6
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	2120      	movs	r1, #32
 800aaea:	4628      	mov	r0, r5
 800aaec:	931b      	str	r3, [sp, #108]	; 0x6c
 800aaee:	f008 fba8 	bl	8013242 <EwAllocTaskData>
 800aaf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaf4:	8922      	ldrh	r2, [r4, #8]
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	4601      	mov	r1, r0
 800aafa:	88a0      	ldrh	r0, [r4, #4]
 800aafc:	4403      	add	r3, r0
 800aafe:	f821 3b1c 	strh.w	r3, [r1], #28
 800ab02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab04:	4413      	add	r3, r2
 800ab06:	8073      	strh	r3, [r6, #2]
 800ab08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab0a:	4418      	add	r0, r3
 800ab0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab0e:	80b0      	strh	r0, [r6, #4]
 800ab10:	441a      	add	r2, r3
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	60f3      	str	r3, [r6, #12]
 800ab16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab18:	6133      	str	r3, [r6, #16]
 800ab1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1c:	6173      	str	r3, [r6, #20]
 800ab1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab20:	61b3      	str	r3, [r6, #24]
 800ab22:	2301      	movs	r3, #1
 800ab24:	60b3      	str	r3, [r6, #8]
 800ab26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ab28:	80f2      	strh	r2, [r6, #6]
 800ab2a:	3b04      	subs	r3, #4
 800ab2c:	9310      	str	r3, [sp, #64]	; 0x40
 800ab2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc5d      	bgt.n	800abf0 <EwStrokePath+0x4ca>
 800ab34:	2700      	movs	r7, #0
 800ab36:	f841 7b04 	str.w	r7, [r1], #4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f008 fb9b 	bl	8013276 <EwFreeTaskData>
 800ab40:	4639      	mov	r1, r7
 800ab42:	4628      	mov	r0, r5
 800ab44:	f008 fb44 	bl	80131d0 <EwAllocTask>
 800ab48:	2309      	movs	r3, #9
 800ab4a:	88a2      	ldrh	r2, [r4, #4]
 800ab4c:	8083      	strh	r3, [r0, #4]
 800ab4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab50:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab52:	6106      	str	r6, [r0, #16]
 800ab54:	4413      	add	r3, r2
 800ab56:	8103      	strh	r3, [r0, #8]
 800ab58:	8923      	ldrh	r3, [r4, #8]
 800ab5a:	4419      	add	r1, r3
 800ab5c:	8141      	strh	r1, [r0, #10]
 800ab5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab60:	440a      	add	r2, r1
 800ab62:	8182      	strh	r2, [r0, #12]
 800ab64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab66:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab68:	4413      	add	r3, r2
 800ab6a:	81c3      	strh	r3, [r0, #14]
 800ab6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab70:	42bb      	cmp	r3, r7
 800ab72:	bf14      	ite	ne
 800ab74:	2308      	movne	r3, #8
 800ab76:	463b      	moveq	r3, r7
 800ab78:	42ba      	cmp	r2, r7
 800ab7a:	bf18      	it	ne
 800ab7c:	f043 0301 	orrne.w	r3, r3, #1
 800ab80:	9a08      	ldr	r2, [sp, #32]
 800ab82:	428a      	cmp	r2, r1
 800ab84:	f000 809f 	beq.w	800acc6 <EwStrokePath+0x5a0>
 800ab88:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 800ab8c:	428a      	cmp	r2, r1
 800ab8e:	f000 80a2 	beq.w	800acd6 <EwStrokePath+0x5b0>
 800ab92:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800ab96:	428a      	cmp	r2, r1
 800ab98:	f040 809d 	bne.w	800acd6 <EwStrokePath+0x5b0>
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aba0:	428a      	cmp	r2, r1
 800aba2:	f040 8098 	bne.w	800acd6 <EwStrokePath+0x5b0>
 800aba6:	f043 0306 	orr.w	r3, r3, #6
 800abaa:	80c3      	strh	r3, [r0, #6]
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	b01f      	add	sp, #124	; 0x7c
 800abb0:	ecbd 8b04 	vpop	{d8-d9}
 800abb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb8:	b002      	add	sp, #8
 800abba:	f008 bbb1 	b.w	8013320 <EwDoneIssue>
 800abbe:	f1bb 0f02 	cmp.w	fp, #2
 800abc2:	bf0c      	ite	eq
 800abc4:	f04f 0802 	moveq.w	r8, #2
 800abc8:	f04f 0800 	movne.w	r8, #0
 800abcc:	e755      	b.n	800aa7a <EwStrokePath+0x354>
 800abce:	9807      	ldr	r0, [sp, #28]
 800abd0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800abd4:	bf0c      	ite	eq
 800abd6:	2002      	moveq	r0, #2
 800abd8:	2000      	movne	r0, #0
 800abda:	e758      	b.n	800aa8e <EwStrokePath+0x368>
 800abdc:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 800abe0:	bf0c      	ite	eq
 800abe2:	2202      	moveq	r2, #2
 800abe4:	2200      	movne	r2, #0
 800abe6:	e75f      	b.n	800aaa8 <EwStrokePath+0x382>
 800abe8:	4628      	mov	r0, r5
 800abea:	f008 fb44 	bl	8013276 <EwFreeTaskData>
 800abee:	e774      	b.n	800aada <EwStrokePath+0x3b4>
 800abf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abf6:	9310      	str	r3, [sp, #64]	; 0x40
 800abf8:	f1ba 0f00 	cmp.w	sl, #0
 800abfc:	d05a      	beq.n	800acb4 <EwStrokePath+0x58e>
 800abfe:	f89a 3009 	ldrb.w	r3, [sl, #9]
 800ac02:	f89a 200a 	ldrb.w	r2, [sl, #10]
 800ac06:	3b00      	subs	r3, #0
 800ac08:	bf18      	it	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	9312      	str	r3, [sp, #72]	; 0x48
 800ac0e:	1e13      	subs	r3, r2, #0
 800ac10:	bf18      	it	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	4628      	mov	r0, r5
 800ac16:	9311      	str	r3, [sp, #68]	; 0x44
 800ac18:	f008 fb2d 	bl	8013276 <EwFreeTaskData>
 800ac1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ac20:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ac24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ac28:	f04f 0c06 	mov.w	ip, #6
 800ac2c:	fb0c 2200 	mla	r2, ip, r0, r2
 800ac30:	3201      	adds	r2, #1
 800ac32:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ac34:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ac38:	fb03 2208 	mla	r2, r3, r8, r2
 800ac3c:	fb03 2200 	mla	r2, r3, r0, r2
 800ac40:	1acb      	subs	r3, r1, r3
 800ac42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac44:	fb01 2203 	mla	r2, r1, r3, r2
 800ac48:	0091      	lsls	r1, r2, #2
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 800ac50:	f008 faf7 	bl	8013242 <EwAllocTaskData>
 800ac54:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800ac58:	b990      	cbnz	r0, 800ac80 <EwStrokePath+0x55a>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	9207      	str	r2, [sp, #28]
 800ac60:	f008 fb09 	bl	8013276 <EwFreeTaskData>
 800ac64:	6820      	ldr	r0, [r4, #0]
 800ac66:	f008 fb5b 	bl	8013320 <EwDoneIssue>
 800ac6a:	9a07      	ldr	r2, [sp, #28]
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	20bc      	movs	r0, #188	; 0xbc
 800ac70:	e5ee      	b.n	800a850 <EwStrokePath+0x12a>
 800ac72:	bf00      	nop
 800ac74:	3e19999a 	.word	0x3e19999a
 800ac78:	43340000 	.word	0x43340000
 800ac7c:	00000000 	.word	0x00000000
 800ac80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ac8e:	9000      	str	r0, [sp, #0]
 800ac90:	4401      	add	r1, r0
 800ac92:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800ac96:	9a07      	ldr	r2, [sp, #28]
 800ac98:	4659      	mov	r1, fp
 800ac9a:	eef0 1a69 	vmov.f32	s3, s19
 800ac9e:	eeb0 1a48 	vmov.f32	s2, s16
 800aca2:	eef0 0a68 	vmov.f32	s1, s17
 800aca6:	eeb0 0a49 	vmov.f32	s0, s18
 800acaa:	464b      	mov	r3, r9
 800acac:	4650      	mov	r0, sl
 800acae:	f7fb fd5c 	bl	800676a <UpdateWatermark2+0x3fa>
 800acb2:	4601      	mov	r1, r0
 800acb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acb6:	3b01      	subs	r3, #1
 800acb8:	930c      	str	r3, [sp, #48]	; 0x30
 800acba:	e738      	b.n	800ab2e <EwStrokePath+0x408>
 800acbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acbe:	e76e      	b.n	800ab9e <EwStrokePath+0x478>
 800acc0:	f043 0302 	orr.w	r3, r3, #2
 800acc4:	e771      	b.n	800abaa <EwStrokePath+0x484>
 800acc6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800acca:	428a      	cmp	r2, r1
 800accc:	d106      	bne.n	800acdc <EwStrokePath+0x5b6>
 800acce:	9a08      	ldr	r2, [sp, #32]
 800acd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800acd2:	428a      	cmp	r2, r1
 800acd4:	d0f4      	beq.n	800acc0 <EwStrokePath+0x59a>
 800acd6:	f043 0304 	orr.w	r3, r3, #4
 800acda:	e766      	b.n	800abaa <EwStrokePath+0x484>
 800acdc:	9a08      	ldr	r2, [sp, #32]
 800acde:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ace0:	428a      	cmp	r2, r1
 800ace2:	d1eb      	bne.n	800acbc <EwStrokePath+0x596>
 800ace4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ace8:	e7f3      	b.n	800acd2 <EwStrokePath+0x5ac>
 800acea:	b01f      	add	sp, #124	; 0x7c
 800acec:	ecbd 8b04 	vpop	{d8-d9}
 800acf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	b002      	add	sp, #8
 800acf6:	4770      	bx	lr

0800acf8 <EwGetBitmapFromFillPath>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	b09d      	sub	sp, #116	; 0x74
 800acfe:	ac0e      	add	r4, sp, #56	; 0x38
 800ad00:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad04:	4682      	mov	sl, r0
 800ad06:	461c      	mov	r4, r3
 800ad08:	4689      	mov	r9, r1
 800ad0a:	4615      	mov	r5, r2
 800ad0c:	b192      	cbz	r2, 800ad34 <EwGetBitmapFromFillPath+0x3c>
 800ad0e:	f852 3b40 	ldr.w	r3, [r2], #64
 800ad12:	9307      	str	r3, [sp, #28]
 800ad14:	920c      	str	r2, [sp, #48]	; 0x30
 800ad16:	4613      	mov	r3, r2
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	bf14      	ite	ne
 800ad1c:	f04f 33ff 	movne.w	r3, #4294967295
 800ad20:	2301      	moveq	r3, #1
 800ad22:	f1ba 0f00 	cmp.w	sl, #0
 800ad26:	930d      	str	r3, [sp, #52]	; 0x34
 800ad28:	dc07      	bgt.n	800ad3a <EwGetBitmapFromFillPath+0x42>
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	b01d      	add	sp, #116	; 0x74
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	920c      	str	r2, [sp, #48]	; 0x30
 800ad36:	9207      	str	r2, [sp, #28]
 800ad38:	e7ee      	b.n	800ad18 <EwGetBitmapFromFillPath+0x20>
 800ad3a:	f1b9 0f00 	cmp.w	r9, #0
 800ad3e:	ddf4      	ble.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	d0f2      	beq.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ad44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad46:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800ad48:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f7fc f893 	bl	8006e76 <UpdateWatermark2+0xb06>
 800ad50:	68ea      	ldr	r2, [r5, #12]
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	d0e9      	beq.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ad56:	6a2b      	ldr	r3, [r5, #32]
 800ad58:	69a9      	ldr	r1, [r5, #24]
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	d138      	bne.n	800add0 <EwGetBitmapFromFillPath+0xd8>
 800ad5e:	4431      	add	r1, r6
 800ad60:	1e48      	subs	r0, r1, #1
 800ad62:	4433      	add	r3, r6
 800ad64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ad66:	6969      	ldr	r1, [r5, #20]
 800ad68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad6a:	4421      	add	r1, r4
 800ad6c:	1e4c      	subs	r4, r1, #1
 800ad6e:	69e9      	ldr	r1, [r5, #28]
 800ad70:	4439      	add	r1, r7
 800ad72:	3101      	adds	r1, #1
 800ad74:	3301      	adds	r3, #1
 800ad76:	4551      	cmp	r1, sl
 800ad78:	bfa8      	it	ge
 800ad7a:	4651      	movge	r1, sl
 800ad7c:	ea24 7be4 	bic.w	fp, r4, r4, asr #31
 800ad80:	454b      	cmp	r3, r9
 800ad82:	bfa8      	it	ge
 800ad84:	464b      	movge	r3, r9
 800ad86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ad8a:	458b      	cmp	fp, r1
 800ad8c:	9008      	str	r0, [sp, #32]
 800ad8e:	910a      	str	r1, [sp, #40]	; 0x28
 800ad90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad92:	daca      	bge.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ad94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad96:	4288      	cmp	r0, r1
 800ad98:	dac7      	bge.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ad9a:	68ab      	ldr	r3, [r5, #8]
 800ad9c:	686c      	ldr	r4, [r5, #4]
 800ad9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ada2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ada6:	4423      	add	r3, r4
 800ada8:	1c5c      	adds	r4, r3, #1
 800adaa:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800adae:	00a4      	lsls	r4, r4, #2
 800adb0:	4620      	mov	r0, r4
 800adb2:	f01e fcdd 	bl	8029770 <EwAlloc>
 800adb6:	4607      	mov	r7, r0
 800adb8:	2800      	cmp	r0, #0
 800adba:	d17b      	bne.n	800aeb4 <EwGetBitmapFromFillPath+0x1bc>
 800adbc:	201e      	movs	r0, #30
 800adbe:	f00e ff23 	bl	8019c08 <EwImmediateReclaimMemory>
 800adc2:	4605      	mov	r5, r0
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d1f3      	bne.n	800adb0 <EwGetBitmapFromFillPath+0xb8>
 800adc8:	201e      	movs	r0, #30
 800adca:	f00d ff6d 	bl	8018ca8 <EwError>
 800adce:	e7ad      	b.n	800ad2c <EwGetBitmapFromFillPath+0x34>
 800add0:	444e      	add	r6, r9
 800add2:	1af3      	subs	r3, r6, r3
 800add4:	1e58      	subs	r0, r3, #1
 800add6:	1a73      	subs	r3, r6, r1
 800add8:	e7c4      	b.n	800ad64 <EwGetBitmapFromFillPath+0x6c>
 800adda:	2100      	movs	r1, #0
 800addc:	f7fc faa8 	bl	8007330 <UpdateWatermark1+0x6c>
 800ade0:	ab10      	add	r3, sp, #64	; 0x40
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	2202      	movs	r2, #2
 800ade6:	2300      	movs	r3, #0
 800ade8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800adec:	e9cd 9300 	strd	r9, r3, [sp]
 800adf0:	4680      	mov	r8, r0
 800adf2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800adf6:	4653      	mov	r3, sl
 800adf8:	6800      	ldr	r0, [r0, #0]
 800adfa:	f008 fadd 	bl	80133b8 <EwLockSurface>
 800adfe:	b980      	cbnz	r0, 800ae22 <EwGetBitmapFromFillPath+0x12a>
 800ae00:	f8d8 1000 	ldr.w	r1, [r8]
 800ae04:	4602      	mov	r2, r0
 800ae06:	208b      	movs	r0, #139	; 0x8b
 800ae08:	f00d ff64 	bl	8018cd4 <EwErrorPD>
 800ae0c:	4a3d      	ldr	r2, [pc, #244]	; (800af04 <EwGetBitmapFromFillPath+0x20c>)
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	4638      	mov	r0, r7
 800ae12:	1b1b      	subs	r3, r3, r4
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	f01e fcad 	bl	8029774 <EwFree>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7fc fcf6 	bl	800780c <EwFreeBitmap>
 800ae20:	e783      	b.n	800ad2a <EwGetBitmapFromFillPath+0x32>
 800ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae24:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ae26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae28:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 800ae2c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800ae30:	4359      	muls	r1, r3
 800ae32:	f01e fcc5 	bl	80297c0 <EwZero>
 800ae36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae38:	0136      	lsls	r6, r6, #4
 800ae3a:	f1a3 0904 	sub.w	r9, r3, #4
 800ae3e:	4639      	mov	r1, r7
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dc28      	bgt.n	800ae98 <EwGetBitmapFromFillPath+0x1a0>
 800ae46:	2300      	movs	r3, #0
 800ae48:	600b      	str	r3, [r1, #0]
 800ae4a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	9b08      	ldr	r3, [sp, #32]
 800ae58:	9a08      	ldr	r2, [sp, #32]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae66:	1a9b      	subs	r3, r3, r2
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6c:	eba3 030b 	sub.w	r3, r3, fp
 800ae70:	4639      	mov	r1, r7
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	a810      	add	r0, sp, #64	; 0x40
 800ae76:	4613      	mov	r3, r2
 800ae78:	465a      	mov	r2, fp
 800ae7a:	f009 fa4a 	bl	8014312 <EwRasterAlpha8Polygon>
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f01e fc78 	bl	8029774 <EwFree>
 800ae84:	f8d8 0000 	ldr.w	r0, [r8]
 800ae88:	a910      	add	r1, sp, #64	; 0x40
 800ae8a:	f007 ff45 	bl	8012d18 <EwUnlockSurface>
 800ae8e:	4a1d      	ldr	r2, [pc, #116]	; (800af04 <EwGetBitmapFromFillPath+0x20c>)
 800ae90:	6813      	ldr	r3, [r2, #0]
 800ae92:	1b1b      	subs	r3, r3, r4
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	e749      	b.n	800ad2c <EwGetBitmapFromFillPath+0x34>
 800ae98:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800ae9c:	b130      	cbz	r0, 800aeac <EwGetBitmapFromFillPath+0x1b4>
 800ae9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	4652      	mov	r2, sl
 800aea4:	4633      	mov	r3, r6
 800aea6:	f7fb fa02 	bl	80062ae <EwScreenWarpRGB565RowFilterSolidBlend+0xae>
 800aeaa:	4601      	mov	r1, r0
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	9307      	str	r3, [sp, #28]
 800aeb2:	e7c5      	b.n	800ae40 <EwGetBitmapFromFillPath+0x148>
 800aeb4:	4a13      	ldr	r2, [pc, #76]	; (800af04 <EwGetBitmapFromFillPath+0x20c>)
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	4423      	add	r3, r4
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	4a12      	ldr	r2, [pc, #72]	; (800af08 <EwGetBitmapFromFillPath+0x210>)
 800aebe:	6811      	ldr	r1, [r2, #0]
 800aec0:	428b      	cmp	r3, r1
 800aec2:	dd00      	ble.n	800aec6 <EwGetBitmapFromFillPath+0x1ce>
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	4a11      	ldr	r2, [pc, #68]	; (800af0c <EwGetBitmapFromFillPath+0x214>)
 800aec8:	4911      	ldr	r1, [pc, #68]	; (800af10 <EwGetBitmapFromFillPath+0x218>)
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	6809      	ldr	r1, [r1, #0]
 800aece:	440a      	add	r2, r1
 800aed0:	4413      	add	r3, r2
 800aed2:	4a10      	ldr	r2, [pc, #64]	; (800af14 <EwGetBitmapFromFillPath+0x21c>)
 800aed4:	6811      	ldr	r1, [r2, #0]
 800aed6:	428b      	cmp	r3, r1
 800aed8:	bfc8      	it	gt
 800aeda:	6013      	strgt	r3, [r2, #0]
 800aedc:	2301      	movs	r3, #1
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800aee4:	2300      	movs	r3, #0
 800aee6:	2002      	movs	r0, #2
 800aee8:	f7fc fcde 	bl	80078a8 <EwCreateBitmap>
 800aeec:	4605      	mov	r5, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f47f af73 	bne.w	800adda <EwGetBitmapFromFillPath+0xe2>
 800aef4:	4a03      	ldr	r2, [pc, #12]	; (800af04 <EwGetBitmapFromFillPath+0x20c>)
 800aef6:	6813      	ldr	r3, [r2, #0]
 800aef8:	4638      	mov	r0, r7
 800aefa:	1b1b      	subs	r3, r3, r4
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	f01e fc39 	bl	8029774 <EwFree>
 800af02:	e713      	b.n	800ad2c <EwGetBitmapFromFillPath+0x34>
 800af04:	200002e8 	.word	0x200002e8
 800af08:	20000304 	.word	0x20000304
 800af0c:	200002d8 	.word	0x200002d8
 800af10:	200002e4 	.word	0x200002e4
 800af14:	200002ec 	.word	0x200002ec

0800af18 <EwGetBitmapFromStrokePath>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	ed2d 8b04 	vpush	{d8-d9}
 800af20:	b0a1      	sub	sp, #132	; 0x84
 800af22:	ac12      	add	r4, sp, #72	; 0x48
 800af24:	e884 0003 	stmia.w	r4, {r0, r1}
 800af28:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800af2a:	910a      	str	r1, [sp, #40]	; 0x28
 800af2c:	461c      	mov	r4, r3
 800af2e:	eeb0 8a40 	vmov.f32	s16, s0
 800af32:	eeb0 9a60 	vmov.f32	s18, s1
 800af36:	4681      	mov	r9, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4615      	mov	r5, r2
 800af3c:	b1a2      	cbz	r2, 800af68 <EwGetBitmapFromStrokePath+0x50>
 800af3e:	f852 3b40 	ldr.w	r3, [r2], #64
 800af42:	9309      	str	r3, [sp, #36]	; 0x24
 800af44:	9210      	str	r2, [sp, #64]	; 0x40
 800af46:	4613      	mov	r3, r2
 800af48:	2c00      	cmp	r4, #0
 800af4a:	bf14      	ite	ne
 800af4c:	f04f 33ff 	movne.w	r3, #4294967295
 800af50:	2301      	moveq	r3, #1
 800af52:	f1b9 0f00 	cmp.w	r9, #0
 800af56:	9311      	str	r3, [sp, #68]	; 0x44
 800af58:	dc09      	bgt.n	800af6e <EwGetBitmapFromStrokePath+0x56>
 800af5a:	2500      	movs	r5, #0
 800af5c:	4628      	mov	r0, r5
 800af5e:	b021      	add	sp, #132	; 0x84
 800af60:	ecbd 8b04 	vpop	{d8-d9}
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	9210      	str	r2, [sp, #64]	; 0x40
 800af6a:	9209      	str	r2, [sp, #36]	; 0x24
 800af6c:	e7ec      	b.n	800af48 <EwGetBitmapFromStrokePath+0x30>
 800af6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	ddf2      	ble.n	800af5a <EwGetBitmapFromStrokePath+0x42>
 800af74:	2d00      	cmp	r5, #0
 800af76:	d0f0      	beq.n	800af5a <EwGetBitmapFromStrokePath+0x42>
 800af78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800af7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af80:	d9eb      	bls.n	800af5a <EwGetBitmapFromStrokePath+0x42>
 800af82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af84:	930d      	str	r3, [sp, #52]	; 0x34
 800af86:	4628      	mov	r0, r5
 800af88:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 800af8c:	f7fb ff73 	bl	8006e76 <UpdateWatermark2+0xb06>
 800af90:	68eb      	ldr	r3, [r5, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0e1      	beq.n	800af5a <EwGetBitmapFromStrokePath+0x42>
 800af96:	fa5f f886 	uxtb.w	r8, r6
 800af9a:	f1b8 0f03 	cmp.w	r8, #3
 800af9e:	d108      	bne.n	800afb2 <EwGetBitmapFromStrokePath+0x9a>
 800afa0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800afa4:	eeb4 8a67 	vcmp.f32	s16, s15
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	bf48      	it	mi
 800afae:	f04f 0802 	movmi.w	r8, #2
 800afb2:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 800afb6:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 800afba:	d108      	bne.n	800afce <EwGetBitmapFromStrokePath+0xb6>
 800afbc:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800afc0:	eeb4 8a67 	vcmp.f32	s16, s15
 800afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc8:	bf48      	it	mi
 800afca:	f44f 7700 	movmi.w	r7, #512	; 0x200
 800afce:	f406 0b7f 	and.w	fp, r6, #16711680	; 0xff0000
 800afd2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800afd6:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 800afda:	ee68 8a00 	vmul.f32	s17, s16, s0
 800afde:	d114      	bne.n	800b00a <EwGetBitmapFromStrokePath+0xf2>
 800afe0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800afe4:	eeb4 8a67 	vcmp.f32	s16, s15
 800afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afec:	bf48      	it	mi
 800afee:	f04f 0b00 	movmi.w	fp, #0
 800aff2:	f1b8 0f01 	cmp.w	r8, #1
 800aff6:	d003      	beq.n	800b000 <EwGetBitmapFromStrokePath+0xe8>
 800aff8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800affc:	f040 80a9 	bne.w	800b152 <EwGetBitmapFromStrokePath+0x23a>
 800b000:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b004:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b008:	e00b      	b.n	800b022 <EwGetBitmapFromStrokePath+0x10a>
 800b00a:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800b00e:	d1f0      	bne.n	800aff2 <EwGetBitmapFromStrokePath+0xda>
 800b010:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b014:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	dd04      	ble.n	800b028 <EwGetBitmapFromStrokePath+0x110>
 800b01e:	ee68 7a89 	vmul.f32	s15, s17, s18
 800b022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b026:	e001      	b.n	800b02c <EwGetBitmapFromStrokePath+0x114>
 800b028:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800b02c:	ee17 1a90 	vmov	r1, s15
 800b030:	6a2e      	ldr	r6, [r5, #32]
 800b032:	69ab      	ldr	r3, [r5, #24]
 800b034:	2c00      	cmp	r4, #0
 800b036:	f040 808f 	bne.w	800b158 <EwGetBitmapFromStrokePath+0x240>
 800b03a:	eb0a 0003 	add.w	r0, sl, r3
 800b03e:	1a40      	subs	r0, r0, r1
 800b040:	3801      	subs	r0, #1
 800b042:	eb0a 0306 	add.w	r3, sl, r6
 800b046:	696a      	ldr	r2, [r5, #20]
 800b048:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b04a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b04c:	4414      	add	r4, r2
 800b04e:	69ea      	ldr	r2, [r5, #28]
 800b050:	1a64      	subs	r4, r4, r1
 800b052:	4432      	add	r2, r6
 800b054:	440b      	add	r3, r1
 800b056:	3c02      	subs	r4, #2
 800b058:	4411      	add	r1, r2
 800b05a:	3101      	adds	r1, #1
 800b05c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 800b060:	920b      	str	r2, [sp, #44]	; 0x2c
 800b062:	4549      	cmp	r1, r9
 800b064:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 800b068:	920c      	str	r2, [sp, #48]	; 0x30
 800b06a:	460a      	mov	r2, r1
 800b06c:	bfa8      	it	ge
 800b06e:	464a      	movge	r2, r9
 800b070:	920e      	str	r2, [sp, #56]	; 0x38
 800b072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b074:	3301      	adds	r3, #1
 800b076:	4293      	cmp	r3, r2
 800b078:	bfa8      	it	ge
 800b07a:	4613      	movge	r3, r2
 800b07c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b082:	4293      	cmp	r3, r2
 800b084:	f6bf af69 	bge.w	800af5a <EwGetBitmapFromStrokePath+0x42>
 800b088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b08a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b08c:	4293      	cmp	r3, r2
 800b08e:	f6bf af64 	bge.w	800af5a <EwGetBitmapFromStrokePath+0x42>
 800b092:	f1b8 0f03 	cmp.w	r8, #3
 800b096:	d005      	beq.n	800b0a4 <EwGetBitmapFromStrokePath+0x18c>
 800b098:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 800b09c:	d002      	beq.n	800b0a4 <EwGetBitmapFromStrokePath+0x18c>
 800b09e:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 800b0a2:	d162      	bne.n	800b16a <EwGetBitmapFromStrokePath+0x252>
 800b0a4:	eddf 7a92 	vldr	s15, [pc, #584]	; 800b2f0 <EwGetBitmapFromStrokePath+0x3d8>
 800b0a8:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b0ac:	f01e fbdc 	bl	8029868 <EwMathCeil>
 800b0b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0b4:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800b2f4 <EwGetBitmapFromStrokePath+0x3dc>
 800b0b8:	ee10 3a10 	vmov	r3, s0
 800b0bc:	3302      	adds	r3, #2
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	eec7 9a27 	vdiv.f32	s19, s14, s15
 800b0cc:	eeb0 0a69 	vmov.f32	s0, s19
 800b0d0:	f01e fb88 	bl	80297e4 <EwMathCos>
 800b0d4:	eeb0 8a40 	vmov.f32	s16, s0
 800b0d8:	eeb0 0a69 	vmov.f32	s0, s19
 800b0dc:	f01e fb7a 	bl	80297d4 <EwMathSin>
 800b0e0:	eef0 9a40 	vmov.f32	s19, s0
 800b0e4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800b0e8:	686a      	ldr	r2, [r5, #4]
 800b0ea:	2406      	movs	r4, #6
 800b0ec:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b0f0:	fb04 3300 	mla	r3, r4, r0, r3
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	f1b8 0f03 	cmp.w	r8, #3
 800b0fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b0fe:	d13b      	bne.n	800b178 <EwGetBitmapFromStrokePath+0x260>
 800b100:	9807      	ldr	r0, [sp, #28]
 800b102:	1e44      	subs	r4, r0, #1
 800b104:	0064      	lsls	r4, r4, #1
 800b106:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 800b10a:	fb04 3302 	mla	r3, r4, r2, r3
 800b10e:	d139      	bne.n	800b184 <EwGetBitmapFromStrokePath+0x26c>
 800b110:	9807      	ldr	r0, [sp, #28]
 800b112:	1e44      	subs	r4, r0, #1
 800b114:	0064      	lsls	r4, r4, #1
 800b116:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 800b11a:	fb04 3302 	mla	r3, r4, r2, r3
 800b11e:	eba1 0402 	sub.w	r4, r1, r2
 800b122:	d135      	bne.n	800b190 <EwGetBitmapFromStrokePath+0x278>
 800b124:	9a07      	ldr	r2, [sp, #28]
 800b126:	3a01      	subs	r2, #1
 800b128:	0052      	lsls	r2, r2, #1
 800b12a:	fb02 3404 	mla	r4, r2, r4, r3
 800b12e:	00a4      	lsls	r4, r4, #2
 800b130:	4620      	mov	r0, r4
 800b132:	f01e fb1d 	bl	8029770 <EwAlloc>
 800b136:	4606      	mov	r6, r0
 800b138:	2800      	cmp	r0, #0
 800b13a:	f040 80b1 	bne.w	800b2a0 <EwGetBitmapFromStrokePath+0x388>
 800b13e:	201f      	movs	r0, #31
 800b140:	f00e fd62 	bl	8019c08 <EwImmediateReclaimMemory>
 800b144:	4605      	mov	r5, r0
 800b146:	2800      	cmp	r0, #0
 800b148:	d1f2      	bne.n	800b130 <EwGetBitmapFromStrokePath+0x218>
 800b14a:	201f      	movs	r0, #31
 800b14c:	f00d fdac 	bl	8018ca8 <EwError>
 800b150:	e704      	b.n	800af5c <EwGetBitmapFromStrokePath+0x44>
 800b152:	ee78 7a80 	vadd.f32	s15, s17, s0
 800b156:	e764      	b.n	800b022 <EwGetBitmapFromStrokePath+0x10a>
 800b158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b15a:	4492      	add	sl, r2
 800b15c:	ebaa 0006 	sub.w	r0, sl, r6
 800b160:	1a40      	subs	r0, r0, r1
 800b162:	3801      	subs	r0, #1
 800b164:	ebaa 0303 	sub.w	r3, sl, r3
 800b168:	e76d      	b.n	800b046 <EwGetBitmapFromStrokePath+0x12e>
 800b16a:	ed9f 8a63 	vldr	s16, [pc, #396]	; 800b2f8 <EwGetBitmapFromStrokePath+0x3e0>
 800b16e:	2300      	movs	r3, #0
 800b170:	eef0 9a48 	vmov.f32	s19, s16
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	e7b5      	b.n	800b0e4 <EwGetBitmapFromStrokePath+0x1cc>
 800b178:	f1b8 0f02 	cmp.w	r8, #2
 800b17c:	bf0c      	ite	eq
 800b17e:	2402      	moveq	r4, #2
 800b180:	2400      	movne	r4, #0
 800b182:	e7c0      	b.n	800b106 <EwGetBitmapFromStrokePath+0x1ee>
 800b184:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800b188:	bf0c      	ite	eq
 800b18a:	2402      	moveq	r4, #2
 800b18c:	2400      	movne	r4, #0
 800b18e:	e7c2      	b.n	800b116 <EwGetBitmapFromStrokePath+0x1fe>
 800b190:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800b194:	bf0c      	ite	eq
 800b196:	2202      	moveq	r2, #2
 800b198:	2200      	movne	r2, #0
 800b19a:	e7c6      	b.n	800b12a <EwGetBitmapFromStrokePath+0x212>
 800b19c:	2100      	movs	r1, #0
 800b19e:	f7fc f8c7 	bl	8007330 <UpdateWatermark1+0x6c>
 800b1a2:	ab14      	add	r3, sp, #80	; 0x50
 800b1a4:	9304      	str	r3, [sp, #16]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	6882      	ldr	r2, [r0, #8]
 800b1b6:	6841      	ldr	r1, [r0, #4]
 800b1b8:	9008      	str	r0, [sp, #32]
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f008 f8fb 	bl	80133b8 <EwLockSurface>
 800b1c2:	b980      	cbnz	r0, 800b1e6 <EwGetBitmapFromStrokePath+0x2ce>
 800b1c4:	9b08      	ldr	r3, [sp, #32]
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	6819      	ldr	r1, [r3, #0]
 800b1ca:	208c      	movs	r0, #140	; 0x8c
 800b1cc:	f00d fd82 	bl	8018cd4 <EwErrorPD>
 800b1d0:	4a4a      	ldr	r2, [pc, #296]	; (800b2fc <EwGetBitmapFromStrokePath+0x3e4>)
 800b1d2:	6813      	ldr	r3, [r2, #0]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	1b1b      	subs	r3, r3, r4
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	f01e facb 	bl	8029774 <EwFree>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7fc fb14 	bl	800780c <EwFreeBitmap>
 800b1e4:	e6b9      	b.n	800af5a <EwGetBitmapFromStrokePath+0x42>
 800b1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800b1f4:	4359      	muls	r1, r3
 800b1f6:	f01e fae3 	bl	80297c0 <EwZero>
 800b1fa:	1933      	adds	r3, r6, r4
 800b1fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b1fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b200:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800b204:	f1a3 0904 	sub.w	r9, r3, #4
 800b208:	4630      	mov	r0, r6
 800b20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dc26      	bgt.n	800b25e <EwGetBitmapFromStrokePath+0x346>
 800b210:	2300      	movs	r3, #0
 800b212:	6003      	str	r3, [r0, #0]
 800b214:	2301      	movs	r3, #1
 800b216:	9305      	str	r3, [sp, #20]
 800b218:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	9302      	str	r3, [sp, #8]
 800b22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b22e:	1a9b      	subs	r3, r3, r2
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	4631      	mov	r1, r6
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	a814      	add	r0, sp, #80	; 0x50
 800b23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b240:	f009 f867 	bl	8014312 <EwRasterAlpha8Polygon>
 800b244:	4630      	mov	r0, r6
 800b246:	f01e fa95 	bl	8029774 <EwFree>
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	a914      	add	r1, sp, #80	; 0x50
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	f007 fd62 	bl	8012d18 <EwUnlockSurface>
 800b254:	4a29      	ldr	r2, [pc, #164]	; (800b2fc <EwGetBitmapFromStrokePath+0x3e4>)
 800b256:	6813      	ldr	r3, [r2, #0]
 800b258:	1b1b      	subs	r3, r3, r4
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	e67e      	b.n	800af5c <EwGetBitmapFromStrokePath+0x44>
 800b25e:	f859 cf04 	ldr.w	ip, [r9, #4]!
 800b262:	f1bc 0f00 	cmp.w	ip, #0
 800b266:	d017      	beq.n	800b298 <EwGetBitmapFromStrokePath+0x380>
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b26e:	e9cd a303 	strd	sl, r3, [sp, #12]
 800b272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b274:	9302      	str	r3, [sp, #8]
 800b276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b278:	eef0 1a69 	vmov.f32	s3, s19
 800b27c:	e9cd 0300 	strd	r0, r3, [sp]
 800b280:	eeb0 1a48 	vmov.f32	s2, s16
 800b284:	eef0 0a68 	vmov.f32	s1, s17
 800b288:	eeb0 0a49 	vmov.f32	s0, s18
 800b28c:	465b      	mov	r3, fp
 800b28e:	463a      	mov	r2, r7
 800b290:	4641      	mov	r1, r8
 800b292:	4660      	mov	r0, ip
 800b294:	f7fb fa69 	bl	800676a <UpdateWatermark2+0x3fa>
 800b298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29a:	3b01      	subs	r3, #1
 800b29c:	9309      	str	r3, [sp, #36]	; 0x24
 800b29e:	e7b4      	b.n	800b20a <EwGetBitmapFromStrokePath+0x2f2>
 800b2a0:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <EwGetBitmapFromStrokePath+0x3e4>)
 800b2a2:	6813      	ldr	r3, [r2, #0]
 800b2a4:	4423      	add	r3, r4
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	4a15      	ldr	r2, [pc, #84]	; (800b300 <EwGetBitmapFromStrokePath+0x3e8>)
 800b2aa:	6811      	ldr	r1, [r2, #0]
 800b2ac:	428b      	cmp	r3, r1
 800b2ae:	dd00      	ble.n	800b2b2 <EwGetBitmapFromStrokePath+0x39a>
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	4a14      	ldr	r2, [pc, #80]	; (800b304 <EwGetBitmapFromStrokePath+0x3ec>)
 800b2b4:	4914      	ldr	r1, [pc, #80]	; (800b308 <EwGetBitmapFromStrokePath+0x3f0>)
 800b2b6:	6812      	ldr	r2, [r2, #0]
 800b2b8:	6809      	ldr	r1, [r1, #0]
 800b2ba:	440a      	add	r2, r1
 800b2bc:	4413      	add	r3, r2
 800b2be:	4a13      	ldr	r2, [pc, #76]	; (800b30c <EwGetBitmapFromStrokePath+0x3f4>)
 800b2c0:	6811      	ldr	r1, [r2, #0]
 800b2c2:	428b      	cmp	r3, r1
 800b2c4:	bfc8      	it	gt
 800b2c6:	6013      	strgt	r3, [r2, #0]
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2002      	movs	r0, #2
 800b2d4:	f7fc fae8 	bl	80078a8 <EwCreateBitmap>
 800b2d8:	4605      	mov	r5, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f47f af5e 	bne.w	800b19c <EwGetBitmapFromStrokePath+0x284>
 800b2e0:	4a06      	ldr	r2, [pc, #24]	; (800b2fc <EwGetBitmapFromStrokePath+0x3e4>)
 800b2e2:	6813      	ldr	r3, [r2, #0]
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	1b1b      	subs	r3, r3, r4
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	f01e fa43 	bl	8029774 <EwFree>
 800b2ee:	e635      	b.n	800af5c <EwGetBitmapFromStrokePath+0x44>
 800b2f0:	3e19999a 	.word	0x3e19999a
 800b2f4:	43340000 	.word	0x43340000
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	200002e8 	.word	0x200002e8
 800b300:	20000304 	.word	0x20000304
 800b304:	200002d8 	.word	0x200002d8
 800b308:	200002e4 	.word	0x200002e4
 800b30c:	200002ec 	.word	0x200002ec

0800b310 <EwCopyBitmap>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	b08f      	sub	sp, #60	; 0x3c
 800b316:	4698      	mov	r8, r3
 800b318:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b320:	930b      	str	r3, [sp, #44]	; 0x2c
 800b322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b324:	930c      	str	r3, [sp, #48]	; 0x30
 800b326:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b328:	9306      	str	r3, [sp, #24]
 800b32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	460e      	mov	r6, r1
 800b330:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 800b334:	930d      	str	r3, [sp, #52]	; 0x34
 800b336:	4611      	mov	r1, r2
 800b338:	4617      	mov	r7, r2
 800b33a:	e9dd 9a1c 	ldrd	r9, sl, [sp, #112]	; 0x70
 800b33e:	4604      	mov	r4, r0
 800b340:	f7fb fff6 	bl	8007330 <UpdateWatermark1+0x6c>
 800b344:	4641      	mov	r1, r8
 800b346:	9004      	str	r0, [sp, #16]
 800b348:	4630      	mov	r0, r6
 800b34a:	f7fb fff1 	bl	8007330 <UpdateWatermark1+0x6c>
 800b34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b350:	f89d 208a 	ldrb.w	r2, [sp, #138]	; 0x8a
 800b354:	f89d 1089 	ldrb.w	r1, [sp, #137]	; 0x89
 800b358:	4605      	mov	r5, r0
 800b35a:	f89d 0088 	ldrb.w	r0, [sp, #136]	; 0x88
 800b35e:	f7f5 f8f8 	bl	8000552 <EwPackColor>
 800b362:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
 800b366:	f89d 208e 	ldrb.w	r2, [sp, #142]	; 0x8e
 800b36a:	f89d 108d 	ldrb.w	r1, [sp, #141]	; 0x8d
 800b36e:	4683      	mov	fp, r0
 800b370:	f89d 008c 	ldrb.w	r0, [sp, #140]	; 0x8c
 800b374:	f7f5 f8ed 	bl	8000552 <EwPackColor>
 800b378:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 800b37c:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
 800b380:	f89d 1095 	ldrb.w	r1, [sp, #149]	; 0x95
 800b384:	9005      	str	r0, [sp, #20]
 800b386:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
 800b38a:	f7f5 f8e2 	bl	8000552 <EwPackColor>
 800b38e:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
 800b392:	9001      	str	r0, [sp, #4]
 800b394:	f89d 2092 	ldrb.w	r2, [sp, #146]	; 0x92
 800b398:	f89d 1091 	ldrb.w	r1, [sp, #145]	; 0x91
 800b39c:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 800b3a0:	f7f5 f8d7 	bl	8000552 <EwPackColor>
 800b3a4:	9b04      	ldr	r3, [sp, #16]
 800b3a6:	9002      	str	r0, [sp, #8]
 800b3a8:	b12b      	cbz	r3, 800b3b6 <EwCopyBitmap+0xa6>
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	8c13      	ldrh	r3, [r2, #32]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d907      	bls.n	800b3c6 <EwCopyBitmap+0xb6>
 800b3b6:	463a      	mov	r2, r7
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	20a0      	movs	r0, #160	; 0xa0
 800b3bc:	b00f      	add	sp, #60	; 0x3c
 800b3be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c2:	f00d bc87 	b.w	8018cd4 <EwErrorPD>
 800b3c6:	6993      	ldr	r3, [r2, #24]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <EwCopyBitmap+0xbe>
 800b3ca:	69d3      	ldr	r3, [r2, #28]
 800b3cc:	b123      	cbz	r3, 800b3d8 <EwCopyBitmap+0xc8>
 800b3ce:	463a      	mov	r2, r7
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800b3d6:	e7f1      	b.n	800b3bc <EwCopyBitmap+0xac>
 800b3d8:	b125      	cbz	r5, 800b3e4 <EwCopyBitmap+0xd4>
 800b3da:	6828      	ldr	r0, [r5, #0]
 800b3dc:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	d103      	bne.n	800b3ec <EwCopyBitmap+0xdc>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	20a3      	movs	r0, #163	; 0xa3
 800b3ea:	e7e7      	b.n	800b3bc <EwCopyBitmap+0xac>
 800b3ec:	9a03      	ldr	r2, [sp, #12]
 800b3ee:	b172      	cbz	r2, 800b40e <EwCopyBitmap+0xfe>
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d10c      	bne.n	800b40e <EwCopyBitmap+0xfe>
 800b3f4:	9b05      	ldr	r3, [sp, #20]
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	ea0b 0303 	and.w	r3, fp, r3
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	9a02      	ldr	r2, [sp, #8]
 800b400:	4013      	ands	r3, r2
 800b402:	0e1b      	lsrs	r3, r3, #24
 800b404:	2bff      	cmp	r3, #255	; 0xff
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	bf08      	it	eq
 800b40a:	2300      	moveq	r3, #0
 800b40c:	9303      	str	r3, [sp, #12]
 800b40e:	f007 ff3b 	bl	8013288 <EwFlushTasks>
 800b412:	6873      	ldr	r3, [r6, #4]
 800b414:	9a06      	ldr	r2, [sp, #24]
 800b416:	444b      	add	r3, r9
 800b418:	1a9a      	subs	r2, r3, r2
 800b41a:	9b06      	ldr	r3, [sp, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bfd8      	it	le
 800b420:	eba9 0003 	suble.w	r0, r9, r3
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	bfc8      	it	gt
 800b428:	4648      	movgt	r0, r9
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfd8      	it	le
 800b42e:	ebaa 0103 	suble.w	r1, sl, r3
 800b432:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b438:	bfc8      	it	gt
 800b43a:	4651      	movgt	r1, sl
 800b43c:	4283      	cmp	r3, r0
 800b43e:	bfb8      	it	lt
 800b440:	4603      	movlt	r3, r0
 800b442:	9308      	str	r3, [sp, #32]
 800b444:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b446:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b448:	4283      	cmp	r3, r0
 800b44a:	bfa8      	it	ge
 800b44c:	4603      	movge	r3, r0
 800b44e:	4293      	cmp	r3, r2
 800b450:	bfa8      	it	ge
 800b452:	4613      	movge	r3, r2
 800b454:	6862      	ldr	r2, [r4, #4]
 800b456:	4293      	cmp	r3, r2
 800b458:	bfa8      	it	ge
 800b45a:	4613      	movge	r3, r2
 800b45c:	9a08      	ldr	r2, [sp, #32]
 800b45e:	930a      	str	r3, [sp, #40]	; 0x28
 800b460:	4293      	cmp	r3, r2
 800b462:	f340 8130 	ble.w	800b6c6 <EwCopyBitmap+0x3b6>
 800b466:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b46a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b46e:	428b      	cmp	r3, r1
 800b470:	bfb8      	it	lt
 800b472:	460b      	movlt	r3, r1
 800b474:	9309      	str	r3, [sp, #36]	; 0x24
 800b476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b478:	9907      	ldr	r1, [sp, #28]
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bfa8      	it	ge
 800b47e:	4613      	movge	r3, r2
 800b480:	68a2      	ldr	r2, [r4, #8]
 800b482:	429a      	cmp	r2, r3
 800b484:	bfa8      	it	ge
 800b486:	461a      	movge	r2, r3
 800b488:	68b3      	ldr	r3, [r6, #8]
 800b48a:	4453      	add	r3, sl
 800b48c:	1a5b      	subs	r3, r3, r1
 800b48e:	429a      	cmp	r2, r3
 800b490:	bfa8      	it	ge
 800b492:	461a      	movge	r2, r3
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	429a      	cmp	r2, r3
 800b498:	4617      	mov	r7, r2
 800b49a:	f340 8114 	ble.w	800b6c6 <EwCopyBitmap+0x3b6>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	b14b      	cbz	r3, 800b4b6 <EwCopyBitmap+0x1a6>
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	ea4b 0303 	orr.w	r3, fp, r3
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	9a02      	ldr	r2, [sp, #8]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	0e1b      	lsrs	r3, r3, #24
 800b4b2:	f000 8108 	beq.w	800b6c6 <EwCopyBitmap+0x3b6>
 800b4b6:	682b      	ldr	r3, [r5, #0]
 800b4b8:	689a      	ldr	r2, [r3, #8]
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	609a      	str	r2, [r3, #8]
 800b4be:	68da      	ldr	r2, [r3, #12]
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	60da      	str	r2, [r3, #12]
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	f007 fe1a 	bl	8013100 <EwInitIssue>
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	b950      	cbnz	r0, 800b4e6 <EwCopyBitmap+0x1d6>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	3a01      	subs	r2, #1
 800b4d6:	609a      	str	r2, [r3, #8]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	60da      	str	r2, [r3, #12]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	207f      	movs	r0, #127	; 0x7f
 800b4e4:	e76a      	b.n	800b3bc <EwCopyBitmap+0xac>
 800b4e6:	2120      	movs	r1, #32
 800b4e8:	f007 feab 	bl	8013242 <EwAllocTaskData>
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4f0:	889a      	ldrh	r2, [r3, #4]
 800b4f2:	891b      	ldrh	r3, [r3, #8]
 800b4f4:	4491      	add	r9, r2
 800b4f6:	440a      	add	r2, r1
 800b4f8:	8082      	strh	r2, [r0, #4]
 800b4fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4fc:	f8a0 9000 	strh.w	r9, [r0]
 800b500:	449a      	add	sl, r3
 800b502:	4413      	add	r3, r2
 800b504:	80c3      	strh	r3, [r0, #6]
 800b506:	9a06      	ldr	r2, [sp, #24]
 800b508:	686b      	ldr	r3, [r5, #4]
 800b50a:	f8a0 a002 	strh.w	sl, [r0, #2]
 800b50e:	4413      	add	r3, r2
 800b510:	8103      	strh	r3, [r0, #8]
 800b512:	9a07      	ldr	r2, [sp, #28]
 800b514:	68ab      	ldr	r3, [r5, #8]
 800b516:	4413      	add	r3, r2
 800b518:	8143      	strh	r3, [r0, #10]
 800b51a:	682b      	ldr	r3, [r5, #0]
 800b51c:	e9c0 3b03 	strd	r3, fp, [r0, #12]
 800b520:	9b05      	ldr	r3, [sp, #20]
 800b522:	6143      	str	r3, [r0, #20]
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	6183      	str	r3, [r0, #24]
 800b528:	9b01      	ldr	r3, [sp, #4]
 800b52a:	61c3      	str	r3, [r0, #28]
 800b52c:	4604      	mov	r4, r0
 800b52e:	2100      	movs	r1, #0
 800b530:	4640      	mov	r0, r8
 800b532:	f007 fe4d 	bl	80131d0 <EwAllocTask>
 800b536:	2302      	movs	r3, #2
 800b538:	8083      	strh	r3, [r0, #4]
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b53e:	8899      	ldrh	r1, [r3, #4]
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	6104      	str	r4, [r0, #16]
 800b544:	eb01 0903 	add.w	r9, r1, r3
 800b548:	9b04      	ldr	r3, [sp, #16]
 800b54a:	891b      	ldrh	r3, [r3, #8]
 800b54c:	eb03 0e02 	add.w	lr, r3, r2
 800b550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b552:	443b      	add	r3, r7
 800b554:	4411      	add	r1, r2
 800b556:	9a03      	ldr	r2, [sp, #12]
 800b558:	fa0f f989 	sxth.w	r9, r9
 800b55c:	fa0f fe8e 	sxth.w	lr, lr
 800b560:	b209      	sxth	r1, r1
 800b562:	b21b      	sxth	r3, r3
 800b564:	4606      	mov	r6, r0
 800b566:	f8a0 9008 	strh.w	r9, [r0, #8]
 800b56a:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800b56e:	8181      	strh	r1, [r0, #12]
 800b570:	81c3      	strh	r3, [r0, #14]
 800b572:	2a00      	cmp	r2, #0
 800b574:	d03e      	beq.n	800b5f4 <EwCopyBitmap+0x2e4>
 800b576:	9a05      	ldr	r2, [sp, #20]
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	ea0b 0202 	and.w	r2, fp, r2
 800b57e:	4002      	ands	r2, r0
 800b580:	9802      	ldr	r0, [sp, #8]
 800b582:	4002      	ands	r2, r0
 800b584:	0e12      	lsrs	r2, r2, #24
 800b586:	2aff      	cmp	r2, #255	; 0xff
 800b588:	d134      	bne.n	800b5f4 <EwCopyBitmap+0x2e4>
 800b58a:	f9b4 c000 	ldrsh.w	ip, [r4]
 800b58e:	68ea      	ldr	r2, [r5, #12]
 800b590:	9806      	ldr	r0, [sp, #24]
 800b592:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800b596:	4462      	add	r2, ip
 800b598:	1a12      	subs	r2, r2, r0
 800b59a:	454a      	cmp	r2, r9
 800b59c:	4610      	mov	r0, r2
 800b59e:	bfb8      	it	lt
 800b5a0:	4648      	movlt	r0, r9
 800b5a2:	9008      	str	r0, [sp, #32]
 800b5a4:	6928      	ldr	r0, [r5, #16]
 800b5a6:	eb07 0a00 	add.w	sl, r7, r0
 800b5aa:	9807      	ldr	r0, [sp, #28]
 800b5ac:	ebaa 0a00 	sub.w	sl, sl, r0
 800b5b0:	45f2      	cmp	sl, lr
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	bfb8      	it	lt
 800b5b6:	4670      	movlt	r0, lr
 800b5b8:	9009      	str	r0, [sp, #36]	; 0x24
 800b5ba:	6968      	ldr	r0, [r5, #20]
 800b5bc:	4484      	add	ip, r0
 800b5be:	9806      	ldr	r0, [sp, #24]
 800b5c0:	ebac 0c00 	sub.w	ip, ip, r0
 800b5c4:	458c      	cmp	ip, r1
 800b5c6:	4660      	mov	r0, ip
 800b5c8:	bfa8      	it	ge
 800b5ca:	4608      	movge	r0, r1
 800b5cc:	900a      	str	r0, [sp, #40]	; 0x28
 800b5ce:	69a8      	ldr	r0, [r5, #24]
 800b5d0:	4407      	add	r7, r0
 800b5d2:	9807      	ldr	r0, [sp, #28]
 800b5d4:	1a38      	subs	r0, r7, r0
 800b5d6:	4298      	cmp	r0, r3
 800b5d8:	4607      	mov	r7, r0
 800b5da:	bfa8      	it	ge
 800b5dc:	461f      	movge	r7, r3
 800b5de:	454a      	cmp	r2, r9
 800b5e0:	dc08      	bgt.n	800b5f4 <EwCopyBitmap+0x2e4>
 800b5e2:	458c      	cmp	ip, r1
 800b5e4:	db06      	blt.n	800b5f4 <EwCopyBitmap+0x2e4>
 800b5e6:	45f2      	cmp	sl, lr
 800b5e8:	dc04      	bgt.n	800b5f4 <EwCopyBitmap+0x2e4>
 800b5ea:	9a03      	ldr	r2, [sp, #12]
 800b5ec:	4298      	cmp	r0, r3
 800b5ee:	bfa8      	it	ge
 800b5f0:	2200      	movge	r2, #0
 800b5f2:	9203      	str	r2, [sp, #12]
 800b5f4:	9b03      	ldr	r3, [sp, #12]
 800b5f6:	3b00      	subs	r3, #0
 800b5f8:	bf18      	it	ne
 800b5fa:	2301      	movne	r3, #1
 800b5fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b600:	80f2      	strh	r2, [r6, #6]
 800b602:	9a05      	ldr	r2, [sp, #20]
 800b604:	4593      	cmp	fp, r2
 800b606:	9a01      	ldr	r2, [sp, #4]
 800b608:	d04f      	beq.n	800b6aa <EwCopyBitmap+0x39a>
 800b60a:	9902      	ldr	r1, [sp, #8]
 800b60c:	428a      	cmp	r2, r1
 800b60e:	d051      	beq.n	800b6b4 <EwCopyBitmap+0x3a4>
 800b610:	4593      	cmp	fp, r2
 800b612:	d14f      	bne.n	800b6b4 <EwCopyBitmap+0x3a4>
 800b614:	9a05      	ldr	r2, [sp, #20]
 800b616:	428a      	cmp	r2, r1
 800b618:	d14c      	bne.n	800b6b4 <EwCopyBitmap+0x3a4>
 800b61a:	f443 7383 	orr.w	r3, r3, #262	; 0x106
 800b61e:	80f3      	strh	r3, [r6, #6]
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	b34b      	cbz	r3, 800b678 <EwCopyBitmap+0x368>
 800b624:	9b05      	ldr	r3, [sp, #20]
 800b626:	ea0b 0003 	and.w	r0, fp, r3
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	4018      	ands	r0, r3
 800b62e:	9b02      	ldr	r3, [sp, #8]
 800b630:	ea00 0b03 	and.w	fp, r0, r3
 800b634:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800b638:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800b63c:	d11c      	bne.n	800b678 <EwCopyBitmap+0x368>
 800b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b640:	9a08      	ldr	r2, [sp, #32]
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	2b0f      	cmp	r3, #15
 800b646:	dd17      	ble.n	800b678 <EwCopyBitmap+0x368>
 800b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64a:	1afb      	subs	r3, r7, r3
 800b64c:	2b0f      	cmp	r3, #15
 800b64e:	dd13      	ble.n	800b678 <EwCopyBitmap+0x368>
 800b650:	2100      	movs	r1, #0
 800b652:	4640      	mov	r0, r8
 800b654:	f007 fdbc 	bl	80131d0 <EwAllocTask>
 800b658:	2302      	movs	r3, #2
 800b65a:	8083      	strh	r3, [r0, #4]
 800b65c:	9b08      	ldr	r3, [sp, #32]
 800b65e:	8103      	strh	r3, [r0, #8]
 800b660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b662:	8143      	strh	r3, [r0, #10]
 800b664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b666:	8183      	strh	r3, [r0, #12]
 800b668:	88f3      	ldrh	r3, [r6, #6]
 800b66a:	6104      	str	r4, [r0, #16]
 800b66c:	f023 0301 	bic.w	r3, r3, #1
 800b670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b674:	81c7      	strh	r7, [r0, #14]
 800b676:	80c3      	strh	r3, [r0, #6]
 800b678:	682a      	ldr	r2, [r5, #0]
 800b67a:	6893      	ldr	r3, [r2, #8]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	6093      	str	r3, [r2, #8]
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	b00f      	add	sp, #60	; 0x3c
 800b686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	f007 be49 	b.w	8013320 <EwDoneIssue>
 800b68e:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 800b692:	e7c0      	b.n	800b616 <EwCopyBitmap+0x306>
 800b694:	682a      	ldr	r2, [r5, #0]
 800b696:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 800b69a:	2a02      	cmp	r2, #2
 800b69c:	d002      	beq.n	800b6a4 <EwCopyBitmap+0x394>
 800b69e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6a0:	2aff      	cmp	r2, #255	; 0xff
 800b6a2:	d0bd      	beq.n	800b620 <EwCopyBitmap+0x310>
 800b6a4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800b6a8:	e7b9      	b.n	800b61e <EwCopyBitmap+0x30e>
 800b6aa:	4593      	cmp	fp, r2
 800b6ac:	d105      	bne.n	800b6ba <EwCopyBitmap+0x3aa>
 800b6ae:	9a02      	ldr	r2, [sp, #8]
 800b6b0:	4593      	cmp	fp, r2
 800b6b2:	d0ef      	beq.n	800b694 <EwCopyBitmap+0x384>
 800b6b4:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800b6b8:	e7b1      	b.n	800b61e <EwCopyBitmap+0x30e>
 800b6ba:	9a02      	ldr	r2, [sp, #8]
 800b6bc:	4593      	cmp	fp, r2
 800b6be:	d1e6      	bne.n	800b68e <EwCopyBitmap+0x37e>
 800b6c0:	9a01      	ldr	r2, [sp, #4]
 800b6c2:	455a      	cmp	r2, fp
 800b6c4:	e7f5      	b.n	800b6b2 <EwCopyBitmap+0x3a2>
 800b6c6:	b00f      	add	sp, #60	; 0x3c
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6cc <EwEndUpdate>:
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d2:	b0e1      	sub	sp, #388	; 0x184
 800b6d4:	ad6b      	add	r5, sp, #428	; 0x1ac
 800b6d6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b6da:	4604      	mov	r4, r0
 800b6dc:	b110      	cbz	r0, 800b6e4 <EwEndUpdate+0x18>
 800b6de:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800b6e2:	b943      	cbnz	r3, 800b6f6 <EwEndUpdate+0x2a>
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	2099      	movs	r0, #153	; 0x99
 800b6ea:	b061      	add	sp, #388	; 0x184
 800b6ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	b004      	add	sp, #16
 800b6f2:	f00d baef 	b.w	8018cd4 <EwErrorPD>
 800b6f6:	f100 0a90 	add.w	sl, r0, #144	; 0x90
 800b6fa:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800b6fe:	ae01      	add	r6, sp, #4
 800b700:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800b704:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b70c:	4628      	mov	r0, r5
 800b70e:	f00e fc63 	bl	8019fd8 <EwIntersectRect>
 800b712:	4fb9      	ldr	r7, [pc, #740]	; (800b9f8 <EwEndUpdate+0x32c>)
 800b714:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
 800b716:	9310      	str	r3, [sp, #64]	; 0x40
 800b718:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800b71a:	9311      	str	r3, [sp, #68]	; 0x44
 800b71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d061      	beq.n	800b7e6 <EwEndUpdate+0x11a>
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d05e      	beq.n	800b7e6 <EwEndUpdate+0x11a>
 800b728:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800b72c:	f04f 0800 	mov.w	r8, #0
 800b730:	23dc      	movs	r3, #220	; 0xdc
 800b732:	4611      	mov	r1, r2
 800b734:	4610      	mov	r0, r2
 800b736:	e9cd 8830 	strd	r8, r8, [sp, #192]	; 0xc0
 800b73a:	f00c fcdd 	bl	80180f8 <EwNewColor>
 800b73e:	f10d 0bdc 	add.w	fp, sp, #220	; 0xdc
 800b742:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b746:	902c      	str	r0, [sp, #176]	; 0xb0
 800b748:	4658      	mov	r0, fp
 800b74a:	f00e fb4b 	bl	8019de4 <EwNewPoint>
 800b74e:	f10d 09f8 	add.w	r9, sp, #248	; 0xf8
 800b752:	2333      	movs	r3, #51	; 0x33
 800b754:	4648      	mov	r0, r9
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	4642      	mov	r2, r8
 800b75a:	2390      	movs	r3, #144	; 0x90
 800b75c:	4641      	mov	r1, r8
 800b75e:	f00e fbb7 	bl	8019ed0 <EwNewRect>
 800b762:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800b766:	e886 0003 	stmia.w	r6, {r0, r1}
 800b76a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800b772:	a84a      	add	r0, sp, #296	; 0x128
 800b774:	f00e fd0f 	bl	801a196 <EwMoveRectPos>
 800b778:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b77c:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800b780:	e886 0003 	stmia.w	r6, {r0, r1}
 800b784:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	af14      	add	r7, sp, #80	; 0x50
 800b78a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b78e:	4638      	mov	r0, r7
 800b790:	f00e fceb 	bl	801a16a <EwMoveRectNeg>
 800b794:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b798:	e886 0003 	stmia.w	r6, {r0, r1}
 800b79c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800b7a4:	ab4a      	add	r3, sp, #296	; 0x128
 800b7a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7a8:	4648      	mov	r0, r9
 800b7aa:	f00e fcde 	bl	801a16a <EwMoveRectNeg>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	930e      	str	r3, [sp, #56]	; 0x38
 800b7b2:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 800b7b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b7b8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800b7bc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800b7c0:	ab08      	add	r3, sp, #32
 800b7c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7c6:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800b7ca:	ae04      	add	r6, sp, #16
 800b7cc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800b7d0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800b7d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b7d8:	4643      	mov	r3, r8
 800b7da:	4642      	mov	r2, r8
 800b7dc:	4659      	mov	r1, fp
 800b7de:	f104 0008 	add.w	r0, r4, #8
 800b7e2:	f7ff fd95 	bl	800b310 <EwCopyBitmap>
 800b7e6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800b9f8 <EwEndUpdate+0x32c>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800b7f0:	f007 fdc0 	bl	8013374 <EwWaitForSurface>
 800b7f4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 80b0 	beq.w	800b95e <EwEndUpdate+0x292>
 800b7fe:	f8d8 901c 	ldr.w	r9, [r8, #28]
 800b802:	f1b9 0f00 	cmp.w	r9, #0
 800b806:	f040 80aa 	bne.w	800b95e <EwEndUpdate+0x292>
 800b80a:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 800b80e:	ae01      	add	r6, sp, #4
 800b810:	e886 0003 	stmia.w	r6, {r0, r1}
 800b814:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800b81c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b820:	4650      	mov	r0, sl
 800b822:	f00e fca2 	bl	801a16a <EwMoveRectNeg>
 800b826:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800b82a:	ad20      	add	r5, sp, #128	; 0x80
 800b82c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b830:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800b834:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b838:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800b83c:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800b840:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800b842:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800b846:	1a82      	subs	r2, r0, r2
 800b848:	1ac9      	subs	r1, r1, r3
 800b84a:	4658      	mov	r0, fp
 800b84c:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
 800b850:	683f      	ldr	r7, [r7, #0]
 800b852:	f00e fac7 	bl	8019de4 <EwNewPoint>
 800b856:	2333      	movs	r3, #51	; 0x33
 800b858:	464a      	mov	r2, r9
 800b85a:	4649      	mov	r1, r9
 800b85c:	4650      	mov	r0, sl
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	2390      	movs	r3, #144	; 0x90
 800b862:	f00e fb35 	bl	8019ed0 <EwNewRect>
 800b866:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800b86a:	e886 0003 	stmia.w	r6, {r0, r1}
 800b86e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
 800b876:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 800b87a:	4648      	mov	r0, r9
 800b87c:	f00e fc8b 	bl	801a196 <EwMoveRectPos>
 800b880:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800b884:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800b888:	68eb      	ldr	r3, [r5, #12]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800b890:	4650      	mov	r0, sl
 800b892:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b896:	f00e fb9f 	bl	8019fd8 <EwIntersectRect>
 800b89a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800b89e:	e9dd 962c 	ldrd	r9, r6, [sp, #176]	; 0xb0
 800b8a2:	f00e fb73 	bl	8019f8c <EwIsRectEmpty>
 800b8a6:	4682      	mov	sl, r0
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d158      	bne.n	800b95e <EwEndUpdate+0x292>
 800b8ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8b0:	2183      	movs	r1, #131	; 0x83
 800b8b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b8b6:	9001      	str	r0, [sp, #4]
 800b8b8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b8bc:	ad3e      	add	r5, sp, #248	; 0xf8
 800b8be:	9504      	str	r5, [sp, #16]
 800b8c0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b8c4:	9200      	str	r2, [sp, #0]
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f007 fd74 	bl	80133b8 <EwLockSurface>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	f000 808d 	beq.w	800b9f0 <EwEndUpdate+0x324>
 800b8d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8d8:	f10d 0cc0 	add.w	ip, sp, #192	; 0xc0
 800b8dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8e4:	2390      	movs	r3, #144	; 0x90
 800b8e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
 800b8f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b8f2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b8f4:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 800b8f8:	fb03 f309 	mul.w	r3, r3, r9
 800b8fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b900:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800b902:	f8cd a0e8 	str.w	sl, [sp, #232]	; 0xe8
 800b906:	4413      	add	r3, r2
 800b908:	9330      	str	r3, [sp, #192]	; 0xc0
 800b90a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800b90c:	fb00 f309 	mul.w	r3, r0, r9
 800b910:	fb01 3306 	mla	r3, r1, r6, r3
 800b914:	4413      	add	r3, r2
 800b916:	9333      	str	r3, [sp, #204]	; 0xcc
 800b918:	e9dd 322e 	ldrd	r3, r2, [sp, #184]	; 0xb8
 800b91c:	e9cd aa3b 	strd	sl, sl, [sp, #236]	; 0xec
 800b920:	eba3 0a09 	sub.w	sl, r3, r9
 800b924:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b926:	f108 054c 	add.w	r5, r8, #76	; 0x4c
 800b92a:	eba9 0903 	sub.w	r9, r9, r3
 800b92e:	eb05 0309 	add.w	r3, r5, r9
 800b932:	9337      	str	r3, [sp, #220]	; 0xdc
 800b934:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
 800b938:	051b      	lsls	r3, r3, #20
 800b93a:	934a      	str	r3, [sp, #296]	; 0x128
 800b93c:	934e      	str	r3, [sp, #312]	; 0x138
 800b93e:	9352      	str	r3, [sp, #328]	; 0x148
 800b940:	f04f 635c 	mov.w	r3, #230686720	; 0xdc00000
 800b944:	9356      	str	r3, [sp, #344]	; 0x158
 800b946:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b948:	1b96      	subs	r6, r2, r6
 800b94a:	eba2 0803 	sub.w	r8, r2, r3
 800b94e:	2e00      	cmp	r6, #0
 800b950:	eba8 0106 	sub.w	r1, r8, r6
 800b954:	dc39      	bgt.n	800b9ca <EwEndUpdate+0x2fe>
 800b956:	a93e      	add	r1, sp, #248	; 0xf8
 800b958:	4638      	mov	r0, r7
 800b95a:	f007 f9dd 	bl	8012d18 <EwUnlockSurface>
 800b95e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b960:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800b962:	1a9b      	subs	r3, r3, r2
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b968:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800b96a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800b96e:	1a9b      	subs	r3, r3, r2
 800b970:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800b974:	f01d fb3a 	bl	8028fec <GfxEndUpdate>
 800b978:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
 800b97c:	b16e      	cbz	r6, 800b99a <EwEndUpdate+0x2ce>
 800b97e:	ab6b      	add	r3, sp, #428	; 0x1ac
 800b980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b982:	ad01      	add	r5, sp, #4
 800b984:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b988:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
 800b992:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800b996:	4620      	mov	r0, r4
 800b998:	47b0      	blx	r6
 800b99a:	4a17      	ldr	r2, [pc, #92]	; (800b9f8 <EwEndUpdate+0x32c>)
 800b99c:	2300      	movs	r3, #0
 800b99e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b9a2:	e9c4 3323 	strd	r3, r3, [r4, #140]	; 0x8c
 800b9a6:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
 800b9aa:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800b9ae:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 800b9b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800b9b6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800b9ba:	6a13      	ldr	r3, [r2, #32]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	6213      	str	r3, [r2, #32]
 800b9c0:	b061      	add	sp, #388	; 0x184
 800b9c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c6:	b004      	add	sp, #16
 800b9c8:	4770      	bx	lr
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f7fa fc1a 	bl	8006204 <EwScreenWarpRGB565RowFilterSolidBlend+0x4>
 800b9d0:	ab4a      	add	r3, sp, #296	; 0x128
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	a937      	add	r1, sp, #220	; 0xdc
 800b9d6:	a830      	add	r0, sp, #192	; 0xc0
 800b9d8:	f7f8 f970 	bl	8003cbc <EwScreenCopyAlpha8RowSolidBlend>
 800b9dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b9de:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b9e0:	4413      	add	r3, r2
 800b9e2:	9330      	str	r3, [sp, #192]	; 0xc0
 800b9e4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800b9e6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b9e8:	4413      	add	r3, r2
 800b9ea:	9333      	str	r3, [sp, #204]	; 0xcc
 800b9ec:	3e01      	subs	r6, #1
 800b9ee:	e7ae      	b.n	800b94e <EwEndUpdate+0x282>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	f8c8 301c 	str.w	r3, [r8, #28]
 800b9f6:	e7b2      	b.n	800b95e <EwEndUpdate+0x292>
 800b9f8:	200000f4 	.word	0x200000f4

0800b9fc <EwDoneViewport>:
 800b9fc:	b530      	push	{r4, r5, lr}
 800b9fe:	4604      	mov	r4, r0
 800ba00:	b087      	sub	sp, #28
 800ba02:	b1e0      	cbz	r0, 800ba3e <EwDoneViewport+0x42>
 800ba04:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ba08:	b173      	cbz	r3, 800ba28 <EwDoneViewport+0x2c>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	ad02      	add	r5, sp, #8
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4619      	mov	r1, r3
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4628      	mov	r0, r5
 800ba16:	f00e fa5b 	bl	8019ed0 <EwNewRect>
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff fe52 	bl	800b6cc <EwEndUpdate>
 800ba28:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800ba2c:	f01d fa98 	bl	8028f60 <GfxDoneViewport>
 800ba30:	4620      	mov	r0, r4
 800ba32:	f01d fe9f 	bl	8029774 <EwFree>
 800ba36:	4a03      	ldr	r2, [pc, #12]	; (800ba44 <EwDoneViewport+0x48>)
 800ba38:	6813      	ldr	r3, [r2, #0]
 800ba3a:	3bb8      	subs	r3, #184	; 0xb8
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	b007      	add	sp, #28
 800ba40:	bd30      	pop	{r4, r5, pc}
 800ba42:	bf00      	nop
 800ba44:	200002e8 	.word	0x200002e8

0800ba48 <EwConfigViewport>:
 800ba48:	b530      	push	{r4, r5, lr}
 800ba4a:	b089      	sub	sp, #36	; 0x24
 800ba4c:	ab02      	add	r3, sp, #8
 800ba4e:	e883 0006 	stmia.w	r3, {r1, r2}
 800ba52:	4604      	mov	r4, r0
 800ba54:	b188      	cbz	r0, 800ba7a <EwConfigViewport+0x32>
 800ba56:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ba5a:	b173      	cbz	r3, 800ba7a <EwConfigViewport+0x32>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	ad04      	add	r5, sp, #16
 800ba60:	461a      	mov	r2, r3
 800ba62:	4619      	mov	r1, r3
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	4628      	mov	r0, r5
 800ba68:	f00e fa32 	bl	8019ed0 <EwNewRect>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ba74:	4620      	mov	r0, r4
 800ba76:	f7ff fe29 	bl	800b6cc <EwEndUpdate>
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	b009      	add	sp, #36	; 0x24
 800ba7e:	bd30      	pop	{r4, r5, pc}

0800ba80 <EwTileBitmap>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	b093      	sub	sp, #76	; 0x4c
 800ba86:	469a      	mov	sl, r3
 800ba88:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ba90:	9307      	str	r3, [sp, #28]
 800ba92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba94:	930c      	str	r3, [sp, #48]	; 0x30
 800ba96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba98:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800baa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800baa8:	930e      	str	r3, [sp, #56]	; 0x38
 800baaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800baac:	9310      	str	r3, [sp, #64]	; 0x40
 800baae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bab0:	9305      	str	r3, [sp, #20]
 800bab2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bab4:	9306      	str	r3, [sp, #24]
 800bab6:	4688      	mov	r8, r1
 800bab8:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 800babc:	930b      	str	r3, [sp, #44]	; 0x2c
 800babe:	4611      	mov	r1, r2
 800bac0:	4691      	mov	r9, r2
 800bac2:	4607      	mov	r7, r0
 800bac4:	f7fb fc34 	bl	8007330 <UpdateWatermark1+0x6c>
 800bac8:	4651      	mov	r1, sl
 800baca:	4683      	mov	fp, r0
 800bacc:	4640      	mov	r0, r8
 800bace:	f7fb fc2f 	bl	8007330 <UpdateWatermark1+0x6c>
 800bad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bad4:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 800bad8:	f89d 10a9 	ldrb.w	r1, [sp, #169]	; 0xa9
 800badc:	4604      	mov	r4, r0
 800bade:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
 800bae2:	f7f4 fd36 	bl	8000552 <EwPackColor>
 800bae6:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800baea:	f89d 20ae 	ldrb.w	r2, [sp, #174]	; 0xae
 800baee:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
 800baf2:	4605      	mov	r5, r0
 800baf4:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 800baf8:	f7f4 fd2b 	bl	8000552 <EwPackColor>
 800bafc:	f89d 30b7 	ldrb.w	r3, [sp, #183]	; 0xb7
 800bb00:	f89d 20b6 	ldrb.w	r2, [sp, #182]	; 0xb6
 800bb04:	f89d 10b5 	ldrb.w	r1, [sp, #181]	; 0xb5
 800bb08:	9001      	str	r0, [sp, #4]
 800bb0a:	f89d 00b4 	ldrb.w	r0, [sp, #180]	; 0xb4
 800bb0e:	f7f4 fd20 	bl	8000552 <EwPackColor>
 800bb12:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
 800bb16:	f89d 20b2 	ldrb.w	r2, [sp, #178]	; 0xb2
 800bb1a:	f89d 10b1 	ldrb.w	r1, [sp, #177]	; 0xb1
 800bb1e:	4606      	mov	r6, r0
 800bb20:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
 800bb24:	f7f4 fd15 	bl	8000552 <EwPackColor>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f1bb 0f00 	cmp.w	fp, #0
 800bb2e:	d006      	beq.n	800bb3e <EwTileBitmap+0xbe>
 800bb30:	f8db 1000 	ldr.w	r1, [fp]
 800bb34:	8c0a      	ldrh	r2, [r1, #32]
 800bb36:	3201      	adds	r2, #1
 800bb38:	b292      	uxth	r2, r2
 800bb3a:	2a01      	cmp	r2, #1
 800bb3c:	d907      	bls.n	800bb4e <EwTileBitmap+0xce>
 800bb3e:	464a      	mov	r2, r9
 800bb40:	4639      	mov	r1, r7
 800bb42:	20a1      	movs	r0, #161	; 0xa1
 800bb44:	b013      	add	sp, #76	; 0x4c
 800bb46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4a:	f00d b8c3 	b.w	8018cd4 <EwErrorPD>
 800bb4e:	698a      	ldr	r2, [r1, #24]
 800bb50:	b90a      	cbnz	r2, 800bb56 <EwTileBitmap+0xd6>
 800bb52:	69ca      	ldr	r2, [r1, #28]
 800bb54:	b122      	cbz	r2, 800bb60 <EwTileBitmap+0xe0>
 800bb56:	464a      	mov	r2, r9
 800bb58:	4639      	mov	r1, r7
 800bb5a:	f240 1059 	movw	r0, #345	; 0x159
 800bb5e:	e7f1      	b.n	800bb44 <EwTileBitmap+0xc4>
 800bb60:	b124      	cbz	r4, 800bb6c <EwTileBitmap+0xec>
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 800bb68:	1c51      	adds	r1, r2, #1
 800bb6a:	d103      	bne.n	800bb74 <EwTileBitmap+0xf4>
 800bb6c:	4652      	mov	r2, sl
 800bb6e:	4641      	mov	r1, r8
 800bb70:	20a4      	movs	r0, #164	; 0xa4
 800bb72:	e7e7      	b.n	800bb44 <EwTileBitmap+0xc4>
 800bb74:	9900      	ldr	r1, [sp, #0]
 800bb76:	b159      	cbz	r1, 800bb90 <EwTileBitmap+0x110>
 800bb78:	2a03      	cmp	r2, #3
 800bb7a:	d109      	bne.n	800bb90 <EwTileBitmap+0x110>
 800bb7c:	9a01      	ldr	r2, [sp, #4]
 800bb7e:	402a      	ands	r2, r5
 800bb80:	4032      	ands	r2, r6
 800bb82:	401a      	ands	r2, r3
 800bb84:	0e12      	lsrs	r2, r2, #24
 800bb86:	2aff      	cmp	r2, #255	; 0xff
 800bb88:	460a      	mov	r2, r1
 800bb8a:	bf08      	it	eq
 800bb8c:	2200      	moveq	r2, #0
 800bb8e:	9200      	str	r2, [sp, #0]
 800bb90:	9311      	str	r3, [sp, #68]	; 0x44
 800bb92:	f007 fb79 	bl	8013288 <EwFlushTasks>
 800bb96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb98:	9907      	ldr	r1, [sp, #28]
 800bb9a:	428a      	cmp	r2, r1
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	bfb8      	it	lt
 800bba0:	460b      	movlt	r3, r1
 800bba2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bba6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	bfa8      	it	ge
 800bbb2:	461a      	movge	r2, r3
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	428a      	cmp	r2, r1
 800bbb8:	9a04      	ldr	r2, [sp, #16]
 800bbba:	bfa8      	it	ge
 800bbbc:	460b      	movge	r3, r1
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	9308      	str	r3, [sp, #32]
 800bbc2:	f340 8108 	ble.w	800bdd6 <EwTileBitmap+0x356>
 800bbc6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bbc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbca:	428a      	cmp	r2, r1
 800bbcc:	4613      	mov	r3, r2
 800bbce:	bfb8      	it	lt
 800bbd0:	460b      	movlt	r3, r1
 800bbd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bbd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbdc:	68b9      	ldr	r1, [r7, #8]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	bfa8      	it	ge
 800bbe2:	461a      	movge	r2, r3
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	428a      	cmp	r2, r1
 800bbe8:	9a03      	ldr	r2, [sp, #12]
 800bbea:	bfa8      	it	ge
 800bbec:	460b      	movge	r3, r1
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf2:	f340 80f0 	ble.w	800bdd6 <EwTileBitmap+0x356>
 800bbf6:	9b02      	ldr	r3, [sp, #8]
 800bbf8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bbfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc00:	9302      	str	r3, [sp, #8]
 800bc02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc04:	4293      	cmp	r3, r2
 800bc06:	bfa8      	it	ge
 800bc08:	4613      	movge	r3, r2
 800bc0a:	4699      	mov	r9, r3
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	454b      	cmp	r3, r9
 800bc10:	f280 80e1 	bge.w	800bdd6 <EwTileBitmap+0x356>
 800bc14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc16:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bc1a:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
 800bc1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc20:	4293      	cmp	r3, r2
 800bc22:	bfa8      	it	ge
 800bc24:	4613      	movge	r3, r2
 800bc26:	459a      	cmp	sl, r3
 800bc28:	4698      	mov	r8, r3
 800bc2a:	f280 80d4 	bge.w	800bdd6 <EwTileBitmap+0x356>
 800bc2e:	9a00      	ldr	r2, [sp, #0]
 800bc30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc32:	b132      	cbz	r2, 800bc42 <EwTileBitmap+0x1c2>
 800bc34:	9a01      	ldr	r2, [sp, #4]
 800bc36:	432a      	orrs	r2, r5
 800bc38:	4332      	orrs	r2, r6
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	0e12      	lsrs	r2, r2, #24
 800bc3e:	f000 80ca 	beq.w	800bdd6 <EwTileBitmap+0x356>
 800bc42:	930e      	str	r3, [sp, #56]	; 0x38
 800bc44:	9b02      	ldr	r3, [sp, #8]
 800bc46:	f8db 0000 	ldr.w	r0, [fp]
 800bc4a:	eba9 0203 	sub.w	r2, r9, r3
 800bc4e:	9b05      	ldr	r3, [sp, #20]
 800bc50:	fb93 f1f2 	sdiv	r1, r3, r2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	fb02 3111 	mls	r1, r2, r1, r3
 800bc5a:	bfa8      	it	ge
 800bc5c:	2200      	movge	r2, #0
 800bc5e:	188b      	adds	r3, r1, r2
 800bc60:	9305      	str	r3, [sp, #20]
 800bc62:	9b06      	ldr	r3, [sp, #24]
 800bc64:	eba8 020a 	sub.w	r2, r8, sl
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	fb93 f1f2 	sdiv	r1, r3, r2
 800bc6e:	fb02 3111 	mls	r1, r2, r1, r3
 800bc72:	bfa8      	it	ge
 800bc74:	2200      	movge	r2, #0
 800bc76:	188b      	adds	r3, r1, r2
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	9306      	str	r3, [sp, #24]
 800bc7c:	6891      	ldr	r1, [r2, #8]
 800bc7e:	3101      	adds	r1, #1
 800bc80:	6091      	str	r1, [r2, #8]
 800bc82:	68d1      	ldr	r1, [r2, #12]
 800bc84:	3101      	adds	r1, #1
 800bc86:	60d1      	str	r1, [r2, #12]
 800bc88:	f007 fa3a 	bl	8013100 <EwInitIssue>
 800bc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc8e:	4602      	mov	r2, r0
 800bc90:	b948      	cbnz	r0, 800bca6 <EwTileBitmap+0x226>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	6899      	ldr	r1, [r3, #8]
 800bc96:	3901      	subs	r1, #1
 800bc98:	6099      	str	r1, [r3, #8]
 800bc9a:	68d9      	ldr	r1, [r3, #12]
 800bc9c:	3901      	subs	r1, #1
 800bc9e:	60d9      	str	r1, [r3, #12]
 800bca0:	2080      	movs	r0, #128	; 0x80
 800bca2:	4639      	mov	r1, r7
 800bca4:	e74e      	b.n	800bb44 <EwTileBitmap+0xc4>
 800bca6:	2128      	movs	r1, #40	; 0x28
 800bca8:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
 800bcac:	f007 fac9 	bl	8013242 <EwAllocTaskData>
 800bcb0:	9b07      	ldr	r3, [sp, #28]
 800bcb2:	f8bb 1008 	ldrh.w	r1, [fp, #8]
 800bcb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bcb8:	4607      	mov	r7, r0
 800bcba:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 800bcbe:	4403      	add	r3, r0
 800bcc0:	803b      	strh	r3, [r7, #0]
 800bcc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcc4:	440b      	add	r3, r1
 800bcc6:	807b      	strh	r3, [r7, #2]
 800bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcca:	4418      	add	r0, r3
 800bccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcce:	80b8      	strh	r0, [r7, #4]
 800bcd0:	4419      	add	r1, r3
 800bcd2:	88a0      	ldrh	r0, [r4, #4]
 800bcd4:	9b02      	ldr	r3, [sp, #8]
 800bcd6:	80f9      	strh	r1, [r7, #6]
 800bcd8:	18c1      	adds	r1, r0, r3
 800bcda:	8139      	strh	r1, [r7, #8]
 800bcdc:	8921      	ldrh	r1, [r4, #8]
 800bcde:	9b05      	ldr	r3, [sp, #20]
 800bce0:	823b      	strh	r3, [r7, #16]
 800bce2:	eb01 0c0a 	add.w	ip, r1, sl
 800bce6:	9b06      	ldr	r3, [sp, #24]
 800bce8:	827b      	strh	r3, [r7, #18]
 800bcea:	4441      	add	r1, r8
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	81f9      	strh	r1, [r7, #14]
 800bcf0:	6821      	ldr	r1, [r4, #0]
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	4448      	add	r0, r9
 800bcf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcf8:	81b8      	strh	r0, [r7, #12]
 800bcfa:	e9c7 1505 	strd	r1, r5, [r7, #20]
 800bcfe:	623b      	str	r3, [r7, #32]
 800bd00:	f8a7 c00a 	strh.w	ip, [r7, #10]
 800bd04:	627e      	str	r6, [r7, #36]	; 0x24
 800bd06:	2100      	movs	r1, #0
 800bd08:	4610      	mov	r0, r2
 800bd0a:	9305      	str	r3, [sp, #20]
 800bd0c:	f007 fa60 	bl	80131d0 <EwAllocTask>
 800bd10:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	6107      	str	r7, [r0, #16]
 800bd18:	440b      	add	r3, r1
 800bd1a:	f8bb 7008 	ldrh.w	r7, [fp, #8]
 800bd1e:	8103      	strh	r3, [r0, #8]
 800bd20:	9b03      	ldr	r3, [sp, #12]
 800bd22:	443b      	add	r3, r7
 800bd24:	8143      	strh	r3, [r0, #10]
 800bd26:	9b08      	ldr	r3, [sp, #32]
 800bd28:	2203      	movs	r2, #3
 800bd2a:	4419      	add	r1, r3
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd2e:	8082      	strh	r2, [r0, #4]
 800bd30:	9a00      	ldr	r2, [sp, #0]
 800bd32:	8181      	strh	r1, [r0, #12]
 800bd34:	441f      	add	r7, r3
 800bd36:	81c7      	strh	r7, [r0, #14]
 800bd38:	9b05      	ldr	r3, [sp, #20]
 800bd3a:	b1b2      	cbz	r2, 800bd6a <EwTileBitmap+0x2ea>
 800bd3c:	9a01      	ldr	r2, [sp, #4]
 800bd3e:	402a      	ands	r2, r5
 800bd40:	4032      	ands	r2, r6
 800bd42:	401a      	ands	r2, r3
 800bd44:	0e12      	lsrs	r2, r2, #24
 800bd46:	2aff      	cmp	r2, #255	; 0xff
 800bd48:	d10f      	bne.n	800bd6a <EwTileBitmap+0x2ea>
 800bd4a:	68e2      	ldr	r2, [r4, #12]
 800bd4c:	9902      	ldr	r1, [sp, #8]
 800bd4e:	4291      	cmp	r1, r2
 800bd50:	db0b      	blt.n	800bd6a <EwTileBitmap+0x2ea>
 800bd52:	6922      	ldr	r2, [r4, #16]
 800bd54:	4592      	cmp	sl, r2
 800bd56:	db08      	blt.n	800bd6a <EwTileBitmap+0x2ea>
 800bd58:	6962      	ldr	r2, [r4, #20]
 800bd5a:	4591      	cmp	r9, r2
 800bd5c:	dc05      	bgt.n	800bd6a <EwTileBitmap+0x2ea>
 800bd5e:	9900      	ldr	r1, [sp, #0]
 800bd60:	69a2      	ldr	r2, [r4, #24]
 800bd62:	4590      	cmp	r8, r2
 800bd64:	bfd8      	it	le
 800bd66:	2100      	movle	r1, #0
 800bd68:	9100      	str	r1, [sp, #0]
 800bd6a:	9a00      	ldr	r2, [sp, #0]
 800bd6c:	3a00      	subs	r2, #0
 800bd6e:	bf18      	it	ne
 800bd70:	2201      	movne	r2, #1
 800bd72:	f442 7180 	orr.w	r1, r2, #256	; 0x100
 800bd76:	80c1      	strh	r1, [r0, #6]
 800bd78:	9901      	ldr	r1, [sp, #4]
 800bd7a:	428d      	cmp	r5, r1
 800bd7c:	6821      	ldr	r1, [r4, #0]
 800bd7e:	d01f      	beq.n	800bdc0 <EwTileBitmap+0x340>
 800bd80:	429e      	cmp	r6, r3
 800bd82:	d021      	beq.n	800bdc8 <EwTileBitmap+0x348>
 800bd84:	42b5      	cmp	r5, r6
 800bd86:	d11f      	bne.n	800bdc8 <EwTileBitmap+0x348>
 800bd88:	9c01      	ldr	r4, [sp, #4]
 800bd8a:	429c      	cmp	r4, r3
 800bd8c:	d11c      	bne.n	800bdc8 <EwTileBitmap+0x348>
 800bd8e:	f442 7283 	orr.w	r2, r2, #262	; 0x106
 800bd92:	80c2      	strh	r2, [r0, #6]
 800bd94:	688b      	ldr	r3, [r1, #8]
 800bd96:	f8db 0000 	ldr.w	r0, [fp]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	608b      	str	r3, [r1, #8]
 800bd9e:	b013      	add	sp, #76	; 0x4c
 800bda0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	f007 babc 	b.w	8013320 <EwDoneIssue>
 800bda8:	429e      	cmp	r6, r3
 800bdaa:	e7ef      	b.n	800bd8c <EwTileBitmap+0x30c>
 800bdac:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d002      	beq.n	800bdba <EwTileBitmap+0x33a>
 800bdb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdb6:	2bff      	cmp	r3, #255	; 0xff
 800bdb8:	d0ec      	beq.n	800bd94 <EwTileBitmap+0x314>
 800bdba:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800bdbe:	e7e8      	b.n	800bd92 <EwTileBitmap+0x312>
 800bdc0:	42b5      	cmp	r5, r6
 800bdc2:	d104      	bne.n	800bdce <EwTileBitmap+0x34e>
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	d0f1      	beq.n	800bdac <EwTileBitmap+0x32c>
 800bdc8:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800bdcc:	e7e1      	b.n	800bd92 <EwTileBitmap+0x312>
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	d1ea      	bne.n	800bda8 <EwTileBitmap+0x328>
 800bdd2:	42ae      	cmp	r6, r5
 800bdd4:	e7f7      	b.n	800bdc6 <EwTileBitmap+0x346>
 800bdd6:	b013      	add	sp, #76	; 0x4c
 800bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bddc <EwWarpBitmap>:
 800bddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	ed2d 8b10 	vpush	{d8-d15}
 800bde4:	b08f      	sub	sp, #60	; 0x3c
 800bde6:	4689      	mov	r9, r1
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 800bdee:	f89d 70d0 	ldrb.w	r7, [sp, #208]	; 0xd0
 800bdf2:	461e      	mov	r6, r3
 800bdf4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bdfe:	930c      	str	r3, [sp, #48]	; 0x30
 800be00:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800be02:	9306      	str	r3, [sp, #24]
 800be04:	4611      	mov	r1, r2
 800be06:	f89d 30c3 	ldrb.w	r3, [sp, #195]	; 0xc3
 800be0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be0c:	eef0 aa40 	vmov.f32	s21, s0
 800be10:	eeb0 aa60 	vmov.f32	s20, s1
 800be14:	eef0 9a61 	vmov.f32	s19, s3
 800be18:	eef0 da42 	vmov.f32	s27, s4
 800be1c:	eeb0 da43 	vmov.f32	s26, s6
 800be20:	eef0 ca63 	vmov.f32	s25, s7
 800be24:	eeb0 ca64 	vmov.f32	s24, s9
 800be28:	eeb0 9a45 	vmov.f32	s18, s10
 800be2c:	eef0 8a41 	vmov.f32	s17, s2
 800be30:	eef0 ba62 	vmov.f32	s23, s5
 800be34:	eeb0 8a44 	vmov.f32	s16, s8
 800be38:	eeb0 ba65 	vmov.f32	s22, s11
 800be3c:	4692      	mov	sl, r2
 800be3e:	4680      	mov	r8, r0
 800be40:	f7fb fa76 	bl	8007330 <UpdateWatermark1+0x6c>
 800be44:	9903      	ldr	r1, [sp, #12]
 800be46:	4683      	mov	fp, r0
 800be48:	4648      	mov	r0, r9
 800be4a:	f7fb fa71 	bl	8007330 <UpdateWatermark1+0x6c>
 800be4e:	eef4 aae9 	vcmpe.f32	s21, s19
 800be52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be56:	eeb4 dacc 	vcmpe.f32	s26, s24
 800be5a:	bfd4      	ite	le
 800be5c:	eef0 fa6a 	vmovle.f32	s31, s21
 800be60:	eef0 fa69 	vmovgt.f32	s31, s19
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	bfd4      	ite	le
 800be6a:	eef0 7a4d 	vmovle.f32	s15, s26
 800be6e:	eef0 7a4c 	vmovgt.f32	s15, s24
 800be72:	eef4 fae7 	vcmpe.f32	s31, s15
 800be76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7a:	eeb4 aaed 	vcmpe.f32	s20, s27
 800be7e:	bf58      	it	pl
 800be80:	eef0 fa67 	vmovpl.f32	s31, s15
 800be84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be88:	eef4 cac9 	vcmpe.f32	s25, s18
 800be8c:	bfd4      	ite	le
 800be8e:	eef0 ea4a 	vmovle.f32	s29, s20
 800be92:	eef0 ea6d 	vmovgt.f32	s29, s27
 800be96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9a:	bfd4      	ite	le
 800be9c:	eef0 7a6c 	vmovle.f32	s15, s25
 800bea0:	eef0 7a49 	vmovgt.f32	s15, s18
 800bea4:	eef4 7aee 	vcmpe.f32	s15, s29
 800bea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beac:	eef4 aae9 	vcmpe.f32	s21, s19
 800beb0:	bfd8      	it	le
 800beb2:	eef0 ea67 	vmovle.f32	s29, s15
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	eeb4 dacc 	vcmpe.f32	s26, s24
 800bebe:	bf54      	ite	pl
 800bec0:	eeb0 fa6a 	vmovpl.f32	s30, s21
 800bec4:	eeb0 fa69 	vmovmi.f32	s30, s19
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	bf54      	ite	pl
 800bece:	eef0 7a4d 	vmovpl.f32	s15, s26
 800bed2:	eef0 7a4c 	vmovmi.f32	s15, s24
 800bed6:	eef4 7acf 	vcmpe.f32	s15, s30
 800beda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bede:	eeb4 aaed 	vcmpe.f32	s20, s27
 800bee2:	bf58      	it	pl
 800bee4:	eeb0 fa67 	vmovpl.f32	s30, s15
 800bee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beec:	eef4 cac9 	vcmpe.f32	s25, s18
 800bef0:	bf54      	ite	pl
 800bef2:	eeb0 ea4a 	vmovpl.f32	s28, s20
 800bef6:	eeb0 ea6d 	vmovmi.f32	s28, s27
 800befa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befe:	bf54      	ite	pl
 800bf00:	eef0 7a6c 	vmovpl.f32	s15, s25
 800bf04:	eef0 7a49 	vmovmi.f32	s15, s18
 800bf08:	eef4 7ace 	vcmpe.f32	s15, s28
 800bf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf12:	f89d 20c2 	ldrb.w	r2, [sp, #194]	; 0xc2
 800bf16:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
 800bf20:	bf58      	it	pl
 800bf22:	eeb0 ea67 	vmovpl.f32	s28, s15
 800bf26:	f7f4 fb14 	bl	8000552 <EwPackColor>
 800bf2a:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
 800bf2e:	f89d 20c6 	ldrb.w	r2, [sp, #198]	; 0xc6
 800bf32:	f89d 10c5 	ldrb.w	r1, [sp, #197]	; 0xc5
 800bf36:	9001      	str	r0, [sp, #4]
 800bf38:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800bf3c:	f7f4 fb09 	bl	8000552 <EwPackColor>
 800bf40:	f89d 30cb 	ldrb.w	r3, [sp, #203]	; 0xcb
 800bf44:	f89d 20ca 	ldrb.w	r2, [sp, #202]	; 0xca
 800bf48:	f89d 10c9 	ldrb.w	r1, [sp, #201]	; 0xc9
 800bf4c:	9002      	str	r0, [sp, #8]
 800bf4e:	f89d 00c8 	ldrb.w	r0, [sp, #200]	; 0xc8
 800bf52:	f7f4 fafe 	bl	8000552 <EwPackColor>
 800bf56:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
 800bf5a:	f89d 20ce 	ldrb.w	r2, [sp, #206]	; 0xce
 800bf5e:	f89d 10cd 	ldrb.w	r1, [sp, #205]	; 0xcd
 800bf62:	4605      	mov	r5, r0
 800bf64:	f89d 00cc 	ldrb.w	r0, [sp, #204]	; 0xcc
 800bf68:	f7f4 faf3 	bl	8000552 <EwPackColor>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	f1bb 0f00 	cmp.w	fp, #0
 800bf72:	d006      	beq.n	800bf82 <EwWarpBitmap+0x1a6>
 800bf74:	f8db 1000 	ldr.w	r1, [fp]
 800bf78:	8c0a      	ldrh	r2, [r1, #32]
 800bf7a:	3201      	adds	r2, #1
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	2a01      	cmp	r2, #1
 800bf80:	d909      	bls.n	800bf96 <EwWarpBitmap+0x1ba>
 800bf82:	4652      	mov	r2, sl
 800bf84:	4641      	mov	r1, r8
 800bf86:	20a2      	movs	r0, #162	; 0xa2
 800bf88:	b00f      	add	sp, #60	; 0x3c
 800bf8a:	ecbd 8b10 	vpop	{d8-d15}
 800bf8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf92:	f00c be9f 	b.w	8018cd4 <EwErrorPD>
 800bf96:	698a      	ldr	r2, [r1, #24]
 800bf98:	b90a      	cbnz	r2, 800bf9e <EwWarpBitmap+0x1c2>
 800bf9a:	69ca      	ldr	r2, [r1, #28]
 800bf9c:	b122      	cbz	r2, 800bfa8 <EwWarpBitmap+0x1cc>
 800bf9e:	4652      	mov	r2, sl
 800bfa0:	4641      	mov	r1, r8
 800bfa2:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800bfa6:	e7ef      	b.n	800bf88 <EwWarpBitmap+0x1ac>
 800bfa8:	b124      	cbz	r4, 800bfb4 <EwWarpBitmap+0x1d8>
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 800bfb0:	1c51      	adds	r1, r2, #1
 800bfb2:	d103      	bne.n	800bfbc <EwWarpBitmap+0x1e0>
 800bfb4:	9a03      	ldr	r2, [sp, #12]
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	20a5      	movs	r0, #165	; 0xa5
 800bfba:	e7e5      	b.n	800bf88 <EwWarpBitmap+0x1ac>
 800bfbc:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 800bfc0:	ee6f faa7 	vmul.f32	s31, s31, s15
 800bfc4:	ee2f fa27 	vmul.f32	s30, s30, s15
 800bfc8:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800c29c <EwWarpBitmap+0x4c0>
 800bfcc:	ee3f 6a6f 	vsub.f32	s12, s30, s31
 800bfd0:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	dc16      	bgt.n	800c008 <EwWarpBitmap+0x22c>
 800bfda:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 800c2a0 <EwWarpBitmap+0x4c4>
 800bfde:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	d40f      	bmi.n	800c008 <EwWarpBitmap+0x22c>
 800bfe8:	ee6e eaa7 	vmul.f32	s29, s29, s15
 800bfec:	ee2e ea27 	vmul.f32	s28, s28, s15
 800bff0:	ee7e 7a6e 	vsub.f32	s15, s28, s29
 800bff4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffc:	dc04      	bgt.n	800c008 <EwWarpBitmap+0x22c>
 800bffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c006:	d507      	bpl.n	800c018 <EwWarpBitmap+0x23c>
 800c008:	20bd      	movs	r0, #189	; 0xbd
 800c00a:	b00f      	add	sp, #60	; 0x3c
 800c00c:	ecbd 8b10 	vpop	{d8-d15}
 800c010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	f00c be48 	b.w	8018ca8 <EwError>
 800c018:	b157      	cbz	r7, 800c030 <EwWarpBitmap+0x254>
 800c01a:	2a03      	cmp	r2, #3
 800c01c:	d108      	bne.n	800c030 <EwWarpBitmap+0x254>
 800c01e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800c022:	400a      	ands	r2, r1
 800c024:	402a      	ands	r2, r5
 800c026:	401a      	ands	r2, r3
 800c028:	0e12      	lsrs	r2, r2, #24
 800c02a:	2aff      	cmp	r2, #255	; 0xff
 800c02c:	bf08      	it	eq
 800c02e:	2700      	moveq	r7, #0
 800c030:	930d      	str	r3, [sp, #52]	; 0x34
 800c032:	f007 f929 	bl	8013288 <EwFlushTasks>
 800c036:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800c03a:	ee7f 7a87 	vadd.f32	s15, s31, s14
 800c03e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800c040:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c048:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c04c:	ee17 2a90 	vmov	r2, s15
 800c050:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 800c054:	ee7f 6a27 	vadd.f32	s13, s30, s15
 800c058:	1112      	asrs	r2, r2, #4
 800c05a:	428a      	cmp	r2, r1
 800c05c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c060:	4613      	mov	r3, r2
 800c062:	bfb8      	it	lt
 800c064:	460b      	movlt	r3, r1
 800c066:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c068:	930a      	str	r3, [sp, #40]	; 0x28
 800c06a:	ee16 2a90 	vmov	r2, s13
 800c06e:	4281      	cmp	r1, r0
 800c070:	ea4f 1222 	mov.w	r2, r2, asr #4
 800c074:	bfa8      	it	ge
 800c076:	4601      	movge	r1, r0
 800c078:	4613      	mov	r3, r2
 800c07a:	428a      	cmp	r2, r1
 800c07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c07e:	bfa8      	it	ge
 800c080:	460b      	movge	r3, r1
 800c082:	4293      	cmp	r3, r2
 800c084:	9308      	str	r3, [sp, #32]
 800c086:	f340 822e 	ble.w	800c4e6 <EwWarpBitmap+0x70a>
 800c08a:	ee3e 7a87 	vadd.f32	s14, s29, s14
 800c08e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c090:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c094:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c098:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800c09c:	ee17 3a10 	vmov	r3, s14
 800c0a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c0a4:	111a      	asrs	r2, r3, #4
 800c0a6:	428a      	cmp	r2, r1
 800c0a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	bfb8      	it	lt
 800c0b0:	460b      	movlt	r3, r1
 800c0b2:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0b6:	ee17 3a90 	vmov	r3, s15
 800c0ba:	4281      	cmp	r1, r0
 800c0bc:	ea4f 1223 	mov.w	r2, r3, asr #4
 800c0c0:	bfa8      	it	ge
 800c0c2:	4601      	movge	r1, r0
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	428a      	cmp	r2, r1
 800c0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ca:	bfa8      	it	ge
 800c0cc:	460b      	movge	r3, r1
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	9307      	str	r3, [sp, #28]
 800c0d2:	f340 8208 	ble.w	800c4e6 <EwWarpBitmap+0x70a>
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c0dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	bfa8      	it	ge
 800c0e8:	4613      	movge	r3, r2
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	9a05      	ldr	r2, [sp, #20]
 800c0ee:	9b03      	ldr	r3, [sp, #12]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	f280 81f8 	bge.w	800c4e6 <EwWarpBitmap+0x70a>
 800c0f6:	9b04      	ldr	r3, [sp, #16]
 800c0f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c0fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	9b06      	ldr	r3, [sp, #24]
 800c104:	4293      	cmp	r3, r2
 800c106:	bfa8      	it	ge
 800c108:	4613      	movge	r3, r2
 800c10a:	9306      	str	r3, [sp, #24]
 800c10c:	9a06      	ldr	r2, [sp, #24]
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	4293      	cmp	r3, r2
 800c112:	f280 81e8 	bge.w	800c4e6 <EwWarpBitmap+0x70a>
 800c116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c118:	b13f      	cbz	r7, 800c12a <EwWarpBitmap+0x34e>
 800c11a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800c11e:	430a      	orrs	r2, r1
 800c120:	432a      	orrs	r2, r5
 800c122:	431a      	orrs	r2, r3
 800c124:	0e12      	lsrs	r2, r2, #24
 800c126:	f000 81de 	beq.w	800c4e6 <EwWarpBitmap+0x70a>
 800c12a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c132:	d81b      	bhi.n	800c16c <EwWarpBitmap+0x390>
 800c134:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	d811      	bhi.n	800c162 <EwWarpBitmap+0x386>
 800c13e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c146:	d80c      	bhi.n	800c162 <EwWarpBitmap+0x386>
 800c148:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	bf9f      	itttt	ls
 800c152:	eef1 8a68 	vnegls.f32	s17, s17
 800c156:	eef1 ba6b 	vnegls.f32	s23, s23
 800c15a:	eeb1 8a48 	vnegls.f32	s16, s16
 800c15e:	eeb1 ba4b 	vnegls.f32	s22, s22
 800c162:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16a:	d40e      	bmi.n	800c18a <EwWarpBitmap+0x3ae>
 800c16c:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	d409      	bmi.n	800c18a <EwWarpBitmap+0x3ae>
 800c176:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17e:	d404      	bmi.n	800c18a <EwWarpBitmap+0x3ae>
 800c180:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c188:	d501      	bpl.n	800c18e <EwWarpBitmap+0x3b2>
 800c18a:	20a6      	movs	r0, #166	; 0xa6
 800c18c:	e73d      	b.n	800c00a <EwWarpBitmap+0x22e>
 800c18e:	eef4 8a6b 	vcmp.f32	s17, s23
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	d153      	bne.n	800c240 <EwWarpBitmap+0x464>
 800c198:	eeb4 8a4b 	vcmp.f32	s16, s22
 800c19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a0:	d14e      	bne.n	800c240 <EwWarpBitmap+0x464>
 800c1a2:	eef4 8a48 	vcmp.f32	s17, s16
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	d149      	bne.n	800c240 <EwWarpBitmap+0x464>
 800c1ac:	eef4 aa4c 	vcmp.f32	s21, s24
 800c1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b4:	f040 80a2 	bne.w	800c2fc <EwWarpBitmap+0x520>
 800c1b8:	eef4 9a4d 	vcmp.f32	s19, s26
 800c1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c0:	f040 809c 	bne.w	800c2fc <EwWarpBitmap+0x520>
 800c1c4:	eeb4 aa6d 	vcmp.f32	s20, s27
 800c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1cc:	f040 8096 	bne.w	800c2fc <EwWarpBitmap+0x520>
 800c1d0:	eef4 ca49 	vcmp.f32	s25, s18
 800c1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d8:	f040 8090 	bne.w	800c2fc <EwWarpBitmap+0x520>
 800c1dc:	eef4 aae9 	vcmpe.f32	s21, s19
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	f140 808a 	bpl.w	800c2fc <EwWarpBitmap+0x520>
 800c1e8:	eeb4 aac9 	vcmpe.f32	s20, s18
 800c1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f0:	f140 8084 	bpl.w	800c2fc <EwWarpBitmap+0x520>
 800c1f4:	eefd 7aef 	vcvt.s32.f32	s15, s31
 800c1f8:	eefd eaee 	vcvt.s32.f32	s29, s29
 800c1fc:	ee17 1a90 	vmov	r1, s15
 800c200:	eefd 7acf 	vcvt.s32.f32	s15, s30
 800c204:	ee1e 0a90 	vmov	r0, s29
 800c208:	ee17 2a90 	vmov	r2, s15
 800c20c:	eebd eace 	vcvt.s32.f32	s28, s28
 800c210:	4308      	orrs	r0, r1
 800c212:	ea40 0102 	orr.w	r1, r0, r2
 800c216:	ee1e 2a10 	vmov	r2, s28
 800c21a:	430a      	orrs	r2, r1
 800c21c:	f012 0f0f 	tst.w	r2, #15
 800c220:	bf0c      	ite	eq
 800c222:	f04f 0901 	moveq.w	r9, #1
 800c226:	f04f 0900 	movne.w	r9, #0
 800c22a:	f04f 0a01 	mov.w	sl, #1
 800c22e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c232:	eef0 8a48 	vmov.f32	s17, s16
 800c236:	eeb0 ea48 	vmov.f32	s28, s16
 800c23a:	eef0 ea48 	vmov.f32	s29, s16
 800c23e:	e03c      	b.n	800c2ba <EwWarpBitmap+0x4de>
 800c240:	eef4 8aeb 	vcmpe.f32	s17, s23
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	bfd4      	ite	le
 800c24a:	eef0 7a68 	vmovle.f32	s15, s17
 800c24e:	eef0 7a6b 	vmovgt.f32	s15, s23
 800c252:	eeb4 8a67 	vcmp.f32	s16, s15
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	bf48      	it	mi
 800c25c:	eef0 7a48 	vmovmi.f32	s15, s16
 800c260:	eeb4 ba67 	vcmp.f32	s22, s15
 800c264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c268:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c26c:	bf48      	it	mi
 800c26e:	eef0 7a4b 	vmovmi.f32	s15, s22
 800c272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c276:	d00e      	beq.n	800c296 <EwWarpBitmap+0x4ba>
 800c278:	eef5 ba40 	vcmp.f32	s23, #0.0
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	d009      	beq.n	800c296 <EwWarpBitmap+0x4ba>
 800c282:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28a:	d004      	beq.n	800c296 <EwWarpBitmap+0x4ba>
 800c28c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800c290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c294:	d106      	bne.n	800c2a4 <EwWarpBitmap+0x4c8>
 800c296:	f44f 7088 	mov.w	r0, #272	; 0x110
 800c29a:	e6b6      	b.n	800c00a <EwWarpBitmap+0x22e>
 800c29c:	47800000 	.word	0x47800000
 800c2a0:	c7800000 	.word	0xc7800000
 800c2a4:	eec7 eaa8 	vdiv.f32	s29, s15, s17
 800c2a8:	f04f 0a00 	mov.w	sl, #0
 800c2ac:	46d1      	mov	r9, sl
 800c2ae:	eec7 8a88 	vdiv.f32	s17, s15, s16
 800c2b2:	ee87 eaab 	vdiv.f32	s28, s15, s23
 800c2b6:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	f8db 0000 	ldr.w	r0, [fp]
 800c2c0:	6891      	ldr	r1, [r2, #8]
 800c2c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2c4:	3101      	adds	r1, #1
 800c2c6:	eddb 7a01 	vldr	s15, [fp, #4]
 800c2ca:	eef8 bae7 	vcvt.f32.s32	s23, s15
 800c2ce:	eddb 7a02 	vldr	s15, [fp, #8]
 800c2d2:	6091      	str	r1, [r2, #8]
 800c2d4:	68d1      	ldr	r1, [r2, #12]
 800c2d6:	3101      	adds	r1, #1
 800c2d8:	60d1      	str	r1, [r2, #12]
 800c2da:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 800c2de:	f006 ff0f 	bl	8013100 <EwInitIssue>
 800c2e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	b970      	cbnz	r0, 800c306 <EwWarpBitmap+0x52a>
 800c2e8:	6823      	ldr	r3, [r4, #0]
 800c2ea:	6899      	ldr	r1, [r3, #8]
 800c2ec:	3901      	subs	r1, #1
 800c2ee:	6099      	str	r1, [r3, #8]
 800c2f0:	68d9      	ldr	r1, [r3, #12]
 800c2f2:	3901      	subs	r1, #1
 800c2f4:	60d9      	str	r1, [r3, #12]
 800c2f6:	2081      	movs	r0, #129	; 0x81
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	e645      	b.n	800bf88 <EwWarpBitmap+0x1ac>
 800c2fc:	f04f 0a01 	mov.w	sl, #1
 800c300:	f04f 0900 	mov.w	r9, #0
 800c304:	e793      	b.n	800c22e <EwWarpBitmap+0x452>
 800c306:	214c      	movs	r1, #76	; 0x4c
 800c308:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
 800c30c:	f006 ff99 	bl	8013242 <EwAllocTaskData>
 800c310:	ee7a aaab 	vadd.f32	s21, s21, s23
 800c314:	ee3a aa0b 	vadd.f32	s20, s20, s22
 800c318:	ee79 9aab 	vadd.f32	s19, s19, s23
 800c31c:	ee7d da8b 	vadd.f32	s27, s27, s22
 800c320:	ee3d da2b 	vadd.f32	s26, s26, s23
 800c324:	ee7c ca8b 	vadd.f32	s25, s25, s22
 800c328:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800c32c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 800c330:	4680      	mov	r8, r0
 800c332:	edc0 aa00 	vstr	s21, [r0]
 800c336:	ed80 aa01 	vstr	s20, [r0, #4]
 800c33a:	edc0 ea02 	vstr	s29, [r0, #8]
 800c33e:	edc0 9a03 	vstr	s19, [r0, #12]
 800c342:	edc0 da04 	vstr	s27, [r0, #16]
 800c346:	ed80 ea05 	vstr	s28, [r0, #20]
 800c34a:	ed80 da06 	vstr	s26, [r0, #24]
 800c34e:	edc0 ca07 	vstr	s25, [r0, #28]
 800c352:	edc0 8a08 	vstr	s17, [r0, #32]
 800c356:	ed80 ca09 	vstr	s24, [r0, #36]	; 0x24
 800c35a:	ed80 9a0a 	vstr	s18, [r0, #40]	; 0x28
 800c35e:	ed80 8a0b 	vstr	s16, [r0, #44]	; 0x2c
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	88a0      	ldrh	r0, [r4, #4]
 800c366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c368:	18c1      	adds	r1, r0, r3
 800c36a:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	8921      	ldrh	r1, [r4, #8]
 800c372:	eb01 0c03 	add.w	ip, r1, r3
 800c376:	9b05      	ldr	r3, [sp, #20]
 800c378:	f8a8 c032 	strh.w	ip, [r8, #50]	; 0x32
 800c37c:	4418      	add	r0, r3
 800c37e:	9b06      	ldr	r3, [sp, #24]
 800c380:	f8a8 0034 	strh.w	r0, [r8, #52]	; 0x34
 800c384:	4419      	add	r1, r3
 800c386:	9b01      	ldr	r3, [sp, #4]
 800c388:	f8a8 1036 	strh.w	r1, [r8, #54]	; 0x36
 800c38c:	6821      	ldr	r1, [r4, #0]
 800c38e:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 800c392:	9b02      	ldr	r3, [sp, #8]
 800c394:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
 800c398:	e9c8 3510 	strd	r3, r5, [r8, #64]	; 0x40
 800c39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c39e:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	f006 ff13 	bl	80131d0 <EwAllocTask>
 800c3aa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b0:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800c3b4:	f8c0 8010 	str.w	r8, [r0, #16]
 800c3b8:	440b      	add	r3, r1
 800c3ba:	8103      	strh	r3, [r0, #8]
 800c3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3be:	4413      	add	r3, r2
 800c3c0:	8143      	strh	r3, [r0, #10]
 800c3c2:	9b08      	ldr	r3, [sp, #32]
 800c3c4:	4419      	add	r1, r3
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	8181      	strh	r1, [r0, #12]
 800c3ca:	441a      	add	r2, r3
 800c3cc:	81c2      	strh	r2, [r0, #14]
 800c3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	d13b      	bne.n	800c44c <EwWarpBitmap+0x670>
 800c3d4:	b1c7      	cbz	r7, 800c408 <EwWarpBitmap+0x62c>
 800c3d6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800c3da:	400a      	ands	r2, r1
 800c3dc:	402a      	ands	r2, r5
 800c3de:	401a      	ands	r2, r3
 800c3e0:	0e12      	lsrs	r2, r2, #24
 800c3e2:	2aff      	cmp	r2, #255	; 0xff
 800c3e4:	d112      	bne.n	800c40c <EwWarpBitmap+0x630>
 800c3e6:	68e2      	ldr	r2, [r4, #12]
 800c3e8:	9903      	ldr	r1, [sp, #12]
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	db0e      	blt.n	800c40c <EwWarpBitmap+0x630>
 800c3ee:	6922      	ldr	r2, [r4, #16]
 800c3f0:	9904      	ldr	r1, [sp, #16]
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	db0a      	blt.n	800c40c <EwWarpBitmap+0x630>
 800c3f6:	6962      	ldr	r2, [r4, #20]
 800c3f8:	9905      	ldr	r1, [sp, #20]
 800c3fa:	4291      	cmp	r1, r2
 800c3fc:	dc06      	bgt.n	800c40c <EwWarpBitmap+0x630>
 800c3fe:	69a2      	ldr	r2, [r4, #24]
 800c400:	9906      	ldr	r1, [sp, #24]
 800c402:	4291      	cmp	r1, r2
 800c404:	dc02      	bgt.n	800c40c <EwWarpBitmap+0x630>
 800c406:	4637      	mov	r7, r6
 800c408:	463a      	mov	r2, r7
 800c40a:	e045      	b.n	800c498 <EwWarpBitmap+0x6bc>
 800c40c:	4632      	mov	r2, r6
 800c40e:	e043      	b.n	800c498 <EwWarpBitmap+0x6bc>
 800c410:	42a6      	cmp	r6, r4
 800c412:	d104      	bne.n	800c41e <EwWarpBitmap+0x642>
 800c414:	429d      	cmp	r5, r3
 800c416:	d102      	bne.n	800c41e <EwWarpBitmap+0x642>
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	42ab      	cmp	r3, r5
 800c41c:	d00a      	beq.n	800c434 <EwWarpBitmap+0x658>
 800c41e:	f042 0204 	orr.w	r2, r2, #4
 800c422:	80c2      	strh	r2, [r0, #6]
 800c424:	f1b9 0f00 	cmp.w	r9, #0
 800c428:	d14f      	bne.n	800c4ca <EwWarpBitmap+0x6ee>
 800c42a:	f1ba 0f00 	cmp.w	sl, #0
 800c42e:	d00b      	beq.n	800c448 <EwWarpBitmap+0x66c>
 800c430:	2305      	movs	r3, #5
 800c432:	e04b      	b.n	800c4cc <EwWarpBitmap+0x6f0>
 800c434:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d002      	beq.n	800c442 <EwWarpBitmap+0x666>
 800c43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c43e:	2bff      	cmp	r3, #255	; 0xff
 800c440:	d0f0      	beq.n	800c424 <EwWarpBitmap+0x648>
 800c442:	f042 0202 	orr.w	r2, r2, #2
 800c446:	e7ec      	b.n	800c422 <EwWarpBitmap+0x646>
 800c448:	2304      	movs	r3, #4
 800c44a:	e03f      	b.n	800c4cc <EwWarpBitmap+0x6f0>
 800c44c:	b94f      	cbnz	r7, 800c462 <EwWarpBitmap+0x686>
 800c44e:	2208      	movs	r2, #8
 800c450:	e022      	b.n	800c498 <EwWarpBitmap+0x6bc>
 800c452:	9c01      	ldr	r4, [sp, #4]
 800c454:	429c      	cmp	r4, r3
 800c456:	d0dd      	beq.n	800c414 <EwWarpBitmap+0x638>
 800c458:	9c01      	ldr	r4, [sp, #4]
 800c45a:	42ac      	cmp	r4, r5
 800c45c:	d0da      	beq.n	800c414 <EwWarpBitmap+0x638>
 800c45e:	429d      	cmp	r5, r3
 800c460:	e02f      	b.n	800c4c2 <EwWarpBitmap+0x6e6>
 800c462:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800c466:	400a      	ands	r2, r1
 800c468:	402a      	ands	r2, r5
 800c46a:	401a      	ands	r2, r3
 800c46c:	0e12      	lsrs	r2, r2, #24
 800c46e:	2aff      	cmp	r2, #255	; 0xff
 800c470:	d1ed      	bne.n	800c44e <EwWarpBitmap+0x672>
 800c472:	68e2      	ldr	r2, [r4, #12]
 800c474:	9903      	ldr	r1, [sp, #12]
 800c476:	4291      	cmp	r1, r2
 800c478:	dde9      	ble.n	800c44e <EwWarpBitmap+0x672>
 800c47a:	6922      	ldr	r2, [r4, #16]
 800c47c:	9904      	ldr	r1, [sp, #16]
 800c47e:	4291      	cmp	r1, r2
 800c480:	dde5      	ble.n	800c44e <EwWarpBitmap+0x672>
 800c482:	6962      	ldr	r2, [r4, #20]
 800c484:	9905      	ldr	r1, [sp, #20]
 800c486:	4291      	cmp	r1, r2
 800c488:	dae1      	bge.n	800c44e <EwWarpBitmap+0x672>
 800c48a:	69a2      	ldr	r2, [r4, #24]
 800c48c:	9906      	ldr	r1, [sp, #24]
 800c48e:	4616      	mov	r6, r2
 800c490:	42b1      	cmp	r1, r6
 800c492:	bfb8      	it	lt
 800c494:	2700      	movlt	r7, #0
 800c496:	2208      	movs	r2, #8
 800c498:	2f00      	cmp	r7, #0
 800c49a:	bf18      	it	ne
 800c49c:	f042 0201 	orrne.w	r2, r2, #1
 800c4a0:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 800c4a4:	6821      	ldr	r1, [r4, #0]
 800c4a6:	80c2      	strh	r2, [r0, #6]
 800c4a8:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
 800c4ac:	f1b9 0f00 	cmp.w	r9, #0
 800c4b0:	d0ae      	beq.n	800c410 <EwWarpBitmap+0x634>
 800c4b2:	42a6      	cmp	r6, r4
 800c4b4:	d0cd      	beq.n	800c452 <EwWarpBitmap+0x676>
 800c4b6:	429d      	cmp	r5, r3
 800c4b8:	d0b1      	beq.n	800c41e <EwWarpBitmap+0x642>
 800c4ba:	429e      	cmp	r6, r3
 800c4bc:	d1af      	bne.n	800c41e <EwWarpBitmap+0x642>
 800c4be:	9b02      	ldr	r3, [sp, #8]
 800c4c0:	42ab      	cmp	r3, r5
 800c4c2:	d1ac      	bne.n	800c41e <EwWarpBitmap+0x642>
 800c4c4:	f042 0206 	orr.w	r2, r2, #6
 800c4c8:	80c2      	strh	r2, [r0, #6]
 800c4ca:	2306      	movs	r3, #6
 800c4cc:	8083      	strh	r3, [r0, #4]
 800c4ce:	688b      	ldr	r3, [r1, #8]
 800c4d0:	f8db 0000 	ldr.w	r0, [fp]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	608b      	str	r3, [r1, #8]
 800c4d8:	b00f      	add	sp, #60	; 0x3c
 800c4da:	ecbd 8b10 	vpop	{d8-d15}
 800c4de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e2:	f006 bf1d 	b.w	8013320 <EwDoneIssue>
 800c4e6:	b00f      	add	sp, #60	; 0x3c
 800c4e8:	ecbd 8b10 	vpop	{d8-d15}
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4f0 <EwDrawLine>:
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	ad10      	add	r5, sp, #64	; 0x40
 800c4fa:	e885 000c 	stmia.w	r5, {r2, r3}
 800c4fe:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	460c      	mov	r4, r1
 800c506:	e9dd 7614 	ldrd	r7, r6, [sp, #80]	; 0x50
 800c50a:	e9dd 9816 	ldrd	r9, r8, [sp, #88]	; 0x58
 800c50e:	4682      	mov	sl, r0
 800c510:	f7fa ff0e 	bl	8007330 <UpdateWatermark1+0x6c>
 800c514:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 800c518:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 800c51c:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 800c520:	4605      	mov	r5, r0
 800c522:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800c526:	f7f4 f814 	bl	8000552 <EwPackColor>
 800c52a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800c52e:	9001      	str	r0, [sp, #4]
 800c530:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 800c534:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800c538:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800c53c:	f7f4 f809 	bl	8000552 <EwPackColor>
 800c540:	9002      	str	r0, [sp, #8]
 800c542:	b12d      	cbz	r5, 800c550 <EwDrawLine+0x60>
 800c544:	6828      	ldr	r0, [r5, #0]
 800c546:	8c03      	ldrh	r3, [r0, #32]
 800c548:	3301      	adds	r3, #1
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d908      	bls.n	800c562 <EwDrawLine+0x72>
 800c550:	4622      	mov	r2, r4
 800c552:	4651      	mov	r1, sl
 800c554:	209f      	movs	r0, #159	; 0x9f
 800c556:	b007      	add	sp, #28
 800c558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	b002      	add	sp, #8
 800c55e:	f00c bbb9 	b.w	8018cd4 <EwErrorPD>
 800c562:	6983      	ldr	r3, [r0, #24]
 800c564:	b90b      	cbnz	r3, 800c56a <EwDrawLine+0x7a>
 800c566:	69c3      	ldr	r3, [r0, #28]
 800c568:	b123      	cbz	r3, 800c574 <EwDrawLine+0x84>
 800c56a:	4622      	mov	r2, r4
 800c56c:	4651      	mov	r1, sl
 800c56e:	f240 105b 	movw	r0, #347	; 0x15b
 800c572:	e7f0      	b.n	800c556 <EwDrawLine+0x66>
 800c574:	eba9 0207 	sub.w	r2, r9, r7
 800c578:	eba8 0306 	sub.w	r3, r8, r6
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	bfb8      	it	lt
 800c580:	4252      	neglt	r2, r2
 800c582:	2b00      	cmp	r3, #0
 800c584:	bfb8      	it	lt
 800c586:	425b      	neglt	r3, r3
 800c588:	429a      	cmp	r2, r3
 800c58a:	dd56      	ble.n	800c63a <EwDrawLine+0x14a>
 800c58c:	454f      	cmp	r7, r9
 800c58e:	bfb4      	ite	lt
 800c590:	f109 32ff 	addlt.w	r2, r9, #4294967295
 800c594:	464a      	movge	r2, r9
 800c596:	42ba      	cmp	r2, r7
 800c598:	da00      	bge.n	800c59c <EwDrawLine+0xac>
 800c59a:	3201      	adds	r2, #1
 800c59c:	4643      	mov	r3, r8
 800c59e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c5a0:	f8da 4004 	ldr.w	r4, [sl, #4]
 800c5a4:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 800c5a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5aa:	428c      	cmp	r4, r1
 800c5ac:	bfa8      	it	ge
 800c5ae:	460c      	movge	r4, r1
 800c5b0:	9400      	str	r4, [sp, #0]
 800c5b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5b4:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c5b8:	428c      	cmp	r4, r1
 800c5ba:	bfa8      	it	ge
 800c5bc:	460c      	movge	r4, r1
 800c5be:	42ba      	cmp	r2, r7
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	bfa8      	it	ge
 800c5c4:	4639      	movge	r1, r7
 800c5c6:	4561      	cmp	r1, ip
 800c5c8:	bfb8      	it	lt
 800c5ca:	4661      	movlt	r1, ip
 800c5cc:	9104      	str	r1, [sp, #16]
 800c5ce:	42ba      	cmp	r2, r7
 800c5d0:	9900      	ldr	r1, [sp, #0]
 800c5d2:	bfb8      	it	lt
 800c5d4:	463a      	movlt	r2, r7
 800c5d6:	428a      	cmp	r2, r1
 800c5d8:	bfbc      	itt	lt
 800c5da:	3201      	addlt	r2, #1
 800c5dc:	9200      	strlt	r2, [sp, #0]
 800c5de:	42b3      	cmp	r3, r6
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	bfb8      	it	lt
 800c5e4:	4632      	movlt	r2, r6
 800c5e6:	42a2      	cmp	r2, r4
 800c5e8:	9904      	ldr	r1, [sp, #16]
 800c5ea:	46a3      	mov	fp, r4
 800c5ec:	bfb8      	it	lt
 800c5ee:	f102 0b01 	addlt.w	fp, r2, #1
 800c5f2:	9a00      	ldr	r2, [sp, #0]
 800c5f4:	428a      	cmp	r2, r1
 800c5f6:	dd67      	ble.n	800c6c8 <EwDrawLine+0x1d8>
 800c5f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800c5fa:	42b3      	cmp	r3, r6
 800c5fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c600:	bfa8      	it	ge
 800c602:	4633      	movge	r3, r6
 800c604:	429c      	cmp	r4, r3
 800c606:	bfb8      	it	lt
 800c608:	461c      	movlt	r4, r3
 800c60a:	45a3      	cmp	fp, r4
 800c60c:	dd5c      	ble.n	800c6c8 <EwDrawLine+0x1d8>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	b163      	cbz	r3, 800c62c <EwDrawLine+0x13c>
 800c612:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800c616:	4313      	orrs	r3, r2
 800c618:	0e1b      	lsrs	r3, r3, #24
 800c61a:	d055      	beq.n	800c6c8 <EwDrawLine+0x1d8>
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	4013      	ands	r3, r2
 800c620:	0e1b      	lsrs	r3, r3, #24
 800c622:	2bff      	cmp	r3, #255	; 0xff
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	bf08      	it	eq
 800c628:	2300      	moveq	r3, #0
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	f006 fd68 	bl	8013100 <EwInitIssue>
 800c630:	4602      	mov	r2, r0
 800c632:	b960      	cbnz	r0, 800c64e <EwDrawLine+0x15e>
 800c634:	4651      	mov	r1, sl
 800c636:	2082      	movs	r0, #130	; 0x82
 800c638:	e78d      	b.n	800c556 <EwDrawLine+0x66>
 800c63a:	4546      	cmp	r6, r8
 800c63c:	bfb4      	ite	lt
 800c63e:	f108 33ff 	addlt.w	r3, r8, #4294967295
 800c642:	4643      	movge	r3, r8
 800c644:	42b3      	cmp	r3, r6
 800c646:	da00      	bge.n	800c64a <EwDrawLine+0x15a>
 800c648:	3301      	adds	r3, #1
 800c64a:	464a      	mov	r2, r9
 800c64c:	e7a7      	b.n	800c59e <EwDrawLine+0xae>
 800c64e:	2110      	movs	r1, #16
 800c650:	9005      	str	r0, [sp, #20]
 800c652:	f006 fdf6 	bl	8013242 <EwAllocTaskData>
 800c656:	892b      	ldrh	r3, [r5, #8]
 800c658:	88a9      	ldrh	r1, [r5, #4]
 800c65a:	9a05      	ldr	r2, [sp, #20]
 800c65c:	441e      	add	r6, r3
 800c65e:	4443      	add	r3, r8
 800c660:	80c3      	strh	r3, [r0, #6]
 800c662:	9b01      	ldr	r3, [sp, #4]
 800c664:	6083      	str	r3, [r0, #8]
 800c666:	440f      	add	r7, r1
 800c668:	9b02      	ldr	r3, [sp, #8]
 800c66a:	8007      	strh	r7, [r0, #0]
 800c66c:	4449      	add	r1, r9
 800c66e:	4682      	mov	sl, r0
 800c670:	8046      	strh	r6, [r0, #2]
 800c672:	8081      	strh	r1, [r0, #4]
 800c674:	60c3      	str	r3, [r0, #12]
 800c676:	2100      	movs	r1, #0
 800c678:	4610      	mov	r0, r2
 800c67a:	f006 fda9 	bl	80131d0 <EwAllocTask>
 800c67e:	2307      	movs	r3, #7
 800c680:	88ae      	ldrh	r6, [r5, #4]
 800c682:	8083      	strh	r3, [r0, #4]
 800c684:	9b04      	ldr	r3, [sp, #16]
 800c686:	892a      	ldrh	r2, [r5, #8]
 800c688:	f8c0 a010 	str.w	sl, [r0, #16]
 800c68c:	4433      	add	r3, r6
 800c68e:	8103      	strh	r3, [r0, #8]
 800c690:	9b00      	ldr	r3, [sp, #0]
 800c692:	eb02 010b 	add.w	r1, r2, fp
 800c696:	4433      	add	r3, r6
 800c698:	4414      	add	r4, r2
 800c69a:	8183      	strh	r3, [r0, #12]
 800c69c:	81c1      	strh	r1, [r0, #14]
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	8144      	strh	r4, [r0, #10]
 800c6a2:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 800c6a6:	3b00      	subs	r3, #0
 800c6a8:	bf18      	it	ne
 800c6aa:	2301      	movne	r3, #1
 800c6ac:	428a      	cmp	r2, r1
 800c6ae:	bf14      	ite	ne
 800c6b0:	f043 0304 	orrne.w	r3, r3, #4
 800c6b4:	f043 0302 	orreq.w	r3, r3, #2
 800c6b8:	80c3      	strh	r3, [r0, #6]
 800c6ba:	6828      	ldr	r0, [r5, #0]
 800c6bc:	b007      	add	sp, #28
 800c6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c2:	b002      	add	sp, #8
 800c6c4:	f006 be2c 	b.w	8013320 <EwDoneIssue>
 800c6c8:	b007      	add	sp, #28
 800c6ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ce:	b002      	add	sp, #8
 800c6d0:	4770      	bx	lr

0800c6d2 <EwGetTextExtent>:
 800c6d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	4604      	mov	r4, r0
 800c6da:	460d      	mov	r5, r1
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	b113      	cbz	r3, 800c6e6 <EwGetTextExtent+0x14>
 800c6e0:	b10a      	cbz	r2, 800c6e6 <EwGetTextExtent+0x14>
 800c6e2:	8813      	ldrh	r3, [r2, #0]
 800c6e4:	b943      	cbnz	r3, 800c6f8 <EwGetTextExtent+0x26>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e9c4 3300 	strd	r3, r3, [r4]
 800c6ec:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	b007      	add	sp, #28
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	2900      	cmp	r1, #0
 800c6fa:	d035      	beq.n	800c768 <EwGetTextExtent+0x96>
 800c6fc:	2600      	movs	r6, #0
 800c6fe:	e9cd 6603 	strd	r6, r6, [sp, #12]
 800c702:	1e93      	subs	r3, r2, #2
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	4637      	mov	r7, r6
 800c708:	9600      	str	r6, [sp, #0]
 800c70a:	46b0      	mov	r8, r6
 800c70c:	f242 0a26 	movw	sl, #8230	; 0x2026
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	f833 bf02 	ldrh.w	fp, [r3, #2]!
 800c716:	9302      	str	r3, [sp, #8]
 800c718:	f1bb 0f00 	cmp.w	fp, #0
 800c71c:	d01d      	beq.n	800c75a <EwGetTextExtent+0x88>
 800c71e:	45d3      	cmp	fp, sl
 800c720:	d12b      	bne.n	800c77a <EwGetTextExtent+0xa8>
 800c722:	4651      	mov	r1, sl
 800c724:	4628      	mov	r0, r5
 800c726:	f7fb f85b 	bl	80077e0 <UpdateWatermark1+0x51c>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	bf15      	itete	ne
 800c72e:	f04f 0901 	movne.w	r9, #1
 800c732:	f04f 0903 	moveq.w	r9, #3
 800c736:	46d3      	movne	fp, sl
 800c738:	f04f 0b2e 	moveq.w	fp, #46	; 0x2e
 800c73c:	4659      	mov	r1, fp
 800c73e:	4628      	mov	r0, r5
 800c740:	f7fa fc36 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800c744:	4603      	mov	r3, r0
 800c746:	2800      	cmp	r0, #0
 800c748:	d143      	bne.n	800c7d2 <EwGetTextExtent+0x100>
 800c74a:	f006 fd9d 	bl	8013288 <EwFlushTasks>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d1f4      	bne.n	800c73c <EwGetTextExtent+0x6a>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	3b01      	subs	r3, #1
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	d1da      	bne.n	800c710 <EwGetTextExtent+0x3e>
 800c75a:	9b04      	ldr	r3, [sp, #16]
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	60e6      	str	r6, [r4, #12]
 800c762:	e9c4 3701 	strd	r3, r7, [r4, #4]
 800c766:	e7c3      	b.n	800c6f0 <EwGetTextExtent+0x1e>
 800c768:	460a      	mov	r2, r1
 800c76a:	20a9      	movs	r0, #169	; 0xa9
 800c76c:	f00c fab2 	bl	8018cd4 <EwErrorPD>
 800c770:	e9c4 5500 	strd	r5, r5, [r4]
 800c774:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800c778:	e7ba      	b.n	800c6f0 <EwGetTextExtent+0x1e>
 800c77a:	f04f 0901 	mov.w	r9, #1
 800c77e:	e7dd      	b.n	800c73c <EwGetTextExtent+0x6a>
 800c780:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 800c784:	bb49      	cbnz	r1, 800c7da <EwGetTextExtent+0x108>
 800c786:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800c78a:	bb31      	cbnz	r1, 800c7da <EwGetTextExtent+0x108>
 800c78c:	f006 fca6 	bl	80130dc <EwFreeGlyph>
 800c790:	e7df      	b.n	800c752 <EwGetTextExtent+0x80>
 800c792:	9903      	ldr	r1, [sp, #12]
 800c794:	6968      	ldr	r0, [r5, #20]
 800c796:	9305      	str	r3, [sp, #20]
 800c798:	465a      	mov	r2, fp
 800c79a:	f00b fa27 	bl	8017bec <EwFntGetKerning>
 800c79e:	9b05      	ldr	r3, [sp, #20]
 800c7a0:	f9b3 c020 	ldrsh.w	ip, [r3, #32]
 800c7a4:	f9b3 e01c 	ldrsh.w	lr, [r3, #28]
 800c7a8:	4440      	add	r0, r8
 800c7aa:	eb0c 0100 	add.w	r1, ip, r0
 800c7ae:	4471      	add	r1, lr
 800c7b0:	428f      	cmp	r7, r1
 800c7b2:	bfb8      	it	lt
 800c7b4:	460f      	movlt	r7, r1
 800c7b6:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 800c7ba:	eb1c 0f0e 	cmn.w	ip, lr
 800c7be:	eb01 0800 	add.w	r8, r1, r0
 800c7c2:	d103      	bne.n	800c7cc <EwGetTextExtent+0xfa>
 800c7c4:	b111      	cbz	r1, 800c7cc <EwGetTextExtent+0xfa>
 800c7c6:	4547      	cmp	r7, r8
 800c7c8:	bfb8      	it	lt
 800c7ca:	4647      	movlt	r7, r8
 800c7cc:	f8cd b00c 	str.w	fp, [sp, #12]
 800c7d0:	e016      	b.n	800c800 <EwGetTextExtent+0x12e>
 800c7d2:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	d0d2      	beq.n	800c780 <EwGetTextExtent+0xae>
 800c7da:	f1b8 0f00 	cmp.w	r8, #0
 800c7de:	d102      	bne.n	800c7e6 <EwGetTextExtent+0x114>
 800c7e0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800c7e4:	9204      	str	r2, [sp, #16]
 800c7e6:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 800c7ea:	9a00      	ldr	r2, [sp, #0]
 800c7ec:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 800c7f0:	4282      	cmp	r2, r0
 800c7f2:	4401      	add	r1, r0
 800c7f4:	bfa8      	it	ge
 800c7f6:	4602      	movge	r2, r0
 800c7f8:	428e      	cmp	r6, r1
 800c7fa:	9200      	str	r2, [sp, #0]
 800c7fc:	bfb8      	it	lt
 800c7fe:	460e      	movlt	r6, r1
 800c800:	f1b9 0901 	subs.w	r9, r9, #1
 800c804:	d2c5      	bcs.n	800c792 <EwGetTextExtent+0xc0>
 800c806:	4618      	mov	r0, r3
 800c808:	e7c0      	b.n	800c78c <EwGetTextExtent+0xba>

0800c80a <EwGetTextAdvance>:
 800c80a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80e:	4606      	mov	r6, r0
 800c810:	4614      	mov	r4, r2
 800c812:	2a00      	cmp	r2, #0
 800c814:	d033      	beq.n	800c87e <EwGetTextAdvance+0x74>
 800c816:	2900      	cmp	r1, #0
 800c818:	d047      	beq.n	800c8aa <EwGetTextAdvance+0xa0>
 800c81a:	880b      	ldrh	r3, [r1, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d046      	beq.n	800c8ae <EwGetTextAdvance+0xa4>
 800c820:	b338      	cbz	r0, 800c872 <EwGetTextAdvance+0x68>
 800c822:	1e8b      	subs	r3, r1, #2
 800c824:	2400      	movs	r4, #0
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	4691      	mov	r9, r2
 800c82a:	46a3      	mov	fp, r4
 800c82c:	f242 0a26 	movw	sl, #8230	; 0x2026
 800c830:	9b01      	ldr	r3, [sp, #4]
 800c832:	f833 5f02 	ldrh.w	r5, [r3, #2]!
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	b30d      	cbz	r5, 800c87e <EwGetTextAdvance+0x74>
 800c83a:	4555      	cmp	r5, sl
 800c83c:	d123      	bne.n	800c886 <EwGetTextAdvance+0x7c>
 800c83e:	4651      	mov	r1, sl
 800c840:	4630      	mov	r0, r6
 800c842:	f7fa ffcd 	bl	80077e0 <UpdateWatermark1+0x51c>
 800c846:	2800      	cmp	r0, #0
 800c848:	bf15      	itete	ne
 800c84a:	f04f 0801 	movne.w	r8, #1
 800c84e:	f04f 0803 	moveq.w	r8, #3
 800c852:	4655      	movne	r5, sl
 800c854:	252e      	moveq	r5, #46	; 0x2e
 800c856:	4629      	mov	r1, r5
 800c858:	4630      	mov	r0, r6
 800c85a:	f7fa fba9 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800c85e:	4607      	mov	r7, r0
 800c860:	bb38      	cbnz	r0, 800c8b2 <EwGetTextAdvance+0xa8>
 800c862:	f006 fd11 	bl	8013288 <EwFlushTasks>
 800c866:	2800      	cmp	r0, #0
 800c868:	d1f5      	bne.n	800c856 <EwGetTextAdvance+0x4c>
 800c86a:	f1b9 0901 	subs.w	r9, r9, #1
 800c86e:	d1df      	bne.n	800c830 <EwGetTextAdvance+0x26>
 800c870:	e005      	b.n	800c87e <EwGetTextAdvance+0x74>
 800c872:	4602      	mov	r2, r0
 800c874:	4601      	mov	r1, r0
 800c876:	20aa      	movs	r0, #170	; 0xaa
 800c878:	f00c fa2c 	bl	8018cd4 <EwErrorPD>
 800c87c:	4634      	mov	r4, r6
 800c87e:	4620      	mov	r0, r4
 800c880:	b003      	add	sp, #12
 800c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c886:	f04f 0801 	mov.w	r8, #1
 800c88a:	e7e4      	b.n	800c856 <EwGetTextAdvance+0x4c>
 800c88c:	4659      	mov	r1, fp
 800c88e:	6970      	ldr	r0, [r6, #20]
 800c890:	462a      	mov	r2, r5
 800c892:	f00b f9ab 	bl	8017bec <EwFntGetKerning>
 800c896:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c89a:	4418      	add	r0, r3
 800c89c:	4404      	add	r4, r0
 800c89e:	46ab      	mov	fp, r5
 800c8a0:	f1b8 0801 	subs.w	r8, r8, #1
 800c8a4:	d2f2      	bcs.n	800c88c <EwGetTextAdvance+0x82>
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	e00f      	b.n	800c8ca <EwGetTextAdvance+0xc0>
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	e7e7      	b.n	800c87e <EwGetTextAdvance+0x74>
 800c8ae:	461c      	mov	r4, r3
 800c8b0:	e7e5      	b.n	800c87e <EwGetTextAdvance+0x74>
 800c8b2:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f2      	bne.n	800c8a0 <EwGetTextAdvance+0x96>
 800c8ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1ee      	bne.n	800c8a0 <EwGetTextAdvance+0x96>
 800c8c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1ea      	bne.n	800c8a0 <EwGetTextAdvance+0x96>
 800c8ca:	f006 fc07 	bl	80130dc <EwFreeGlyph>
 800c8ce:	e7cc      	b.n	800c86a <EwGetTextAdvance+0x60>

0800c8d0 <EwDrawText>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	ed2d 8b02 	vpush	{d8}
 800c8d8:	b09d      	sub	sp, #116	; 0x74
 800c8da:	461c      	mov	r4, r3
 800c8dc:	e9dd 6333 	ldrd	r6, r3, [sp, #204]	; 0xcc
 800c8e0:	9303      	str	r3, [sp, #12]
 800c8e2:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 800c8e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c8e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c8ea:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c8ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c8f0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c8f2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800c8f4:	9310      	str	r3, [sp, #64]	; 0x40
 800c8f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c8f8:	9311      	str	r3, [sp, #68]	; 0x44
 800c8fa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c8fc:	9307      	str	r3, [sp, #28]
 800c8fe:	468b      	mov	fp, r1
 800c900:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c902:	9315      	str	r3, [sp, #84]	; 0x54
 800c904:	4639      	mov	r1, r7
 800c906:	4615      	mov	r5, r2
 800c908:	9016      	str	r0, [sp, #88]	; 0x58
 800c90a:	f7fa fd11 	bl	8007330 <UpdateWatermark1+0x6c>
 800c90e:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 800c912:	f89d 20d6 	ldrb.w	r2, [sp, #214]	; 0xd6
 800c916:	f89d 10d5 	ldrb.w	r1, [sp, #213]	; 0xd5
 800c91a:	9008      	str	r0, [sp, #32]
 800c91c:	f89d 00d4 	ldrb.w	r0, [sp, #212]	; 0xd4
 800c920:	f7f3 fe17 	bl	8000552 <EwPackColor>
 800c924:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 800c928:	f89d 20da 	ldrb.w	r2, [sp, #218]	; 0xda
 800c92c:	f89d 10d9 	ldrb.w	r1, [sp, #217]	; 0xd9
 800c930:	9009      	str	r0, [sp, #36]	; 0x24
 800c932:	f89d 00d8 	ldrb.w	r0, [sp, #216]	; 0xd8
 800c936:	f7f3 fe0c 	bl	8000552 <EwPackColor>
 800c93a:	f89d 30e3 	ldrb.w	r3, [sp, #227]	; 0xe3
 800c93e:	f89d 20e2 	ldrb.w	r2, [sp, #226]	; 0xe2
 800c942:	f89d 10e1 	ldrb.w	r1, [sp, #225]	; 0xe1
 800c946:	9018      	str	r0, [sp, #96]	; 0x60
 800c948:	f89d 00e0 	ldrb.w	r0, [sp, #224]	; 0xe0
 800c94c:	f7f3 fe01 	bl	8000552 <EwPackColor>
 800c950:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
 800c954:	900a      	str	r0, [sp, #40]	; 0x28
 800c956:	f89d 20de 	ldrb.w	r2, [sp, #222]	; 0xde
 800c95a:	f89d 10dd 	ldrb.w	r1, [sp, #221]	; 0xdd
 800c95e:	f89d 00dc 	ldrb.w	r0, [sp, #220]	; 0xdc
 800c962:	f7f3 fdf6 	bl	8000552 <EwPackColor>
 800c966:	900b      	str	r0, [sp, #44]	; 0x2c
 800c968:	2c00      	cmp	r4, #0
 800c96a:	f000 8151 	beq.w	800cc10 <EwDrawText+0x340>
 800c96e:	2d00      	cmp	r5, #0
 800c970:	f000 814e 	beq.w	800cc10 <EwDrawText+0x340>
 800c974:	882b      	ldrh	r3, [r5, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 814a 	beq.w	800cc10 <EwDrawText+0x340>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	b12b      	cbz	r3, 800c98c <EwDrawText+0xbc>
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	8c13      	ldrh	r3, [r2, #32]
 800c984:	3301      	adds	r3, #1
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d909      	bls.n	800c9a0 <EwDrawText+0xd0>
 800c98c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c98e:	463a      	mov	r2, r7
 800c990:	20a7      	movs	r0, #167	; 0xa7
 800c992:	b01d      	add	sp, #116	; 0x74
 800c994:	ecbd 8b02 	vpop	{d8}
 800c998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	f00c b99a 	b.w	8018cd4 <EwErrorPD>
 800c9a0:	6993      	ldr	r3, [r2, #24]
 800c9a2:	b90b      	cbnz	r3, 800c9a8 <EwDrawText+0xd8>
 800c9a4:	69d3      	ldr	r3, [r2, #28]
 800c9a6:	b123      	cbz	r3, 800c9b2 <EwDrawText+0xe2>
 800c9a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800c9b0:	e7ef      	b.n	800c992 <EwDrawText+0xc2>
 800c9b2:	f1bb 0f00 	cmp.w	fp, #0
 800c9b6:	d103      	bne.n	800c9c0 <EwDrawText+0xf0>
 800c9b8:	465a      	mov	r2, fp
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	20a8      	movs	r0, #168	; 0xa8
 800c9be:	e7e8      	b.n	800c992 <EwDrawText+0xc2>
 800c9c0:	9b03      	ldr	r3, [sp, #12]
 800c9c2:	2b5a      	cmp	r3, #90	; 0x5a
 800c9c4:	d006      	beq.n	800c9d4 <EwDrawText+0x104>
 800c9c6:	2bb4      	cmp	r3, #180	; 0xb4
 800c9c8:	d004      	beq.n	800c9d4 <EwDrawText+0x104>
 800c9ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c9ce:	bf18      	it	ne
 800c9d0:	2300      	movne	r3, #0
 800c9d2:	9303      	str	r3, [sp, #12]
 800c9d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c9d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9d8:	9903      	ldr	r1, [sp, #12]
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	bfb8      	it	lt
 800c9de:	4613      	movlt	r3, r2
 800c9e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	bfb8      	it	lt
 800c9ee:	4613      	movlt	r3, r2
 800c9f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c9f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	bfa8      	it	ge
 800c9fe:	4613      	movge	r3, r2
 800ca00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ca02:	6852      	ldr	r2, [r2, #4]
 800ca04:	4293      	cmp	r3, r2
 800ca06:	bfa8      	it	ge
 800ca08:	4613      	movge	r3, r2
 800ca0a:	9305      	str	r3, [sp, #20]
 800ca0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ca0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800ca10:	4293      	cmp	r3, r2
 800ca12:	bfa8      	it	ge
 800ca14:	4613      	movge	r3, r2
 800ca16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ca18:	6892      	ldr	r2, [r2, #8]
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	bfa8      	it	ge
 800ca1e:	4613      	movge	r3, r2
 800ca20:	295a      	cmp	r1, #90	; 0x5a
 800ca22:	9306      	str	r3, [sp, #24]
 800ca24:	e9db 2300 	ldrd	r2, r3, [fp]
 800ca28:	f040 808b 	bne.w	800cb42 <EwDrawText+0x272>
 800ca2c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ca2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ca30:	9f07      	ldr	r7, [sp, #28]
 800ca32:	1a09      	subs	r1, r1, r0
 800ca34:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ca36:	4438      	add	r0, r7
 800ca38:	9f02      	ldr	r7, [sp, #8]
 800ca3a:	1a8a      	subs	r2, r1, r2
 800ca3c:	4297      	cmp	r7, r2
 800ca3e:	bfb8      	it	lt
 800ca40:	4617      	movlt	r7, r2
 800ca42:	9a05      	ldr	r2, [sp, #20]
 800ca44:	9702      	str	r7, [sp, #8]
 800ca46:	440b      	add	r3, r1
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	bfbc      	itt	lt
 800ca4c:	3301      	addlt	r3, #1
 800ca4e:	9305      	strlt	r3, [sp, #20]
 800ca50:	9b06      	ldr	r3, [sp, #24]
 800ca52:	3801      	subs	r0, #1
 800ca54:	1ac3      	subs	r3, r0, r3
 800ca56:	f103 0901 	add.w	r9, r3, #1
 800ca5a:	9b01      	ldr	r3, [sp, #4]
 800ca5c:	1ac0      	subs	r0, r0, r3
 800ca5e:	1c43      	adds	r3, r0, #1
 800ca60:	9a05      	ldr	r2, [sp, #20]
 800ca62:	9314      	str	r3, [sp, #80]	; 0x50
 800ca64:	9b02      	ldr	r3, [sp, #8]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	f280 80d2 	bge.w	800cc10 <EwDrawText+0x340>
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	9a06      	ldr	r2, [sp, #24]
 800ca70:	4293      	cmp	r3, r2
 800ca72:	f280 80cd 	bge.w	800cc10 <EwDrawText+0x340>
 800ca76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca78:	b14b      	cbz	r3, 800ca8e <EwDrawText+0x1be>
 800ca7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca82:	4313      	orrs	r3, r2
 800ca84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca86:	4313      	orrs	r3, r2
 800ca88:	0e1b      	lsrs	r3, r3, #24
 800ca8a:	f000 80c1 	beq.w	800cc10 <EwDrawText+0x340>
 800ca8e:	2e00      	cmp	r6, #0
 800ca90:	f340 80c3 	ble.w	800cc1a <EwDrawText+0x34a>
 800ca94:	4622      	mov	r2, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	4658      	mov	r0, fp
 800ca9a:	f7ff feb6 	bl	800c80a <EwGetTextAdvance>
 800ca9e:	1a30      	subs	r0, r6, r0
 800caa0:	2800      	cmp	r0, #0
 800caa2:	f340 80ba 	ble.w	800cc1a <EwDrawText+0x34a>
 800caa6:	1ea9      	subs	r1, r5, #2
 800caa8:	4622      	mov	r2, r4
 800caaa:	2600      	movs	r6, #0
 800caac:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800cab0:	b133      	cbz	r3, 800cac0 <EwDrawText+0x1f0>
 800cab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cab6:	2b20      	cmp	r3, #32
 800cab8:	bf08      	it	eq
 800caba:	3601      	addeq	r6, #1
 800cabc:	3a01      	subs	r2, #1
 800cabe:	d1f5      	bne.n	800caac <EwDrawText+0x1dc>
 800cac0:	2e00      	cmp	r6, #0
 800cac2:	f000 80aa 	beq.w	800cc1a <EwDrawText+0x34a>
 800cac6:	0400      	lsls	r0, r0, #16
 800cac8:	fb90 f3f6 	sdiv	r3, r0, r6
 800cacc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cace:	2600      	movs	r6, #0
 800cad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cad4:	9519      	str	r5, [sp, #100]	; 0x64
 800cad6:	f104 38ff 	add.w	r8, r4, #4294967295
 800cada:	9617      	str	r6, [sp, #92]	; 0x5c
 800cadc:	9313      	str	r3, [sp, #76]	; 0x4c
 800cade:	f242 0a26 	movw	sl, #8230	; 0x2026
 800cae2:	f108 0301 	add.w	r3, r8, #1
 800cae6:	930c      	str	r3, [sp, #48]	; 0x30
 800cae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800caea:	9312      	str	r3, [sp, #72]	; 0x48
 800caec:	f833 5b02 	ldrh.w	r5, [r3], #2
 800caf0:	9319      	str	r3, [sp, #100]	; 0x64
 800caf2:	2d00      	cmp	r5, #0
 800caf4:	f000 808c 	beq.w	800cc10 <EwDrawText+0x340>
 800caf8:	4555      	cmp	r5, sl
 800cafa:	d174      	bne.n	800cbe6 <EwDrawText+0x316>
 800cafc:	4651      	mov	r1, sl
 800cafe:	4658      	mov	r0, fp
 800cb00:	f7fa fe6e 	bl	80077e0 <UpdateWatermark1+0x51c>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	bf0c      	ite	eq
 800cb08:	2303      	moveq	r3, #3
 800cb0a:	2301      	movne	r3, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	bf14      	ite	ne
 800cb10:	4655      	movne	r5, sl
 800cb12:	252e      	moveq	r5, #46	; 0x2e
 800cb14:	4629      	mov	r1, r5
 800cb16:	4658      	mov	r0, fp
 800cb18:	f7fa fa4a 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f040 824f 	bne.w	800cfc2 <EwDrawText+0x6f2>
 800cb24:	f006 fbb0 	bl	8013288 <EwFlushTasks>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d1f3      	bne.n	800cb14 <EwDrawText+0x244>
 800cb2c:	f8db 1018 	ldr.w	r1, [fp, #24]
 800cb30:	462a      	mov	r2, r5
 800cb32:	20b5      	movs	r0, #181	; 0xb5
 800cb34:	b01d      	add	sp, #116	; 0x74
 800cb36:	ecbd 8b02 	vpop	{d8}
 800cb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3e:	f00c b8c1 	b.w	8018cc4 <EwErrorSD>
 800cb42:	9903      	ldr	r1, [sp, #12]
 800cb44:	29b4      	cmp	r1, #180	; 0xb4
 800cb46:	d119      	bne.n	800cb7c <EwDrawText+0x2ac>
 800cb48:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb4a:	9807      	ldr	r0, [sp, #28]
 800cb4c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800cb4e:	1808      	adds	r0, r1, r0
 800cb50:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb52:	4439      	add	r1, r7
 800cb54:	3901      	subs	r1, #1
 800cb56:	9f01      	ldr	r7, [sp, #4]
 800cb58:	1acb      	subs	r3, r1, r3
 800cb5a:	429f      	cmp	r7, r3
 800cb5c:	bfb8      	it	lt
 800cb5e:	461f      	movlt	r7, r3
 800cb60:	9b06      	ldr	r3, [sp, #24]
 800cb62:	9701      	str	r7, [sp, #4]
 800cb64:	440a      	add	r2, r1
 800cb66:	429a      	cmp	r2, r3
 800cb68:	bfbc      	itt	lt
 800cb6a:	1c53      	addlt	r3, r2, #1
 800cb6c:	9306      	strlt	r3, [sp, #24]
 800cb6e:	9b05      	ldr	r3, [sp, #20]
 800cb70:	3801      	subs	r0, #1
 800cb72:	1ac3      	subs	r3, r0, r3
 800cb74:	f103 0901 	add.w	r9, r3, #1
 800cb78:	9b02      	ldr	r3, [sp, #8]
 800cb7a:	e76f      	b.n	800ca5c <EwDrawText+0x18c>
 800cb7c:	9903      	ldr	r1, [sp, #12]
 800cb7e:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
 800cb82:	d118      	bne.n	800cbb6 <EwDrawText+0x2e6>
 800cb84:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cb86:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb88:	9f07      	ldr	r7, [sp, #28]
 800cb8a:	4401      	add	r1, r0
 800cb8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb8e:	3901      	subs	r1, #1
 800cb90:	1bc0      	subs	r0, r0, r7
 800cb92:	9f02      	ldr	r7, [sp, #8]
 800cb94:	1acb      	subs	r3, r1, r3
 800cb96:	429f      	cmp	r7, r3
 800cb98:	bfb8      	it	lt
 800cb9a:	461f      	movlt	r7, r3
 800cb9c:	9b05      	ldr	r3, [sp, #20]
 800cb9e:	9702      	str	r7, [sp, #8]
 800cba0:	440a      	add	r2, r1
 800cba2:	429a      	cmp	r2, r3
 800cba4:	bfbc      	itt	lt
 800cba6:	1c53      	addlt	r3, r2, #1
 800cba8:	9305      	strlt	r3, [sp, #20]
 800cbaa:	9b01      	ldr	r3, [sp, #4]
 800cbac:	eba3 0900 	sub.w	r9, r3, r0
 800cbb0:	9b06      	ldr	r3, [sp, #24]
 800cbb2:	1a1b      	subs	r3, r3, r0
 800cbb4:	e754      	b.n	800ca60 <EwDrawText+0x190>
 800cbb6:	9807      	ldr	r0, [sp, #28]
 800cbb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cbba:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800cbbc:	1a09      	subs	r1, r1, r0
 800cbbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbc0:	1bc0      	subs	r0, r0, r7
 800cbc2:	9f01      	ldr	r7, [sp, #4]
 800cbc4:	1a82      	subs	r2, r0, r2
 800cbc6:	4297      	cmp	r7, r2
 800cbc8:	bfb8      	it	lt
 800cbca:	4617      	movlt	r7, r2
 800cbcc:	9a06      	ldr	r2, [sp, #24]
 800cbce:	9701      	str	r7, [sp, #4]
 800cbd0:	4403      	add	r3, r0
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	bfbc      	itt	lt
 800cbd6:	3301      	addlt	r3, #1
 800cbd8:	9306      	strlt	r3, [sp, #24]
 800cbda:	9b02      	ldr	r3, [sp, #8]
 800cbdc:	eba3 0901 	sub.w	r9, r3, r1
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	1a5b      	subs	r3, r3, r1
 800cbe4:	e73c      	b.n	800ca60 <EwDrawText+0x190>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	e793      	b.n	800cb14 <EwDrawText+0x244>
 800cbec:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f040 81eb 	bne.w	800cfcc <EwDrawText+0x6fc>
 800cbf6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f040 81e6 	bne.w	800cfcc <EwDrawText+0x6fc>
 800cc00:	4647      	mov	r7, r8
 800cc02:	f006 fa6b 	bl	80130dc <EwFreeGlyph>
 800cc06:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc0a:	2f00      	cmp	r7, #0
 800cc0c:	f47f af69 	bne.w	800cae2 <EwDrawText+0x212>
 800cc10:	b01d      	add	sp, #116	; 0x74
 800cc12:	ecbd 8b02 	vpop	{d8}
 800cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e756      	b.n	800cacc <EwDrawText+0x1fc>
 800cc1e:	2128      	movs	r1, #40	; 0x28
 800cc20:	f006 fb0f 	bl	8013242 <EwAllocTaskData>
 800cc24:	9b08      	ldr	r3, [sp, #32]
 800cc26:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cc28:	889a      	ldrh	r2, [r3, #4]
 800cc2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc2c:	18d3      	adds	r3, r2, r3
 800cc2e:	8003      	strh	r3, [r0, #0]
 800cc30:	9b08      	ldr	r3, [sp, #32]
 800cc32:	891b      	ldrh	r3, [r3, #8]
 800cc34:	1859      	adds	r1, r3, r1
 800cc36:	8041      	strh	r1, [r0, #2]
 800cc38:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cc3a:	440a      	add	r2, r1
 800cc3c:	8082      	strh	r2, [r0, #4]
 800cc3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc40:	4413      	add	r3, r2
 800cc42:	80c3      	strh	r3, [r0, #6]
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	1af3      	subs	r3, r6, r3
 800cc48:	8103      	strh	r3, [r0, #8]
 800cc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	8143      	strh	r3, [r0, #10]
 800cc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc52:	6183      	str	r3, [r0, #24]
 800cc54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc56:	61c3      	str	r3, [r0, #28]
 800cc58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc5a:	6203      	str	r3, [r0, #32]
 800cc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5e:	6243      	str	r3, [r0, #36]	; 0x24
 800cc60:	2300      	movs	r3, #0
 800cc62:	8283      	strh	r3, [r0, #20]
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	82c3      	strh	r3, [r0, #22]
 800cc68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc6a:	60c3      	str	r3, [r0, #12]
 800cc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc6e:	6103      	str	r3, [r0, #16]
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 800cc76:	2b5a      	cmp	r3, #90	; 0x5a
 800cc78:	4680      	mov	r8, r0
 800cc7a:	f040 8093 	bne.w	800cda4 <EwDrawText+0x4d4>
 800cc7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc80:	9907      	ldr	r1, [sp, #28]
 800cc82:	440b      	add	r3, r1
 800cc84:	1b9b      	subs	r3, r3, r6
 800cc86:	1bdb      	subs	r3, r3, r7
 800cc88:	1a9b      	subs	r3, r3, r2
 800cc8a:	9a06      	ldr	r2, [sp, #24]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	bfa8      	it	ge
 800cc90:	461a      	movge	r2, r3
 800cc92:	9206      	str	r2, [sp, #24]
 800cc94:	f04f 0a00 	mov.w	sl, #0
 800cc98:	9b04      	ldr	r3, [sp, #16]
 800cc9a:	ee18 0a10 	vmov	r0, s16
 800cc9e:	00d9      	lsls	r1, r3, #3
 800cca0:	f006 facf 	bl	8013242 <EwAllocTaskData>
 800cca4:	4681      	mov	r9, r0
 800cca6:	b340      	cbz	r0, 800ccfa <EwDrawText+0x42a>
 800cca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccaa:	b15b      	cbz	r3, 800ccc4 <EwDrawText+0x3f4>
 800ccac:	f025 0380 	bic.w	r3, r5, #128	; 0x80
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	2b20      	cmp	r3, #32
 800ccb4:	d106      	bne.n	800ccc4 <EwDrawText+0x3f4>
 800ccb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccba:	4413      	add	r3, r2
 800ccbc:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccc4:	9a04      	ldr	r2, [sp, #16]
 800ccc6:	f109 0a08 	add.w	sl, r9, #8
 800ccca:	2a00      	cmp	r2, #0
 800cccc:	f102 33ff 	add.w	r3, r2, #4294967295
 800ccd0:	f300 8093 	bgt.w	800cdfa <EwDrawText+0x52a>
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	9a04      	ldr	r2, [sp, #16]
 800ccd8:	9517      	str	r5, [sp, #92]	; 0x5c
 800ccda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccde:	3a01      	subs	r2, #1
 800cce0:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccea:	3b01      	subs	r3, #1
 800ccec:	930c      	str	r3, [sp, #48]	; 0x30
 800ccee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccf0:	885d      	ldrh	r5, [r3, #2]
 800ccf2:	3302      	adds	r3, #2
 800ccf4:	46a2      	mov	sl, r4
 800ccf6:	9312      	str	r3, [sp, #72]	; 0x48
 800ccf8:	2400      	movs	r4, #0
 800ccfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccfc:	b38b      	cbz	r3, 800cd62 <EwDrawText+0x492>
 800ccfe:	b385      	cbz	r5, 800cd62 <EwDrawText+0x492>
 800cd00:	f1b9 0f00 	cmp.w	r9, #0
 800cd04:	d02d      	beq.n	800cd62 <EwDrawText+0x492>
 800cd06:	f242 0326 	movw	r3, #8230	; 0x2026
 800cd0a:	429d      	cmp	r5, r3
 800cd0c:	f040 80a8 	bne.w	800ce60 <EwDrawText+0x590>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4658      	mov	r0, fp
 800cd14:	f7fa fd64 	bl	80077e0 <UpdateWatermark1+0x51c>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	bf0c      	ite	eq
 800cd1c:	2303      	moveq	r3, #3
 800cd1e:	2301      	movne	r3, #1
 800cd20:	9304      	str	r3, [sp, #16]
 800cd22:	bf08      	it	eq
 800cd24:	252e      	moveq	r5, #46	; 0x2e
 800cd26:	4629      	mov	r1, r5
 800cd28:	4658      	mov	r0, fp
 800cd2a:	f7fa f941 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	b140      	cbz	r0, 800cd44 <EwDrawText+0x474>
 800cd32:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 800cd36:	b92b      	cbnz	r3, 800cd44 <EwDrawText+0x474>
 800cd38:	8c07      	ldrh	r7, [r0, #32]
 800cd3a:	8b83      	ldrh	r3, [r0, #28]
 800cd3c:	431f      	orrs	r7, r3
 800cd3e:	b23f      	sxth	r7, r7
 800cd40:	2f00      	cmp	r7, #0
 800cd42:	d076      	beq.n	800ce32 <EwDrawText+0x562>
 800cd44:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cd46:	f8db 0014 	ldr.w	r0, [fp, #20]
 800cd4a:	462a      	mov	r2, r5
 800cd4c:	f00a ff4e 	bl	8017bec <EwFntGetKerning>
 800cd50:	4607      	mov	r7, r0
 800cd52:	b134      	cbz	r4, 800cd62 <EwDrawText+0x492>
 800cd54:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 800cd58:	1833      	adds	r3, r6, r0
 800cd5a:	4413      	add	r3, r2
 800cd5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	db9a      	blt.n	800cc98 <EwDrawText+0x3c8>
 800cd62:	f1ba 0f00 	cmp.w	sl, #0
 800cd66:	f000 8113 	beq.w	800cf90 <EwDrawText+0x6c0>
 800cd6a:	f9ba 1020 	ldrsh.w	r1, [sl, #32]
 800cd6e:	f9ba 301c 	ldrsh.w	r3, [sl, #28]
 800cd72:	4439      	add	r1, r7
 800cd74:	4419      	add	r1, r3
 800cd76:	f9ba 3024 	ldrsh.w	r3, [sl, #36]	; 0x24
 800cd7a:	1ac9      	subs	r1, r1, r3
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	2b5a      	cmp	r3, #90	; 0x5a
 800cd80:	d175      	bne.n	800ce6e <EwDrawText+0x59e>
 800cd82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd84:	9a07      	ldr	r2, [sp, #28]
 800cd86:	eb03 0902 	add.w	r9, r3, r2
 800cd8a:	eba9 0906 	sub.w	r9, r9, r6
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	2900      	cmp	r1, #0
 800cd92:	bfa8      	it	ge
 800cd94:	eba9 0901 	subge.w	r9, r9, r1
 800cd98:	4599      	cmp	r9, r3
 800cd9a:	bfb8      	it	lt
 800cd9c:	4699      	movlt	r9, r3
 800cd9e:	9b06      	ldr	r3, [sp, #24]
 800cda0:	9a05      	ldr	r2, [sp, #20]
 800cda2:	e0f2      	b.n	800cf8a <EwDrawText+0x6ba>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	2bb4      	cmp	r3, #180	; 0xb4
 800cda8:	d10b      	bne.n	800cdc2 <EwDrawText+0x4f2>
 800cdaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdac:	9907      	ldr	r1, [sp, #28]
 800cdae:	440b      	add	r3, r1
 800cdb0:	1b9b      	subs	r3, r3, r6
 800cdb2:	1bdb      	subs	r3, r3, r7
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	bfa8      	it	ge
 800cdbc:	461a      	movge	r2, r3
 800cdbe:	9205      	str	r2, [sp, #20]
 800cdc0:	e768      	b.n	800cc94 <EwDrawText+0x3c4>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cdc8:	d10b      	bne.n	800cde2 <EwDrawText+0x512>
 800cdca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdcc:	9907      	ldr	r1, [sp, #28]
 800cdce:	1a5b      	subs	r3, r3, r1
 800cdd0:	4433      	add	r3, r6
 800cdd2:	443b      	add	r3, r7
 800cdd4:	4413      	add	r3, r2
 800cdd6:	9a01      	ldr	r2, [sp, #4]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	bfb8      	it	lt
 800cddc:	461a      	movlt	r2, r3
 800cdde:	9201      	str	r2, [sp, #4]
 800cde0:	e758      	b.n	800cc94 <EwDrawText+0x3c4>
 800cde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cde4:	9907      	ldr	r1, [sp, #28]
 800cde6:	1a5b      	subs	r3, r3, r1
 800cde8:	4433      	add	r3, r6
 800cdea:	443b      	add	r3, r7
 800cdec:	4413      	add	r3, r2
 800cdee:	9a02      	ldr	r2, [sp, #8]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	bfb8      	it	lt
 800cdf4:	461a      	movlt	r2, r3
 800cdf6:	9202      	str	r2, [sp, #8]
 800cdf8:	e74c      	b.n	800cc94 <EwDrawText+0x3c4>
 800cdfa:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800cdfe:	3201      	adds	r2, #1
 800ce00:	e94a 7402 	strd	r7, r4, [sl, #-8]
 800ce04:	f8a8 2014 	strh.w	r2, [r8, #20]
 800ce08:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800ce0c:	443a      	add	r2, r7
 800ce0e:	4416      	add	r6, r2
 800ce10:	b15b      	cbz	r3, 800ce2a <EwDrawText+0x55a>
 800ce12:	6922      	ldr	r2, [r4, #16]
 800ce14:	f8db 0014 	ldr.w	r0, [fp, #20]
 800ce18:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce1a:	3201      	adds	r2, #1
 800ce1c:	6122      	str	r2, [r4, #16]
 800ce1e:	4629      	mov	r1, r5
 800ce20:	462a      	mov	r2, r5
 800ce22:	f00a fee3 	bl	8017bec <EwFntGetKerning>
 800ce26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce28:	4607      	mov	r7, r0
 800ce2a:	f10a 0a08 	add.w	sl, sl, #8
 800ce2e:	461a      	mov	r2, r3
 800ce30:	e74b      	b.n	800ccca <EwDrawText+0x3fa>
 800ce32:	f006 f953 	bl	80130dc <EwFreeGlyph>
 800ce36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	930c      	str	r3, [sp, #48]	; 0x30
 800ce3e:	dd12      	ble.n	800ce66 <EwDrawText+0x596>
 800ce40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce42:	f833 5f02 	ldrh.w	r5, [r3, #2]!
 800ce46:	9312      	str	r3, [sp, #72]	; 0x48
 800ce48:	f242 0326 	movw	r3, #8230	; 0x2026
 800ce4c:	429d      	cmp	r5, r3
 800ce4e:	f43f af5f 	beq.w	800cd10 <EwDrawText+0x440>
 800ce52:	2301      	movs	r3, #1
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	f47f af65 	bne.w	800cd26 <EwDrawText+0x456>
 800ce5c:	462c      	mov	r4, r5
 800ce5e:	e771      	b.n	800cd44 <EwDrawText+0x474>
 800ce60:	2301      	movs	r3, #1
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	e75f      	b.n	800cd26 <EwDrawText+0x456>
 800ce66:	2301      	movs	r3, #1
 800ce68:	463d      	mov	r5, r7
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	e7f6      	b.n	800ce5c <EwDrawText+0x58c>
 800ce6e:	9b03      	ldr	r3, [sp, #12]
 800ce70:	2bb4      	cmp	r3, #180	; 0xb4
 800ce72:	d16a      	bne.n	800cf4a <EwDrawText+0x67a>
 800ce74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce76:	9a07      	ldr	r2, [sp, #28]
 800ce78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce7c:	eb03 0a02 	add.w	sl, r3, r2
 800ce80:	ebaa 0a06 	sub.w	sl, sl, r6
 800ce84:	9b02      	ldr	r3, [sp, #8]
 800ce86:	9a05      	ldr	r2, [sp, #20]
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	bfa8      	it	ge
 800ce8c:	ebaa 0a01 	subge.w	sl, sl, r1
 800ce90:	459a      	cmp	sl, r3
 800ce92:	bfb8      	it	lt
 800ce94:	469a      	movlt	sl, r3
 800ce96:	9b06      	ldr	r3, [sp, #24]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	ee18 0a10 	vmov	r0, s16
 800ce9e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 800cea2:	f006 f995 	bl	80131d0 <EwAllocTask>
 800cea6:	9b08      	ldr	r3, [sp, #32]
 800cea8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ceaa:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ceae:	f8c0 8010 	str.w	r8, [r0, #16]
 800ceb2:	2108      	movs	r1, #8
 800ceb4:	8081      	strh	r1, [r0, #4]
 800ceb6:	8899      	ldrh	r1, [r3, #4]
 800ceb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ceba:	4463      	add	r3, ip
 800cebc:	440a      	add	r2, r1
 800cebe:	81c3      	strh	r3, [r0, #14]
 800cec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cec2:	8182      	strh	r2, [r0, #12]
 800cec4:	448a      	add	sl, r1
 800cec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ceca:	f8a0 a008 	strh.w	sl, [r0, #8]
 800cece:	3b00      	subs	r3, #0
 800ced0:	44e1      	add	r9, ip
 800ced2:	bf18      	it	ne
 800ced4:	2301      	movne	r3, #1
 800ced6:	428a      	cmp	r2, r1
 800ced8:	f8a0 900a 	strh.w	r9, [r0, #10]
 800cedc:	f000 80b9 	beq.w	800d052 <EwDrawText+0x782>
 800cee0:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 800cee4:	428a      	cmp	r2, r1
 800cee6:	f000 80bc 	beq.w	800d062 <EwDrawText+0x792>
 800ceea:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 800ceee:	428a      	cmp	r2, r1
 800cef0:	f040 80b7 	bne.w	800d062 <EwDrawText+0x792>
 800cef4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cef8:	428a      	cmp	r2, r1
 800cefa:	f040 80b2 	bne.w	800d062 <EwDrawText+0x792>
 800cefe:	f043 0306 	orr.w	r3, r3, #6
 800cf02:	80c3      	strh	r3, [r0, #6]
 800cf04:	9b08      	ldr	r3, [sp, #32]
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	f006 fa0a 	bl	8013320 <EwDoneIssue>
 800cf0c:	2c00      	cmp	r4, #0
 800cf0e:	d051      	beq.n	800cfb4 <EwDrawText+0x6e4>
 800cf10:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 800cf14:	19f3      	adds	r3, r6, r7
 800cf16:	4413      	add	r3, r2
 800cf18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	da0d      	bge.n	800cf3a <EwDrawText+0x66a>
 800cf1e:	9b08      	ldr	r3, [sp, #32]
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f006 f8ed 	bl	8013100 <EwInitIssue>
 800cf26:	ee08 0a10 	vmov	s16, r0
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f47f ae77 	bne.w	800cc1e <EwDrawText+0x34e>
 800cf30:	4602      	mov	r2, r0
 800cf32:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf34:	2083      	movs	r0, #131	; 0x83
 800cf36:	f00b fecd 	bl	8018cd4 <EwErrorPD>
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	b01d      	add	sp, #116	; 0x74
 800cf3e:	ecbd 8b02 	vpop	{d8}
 800cf42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf46:	f006 b8c9 	b.w	80130dc <EwFreeGlyph>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cf50:	d10d      	bne.n	800cf6e <EwDrawText+0x69e>
 800cf52:	9a07      	ldr	r2, [sp, #28]
 800cf54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	4433      	add	r3, r6
 800cf5a:	9a06      	ldr	r2, [sp, #24]
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	bfa8      	it	ge
 800cf60:	185b      	addge	r3, r3, r1
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfa8      	it	ge
 800cf66:	4613      	movge	r3, r2
 800cf68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cf6c:	e718      	b.n	800cda0 <EwDrawText+0x4d0>
 800cf6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf70:	9a07      	ldr	r2, [sp, #28]
 800cf72:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cf76:	1a9a      	subs	r2, r3, r2
 800cf78:	4432      	add	r2, r6
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	bfa8      	it	ge
 800cf80:	1852      	addge	r2, r2, r1
 800cf82:	429a      	cmp	r2, r3
 800cf84:	bfa8      	it	ge
 800cf86:	461a      	movge	r2, r3
 800cf88:	9b06      	ldr	r3, [sp, #24]
 800cf8a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800cf8e:	e783      	b.n	800ce98 <EwDrawText+0x5c8>
 800cf90:	9b06      	ldr	r3, [sp, #24]
 800cf92:	e7e9      	b.n	800cf68 <EwDrawText+0x698>
 800cf94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf96:	e7ae      	b.n	800cef6 <EwDrawText+0x626>
 800cf98:	f043 0302 	orr.w	r3, r3, #2
 800cf9c:	e7b1      	b.n	800cf02 <EwDrawText+0x632>
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	4658      	mov	r0, fp
 800cfa2:	f7fa f805 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d1b1      	bne.n	800cf10 <EwDrawText+0x640>
 800cfac:	f006 f96c 	bl	8013288 <EwFlushTasks>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d049      	beq.n	800d048 <EwDrawText+0x778>
 800cfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f43f ae2a 	beq.w	800cc10 <EwDrawText+0x340>
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	d1ee      	bne.n	800cf9e <EwDrawText+0x6ce>
 800cfc0:	e626      	b.n	800cc10 <EwDrawText+0x340>
 800cfc2:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f43f ae10 	beq.w	800cbec <EwDrawText+0x31c>
 800cfcc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800cfce:	f8db 0014 	ldr.w	r0, [fp, #20]
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	f00a fe0a 	bl	8017bec <EwFntGetKerning>
 800cfd8:	9b04      	ldr	r3, [sp, #16]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	931a      	str	r3, [sp, #104]	; 0x68
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	4607      	mov	r7, r0
 800cfe4:	d008      	beq.n	800cff8 <EwDrawText+0x728>
 800cfe6:	f8db 0014 	ldr.w	r0, [fp, #20]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4629      	mov	r1, r5
 800cfee:	f00a fdfd 	bl	8017bec <EwFntGetKerning>
 800cff2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cff4:	fb03 7000 	mla	r0, r3, r0, r7
 800cff8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cffa:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800cffe:	fb02 fc03 	mul.w	ip, r2, r3
 800d002:	1982      	adds	r2, r0, r6
 800d004:	eb02 010c 	add.w	r1, r2, ip
 800d008:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 800d00c:	440a      	add	r2, r1
 800d00e:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
 800d012:	440a      	add	r2, r1
 800d014:	454a      	cmp	r2, r9
 800d016:	f73f af7b 	bgt.w	800cf10 <EwDrawText+0x640>
 800d01a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d01c:	b15a      	cbz	r2, 800d036 <EwDrawText+0x766>
 800d01e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800d022:	b292      	uxth	r2, r2
 800d024:	2a20      	cmp	r2, #32
 800d026:	d106      	bne.n	800d036 <EwDrawText+0x766>
 800d028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d02a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d02c:	440a      	add	r2, r1
 800d02e:	eb06 4622 	add.w	r6, r6, r2, asr #16
 800d032:	b292      	uxth	r2, r2
 800d034:	9213      	str	r2, [sp, #76]	; 0x4c
 800d036:	4463      	add	r3, ip
 800d038:	4418      	add	r0, r3
 800d03a:	4406      	add	r6, r0
 800d03c:	4620      	mov	r0, r4
 800d03e:	f006 f84d 	bl	80130dc <EwFreeGlyph>
 800d042:	4647      	mov	r7, r8
 800d044:	9517      	str	r5, [sp, #92]	; 0x5c
 800d046:	e5de      	b.n	800cc06 <EwDrawText+0x336>
 800d048:	f8db 1018 	ldr.w	r1, [fp, #24]
 800d04c:	462a      	mov	r2, r5
 800d04e:	20b6      	movs	r0, #182	; 0xb6
 800d050:	e570      	b.n	800cb34 <EwDrawText+0x264>
 800d052:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 800d056:	428a      	cmp	r2, r1
 800d058:	d106      	bne.n	800d068 <EwDrawText+0x798>
 800d05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d05e:	428a      	cmp	r2, r1
 800d060:	d09a      	beq.n	800cf98 <EwDrawText+0x6c8>
 800d062:	f043 0304 	orr.w	r3, r3, #4
 800d066:	e74c      	b.n	800cf02 <EwDrawText+0x632>
 800d068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d06a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d06c:	428a      	cmp	r2, r1
 800d06e:	d191      	bne.n	800cf94 <EwDrawText+0x6c4>
 800d070:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800d074:	e7f3      	b.n	800d05e <EwDrawText+0x78e>

0800d076 <EwGetTextColumnAtPosition>:
 800d076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07a:	b087      	sub	sp, #28
 800d07c:	4606      	mov	r6, r0
 800d07e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d080:	9201      	str	r2, [sp, #4]
 800d082:	460f      	mov	r7, r1
 800d084:	4699      	mov	r9, r3
 800d086:	2a00      	cmp	r2, #0
 800d088:	f000 8095 	beq.w	800d1b6 <EwGetTextColumnAtPosition+0x140>
 800d08c:	2900      	cmp	r1, #0
 800d08e:	f000 8094 	beq.w	800d1ba <EwGetTextColumnAtPosition+0x144>
 800d092:	880c      	ldrh	r4, [r1, #0]
 800d094:	b134      	cbz	r4, 800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d096:	b948      	cbnz	r0, 800d0ac <EwGetTextColumnAtPosition+0x36>
 800d098:	4602      	mov	r2, r0
 800d09a:	4601      	mov	r1, r0
 800d09c:	20ab      	movs	r0, #171	; 0xab
 800d09e:	f00b fe19 	bl	8018cd4 <EwErrorPD>
 800d0a2:	4634      	mov	r4, r6
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	b007      	add	sp, #28
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	f1b9 0f00 	cmp.w	r9, #0
 800d0b0:	f2c0 8085 	blt.w	800d1be <EwGetTextColumnAtPosition+0x148>
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	dd7c      	ble.n	800d1b2 <EwGetTextColumnAtPosition+0x13c>
 800d0b8:	f7ff fba7 	bl	800c80a <EwGetTextAdvance>
 800d0bc:	1a28      	subs	r0, r5, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	dd77      	ble.n	800d1b2 <EwGetTextColumnAtPosition+0x13c>
 800d0c2:	9901      	ldr	r1, [sp, #4]
 800d0c4:	1ebc      	subs	r4, r7, #2
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800d0cc:	b132      	cbz	r2, 800d0dc <EwGetTextColumnAtPosition+0x66>
 800d0ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0d2:	2a20      	cmp	r2, #32
 800d0d4:	bf08      	it	eq
 800d0d6:	3301      	addeq	r3, #1
 800d0d8:	3901      	subs	r1, #1
 800d0da:	d1f5      	bne.n	800d0c8 <EwGetTextColumnAtPosition+0x52>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d068      	beq.n	800d1b2 <EwGetTextColumnAtPosition+0x13c>
 800d0e0:	0400      	lsls	r0, r0, #16
 800d0e2:	fb90 f3f3 	sdiv	r3, r0, r3
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	f04f 0b00 	mov.w	fp, #0
 800d0ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0f0:	465c      	mov	r4, fp
 800d0f2:	9303      	str	r3, [sp, #12]
 800d0f4:	e021      	b.n	800d13a <EwGetTextColumnAtPosition+0xc4>
 800d0f6:	f242 0326 	movw	r3, #8230	; 0x2026
 800d0fa:	4598      	cmp	r8, r3
 800d0fc:	d123      	bne.n	800d146 <EwGetTextColumnAtPosition+0xd0>
 800d0fe:	4619      	mov	r1, r3
 800d100:	4630      	mov	r0, r6
 800d102:	f7fa fb6d 	bl	80077e0 <UpdateWatermark1+0x51c>
 800d106:	f242 0326 	movw	r3, #8230	; 0x2026
 800d10a:	2800      	cmp	r0, #0
 800d10c:	bf15      	itete	ne
 800d10e:	f04f 0a01 	movne.w	sl, #1
 800d112:	f04f 0a03 	moveq.w	sl, #3
 800d116:	4698      	movne	r8, r3
 800d118:	f04f 082e 	moveq.w	r8, #46	; 0x2e
 800d11c:	4641      	mov	r1, r8
 800d11e:	4630      	mov	r0, r6
 800d120:	f7f9 ff46 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800d124:	4603      	mov	r3, r0
 800d126:	2800      	cmp	r0, #0
 800d128:	d14c      	bne.n	800d1c4 <EwGetTextColumnAtPosition+0x14e>
 800d12a:	f006 f8ad 	bl	8013288 <EwFlushTasks>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d1f4      	bne.n	800d11c <EwGetTextColumnAtPosition+0xa6>
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	3401      	adds	r4, #1
 800d136:	42a3      	cmp	r3, r4
 800d138:	d0b4      	beq.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d13a:	f837 8014 	ldrh.w	r8, [r7, r4, lsl #1]
 800d13e:	f1b8 0f00 	cmp.w	r8, #0
 800d142:	d1d8      	bne.n	800d0f6 <EwGetTextColumnAtPosition+0x80>
 800d144:	e7ae      	b.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d146:	f04f 0a01 	mov.w	sl, #1
 800d14a:	e7e7      	b.n	800d11c <EwGetTextColumnAtPosition+0xa6>
 800d14c:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 800d150:	bb4d      	cbnz	r5, 800d1a6 <EwGetTextColumnAtPosition+0x130>
 800d152:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800d156:	bb39      	cbnz	r1, 800d1a8 <EwGetTextColumnAtPosition+0x132>
 800d158:	f005 ffc0 	bl	80130dc <EwFreeGlyph>
 800d15c:	e7e9      	b.n	800d132 <EwGetTextColumnAtPosition+0xbc>
 800d15e:	4642      	mov	r2, r8
 800d160:	4659      	mov	r1, fp
 800d162:	6970      	ldr	r0, [r6, #20]
 800d164:	9305      	str	r3, [sp, #20]
 800d166:	f00a fd41 	bl	8017bec <EwFntGetKerning>
 800d16a:	9b05      	ldr	r3, [sp, #20]
 800d16c:	9a02      	ldr	r2, [sp, #8]
 800d16e:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 800d172:	4408      	add	r0, r1
 800d174:	4405      	add	r5, r0
 800d176:	b14a      	cbz	r2, 800d18c <EwGetTextColumnAtPosition+0x116>
 800d178:	9a04      	ldr	r2, [sp, #16]
 800d17a:	2a20      	cmp	r2, #32
 800d17c:	d106      	bne.n	800d18c <EwGetTextColumnAtPosition+0x116>
 800d17e:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 800d182:	4402      	add	r2, r0
 800d184:	eb05 4522 	add.w	r5, r5, r2, asr #16
 800d188:	b292      	uxth	r2, r2
 800d18a:	9203      	str	r2, [sp, #12]
 800d18c:	46c3      	mov	fp, r8
 800d18e:	f1ba 0a01 	subs.w	sl, sl, #1
 800d192:	d2e4      	bcs.n	800d15e <EwGetTextColumnAtPosition+0xe8>
 800d194:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 800d198:	ebb9 0f62 	cmp.w	r9, r2, asr #1
 800d19c:	dd82      	ble.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d19e:	eba9 0905 	sub.w	r9, r9, r5
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	e7d8      	b.n	800d158 <EwGetTextColumnAtPosition+0xe2>
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	f028 0180 	bic.w	r1, r8, #128	; 0x80
 800d1ac:	b28a      	uxth	r2, r1
 800d1ae:	9204      	str	r2, [sp, #16]
 800d1b0:	e7ed      	b.n	800d18e <EwGetTextColumnAtPosition+0x118>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e797      	b.n	800d0e6 <EwGetTextColumnAtPosition+0x70>
 800d1b6:	9c01      	ldr	r4, [sp, #4]
 800d1b8:	e774      	b.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	e772      	b.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d1be:	f04f 34ff 	mov.w	r4, #4294967295
 800d1c2:	e76f      	b.n	800d0a4 <EwGetTextColumnAtPosition+0x2e>
 800d1c4:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 800d1c8:	2900      	cmp	r1, #0
 800d1ca:	d0bf      	beq.n	800d14c <EwGetTextColumnAtPosition+0xd6>
 800d1cc:	2500      	movs	r5, #0
 800d1ce:	e7eb      	b.n	800d1a8 <EwGetTextColumnAtPosition+0x132>

0800d1d0 <EwGetPositionAtTextColumn>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	b087      	sub	sp, #28
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d1da:	4698      	mov	r8, r3
 800d1dc:	4614      	mov	r4, r2
 800d1de:	b16a      	cbz	r2, 800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d1e0:	2900      	cmp	r1, #0
 800d1e2:	f000 8089 	beq.w	800d2f8 <EwGetPositionAtTextColumn+0x128>
 800d1e6:	880b      	ldrh	r3, [r1, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 8087 	beq.w	800d2fc <EwGetPositionAtTextColumn+0x12c>
 800d1ee:	b948      	cbnz	r0, 800d204 <EwGetPositionAtTextColumn+0x34>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	20ac      	movs	r0, #172	; 0xac
 800d1f6:	f00b fd6d 	bl	8018cd4 <EwErrorPD>
 800d1fa:	4634      	mov	r4, r6
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	b007      	add	sp, #28
 800d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d204:	f1b8 0f00 	cmp.w	r8, #0
 800d208:	db7a      	blt.n	800d300 <EwGetPositionAtTextColumn+0x130>
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	f1a1 0702 	sub.w	r7, r1, #2
 800d210:	dd70      	ble.n	800d2f4 <EwGetPositionAtTextColumn+0x124>
 800d212:	f7ff fafa 	bl	800c80a <EwGetTextAdvance>
 800d216:	1a28      	subs	r0, r5, r0
 800d218:	2800      	cmp	r0, #0
 800d21a:	dd6b      	ble.n	800d2f4 <EwGetPositionAtTextColumn+0x124>
 800d21c:	463d      	mov	r5, r7
 800d21e:	4621      	mov	r1, r4
 800d220:	2300      	movs	r3, #0
 800d222:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 800d226:	b132      	cbz	r2, 800d236 <EwGetPositionAtTextColumn+0x66>
 800d228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d22c:	2a20      	cmp	r2, #32
 800d22e:	bf08      	it	eq
 800d230:	3301      	addeq	r3, #1
 800d232:	3901      	subs	r1, #1
 800d234:	d1f5      	bne.n	800d222 <EwGetPositionAtTextColumn+0x52>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d05c      	beq.n	800d2f4 <EwGetPositionAtTextColumn+0x124>
 800d23a:	0405      	lsls	r5, r0, #16
 800d23c:	fb95 f3f3 	sdiv	r3, r5, r3
 800d240:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d244:	46a1      	mov	r9, r4
 800d246:	eba4 0308 	sub.w	r3, r4, r8
 800d24a:	2400      	movs	r4, #0
 800d24c:	9303      	str	r3, [sp, #12]
 800d24e:	46a3      	mov	fp, r4
 800d250:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 800d254:	f242 0a26 	movw	sl, #8230	; 0x2026
 800d258:	e01b      	b.n	800d292 <EwGetPositionAtTextColumn+0xc2>
 800d25a:	4555      	cmp	r5, sl
 800d25c:	d123      	bne.n	800d2a6 <EwGetPositionAtTextColumn+0xd6>
 800d25e:	4651      	mov	r1, sl
 800d260:	4630      	mov	r0, r6
 800d262:	f7fa fabd 	bl	80077e0 <UpdateWatermark1+0x51c>
 800d266:	2800      	cmp	r0, #0
 800d268:	bf15      	itete	ne
 800d26a:	f04f 0801 	movne.w	r8, #1
 800d26e:	f04f 0803 	moveq.w	r8, #3
 800d272:	4655      	movne	r5, sl
 800d274:	252e      	moveq	r5, #46	; 0x2e
 800d276:	4629      	mov	r1, r5
 800d278:	4630      	mov	r0, r6
 800d27a:	f7f9 fe99 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800d27e:	4603      	mov	r3, r0
 800d280:	2800      	cmp	r0, #0
 800d282:	d140      	bne.n	800d306 <EwGetPositionAtTextColumn+0x136>
 800d284:	f006 f800 	bl	8013288 <EwFlushTasks>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d1f4      	bne.n	800d276 <EwGetPositionAtTextColumn+0xa6>
 800d28c:	f1b9 0901 	subs.w	r9, r9, #1
 800d290:	d0b4      	beq.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	f833 5f02 	ldrh.w	r5, [r3, #2]!
 800d298:	9302      	str	r3, [sp, #8]
 800d29a:	2d00      	cmp	r5, #0
 800d29c:	d0ae      	beq.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	454b      	cmp	r3, r9
 800d2a2:	d1da      	bne.n	800d25a <EwGetPositionAtTextColumn+0x8a>
 800d2a4:	e7aa      	b.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d2a6:	f04f 0801 	mov.w	r8, #1
 800d2aa:	e7e4      	b.n	800d276 <EwGetPositionAtTextColumn+0xa6>
 800d2ac:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
 800d2b0:	bb69      	cbnz	r1, 800d30e <EwGetPositionAtTextColumn+0x13e>
 800d2b2:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800d2b6:	bb51      	cbnz	r1, 800d30e <EwGetPositionAtTextColumn+0x13e>
 800d2b8:	f005 ff10 	bl	80130dc <EwFreeGlyph>
 800d2bc:	e7e6      	b.n	800d28c <EwGetPositionAtTextColumn+0xbc>
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4659      	mov	r1, fp
 800d2c2:	6970      	ldr	r0, [r6, #20]
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	f00a fc91 	bl	8017bec <EwFntGetKerning>
 800d2ca:	9b05      	ldr	r3, [sp, #20]
 800d2cc:	9a01      	ldr	r2, [sp, #4]
 800d2ce:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 800d2d2:	4408      	add	r0, r1
 800d2d4:	4404      	add	r4, r0
 800d2d6:	b13a      	cbz	r2, 800d2e8 <EwGetPositionAtTextColumn+0x118>
 800d2d8:	9a04      	ldr	r2, [sp, #16]
 800d2da:	2a20      	cmp	r2, #32
 800d2dc:	bf01      	itttt	eq
 800d2de:	9a01      	ldreq	r2, [sp, #4]
 800d2e0:	18bf      	addeq	r7, r7, r2
 800d2e2:	eb04 4427 	addeq.w	r4, r4, r7, asr #16
 800d2e6:	b2bf      	uxtheq	r7, r7
 800d2e8:	46ab      	mov	fp, r5
 800d2ea:	f1b8 0801 	subs.w	r8, r8, #1
 800d2ee:	d2e6      	bcs.n	800d2be <EwGetPositionAtTextColumn+0xee>
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	e7e1      	b.n	800d2b8 <EwGetPositionAtTextColumn+0xe8>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	e7a3      	b.n	800d240 <EwGetPositionAtTextColumn+0x70>
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	e77f      	b.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d2fc:	461c      	mov	r4, r3
 800d2fe:	e77d      	b.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d300:	f04f 34ff 	mov.w	r4, #4294967295
 800d304:	e77a      	b.n	800d1fc <EwGetPositionAtTextColumn+0x2c>
 800d306:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 800d30a:	2900      	cmp	r1, #0
 800d30c:	d0ce      	beq.n	800d2ac <EwGetPositionAtTextColumn+0xdc>
 800d30e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800d312:	b28a      	uxth	r2, r1
 800d314:	9204      	str	r2, [sp, #16]
 800d316:	e7e8      	b.n	800d2ea <EwGetPositionAtTextColumn+0x11a>

0800d318 <EwIsGlyphAvailable>:
 800d318:	f240 621c 	movw	r2, #1564	; 0x61c
 800d31c:	4291      	cmp	r1, r2
 800d31e:	b410      	push	{r4}
 800d320:	d019      	beq.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d322:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800d326:	4291      	cmp	r1, r2
 800d328:	d015      	beq.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d32a:	f5a1 5200 	sub.w	r2, r1, #8192	; 0x2000
 800d32e:	f1a2 040b 	sub.w	r4, r2, #11
 800d332:	b2a4      	uxth	r4, r4
 800d334:	2c04      	cmp	r4, #4
 800d336:	d90e      	bls.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d338:	3a2a      	subs	r2, #42	; 0x2a
 800d33a:	b292      	uxth	r2, r2
 800d33c:	2a04      	cmp	r2, #4
 800d33e:	d90a      	bls.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d340:	f5a1 5201 	sub.w	r2, r1, #8256	; 0x2040
 800d344:	3a26      	subs	r2, #38	; 0x26
 800d346:	2a03      	cmp	r2, #3
 800d348:	d905      	bls.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d34a:	290a      	cmp	r1, #10
 800d34c:	d003      	beq.n	800d356 <EwIsGlyphAvailable+0x3e>
 800d34e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d352:	f7fa ba45 	b.w	80077e0 <UpdateWatermark1+0x51c>
 800d356:	2000      	movs	r0, #0
 800d358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <EwGetGlyphMetrics>:
 800d35e:	b570      	push	{r4, r5, r6, lr}
 800d360:	460e      	mov	r6, r1
 800d362:	4614      	mov	r4, r2
 800d364:	4605      	mov	r5, r0
 800d366:	b100      	cbz	r0, 800d36a <EwGetGlyphMetrics+0xc>
 800d368:	b922      	cbnz	r2, 800d374 <EwGetGlyphMetrics+0x16>
 800d36a:	20ad      	movs	r0, #173	; 0xad
 800d36c:	f00b fc9c 	bl	8018ca8 <EwError>
 800d370:	2000      	movs	r0, #0
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	4631      	mov	r1, r6
 800d376:	4628      	mov	r0, r5
 800d378:	f7f9 fe1a 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800d37c:	b920      	cbnz	r0, 800d388 <EwGetGlyphMetrics+0x2a>
 800d37e:	f005 ff83 	bl	8013288 <EwFlushTasks>
 800d382:	2800      	cmp	r0, #0
 800d384:	d1f6      	bne.n	800d374 <EwGetGlyphMetrics+0x16>
 800d386:	e7f4      	b.n	800d372 <EwGetGlyphMetrics+0x14>
 800d388:	f9b0 2024 	ldrsh.w	r2, [r0, #36]	; 0x24
 800d38c:	6122      	str	r2, [r4, #16]
 800d38e:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 800d392:	60a2      	str	r2, [r4, #8]
 800d394:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 800d398:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
 800d39c:	60e2      	str	r2, [r4, #12]
 800d39e:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 800d3a2:	6022      	str	r2, [r4, #0]
 800d3a4:	6063      	str	r3, [r4, #4]
 800d3a6:	f005 fe99 	bl	80130dc <EwFreeGlyph>
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	e7e1      	b.n	800d372 <EwGetGlyphMetrics+0x14>

0800d3ae <EwGetKerning>:
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	b920      	cbnz	r0, 800d3bc <EwGetKerning+0xe>
 800d3b2:	20af      	movs	r0, #175	; 0xaf
 800d3b4:	f00b fc78 	bl	8018ca8 <EwError>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	bd10      	pop	{r4, pc}
 800d3bc:	2900      	cmp	r1, #0
 800d3be:	d0fb      	beq.n	800d3b8 <EwGetKerning+0xa>
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	d0f9      	beq.n	800d3b8 <EwGetKerning+0xa>
 800d3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3c8:	6940      	ldr	r0, [r0, #20]
 800d3ca:	f00a bc0f 	b.w	8017bec <EwFntGetKerning>

0800d3ce <EwLockGlyph>:
 800d3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	b08c      	sub	sp, #48	; 0x30
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	b938      	cbnz	r0, 800d3ea <EwLockGlyph+0x1c>
 800d3da:	20ae      	movs	r0, #174	; 0xae
 800d3dc:	f00b fc64 	bl	8018ca8 <EwError>
 800d3e0:	4634      	mov	r4, r6
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	b00c      	add	sp, #48	; 0x30
 800d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ea:	4621      	mov	r1, r4
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	f7f9 fddf 	bl	8006fb0 <UpdateWatermark2+0xc40>
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	b928      	cbnz	r0, 800d402 <EwLockGlyph+0x34>
 800d3f6:	f005 ff47 	bl	8013288 <EwFlushTasks>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	d1f5      	bne.n	800d3ea <EwLockGlyph+0x1c>
 800d3fe:	4604      	mov	r4, r0
 800d400:	e7ef      	b.n	800d3e2 <EwLockGlyph+0x14>
 800d402:	2040      	movs	r0, #64	; 0x40
 800d404:	f01c f9b4 	bl	8029770 <EwAlloc>
 800d408:	4604      	mov	r4, r0
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d143      	bne.n	800d496 <EwLockGlyph+0xc8>
 800d40e:	2020      	movs	r0, #32
 800d410:	f00c fbfa 	bl	8019c08 <EwImmediateReclaimMemory>
 800d414:	2800      	cmp	r0, #0
 800d416:	d1f4      	bne.n	800d402 <EwLockGlyph+0x34>
 800d418:	4628      	mov	r0, r5
 800d41a:	f005 fe5f 	bl	80130dc <EwFreeGlyph>
 800d41e:	2020      	movs	r0, #32
 800d420:	f00b fc42 	bl	8018ca8 <EwError>
 800d424:	e7dd      	b.n	800d3e2 <EwLockGlyph+0x14>
 800d426:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d14e      	bne.n	800d4ca <EwLockGlyph+0xfc>
 800d42c:	f04f 0801 	mov.w	r8, #1
 800d430:	8ba8      	ldrh	r0, [r5, #28]
 800d432:	8beb      	ldrh	r3, [r5, #30]
 800d434:	fb10 8003 	smlabb	r0, r0, r3, r8
 800d438:	f01c f99a 	bl	8029770 <EwAlloc>
 800d43c:	b980      	cbnz	r0, 800d460 <EwLockGlyph+0x92>
 800d43e:	2021      	movs	r0, #33	; 0x21
 800d440:	f00c fbe2 	bl	8019c08 <EwImmediateReclaimMemory>
 800d444:	4607      	mov	r7, r0
 800d446:	2800      	cmp	r0, #0
 800d448:	d1f2      	bne.n	800d430 <EwLockGlyph+0x62>
 800d44a:	4628      	mov	r0, r5
 800d44c:	f005 fe46 	bl	80130dc <EwFreeGlyph>
 800d450:	4620      	mov	r0, r4
 800d452:	f01c f98f 	bl	8029774 <EwFree>
 800d456:	2021      	movs	r0, #33	; 0x21
 800d458:	f00b fc26 	bl	8018ca8 <EwError>
 800d45c:	463c      	mov	r4, r7
 800d45e:	e7c0      	b.n	800d3e2 <EwLockGlyph+0x14>
 800d460:	e9cd 0800 	strd	r0, r8, [sp]
 800d464:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
 800d468:	62e8      	str	r0, [r5, #44]	; 0x2c
 800d46a:	8b29      	ldrh	r1, [r5, #24]
 800d46c:	6968      	ldr	r0, [r5, #20]
 800d46e:	9302      	str	r3, [sp, #8]
 800d470:	466a      	mov	r2, sp
 800d472:	f00a fc26 	bl	8017cc2 <EwFntLoadGlyph>
 800d476:	b920      	cbnz	r0, 800d482 <EwLockGlyph+0xb4>
 800d478:	69aa      	ldr	r2, [r5, #24]
 800d47a:	69b1      	ldr	r1, [r6, #24]
 800d47c:	20b7      	movs	r0, #183	; 0xb7
 800d47e:	f00b fc21 	bl	8018cc4 <EwErrorSD>
 800d482:	4a22      	ldr	r2, [pc, #136]	; (800d50c <EwLockGlyph+0x13e>)
 800d484:	8bab      	ldrh	r3, [r5, #28]
 800d486:	8be8      	ldrh	r0, [r5, #30]
 800d488:	2101      	movs	r1, #1
 800d48a:	fb13 1300 	smlabb	r3, r3, r0, r1
 800d48e:	6811      	ldr	r1, [r2, #0]
 800d490:	440b      	add	r3, r1
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	e019      	b.n	800d4ca <EwLockGlyph+0xfc>
 800d496:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d498:	b9bb      	cbnz	r3, 800d4ca <EwLockGlyph+0xfc>
 800d49a:	466a      	mov	r2, sp
 800d49c:	2181      	movs	r1, #129	; 0x81
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f006 f834 	bl	801350c <EwLockGlyphCache>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d0be      	beq.n	800d426 <EwLockGlyph+0x58>
 800d4a8:	9b00      	ldr	r3, [sp, #0]
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	6063      	str	r3, [r4, #4]
 800d4b0:	466f      	mov	r7, sp
 800d4b2:	9b02      	ldr	r3, [sp, #8]
 800d4b4:	60a3      	str	r3, [r4, #8]
 800d4b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d4b8:	f104 060c 	add.w	r6, r4, #12
 800d4bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d4c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4c2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d4c6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800d4ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4cc:	b12b      	cbz	r3, 800d4da <EwLockGlyph+0x10c>
 800d4ce:	6023      	str	r3, [r4, #0]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	6063      	str	r3, [r4, #4]
 800d4d4:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
 800d4d8:	60a3      	str	r3, [r4, #8]
 800d4da:	490c      	ldr	r1, [pc, #48]	; (800d50c <EwLockGlyph+0x13e>)
 800d4dc:	63e5      	str	r5, [r4, #60]	; 0x3c
 800d4de:	680b      	ldr	r3, [r1, #0]
 800d4e0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	; (800d510 <EwLockGlyph+0x142>)
 800d4e6:	600a      	str	r2, [r1, #0]
 800d4e8:	6819      	ldr	r1, [r3, #0]
 800d4ea:	428a      	cmp	r2, r1
 800d4ec:	bfc8      	it	gt
 800d4ee:	601a      	strgt	r2, [r3, #0]
 800d4f0:	4908      	ldr	r1, [pc, #32]	; (800d514 <EwLockGlyph+0x146>)
 800d4f2:	4b09      	ldr	r3, [pc, #36]	; (800d518 <EwLockGlyph+0x14a>)
 800d4f4:	6809      	ldr	r1, [r1, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	440b      	add	r3, r1
 800d4fa:	4413      	add	r3, r2
 800d4fc:	4a07      	ldr	r2, [pc, #28]	; (800d51c <EwLockGlyph+0x14e>)
 800d4fe:	6811      	ldr	r1, [r2, #0]
 800d500:	428b      	cmp	r3, r1
 800d502:	f77f af6e 	ble.w	800d3e2 <EwLockGlyph+0x14>
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	e76b      	b.n	800d3e2 <EwLockGlyph+0x14>
 800d50a:	bf00      	nop
 800d50c:	200002e8 	.word	0x200002e8
 800d510:	20000304 	.word	0x20000304
 800d514:	200002e4 	.word	0x200002e4
 800d518:	200002d8 	.word	0x200002d8
 800d51c:	200002ec 	.word	0x200002ec

0800d520 <EwUnlockGlyph>:
 800d520:	b510      	push	{r4, lr}
 800d522:	4604      	mov	r4, r0
 800d524:	b198      	cbz	r0, 800d54e <EwUnlockGlyph+0x2e>
 800d526:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800d528:	b188      	cbz	r0, 800d54e <EwUnlockGlyph+0x2e>
 800d52a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d52c:	b91b      	cbnz	r3, 800d536 <EwUnlockGlyph+0x16>
 800d52e:	f104 010c 	add.w	r1, r4, #12
 800d532:	f005 fddc 	bl	80130ee <EwUnlockGlyphCache>
 800d536:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d538:	f005 fdd0 	bl	80130dc <EwFreeGlyph>
 800d53c:	2300      	movs	r3, #0
 800d53e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d540:	4620      	mov	r0, r4
 800d542:	f01c f917 	bl	8029774 <EwFree>
 800d546:	4a02      	ldr	r2, [pc, #8]	; (800d550 <EwUnlockGlyph+0x30>)
 800d548:	6813      	ldr	r3, [r2, #0]
 800d54a:	3b40      	subs	r3, #64	; 0x40
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	200002e8 	.word	0x200002e8

0800d554 <EwDrawBitmapFrame>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	ed2d 8b02 	vpush	{d8}
 800d55c:	b0dd      	sub	sp, #372	; 0x174
 800d55e:	4699      	mov	r9, r3
 800d560:	f89d 31d0 	ldrb.w	r3, [sp, #464]	; 0x1d0
 800d564:	9326      	str	r3, [sp, #152]	; 0x98
 800d566:	f89d 31d4 	ldrb.w	r3, [sp, #468]	; 0x1d4
 800d56a:	9318      	str	r3, [sp, #96]	; 0x60
 800d56c:	f89d 31d8 	ldrb.w	r3, [sp, #472]	; 0x1d8
 800d570:	9315      	str	r3, [sp, #84]	; 0x54
 800d572:	f89d 31dc 	ldrb.w	r3, [sp, #476]	; 0x1dc
 800d576:	9319      	str	r3, [sp, #100]	; 0x64
 800d578:	f89d 31e0 	ldrb.w	r3, [sp, #480]	; 0x1e0
 800d57c:	934d      	str	r3, [sp, #308]	; 0x134
 800d57e:	f89d 31f4 	ldrb.w	r3, [sp, #500]	; 0x1f4
 800d582:	932f      	str	r3, [sp, #188]	; 0xbc
 800d584:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800d586:	9317      	str	r3, [sp, #92]	; 0x5c
 800d588:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800d58a:	9316      	str	r3, [sp, #88]	; 0x58
 800d58c:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800d58e:	9331      	str	r3, [sp, #196]	; 0xc4
 800d590:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 800d592:	933a      	str	r3, [sp, #232]	; 0xe8
 800d594:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800d596:	9340      	str	r3, [sp, #256]	; 0x100
 800d598:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 800d59a:	9342      	str	r3, [sp, #264]	; 0x108
 800d59c:	f89d 31e4 	ldrb.w	r3, [sp, #484]	; 0x1e4
 800d5a0:	931e      	str	r3, [sp, #120]	; 0x78
 800d5a2:	f89d 31e5 	ldrb.w	r3, [sp, #485]	; 0x1e5
 800d5a6:	931f      	str	r3, [sp, #124]	; 0x7c
 800d5a8:	e9dd 6772 	ldrd	r6, r7, [sp, #456]	; 0x1c8
 800d5ac:	f89d 31e6 	ldrb.w	r3, [sp, #486]	; 0x1e6
 800d5b0:	9320      	str	r3, [sp, #128]	; 0x80
 800d5b2:	f89d 31e7 	ldrb.w	r3, [sp, #487]	; 0x1e7
 800d5b6:	9321      	str	r3, [sp, #132]	; 0x84
 800d5b8:	f89d 31e8 	ldrb.w	r3, [sp, #488]	; 0x1e8
 800d5bc:	9332      	str	r3, [sp, #200]	; 0xc8
 800d5be:	f89d 31e9 	ldrb.w	r3, [sp, #489]	; 0x1e9
 800d5c2:	9333      	str	r3, [sp, #204]	; 0xcc
 800d5c4:	f89d 31ea 	ldrb.w	r3, [sp, #490]	; 0x1ea
 800d5c8:	931c      	str	r3, [sp, #112]	; 0x70
 800d5ca:	f89d 31eb 	ldrb.w	r3, [sp, #491]	; 0x1eb
 800d5ce:	931d      	str	r3, [sp, #116]	; 0x74
 800d5d0:	f89d 31ec 	ldrb.w	r3, [sp, #492]	; 0x1ec
 800d5d4:	9334      	str	r3, [sp, #208]	; 0xd0
 800d5d6:	f89d 31ed 	ldrb.w	r3, [sp, #493]	; 0x1ed
 800d5da:	9335      	str	r3, [sp, #212]	; 0xd4
 800d5dc:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
 800d5e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d5e2:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 800d5e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d5e8:	f89d 31f0 	ldrb.w	r3, [sp, #496]	; 0x1f0
 800d5ec:	9322      	str	r3, [sp, #136]	; 0x88
 800d5ee:	f89d 31f1 	ldrb.w	r3, [sp, #497]	; 0x1f1
 800d5f2:	9323      	str	r3, [sp, #140]	; 0x8c
 800d5f4:	f89d 31f2 	ldrb.w	r3, [sp, #498]	; 0x1f2
 800d5f8:	9324      	str	r3, [sp, #144]	; 0x90
 800d5fa:	f89d 31f3 	ldrb.w	r3, [sp, #499]	; 0x1f3
 800d5fe:	9325      	str	r3, [sp, #148]	; 0x94
 800d600:	2300      	movs	r3, #0
 800d602:	e9cd 335a 	strd	r3, r3, [sp, #360]	; 0x168
 800d606:	4690      	mov	r8, r2
 800d608:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d60a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d60c:	1a9b      	subs	r3, r3, r2
 800d60e:	9330      	str	r3, [sp, #192]	; 0xc0
 800d610:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d612:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
 800d616:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d618:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 800d61c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d61e:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
 800d622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d624:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
 800d628:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800d62a:	f88d 313c 	strb.w	r3, [sp, #316]	; 0x13c
 800d62e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800d630:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
 800d634:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d636:	f88d 313e 	strb.w	r3, [sp, #318]	; 0x13e
 800d63a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d63c:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
 800d640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d642:	f88d 3140 	strb.w	r3, [sp, #320]	; 0x140
 800d646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d648:	f88d 3141 	strb.w	r3, [sp, #321]	; 0x141
 800d64c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d64e:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
 800d652:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d654:	f88d 3143 	strb.w	r3, [sp, #323]	; 0x143
 800d658:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800d65a:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 800d65e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800d660:	f88d 3145 	strb.w	r3, [sp, #325]	; 0x145
 800d664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d666:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
 800d66a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d66c:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800d670:	ee08 0a10 	vmov	s16, r0
 800d674:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800d678:	ee08 1a90 	vmov	s17, r1
 800d67c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800d680:	f7f2 ff67 	bl	8000552 <EwPackColor>
 800d684:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800d688:	4605      	mov	r5, r0
 800d68a:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 800d68e:	f7f2 ff60 	bl	8000552 <EwPackColor>
 800d692:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800d696:	9027      	str	r0, [sp, #156]	; 0x9c
 800d698:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800d69c:	f7f2 ff59 	bl	8000552 <EwPackColor>
 800d6a0:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	; 0x68
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 800d6aa:	f7f2 ff52 	bl	8000552 <EwPackColor>
 800d6ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dd5b      	ble.n	800d76c <EwDrawBitmapFrame+0x218>
 800d6b4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800d6b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d6b8:	eba3 0a02 	sub.w	sl, r3, r2
 800d6bc:	f1ba 0f00 	cmp.w	sl, #0
 800d6c0:	dd54      	ble.n	800d76c <EwDrawBitmapFrame+0x218>
 800d6c2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800d6c4:	eba6 0b03 	sub.w	fp, r6, r3
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	fb9b f6f2 	sdiv	r6, fp, r2
 800d6ce:	ebab 0346 	sub.w	r3, fp, r6, lsl #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	934a      	str	r3, [sp, #296]	; 0x128
 800d6d6:	dd49      	ble.n	800d76c <EwDrawBitmapFrame+0x218>
 800d6d8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800d6da:	1afb      	subs	r3, r7, r3
 800d6dc:	fb93 f7f2 	sdiv	r7, r3, r2
 800d6e0:	eba3 0247 	sub.w	r2, r3, r7, lsl #1
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	9246      	str	r2, [sp, #280]	; 0x118
 800d6e8:	dd40      	ble.n	800d76c <EwDrawBitmapFrame+0x218>
 800d6ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	f000 854f 	beq.w	800e190 <EwDrawBitmapFrame+0xc3c>
 800d6f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d6f4:	2a00      	cmp	r2, #0
 800d6f6:	f000 8564 	beq.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d6fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	f000 8560 	beq.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d702:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d704:	2a00      	cmp	r2, #0
 800d706:	f000 855c 	beq.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d70a:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	f000 8558 	beq.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d712:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d714:	4593      	cmp	fp, r2
 800d716:	f040 8554 	bne.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d71a:	4553      	cmp	r3, sl
 800d71c:	f040 8551 	bne.w	800e1c2 <EwDrawBitmapFrame+0xc6e>
 800d720:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800d722:	9312      	str	r3, [sp, #72]	; 0x48
 800d724:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800d726:	9311      	str	r3, [sp, #68]	; 0x44
 800d728:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800d72a:	9310      	str	r3, [sp, #64]	; 0x40
 800d72c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800d72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d730:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 800d732:	930e      	str	r3, [sp, #56]	; 0x38
 800d734:	aa5c      	add	r2, sp, #368	; 0x170
 800d736:	e912 0003 	ldmdb	r2, {r0, r1}
 800d73a:	ab0c      	add	r3, sp, #48	; 0x30
 800d73c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d740:	ab70      	add	r3, sp, #448	; 0x1c0
 800d742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d744:	ac08      	add	r4, sp, #32
 800d746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d74a:	ab6c      	add	r3, sp, #432	; 0x1b0
 800d74c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d74e:	ac04      	add	r4, sp, #16
 800d750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d754:	ab68      	add	r3, sp, #416	; 0x1a0
 800d756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d758:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d75c:	ee18 1a90 	vmov	r1, s17
 800d760:	ee18 0a10 	vmov	r0, s16
 800d764:	464b      	mov	r3, r9
 800d766:	4642      	mov	r2, r8
 800d768:	f7fe f98a 	bl	800ba80 <EwTileBitmap>
 800d76c:	b05d      	add	sp, #372	; 0x174
 800d76e:	ecbd 8b02 	vpop	{d8}
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d776:	e9dd 0179 	ldrd	r0, r1, [sp, #484]	; 0x1e4
 800d77a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d77c:	4632      	mov	r2, r6
 800d77e:	f7f8 fd5d 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d782:	b2c3      	uxtb	r3, r0
 800d784:	9327      	str	r3, [sp, #156]	; 0x9c
 800d786:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d78a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d78c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d790:	9329      	str	r3, [sp, #164]	; 0xa4
 800d792:	0e03      	lsrs	r3, r0, #24
 800d794:	932a      	str	r3, [sp, #168]	; 0xa8
 800d796:	e9dd 107b 	ldrd	r1, r0, [sp, #492]	; 0x1ec
 800d79a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d79c:	4632      	mov	r2, r6
 800d79e:	f7f8 fd4d 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d7a2:	b2c3      	uxtb	r3, r0
 800d7a4:	932b      	str	r3, [sp, #172]	; 0xac
 800d7a6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d7aa:	932c      	str	r3, [sp, #176]	; 0xb0
 800d7ac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d7b0:	932d      	str	r3, [sp, #180]	; 0xb4
 800d7b2:	0e03      	lsrs	r3, r0, #24
 800d7b4:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f000 80f7 	beq.w	800d9ac <EwDrawBitmapFrame+0x458>
 800d7be:	e9dd 1079 	ldrd	r1, r0, [sp, #484]	; 0x1e4
 800d7c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d7c4:	4632      	mov	r2, r6
 800d7c6:	f7f8 fd39 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d7ca:	b2c3      	uxtb	r3, r0
 800d7cc:	9336      	str	r3, [sp, #216]	; 0xd8
 800d7ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d7d2:	9337      	str	r3, [sp, #220]	; 0xdc
 800d7d4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d7d8:	933b      	str	r3, [sp, #236]	; 0xec
 800d7da:	0e04      	lsrs	r4, r0, #24
 800d7dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d7de:	e9dd 017b 	ldrd	r0, r1, [sp, #492]	; 0x1ec
 800d7e2:	4632      	mov	r2, r6
 800d7e4:	f7f8 fd2a 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d7e8:	b2c3      	uxtb	r3, r0
 800d7ea:	9338      	str	r3, [sp, #224]	; 0xe0
 800d7ec:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d7f0:	9339      	str	r3, [sp, #228]	; 0xe4
 800d7f2:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 800d7f6:	0e05      	lsrs	r5, r0, #24
 800d7f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 80e4 	beq.w	800d9c8 <EwDrawBitmapFrame+0x474>
 800d800:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 800d802:	9879      	ldr	r0, [sp, #484]	; 0x1e4
 800d804:	4653      	mov	r3, sl
 800d806:	463a      	mov	r2, r7
 800d808:	f7f8 fd18 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d80c:	b2c3      	uxtb	r3, r0
 800d80e:	931e      	str	r3, [sp, #120]	; 0x78
 800d810:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d814:	931f      	str	r3, [sp, #124]	; 0x7c
 800d816:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d81a:	9320      	str	r3, [sp, #128]	; 0x80
 800d81c:	0e03      	lsrs	r3, r0, #24
 800d81e:	9321      	str	r3, [sp, #132]	; 0x84
 800d820:	e9dd 017a 	ldrd	r0, r1, [sp, #488]	; 0x1e8
 800d824:	4653      	mov	r3, sl
 800d826:	463a      	mov	r2, r7
 800d828:	f7f8 fd08 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d82c:	b2c3      	uxtb	r3, r0
 800d82e:	9332      	str	r3, [sp, #200]	; 0xc8
 800d830:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d834:	9333      	str	r3, [sp, #204]	; 0xcc
 800d836:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d83a:	933c      	str	r3, [sp, #240]	; 0xf0
 800d83c:	0e03      	lsrs	r3, r0, #24
 800d83e:	933d      	str	r3, [sp, #244]	; 0xf4
 800d840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d842:	2b00      	cmp	r3, #0
 800d844:	f000 80c5 	beq.w	800d9d2 <EwDrawBitmapFrame+0x47e>
 800d848:	9979      	ldr	r1, [sp, #484]	; 0x1e4
 800d84a:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 800d84c:	4653      	mov	r3, sl
 800d84e:	463a      	mov	r2, r7
 800d850:	f7f8 fcf4 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d854:	b2c3      	uxtb	r3, r0
 800d856:	9322      	str	r3, [sp, #136]	; 0x88
 800d858:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d85c:	9323      	str	r3, [sp, #140]	; 0x8c
 800d85e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d862:	9324      	str	r3, [sp, #144]	; 0x90
 800d864:	0e03      	lsrs	r3, r0, #24
 800d866:	9325      	str	r3, [sp, #148]	; 0x94
 800d868:	e9dd 107a 	ldrd	r1, r0, [sp, #488]	; 0x1e8
 800d86c:	4653      	mov	r3, sl
 800d86e:	463a      	mov	r2, r7
 800d870:	f7f8 fce4 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d874:	b2c3      	uxtb	r3, r0
 800d876:	9334      	str	r3, [sp, #208]	; 0xd0
 800d878:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d87c:	9335      	str	r3, [sp, #212]	; 0xd4
 800d87e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d882:	933e      	str	r3, [sp, #248]	; 0xf8
 800d884:	0e03      	lsrs	r3, r0, #24
 800d886:	933f      	str	r3, [sp, #252]	; 0xfc
 800d888:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 846a 	beq.w	800e164 <EwDrawBitmapFrame+0xc10>
 800d890:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d892:	2b00      	cmp	r3, #0
 800d894:	f040 8477 	bne.w	800e186 <EwDrawBitmapFrame+0xc32>
 800d898:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d89a:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
 800d89e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d8a0:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 800d8a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d8a6:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
 800d8aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d8ac:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
 800d8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8b2:	b173      	cbz	r3, 800d8d2 <EwDrawBitmapFrame+0x37e>
 800d8b4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800d8b6:	f88d 313c 	strb.w	r3, [sp, #316]	; 0x13c
 800d8ba:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d8bc:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
 800d8c0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800d8c2:	f88d 313e 	strb.w	r3, [sp, #318]	; 0x13e
 800d8c6:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
 800d8ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 8451 	beq.w	800e174 <EwDrawBitmapFrame+0xc20>
 800d8d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f040 843b 	bne.w	800e150 <EwDrawBitmapFrame+0xbfc>
 800d8da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d8dc:	f88d 3140 	strb.w	r3, [sp, #320]	; 0x140
 800d8e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d8e2:	f88d 3141 	strb.w	r3, [sp, #321]	; 0x141
 800d8e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d8e8:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
 800d8ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d8ee:	f88d 3143 	strb.w	r3, [sp, #323]	; 0x143
 800d8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 848f 	beq.w	800e218 <EwDrawBitmapFrame+0xcc4>
 800d8fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800d8fc:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 800d900:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800d902:	f88d 3145 	strb.w	r3, [sp, #325]	; 0x145
 800d906:	f88d b146 	strb.w	fp, [sp, #326]	; 0x146
 800d90a:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 800d90e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d910:	2b00      	cmp	r3, #0
 800d912:	d041      	beq.n	800d998 <EwDrawBitmapFrame+0x444>
 800d914:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d916:	b1f3      	cbz	r3, 800d956 <EwDrawBitmapFrame+0x402>
 800d918:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d91a:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
 800d91e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d920:	f88d 3149 	strb.w	r3, [sp, #329]	; 0x149
 800d924:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d926:	f88d 314a 	strb.w	r3, [sp, #330]	; 0x14a
 800d92a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d92c:	f88d 314b 	strb.w	r3, [sp, #331]	; 0x14b
 800d930:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d932:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
 800d936:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d938:	f88d 3151 	strb.w	r3, [sp, #337]	; 0x151
 800d93c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d93e:	f88d 3152 	strb.w	r3, [sp, #338]	; 0x152
 800d942:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d944:	f88d 3153 	strb.w	r3, [sp, #339]	; 0x153
 800d948:	9954      	ldr	r1, [sp, #336]	; 0x150
 800d94a:	9852      	ldr	r0, [sp, #328]	; 0x148
 800d94c:	4653      	mov	r3, sl
 800d94e:	463a      	mov	r2, r7
 800d950:	f7f8 fc74 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d954:	904e      	str	r0, [sp, #312]	; 0x138
 800d956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d958:	b1f3      	cbz	r3, 800d998 <EwDrawBitmapFrame+0x444>
 800d95a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d95c:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
 800d960:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d962:	f88d 3151 	strb.w	r3, [sp, #337]	; 0x151
 800d966:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d968:	f88d 3152 	strb.w	r3, [sp, #338]	; 0x152
 800d96c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d96e:	f88d 3153 	strb.w	r3, [sp, #339]	; 0x153
 800d972:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d974:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
 800d978:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d97a:	f88d 3149 	strb.w	r3, [sp, #329]	; 0x149
 800d97e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d980:	f88d 314a 	strb.w	r3, [sp, #330]	; 0x14a
 800d984:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d986:	f88d 314b 	strb.w	r3, [sp, #331]	; 0x14b
 800d98a:	9952      	ldr	r1, [sp, #328]	; 0x148
 800d98c:	9854      	ldr	r0, [sp, #336]	; 0x150
 800d98e:	4653      	mov	r3, sl
 800d990:	463a      	mov	r2, r7
 800d992:	f7f8 fc53 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800d996:	9050      	str	r0, [sp, #320]	; 0x140
 800d998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d156      	bne.n	800da4c <EwDrawBitmapFrame+0x4f8>
 800d99e:	e9cd 5b1a 	strd	r5, fp, [sp, #104]	; 0x68
 800d9a2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800d9a4:	941d      	str	r4, [sp, #116]	; 0x74
 800d9a6:	931c      	str	r3, [sp, #112]	; 0x70
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e09a      	b.n	800dae2 <EwDrawBitmapFrame+0x58e>
 800d9ac:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800d9ae:	9339      	str	r3, [sp, #228]	; 0xe4
 800d9b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800d9b2:	9338      	str	r3, [sp, #224]	; 0xe0
 800d9b4:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
 800d9b8:	933b      	str	r3, [sp, #236]	; 0xec
 800d9ba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800d9bc:	9337      	str	r3, [sp, #220]	; 0xdc
 800d9be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800d9c0:	9336      	str	r3, [sp, #216]	; 0xd8
 800d9c2:	e9dd 5b1a 	ldrd	r5, fp, [sp, #104]	; 0x68
 800d9c6:	e717      	b.n	800d7f8 <EwDrawBitmapFrame+0x2a4>
 800d9c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9ca:	933d      	str	r3, [sp, #244]	; 0xf4
 800d9cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d9ce:	933c      	str	r3, [sp, #240]	; 0xf0
 800d9d0:	e736      	b.n	800d840 <EwDrawBitmapFrame+0x2ec>
 800d9d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d9d4:	933f      	str	r3, [sp, #252]	; 0xfc
 800d9d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9d8:	933e      	str	r3, [sp, #248]	; 0xf8
 800d9da:	e755      	b.n	800d888 <EwDrawBitmapFrame+0x334>
 800d9dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9de:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
 800d9e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9e4:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 800d9e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9ea:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
 800d9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9f0:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
 800d9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f040 83bc 	bne.w	800e174 <EwDrawBitmapFrame+0xc20>
 800d9fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800d9fe:	f88d 313c 	strb.w	r3, [sp, #316]	; 0x13c
 800da02:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800da04:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
 800da08:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800da0a:	f88d 313e 	strb.w	r3, [sp, #318]	; 0x13e
 800da0e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800da10:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
 800da14:	e759      	b.n	800d8ca <EwDrawBitmapFrame+0x376>
 800da16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da18:	f88d 3140 	strb.w	r3, [sp, #320]	; 0x140
 800da1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800da1e:	f88d 3141 	strb.w	r3, [sp, #321]	; 0x141
 800da22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800da24:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
 800da28:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800da2a:	f88d 3143 	strb.w	r3, [sp, #323]	; 0x143
 800da2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da30:	b963      	cbnz	r3, 800da4c <EwDrawBitmapFrame+0x4f8>
 800da32:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800da34:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 800da38:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800da3a:	f88d 3145 	strb.w	r3, [sp, #325]	; 0x145
 800da3e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800da40:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
 800da44:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800da46:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800da4a:	e760      	b.n	800d90e <EwDrawBitmapFrame+0x3ba>
 800da4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da4e:	b1db      	cbz	r3, 800da88 <EwDrawBitmapFrame+0x534>
 800da50:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800da52:	f88d 314c 	strb.w	r3, [sp, #332]	; 0x14c
 800da56:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800da58:	f88d 314d 	strb.w	r3, [sp, #333]	; 0x14d
 800da5c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800da5e:	f88d 314e 	strb.w	r3, [sp, #334]	; 0x14e
 800da62:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800da64:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
 800da68:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800da6a:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
 800da6e:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 800da72:	f88d b156 	strb.w	fp, [sp, #342]	; 0x156
 800da76:	f88d 5157 	strb.w	r5, [sp, #343]	; 0x157
 800da7a:	9955      	ldr	r1, [sp, #340]	; 0x154
 800da7c:	9853      	ldr	r0, [sp, #332]	; 0x14c
 800da7e:	4653      	mov	r3, sl
 800da80:	463a      	mov	r2, r7
 800da82:	f7f8 fbdb 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800da86:	904f      	str	r0, [sp, #316]	; 0x13c
 800da88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da8a:	b1db      	cbz	r3, 800dac4 <EwDrawBitmapFrame+0x570>
 800da8c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800da8e:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
 800da92:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800da94:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
 800da98:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800da9a:	f88d 314c 	strb.w	r3, [sp, #332]	; 0x14c
 800da9e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800daa0:	f88d 314d 	strb.w	r3, [sp, #333]	; 0x14d
 800daa4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800daa6:	f88d 314e 	strb.w	r3, [sp, #334]	; 0x14e
 800daaa:	f88d b156 	strb.w	fp, [sp, #342]	; 0x156
 800daae:	f88d 5157 	strb.w	r5, [sp, #343]	; 0x157
 800dab2:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 800dab6:	9953      	ldr	r1, [sp, #332]	; 0x14c
 800dab8:	9855      	ldr	r0, [sp, #340]	; 0x154
 800daba:	4653      	mov	r3, sl
 800dabc:	463a      	mov	r2, r7
 800dabe:	f7f8 fbbd 	bl	800623c <EwScreenWarpRGB565RowFilterSolidBlend+0x3c>
 800dac2:	9051      	str	r0, [sp, #324]	; 0x144
 800dac4:	e9cd 5b1a 	strd	r5, fp, [sp, #104]	; 0x68
 800dac8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800daca:	941d      	str	r4, [sp, #116]	; 0x74
 800dacc:	931c      	str	r3, [sp, #112]	; 0x70
 800dace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f43f af69 	beq.w	800d9a8 <EwDrawBitmapFrame+0x454>
 800dad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f47f af65 	bne.w	800d9a8 <EwDrawBitmapFrame+0x454>
 800dade:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800dae0:	1af3      	subs	r3, r6, r3
 800dae2:	9349      	str	r3, [sp, #292]	; 0x124
 800dae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 832e 	beq.w	800e148 <EwDrawBitmapFrame+0xbf4>
 800daec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f040 832c 	bne.w	800e14c <EwDrawBitmapFrame+0xbf8>
 800daf4:	eba7 030a 	sub.w	r3, r7, sl
 800daf8:	9345      	str	r3, [sp, #276]	; 0x114
 800dafa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800dafc:	18f3      	adds	r3, r6, r3
 800dafe:	933b      	str	r3, [sp, #236]	; 0xec
 800db00:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800db02:	18fd      	adds	r5, r7, r3
 800db04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db06:	18f3      	adds	r3, r6, r3
 800db08:	934b      	str	r3, [sp, #300]	; 0x12c
 800db0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db0c:	18fb      	adds	r3, r7, r3
 800db0e:	9347      	str	r3, [sp, #284]	; 0x11c
 800db10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db12:	2b00      	cmp	r3, #0
 800db14:	d047      	beq.n	800dba6 <EwDrawBitmapFrame+0x652>
 800db16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d044      	beq.n	800dba6 <EwDrawBitmapFrame+0x652>
 800db1c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800db1e:	936e      	str	r3, [sp, #440]	; 0x1b8
 800db20:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800db22:	936f      	str	r3, [sp, #444]	; 0x1bc
 800db24:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800db26:	e9cd 3572 	strd	r3, r5, [sp, #456]	; 0x1c8
 800db2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800db2c:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
 800db30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800db32:	f88d 3149 	strb.w	r3, [sp, #329]	; 0x149
 800db36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800db38:	f88d 314a 	strb.w	r3, [sp, #330]	; 0x14a
 800db3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800db3e:	f88d 314b 	strb.w	r3, [sp, #331]	; 0x14b
 800db42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db44:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
 800db48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db4a:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
 800db4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db50:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
 800db54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db56:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
 800db5a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800db5c:	9312      	str	r3, [sp, #72]	; 0x48
 800db5e:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800db60:	9311      	str	r3, [sp, #68]	; 0x44
 800db62:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800db64:	9310      	str	r3, [sp, #64]	; 0x40
 800db66:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800db68:	930f      	str	r3, [sp, #60]	; 0x3c
 800db6a:	aa5c      	add	r2, sp, #368	; 0x170
 800db6c:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 800db6e:	930e      	str	r3, [sp, #56]	; 0x38
 800db70:	e912 0003 	ldmdb	r2, {r0, r1}
 800db74:	ab0c      	add	r3, sp, #48	; 0x30
 800db76:	e883 0003 	stmia.w	r3, {r0, r1}
 800db7a:	ab70      	add	r3, sp, #448	; 0x1c0
 800db7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db7e:	ac08      	add	r4, sp, #32
 800db80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db84:	ab6c      	add	r3, sp, #432	; 0x1b0
 800db86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db88:	ac04      	add	r4, sp, #16
 800db8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db8e:	ab68      	add	r3, sp, #416	; 0x1a0
 800db90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800db96:	ee18 1a90 	vmov	r1, s17
 800db9a:	ee18 0a10 	vmov	r0, s16
 800db9e:	464b      	mov	r3, r9
 800dba0:	4642      	mov	r2, r8
 800dba2:	f7fd ff6d 	bl	800ba80 <EwTileBitmap>
 800dba6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800dba8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800dbaa:	1b9c      	subs	r4, r3, r6
 800dbac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbae:	18e3      	adds	r3, r4, r3
 800dbb0:	9348      	str	r3, [sp, #288]	; 0x120
 800dbb2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800dbb4:	18f3      	adds	r3, r6, r3
 800dbb6:	eb03 0b02 	add.w	fp, r3, r2
 800dbba:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800dbbc:	18d3      	adds	r3, r2, r3
 800dbbe:	9341      	str	r3, [sp, #260]	; 0x104
 800dbc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d04c      	beq.n	800dc60 <EwDrawBitmapFrame+0x70c>
 800dbc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d049      	beq.n	800dc60 <EwDrawBitmapFrame+0x70c>
 800dbcc:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800dbce:	936c      	str	r3, [sp, #432]	; 0x1b0
 800dbd0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800dbd2:	936e      	str	r3, [sp, #440]	; 0x1b8
 800dbd4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dbd6:	e9cd 3b6f 	strd	r3, fp, [sp, #444]	; 0x1bc
 800dbda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dbdc:	e9cd 3572 	strd	r3, r5, [sp, #456]	; 0x1c8
 800dbe0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800dbe2:	f88d 314c 	strb.w	r3, [sp, #332]	; 0x14c
 800dbe6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800dbe8:	f88d 314d 	strb.w	r3, [sp, #333]	; 0x14d
 800dbec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dbee:	f88d 314e 	strb.w	r3, [sp, #334]	; 0x14e
 800dbf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbf4:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 800dbf8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800dbfa:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
 800dbfe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800dc00:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
 800dc04:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800dc06:	f88d 315e 	strb.w	r3, [sp, #350]	; 0x15e
 800dc0a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800dc0c:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
 800dc10:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800dc12:	9312      	str	r3, [sp, #72]	; 0x48
 800dc14:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800dc16:	9311      	str	r3, [sp, #68]	; 0x44
 800dc18:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800dc1a:	9310      	str	r3, [sp, #64]	; 0x40
 800dc1c:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 800dc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc20:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800dc22:	930e      	str	r3, [sp, #56]	; 0x38
 800dc24:	aa5c      	add	r2, sp, #368	; 0x170
 800dc26:	e912 0003 	ldmdb	r2, {r0, r1}
 800dc2a:	ab0c      	add	r3, sp, #48	; 0x30
 800dc2c:	e883 0003 	stmia.w	r3, {r0, r1}
 800dc30:	ab70      	add	r3, sp, #448	; 0x1c0
 800dc32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc34:	f10d 0c20 	add.w	ip, sp, #32
 800dc38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc3c:	ab6c      	add	r3, sp, #432	; 0x1b0
 800dc3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc40:	f10d 0c10 	add.w	ip, sp, #16
 800dc44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc48:	ab68      	add	r3, sp, #416	; 0x1a0
 800dc4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc50:	ee18 1a90 	vmov	r1, s17
 800dc54:	ee18 0a10 	vmov	r0, s16
 800dc58:	464b      	mov	r3, r9
 800dc5a:	4642      	mov	r2, r8
 800dc5c:	f7fd ff10 	bl	800ba80 <EwTileBitmap>
 800dc60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc62:	ebaa 0307 	sub.w	r3, sl, r7
 800dc66:	934c      	str	r3, [sp, #304]	; 0x130
 800dc68:	4413      	add	r3, r2
 800dc6a:	9344      	str	r3, [sp, #272]	; 0x110
 800dc6c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800dc6e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800dc70:	18fb      	adds	r3, r7, r3
 800dc72:	441a      	add	r2, r3
 800dc74:	18eb      	adds	r3, r5, r3
 800dc76:	9343      	str	r3, [sp, #268]	; 0x10c
 800dc78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc7a:	9242      	str	r2, [sp, #264]	; 0x108
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d04e      	beq.n	800dd1e <EwDrawBitmapFrame+0x7ca>
 800dc80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d04b      	beq.n	800dd1e <EwDrawBitmapFrame+0x7ca>
 800dc86:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800dc88:	936c      	str	r3, [sp, #432]	; 0x1b0
 800dc8a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800dc8c:	936d      	str	r3, [sp, #436]	; 0x1b4
 800dc8e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800dc90:	936e      	str	r3, [sp, #440]	; 0x1b8
 800dc92:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800dc94:	9271      	str	r2, [sp, #452]	; 0x1c4
 800dc96:	e9cd 3b6f 	strd	r3, fp, [sp, #444]	; 0x1bc
 800dc9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dc9c:	9372      	str	r3, [sp, #456]	; 0x1c8
 800dc9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dca0:	9373      	str	r3, [sp, #460]	; 0x1cc
 800dca2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800dca4:	f88d 3164 	strb.w	r3, [sp, #356]	; 0x164
 800dca8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800dcaa:	f88d 3165 	strb.w	r3, [sp, #357]	; 0x165
 800dcae:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800dcb0:	f88d 3166 	strb.w	r3, [sp, #358]	; 0x166
 800dcb4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800dcb6:	f88d 3167 	strb.w	r3, [sp, #359]	; 0x167
 800dcba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800dcbc:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
 800dcc0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800dcc2:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
 800dcc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcc8:	f88d 3156 	strb.w	r3, [sp, #342]	; 0x156
 800dccc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcce:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800dcd2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800dcd4:	9312      	str	r3, [sp, #72]	; 0x48
 800dcd6:	9b55      	ldr	r3, [sp, #340]	; 0x154
 800dcd8:	9311      	str	r3, [sp, #68]	; 0x44
 800dcda:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 800dcdc:	9310      	str	r3, [sp, #64]	; 0x40
 800dcde:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800dce0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dce2:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800dce4:	930e      	str	r3, [sp, #56]	; 0x38
 800dce6:	aa5c      	add	r2, sp, #368	; 0x170
 800dce8:	e912 0003 	ldmdb	r2, {r0, r1}
 800dcec:	ab0c      	add	r3, sp, #48	; 0x30
 800dcee:	e883 0003 	stmia.w	r3, {r0, r1}
 800dcf2:	ab70      	add	r3, sp, #448	; 0x1c0
 800dcf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcf6:	ad08      	add	r5, sp, #32
 800dcf8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dcfc:	ab6c      	add	r3, sp, #432	; 0x1b0
 800dcfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd00:	ad04      	add	r5, sp, #16
 800dd02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dd06:	ab68      	add	r3, sp, #416	; 0x1a0
 800dd08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dd0e:	ee18 1a90 	vmov	r1, s17
 800dd12:	ee18 0a10 	vmov	r0, s16
 800dd16:	464b      	mov	r3, r9
 800dd18:	4642      	mov	r2, r8
 800dd1a:	f7fd feb1 	bl	800ba80 <EwTileBitmap>
 800dd1e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800dd20:	1b1c      	subs	r4, r3, r4
 800dd22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d04f      	beq.n	800ddc8 <EwDrawBitmapFrame+0x874>
 800dd28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d04c      	beq.n	800ddc8 <EwDrawBitmapFrame+0x874>
 800dd2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd30:	936c      	str	r3, [sp, #432]	; 0x1b0
 800dd32:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800dd34:	e9cd 346d 	strd	r3, r4, [sp, #436]	; 0x1b4
 800dd38:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800dd3a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800dd3c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800dd3e:	9370      	str	r3, [sp, #448]	; 0x1c0
 800dd40:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800dd42:	9371      	str	r3, [sp, #452]	; 0x1c4
 800dd44:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800dd46:	9372      	str	r3, [sp, #456]	; 0x1c8
 800dd48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dd4a:	9373      	str	r3, [sp, #460]	; 0x1cc
 800dd4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd4e:	f88d 3160 	strb.w	r3, [sp, #352]	; 0x160
 800dd52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd54:	f88d 3161 	strb.w	r3, [sp, #353]	; 0x161
 800dd58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dd5a:	f88d 3162 	strb.w	r3, [sp, #354]	; 0x162
 800dd5e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dd60:	f88d 3163 	strb.w	r3, [sp, #355]	; 0x163
 800dd64:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800dd66:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
 800dd6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800dd6c:	f88d 3151 	strb.w	r3, [sp, #337]	; 0x151
 800dd70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd72:	f88d 3152 	strb.w	r3, [sp, #338]	; 0x152
 800dd76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd78:	f88d 3153 	strb.w	r3, [sp, #339]	; 0x153
 800dd7c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800dd7e:	9312      	str	r3, [sp, #72]	; 0x48
 800dd80:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800dd82:	9311      	str	r3, [sp, #68]	; 0x44
 800dd84:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800dd86:	9310      	str	r3, [sp, #64]	; 0x40
 800dd88:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800dd8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd8c:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800dd8e:	930e      	str	r3, [sp, #56]	; 0x38
 800dd90:	aa5c      	add	r2, sp, #368	; 0x170
 800dd92:	e912 0003 	ldmdb	r2, {r0, r1}
 800dd96:	ab0c      	add	r3, sp, #48	; 0x30
 800dd98:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd9c:	ab70      	add	r3, sp, #448	; 0x1c0
 800dd9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dda0:	ad08      	add	r5, sp, #32
 800dda2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dda6:	ab6c      	add	r3, sp, #432	; 0x1b0
 800dda8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddaa:	ad04      	add	r5, sp, #16
 800ddac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ddb0:	ab68      	add	r3, sp, #416	; 0x1a0
 800ddb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddb4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ddb8:	ee18 1a90 	vmov	r1, s17
 800ddbc:	ee18 0a10 	vmov	r0, s16
 800ddc0:	464b      	mov	r3, r9
 800ddc2:	4642      	mov	r2, r8
 800ddc4:	f7fd fe5c 	bl	800ba80 <EwTileBitmap>
 800ddc8:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800ddca:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ddcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddce:	1a9b      	subs	r3, r3, r2
 800ddd0:	9344      	str	r3, [sp, #272]	; 0x110
 800ddd2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ddd4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ddd6:	1bdd      	subs	r5, r3, r7
 800ddd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ddda:	935b      	str	r3, [sp, #364]	; 0x16c
 800dddc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ddde:	2900      	cmp	r1, #0
 800dde0:	bf18      	it	ne
 800dde2:	4613      	movne	r3, r2
 800dde4:	9316      	str	r3, [sp, #88]	; 0x58
 800dde6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dde8:	b113      	cbz	r3, 800ddf0 <EwDrawBitmapFrame+0x89c>
 800ddea:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ddec:	1bdb      	subs	r3, r3, r7
 800ddee:	933a      	str	r3, [sp, #232]	; 0xe8
 800ddf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d04b      	beq.n	800de8e <EwDrawBitmapFrame+0x93a>
 800ddf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddf8:	936c      	str	r3, [sp, #432]	; 0x1b0
 800ddfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ddfc:	e9cd 346d 	strd	r3, r4, [sp, #436]	; 0x1b4
 800de00:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800de02:	936f      	str	r3, [sp, #444]	; 0x1bc
 800de04:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800de06:	9370      	str	r3, [sp, #448]	; 0x1c0
 800de08:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800de0a:	9371      	str	r3, [sp, #452]	; 0x1c4
 800de0c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800de0e:	e9cd 3572 	strd	r3, r5, [sp, #456]	; 0x1c8
 800de12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de14:	f88d 3158 	strb.w	r3, [sp, #344]	; 0x158
 800de18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de1a:	f88d 3159 	strb.w	r3, [sp, #345]	; 0x159
 800de1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de20:	f88d 315a 	strb.w	r3, [sp, #346]	; 0x15a
 800de24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de26:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
 800de2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de2c:	f88d 3160 	strb.w	r3, [sp, #352]	; 0x160
 800de30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de32:	f88d 3161 	strb.w	r3, [sp, #353]	; 0x161
 800de36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de38:	f88d 3162 	strb.w	r3, [sp, #354]	; 0x162
 800de3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800de3e:	f88d 3163 	strb.w	r3, [sp, #355]	; 0x163
 800de42:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800de44:	9312      	str	r3, [sp, #72]	; 0x48
 800de46:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800de48:	9311      	str	r3, [sp, #68]	; 0x44
 800de4a:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800de4c:	9310      	str	r3, [sp, #64]	; 0x40
 800de4e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800de50:	930f      	str	r3, [sp, #60]	; 0x3c
 800de52:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800de54:	930e      	str	r3, [sp, #56]	; 0x38
 800de56:	aa5c      	add	r2, sp, #368	; 0x170
 800de58:	e912 0003 	ldmdb	r2, {r0, r1}
 800de5c:	ab0c      	add	r3, sp, #48	; 0x30
 800de5e:	e883 0003 	stmia.w	r3, {r0, r1}
 800de62:	ab70      	add	r3, sp, #448	; 0x1c0
 800de64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de66:	ac08      	add	r4, sp, #32
 800de68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800de6c:	ab6c      	add	r3, sp, #432	; 0x1b0
 800de6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de70:	ac04      	add	r4, sp, #16
 800de72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800de76:	ab68      	add	r3, sp, #416	; 0x1a0
 800de78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800de7e:	ee18 1a90 	vmov	r1, s17
 800de82:	ee18 0a10 	vmov	r0, s16
 800de86:	464b      	mov	r3, r9
 800de88:	4642      	mov	r2, r8
 800de8a:	f7fd fdf9 	bl	800ba80 <EwTileBitmap>
 800de8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de90:	2b00      	cmp	r3, #0
 800de92:	d04b      	beq.n	800df2c <EwDrawBitmapFrame+0x9d8>
 800de94:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800de96:	936c      	str	r3, [sp, #432]	; 0x1b0
 800de98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800de9a:	936d      	str	r3, [sp, #436]	; 0x1b4
 800de9c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800de9e:	936e      	str	r3, [sp, #440]	; 0x1b8
 800dea0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800dea2:	e9cd 3b6f 	strd	r3, fp, [sp, #444]	; 0x1bc
 800dea6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800dea8:	9371      	str	r3, [sp, #452]	; 0x1c4
 800deaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800deac:	e9cd 3572 	strd	r3, r5, [sp, #456]	; 0x1c8
 800deb0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800deb2:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
 800deb6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800deb8:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
 800debc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800debe:	f88d 315e 	strb.w	r3, [sp, #350]	; 0x15e
 800dec2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800dec4:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
 800dec8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800deca:	f88d 3164 	strb.w	r3, [sp, #356]	; 0x164
 800dece:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800ded0:	f88d 3165 	strb.w	r3, [sp, #357]	; 0x165
 800ded4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ded6:	f88d 3166 	strb.w	r3, [sp, #358]	; 0x166
 800deda:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800dedc:	f88d 3167 	strb.w	r3, [sp, #359]	; 0x167
 800dee0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800dee2:	9312      	str	r3, [sp, #72]	; 0x48
 800dee4:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800dee6:	9311      	str	r3, [sp, #68]	; 0x44
 800dee8:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800deea:	9310      	str	r3, [sp, #64]	; 0x40
 800deec:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800deee:	930f      	str	r3, [sp, #60]	; 0x3c
 800def0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800def2:	930e      	str	r3, [sp, #56]	; 0x38
 800def4:	aa5c      	add	r2, sp, #368	; 0x170
 800def6:	e912 0003 	ldmdb	r2, {r0, r1}
 800defa:	ab0c      	add	r3, sp, #48	; 0x30
 800defc:	e883 0003 	stmia.w	r3, {r0, r1}
 800df00:	ab70      	add	r3, sp, #448	; 0x1c0
 800df02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df04:	ac08      	add	r4, sp, #32
 800df06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df0a:	ab6c      	add	r3, sp, #432	; 0x1b0
 800df0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df0e:	ac04      	add	r4, sp, #16
 800df10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df14:	ab68      	add	r3, sp, #416	; 0x1a0
 800df16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df18:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df1c:	ee18 1a90 	vmov	r1, s17
 800df20:	ee18 0a10 	vmov	r0, s16
 800df24:	464b      	mov	r3, r9
 800df26:	4642      	mov	r2, r8
 800df28:	f7fd fdaa 	bl	800ba80 <EwTileBitmap>
 800df2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df2e:	b113      	cbz	r3, 800df36 <EwDrawBitmapFrame+0x9e2>
 800df30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df32:	1bdb      	subs	r3, r3, r7
 800df34:	9316      	str	r3, [sp, #88]	; 0x58
 800df36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df38:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 800df3a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800df3c:	18fb      	adds	r3, r7, r3
 800df3e:	931e      	str	r3, [sp, #120]	; 0x78
 800df40:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800df42:	ebab 0b03 	sub.w	fp, fp, r3
 800df46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df48:	1b9c      	subs	r4, r3, r6
 800df4a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800df4c:	935a      	str	r3, [sp, #360]	; 0x168
 800df4e:	2300      	movs	r3, #0
 800df50:	935b      	str	r3, [sp, #364]	; 0x16c
 800df52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df54:	2900      	cmp	r1, #0
 800df56:	bf18      	it	ne
 800df58:	4613      	movne	r3, r2
 800df5a:	9317      	str	r3, [sp, #92]	; 0x5c
 800df5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df5e:	b113      	cbz	r3, 800df66 <EwDrawBitmapFrame+0xa12>
 800df60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800df62:	1b9b      	subs	r3, r3, r6
 800df64:	9331      	str	r3, [sp, #196]	; 0xc4
 800df66:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d04f      	beq.n	800e00c <EwDrawBitmapFrame+0xab8>
 800df6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df6e:	936c      	str	r3, [sp, #432]	; 0x1b0
 800df70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df72:	936d      	str	r3, [sp, #436]	; 0x1b4
 800df74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800df76:	936e      	str	r3, [sp, #440]	; 0x1b8
 800df78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df7a:	e9cd 3b6f 	strd	r3, fp, [sp, #444]	; 0x1bc
 800df7e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800df80:	1bdb      	subs	r3, r3, r7
 800df82:	e9cd 3471 	strd	r3, r4, [sp, #452]	; 0x1c4
 800df86:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800df88:	1aeb      	subs	r3, r5, r3
 800df8a:	9373      	str	r3, [sp, #460]	; 0x1cc
 800df8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800df8e:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
 800df92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800df94:	f88d 3149 	strb.w	r3, [sp, #329]	; 0x149
 800df98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800df9a:	f88d 314a 	strb.w	r3, [sp, #330]	; 0x14a
 800df9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dfa0:	f88d 314b 	strb.w	r3, [sp, #331]	; 0x14b
 800dfa4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800dfa6:	f88d 314c 	strb.w	r3, [sp, #332]	; 0x14c
 800dfaa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800dfac:	f88d 314d 	strb.w	r3, [sp, #333]	; 0x14d
 800dfb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dfb2:	f88d 314e 	strb.w	r3, [sp, #334]	; 0x14e
 800dfb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dfb8:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 800dfbc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800dfbe:	9312      	str	r3, [sp, #72]	; 0x48
 800dfc0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800dfc2:	9311      	str	r3, [sp, #68]	; 0x44
 800dfc4:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800dfc6:	9310      	str	r3, [sp, #64]	; 0x40
 800dfc8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800dfca:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfcc:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800dfce:	930e      	str	r3, [sp, #56]	; 0x38
 800dfd0:	aa5c      	add	r2, sp, #368	; 0x170
 800dfd2:	e912 0003 	ldmdb	r2, {r0, r1}
 800dfd6:	ab0c      	add	r3, sp, #48	; 0x30
 800dfd8:	e883 0003 	stmia.w	r3, {r0, r1}
 800dfdc:	ab70      	add	r3, sp, #448	; 0x1c0
 800dfde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfe0:	f10d 0c20 	add.w	ip, sp, #32
 800dfe4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dfe8:	ab6c      	add	r3, sp, #432	; 0x1b0
 800dfea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfec:	f10d 0c10 	add.w	ip, sp, #16
 800dff0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dff4:	ab68      	add	r3, sp, #416	; 0x1a0
 800dff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dff8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dffc:	ee18 1a90 	vmov	r1, s17
 800e000:	ee18 0a10 	vmov	r0, s16
 800e004:	464b      	mov	r3, r9
 800e006:	4642      	mov	r2, r8
 800e008:	f7fd fd3a 	bl	800ba80 <EwTileBitmap>
 800e00c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e00e:	449a      	add	sl, r3
 800e010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e012:	2b00      	cmp	r3, #0
 800e014:	d04f      	beq.n	800e0b6 <EwDrawBitmapFrame+0xb62>
 800e016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e018:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e01a:	936c      	str	r3, [sp, #432]	; 0x1b0
 800e01c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800e01e:	f8cd b1c0 	str.w	fp, [sp, #448]	; 0x1c0
 800e022:	4413      	add	r3, r2
 800e024:	936d      	str	r3, [sp, #436]	; 0x1b4
 800e026:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800e028:	e9cd 3a6e 	strd	r3, sl, [sp, #440]	; 0x1b8
 800e02c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800e02e:	e9cd 3471 	strd	r3, r4, [sp, #452]	; 0x1c4
 800e032:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e034:	9373      	str	r3, [sp, #460]	; 0x1cc
 800e036:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e038:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
 800e03c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e03e:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
 800e042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e044:	f88d 3156 	strb.w	r3, [sp, #342]	; 0x156
 800e048:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e04a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800e04e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e050:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
 800e054:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e056:	f88d 3151 	strb.w	r3, [sp, #337]	; 0x151
 800e05a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e05c:	f88d 3152 	strb.w	r3, [sp, #338]	; 0x152
 800e060:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e062:	f88d 3153 	strb.w	r3, [sp, #339]	; 0x153
 800e066:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e068:	9312      	str	r3, [sp, #72]	; 0x48
 800e06a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800e06c:	9311      	str	r3, [sp, #68]	; 0x44
 800e06e:	9b55      	ldr	r3, [sp, #340]	; 0x154
 800e070:	9310      	str	r3, [sp, #64]	; 0x40
 800e072:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800e074:	930f      	str	r3, [sp, #60]	; 0x3c
 800e076:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800e078:	930e      	str	r3, [sp, #56]	; 0x38
 800e07a:	aa5c      	add	r2, sp, #368	; 0x170
 800e07c:	e912 0003 	ldmdb	r2, {r0, r1}
 800e080:	ab0c      	add	r3, sp, #48	; 0x30
 800e082:	e883 0003 	stmia.w	r3, {r0, r1}
 800e086:	ab70      	add	r3, sp, #448	; 0x1c0
 800e088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e08a:	f10d 0c20 	add.w	ip, sp, #32
 800e08e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e092:	ab6c      	add	r3, sp, #432	; 0x1b0
 800e094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e096:	f10d 0c10 	add.w	ip, sp, #16
 800e09a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e09e:	ab68      	add	r3, sp, #416	; 0x1a0
 800e0a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e0a6:	ee18 1a90 	vmov	r1, s17
 800e0aa:	ee18 0a10 	vmov	r0, s16
 800e0ae:	464b      	mov	r3, r9
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	f7fd fce5 	bl	800ba80 <EwTileBitmap>
 800e0b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0b8:	b113      	cbz	r3, 800e0c0 <EwDrawBitmapFrame+0xb6c>
 800e0ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0bc:	1b9b      	subs	r3, r3, r6
 800e0be:	9317      	str	r3, [sp, #92]	; 0x5c
 800e0c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800e0c4:	4413      	add	r3, r2
 800e0c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e0c8:	925b      	str	r2, [sp, #364]	; 0x16c
 800e0ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e0cc:	b112      	cbz	r2, 800e0d4 <EwDrawBitmapFrame+0xb80>
 800e0ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0d0:	4432      	add	r2, r6
 800e0d2:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0d8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	bf18      	it	ne
 800e0de:	460a      	movne	r2, r1
 800e0e0:	9216      	str	r2, [sp, #88]	; 0x58
 800e0e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e0e4:	b102      	cbz	r2, 800e0e8 <EwDrawBitmapFrame+0xb94>
 800e0e6:	1b9b      	subs	r3, r3, r6
 800e0e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0ea:	b10a      	cbz	r2, 800e0f0 <EwDrawBitmapFrame+0xb9c>
 800e0ec:	ebaa 0a07 	sub.w	sl, sl, r7
 800e0f0:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	f43f ab3a 	beq.w	800d76c <EwDrawBitmapFrame+0x218>
 800e0f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0fa:	926c      	str	r2, [sp, #432]	; 0x1b0
 800e0fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0fe:	9573      	str	r5, [sp, #460]	; 0x1cc
 800e100:	e9cd 236d 	strd	r2, r3, [sp, #436]	; 0x1b4
 800e104:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800e106:	e9cd 3471 	strd	r3, r4, [sp, #452]	; 0x1c4
 800e10a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e10c:	937a      	str	r3, [sp, #488]	; 0x1e8
 800e10e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800e110:	9379      	str	r3, [sp, #484]	; 0x1e4
 800e112:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800e114:	9378      	str	r3, [sp, #480]	; 0x1e0
 800e116:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800e118:	9377      	str	r3, [sp, #476]	; 0x1dc
 800e11a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800e11c:	9376      	str	r3, [sp, #472]	; 0x1d8
 800e11e:	aa5c      	add	r2, sp, #368	; 0x170
 800e120:	e912 0003 	ldmdb	r2, {r0, r1}
 800e124:	ab74      	add	r3, sp, #464	; 0x1d0
 800e126:	e9cd ab6f 	strd	sl, fp, [sp, #444]	; 0x1bc
 800e12a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e12e:	ee18 1a90 	vmov	r1, s17
 800e132:	ee18 0a10 	vmov	r0, s16
 800e136:	464b      	mov	r3, r9
 800e138:	4642      	mov	r2, r8
 800e13a:	b05d      	add	sp, #372	; 0x174
 800e13c:	ecbd 8b02 	vpop	{d8}
 800e140:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	f7fd bc9c 	b.w	800ba80 <EwTileBitmap>
 800e148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e14a:	e4d5      	b.n	800daf8 <EwDrawBitmapFrame+0x5a4>
 800e14c:	2300      	movs	r3, #0
 800e14e:	e4d3      	b.n	800daf8 <EwDrawBitmapFrame+0x5a4>
 800e150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e152:	2b00      	cmp	r3, #0
 800e154:	f43f ac6d 	beq.w	800da32 <EwDrawBitmapFrame+0x4de>
 800e158:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f43f abfd 	beq.w	800d95a <EwDrawBitmapFrame+0x406>
 800e160:	f7ff bbda 	b.w	800d918 <EwDrawBitmapFrame+0x3c4>
 800e164:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e166:	2b00      	cmp	r3, #0
 800e168:	f47f ac38 	bne.w	800d9dc <EwDrawBitmapFrame+0x488>
 800e16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f47f aba0 	bne.w	800d8b4 <EwDrawBitmapFrame+0x360>
 800e174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e176:	2b00      	cmp	r3, #0
 800e178:	f47f ac4d 	bne.w	800da16 <EwDrawBitmapFrame+0x4c2>
 800e17c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f47f abbb 	bne.w	800d8fa <EwDrawBitmapFrame+0x3a6>
 800e184:	e40b      	b.n	800d99e <EwDrawBitmapFrame+0x44a>
 800e186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f47f aba2 	bne.w	800d8d2 <EwDrawBitmapFrame+0x37e>
 800e18e:	e435      	b.n	800d9fc <EwDrawBitmapFrame+0x4a8>
 800e190:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e192:	429d      	cmp	r5, r3
 800e194:	d103      	bne.n	800e19e <EwDrawBitmapFrame+0xc4a>
 800e196:	4284      	cmp	r4, r0
 800e198:	d101      	bne.n	800e19e <EwDrawBitmapFrame+0xc4a>
 800e19a:	42a5      	cmp	r5, r4
 800e19c:	d01b      	beq.n	800e1d6 <EwDrawBitmapFrame+0xc82>
 800e19e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e1a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e1a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e1a8:	932c      	str	r3, [sp, #176]	; 0xb0
 800e1aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1ac:	932b      	str	r3, [sp, #172]	; 0xac
 800e1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b0:	932a      	str	r3, [sp, #168]	; 0xa8
 800e1b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1b4:	9329      	str	r3, [sp, #164]	; 0xa4
 800e1b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1b8:	9328      	str	r3, [sp, #160]	; 0xa0
 800e1ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1bc:	9327      	str	r3, [sp, #156]	; 0x9c
 800e1be:	f7ff bafa 	b.w	800d7b6 <EwDrawBitmapFrame+0x262>
 800e1c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e1c4:	429d      	cmp	r5, r3
 800e1c6:	f47f aad6 	bne.w	800d776 <EwDrawBitmapFrame+0x222>
 800e1ca:	4284      	cmp	r4, r0
 800e1cc:	f47f aad3 	bne.w	800d776 <EwDrawBitmapFrame+0x222>
 800e1d0:	42a5      	cmp	r5, r4
 800e1d2:	f47f aad0 	bne.w	800d776 <EwDrawBitmapFrame+0x222>
 800e1d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e1d8:	933f      	str	r3, [sp, #252]	; 0xfc
 800e1da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1dc:	933e      	str	r3, [sp, #248]	; 0xf8
 800e1de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1e0:	933d      	str	r3, [sp, #244]	; 0xf4
 800e1e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e1e4:	933c      	str	r3, [sp, #240]	; 0xf0
 800e1e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800e1e8:	9339      	str	r3, [sp, #228]	; 0xe4
 800e1ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800e1ec:	9338      	str	r3, [sp, #224]	; 0xe0
 800e1ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e1f0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e1f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e1f8:	932c      	str	r3, [sp, #176]	; 0xb0
 800e1fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1fc:	932b      	str	r3, [sp, #172]	; 0xac
 800e1fe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e200:	9337      	str	r3, [sp, #220]	; 0xdc
 800e202:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800e204:	9336      	str	r3, [sp, #216]	; 0xd8
 800e206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e208:	932a      	str	r3, [sp, #168]	; 0xa8
 800e20a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e20c:	9329      	str	r3, [sp, #164]	; 0xa4
 800e20e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e210:	9328      	str	r3, [sp, #160]	; 0xa0
 800e212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e214:	9327      	str	r3, [sp, #156]	; 0x9c
 800e216:	e45a      	b.n	800dace <EwDrawBitmapFrame+0x57a>
 800e218:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f47f ab7c 	bne.w	800d918 <EwDrawBitmapFrame+0x3c4>
 800e220:	f7ff bbbd 	b.w	800d99e <EwDrawBitmapFrame+0x44a>

0800e224 <EwIndexToColor>:
 800e224:	b082      	sub	sp, #8
 800e226:	2000      	movs	r0, #0
 800e228:	b002      	add	sp, #8
 800e22a:	4770      	bx	lr

0800e22c <EwColorToIndex>:
 800e22c:	b082      	sub	sp, #8
 800e22e:	2000      	movs	r0, #0
 800e230:	b002      	add	sp, #8
 800e232:	4770      	bx	lr

0800e234 <EwAllocUserColor>:
 800e234:	b082      	sub	sp, #8
 800e236:	2000      	movs	r0, #0
 800e238:	b002      	add	sp, #8
 800e23a:	4770      	bx	lr

0800e23c <EwFreeUserColor>:
 800e23c:	4770      	bx	lr

0800e23e <EwSetUserColor>:
 800e23e:	b082      	sub	sp, #8
 800e240:	b002      	add	sp, #8
 800e242:	4770      	bx	lr

0800e244 <EwFindUserColor>:
 800e244:	b082      	sub	sp, #8
 800e246:	2000      	movs	r0, #0
 800e248:	b002      	add	sp, #8
 800e24a:	4770      	bx	lr

0800e24c <EwGetOverlayArea>:
 800e24c:	4b20      	ldr	r3, [pc, #128]	; (800e2d0 <EwGetOverlayArea+0x84>)
 800e24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e250:	4615      	mov	r5, r2
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	4b1f      	ldr	r3, [pc, #124]	; (800e2d4 <EwGetOverlayArea+0x88>)
 800e256:	429a      	cmp	r2, r3
 800e258:	4604      	mov	r4, r0
 800e25a:	460e      	mov	r6, r1
 800e25c:	ea41 0705 	orr.w	r7, r1, r5
 800e260:	d103      	bne.n	800e26a <EwGetOverlayArea+0x1e>
 800e262:	2f00      	cmp	r7, #0
 800e264:	d02d      	beq.n	800e2c2 <EwGetOverlayArea+0x76>
 800e266:	2300      	movs	r3, #0
 800e268:	e014      	b.n	800e294 <EwGetOverlayArea+0x48>
 800e26a:	f01b faa7 	bl	80297bc <EwGetTicks>
 800e26e:	4b1a      	ldr	r3, [pc, #104]	; (800e2d8 <EwGetOverlayArea+0x8c>)
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	4290      	cmp	r0, r2
 800e274:	d803      	bhi.n	800e27e <EwGetOverlayArea+0x32>
 800e276:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d0f1      	beq.n	800e262 <EwGetOverlayArea+0x16>
 800e27e:	b17f      	cbz	r7, 800e2a0 <EwGetOverlayArea+0x54>
 800e280:	7e1a      	ldrb	r2, [r3, #24]
 800e282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	645a      	str	r2, [r3, #68]	; 0x44
 800e28a:	691a      	ldr	r2, [r3, #16]
 800e28c:	639a      	str	r2, [r3, #56]	; 0x38
 800e28e:	695a      	ldr	r2, [r3, #20]
 800e290:	63da      	str	r2, [r3, #60]	; 0x3c
 800e292:	2301      	movs	r3, #1
 800e294:	4a10      	ldr	r2, [pc, #64]	; (800e2d8 <EwGetOverlayArea+0x8c>)
 800e296:	2100      	movs	r1, #0
 800e298:	6351      	str	r1, [r2, #52]	; 0x34
 800e29a:	b186      	cbz	r6, 800e2be <EwGetOverlayArea+0x72>
 800e29c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e29e:	b16a      	cbz	r2, 800e2bc <EwGetOverlayArea+0x70>
 800e2a0:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <EwGetOverlayArea+0x8c>)
 800e2a2:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800e2a6:	f102 0333 	add.w	r3, r2, #51	; 0x33
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f101 0390 	add.w	r3, r1, #144	; 0x90
 800e2b2:	f00b fe0d 	bl	8019ed0 <EwNewRect>
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	b003      	add	sp, #12
 800e2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2bc:	b10d      	cbz	r5, 800e2c2 <EwGetOverlayArea+0x76>
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1ee      	bne.n	800e2a0 <EwGetOverlayArea+0x54>
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f022 fdd6 	bl	8030e78 <memset>
 800e2cc:	e7f3      	b.n	800e2b6 <EwGetOverlayArea+0x6a>
 800e2ce:	bf00      	nop
 800e2d0:	20000000 	.word	0x20000000
 800e2d4:	080072c5 	.word	0x080072c5
 800e2d8:	200000f4 	.word	0x200000f4

0800e2dc <EwCanDiscardSurface>:
 800e2dc:	4a37      	ldr	r2, [pc, #220]	; (800e3bc <EwCanDiscardSurface+0xe0>)
 800e2de:	4b38      	ldr	r3, [pc, #224]	; (800e3c0 <EwCanDiscardSurface+0xe4>)
 800e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	6858      	ldr	r0, [r3, #4]
 800e2e8:	4328      	orrs	r0, r5
 800e2ea:	d012      	beq.n	800e312 <EwCanDiscardSurface+0x36>
 800e2ec:	e9d2 7c37 	ldrd	r7, ip, [r2, #220]	; 0xdc
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	f8d2 60e4 	ldr.w	r6, [r2, #228]	; 0xe4
 800e2f6:	433b      	orrs	r3, r7
 800e2f8:	ea43 030c 	orr.w	r3, r3, ip
 800e2fc:	ea53 0006 	orrs.w	r0, r3, r6
 800e300:	d007      	beq.n	800e312 <EwCanDiscardSurface+0x36>
 800e302:	6963      	ldr	r3, [r4, #20]
 800e304:	b135      	cbz	r5, 800e314 <EwCanDiscardSurface+0x38>
 800e306:	6958      	ldr	r0, [r3, #20]
 800e308:	2801      	cmp	r0, #1
 800e30a:	dd3e      	ble.n	800e38a <EwCanDiscardSurface+0xae>
 800e30c:	68d8      	ldr	r0, [r3, #12]
 800e30e:	2800      	cmp	r0, #0
 800e310:	d150      	bne.n	800e3b4 <EwCanDiscardSurface+0xd8>
 800e312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e314:	b12f      	cbz	r7, 800e322 <EwCanDiscardSurface+0x46>
 800e316:	6958      	ldr	r0, [r3, #20]
 800e318:	2801      	cmp	r0, #1
 800e31a:	dd36      	ble.n	800e38a <EwCanDiscardSurface+0xae>
 800e31c:	68d8      	ldr	r0, [r3, #12]
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0f7      	beq.n	800e312 <EwCanDiscardSurface+0x36>
 800e322:	f1bc 0f00 	cmp.w	ip, #0
 800e326:	d003      	beq.n	800e330 <EwCanDiscardSurface+0x54>
 800e328:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e32a:	6a10      	ldr	r0, [r2, #32]
 800e32c:	4285      	cmp	r5, r0
 800e32e:	d02c      	beq.n	800e38a <EwCanDiscardSurface+0xae>
 800e330:	b136      	cbz	r6, 800e340 <EwCanDiscardSurface+0x64>
 800e332:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e334:	6a10      	ldr	r0, [r2, #32]
 800e336:	4285      	cmp	r5, r0
 800e338:	d027      	beq.n	800e38a <EwCanDiscardSurface+0xae>
 800e33a:	3801      	subs	r0, #1
 800e33c:	4285      	cmp	r5, r0
 800e33e:	d024      	beq.n	800e38a <EwCanDiscardSurface+0xae>
 800e340:	b9f1      	cbnz	r1, 800e380 <EwCanDiscardSurface+0xa4>
 800e342:	6958      	ldr	r0, [r3, #20]
 800e344:	2801      	cmp	r0, #1
 800e346:	dd20      	ble.n	800e38a <EwCanDiscardSurface+0xae>
 800e348:	68d8      	ldr	r0, [r3, #12]
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d0e1      	beq.n	800e312 <EwCanDiscardSurface+0x36>
 800e34e:	2100      	movs	r1, #0
 800e350:	691e      	ldr	r6, [r3, #16]
 800e352:	f04f 0c1c 	mov.w	ip, #28
 800e356:	468e      	mov	lr, r1
 800e358:	428e      	cmp	r6, r1
 800e35a:	dc18      	bgt.n	800e38e <EwCanDiscardSurface+0xb2>
 800e35c:	2100      	movs	r1, #0
 800e35e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e360:	460e      	mov	r6, r1
 800e362:	428d      	cmp	r5, r1
 800e364:	dc1d      	bgt.n	800e3a2 <EwCanDiscardSurface+0xc6>
 800e366:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800e36a:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 800e36e:	3301      	adds	r3, #1
 800e370:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e376:	440b      	add	r3, r1
 800e378:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800e37c:	2001      	movs	r0, #1
 800e37e:	e7c8      	b.n	800e312 <EwCanDiscardSurface+0x36>
 800e380:	2901      	cmp	r1, #1
 800e382:	d1e4      	bne.n	800e34e <EwCanDiscardSurface+0x72>
 800e384:	6959      	ldr	r1, [r3, #20]
 800e386:	2901      	cmp	r1, #1
 800e388:	dce1      	bgt.n	800e34e <EwCanDiscardSurface+0x72>
 800e38a:	2000      	movs	r0, #0
 800e38c:	e7c1      	b.n	800e312 <EwCanDiscardSurface+0x36>
 800e38e:	fb0c f001 	mul.w	r0, ip, r1
 800e392:	6a1d      	ldr	r5, [r3, #32]
 800e394:	582f      	ldr	r7, [r5, r0]
 800e396:	42a7      	cmp	r7, r4
 800e398:	bf08      	it	eq
 800e39a:	f845 e000 	streq.w	lr, [r5, r0]
 800e39e:	3101      	adds	r1, #1
 800e3a0:	e7da      	b.n	800e358 <EwCanDiscardSurface+0x7c>
 800e3a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e3a4:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 800e3a8:	42a7      	cmp	r7, r4
 800e3aa:	bf08      	it	eq
 800e3ac:	f840 6021 	streq.w	r6, [r0, r1, lsl #2]
 800e3b0:	3101      	adds	r1, #1
 800e3b2:	e7d6      	b.n	800e362 <EwCanDiscardSurface+0x86>
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	d1b1      	bne.n	800e31c <EwCanDiscardSurface+0x40>
 800e3b8:	e7b3      	b.n	800e322 <EwCanDiscardSurface+0x46>
 800e3ba:	bf00      	nop
 800e3bc:	200000f4 	.word	0x200000f4
 800e3c0:	20000000 	.word	0x20000000
 800e3c4:	b084      	sub	sp, #16
 800e3c6:	9001      	str	r0, [sp, #4]
 800e3c8:	0e00      	lsrs	r0, r0, #24
 800e3ca:	fb01 0000 	mla	r0, r1, r0, r0
 800e3ce:	1200      	asrs	r0, r0, #8
 800e3d0:	f88d 0007 	strb.w	r0, [sp, #7]
 800e3d4:	9b01      	ldr	r3, [sp, #4]
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	f362 0007 	bfi	r0, r2, #0, #8
 800e3de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e3e2:	f362 200f 	bfi	r0, r2, #8, #8
 800e3e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e3ea:	f362 4017 	bfi	r0, r2, #16, #8
 800e3ee:	0e1b      	lsrs	r3, r3, #24
 800e3f0:	f363 601f 	bfi	r0, r3, #24, #8
 800e3f4:	b004      	add	sp, #16
 800e3f6:	4770      	bx	lr
 800e3f8:	8803      	ldrh	r3, [r0, #0]
 800e3fa:	b530      	push	{r4, r5, lr}
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	250a      	movs	r5, #10
 800e400:	3b30      	subs	r3, #48	; 0x30
 800e402:	b29c      	uxth	r4, r3
 800e404:	2c09      	cmp	r4, #9
 800e406:	d901      	bls.n	800e40c <EwCanDiscardSurface+0x130>
 800e408:	600a      	str	r2, [r1, #0]
 800e40a:	bd30      	pop	{r4, r5, pc}
 800e40c:	fb05 3202 	mla	r2, r5, r2, r3
 800e410:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e414:	e7f4      	b.n	800e400 <EwCanDiscardSurface+0x124>
 800e416:	b510      	push	{r4, lr}
 800e418:	460c      	mov	r4, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	f7ff ffec 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800e420:	8803      	ldrh	r3, [r0, #0]
 800e422:	2b25      	cmp	r3, #37	; 0x25
 800e424:	d10d      	bne.n	800e442 <EwCanDiscardSurface+0x166>
 800e426:	680b      	ldr	r3, [r1, #0]
 800e428:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800e42c:	4363      	muls	r3, r4
 800e42e:	2464      	movs	r4, #100	; 0x64
 800e430:	fb93 f4f4 	sdiv	r4, r3, r4
 800e434:	fb02 3304 	mla	r3, r2, r4, r3
 800e438:	2b32      	cmp	r3, #50	; 0x32
 800e43a:	bfc8      	it	gt
 800e43c:	3401      	addgt	r4, #1
 800e43e:	600c      	str	r4, [r1, #0]
 800e440:	3002      	adds	r0, #2
 800e442:	bd10      	pop	{r4, pc}
 800e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e446:	b085      	sub	sp, #20
 800e448:	2500      	movs	r5, #0
 800e44a:	4617      	mov	r7, r2
 800e44c:	466a      	mov	r2, sp
 800e44e:	461e      	mov	r6, r3
 800e450:	e9cd 5500 	strd	r5, r5, [sp]
 800e454:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800e458:	460c      	mov	r4, r1
 800e45a:	f7ff ffdc 	bl	800e416 <EwCanDiscardSurface+0x13a>
 800e45e:	8803      	ldrh	r3, [r0, #0]
 800e460:	2b2c      	cmp	r3, #44	; 0x2c
 800e462:	d112      	bne.n	800e48a <EwCanDiscardSurface+0x1ae>
 800e464:	aa01      	add	r2, sp, #4
 800e466:	4621      	mov	r1, r4
 800e468:	3002      	adds	r0, #2
 800e46a:	f7ff ffd4 	bl	800e416 <EwCanDiscardSurface+0x13a>
 800e46e:	8803      	ldrh	r3, [r0, #0]
 800e470:	2b2c      	cmp	r3, #44	; 0x2c
 800e472:	d10a      	bne.n	800e48a <EwCanDiscardSurface+0x1ae>
 800e474:	a902      	add	r1, sp, #8
 800e476:	3002      	adds	r0, #2
 800e478:	f7ff ffbe 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800e47c:	8803      	ldrh	r3, [r0, #0]
 800e47e:	2b2c      	cmp	r3, #44	; 0x2c
 800e480:	d103      	bne.n	800e48a <EwCanDiscardSurface+0x1ae>
 800e482:	a903      	add	r1, sp, #12
 800e484:	3002      	adds	r0, #2
 800e486:	f7ff ffb7 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800e48a:	9b00      	ldr	r3, [sp, #0]
 800e48c:	9a01      	ldr	r2, [sp, #4]
 800e48e:	42a3      	cmp	r3, r4
 800e490:	bfc8      	it	gt
 800e492:	9400      	strgt	r4, [sp, #0]
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	603b      	str	r3, [r7, #0]
 800e498:	1ae4      	subs	r4, r4, r3
 800e49a:	4294      	cmp	r4, r2
 800e49c:	bfb8      	it	lt
 800e49e:	9401      	strlt	r4, [sp, #4]
 800e4a0:	9b01      	ldr	r3, [sp, #4]
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a6:	9a02      	ldr	r2, [sp, #8]
 800e4a8:	601a      	str	r2, [r3, #0]
 800e4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ac:	9a03      	ldr	r2, [sp, #12]
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	b005      	add	sp, #20
 800e4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b4:	3901      	subs	r1, #1
 800e4b6:	3802      	subs	r0, #2
 800e4b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4bc:	b11b      	cbz	r3, 800e4c6 <EwCanDiscardSurface+0x1ea>
 800e4be:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d0f8      	beq.n	800e4b8 <EwCanDiscardSurface+0x1dc>
 800e4c6:	fab3 f083 	clz	r0, r3
 800e4ca:	0940      	lsrs	r0, r0, #5
 800e4cc:	4770      	bx	lr
 800e4ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e4d4:	4681      	mov	r9, r0
 800e4d6:	460e      	mov	r6, r1
 800e4d8:	4617      	mov	r7, r2
 800e4da:	461c      	mov	r4, r3
 800e4dc:	f04f 0818 	mov.w	r8, #24
 800e4e0:	42ac      	cmp	r4, r5
 800e4e2:	d302      	bcc.n	800e4ea <EwCanDiscardSurface+0x20e>
 800e4e4:	b003      	add	sp, #12
 800e4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ea:	8823      	ldrh	r3, [r4, #0]
 800e4ec:	2b41      	cmp	r3, #65	; 0x41
 800e4ee:	d03e      	beq.n	800e56e <EwCanDiscardSurface+0x292>
 800e4f0:	3b47      	subs	r3, #71	; 0x47
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	2a0d      	cmp	r2, #13
 800e4f6:	d8f3      	bhi.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e4f8:	2b0d      	cmp	r3, #13
 800e4fa:	d8f1      	bhi.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e4fc:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <EwCanDiscardSurface+0x228>)
 800e4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e502:	bf00      	nop
 800e504:	0800e53d 	.word	0x0800e53d
 800e508:	0800e4e1 	.word	0x0800e4e1
 800e50c:	0800e56b 	.word	0x0800e56b
 800e510:	0800e563 	.word	0x0800e563
 800e514:	0800e4e1 	.word	0x0800e4e1
 800e518:	0800e4e1 	.word	0x0800e4e1
 800e51c:	0800e4e1 	.word	0x0800e4e1
 800e520:	0800e4e1 	.word	0x0800e4e1
 800e524:	0800e4e1 	.word	0x0800e4e1
 800e528:	0800e4e1 	.word	0x0800e4e1
 800e52c:	0800e4e1 	.word	0x0800e4e1
 800e530:	0800e56b 	.word	0x0800e56b
 800e534:	0800e4e1 	.word	0x0800e4e1
 800e538:	0800e563 	.word	0x0800e563
 800e53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e540:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e544:	8960      	ldrh	r0, [r4, #10]
 800e546:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e54a:	4419      	add	r1, r3
 800e54c:	f104 030e 	add.w	r3, r4, #14
 800e550:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 800e554:	9400      	str	r4, [sp, #0]
 800e556:	443a      	add	r2, r7
 800e558:	4431      	add	r1, r6
 800e55a:	4648      	mov	r0, r9
 800e55c:	f7ff ffb7 	bl	800e4ce <EwCanDiscardSurface+0x1f2>
 800e560:	e7be      	b.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e562:	88e3      	ldrh	r3, [r4, #6]
 800e564:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e568:	e7ba      	b.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e56a:	340c      	adds	r4, #12
 800e56c:	e7b8      	b.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e56e:	8863      	ldrh	r3, [r4, #2]
 800e570:	fb08 9303 	mla	r3, r8, r3, r9
 800e574:	e943 6702 	strd	r6, r7, [r3, #-8]
 800e578:	f853 2c14 	ldr.w	r2, [r3, #-20]
 800e57c:	42a2      	cmp	r2, r4
 800e57e:	bf94      	ite	ls
 800e580:	f843 2c14 	strls.w	r2, [r3, #-20]
 800e584:	f843 4c14 	strhi.w	r4, [r3, #-20]
 800e588:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800e58c:	340e      	adds	r4, #14
 800e58e:	42a2      	cmp	r2, r4
 800e590:	bf2c      	ite	cs
 800e592:	f843 2c10 	strcs.w	r2, [r3, #-16]
 800e596:	f843 4c10 	strcc.w	r4, [r3, #-16]
 800e59a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800e59e:	3201      	adds	r2, #1
 800e5a0:	f843 2c0c 	str.w	r2, [r3, #-12]
 800e5a4:	e79c      	b.n	800e4e0 <EwCanDiscardSurface+0x204>
 800e5a6:	b530      	push	{r4, r5, lr}
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d302      	bcc.n	800e5b2 <EwCanDiscardSurface+0x2d6>
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	bd30      	pop	{r4, r5, pc}
 800e5b2:	8814      	ldrh	r4, [r2, #0]
 800e5b4:	2c41      	cmp	r4, #65	; 0x41
 800e5b6:	d013      	beq.n	800e5e0 <EwCanDiscardSurface+0x304>
 800e5b8:	3c49      	subs	r4, #73	; 0x49
 800e5ba:	b2a5      	uxth	r5, r4
 800e5bc:	2d0b      	cmp	r5, #11
 800e5be:	d817      	bhi.n	800e5f0 <EwCanDiscardSurface+0x314>
 800e5c0:	2c0b      	cmp	r4, #11
 800e5c2:	d815      	bhi.n	800e5f0 <EwCanDiscardSurface+0x314>
 800e5c4:	e8df f004 	tbb	[pc, r4]
 800e5c8:	1414060a 	.word	0x1414060a
 800e5cc:	14141414 	.word	0x14141414
 800e5d0:	06140a14 	.word	0x06140a14
 800e5d4:	88d4      	ldrh	r4, [r2, #6]
 800e5d6:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800e5da:	e7e5      	b.n	800e5a8 <EwCanDiscardSurface+0x2cc>
 800e5dc:	320c      	adds	r2, #12
 800e5de:	e7e3      	b.n	800e5a8 <EwCanDiscardSurface+0x2cc>
 800e5e0:	8854      	ldrh	r4, [r2, #2]
 800e5e2:	4284      	cmp	r4, r0
 800e5e4:	d102      	bne.n	800e5ec <EwCanDiscardSurface+0x310>
 800e5e6:	2900      	cmp	r1, #0
 800e5e8:	d0e1      	beq.n	800e5ae <EwCanDiscardSurface+0x2d2>
 800e5ea:	3901      	subs	r1, #1
 800e5ec:	320e      	adds	r2, #14
 800e5ee:	e7db      	b.n	800e5a8 <EwCanDiscardSurface+0x2cc>
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	e7d9      	b.n	800e5a8 <EwCanDiscardSurface+0x2cc>
 800e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	b348      	cbz	r0, 800e650 <EwCanDiscardSurface+0x374>
 800e5fc:	e9d0 7200 	ldrd	r7, r2, [r0]
 800e600:	eba2 0807 	sub.w	r8, r2, r7
 800e604:	6882      	ldr	r2, [r0, #8]
 800e606:	eba2 0268 	sub.w	r2, r2, r8, asr #1
 800e60a:	428a      	cmp	r2, r1
 800e60c:	ea4f 0368 	mov.w	r3, r8, asr #1
 800e610:	db03      	blt.n	800e61a <EwCanDiscardSurface+0x33e>
 800e612:	2601      	movs	r6, #1
 800e614:	4630      	mov	r0, r6
 800e616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e61a:	4419      	add	r1, r3
 800e61c:	424b      	negs	r3, r1
 800e61e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e622:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800e626:	bf58      	it	pl
 800e628:	425d      	negpl	r5, r3
 800e62a:	f5c5 6580 	rsb	r5, r5, #1024	; 0x400
 800e62e:	440d      	add	r5, r1
 800e630:	ea4f 0945 	mov.w	r9, r5, lsl #1
 800e634:	4648      	mov	r0, r9
 800e636:	f01b f89b 	bl	8029770 <EwAlloc>
 800e63a:	b958      	cbnz	r0, 800e654 <EwCanDiscardSurface+0x378>
 800e63c:	2016      	movs	r0, #22
 800e63e:	f00b fae3 	bl	8019c08 <EwImmediateReclaimMemory>
 800e642:	4606      	mov	r6, r0
 800e644:	2800      	cmp	r0, #0
 800e646:	d1f5      	bne.n	800e634 <EwCanDiscardSurface+0x358>
 800e648:	2016      	movs	r0, #22
 800e64a:	f00a fb2d 	bl	8018ca8 <EwError>
 800e64e:	e7e1      	b.n	800e614 <EwCanDiscardSurface+0x338>
 800e650:	4606      	mov	r6, r0
 800e652:	e7df      	b.n	800e614 <EwCanDiscardSurface+0x338>
 800e654:	f8df c060 	ldr.w	ip, [pc, #96]	; 800e6b8 <EwCanDiscardSurface+0x3dc>
 800e658:	4e13      	ldr	r6, [pc, #76]	; (800e6a8 <EwCanDiscardSurface+0x3cc>)
 800e65a:	f8dc 3000 	ldr.w	r3, [ip]
 800e65e:	6832      	ldr	r2, [r6, #0]
 800e660:	444b      	add	r3, r9
 800e662:	4293      	cmp	r3, r2
 800e664:	dd00      	ble.n	800e668 <EwCanDiscardSurface+0x38c>
 800e666:	6033      	str	r3, [r6, #0]
 800e668:	4a10      	ldr	r2, [pc, #64]	; (800e6ac <EwCanDiscardSurface+0x3d0>)
 800e66a:	6816      	ldr	r6, [r2, #0]
 800e66c:	4a10      	ldr	r2, [pc, #64]	; (800e6b0 <EwCanDiscardSurface+0x3d4>)
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	4416      	add	r6, r2
 800e672:	4a10      	ldr	r2, [pc, #64]	; (800e6b4 <EwCanDiscardSurface+0x3d8>)
 800e674:	6811      	ldr	r1, [r2, #0]
 800e676:	441e      	add	r6, r3
 800e678:	428e      	cmp	r6, r1
 800e67a:	bfc8      	it	gt
 800e67c:	6016      	strgt	r6, [r2, #0]
 800e67e:	68a2      	ldr	r2, [r4, #8]
 800e680:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e684:	f8cc 3000 	str.w	r3, [ip]
 800e688:	6863      	ldr	r3, [r4, #4]
 800e68a:	6020      	str	r0, [r4, #0]
 800e68c:	1bc2      	subs	r2, r0, r7
 800e68e:	4413      	add	r3, r2
 800e690:	e9c4 3501 	strd	r3, r5, [r4, #4]
 800e694:	4642      	mov	r2, r8
 800e696:	4639      	mov	r1, r7
 800e698:	f01b f898 	bl	80297cc <EwMove>
 800e69c:	2f00      	cmp	r7, #0
 800e69e:	d0b8      	beq.n	800e612 <EwCanDiscardSurface+0x336>
 800e6a0:	4638      	mov	r0, r7
 800e6a2:	f01b f867 	bl	8029774 <EwFree>
 800e6a6:	e7b4      	b.n	800e612 <EwCanDiscardSurface+0x336>
 800e6a8:	20000304 	.word	0x20000304
 800e6ac:	200002d8 	.word	0x200002d8
 800e6b0:	200002e4 	.word	0x200002e4
 800e6b4:	200002ec 	.word	0x200002ec
 800e6b8:	200002e8 	.word	0x200002e8

0800e6bc <EwInitAttrText>:
 800e6bc:	2001      	movs	r0, #1
 800e6be:	4770      	bx	lr

0800e6c0 <EwParseFlowString>:
 800e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c4:	ed2d 8b02 	vpush	{d8}
 800e6c8:	b095      	sub	sp, #84	; 0x54
 800e6ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e6ce:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e6d2:	900d      	str	r0, [sp, #52]	; 0x34
 800e6d4:	460e      	mov	r6, r1
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d039      	beq.n	800e74e <EwParseFlowString+0x8e>
 800e6da:	6943      	ldr	r3, [r0, #20]
 800e6dc:	ee08 3a10 	vmov	s16, r3
 800e6e0:	e9d0 4300 	ldrd	r4, r3, [r0]
 800e6e4:	441c      	add	r4, r3
 800e6e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6e8:	4bb2      	ldr	r3, [pc, #712]	; (800e9b4 <EwParseFlowString+0x2f4>)
 800e6ea:	ea32 0222 	bics.w	r2, r2, r2, asr #32
 800e6ee:	bf28      	it	cs
 800e6f0:	461a      	movcs	r2, r3
 800e6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6f4:	920a      	str	r2, [sp, #40]	; 0x28
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	bfb8      	it	lt
 800e6fa:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800e6fe:	4630      	mov	r0, r6
 800e700:	930b      	str	r3, [sp, #44]	; 0x2c
 800e702:	f00e f835 	bl	801c770 <EwGetStringLength>
 800e706:	4633      	mov	r3, r6
 800e708:	4605      	mov	r5, r0
 800e70a:	2200      	movs	r2, #0
 800e70c:	b113      	cbz	r3, 800e714 <EwParseFlowString+0x54>
 800e70e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800e712:	bb01      	cbnz	r1, 800e756 <EwParseFlowString+0x96>
 800e714:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e716:	1aab      	subs	r3, r5, r2
 800e718:	3101      	adds	r1, #1
 800e71a:	4363      	muls	r3, r4
 800e71c:	fb93 f3f1 	sdiv	r3, r3, r1
 800e720:	3301      	adds	r3, #1
 800e722:	4413      	add	r3, r2
 800e724:	42ab      	cmp	r3, r5
 800e726:	bfd4      	ite	le
 800e728:	18ea      	addle	r2, r5, r3
 800e72a:	196a      	addgt	r2, r5, r5
 800e72c:	1c53      	adds	r3, r2, #1
 800e72e:	4619      	mov	r1, r3
 800e730:	2000      	movs	r0, #0
 800e732:	9308      	str	r3, [sp, #32]
 800e734:	f00d fe44 	bl	801c3c0 <EwNewStringChar>
 800e738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e73a:	4681      	mov	r9, r0
 800e73c:	b97b      	cbnz	r3, 800e75e <EwParseFlowString+0x9e>
 800e73e:	f04f 0900 	mov.w	r9, #0
 800e742:	4648      	mov	r0, r9
 800e744:	b015      	add	sp, #84	; 0x54
 800e746:	ecbd 8b02 	vpop	{d8}
 800e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74e:	ee08 0a10 	vmov	s16, r0
 800e752:	4604      	mov	r4, r0
 800e754:	e7c7      	b.n	800e6e6 <EwParseFlowString+0x26>
 800e756:	290a      	cmp	r1, #10
 800e758:	bf08      	it	eq
 800e75a:	3201      	addeq	r2, #1
 800e75c:	e7d6      	b.n	800e70c <EwParseFlowString+0x4c>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d0ed      	beq.n	800e73e <EwParseFlowString+0x7e>
 800e762:	2d00      	cmp	r5, #0
 800e764:	d0eb      	beq.n	800e73e <EwParseFlowString+0x7e>
 800e766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0e8      	beq.n	800e73e <EwParseFlowString+0x7e>
 800e76c:	9b08      	ldr	r3, [sp, #32]
 800e76e:	1b5c      	subs	r4, r3, r5
 800e770:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e774:	4631      	mov	r1, r6
 800e776:	006a      	lsls	r2, r5, #1
 800e778:	4620      	mov	r0, r4
 800e77a:	f01b f829 	bl	80297d0 <EwCopy>
 800e77e:	9b08      	ldr	r3, [sp, #32]
 800e780:	f242 010b 	movw	r1, #8203	; 0x200b
 800e784:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 800e788:	20ad      	movs	r0, #173	; 0xad
 800e78a:	4623      	mov	r3, r4
 800e78c:	f64f 66ff 	movw	r6, #65279	; 0xfeff
 800e790:	429a      	cmp	r2, r3
 800e792:	d845      	bhi.n	800e820 <EwParseFlowString+0x160>
 800e794:	f1ba 0f00 	cmp.w	sl, #0
 800e798:	d151      	bne.n	800e83e <EwParseFlowString+0x17e>
 800e79a:	f04f 0a00 	mov.w	sl, #0
 800e79e:	f109 0302 	add.w	r3, r9, #2
 800e7a2:	9304      	str	r3, [sp, #16]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7aa:	9306      	str	r3, [sp, #24]
 800e7ac:	f04f 0b00 	mov.w	fp, #0
 800e7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b4:	f109 0504 	add.w	r5, r9, #4
 800e7b8:	9409      	str	r4, [sp, #36]	; 0x24
 800e7ba:	9305      	str	r3, [sp, #20]
 800e7bc:	465e      	mov	r6, fp
 800e7be:	f8b4 8000 	ldrh.w	r8, [r4]
 800e7c2:	f1b8 0f00 	cmp.w	r8, #0
 800e7c6:	d154      	bne.n	800e872 <EwParseFlowString+0x1b2>
 800e7c8:	b12e      	cbz	r6, 800e7d6 <EwParseFlowString+0x116>
 800e7ca:	8833      	ldrh	r3, [r6, #0]
 800e7cc:	2bad      	cmp	r3, #173	; 0xad
 800e7ce:	bf04      	itt	eq
 800e7d0:	f64f 63ff 	movweq	r3, #65279	; 0xfeff
 800e7d4:	8033      	strheq	r3, [r6, #0]
 800e7d6:	9b04      	ldr	r3, [sp, #16]
 800e7d8:	1aee      	subs	r6, r5, r3
 800e7da:	2e02      	cmp	r6, #2
 800e7dc:	dd1c      	ble.n	800e818 <EwParseFlowString+0x158>
 800e7de:	1076      	asrs	r6, r6, #1
 800e7e0:	f1ba 0f00 	cmp.w	sl, #0
 800e7e4:	d011      	beq.n	800e80a <EwParseFlowString+0x14a>
 800e7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e8:	1ae4      	subs	r4, r4, r3
 800e7ea:	1062      	asrs	r2, r4, #1
 800e7ec:	ebc6 0464 	rsb	r4, r6, r4, asr #1
 800e7f0:	1c61      	adds	r1, r4, #1
 800e7f2:	4650      	mov	r0, sl
 800e7f4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e7f8:	f003 fbbd 	bl	8011f76 <EwBidiCompleteRow>
 800e7fc:	9b04      	ldr	r3, [sp, #16]
 800e7fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e802:	3302      	adds	r3, #2
 800e804:	4650      	mov	r0, sl
 800e806:	f003 fbe1 	bl	8011fcc <EwBidiReorderChars>
 800e80a:	9b04      	ldr	r3, [sp, #16]
 800e80c:	801e      	strh	r6, [r3, #0]
 800e80e:	2300      	movs	r3, #0
 800e810:	802b      	strh	r3, [r5, #0]
 800e812:	9b06      	ldr	r3, [sp, #24]
 800e814:	3301      	adds	r3, #1
 800e816:	9306      	str	r3, [sp, #24]
 800e818:	9b06      	ldr	r3, [sp, #24]
 800e81a:	f8a9 3000 	strh.w	r3, [r9]
 800e81e:	e790      	b.n	800e742 <EwParseFlowString+0x82>
 800e820:	881f      	ldrh	r7, [r3, #0]
 800e822:	2f5e      	cmp	r7, #94	; 0x5e
 800e824:	d007      	beq.n	800e836 <EwParseFlowString+0x176>
 800e826:	2f7e      	cmp	r7, #126	; 0x7e
 800e828:	d007      	beq.n	800e83a <EwParseFlowString+0x17a>
 800e82a:	2f25      	cmp	r7, #37	; 0x25
 800e82c:	d101      	bne.n	800e832 <EwParseFlowString+0x172>
 800e82e:	f823 6b02 	strh.w	r6, [r3], #2
 800e832:	3302      	adds	r3, #2
 800e834:	e7ac      	b.n	800e790 <EwParseFlowString+0xd0>
 800e836:	8019      	strh	r1, [r3, #0]
 800e838:	e7fb      	b.n	800e832 <EwParseFlowString+0x172>
 800e83a:	8018      	strh	r0, [r3, #0]
 800e83c:	e7f9      	b.n	800e832 <EwParseFlowString+0x172>
 800e83e:	f04f 33ff 	mov.w	r3, #4294967295
 800e842:	462a      	mov	r2, r5
 800e844:	4621      	mov	r1, r4
 800e846:	4650      	mov	r0, sl
 800e848:	f002 fbe0 	bl	801100c <EwBidiInit>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d0a4      	beq.n	800e79a <EwParseFlowString+0xda>
 800e850:	4621      	mov	r1, r4
 800e852:	4650      	mov	r0, sl
 800e854:	f002 fc9e 	bl	8011194 <EwBidiProcess>
 800e858:	4621      	mov	r1, r4
 800e85a:	4650      	mov	r0, sl
 800e85c:	f003 fb6e 	bl	8011f3c <EwBidiMirrorGlyphs>
 800e860:	2301      	movs	r3, #1
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	2200      	movs	r2, #0
 800e866:	ab0d      	add	r3, sp, #52	; 0x34
 800e868:	4621      	mov	r1, r4
 800e86a:	4650      	mov	r0, sl
 800e86c:	f003 f9a4 	bl	8011bb8 <EwBidiApplyShaping>
 800e870:	e795      	b.n	800e79e <EwParseFlowString+0xde>
 800e872:	1ca3      	adds	r3, r4, #2
 800e874:	f1b8 0f0a 	cmp.w	r8, #10
 800e878:	9307      	str	r3, [sp, #28]
 800e87a:	f000 8141 	beq.w	800eb00 <EwParseFlowString+0x440>
 800e87e:	f240 631c 	movw	r3, #1564	; 0x61c
 800e882:	4598      	cmp	r8, r3
 800e884:	f000 81b5 	beq.w	800ebf2 <EwParseFlowString+0x532>
 800e888:	f5a8 5300 	sub.w	r3, r8, #8192	; 0x2000
 800e88c:	f1a3 020c 	sub.w	r2, r3, #12
 800e890:	b292      	uxth	r2, r2
 800e892:	2a03      	cmp	r2, #3
 800e894:	f240 81ad 	bls.w	800ebf2 <EwParseFlowString+0x532>
 800e898:	3b2a      	subs	r3, #42	; 0x2a
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b04      	cmp	r3, #4
 800e89e:	f240 81a8 	bls.w	800ebf2 <EwParseFlowString+0x532>
 800e8a2:	f5a8 5301 	sub.w	r3, r8, #8256	; 0x2040
 800e8a6:	3b26      	subs	r3, #38	; 0x26
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	f240 81a2 	bls.w	800ebf2 <EwParseFlowString+0x532>
 800e8ae:	9b03      	ldr	r3, [sp, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d06b      	beq.n	800e98c <EwParseFlowString+0x2cc>
 800e8b4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e8b8:	4598      	cmp	r8, r3
 800e8ba:	f000 819a 	beq.w	800ebf2 <EwParseFlowString+0x532>
 800e8be:	f242 030b 	movw	r3, #8203	; 0x200b
 800e8c2:	4598      	cmp	r8, r3
 800e8c4:	d072      	beq.n	800e9ac <EwParseFlowString+0x2ec>
 800e8c6:	f1b8 0fad 	cmp.w	r8, #173	; 0xad
 800e8ca:	f000 8084 	beq.w	800e9d6 <EwParseFlowString+0x316>
 800e8ce:	f1a8 0020 	sub.w	r0, r8, #32
 800e8d2:	4243      	negs	r3, r0
 800e8d4:	4143      	adcs	r3, r0
 800e8d6:	9303      	str	r3, [sp, #12]
 800e8d8:	f1b8 0f20 	cmp.w	r8, #32
 800e8dc:	d06c      	beq.n	800e9b8 <EwParseFlowString+0x2f8>
 800e8de:	f1b8 0fad 	cmp.w	r8, #173	; 0xad
 800e8e2:	d078      	beq.n	800e9d6 <EwParseFlowString+0x316>
 800e8e4:	f242 030b 	movw	r3, #8203	; 0x200b
 800e8e8:	4598      	cmp	r8, r3
 800e8ea:	d05f      	beq.n	800e9ac <EwParseFlowString+0x2ec>
 800e8ec:	f242 0326 	movw	r3, #8230	; 0x2026
 800e8f0:	4598      	cmp	r8, r3
 800e8f2:	f040 8180 	bne.w	800ebf6 <EwParseFlowString+0x536>
 800e8f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e8f8:	4641      	mov	r1, r8
 800e8fa:	f7fe fd0d 	bl	800d318 <EwIsGlyphAvailable>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f040 817e 	bne.w	800ec00 <EwParseFlowString+0x540>
 800e904:	900c      	str	r0, [sp, #48]	; 0x30
 800e906:	aa0f      	add	r2, sp, #60	; 0x3c
 800e908:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e90a:	212e      	movs	r1, #46	; 0x2e
 800e90c:	f7fe fd27 	bl	800d35e <EwGetGlyphMetrics>
 800e910:	2800      	cmp	r0, #0
 800e912:	f000 8175 	beq.w	800ec00 <EwParseFlowString+0x540>
 800e916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e918:	f1ba 0f00 	cmp.w	sl, #0
 800e91c:	d006      	beq.n	800e92c <EwParseFlowString+0x26c>
 800e91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e920:	1ae1      	subs	r1, r4, r3
 800e922:	1049      	asrs	r1, r1, #1
 800e924:	4650      	mov	r0, sl
 800e926:	f002 fb63 	bl	8010ff0 <EwBidiGetCharLevel>
 800e92a:	4603      	mov	r3, r0
 800e92c:	222e      	movs	r2, #46	; 0x2e
 800e92e:	4611      	mov	r1, r2
 800e930:	ee18 0a10 	vmov	r0, s16
 800e934:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e936:	930c      	str	r3, [sp, #48]	; 0x30
 800e938:	f009 f958 	bl	8017bec <EwFntGetKerning>
 800e93c:	9b05      	ldr	r3, [sp, #20]
 800e93e:	461a      	mov	r2, r3
 800e940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e942:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800e946:	429a      	cmp	r2, r3
 800e948:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 800e94c:	f040 8082 	bne.w	800ea54 <EwParseFlowString+0x394>
 800e950:	4613      	mov	r3, r2
 800e952:	07da      	lsls	r2, r3, #31
 800e954:	ee18 0a10 	vmov	r0, s16
 800e958:	bf47      	ittee	mi
 800e95a:	465a      	movmi	r2, fp
 800e95c:	212e      	movmi	r1, #46	; 0x2e
 800e95e:	222e      	movpl	r2, #46	; 0x2e
 800e960:	4659      	movpl	r1, fp
 800e962:	f009 f943 	bl	8017bec <EwFntGetKerning>
 800e966:	4407      	add	r7, r0
 800e968:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
 800e96c:	9b02      	ldr	r3, [sp, #8]
 800e96e:	441f      	add	r7, r3
 800e970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e972:	429f      	cmp	r7, r3
 800e974:	dd02      	ble.n	800e97c <EwParseFlowString+0x2bc>
 800e976:	9b02      	ldr	r3, [sp, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d16f      	bne.n	800ea5c <EwParseFlowString+0x39c>
 800e97c:	f1b8 0f0a 	cmp.w	r8, #10
 800e980:	f825 8b02 	strh.w	r8, [r5], #2
 800e984:	f040 8133 	bne.w	800ebee <EwParseFlowString+0x52e>
 800e988:	9702      	str	r7, [sp, #8]
 800e98a:	e083      	b.n	800ea94 <EwParseFlowString+0x3d4>
 800e98c:	f242 030b 	movw	r3, #8203	; 0x200b
 800e990:	4598      	cmp	r8, r3
 800e992:	d1a1      	bne.n	800e8d8 <EwParseFlowString+0x218>
 800e994:	9b02      	ldr	r3, [sp, #8]
 800e996:	b14b      	cbz	r3, 800e9ac <EwParseFlowString+0x2ec>
 800e998:	b12e      	cbz	r6, 800e9a6 <EwParseFlowString+0x2e6>
 800e99a:	8833      	ldrh	r3, [r6, #0]
 800e99c:	2bad      	cmp	r3, #173	; 0xad
 800e99e:	d102      	bne.n	800e9a6 <EwParseFlowString+0x2e6>
 800e9a0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e9a4:	8033      	strh	r3, [r6, #0]
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	462e      	mov	r6, r5
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	f64f 68ff 	movw	r8, #65279	; 0xfeff
 800e9b0:	2700      	movs	r7, #0
 800e9b2:	e7db      	b.n	800e96c <EwParseFlowString+0x2ac>
 800e9b4:	7ffffffe 	.word	0x7ffffffe
 800e9b8:	9b02      	ldr	r3, [sp, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 8120 	beq.w	800ec00 <EwParseFlowString+0x540>
 800e9c0:	b12e      	cbz	r6, 800e9ce <EwParseFlowString+0x30e>
 800e9c2:	8833      	ldrh	r3, [r6, #0]
 800e9c4:	2bad      	cmp	r3, #173	; 0xad
 800e9c6:	d102      	bne.n	800e9ce <EwParseFlowString+0x30e>
 800e9c8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e9cc:	8033      	strh	r3, [r6, #0]
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	462e      	mov	r6, r5
 800e9d2:	9303      	str	r3, [sp, #12]
 800e9d4:	e114      	b.n	800ec00 <EwParseFlowString+0x540>
 800e9d6:	9b02      	ldr	r3, [sp, #8]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d0e7      	beq.n	800e9ac <EwParseFlowString+0x2ec>
 800e9dc:	9b03      	ldr	r3, [sp, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e4      	bne.n	800e9ac <EwParseFlowString+0x2ec>
 800e9e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e9e4:	aa0f      	add	r2, sp, #60	; 0x3c
 800e9e6:	21ad      	movs	r1, #173	; 0xad
 800e9e8:	f7fe fcb9 	bl	800d35e <EwGetGlyphMetrics>
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	b1b8      	cbz	r0, 800ea20 <EwParseFlowString+0x360>
 800e9f0:	f1ba 0f00 	cmp.w	sl, #0
 800e9f4:	d021      	beq.n	800ea3a <EwParseFlowString+0x37a>
 800e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f8:	1ae1      	subs	r1, r4, r3
 800e9fa:	1049      	asrs	r1, r1, #1
 800e9fc:	4650      	mov	r0, sl
 800e9fe:	f002 faf7 	bl	8010ff0 <EwBidiGetCharLevel>
 800ea02:	9b05      	ldr	r3, [sp, #20]
 800ea04:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ea06:	4283      	cmp	r3, r0
 800ea08:	d10a      	bne.n	800ea20 <EwParseFlowString+0x360>
 800ea0a:	07d9      	lsls	r1, r3, #31
 800ea0c:	ee18 0a10 	vmov	r0, s16
 800ea10:	bf47      	ittee	mi
 800ea12:	465a      	movmi	r2, fp
 800ea14:	21ad      	movmi	r1, #173	; 0xad
 800ea16:	22ad      	movpl	r2, #173	; 0xad
 800ea18:	4659      	movpl	r1, fp
 800ea1a:	f009 f8e7 	bl	8017bec <EwFntGetKerning>
 800ea1e:	4407      	add	r7, r0
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea24:	443b      	add	r3, r7
 800ea26:	4293      	cmp	r3, r2
 800ea28:	dc00      	bgt.n	800ea2c <EwParseFlowString+0x36c>
 800ea2a:	b947      	cbnz	r7, 800ea3e <EwParseFlowString+0x37e>
 800ea2c:	2e00      	cmp	r6, #0
 800ea2e:	f040 80e7 	bne.w	800ec00 <EwParseFlowString+0x540>
 800ea32:	9b02      	ldr	r3, [sp, #8]
 800ea34:	1bdb      	subs	r3, r3, r7
 800ea36:	9302      	str	r3, [sp, #8]
 800ea38:	e7c9      	b.n	800e9ce <EwParseFlowString+0x30e>
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	e7e1      	b.n	800ea02 <EwParseFlowString+0x342>
 800ea3e:	2e00      	cmp	r6, #0
 800ea40:	d0f7      	beq.n	800ea32 <EwParseFlowString+0x372>
 800ea42:	8833      	ldrh	r3, [r6, #0]
 800ea44:	2bad      	cmp	r3, #173	; 0xad
 800ea46:	bf04      	itt	eq
 800ea48:	f64f 63ff 	movweq	r3, #65279	; 0xfeff
 800ea4c:	8033      	strheq	r3, [r6, #0]
 800ea4e:	e7f0      	b.n	800ea32 <EwParseFlowString+0x372>
 800ea50:	4650      	mov	r0, sl
 800ea52:	e0e8      	b.n	800ec26 <EwParseFlowString+0x566>
 800ea54:	9305      	str	r3, [sp, #20]
 800ea56:	e787      	b.n	800e968 <EwParseFlowString+0x2a8>
 800ea58:	9005      	str	r0, [sp, #20]
 800ea5a:	e0f4      	b.n	800ec46 <EwParseFlowString+0x586>
 800ea5c:	b386      	cbz	r6, 800eac0 <EwParseFlowString+0x400>
 800ea5e:	8833      	ldrh	r3, [r6, #0]
 800ea60:	2b20      	cmp	r3, #32
 800ea62:	bf08      	it	eq
 800ea64:	f64f 63ff 	movweq	r3, #65279	; 0xfeff
 800ea68:	f1a4 0402 	sub.w	r4, r4, #2
 800ea6c:	bf08      	it	eq
 800ea6e:	8033      	strheq	r3, [r6, #0]
 800ea70:	4622      	mov	r2, r4
 800ea72:	1eab      	subs	r3, r5, #2
 800ea74:	42b3      	cmp	r3, r6
 800ea76:	d81e      	bhi.n	800eab6 <EwParseFlowString+0x3f6>
 800ea78:	1e6a      	subs	r2, r5, #1
 800ea7a:	1b93      	subs	r3, r2, r6
 800ea7c:	085b      	lsrs	r3, r3, #1
 800ea7e:	f06f 0101 	mvn.w	r1, #1
 800ea82:	434b      	muls	r3, r1
 800ea84:	4296      	cmp	r6, r2
 800ea86:	bf88      	it	hi
 800ea88:	2300      	movhi	r3, #0
 800ea8a:	1c98      	adds	r0, r3, #2
 800ea8c:	1822      	adds	r2, r4, r0
 800ea8e:	9207      	str	r2, [sp, #28]
 800ea90:	441d      	add	r5, r3
 800ea92:	2600      	movs	r6, #0
 800ea94:	9b07      	ldr	r3, [sp, #28]
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	2b20      	cmp	r3, #32
 800ea9a:	d106      	bne.n	800eaaa <EwParseFlowString+0x3ea>
 800ea9c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800eaa0:	f825 3b02 	strh.w	r3, [r5], #2
 800eaa4:	9b07      	ldr	r3, [sp, #28]
 800eaa6:	3302      	adds	r3, #2
 800eaa8:	9307      	str	r3, [sp, #28]
 800eaaa:	9807      	ldr	r0, [sp, #28]
 800eaac:	f240 6c1c 	movw	ip, #1564	; 0x61c
 800eab0:	f64f 67ff 	movw	r7, #65279	; 0xfeff
 800eab4:	e008      	b.n	800eac8 <EwParseFlowString+0x408>
 800eab6:	f833 1902 	ldrh.w	r1, [r3], #-2
 800eaba:	f822 1902 	strh.w	r1, [r2], #-2
 800eabe:	e7d9      	b.n	800ea74 <EwParseFlowString+0x3b4>
 800eac0:	9407      	str	r4, [sp, #28]
 800eac2:	e7e7      	b.n	800ea94 <EwParseFlowString+0x3d4>
 800eac4:	f825 7b02 	strh.w	r7, [r5], #2
 800eac8:	8803      	ldrh	r3, [r0, #0]
 800eaca:	2bad      	cmp	r3, #173	; 0xad
 800eacc:	4604      	mov	r4, r0
 800eace:	f100 0002 	add.w	r0, r0, #2
 800ead2:	d0f7      	beq.n	800eac4 <EwParseFlowString+0x404>
 800ead4:	4563      	cmp	r3, ip
 800ead6:	d0f5      	beq.n	800eac4 <EwParseFlowString+0x404>
 800ead8:	42bb      	cmp	r3, r7
 800eada:	d0f3      	beq.n	800eac4 <EwParseFlowString+0x404>
 800eadc:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 800eae0:	f1a2 010b 	sub.w	r1, r2, #11
 800eae4:	b289      	uxth	r1, r1
 800eae6:	2904      	cmp	r1, #4
 800eae8:	d9ec      	bls.n	800eac4 <EwParseFlowString+0x404>
 800eaea:	3a2a      	subs	r2, #42	; 0x2a
 800eaec:	b292      	uxth	r2, r2
 800eaee:	2a04      	cmp	r2, #4
 800eaf0:	d9e8      	bls.n	800eac4 <EwParseFlowString+0x404>
 800eaf2:	f5a3 5301 	sub.w	r3, r3, #8256	; 0x2040
 800eaf6:	3b26      	subs	r3, #38	; 0x26
 800eaf8:	2b03      	cmp	r3, #3
 800eafa:	d9e3      	bls.n	800eac4 <EwParseFlowString+0x404>
 800eafc:	9f02      	ldr	r7, [sp, #8]
 800eafe:	e003      	b.n	800eb08 <EwParseFlowString+0x448>
 800eb00:	f825 8b02 	strh.w	r8, [r5], #2
 800eb04:	9f02      	ldr	r7, [sp, #8]
 800eb06:	9c07      	ldr	r4, [sp, #28]
 800eb08:	8823      	ldrh	r3, [r4, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d06d      	beq.n	800ebea <EwParseFlowString+0x52a>
 800eb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb10:	3b01      	subs	r3, #1
 800eb12:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb14:	f43f ae58 	beq.w	800e7c8 <EwParseFlowString+0x108>
 800eb18:	b12e      	cbz	r6, 800eb26 <EwParseFlowString+0x466>
 800eb1a:	8833      	ldrh	r3, [r6, #0]
 800eb1c:	2bad      	cmp	r3, #173	; 0xad
 800eb1e:	bf04      	itt	eq
 800eb20:	f64f 63ff 	movweq	r3, #65279	; 0xfeff
 800eb24:	8033      	strheq	r3, [r6, #0]
 800eb26:	1b63      	subs	r3, r4, r5
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	dc33      	bgt.n	800eb94 <EwParseFlowString+0x4d4>
 800eb2c:	9b08      	ldr	r3, [sp, #32]
 800eb2e:	ea4f 08a3 	mov.w	r8, r3, asr #2
 800eb32:	f108 0802 	add.w	r8, r8, #2
 800eb36:	eb03 0708 	add.w	r7, r3, r8
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f00d fc3f 	bl	801c3c0 <EwNewStringChar>
 800eb42:	4606      	mov	r6, r0
 800eb44:	2800      	cmp	r0, #0
 800eb46:	f43f adfa 	beq.w	800e73e <EwParseFlowString+0x7e>
 800eb4a:	eba5 0509 	sub.w	r5, r5, r9
 800eb4e:	462a      	mov	r2, r5
 800eb50:	4649      	mov	r1, r9
 800eb52:	f01a fe3d 	bl	80297d0 <EwCopy>
 800eb56:	9b08      	ldr	r3, [sp, #32]
 800eb58:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 800eb5c:	1b12      	subs	r2, r2, r4
 800eb5e:	ebc2 0047 	rsb	r0, r2, r7, lsl #1
 800eb62:	4621      	mov	r1, r4
 800eb64:	4430      	add	r0, r6
 800eb66:	f01a fe33 	bl	80297d0 <EwCopy>
 800eb6a:	9b04      	ldr	r3, [sp, #16]
 800eb6c:	9708      	str	r7, [sp, #32]
 800eb6e:	eba3 0309 	sub.w	r3, r3, r9
 800eb72:	18f3      	adds	r3, r6, r3
 800eb74:	9304      	str	r3, [sp, #16]
 800eb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb78:	eba4 0409 	sub.w	r4, r4, r9
 800eb7c:	eba3 0909 	sub.w	r9, r3, r9
 800eb80:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800eb84:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800eb88:	eb06 0308 	add.w	r3, r6, r8
 800eb8c:	4435      	add	r5, r6
 800eb8e:	4434      	add	r4, r6
 800eb90:	9309      	str	r3, [sp, #36]	; 0x24
 800eb92:	46b1      	mov	r9, r6
 800eb94:	9b04      	ldr	r3, [sp, #16]
 800eb96:	1aee      	subs	r6, r5, r3
 800eb98:	1076      	asrs	r6, r6, #1
 800eb9a:	f1ba 0f00 	cmp.w	sl, #0
 800eb9e:	d011      	beq.n	800ebc4 <EwParseFlowString+0x504>
 800eba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba2:	1ae1      	subs	r1, r4, r3
 800eba4:	104a      	asrs	r2, r1, #1
 800eba6:	ebc6 0161 	rsb	r1, r6, r1, asr #1
 800ebaa:	3101      	adds	r1, #1
 800ebac:	4650      	mov	r0, sl
 800ebae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ebb2:	f003 f9e0 	bl	8011f76 <EwBidiCompleteRow>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	4650      	mov	r0, sl
 800ebc0:	f003 fa04 	bl	8011fcc <EwBidiReorderChars>
 800ebc4:	9b04      	ldr	r3, [sp, #16]
 800ebc6:	9504      	str	r5, [sp, #16]
 800ebc8:	801e      	strh	r6, [r3, #0]
 800ebca:	462b      	mov	r3, r5
 800ebcc:	f04f 0200 	mov.w	r2, #0
 800ebd0:	f823 2b02 	strh.w	r2, [r3], #2
 800ebd4:	9a06      	ldr	r2, [sp, #24]
 800ebd6:	2700      	movs	r7, #0
 800ebd8:	3201      	adds	r2, #1
 800ebda:	461d      	mov	r5, r3
 800ebdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe0:	9206      	str	r2, [sp, #24]
 800ebe2:	9703      	str	r7, [sp, #12]
 800ebe4:	9305      	str	r3, [sp, #20]
 800ebe6:	46bb      	mov	fp, r7
 800ebe8:	463e      	mov	r6, r7
 800ebea:	9702      	str	r7, [sp, #8]
 800ebec:	e5e7      	b.n	800e7be <EwParseFlowString+0xfe>
 800ebee:	9c07      	ldr	r4, [sp, #28]
 800ebf0:	e7fb      	b.n	800ebea <EwParseFlowString+0x52a>
 800ebf2:	f64f 68ff 	movw	r8, #65279	; 0xfeff
 800ebf6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ebfa:	4598      	cmp	r8, r3
 800ebfc:	f43f aed8 	beq.w	800e9b0 <EwParseFlowString+0x2f0>
 800ec00:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ec02:	aa0f      	add	r2, sp, #60	; 0x3c
 800ec04:	4641      	mov	r1, r8
 800ec06:	f7fe fbaa 	bl	800d35e <EwGetGlyphMetrics>
 800ec0a:	4607      	mov	r7, r0
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	f43f aead 	beq.w	800e96c <EwParseFlowString+0x2ac>
 800ec12:	f1ba 0f00 	cmp.w	sl, #0
 800ec16:	f43f af1b 	beq.w	800ea50 <EwParseFlowString+0x390>
 800ec1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec1c:	1ae1      	subs	r1, r4, r3
 800ec1e:	1049      	asrs	r1, r1, #1
 800ec20:	4650      	mov	r0, sl
 800ec22:	f002 f9e5 	bl	8010ff0 <EwBidiGetCharLevel>
 800ec26:	9b05      	ldr	r3, [sp, #20]
 800ec28:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ec2a:	4283      	cmp	r3, r0
 800ec2c:	f47f af14 	bne.w	800ea58 <EwParseFlowString+0x398>
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	ee18 0a10 	vmov	r0, s16
 800ec36:	bf47      	ittee	mi
 800ec38:	465a      	movmi	r2, fp
 800ec3a:	4641      	movmi	r1, r8
 800ec3c:	4642      	movpl	r2, r8
 800ec3e:	4659      	movpl	r1, fp
 800ec40:	f008 ffd4 	bl	8017bec <EwFntGetKerning>
 800ec44:	4407      	add	r7, r0
 800ec46:	46c3      	mov	fp, r8
 800ec48:	e690      	b.n	800e96c <EwParseFlowString+0x2ac>

0800ec4a <EwGetFlowTextAdvance>:
 800ec4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec4e:	4607      	mov	r7, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	4688      	mov	r8, r1
 800ec54:	f00d fd8c 	bl	801c770 <EwGetStringLength>
 800ec58:	4606      	mov	r6, r0
 800ec5a:	b918      	cbnz	r0, 800ec64 <EwGetFlowTextAdvance+0x1a>
 800ec5c:	2500      	movs	r5, #0
 800ec5e:	4628      	mov	r0, r5
 800ec60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec64:	b9cf      	cbnz	r7, 800ec9a <EwGetFlowTextAdvance+0x50>
 800ec66:	20c9      	movs	r0, #201	; 0xc9
 800ec68:	f00a f81e 	bl	8018ca8 <EwError>
 800ec6c:	e7f6      	b.n	800ec5c <EwGetFlowTextAdvance+0x12>
 800ec6e:	f838 9014 	ldrh.w	r9, [r8, r4, lsl #1]
 800ec72:	eb04 0309 	add.w	r3, r4, r9
 800ec76:	42b3      	cmp	r3, r6
 800ec78:	ea4f 0144 	mov.w	r1, r4, lsl #1
 800ec7c:	f109 32ff 	add.w	r2, r9, #4294967295
 800ec80:	dcec      	bgt.n	800ec5c <EwGetFlowTextAdvance+0x12>
 800ec82:	3102      	adds	r1, #2
 800ec84:	4441      	add	r1, r8
 800ec86:	4638      	mov	r0, r7
 800ec88:	f7fd fdbf 	bl	800c80a <EwGetTextAdvance>
 800ec8c:	4285      	cmp	r5, r0
 800ec8e:	bfb8      	it	lt
 800ec90:	4605      	movlt	r5, r0
 800ec92:	444c      	add	r4, r9
 800ec94:	42b4      	cmp	r4, r6
 800ec96:	dbea      	blt.n	800ec6e <EwGetFlowTextAdvance+0x24>
 800ec98:	e7e1      	b.n	800ec5e <EwGetFlowTextAdvance+0x14>
 800ec9a:	2500      	movs	r5, #0
 800ec9c:	2401      	movs	r4, #1
 800ec9e:	e7f9      	b.n	800ec94 <EwGetFlowTextAdvance+0x4a>

0800eca0 <EwCreateAttrSet>:
 800eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca4:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
 800eca8:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 800ecac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800ecb0:	ea22 78e2 	bic.w	r8, r2, r2, asr #31
 800ecb4:	bfa8      	it	ge
 800ecb6:	f44f 7780 	movge.w	r7, #256	; 0x100
 800ecba:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800ecbe:	bfa8      	it	ge
 800ecc0:	f44f 7680 	movge.w	r6, #256	; 0x100
 800ecc4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 800ecc8:	bfa8      	it	ge
 800ecca:	f44f 7880 	movge.w	r8, #256	; 0x100
 800ecce:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800ecd2:	3118      	adds	r1, #24
 800ecd4:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ecd8:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800ecdc:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800ece0:	eb01 0487 	add.w	r4, r1, r7, lsl #2
 800ece4:	4620      	mov	r0, r4
 800ece6:	f01a fd43 	bl	8029770 <EwAlloc>
 800ecea:	4605      	mov	r5, r0
 800ecec:	b940      	cbnz	r0, 800ed00 <EwCreateAttrSet+0x60>
 800ecee:	2013      	movs	r0, #19
 800ecf0:	f00a ff8a 	bl	8019c08 <EwImmediateReclaimMemory>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d1f5      	bne.n	800ece4 <EwCreateAttrSet+0x44>
 800ecf8:	2013      	movs	r0, #19
 800ecfa:	f009 ffd5 	bl	8018ca8 <EwError>
 800ecfe:	e021      	b.n	800ed44 <EwCreateAttrSet+0xa4>
 800ed00:	4621      	mov	r1, r4
 800ed02:	f01a fd5d 	bl	80297c0 <EwZero>
 800ed06:	f105 0318 	add.w	r3, r5, #24
 800ed0a:	60eb      	str	r3, [r5, #12]
 800ed0c:	4453      	add	r3, sl
 800ed0e:	612b      	str	r3, [r5, #16]
 800ed10:	444b      	add	r3, r9
 800ed12:	616b      	str	r3, [r5, #20]
 800ed14:	4b0d      	ldr	r3, [pc, #52]	; (800ed4c <EwCreateAttrSet+0xac>)
 800ed16:	f8c5 8008 	str.w	r8, [r5, #8]
 800ed1a:	6819      	ldr	r1, [r3, #0]
 800ed1c:	4421      	add	r1, r4
 800ed1e:	e9c5 7600 	strd	r7, r6, [r5]
 800ed22:	6019      	str	r1, [r3, #0]
 800ed24:	4b0a      	ldr	r3, [pc, #40]	; (800ed50 <EwCreateAttrSet+0xb0>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	4291      	cmp	r1, r2
 800ed2a:	dd00      	ble.n	800ed2e <EwCreateAttrSet+0x8e>
 800ed2c:	6019      	str	r1, [r3, #0]
 800ed2e:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <EwCreateAttrSet+0xb4>)
 800ed30:	4a09      	ldr	r2, [pc, #36]	; (800ed58 <EwCreateAttrSet+0xb8>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6812      	ldr	r2, [r2, #0]
 800ed36:	4413      	add	r3, r2
 800ed38:	4419      	add	r1, r3
 800ed3a:	4b08      	ldr	r3, [pc, #32]	; (800ed5c <EwCreateAttrSet+0xbc>)
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4291      	cmp	r1, r2
 800ed40:	dd00      	ble.n	800ed44 <EwCreateAttrSet+0xa4>
 800ed42:	6019      	str	r1, [r3, #0]
 800ed44:	4628      	mov	r0, r5
 800ed46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200002e8 	.word	0x200002e8
 800ed50:	20000304 	.word	0x20000304
 800ed54:	200002d8 	.word	0x200002d8
 800ed58:	200002e4 	.word	0x200002e4
 800ed5c:	200002ec 	.word	0x200002ec

0800ed60 <EwFreeAttrSet>:
 800ed60:	b410      	push	{r4}
 800ed62:	b1b8      	cbz	r0, 800ed94 <EwFreeAttrSet+0x34>
 800ed64:	490d      	ldr	r1, [pc, #52]	; (800ed9c <EwFreeAttrSet+0x3c>)
 800ed66:	6804      	ldr	r4, [r0, #0]
 800ed68:	680a      	ldr	r2, [r1, #0]
 800ed6a:	3a18      	subs	r2, #24
 800ed6c:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 800ed70:	6844      	ldr	r4, [r0, #4]
 800ed72:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 800ed76:	6884      	ldr	r4, [r0, #8]
 800ed78:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 800ed7c:	600a      	str	r2, [r1, #0]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	e9c0 2200 	strd	r2, r2, [r0]
 800ed84:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800ed88:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800ed8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed90:	f01a bcf0 	b.w	8029774 <EwFree>
 800ed94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	200002e8 	.word	0x200002e8

0800eda0 <EwGetNoOfAttrFonts>:
 800eda0:	b100      	cbz	r0, 800eda4 <EwGetNoOfAttrFonts+0x4>
 800eda2:	6800      	ldr	r0, [r0, #0]
 800eda4:	4770      	bx	lr

0800eda6 <EwGetNoOfAttrBitmaps>:
 800eda6:	b100      	cbz	r0, 800edaa <EwGetNoOfAttrBitmaps+0x4>
 800eda8:	6840      	ldr	r0, [r0, #4]
 800edaa:	4770      	bx	lr

0800edac <EwGetNoOfAttrColors>:
 800edac:	b100      	cbz	r0, 800edb0 <EwGetNoOfAttrColors+0x4>
 800edae:	6880      	ldr	r0, [r0, #8]
 800edb0:	4770      	bx	lr

0800edb2 <EwGetAttrFont>:
 800edb2:	b148      	cbz	r0, 800edc8 <EwGetAttrFont+0x16>
 800edb4:	2900      	cmp	r1, #0
 800edb6:	db06      	blt.n	800edc6 <EwGetAttrFont+0x14>
 800edb8:	6803      	ldr	r3, [r0, #0]
 800edba:	428b      	cmp	r3, r1
 800edbc:	dd03      	ble.n	800edc6 <EwGetAttrFont+0x14>
 800edbe:	68c3      	ldr	r3, [r0, #12]
 800edc0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800edc4:	4770      	bx	lr
 800edc6:	2000      	movs	r0, #0
 800edc8:	4770      	bx	lr

0800edca <EwGetAttrBitmap>:
 800edca:	b148      	cbz	r0, 800ede0 <EwGetAttrBitmap+0x16>
 800edcc:	2900      	cmp	r1, #0
 800edce:	db06      	blt.n	800edde <EwGetAttrBitmap+0x14>
 800edd0:	6843      	ldr	r3, [r0, #4]
 800edd2:	428b      	cmp	r3, r1
 800edd4:	dd03      	ble.n	800edde <EwGetAttrBitmap+0x14>
 800edd6:	6903      	ldr	r3, [r0, #16]
 800edd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800eddc:	4770      	bx	lr
 800edde:	2000      	movs	r0, #0
 800ede0:	4770      	bx	lr
 800ede2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede6:	ed2d 8b02 	vpush	{d8}
 800edea:	b0b5      	sub	sp, #212	; 0xd4
 800edec:	ee08 0a10 	vmov	s16, r0
 800edf0:	4d9d      	ldr	r5, [pc, #628]	; (800f068 <EwGetAttrBitmap+0x29e>)
 800edf2:	4e9e      	ldr	r6, [pc, #632]	; (800f06c <EwGetAttrBitmap+0x2a2>)
 800edf4:	4f9e      	ldr	r7, [pc, #632]	; (800f070 <EwGetAttrBitmap+0x2a6>)
 800edf6:	9224      	str	r2, [sp, #144]	; 0x90
 800edf8:	460c      	mov	r4, r1
 800edfa:	9311      	str	r3, [sp, #68]	; 0x44
 800edfc:	910a      	str	r1, [sp, #40]	; 0x28
 800edfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	b1cb      	cbz	r3, 800ee38 <EwGetAttrBitmap+0x6e>
 800ee04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee06:	2b7b      	cmp	r3, #123	; 0x7b
 800ee08:	f102 0802 	add.w	r8, r2, #2
 800ee0c:	d163      	bne.n	800eed6 <EwGetAttrBitmap+0x10c>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4640      	mov	r0, r8
 800ee12:	f7ff fb4f 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ee16:	b978      	cbnz	r0, 800ee38 <EwGetAttrBitmap+0x6e>
 800ee18:	4631      	mov	r1, r6
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	f7ff fb4a 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ee20:	b950      	cbnz	r0, 800ee38 <EwGetAttrBitmap+0x6e>
 800ee22:	4639      	mov	r1, r7
 800ee24:	4640      	mov	r0, r8
 800ee26:	f7ff fb45 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ee2a:	b928      	cbnz	r0, 800ee38 <EwGetAttrBitmap+0x6e>
 800ee2c:	4991      	ldr	r1, [pc, #580]	; (800f074 <EwGetAttrBitmap+0x2aa>)
 800ee2e:	4640      	mov	r0, r8
 800ee30:	f7ff fb40 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d057      	beq.n	800eee8 <EwGetAttrBitmap+0x11e>
 800ee38:	2100      	movs	r1, #0
 800ee3a:	ee18 0a10 	vmov	r0, s16
 800ee3e:	f7ff ffb8 	bl	800edb2 <EwGetAttrFont>
 800ee42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee44:	900c      	str	r0, [sp, #48]	; 0x30
 800ee46:	1b1e      	subs	r6, r3, r4
 800ee48:	1075      	asrs	r5, r6, #1
 800ee4a:	3501      	adds	r5, #1
 800ee4c:	00eb      	lsls	r3, r5, #3
 800ee4e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ee50:	00ad      	lsls	r5, r5, #2
 800ee52:	9105      	str	r1, [sp, #20]
 800ee54:	9109      	str	r1, [sp, #36]	; 0x24
 800ee56:	9104      	str	r1, [sp, #16]
 800ee58:	3602      	adds	r6, #2
 800ee5a:	9b04      	ldr	r3, [sp, #16]
 800ee5c:	b91b      	cbnz	r3, 800ee66 <EwGetAttrBitmap+0x9c>
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f01a fc86 	bl	8029770 <EwAlloc>
 800ee64:	9004      	str	r0, [sp, #16]
 800ee66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee68:	b91b      	cbnz	r3, 800ee72 <EwGetAttrBitmap+0xa8>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f01a fc80 	bl	8029770 <EwAlloc>
 800ee70:	9009      	str	r0, [sp, #36]	; 0x24
 800ee72:	9b05      	ldr	r3, [sp, #20]
 800ee74:	b91b      	cbnz	r3, 800ee7e <EwGetAttrBitmap+0xb4>
 800ee76:	4630      	mov	r0, r6
 800ee78:	f01a fc7a 	bl	8029770 <EwAlloc>
 800ee7c:	9005      	str	r0, [sp, #20]
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	b123      	cbz	r3, 800ee8c <EwGetAttrBitmap+0xc2>
 800ee82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee84:	b113      	cbz	r3, 800ee8c <EwGetAttrBitmap+0xc2>
 800ee86:	9b05      	ldr	r3, [sp, #20]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d131      	bne.n	800eef0 <EwGetAttrBitmap+0x126>
 800ee8c:	2017      	movs	r0, #23
 800ee8e:	f00a febb 	bl	8019c08 <EwImmediateReclaimMemory>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d1e1      	bne.n	800ee5a <EwGetAttrBitmap+0x90>
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	b11b      	cbz	r3, 800eea2 <EwGetAttrBitmap+0xd8>
 800ee9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9c:	b10b      	cbz	r3, 800eea2 <EwGetAttrBitmap+0xd8>
 800ee9e:	9b05      	ldr	r3, [sp, #20]
 800eea0:	bb33      	cbnz	r3, 800eef0 <EwGetAttrBitmap+0x126>
 800eea2:	2017      	movs	r0, #23
 800eea4:	f009 ff00 	bl	8018ca8 <EwError>
 800eea8:	9b04      	ldr	r3, [sp, #16]
 800eeaa:	b113      	cbz	r3, 800eeb2 <EwGetAttrBitmap+0xe8>
 800eeac:	4618      	mov	r0, r3
 800eeae:	f01a fc61 	bl	8029774 <EwFree>
 800eeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb4:	b113      	cbz	r3, 800eebc <EwGetAttrBitmap+0xf2>
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f01a fc5c 	bl	8029774 <EwFree>
 800eebc:	9b05      	ldr	r3, [sp, #20]
 800eebe:	b123      	cbz	r3, 800eeca <EwGetAttrBitmap+0x100>
 800eec0:	4618      	mov	r0, r3
 800eec2:	f01a fc57 	bl	8029774 <EwFree>
 800eec6:	2300      	movs	r3, #0
 800eec8:	9305      	str	r3, [sp, #20]
 800eeca:	9805      	ldr	r0, [sp, #20]
 800eecc:	b035      	add	sp, #212	; 0xd4
 800eece:	ecbd 8b02 	vpop	{d8}
 800eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eed8:	2b25      	cmp	r3, #37	; 0x25
 800eeda:	8852      	ldrh	r2, [r2, #2]
 800eedc:	d104      	bne.n	800eee8 <EwGetAttrBitmap+0x11e>
 800eede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	bf18      	it	ne
 800eee4:	4643      	movne	r3, r8
 800eee6:	930a      	str	r3, [sp, #40]	; 0x28
 800eee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeea:	3302      	adds	r3, #2
 800eeec:	930a      	str	r3, [sp, #40]	; 0x28
 800eeee:	e786      	b.n	800edfe <EwGetAttrBitmap+0x34>
 800eef0:	4961      	ldr	r1, [pc, #388]	; (800f078 <EwGetAttrBitmap+0x2ae>)
 800eef2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800eef4:	680b      	ldr	r3, [r1, #0]
 800eef6:	9e05      	ldr	r6, [sp, #20]
 800eef8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eefa:	9d04      	ldr	r5, [sp, #16]
 800eefc:	f8df b194 	ldr.w	fp, [pc, #404]	; 800f094 <EwGetAttrBitmap+0x2ca>
 800ef00:	441a      	add	r2, r3
 800ef02:	4b5e      	ldr	r3, [pc, #376]	; (800f07c <EwGetAttrBitmap+0x2b2>)
 800ef04:	600a      	str	r2, [r1, #0]
 800ef06:	6819      	ldr	r1, [r3, #0]
 800ef08:	428a      	cmp	r2, r1
 800ef0a:	bfc8      	it	gt
 800ef0c:	601a      	strgt	r2, [r3, #0]
 800ef0e:	495c      	ldr	r1, [pc, #368]	; (800f080 <EwGetAttrBitmap+0x2b6>)
 800ef10:	4b5c      	ldr	r3, [pc, #368]	; (800f084 <EwGetAttrBitmap+0x2ba>)
 800ef12:	6809      	ldr	r1, [r1, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	440b      	add	r3, r1
 800ef18:	4413      	add	r3, r2
 800ef1a:	4a5b      	ldr	r2, [pc, #364]	; (800f088 <EwGetAttrBitmap+0x2be>)
 800ef1c:	6811      	ldr	r1, [r2, #0]
 800ef1e:	428b      	cmp	r3, r1
 800ef20:	bfc8      	it	gt
 800ef22:	6013      	strgt	r3, [r2, #0]
 800ef24:	2300      	movs	r3, #0
 800ef26:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
 800ef2a:	9310      	str	r3, [sp, #64]	; 0x40
 800ef2c:	4698      	mov	r8, r3
 800ef2e:	469a      	mov	sl, r3
 800ef30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef32:	42a3      	cmp	r3, r4
 800ef34:	d83c      	bhi.n	800efb0 <EwGetAttrBitmap+0x1e6>
 800ef36:	2300      	movs	r3, #0
 800ef38:	802b      	strh	r3, [r5, #0]
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	8033      	strh	r3, [r6, #0]
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	1aeb      	subs	r3, r5, r3
 800ef42:	105b      	asrs	r3, r3, #1
 800ef44:	ee08 3a90 	vmov	s17, r3
 800ef48:	9b04      	ldr	r3, [sp, #16]
 800ef4a:	42ab      	cmp	r3, r5
 800ef4c:	f040 8145 	bne.w	800f1da <EwGetAttrBitmap+0x410>
 800ef50:	f04f 0900 	mov.w	r9, #0
 800ef54:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800ef58:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800ef60:	930e      	str	r3, [sp, #56]	; 0x38
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	9315      	str	r3, [sp, #84]	; 0x54
 800ef66:	9325      	str	r3, [sp, #148]	; 0x94
 800ef68:	931e      	str	r3, [sp, #120]	; 0x78
 800ef6a:	9303      	str	r3, [sp, #12]
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	ee18 2a90 	vmov	r2, s17
 800ef72:	4293      	cmp	r3, r2
 800ef74:	f2c0 8156 	blt.w	800f224 <EwGetAttrBitmap+0x45a>
 800ef78:	9804      	ldr	r0, [sp, #16]
 800ef7a:	f01a fbfb 	bl	8029774 <EwFree>
 800ef7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef80:	f01a fbf8 	bl	8029774 <EwFree>
 800ef84:	9805      	ldr	r0, [sp, #20]
 800ef86:	f01a fbf5 	bl	8029774 <EwFree>
 800ef8a:	4a3b      	ldr	r2, [pc, #236]	; (800f078 <EwGetAttrBitmap+0x2ae>)
 800ef8c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ef8e:	6813      	ldr	r3, [r2, #0]
 800ef90:	1a5b      	subs	r3, r3, r1
 800ef92:	6013      	str	r3, [r2, #0]
 800ef94:	f1b9 0f00 	cmp.w	r9, #0
 800ef98:	d002      	beq.n	800efa0 <EwGetAttrBitmap+0x1d6>
 800ef9a:	4648      	mov	r0, r9
 800ef9c:	f002 f80e 	bl	8010fbc <EwFreeBidi>
 800efa0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800efa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4413      	add	r3, r2
 800efa8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efae:	e78b      	b.n	800eec8 <EwGetAttrBitmap+0xfe>
 800efb0:	f8b4 9000 	ldrh.w	r9, [r4]
 800efb4:	f1b9 0f7b 	cmp.w	r9, #123	; 0x7b
 800efb8:	f040 80d7 	bne.w	800f16a <EwGetAttrBitmap+0x3a0>
 800efbc:	4933      	ldr	r1, [pc, #204]	; (800f08c <EwGetAttrBitmap+0x2c2>)
 800efbe:	4620      	mov	r0, r4
 800efc0:	f7ff fa78 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d067      	beq.n	800f098 <EwGetAttrBitmap+0x2ce>
 800efc8:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800efcc:	2300      	movs	r3, #0
 800efce:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
 800efd2:	f1a9 0362 	sub.w	r3, r9, #98	; 0x62
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	2b12      	cmp	r3, #18
 800efda:	d804      	bhi.n	800efe6 <EwGetAttrBitmap+0x21c>
 800efdc:	4a2c      	ldr	r2, [pc, #176]	; (800f090 <EwGetAttrBitmap+0x2c6>)
 800efde:	fa22 f303 	lsr.w	r3, r2, r3
 800efe2:	07da      	lsls	r2, r3, #31
 800efe4:	d43b      	bmi.n	800f05e <EwGetAttrBitmap+0x294>
 800efe6:	f104 0008 	add.w	r0, r4, #8
 800efea:	f04f 096d 	mov.w	r9, #109	; 0x6d
 800efee:	a92e      	add	r1, sp, #184	; 0xb8
 800eff0:	f7ff fa02 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800eff4:	8803      	ldrh	r3, [r0, #0]
 800eff6:	2b2e      	cmp	r3, #46	; 0x2e
 800eff8:	d103      	bne.n	800f002 <EwGetAttrBitmap+0x238>
 800effa:	a92f      	add	r1, sp, #188	; 0xbc
 800effc:	3002      	adds	r0, #2
 800effe:	f7ff f9fb 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800f002:	8803      	ldrh	r3, [r0, #0]
 800f004:	2b7d      	cmp	r3, #125	; 0x7d
 800f006:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800f008:	bf08      	it	eq
 800f00a:	3002      	addeq	r0, #2
 800f00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f010:	bfa4      	itt	ge
 800f012:	2300      	movge	r3, #0
 800f014:	932f      	strge	r3, [sp, #188]	; 0xbc
 800f016:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f018:	2bff      	cmp	r3, #255	; 0xff
 800f01a:	bfc4      	itt	gt
 800f01c:	2300      	movgt	r3, #0
 800f01e:	932e      	strgt	r3, [sp, #184]	; 0xb8
 800f020:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f024:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
 800f028:	f825 3b02 	strh.w	r3, [r5], #2
 800f02c:	d01a      	beq.n	800f064 <EwGetAttrBitmap+0x29a>
 800f02e:	f1b9 0f62 	cmp.w	r9, #98	; 0x62
 800f032:	bf0c      	ite	eq
 800f034:	2204      	moveq	r2, #4
 800f036:	2203      	movne	r2, #3
 800f038:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f03a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800f03c:	031b      	lsls	r3, r3, #12
 800f03e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800f042:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800f044:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
 800f048:	430a      	orrs	r2, r1
 800f04a:	f847 2b04 	str.w	r2, [r7], #4
 800f04e:	f1b8 0f00 	cmp.w	r8, #0
 800f052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f054:	bf08      	it	eq
 800f056:	2300      	moveq	r3, #0
 800f058:	f826 3b02 	strh.w	r3, [r6], #2
 800f05c:	e02f      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f05e:	f104 000a 	add.w	r0, r4, #10
 800f062:	e7c4      	b.n	800efee <EwGetAttrBitmap+0x224>
 800f064:	2205      	movs	r2, #5
 800f066:	e7e7      	b.n	800f038 <EwGetAttrBitmap+0x26e>
 800f068:	08039b81 	.word	0x08039b81
 800f06c:	08039b86 	.word	0x08039b86
 800f070:	08039b8b 	.word	0x08039b8b
 800f074:	08039b55 	.word	0x08039b55
 800f078:	200002e8 	.word	0x200002e8
 800f07c:	20000304 	.word	0x20000304
 800f080:	200002e4 	.word	0x200002e4
 800f084:	200002d8 	.word	0x200002d8
 800f088:	200002ec 	.word	0x200002ec
 800f08c:	08039b59 	.word	0x08039b59
 800f090:	00040801 	.word	0x00040801
 800f094:	08039b63 	.word	0x08039b63
 800f098:	495d      	ldr	r1, [pc, #372]	; (800f210 <EwGetAttrBitmap+0x446>)
 800f09a:	4620      	mov	r0, r4
 800f09c:	f7ff fa0a 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f0a0:	b178      	cbz	r0, 800f0c2 <EwGetAttrBitmap+0x2f8>
 800f0a2:	a92d      	add	r1, sp, #180	; 0xb4
 800f0a4:	f104 0008 	add.w	r0, r4, #8
 800f0a8:	f7ff f9a6 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800f0ac:	8803      	ldrh	r3, [r0, #0]
 800f0ae:	2b7d      	cmp	r3, #125	; 0x7d
 800f0b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f0b2:	bf08      	it	eq
 800f0b4:	3002      	addeq	r0, #2
 800f0b6:	2bff      	cmp	r3, #255	; 0xff
 800f0b8:	dd01      	ble.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	932d      	str	r3, [sp, #180]	; 0xb4
 800f0be:	4604      	mov	r4, r0
 800f0c0:	e736      	b.n	800ef30 <EwGetAttrBitmap+0x166>
 800f0c2:	4659      	mov	r1, fp
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7ff f9f5 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f0ca:	b170      	cbz	r0, 800f0ea <EwGetAttrBitmap+0x320>
 800f0cc:	a92c      	add	r1, sp, #176	; 0xb0
 800f0ce:	f104 0008 	add.w	r0, r4, #8
 800f0d2:	f7ff f991 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800f0d6:	8803      	ldrh	r3, [r0, #0]
 800f0d8:	2b7d      	cmp	r3, #125	; 0x7d
 800f0da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800f0dc:	bf08      	it	eq
 800f0de:	3002      	addeq	r0, #2
 800f0e0:	2bff      	cmp	r3, #255	; 0xff
 800f0e2:	ddec      	ble.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	932c      	str	r3, [sp, #176]	; 0xb0
 800f0e8:	e7e9      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f0ea:	494a      	ldr	r1, [pc, #296]	; (800f214 <EwGetAttrBitmap+0x44a>)
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7ff f9e1 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f0f2:	b120      	cbz	r0, 800f0fe <EwGetAttrBitmap+0x334>
 800f0f4:	f104 000a 	add.w	r0, r4, #10
 800f0f8:	f04f 0a01 	mov.w	sl, #1
 800f0fc:	e7df      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f0fe:	9003      	str	r0, [sp, #12]
 800f100:	4945      	ldr	r1, [pc, #276]	; (800f218 <EwGetAttrBitmap+0x44e>)
 800f102:	4620      	mov	r0, r4
 800f104:	f7ff f9d6 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f108:	b120      	cbz	r0, 800f114 <EwGetAttrBitmap+0x34a>
 800f10a:	9b03      	ldr	r3, [sp, #12]
 800f10c:	f104 000a 	add.w	r0, r4, #10
 800f110:	469a      	mov	sl, r3
 800f112:	e7d4      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f114:	4941      	ldr	r1, [pc, #260]	; (800f21c <EwGetAttrBitmap+0x452>)
 800f116:	4620      	mov	r0, r4
 800f118:	f7ff f9cc 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f11c:	b1d0      	cbz	r0, 800f154 <EwGetAttrBitmap+0x38a>
 800f11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f120:	3301      	adds	r3, #1
 800f122:	f104 000a 	add.w	r0, r4, #10
 800f126:	9310      	str	r3, [sp, #64]	; 0x40
 800f128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f12a:	8803      	ldrh	r3, [r0, #0]
 800f12c:	4282      	cmp	r2, r0
 800f12e:	d90d      	bls.n	800f14c <EwGetAttrBitmap+0x382>
 800f130:	2b7d      	cmp	r3, #125	; 0x7d
 800f132:	d00d      	beq.n	800f150 <EwGetAttrBitmap+0x386>
 800f134:	2b7b      	cmp	r3, #123	; 0x7b
 800f136:	d102      	bne.n	800f13e <EwGetAttrBitmap+0x374>
 800f138:	f04f 0801 	mov.w	r8, #1
 800f13c:	e7bf      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f13e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800f140:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3301      	adds	r3, #1
 800f146:	3002      	adds	r0, #2
 800f148:	6013      	str	r3, [r2, #0]
 800f14a:	e7ed      	b.n	800f128 <EwGetAttrBitmap+0x35e>
 800f14c:	2b7d      	cmp	r3, #125	; 0x7d
 800f14e:	d1f3      	bne.n	800f138 <EwGetAttrBitmap+0x36e>
 800f150:	3002      	adds	r0, #2
 800f152:	e7f1      	b.n	800f138 <EwGetAttrBitmap+0x36e>
 800f154:	9003      	str	r0, [sp, #12]
 800f156:	4932      	ldr	r1, [pc, #200]	; (800f220 <EwGetAttrBitmap+0x456>)
 800f158:	4620      	mov	r0, r4
 800f15a:	f7ff f9ab 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	b330      	cbz	r0, 800f1b0 <EwGetAttrBitmap+0x3e6>
 800f162:	f104 000a 	add.w	r0, r4, #10
 800f166:	4698      	mov	r8, r3
 800f168:	e7a9      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f16a:	f1b9 0f5e 	cmp.w	r9, #94	; 0x5e
 800f16e:	f104 0002 	add.w	r0, r4, #2
 800f172:	d10e      	bne.n	800f192 <EwGetAttrBitmap+0x3c8>
 800f174:	f242 030b 	movw	r3, #8203	; 0x200b
 800f178:	f825 3b02 	strh.w	r3, [r5], #2
 800f17c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f17e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f180:	031b      	lsls	r3, r3, #12
 800f182:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f186:	f10a 0201 	add.w	r2, sl, #1
 800f18a:	4313      	orrs	r3, r2
 800f18c:	f847 3b04 	str.w	r3, [r7], #4
 800f190:	e75d      	b.n	800f04e <EwGetAttrBitmap+0x284>
 800f192:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800f196:	d101      	bne.n	800f19c <EwGetAttrBitmap+0x3d2>
 800f198:	23ad      	movs	r3, #173	; 0xad
 800f19a:	e7ed      	b.n	800f178 <EwGetAttrBitmap+0x3ae>
 800f19c:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
 800f1a0:	d106      	bne.n	800f1b0 <EwGetAttrBitmap+0x3e6>
 800f1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a4:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 800f1a8:	4283      	cmp	r3, r0
 800f1aa:	f43f aec4 	beq.w	800ef36 <EwGetAttrBitmap+0x16c>
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f1b2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f1b4:	f825 9b02 	strh.w	r9, [r5], #2
 800f1b8:	031b      	lsls	r3, r3, #12
 800f1ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f1be:	f10a 0201 	add.w	r2, sl, #1
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	f1b8 0f00 	cmp.w	r8, #0
 800f1c8:	f847 3b04 	str.w	r3, [r7], #4
 800f1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ce:	bf08      	it	eq
 800f1d0:	2300      	moveq	r3, #0
 800f1d2:	f826 3b02 	strh.w	r3, [r6], #2
 800f1d6:	1ca0      	adds	r0, r4, #2
 800f1d8:	e771      	b.n	800f0be <EwGetAttrBitmap+0x2f4>
 800f1da:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f43f aeb7 	beq.w	800ef50 <EwGetAttrBitmap+0x186>
 800f1e2:	ee18 0a90 	vmov	r0, s17
 800f1e6:	f001 feac 	bl	8010f42 <EwCreateBidi>
 800f1ea:	4681      	mov	r9, r0
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	f43f aeaf 	beq.w	800ef50 <EwGetAttrBitmap+0x186>
 800f1f2:	ee18 2a90 	vmov	r2, s17
 800f1f6:	9904      	ldr	r1, [sp, #16]
 800f1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fc:	f001 ff06 	bl	801100c <EwBidiInit>
 800f200:	2800      	cmp	r0, #0
 800f202:	f040 84f1 	bne.w	800fbe8 <EwGetAttrBitmap+0xe1e>
 800f206:	4648      	mov	r0, r9
 800f208:	f001 fed8 	bl	8010fbc <EwFreeBidi>
 800f20c:	e6a0      	b.n	800ef50 <EwGetAttrBitmap+0x186>
 800f20e:	bf00      	nop
 800f210:	08039b5e 	.word	0x08039b5e
 800f214:	08039b68 	.word	0x08039b68
 800f218:	08039b6e 	.word	0x08039b6e
 800f21c:	08039b74 	.word	0x08039b74
 800f220:	08039b7a 	.word	0x08039b7a
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	932b      	str	r3, [sp, #172]	; 0xac
 800f22a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f22e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f232:	9317      	str	r3, [sp, #92]	; 0x5c
 800f234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f236:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f23a:	f04f 0a00 	mov.w	sl, #0
 800f23e:	f04f 32ff 	mov.w	r2, #4294967295
 800f242:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 800f246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f248:	9307      	str	r3, [sp, #28]
 800f24a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f24e:	4653      	mov	r3, sl
 800f250:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800f254:	f8cd a018 	str.w	sl, [sp, #24]
 800f258:	920b      	str	r2, [sp, #44]	; 0x2c
 800f25a:	46d0      	mov	r8, sl
 800f25c:	f8cd a020 	str.w	sl, [sp, #32]
 800f260:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800f264:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 800f268:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 800f26c:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 800f270:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 800f274:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
 800f278:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800f27c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800f280:	46d3      	mov	fp, sl
 800f282:	9226      	str	r2, [sp, #152]	; 0x98
 800f284:	4654      	mov	r4, sl
 800f286:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f288:	9212      	str	r2, [sp, #72]	; 0x48
 800f28a:	9a07      	ldr	r2, [sp, #28]
 800f28c:	8817      	ldrh	r7, [r2, #0]
 800f28e:	2f00      	cmp	r7, #0
 800f290:	d036      	beq.n	800f300 <EwGetAttrBitmap+0x536>
 800f292:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f294:	f852 5b04 	ldr.w	r5, [r2], #4
 800f298:	9229      	str	r2, [sp, #164]	; 0xa4
 800f29a:	f005 020f 	and.w	r2, r5, #15
 800f29e:	1e51      	subs	r1, r2, #1
 800f2a0:	2901      	cmp	r1, #1
 800f2a2:	d81c      	bhi.n	800f2de <EwGetAttrBitmap+0x514>
 800f2a4:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f2a6:	f3c5 3107 	ubfx	r1, r5, #12, #8
 800f2aa:	4281      	cmp	r1, r0
 800f2ac:	d017      	beq.n	800f2de <EwGetAttrBitmap+0x514>
 800f2ae:	ee18 0a10 	vmov	r0, s16
 800f2b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2b4:	9126      	str	r1, [sp, #152]	; 0x98
 800f2b6:	f7ff fd7c 	bl	800edb2 <EwGetAttrFont>
 800f2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2bc:	4604      	mov	r4, r0
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f040 8467 	bne.w	800fb92 <EwGetAttrBitmap+0xdc8>
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	ee18 0a10 	vmov	r0, s16
 800f2ca:	9314      	str	r3, [sp, #80]	; 0x50
 800f2cc:	f7ff fd71 	bl	800edb2 <EwGetAttrFont>
 800f2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2d8:	9126      	str	r1, [sp, #152]	; 0x98
 800f2da:	4604      	mov	r4, r0
 800f2dc:	4688      	mov	r8, r1
 800f2de:	2f0a      	cmp	r7, #10
 800f2e0:	d15d      	bne.n	800f39e <EwGetAttrBitmap+0x5d4>
 800f2e2:	b16c      	cbz	r4, 800f300 <EwGetAttrBitmap+0x536>
 800f2e4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800f2e8:	6821      	ldr	r1, [r4, #0]
 800f2ea:	4582      	cmp	sl, r0
 800f2ec:	bfb8      	it	lt
 800f2ee:	4682      	movlt	sl, r0
 800f2f0:	428b      	cmp	r3, r1
 800f2f2:	bfb8      	it	lt
 800f2f4:	460b      	movlt	r3, r1
 800f2f6:	9908      	ldr	r1, [sp, #32]
 800f2f8:	4291      	cmp	r1, r2
 800f2fa:	bfb8      	it	lt
 800f2fc:	4611      	movlt	r1, r2
 800f2fe:	9108      	str	r1, [sp, #32]
 800f300:	f1bb 0f00 	cmp.w	fp, #0
 800f304:	d007      	beq.n	800f316 <EwGetAttrBitmap+0x54c>
 800f306:	f8bb 2000 	ldrh.w	r2, [fp]
 800f30a:	2aad      	cmp	r2, #173	; 0xad
 800f30c:	d103      	bne.n	800f316 <EwGetAttrBitmap+0x54c>
 800f30e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f312:	f8ab 2000 	strh.w	r2, [fp]
 800f316:	9a08      	ldr	r2, [sp, #32]
 800f318:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f31a:	441a      	add	r2, r3
 800f31c:	4291      	cmp	r1, r2
 800f31e:	bfb8      	it	lt
 800f320:	4611      	movlt	r1, r2
 800f322:	1aca      	subs	r2, r1, r3
 800f324:	9116      	str	r1, [sp, #88]	; 0x58
 800f326:	9908      	ldr	r1, [sp, #32]
 800f328:	1a52      	subs	r2, r2, r1
 800f32a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f32e:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800f332:	931a      	str	r3, [sp, #104]	; 0x68
 800f334:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f336:	9b07      	ldr	r3, [sp, #28]
 800f338:	1a9b      	subs	r3, r3, r2
 800f33a:	105b      	asrs	r3, r3, #1
 800f33c:	9307      	str	r3, [sp, #28]
 800f33e:	f1b9 0f00 	cmp.w	r9, #0
 800f342:	d01b      	beq.n	800f37c <EwGetAttrBitmap+0x5b2>
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	9a07      	ldr	r2, [sp, #28]
 800f348:	4619      	mov	r1, r3
 800f34a:	189a      	adds	r2, r3, r2
 800f34c:	4648      	mov	r0, r9
 800f34e:	9208      	str	r2, [sp, #32]
 800f350:	f002 fe11 	bl	8011f76 <EwBidiCompleteRow>
 800f354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f356:	9a08      	ldr	r2, [sp, #32]
 800f358:	9903      	ldr	r1, [sp, #12]
 800f35a:	4648      	mov	r0, r9
 800f35c:	f002 fe36 	bl	8011fcc <EwBidiReorderChars>
 800f360:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f362:	9a08      	ldr	r2, [sp, #32]
 800f364:	9903      	ldr	r1, [sp, #12]
 800f366:	4648      	mov	r0, r9
 800f368:	f002 fe9b 	bl	80120a2 <EwBidiReorderDWords>
 800f36c:	9a05      	ldr	r2, [sp, #20]
 800f36e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f370:	9903      	ldr	r1, [sp, #12]
 800f372:	4413      	add	r3, r2
 800f374:	4648      	mov	r0, r9
 800f376:	9a08      	ldr	r2, [sp, #32]
 800f378:	f002 fe28 	bl	8011fcc <EwBidiReorderChars>
 800f37c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f37e:	2b61      	cmp	r3, #97	; 0x61
 800f380:	f040 81c8 	bne.w	800f714 <EwGetAttrBitmap+0x94a>
 800f384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f386:	2b00      	cmp	r3, #0
 800f388:	f040 81e0 	bne.w	800f74c <EwGetAttrBitmap+0x982>
 800f38c:	461d      	mov	r5, r3
 800f38e:	236c      	movs	r3, #108	; 0x6c
 800f390:	9308      	str	r3, [sp, #32]
 800f392:	2400      	movs	r4, #0
 800f394:	941b      	str	r4, [sp, #108]	; 0x6c
 800f396:	46a3      	mov	fp, r4
 800f398:	4626      	mov	r6, r4
 800f39a:	9414      	str	r4, [sp, #80]	; 0x50
 800f39c:	e3c0      	b.n	800fb20 <EwGetAttrBitmap+0xd56>
 800f39e:	3a03      	subs	r2, #3
 800f3a0:	9908      	ldr	r1, [sp, #32]
 800f3a2:	9121      	str	r1, [sp, #132]	; 0x84
 800f3a4:	2a02      	cmp	r2, #2
 800f3a6:	e9cd 3a1f 	strd	r3, sl, [sp, #124]	; 0x7c
 800f3aa:	f200 83fe 	bhi.w	800fbaa <EwGetAttrBitmap+0xde0>
 800f3ae:	ee18 0a10 	vmov	r0, s16
 800f3b2:	f3c5 3107 	ubfx	r1, r5, #12, #8
 800f3b6:	f7ff fd08 	bl	800edca <EwGetAttrBitmap>
 800f3ba:	b938      	cbnz	r0, 800f3cc <EwGetAttrBitmap+0x602>
 800f3bc:	4601      	mov	r1, r0
 800f3be:	ee18 0a10 	vmov	r0, s16
 800f3c2:	f7ff fd02 	bl	800edca <EwGetAttrBitmap>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	f000 816a 	beq.w	800f6a0 <EwGetAttrBitmap+0x8d6>
 800f3cc:	2600      	movs	r6, #0
 800f3ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f3d0:	9308      	str	r3, [sp, #32]
 800f3d2:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 800f3d6:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
 800f3da:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800f3de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f3e0:	9614      	str	r6, [sp, #80]	; 0x50
 800f3e2:	f04f 31ff 	mov.w	r1, #4294967295
 800f3e6:	910b      	str	r1, [sp, #44]	; 0x2c
 800f3e8:	46b0      	mov	r8, r6
 800f3ea:	e129      	b.n	800f640 <EwGetAttrBitmap+0x876>
 800f3ec:	2fad      	cmp	r7, #173	; 0xad
 800f3ee:	f040 8423 	bne.w	800fc38 <EwGetAttrBitmap+0xe6e>
 800f3f2:	9a06      	ldr	r2, [sp, #24]
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	f000 841a 	beq.w	800fc2e <EwGetAttrBitmap+0xe64>
 800f3fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3fc:	2a00      	cmp	r2, #0
 800f3fe:	f040 8416 	bne.w	800fc2e <EwGetAttrBitmap+0xe64>
 800f402:	2c00      	cmp	r4, #0
 800f404:	f040 80ad 	bne.w	800f562 <EwGetAttrBitmap+0x798>
 800f408:	2500      	movs	r5, #0
 800f40a:	9513      	str	r5, [sp, #76]	; 0x4c
 800f40c:	462f      	mov	r7, r5
 800f40e:	462e      	mov	r6, r5
 800f410:	9a06      	ldr	r2, [sp, #24]
 800f412:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f414:	18b2      	adds	r2, r6, r2
 800f416:	4291      	cmp	r1, r2
 800f418:	f2c0 8140 	blt.w	800f69c <EwGetAttrBitmap+0x8d2>
 800f41c:	b30e      	cbz	r6, 800f462 <EwGetAttrBitmap+0x698>
 800f41e:	f1bb 0f00 	cmp.w	fp, #0
 800f422:	d007      	beq.n	800f434 <EwGetAttrBitmap+0x66a>
 800f424:	f8bb 1000 	ldrh.w	r1, [fp]
 800f428:	29ad      	cmp	r1, #173	; 0xad
 800f42a:	bf04      	itt	eq
 800f42c:	f64f 61ff 	movweq	r1, #65279	; 0xfeff
 800f430:	f8ab 1000 	strheq.w	r1, [fp]
 800f434:	42bb      	cmp	r3, r7
 800f436:	bfb8      	it	lt
 800f438:	463b      	movlt	r3, r7
 800f43a:	4555      	cmp	r5, sl
 800f43c:	931c      	str	r3, [sp, #112]	; 0x70
 800f43e:	462b      	mov	r3, r5
 800f440:	bfb8      	it	lt
 800f442:	4653      	movlt	r3, sl
 800f444:	9908      	ldr	r1, [sp, #32]
 800f446:	931d      	str	r3, [sp, #116]	; 0x74
 800f448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f44a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800f44e:	428b      	cmp	r3, r1
 800f450:	bfb8      	it	lt
 800f452:	460b      	movlt	r3, r1
 800f454:	9318      	str	r3, [sp, #96]	; 0x60
 800f456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f458:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800f45c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f460:	2601      	movs	r6, #1
 800f462:	9d06      	ldr	r5, [sp, #24]
 800f464:	9613      	str	r6, [sp, #76]	; 0x4c
 800f466:	9b07      	ldr	r3, [sp, #28]
 800f468:	3302      	adds	r3, #2
 800f46a:	e9cd 5306 	strd	r5, r3, [sp, #24]
 800f46e:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f472:	9308      	str	r3, [sp, #32]
 800f474:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f476:	e706      	b.n	800f286 <EwGetAttrBitmap+0x4bc>
 800f478:	9a06      	ldr	r2, [sp, #24]
 800f47a:	2a00      	cmp	r2, #0
 800f47c:	f040 83a0 	bne.w	800fbc0 <EwGetAttrBitmap+0xdf6>
 800f480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f482:	9312      	str	r3, [sp, #72]	; 0x48
 800f484:	27a0      	movs	r7, #160	; 0xa0
 800f486:	f5a7 5301 	sub.w	r3, r7, #8256	; 0x2040
 800f48a:	3b26      	subs	r3, #38	; 0x26
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	2b03      	cmp	r3, #3
 800f490:	f240 83e9 	bls.w	800fc66 <EwGetAttrBitmap+0xe9c>
 800f494:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f498:	429f      	cmp	r7, r3
 800f49a:	f000 83e4 	beq.w	800fc66 <EwGetAttrBitmap+0xe9c>
 800f49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4a0:	9a07      	ldr	r2, [sp, #28]
 800f4a2:	455a      	cmp	r2, fp
 800f4a4:	bf18      	it	ne
 800f4a6:	2300      	movne	r3, #0
 800f4a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	f000 80ed 	beq.w	800f68a <EwGetAttrBitmap+0x8c0>
 800f4b0:	f242 0326 	movw	r3, #8230	; 0x2026
 800f4b4:	429f      	cmp	r7, r3
 800f4b6:	f040 835b 	bne.w	800fb70 <EwGetAttrBitmap+0xda6>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7fd ff2b 	bl	800d318 <EwIsGlyphAvailable>
 800f4c2:	9014      	str	r0, [sp, #80]	; 0x50
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f040 8353 	bne.w	800fb70 <EwGetAttrBitmap+0xda6>
 800f4ca:	aa2f      	add	r2, sp, #188	; 0xbc
 800f4cc:	212e      	movs	r1, #46	; 0x2e
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7fd ff45 	bl	800d35e <EwGetGlyphMetrics>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f000 834b 	beq.w	800fb70 <EwGetAttrBitmap+0xda6>
 800f4da:	f1b9 0f00 	cmp.w	r9, #0
 800f4de:	d072      	beq.n	800f5c6 <EwGetAttrBitmap+0x7fc>
 800f4e0:	9b07      	ldr	r3, [sp, #28]
 800f4e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4e4:	1a99      	subs	r1, r3, r2
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	4648      	mov	r0, r9
 800f4ea:	eb03 0161 	add.w	r1, r3, r1, asr #1
 800f4ee:	f001 fd7f 	bl	8010ff0 <EwBidiGetCharLevel>
 800f4f2:	4682      	mov	sl, r0
 800f4f4:	222e      	movs	r2, #46	; 0x2e
 800f4f6:	6960      	ldr	r0, [r4, #20]
 800f4f8:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	f008 fb76 	bl	8017bec <EwFntGetKerning>
 800f500:	6823      	ldr	r3, [r4, #0]
 800f502:	931a      	str	r3, [sp, #104]	; 0x68
 800f504:	6863      	ldr	r3, [r4, #4]
 800f506:	931b      	str	r3, [sp, #108]	; 0x6c
 800f508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f50a:	68a6      	ldr	r6, [r4, #8]
 800f50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f510:	4553      	cmp	r3, sl
 800f512:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 800f516:	d108      	bne.n	800f52a <EwGetAttrBitmap+0x760>
 800f518:	f01a 0701 	ands.w	r7, sl, #1
 800f51c:	6960      	ldr	r0, [r4, #20]
 800f51e:	d054      	beq.n	800f5ca <EwGetAttrBitmap+0x800>
 800f520:	4642      	mov	r2, r8
 800f522:	212e      	movs	r1, #46	; 0x2e
 800f524:	f008 fb62 	bl	8017bec <EwFntGetKerning>
 800f528:	4405      	add	r5, r0
 800f52a:	272e      	movs	r7, #46	; 0x2e
 800f52c:	e07d      	b.n	800f62a <EwGetAttrBitmap+0x860>
 800f52e:	f8bb 2000 	ldrh.w	r2, [fp]
 800f532:	2aad      	cmp	r2, #173	; 0xad
 800f534:	d103      	bne.n	800f53e <EwGetAttrBitmap+0x774>
 800f536:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f53a:	f8ab 2000 	strh.w	r2, [fp]
 800f53e:	931c      	str	r3, [sp, #112]	; 0x70
 800f540:	9b08      	ldr	r3, [sp, #32]
 800f542:	9318      	str	r3, [sp, #96]	; 0x60
 800f544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f546:	930f      	str	r3, [sp, #60]	; 0x3c
 800f548:	9b06      	ldr	r3, [sp, #24]
 800f54a:	9322      	str	r3, [sp, #136]	; 0x88
 800f54c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f54e:	9327      	str	r3, [sp, #156]	; 0x9c
 800f550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f552:	9323      	str	r3, [sp, #140]	; 0x8c
 800f554:	2301      	movs	r3, #1
 800f556:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800f55a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 800f55e:	9313      	str	r3, [sp, #76]	; 0x4c
 800f560:	e372      	b.n	800fc48 <EwGetAttrBitmap+0xe7e>
 800f562:	aa2f      	add	r2, sp, #188	; 0xbc
 800f564:	4639      	mov	r1, r7
 800f566:	4620      	mov	r0, r4
 800f568:	9313      	str	r3, [sp, #76]	; 0x4c
 800f56a:	f7fd fef8 	bl	800d35e <EwGetGlyphMetrics>
 800f56e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f570:	2800      	cmp	r0, #0
 800f572:	f43f af49 	beq.w	800f408 <EwGetAttrBitmap+0x63e>
 800f576:	f1b9 0f00 	cmp.w	r9, #0
 800f57a:	d01f      	beq.n	800f5bc <EwGetAttrBitmap+0x7f2>
 800f57c:	9b07      	ldr	r3, [sp, #28]
 800f57e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f580:	1a99      	subs	r1, r3, r2
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	4648      	mov	r0, r9
 800f586:	eb03 0161 	add.w	r1, r3, r1, asr #1
 800f58a:	f001 fd31 	bl	8010ff0 <EwBidiGetCharLevel>
 800f58e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f590:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 800f592:	68a5      	ldr	r5, [r4, #8]
 800f594:	e9d4 7200 	ldrd	r7, r2, [r4]
 800f598:	9213      	str	r2, [sp, #76]	; 0x4c
 800f59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f59c:	4282      	cmp	r2, r0
 800f59e:	f47f af37 	bne.w	800f410 <EwGetAttrBitmap+0x646>
 800f5a2:	9314      	str	r3, [sp, #80]	; 0x50
 800f5a4:	07d3      	lsls	r3, r2, #31
 800f5a6:	6960      	ldr	r0, [r4, #20]
 800f5a8:	bf47      	ittee	mi
 800f5aa:	4642      	movmi	r2, r8
 800f5ac:	21ad      	movmi	r1, #173	; 0xad
 800f5ae:	22ad      	movpl	r2, #173	; 0xad
 800f5b0:	4641      	movpl	r1, r8
 800f5b2:	f008 fb1b 	bl	8017bec <EwFntGetKerning>
 800f5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5b8:	4406      	add	r6, r0
 800f5ba:	e729      	b.n	800f410 <EwGetAttrBitmap+0x646>
 800f5bc:	4648      	mov	r0, r9
 800f5be:	e7e7      	b.n	800f590 <EwGetAttrBitmap+0x7c6>
 800f5c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5c2:	9312      	str	r3, [sp, #72]	; 0x48
 800f5c4:	e34f      	b.n	800fc66 <EwGetAttrBitmap+0xe9c>
 800f5c6:	46ca      	mov	sl, r9
 800f5c8:	e794      	b.n	800f4f4 <EwGetAttrBitmap+0x72a>
 800f5ca:	222e      	movs	r2, #46	; 0x2e
 800f5cc:	4641      	mov	r1, r8
 800f5ce:	f008 fb0d 	bl	8017bec <EwFntGetKerning>
 800f5d2:	9714      	str	r7, [sp, #80]	; 0x50
 800f5d4:	4405      	add	r5, r0
 800f5d6:	e7a8      	b.n	800f52a <EwGetAttrBitmap+0x760>
 800f5d8:	f1b9 0f00 	cmp.w	r9, #0
 800f5dc:	d053      	beq.n	800f686 <EwGetAttrBitmap+0x8bc>
 800f5de:	9b07      	ldr	r3, [sp, #28]
 800f5e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f5e2:	1a99      	subs	r1, r3, r2
 800f5e4:	9b03      	ldr	r3, [sp, #12]
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	eb03 0161 	add.w	r1, r3, r1, asr #1
 800f5ec:	f001 fd00 	bl	8010ff0 <EwBidiGetCharLevel>
 800f5f0:	4682      	mov	sl, r0
 800f5f2:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800f5fa:	931a      	str	r3, [sp, #104]	; 0x68
 800f5fc:	b292      	uxth	r2, r2
 800f5fe:	6863      	ldr	r3, [r4, #4]
 800f600:	931b      	str	r3, [sp, #108]	; 0x6c
 800f602:	2a20      	cmp	r2, #32
 800f604:	bf0c      	ite	eq
 800f606:	462b      	moveq	r3, r5
 800f608:	2300      	movne	r3, #0
 800f60a:	9314      	str	r3, [sp, #80]	; 0x50
 800f60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f60e:	68a6      	ldr	r6, [r4, #8]
 800f610:	4553      	cmp	r3, sl
 800f612:	d10a      	bne.n	800f62a <EwGetAttrBitmap+0x860>
 800f614:	f01a 0f01 	tst.w	sl, #1
 800f618:	6960      	ldr	r0, [r4, #20]
 800f61a:	bf19      	ittee	ne
 800f61c:	4642      	movne	r2, r8
 800f61e:	4639      	movne	r1, r7
 800f620:	463a      	moveq	r2, r7
 800f622:	4641      	moveq	r1, r8
 800f624:	f008 fae2 	bl	8017bec <EwFntGetKerning>
 800f628:	4405      	add	r5, r0
 800f62a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f62c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f62e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800f632:	9308      	str	r3, [sp, #32]
 800f634:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800f638:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f63a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f63c:	46b8      	mov	r8, r7
 800f63e:	2200      	movs	r2, #0
 800f640:	9906      	ldr	r1, [sp, #24]
 800f642:	440d      	add	r5, r1
 800f644:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f646:	42a9      	cmp	r1, r5
 800f648:	da02      	bge.n	800f650 <EwGetAttrBitmap+0x886>
 800f64a:	9906      	ldr	r1, [sp, #24]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	d133      	bne.n	800f6b8 <EwGetAttrBitmap+0x8ee>
 800f650:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f652:	4293      	cmp	r3, r2
 800f654:	bfb8      	it	lt
 800f656:	4613      	movlt	r3, r2
 800f658:	9316      	str	r3, [sp, #88]	; 0x58
 800f65a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f65c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f65e:	4293      	cmp	r3, r2
 800f660:	bfb8      	it	lt
 800f662:	4613      	movlt	r3, r2
 800f664:	931f      	str	r3, [sp, #124]	; 0x7c
 800f666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f668:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f66a:	42b3      	cmp	r3, r6
 800f66c:	bfb8      	it	lt
 800f66e:	4633      	movlt	r3, r6
 800f670:	9320      	str	r3, [sp, #128]	; 0x80
 800f672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f674:	4293      	cmp	r3, r2
 800f676:	bfb8      	it	lt
 800f678:	4613      	movlt	r3, r2
 800f67a:	9321      	str	r3, [sp, #132]	; 0x84
 800f67c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f67e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f680:	4413      	add	r3, r2
 800f682:	930d      	str	r3, [sp, #52]	; 0x34
 800f684:	e6ef      	b.n	800f466 <EwGetAttrBitmap+0x69c>
 800f686:	46ca      	mov	sl, r9
 800f688:	e7b3      	b.n	800f5f2 <EwGetAttrBitmap+0x828>
 800f68a:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 800f68e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800f692:	9414      	str	r4, [sp, #80]	; 0x50
 800f694:	4647      	mov	r7, r8
 800f696:	4626      	mov	r6, r4
 800f698:	4625      	mov	r5, r4
 800f69a:	e7c6      	b.n	800f62a <EwGetAttrBitmap+0x860>
 800f69c:	2600      	movs	r6, #0
 800f69e:	e6e0      	b.n	800f462 <EwGetAttrBitmap+0x698>
 800f6a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f6a2:	9308      	str	r3, [sp, #32]
 800f6a4:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 800f6a8:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800f6ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f6ae:	9014      	str	r0, [sp, #80]	; 0x50
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	e694      	b.n	800f3e2 <EwGetAttrBitmap+0x618>
 800f6b8:	f1bb 0f00 	cmp.w	fp, #0
 800f6bc:	d025      	beq.n	800f70a <EwGetAttrBitmap+0x940>
 800f6be:	465a      	mov	r2, fp
 800f6c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f6c2:	f832 1b02 	ldrh.w	r1, [r2], #2
 800f6c6:	2920      	cmp	r1, #32
 800f6c8:	bf04      	itt	eq
 800f6ca:	f64f 61ff 	movweq	r1, #65279	; 0xfeff
 800f6ce:	f8ab 1000 	strheq.w	r1, [fp]
 800f6d2:	f64f 64ff 	movw	r4, #65279	; 0xfeff
 800f6d6:	f242 050b 	movw	r5, #8203	; 0x200b
 800f6da:	f850 1f04 	ldr.w	r1, [r0, #4]!
 800f6de:	9207      	str	r2, [sp, #28]
 800f6e0:	f001 010f 	and.w	r1, r1, #15
 800f6e4:	3901      	subs	r1, #1
 800f6e6:	2901      	cmp	r1, #1
 800f6e8:	d808      	bhi.n	800f6fc <EwGetAttrBitmap+0x932>
 800f6ea:	8811      	ldrh	r1, [r2, #0]
 800f6ec:	42a1      	cmp	r1, r4
 800f6ee:	f102 0202 	add.w	r2, r2, #2
 800f6f2:	d0f2      	beq.n	800f6da <EwGetAttrBitmap+0x910>
 800f6f4:	42a9      	cmp	r1, r5
 800f6f6:	d0f0      	beq.n	800f6da <EwGetAttrBitmap+0x910>
 800f6f8:	29ad      	cmp	r1, #173	; 0xad
 800f6fa:	d0ee      	beq.n	800f6da <EwGetAttrBitmap+0x910>
 800f6fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f6fe:	920d      	str	r2, [sp, #52]	; 0x34
 800f700:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f702:	9216      	str	r2, [sp, #88]	; 0x58
 800f704:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f706:	9206      	str	r2, [sp, #24]
 800f708:	e605      	b.n	800f316 <EwGetAttrBitmap+0x54c>
 800f70a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f70c:	9208      	str	r2, [sp, #32]
 800f70e:	e9dd 3a1f 	ldrd	r3, sl, [sp, #124]	; 0x7c
 800f712:	e600      	b.n	800f316 <EwGetAttrBitmap+0x54c>
 800f714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f716:	2b41      	cmp	r3, #65	; 0x41
 800f718:	d11d      	bne.n	800f756 <EwGetAttrBitmap+0x98c>
 800f71a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bf0c      	ite	eq
 800f720:	234c      	moveq	r3, #76	; 0x4c
 800f722:	2352      	movne	r3, #82	; 0x52
 800f724:	9907      	ldr	r1, [sp, #28]
 800f726:	9a03      	ldr	r2, [sp, #12]
 800f728:	440a      	add	r2, r1
 800f72a:	9904      	ldr	r1, [sp, #16]
 800f72c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800f730:	b12a      	cbz	r2, 800f73e <EwGetAttrBitmap+0x974>
 800f732:	2a0a      	cmp	r2, #10
 800f734:	d003      	beq.n	800f73e <EwGetAttrBitmap+0x974>
 800f736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f738:	2a00      	cmp	r2, #0
 800f73a:	f040 8210 	bne.w	800fb5e <EwGetAttrBitmap+0xd94>
 800f73e:	3320      	adds	r3, #32
 800f740:	9308      	str	r3, [sp, #32]
 800f742:	2300      	movs	r3, #0
 800f744:	930d      	str	r3, [sp, #52]	; 0x34
 800f746:	9b08      	ldr	r3, [sp, #32]
 800f748:	2b72      	cmp	r3, #114	; 0x72
 800f74a:	d110      	bne.n	800f76e <EwGetAttrBitmap+0x9a4>
 800f74c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f74e:	9a06      	ldr	r2, [sp, #24]
 800f750:	1a9d      	subs	r5, r3, r2
 800f752:	2372      	movs	r3, #114	; 0x72
 800f754:	e61c      	b.n	800f390 <EwGetAttrBitmap+0x5c6>
 800f756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f758:	2b4c      	cmp	r3, #76	; 0x4c
 800f75a:	d006      	beq.n	800f76a <EwGetAttrBitmap+0x9a0>
 800f75c:	2b52      	cmp	r3, #82	; 0x52
 800f75e:	d004      	beq.n	800f76a <EwGetAttrBitmap+0x9a0>
 800f760:	2b43      	cmp	r3, #67	; 0x43
 800f762:	d0df      	beq.n	800f724 <EwGetAttrBitmap+0x95a>
 800f764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f766:	9308      	str	r3, [sp, #32]
 800f768:	e7ed      	b.n	800f746 <EwGetAttrBitmap+0x97c>
 800f76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f76c:	e7da      	b.n	800f724 <EwGetAttrBitmap+0x95a>
 800f76e:	9b08      	ldr	r3, [sp, #32]
 800f770:	2b63      	cmp	r3, #99	; 0x63
 800f772:	f040 81f6 	bne.w	800fb62 <EwGetAttrBitmap+0xd98>
 800f776:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f778:	9a06      	ldr	r2, [sp, #24]
 800f77a:	1a9d      	subs	r5, r3, r2
 800f77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f780:	106d      	asrs	r5, r5, #1
 800f782:	e606      	b.n	800f392 <EwGetAttrBitmap+0x5c8>
 800f784:	bf1d      	ittte	ne
 800f786:	e9dd 2303 	ldrdne	r2, r3, [sp, #12]
 800f78a:	f833 7012 	ldrhne.w	r7, [r3, r2, lsl #1]
 800f78e:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 800f790:	9f07      	ldreq	r7, [sp, #28]
 800f792:	bf14      	ite	ne
 800f794:	f853 8022 	ldrne.w	r8, [r3, r2, lsl #2]
 800f798:	46b8      	moveq	r8, r7
 800f79a:	f008 030f 	and.w	r3, r8, #15
 800f79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7a0:	9b07      	ldr	r3, [sp, #28]
 800f7a2:	b303      	cbz	r3, 800f7e6 <EwGetAttrBitmap+0xa1c>
 800f7a4:	9b05      	ldr	r3, [sp, #20]
 800f7a6:	9a03      	ldr	r2, [sp, #12]
 800f7a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f7ac:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f7ae:	9312      	str	r3, [sp, #72]	; 0x48
 800f7b0:	2114      	movs	r1, #20
 800f7b2:	f7fe ff1f 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 800f7b6:	b9d8      	cbnz	r0, 800f7f0 <EwGetAttrBitmap+0xa26>
 800f7b8:	9804      	ldr	r0, [sp, #16]
 800f7ba:	f019 ffdb 	bl	8029774 <EwFree>
 800f7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7c0:	f019 ffd8 	bl	8029774 <EwFree>
 800f7c4:	9805      	ldr	r0, [sp, #20]
 800f7c6:	f019 ffd5 	bl	8029774 <EwFree>
 800f7ca:	4a08      	ldr	r2, [pc, #32]	; (800f7ec <EwGetAttrBitmap+0xa22>)
 800f7cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800f7ce:	6813      	ldr	r3, [r2, #0]
 800f7d0:	1a5b      	subs	r3, r3, r1
 800f7d2:	6013      	str	r3, [r2, #0]
 800f7d4:	f1b9 0f00 	cmp.w	r9, #0
 800f7d8:	f43f ab75 	beq.w	800eec6 <EwGetAttrBitmap+0xfc>
 800f7dc:	4648      	mov	r0, r9
 800f7de:	f001 fbed 	bl	8010fbc <EwFreeBidi>
 800f7e2:	f7ff bb70 	b.w	800eec6 <EwGetAttrBitmap+0xfc>
 800f7e6:	9b07      	ldr	r3, [sp, #28]
 800f7e8:	e7e0      	b.n	800f7ac <EwGetAttrBitmap+0x9e2>
 800f7ea:	bf00      	nop
 800f7ec:	200002e8 	.word	0x200002e8
 800f7f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7f2:	3b03      	subs	r3, #3
 800f7f4:	931c      	str	r3, [sp, #112]	; 0x70
 800f7f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	2b04      	cmp	r3, #4
 800f7fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800f7fe:	f200 8150 	bhi.w	800faa2 <EwGetAttrBitmap+0xcd8>
 800f802:	f3c8 1307 	ubfx	r3, r8, #4, #8
 800f806:	9313      	str	r3, [sp, #76]	; 0x4c
 800f808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	f240 814c 	bls.w	800faa8 <EwGetAttrBitmap+0xcde>
 800f810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f812:	930b      	str	r3, [sp, #44]	; 0x2c
 800f814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f816:	2b01      	cmp	r3, #1
 800f818:	f000 8149 	beq.w	800faae <EwGetAttrBitmap+0xce4>
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f820:	bf08      	it	eq
 800f822:	2301      	moveq	r3, #1
 800f824:	9318      	str	r3, [sp, #96]	; 0x60
 800f826:	2e00      	cmp	r6, #0
 800f828:	d075      	beq.n	800f916 <EwGetAttrBitmap+0xb4c>
 800f82a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d810      	bhi.n	800f852 <EwGetAttrBitmap+0xa88>
 800f830:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f832:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f834:	4293      	cmp	r3, r2
 800f836:	d10c      	bne.n	800f852 <EwGetAttrBitmap+0xa88>
 800f838:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f83a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d108      	bne.n	800f852 <EwGetAttrBitmap+0xa88>
 800f840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f842:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f844:	4293      	cmp	r3, r2
 800f846:	d104      	bne.n	800f852 <EwGetAttrBitmap+0xa88>
 800f848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f84a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f84c:	4293      	cmp	r3, r2
 800f84e:	f000 809e 	beq.w	800f98e <EwGetAttrBitmap+0xbc4>
 800f852:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f854:	681a      	ldr	r2, [r3, #0]
 800f856:	f1bb 0f00 	cmp.w	fp, #0
 800f85a:	d01f      	beq.n	800f89c <EwGetAttrBitmap+0xad2>
 800f85c:	9b08      	ldr	r3, [sp, #32]
 800f85e:	2b4c      	cmp	r3, #76	; 0x4c
 800f860:	d11c      	bne.n	800f89c <EwGetAttrBitmap+0xad2>
 800f862:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f864:	9806      	ldr	r0, [sp, #24]
 800f866:	6859      	ldr	r1, [r3, #4]
 800f868:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f86a:	1a1b      	subs	r3, r3, r0
 800f86c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f86e:	fb0b 0b03 	mla	fp, fp, r3, r0
 800f872:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f876:	fb9b f3f3 	sdiv	r3, fp, r3
 800f87a:	fb00 b013 	mls	r0, r0, r3, fp
 800f87e:	441d      	add	r5, r3
 800f880:	234a      	movs	r3, #74	; 0x4a
 800f882:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
 800f886:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 800f88a:	901b      	str	r0, [sp, #108]	; 0x6c
 800f88c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800f890:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f892:	1c88      	adds	r0, r1, #2
 800f894:	6058      	str	r0, [r3, #4]
 800f896:	eba5 030c 	sub.w	r3, r5, ip
 800f89a:	800b      	strh	r3, [r1, #0]
 800f89c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	1a9b      	subs	r3, r3, r2
 800f8a2:	1cf1      	adds	r1, r6, #3
 800f8a4:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 800f8a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8aa:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
 800f8ae:	ea4f 0b41 	mov.w	fp, r1, lsl #1
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f000 80fd 	beq.w	800fab2 <EwGetAttrBitmap+0xce8>
 800f8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ba:	b13b      	cbz	r3, 800f8cc <EwGetAttrBitmap+0xb02>
 800f8bc:	aa2f      	add	r2, sp, #188	; 0xbc
 800f8be:	212d      	movs	r1, #45	; 0x2d
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fd fd4c 	bl	800d35e <EwGetGlyphMetrics>
 800f8c6:	b108      	cbz	r0, 800f8cc <EwGetAttrBitmap+0xb02>
 800f8c8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f8ca:	9315      	str	r3, [sp, #84]	; 0x54
 800f8cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8ce:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	6800      	ldr	r0, [r0, #0]
 800f8d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f8d6:	2352      	movs	r3, #82	; 0x52
 800f8d8:	8013      	strh	r3, [r2, #0]
 800f8da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	445b      	add	r3, fp
 800f8e0:	2901      	cmp	r1, #1
 800f8e2:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f8e6:	8053      	strh	r3, [r2, #2]
 800f8e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	80d5      	strh	r5, [r2, #6]
 800f8ee:	4403      	add	r3, r0
 800f8f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f8f2:	bfb8      	it	lt
 800f8f4:	2101      	movlt	r1, #1
 800f8f6:	4403      	add	r3, r0
 800f8f8:	fa13 f381 	uxtah	r3, r3, r1
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	8093      	strh	r3, [r2, #4]
 800f900:	fa13 f381 	uxtah	r3, r3, r1
 800f904:	9941      	ldr	r1, [sp, #260]	; 0x104
 800f906:	8113      	strh	r3, [r2, #8]
 800f908:	f102 030c 	add.w	r3, r2, #12
 800f90c:	604b      	str	r3, [r1, #4]
 800f90e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f910:	8153      	strh	r3, [r2, #10]
 800f912:	f04f 0b00 	mov.w	fp, #0
 800f916:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00c      	beq.n	800f938 <EwGetAttrBitmap+0xb6e>
 800f91e:	ee18 0a10 	vmov	r0, s16
 800f922:	4611      	mov	r1, r2
 800f924:	f7ff fa45 	bl	800edb2 <EwGetAttrFont>
 800f928:	900c      	str	r0, [sp, #48]	; 0x30
 800f92a:	b928      	cbnz	r0, 800f938 <EwGetAttrBitmap+0xb6e>
 800f92c:	4601      	mov	r1, r0
 800f92e:	ee18 0a10 	vmov	r0, s16
 800f932:	f7ff fa3e 	bl	800edb2 <EwGetAttrFont>
 800f936:	900c      	str	r0, [sp, #48]	; 0x30
 800f938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 80bc 	beq.w	800fab8 <EwGetAttrBitmap+0xcee>
 800f940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f942:	4293      	cmp	r3, r2
 800f944:	d01c      	beq.n	800f980 <EwGetAttrBitmap+0xbb6>
 800f946:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f948:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	2241      	movs	r2, #65	; 0x41
 800f94e:	801a      	strh	r2, [r3, #0]
 800f950:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f952:	6812      	ldr	r2, [r2, #0]
 800f954:	440a      	add	r2, r1
 800f956:	805a      	strh	r2, [r3, #2]
 800f958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f95a:	809a      	strh	r2, [r3, #4]
 800f95c:	9943      	ldr	r1, [sp, #268]	; 0x10c
 800f95e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800f960:	6809      	ldr	r1, [r1, #0]
 800f962:	6812      	ldr	r2, [r2, #0]
 800f964:	811d      	strh	r5, [r3, #8]
 800f966:	440a      	add	r2, r1
 800f968:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f96a:	9514      	str	r5, [sp, #80]	; 0x50
 800f96c:	b292      	uxth	r2, r2
 800f96e:	80da      	strh	r2, [r3, #6]
 800f970:	440a      	add	r2, r1
 800f972:	9941      	ldr	r1, [sp, #260]	; 0x104
 800f974:	815a      	strh	r2, [r3, #10]
 800f976:	f103 020e 	add.w	r2, r3, #14
 800f97a:	604a      	str	r2, [r1, #4]
 800f97c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f97e:	819a      	strh	r2, [r3, #12]
 800f980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f984:	4293      	cmp	r3, r2
 800f986:	bf16      	itet	ne
 800f988:	2400      	movne	r4, #0
 800f98a:	2600      	moveq	r6, #0
 800f98c:	4626      	movne	r6, r4
 800f98e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f990:	2b02      	cmp	r3, #2
 800f992:	d83e      	bhi.n	800fa12 <EwGetAttrBitmap+0xc48>
 800f994:	f3c8 3307 	ubfx	r3, r8, #12, #8
 800f998:	ee18 0a10 	vmov	r0, s16
 800f99c:	4619      	mov	r1, r3
 800f99e:	930e      	str	r3, [sp, #56]	; 0x38
 800f9a0:	f7ff fa13 	bl	800edca <EwGetAttrBitmap>
 800f9a4:	b940      	cbnz	r0, 800f9b8 <EwGetAttrBitmap+0xbee>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	ee18 0a10 	vmov	r0, s16
 800f9ac:	f7ff fa0d 	bl	800edca <EwGetAttrBitmap>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f000 8088 	beq.w	800fac6 <EwGetAttrBitmap+0xcfc>
 800f9b6:	910e      	str	r1, [sp, #56]	; 0x38
 800f9b8:	6943      	ldr	r3, [r0, #20]
 800f9ba:	6884      	ldr	r4, [r0, #8]
 800f9bc:	ebb3 5f18 	cmp.w	r3, r8, lsr #20
 800f9c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f9c2:	eba3 0404 	sub.w	r4, r3, r4
 800f9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9c8:	ea4f 5c18 	mov.w	ip, r8, lsr #20
 800f9cc:	bfd8      	it	le
 800f9ce:	f04f 0c00 	movle.w	ip, #0
 800f9d2:	2b03      	cmp	r3, #3
 800f9d4:	f040 80c7 	bne.w	800fb66 <EwGetAttrBitmap+0xd9c>
 800f9d8:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800f9dc:	1064      	asrs	r4, r4, #1
 800f9de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	2349      	movs	r3, #73	; 0x49
 800f9e4:	8013      	strh	r3, [r2, #0]
 800f9e6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800f9e8:	8055      	strh	r5, [r2, #2]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f8a2 c008 	strh.w	ip, [r2, #8]
 800f9f6:	4419      	add	r1, r3
 800f9f8:	440c      	add	r4, r1
 800f9fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9fc:	9941      	ldr	r1, [sp, #260]	; 0x104
 800f9fe:	80d3      	strh	r3, [r2, #6]
 800fa00:	f102 030c 	add.w	r3, r2, #12
 800fa04:	8094      	strh	r4, [r2, #4]
 800fa06:	604b      	str	r3, [r1, #4]
 800fa08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa0a:	8153      	strh	r3, [r2, #10]
 800fa0c:	6843      	ldr	r3, [r0, #4]
 800fa0e:	2400      	movs	r4, #0
 800fa10:	441d      	add	r5, r3
 800fa12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d875      	bhi.n	800fb04 <EwGetAttrBitmap+0xd3a>
 800fa18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d072      	beq.n	800fb04 <EwGetAttrBitmap+0xd3a>
 800fa1e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fa22:	429f      	cmp	r7, r3
 800fa24:	d06e      	beq.n	800fb04 <EwGetAttrBitmap+0xd3a>
 800fa26:	f242 0326 	movw	r3, #8230	; 0x2026
 800fa2a:	429f      	cmp	r7, r3
 800fa2c:	d14d      	bne.n	800faca <EwGetAttrBitmap+0xd00>
 800fa2e:	4639      	mov	r1, r7
 800fa30:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa32:	f7fd fc71 	bl	800d318 <EwIsGlyphAvailable>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	bf12      	itee	ne
 800fa3a:	f04f 0801 	movne.w	r8, #1
 800fa3e:	f04f 0803 	moveq.w	r8, #3
 800fa42:	272e      	moveq	r7, #46	; 0x2e
 800fa44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa46:	aa2f      	add	r2, sp, #188	; 0xbc
 800fa48:	4639      	mov	r1, r7
 800fa4a:	f7fd fc88 	bl	800d35e <EwGetGlyphMetrics>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d058      	beq.n	800fb04 <EwGetAttrBitmap+0xd3a>
 800fa52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa54:	463a      	mov	r2, r7
 800fa56:	6958      	ldr	r0, [r3, #20]
 800fa58:	4621      	mov	r1, r4
 800fa5a:	f008 f8c7 	bl	8017bec <EwFntGetKerning>
 800fa5e:	b9e6      	cbnz	r6, 800fa9a <EwGetAttrBitmap+0xcd0>
 800fa60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	6816      	ldr	r6, [r2, #0]
 800fa68:	9943      	ldr	r1, [sp, #268]	; 0x10c
 800fa6a:	2254      	movs	r2, #84	; 0x54
 800fa6c:	801a      	strh	r2, [r3, #0]
 800fa6e:	182a      	adds	r2, r5, r0
 800fa70:	805a      	strh	r2, [r3, #2]
 800fa72:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fa74:	6809      	ldr	r1, [r1, #0]
 800fa76:	6812      	ldr	r2, [r2, #0]
 800fa78:	440a      	add	r2, r1
 800fa7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fa7c:	440a      	add	r2, r1
 800fa7e:	809a      	strh	r2, [r3, #4]
 800fa80:	f04f 0200 	mov.w	r2, #0
 800fa84:	80da      	strh	r2, [r3, #6]
 800fa86:	9941      	ldr	r1, [sp, #260]	; 0x104
 800fa88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa8a:	811a      	strh	r2, [r3, #8]
 800fa8c:	f103 020c 	add.w	r2, r3, #12
 800fa90:	604a      	str	r2, [r1, #4]
 800fa92:	1b9e      	subs	r6, r3, r6
 800fa94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa96:	815a      	strh	r2, [r3, #10]
 800fa98:	1076      	asrs	r6, r6, #1
 800fa9a:	f027 0480 	bic.w	r4, r7, #128	; 0x80
 800fa9e:	b2a4      	uxth	r4, r4
 800faa0:	e02c      	b.n	800fafc <EwGetAttrBitmap+0xd32>
 800faa2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800faa4:	9313      	str	r3, [sp, #76]	; 0x4c
 800faa6:	e6b3      	b.n	800f810 <EwGetAttrBitmap+0xa46>
 800faa8:	f3c8 3307 	ubfx	r3, r8, #12, #8
 800faac:	e6b1      	b.n	800f812 <EwGetAttrBitmap+0xa48>
 800faae:	2300      	movs	r3, #0
 800fab0:	e6b8      	b.n	800f824 <EwGetAttrBitmap+0xa5a>
 800fab2:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800fab6:	e72e      	b.n	800f916 <EwGetAttrBitmap+0xb4c>
 800fab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	bf18      	it	ne
 800fac0:	462b      	movne	r3, r5
 800fac2:	9314      	str	r3, [sp, #80]	; 0x50
 800fac4:	e75c      	b.n	800f980 <EwGetAttrBitmap+0xbb6>
 800fac6:	4604      	mov	r4, r0
 800fac8:	e7a3      	b.n	800fa12 <EwGetAttrBitmap+0xc48>
 800faca:	f04f 0801 	mov.w	r8, #1
 800face:	e7b9      	b.n	800fa44 <EwGetAttrBitmap+0xc7a>
 800fad0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fad2:	9941      	ldr	r1, [sp, #260]	; 0x104
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	1c9a      	adds	r2, r3, #2
 800fad8:	604a      	str	r2, [r1, #4]
 800fada:	801f      	strh	r7, [r3, #0]
 800fadc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800fade:	2c20      	cmp	r4, #32
 800fae0:	eb03 0200 	add.w	r2, r3, r0
 800fae4:	4415      	add	r5, r2
 800fae6:	bf08      	it	eq
 800fae8:	449b      	addeq	fp, r3
 800faea:	f1b8 0f00 	cmp.w	r8, #0
 800faee:	d005      	beq.n	800fafc <EwGetAttrBitmap+0xd32>
 800faf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf2:	463a      	mov	r2, r7
 800faf4:	6958      	ldr	r0, [r3, #20]
 800faf6:	4639      	mov	r1, r7
 800faf8:	f008 f878 	bl	8017bec <EwFntGetKerning>
 800fafc:	f1b8 0801 	subs.w	r8, r8, #1
 800fb00:	d2e6      	bcs.n	800fad0 <EwGetAttrBitmap+0xd06>
 800fb02:	463c      	mov	r4, r7
 800fb04:	9b07      	ldr	r3, [sp, #28]
 800fb06:	3b01      	subs	r3, #1
 800fb08:	9307      	str	r3, [sp, #28]
 800fb0a:	9b03      	ldr	r3, [sp, #12]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb12:	930e      	str	r3, [sp, #56]	; 0x38
 800fb14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fb16:	9315      	str	r3, [sp, #84]	; 0x54
 800fb18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb1a:	9325      	str	r3, [sp, #148]	; 0x94
 800fb1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb1e:	931e      	str	r3, [sp, #120]	; 0x78
 800fb20:	9b07      	ldr	r3, [sp, #28]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f6bf ae2e 	bge.w	800f784 <EwGetAttrBitmap+0x9ba>
 800fb28:	9b03      	ldr	r3, [sp, #12]
 800fb2a:	9a04      	ldr	r2, [sp, #16]
 800fb2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb30:	3b01      	subs	r3, #1
 800fb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fb38:	2b0a      	cmp	r3, #10
 800fb3a:	bf1e      	ittt	ne
 800fb3c:	9b03      	ldrne	r3, [sp, #12]
 800fb3e:	f103 33ff 	addne.w	r3, r3, #4294967295
 800fb42:	9303      	strne	r3, [sp, #12]
 800fb44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	441a      	add	r2, r3
 800fb4a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4413      	add	r3, r2
 800fb50:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fb56:	f8c3 a000 	str.w	sl, [r3]
 800fb5a:	f7ff ba07 	b.w	800ef6c <EwGetAttrBitmap+0x1a2>
 800fb5e:	234c      	movs	r3, #76	; 0x4c
 800fb60:	9308      	str	r3, [sp, #32]
 800fb62:	2500      	movs	r5, #0
 800fb64:	e415      	b.n	800f392 <EwGetAttrBitmap+0x5c8>
 800fb66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb68:	2b05      	cmp	r3, #5
 800fb6a:	bf08      	it	eq
 800fb6c:	2400      	moveq	r4, #0
 800fb6e:	e736      	b.n	800f9de <EwGetAttrBitmap+0xc14>
 800fb70:	aa2f      	add	r2, sp, #188	; 0xbc
 800fb72:	4639      	mov	r1, r7
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7fd fbf2 	bl	800d35e <EwGetGlyphMetrics>
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f47f ad2b 	bne.w	800f5d8 <EwGetAttrBitmap+0x80e>
 800fb82:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 800fb86:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fb8a:	9014      	str	r0, [sp, #80]	; 0x50
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	4647      	mov	r7, r8
 800fb90:	e54b      	b.n	800f62a <EwGetAttrBitmap+0x860>
 800fb92:	2f0a      	cmp	r7, #10
 800fb94:	f43f aba6 	beq.w	800f2e4 <EwGetAttrBitmap+0x51a>
 800fb98:	9a08      	ldr	r2, [sp, #32]
 800fb9a:	931f      	str	r3, [sp, #124]	; 0x7c
 800fb9c:	e9cd a220 	strd	sl, r2, [sp, #128]	; 0x80
 800fba0:	f04f 32ff 	mov.w	r2, #4294967295
 800fba4:	f04f 0800 	mov.w	r8, #0
 800fba8:	920b      	str	r2, [sp, #44]	; 0x2c
 800fbaa:	f242 020b 	movw	r2, #8203	; 0x200b
 800fbae:	4297      	cmp	r7, r2
 800fbb0:	f47f ac1c 	bne.w	800f3ec <EwGetAttrBitmap+0x622>
 800fbb4:	9a06      	ldr	r2, [sp, #24]
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	d039      	beq.n	800fc2e <EwGetAttrBitmap+0xe64>
 800fbba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fbbc:	2a00      	cmp	r2, #0
 800fbbe:	d136      	bne.n	800fc2e <EwGetAttrBitmap+0xe64>
 800fbc0:	f1bb 0f00 	cmp.w	fp, #0
 800fbc4:	f47f acb3 	bne.w	800f52e <EwGetAttrBitmap+0x764>
 800fbc8:	931c      	str	r3, [sp, #112]	; 0x70
 800fbca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbcc:	9323      	str	r3, [sp, #140]	; 0x8c
 800fbce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fbd0:	9327      	str	r3, [sp, #156]	; 0x9c
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	9a08      	ldr	r2, [sp, #32]
 800fbd6:	9322      	str	r3, [sp, #136]	; 0x88
 800fbd8:	2301      	movs	r3, #1
 800fbda:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800fbde:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 800fbe2:	9218      	str	r2, [sp, #96]	; 0x60
 800fbe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbe6:	e031      	b.n	800fc4c <EwGetAttrBitmap+0xe82>
 800fbe8:	9904      	ldr	r1, [sp, #16]
 800fbea:	4648      	mov	r0, r9
 800fbec:	f001 fad2 	bl	8011194 <EwBidiProcess>
 800fbf0:	9904      	ldr	r1, [sp, #16]
 800fbf2:	4648      	mov	r0, r9
 800fbf4:	f002 f9a2 	bl	8011f3c <EwBidiMirrorGlyphs>
 800fbf8:	ee18 3a10 	vmov	r3, s16
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	ee18 3a10 	vmov	r3, s16
 800fc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	9904      	ldr	r1, [sp, #16]
 800fc0a:	4648      	mov	r0, r9
 800fc0c:	f001 ffd4 	bl	8011bb8 <EwBidiApplyShaping>
 800fc10:	4648      	mov	r0, r9
 800fc12:	f001 f9e7 	bl	8010fe4 <EwBidiIsRTL>
 800fc16:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800fc18:	9019      	str	r0, [sp, #100]	; 0x64
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f6bf a99b 	bge.w	800ef58 <EwGetAttrBitmap+0x18e>
 800fc22:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800fc24:	461a      	mov	r2, r3
 800fc26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	f7ff b995 	b.w	800ef58 <EwGetAttrBitmap+0x18e>
 800fc2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc30:	9312      	str	r3, [sp, #72]	; 0x48
 800fc32:	f64f 67ff 	movw	r7, #65279	; 0xfeff
 800fc36:	e00f      	b.n	800fc58 <EwGetAttrBitmap+0xe8e>
 800fc38:	2f20      	cmp	r7, #32
 800fc3a:	f43f ac1d 	beq.w	800f478 <EwGetAttrBitmap+0x6ae>
 800fc3e:	f240 631c 	movw	r3, #1564	; 0x61c
 800fc42:	429f      	cmp	r7, r3
 800fc44:	f43f acbc 	beq.w	800f5c0 <EwGetAttrBitmap+0x7f6>
 800fc48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc4a:	9312      	str	r3, [sp, #72]	; 0x48
 800fc4c:	f5a7 5300 	sub.w	r3, r7, #8192	; 0x2000
 800fc50:	3b0b      	subs	r3, #11
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	2b04      	cmp	r3, #4
 800fc56:	d906      	bls.n	800fc66 <EwGetAttrBitmap+0xe9c>
 800fc58:	f5a7 5300 	sub.w	r3, r7, #8192	; 0x2000
 800fc5c:	3b2a      	subs	r3, #42	; 0x2a
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	2b04      	cmp	r3, #4
 800fc62:	f63f ac10 	bhi.w	800f486 <EwGetAttrBitmap+0x6bc>
 800fc66:	9a07      	ldr	r2, [sp, #28]
 800fc68:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fc6c:	8013      	strh	r3, [r2, #0]
 800fc6e:	e9dd 3612 	ldrd	r3, r6, [sp, #72]	; 0x48
 800fc72:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc74:	f7ff bbf5 	b.w	800f462 <EwGetAttrBitmap+0x698>
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	ed2d 8b02 	vpush	{d8}
 800fc80:	b0af      	sub	sp, #188	; 0xbc
 800fc82:	ee08 0a10 	vmov	s16, r0
 800fc86:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800fc88:	9310      	str	r3, [sp, #64]	; 0x40
 800fc8a:	4688      	mov	r8, r1
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	2107      	movs	r1, #7
 800fc90:	e9d4 6700 	ldrd	r6, r7, [r4]
 800fc94:	4693      	mov	fp, r2
 800fc96:	f7fe fcad 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f000 824e 	beq.w	801013c <EwGetAttrBitmap+0x1372>
 800fca0:	6863      	ldr	r3, [r4, #4]
 800fca2:	fa1f f18b 	uxth.w	r1, fp
 800fca6:	2247      	movs	r2, #71	; 0x47
 800fca8:	801a      	strh	r2, [r3, #0]
 800fcaa:	80d9      	strh	r1, [r3, #6]
 800fcac:	2200      	movs	r2, #0
 800fcae:	910a      	str	r1, [sp, #40]	; 0x28
 800fcb0:	f103 010e 	add.w	r1, r3, #14
 800fcb4:	805a      	strh	r2, [r3, #2]
 800fcb6:	809a      	strh	r2, [r3, #4]
 800fcb8:	811a      	strh	r2, [r3, #8]
 800fcba:	815a      	strh	r2, [r3, #10]
 800fcbc:	6061      	str	r1, [r4, #4]
 800fcbe:	819a      	strh	r2, [r3, #12]
 800fcc0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800fcc2:	9306      	str	r3, [sp, #24]
 800fcc4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800fcc6:	9305      	str	r3, [sp, #20]
 800fcc8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800fcca:	9304      	str	r3, [sp, #16]
 800fccc:	ab17      	add	r3, sp, #92	; 0x5c
 800fcce:	9303      	str	r3, [sp, #12]
 800fcd0:	ab16      	add	r3, sp, #88	; 0x58
 800fcd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800fcd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	465a      	mov	r2, fp
 800fcdc:	236c      	movs	r3, #108	; 0x6c
 800fcde:	4641      	mov	r1, r8
 800fce0:	ee18 0a10 	vmov	r0, s16
 800fce4:	f7ff f87d 	bl	800ede2 <EwGetAttrBitmap+0x18>
 800fce8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800fcec:	1bbe      	subs	r6, r7, r6
 800fcee:	1077      	asrs	r7, r6, #1
 800fcf0:	f107 0c07 	add.w	ip, r7, #7
 800fcf4:	4605      	mov	r5, r0
 800fcf6:	1ad0      	subs	r0, r2, r3
 800fcf8:	ebbc 0f60 	cmp.w	ip, r0, asr #1
 800fcfc:	bfb8      	it	lt
 800fcfe:	18f6      	addlt	r6, r6, r3
 800fd00:	ea4f 0160 	mov.w	r1, r0, asr #1
 800fd04:	bfbd      	ittte	lt
 800fd06:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fd08:	8133      	strhlt	r3, [r6, #8]
 800fd0a:	1bcf      	sublt	r7, r1, r7
 800fd0c:	3a0e      	subge	r2, #14
 800fd0e:	bfb4      	ite	lt
 800fd10:	8177      	strhlt	r7, [r6, #10]
 800fd12:	6062      	strge	r2, [r4, #4]
 800fd14:	b10d      	cbz	r5, 800fd1a <EwGetAttrBitmap+0xf50>
 800fd16:	882b      	ldrh	r3, [r5, #0]
 800fd18:	b933      	cbnz	r3, 800fd28 <EwGetAttrBitmap+0xf5e>
 800fd1a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800fd1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800fd22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	e20a      	b.n	801013e <EwGetAttrBitmap+0x1374>
 800fd28:	498e      	ldr	r1, [pc, #568]	; (800ff64 <EwGetAttrBitmap+0x119a>)
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f7fe fbc2 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800fd30:	4606      	mov	r6, r0
 800fd32:	b3a8      	cbz	r0, 800fda0 <EwGetAttrBitmap+0xfd6>
 800fd34:	892e      	ldrh	r6, [r5, #8]
 800fd36:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3a:	932b      	str	r3, [sp, #172]	; 0xac
 800fd3c:	b1de      	cbz	r6, 800fd76 <EwGetAttrBitmap+0xfac>
 800fd3e:	2e6c      	cmp	r6, #108	; 0x6c
 800fd40:	896b      	ldrh	r3, [r5, #10]
 800fd42:	f000 8207 	beq.w	8010154 <EwGetAttrBitmap+0x138a>
 800fd46:	2e72      	cmp	r6, #114	; 0x72
 800fd48:	f000 8204 	beq.w	8010154 <EwGetAttrBitmap+0x138a>
 800fd4c:	2e63      	cmp	r6, #99	; 0x63
 800fd4e:	f000 8201 	beq.w	8010154 <EwGetAttrBitmap+0x138a>
 800fd52:	2e61      	cmp	r6, #97	; 0x61
 800fd54:	f000 81fe 	beq.w	8010154 <EwGetAttrBitmap+0x138a>
 800fd58:	2e6a      	cmp	r6, #106	; 0x6a
 800fd5a:	d10c      	bne.n	800fd76 <EwGetAttrBitmap+0xfac>
 800fd5c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fd60:	b292      	uxth	r2, r2
 800fd62:	2a11      	cmp	r2, #17
 800fd64:	d818      	bhi.n	800fd98 <EwGetAttrBitmap+0xfce>
 800fd66:	4980      	ldr	r1, [pc, #512]	; (800ff68 <EwGetAttrBitmap+0x119e>)
 800fd68:	fa21 f202 	lsr.w	r2, r1, r2
 800fd6c:	07d1      	lsls	r1, r2, #31
 800fd6e:	d513      	bpl.n	800fd98 <EwGetAttrBitmap+0xfce>
 800fd70:	f1a3 0620 	sub.w	r6, r3, #32
 800fd74:	e1f2      	b.n	801015c <EwGetAttrBitmap+0x1392>
 800fd76:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	2b11      	cmp	r3, #17
 800fd7e:	d804      	bhi.n	800fd8a <EwGetAttrBitmap+0xfc0>
 800fd80:	4a79      	ldr	r2, [pc, #484]	; (800ff68 <EwGetAttrBitmap+0x119e>)
 800fd82:	fa22 f303 	lsr.w	r3, r2, r3
 800fd86:	07da      	lsls	r2, r3, #31
 800fd88:	d403      	bmi.n	800fd92 <EwGetAttrBitmap+0xfc8>
 800fd8a:	f105 0008 	add.w	r0, r5, #8
 800fd8e:	266c      	movs	r6, #108	; 0x6c
 800fd90:	e1e6      	b.n	8010160 <EwGetAttrBitmap+0x1396>
 800fd92:	f105 000a 	add.w	r0, r5, #10
 800fd96:	e1e3      	b.n	8010160 <EwGetAttrBitmap+0x1396>
 800fd98:	f105 000a 	add.w	r0, r5, #10
 800fd9c:	264c      	movs	r6, #76	; 0x4c
 800fd9e:	e1df      	b.n	8010160 <EwGetAttrBitmap+0x1396>
 800fda0:	4972      	ldr	r1, [pc, #456]	; (800ff6c <EwGetAttrBitmap+0x11a2>)
 800fda2:	4628      	mov	r0, r5
 800fda4:	f7fe fb86 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d0b6      	beq.n	800fd1a <EwGetAttrBitmap+0xf50>
 800fdac:	e9d4 3200 	ldrd	r3, r2, [r4]
 800fdb0:	e9cd 662b 	strd	r6, r6, [sp, #172]	; 0xac
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	9311      	str	r3, [sp, #68]	; 0x44
 800fdb8:	af2b      	add	r7, sp, #172	; 0xac
 800fdba:	105b      	asrs	r3, r3, #1
 800fdbc:	9312      	str	r3, [sp, #72]	; 0x48
 800fdbe:	962d      	str	r6, [sp, #180]	; 0xb4
 800fdc0:	892b      	ldrh	r3, [r5, #8]
 800fdc2:	9608      	str	r6, [sp, #32]
 800fdc4:	46ba      	mov	sl, r7
 800fdc6:	46d8      	mov	r8, fp
 800fdc8:	3508      	adds	r5, #8
 800fdca:	f04f 39ff 	mov.w	r9, #4294967295
 800fdce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fdd2:	2a09      	cmp	r2, #9
 800fdd4:	d923      	bls.n	800fe1e <EwGetAttrBitmap+0x1054>
 800fdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd8:	d00f      	beq.n	800fdfa <EwGetAttrBitmap+0x1030>
 800fdda:	9b08      	ldr	r3, [sp, #32]
 800fddc:	b91b      	cbnz	r3, 800fde6 <EwGetAttrBitmap+0x101c>
 800fdde:	2301      	movs	r3, #1
 800fde0:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800fde4:	9308      	str	r3, [sp, #32]
 800fde6:	2300      	movs	r3, #0
 800fde8:	e9dd c02b 	ldrd	ip, r0, [sp, #172]	; 0xac
 800fdec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fdee:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf0:	4699      	mov	r9, r3
 800fdf2:	469a      	mov	sl, r3
 800fdf4:	f106 3eff 	add.w	lr, r6, #4294967295
 800fdf8:	e032      	b.n	800fe60 <EwGetAttrBitmap+0x1096>
 800fdfa:	f8ca 9000 	str.w	r9, [sl]
 800fdfe:	3601      	adds	r6, #1
 800fe00:	3502      	adds	r5, #2
 800fe02:	882b      	ldrh	r3, [r5, #0]
 800fe04:	2b2c      	cmp	r3, #44	; 0x2c
 800fe06:	9b08      	ldr	r3, [sp, #32]
 800fe08:	f103 0301 	add.w	r3, r3, #1
 800fe0c:	bf08      	it	eq
 800fe0e:	3502      	addeq	r5, #2
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	9308      	str	r3, [sp, #32]
 800fe14:	f10a 0a04 	add.w	sl, sl, #4
 800fe18:	d0e5      	beq.n	800fde6 <EwGetAttrBitmap+0x101c>
 800fe1a:	882b      	ldrh	r3, [r5, #0]
 800fe1c:	e7d7      	b.n	800fdce <EwGetAttrBitmap+0x1004>
 800fe1e:	4628      	mov	r0, r5
 800fe20:	4652      	mov	r2, sl
 800fe22:	4659      	mov	r1, fp
 800fe24:	f7fe faf7 	bl	800e416 <EwCanDiscardSurface+0x13a>
 800fe28:	f8da 3000 	ldr.w	r3, [sl]
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	eba8 0803 	sub.w	r8, r8, r3
 800fe32:	e7e6      	b.n	800fe02 <EwGetAttrBitmap+0x1038>
 800fe34:	459e      	cmp	lr, r3
 800fe36:	fb98 f2f6 	sdiv	r2, r8, r6
 800fe3a:	bf08      	it	eq
 800fe3c:	fb0e 8212 	mlseq	r2, lr, r2, r8
 800fe40:	f1bc 0f00 	cmp.w	ip, #0
 800fe44:	db08      	blt.n	800fe58 <EwGetAttrBitmap+0x108e>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f2c0 8084 	blt.w	800ff54 <EwGetAttrBitmap+0x118a>
 800fe4c:	2900      	cmp	r1, #0
 800fe4e:	da06      	bge.n	800fe5e <EwGetAttrBitmap+0x1094>
 800fe50:	4611      	mov	r1, r2
 800fe52:	2201      	movs	r2, #1
 800fe54:	9209      	str	r2, [sp, #36]	; 0x24
 800fe56:	e002      	b.n	800fe5e <EwGetAttrBitmap+0x1094>
 800fe58:	4694      	mov	ip, r2
 800fe5a:	f04f 0a01 	mov.w	sl, #1
 800fe5e:	3301      	adds	r3, #1
 800fe60:	42b3      	cmp	r3, r6
 800fe62:	d1e7      	bne.n	800fe34 <EwGetAttrBitmap+0x106a>
 800fe64:	f1ba 0f00 	cmp.w	sl, #0
 800fe68:	d001      	beq.n	800fe6e <EwGetAttrBitmap+0x10a4>
 800fe6a:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800fe6e:	f1b9 0f00 	cmp.w	r9, #0
 800fe72:	d000      	beq.n	800fe76 <EwGetAttrBitmap+0x10ac>
 800fe74:	902c      	str	r0, [sp, #176]	; 0xb0
 800fe76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe78:	b103      	cbz	r3, 800fe7c <EwGetAttrBitmap+0x10b2>
 800fe7a:	912d      	str	r1, [sp, #180]	; 0xb4
 800fe7c:	a81c      	add	r0, sp, #112	; 0x70
 800fe7e:	465b      	mov	r3, fp
 800fe80:	2203      	movs	r2, #3
 800fe82:	2600      	movs	r6, #0
 800fe84:	f857 1b04 	ldr.w	r1, [r7], #4
 800fe88:	2900      	cmp	r1, #0
 800fe8a:	bfb8      	it	lt
 800fe8c:	f847 6c04 	strlt.w	r6, [r7, #-4]
 800fe90:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fe94:	4299      	cmp	r1, r3
 800fe96:	bfc8      	it	gt
 800fe98:	f847 3c04 	strgt.w	r3, [r7, #-4]
 800fe9c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fea0:	f840 1b04 	str.w	r1, [r0], #4
 800fea4:	3a01      	subs	r2, #1
 800fea6:	eba3 0301 	sub.w	r3, r3, r1
 800feaa:	d1eb      	bne.n	800fe84 <EwGetAttrBitmap+0x10ba>
 800feac:	882b      	ldrh	r3, [r5, #0]
 800feae:	2107      	movs	r1, #7
 800feb0:	2b7d      	cmp	r3, #125	; 0x7d
 800feb2:	4620      	mov	r0, r4
 800feb4:	bf08      	it	eq
 800feb6:	3502      	addeq	r5, #2
 800feb8:	f7fe fb9c 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 800febc:	2800      	cmp	r0, #0
 800febe:	f000 813d 	beq.w	801013c <EwGetAttrBitmap+0x1372>
 800fec2:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
 800fec6:	6860      	ldr	r0, [r4, #4]
 800fec8:	2347      	movs	r3, #71	; 0x47
 800feca:	8003      	strh	r3, [r0, #0]
 800fecc:	440a      	add	r2, r1
 800fece:	2300      	movs	r3, #0
 800fed0:	8043      	strh	r3, [r0, #2]
 800fed2:	8082      	strh	r2, [r0, #4]
 800fed4:	9216      	str	r2, [sp, #88]	; 0x58
 800fed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fed8:	80c2      	strh	r2, [r0, #6]
 800feda:	f100 020e 	add.w	r2, r0, #14
 800fede:	8103      	strh	r3, [r0, #8]
 800fee0:	8143      	strh	r3, [r0, #10]
 800fee2:	6062      	str	r2, [r4, #4]
 800fee4:	4a22      	ldr	r2, [pc, #136]	; (800ff70 <EwGetAttrBitmap+0x11a6>)
 800fee6:	8183      	strh	r3, [r0, #12]
 800fee8:	ca07      	ldmia	r2, {r0, r1, r2}
 800feea:	ae28      	add	r6, sp, #160	; 0xa0
 800feec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800fef0:	aa25      	add	r2, sp, #148	; 0x94
 800fef2:	920e      	str	r2, [sp, #56]	; 0x38
 800fef4:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 800fef8:	aa2b      	add	r2, sp, #172	; 0xac
 800fefa:	920c      	str	r2, [sp, #48]	; 0x30
 800fefc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fefe:	932d      	str	r3, [sp, #180]	; 0xb4
 800ff00:	960f      	str	r6, [sp, #60]	; 0x3c
 800ff02:	4637      	mov	r7, r6
 800ff04:	920b      	str	r2, [sp, #44]	; 0x2c
 800ff06:	9309      	str	r3, [sp, #36]	; 0x24
 800ff08:	469a      	mov	sl, r3
 800ff0a:	930d      	str	r3, [sp, #52]	; 0x34
 800ff0c:	4699      	mov	r9, r3
 800ff0e:	882b      	ldrh	r3, [r5, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d131      	bne.n	800ff78 <EwGetAttrBitmap+0x11ae>
 800ff14:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
 800ff18:	f10d 0e7c 	add.w	lr, sp, #124	; 0x7c
 800ff1c:	2600      	movs	r6, #0
 800ff1e:	454e      	cmp	r6, r9
 800ff20:	f040 80df 	bne.w	80100e2 <EwGetAttrBitmap+0x1318>
 800ff24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff26:	4913      	ldr	r1, [pc, #76]	; (800ff74 <EwGetAttrBitmap+0x11aa>)
 800ff28:	eba3 030a 	sub.w	r3, r3, sl
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ff30:	f7fe fac0 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ff34:	b100      	cbz	r0, 800ff38 <EwGetAttrBitmap+0x116e>
 800ff36:	350a      	adds	r5, #10
 800ff38:	6821      	ldr	r1, [r4, #0]
 800ff3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ff3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff3e:	440a      	add	r2, r1
 800ff40:	4453      	add	r3, sl
 800ff42:	9316      	str	r3, [sp, #88]	; 0x58
 800ff44:	8113      	strh	r3, [r2, #8]
 800ff46:	6863      	ldr	r3, [r4, #4]
 800ff48:	1a5b      	subs	r3, r3, r1
 800ff4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff4c:	ebc1 0363 	rsb	r3, r1, r3, asr #1
 800ff50:	8153      	strh	r3, [r2, #10]
 800ff52:	e6df      	b.n	800fd14 <EwGetAttrBitmap+0xf4a>
 800ff54:	4610      	mov	r0, r2
 800ff56:	f04f 0901 	mov.w	r9, #1
 800ff5a:	e780      	b.n	800fe5e <EwGetAttrBitmap+0x1094>
 800ff5c:	f105 000a 	add.w	r0, r5, #10
 800ff60:	4613      	mov	r3, r2
 800ff62:	e020      	b.n	800ffa6 <EwGetAttrBitmap+0x11dc>
 800ff64:	08039b80 	.word	0x08039b80
 800ff68:	00020805 	.word	0x00020805
 800ff6c:	08039b85 	.word	0x08039b85
 800ff70:	08034634 	.word	0x08034634
 800ff74:	08039b8f 	.word	0x08039b8f
 800ff78:	9b08      	ldr	r3, [sp, #32]
 800ff7a:	454b      	cmp	r3, r9
 800ff7c:	d0ca      	beq.n	800ff14 <EwGetAttrBitmap+0x114a>
 800ff7e:	4973      	ldr	r1, [pc, #460]	; (801014c <EwGetAttrBitmap+0x1382>)
 800ff80:	4628      	mov	r0, r5
 800ff82:	f7fe fa97 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d0c4      	beq.n	800ff14 <EwGetAttrBitmap+0x114a>
 800ff8a:	892a      	ldrh	r2, [r5, #8]
 800ff8c:	f1a2 0362 	sub.w	r3, r2, #98	; 0x62
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	2b12      	cmp	r3, #18
 800ff94:	d804      	bhi.n	800ffa0 <EwGetAttrBitmap+0x11d6>
 800ff96:	496e      	ldr	r1, [pc, #440]	; (8010150 <EwGetAttrBitmap+0x1386>)
 800ff98:	fa21 f303 	lsr.w	r3, r1, r3
 800ff9c:	07db      	lsls	r3, r3, #31
 800ff9e:	d4dd      	bmi.n	800ff5c <EwGetAttrBitmap+0x1192>
 800ffa0:	f105 0008 	add.w	r0, r5, #8
 800ffa4:	236d      	movs	r3, #109	; 0x6d
 800ffa6:	aa1f      	add	r2, sp, #124	; 0x7c
 800ffa8:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 800ffac:	ab1c      	add	r3, sp, #112	; 0x70
 800ffae:	aa18      	add	r2, sp, #96	; 0x60
 800ffb0:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
 800ffb4:	ab1b      	add	r3, sp, #108	; 0x6c
 800ffb6:	9301      	str	r3, [sp, #4]
 800ffb8:	ab1a      	add	r3, sp, #104	; 0x68
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	4641      	mov	r1, r8
 800ffbe:	ab19      	add	r3, sp, #100	; 0x64
 800ffc0:	f7fe fa40 	bl	800e444 <EwCanDiscardSurface+0x168>
 800ffc4:	8803      	ldrh	r3, [r0, #0]
 800ffc6:	2b3a      	cmp	r3, #58	; 0x3a
 800ffc8:	4605      	mov	r5, r0
 800ffca:	d104      	bne.n	800ffd6 <EwGetAttrBitmap+0x120c>
 800ffcc:	4639      	mov	r1, r7
 800ffce:	3002      	adds	r0, #2
 800ffd0:	f7fe fa12 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 800ffd4:	4605      	mov	r5, r0
 800ffd6:	882b      	ldrh	r3, [r5, #0]
 800ffd8:	2b7d      	cmp	r3, #125	; 0x7d
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	bf08      	it	eq
 800ffde:	3502      	addeq	r5, #2
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	d016      	beq.n	8010012 <EwGetAttrBitmap+0x1248>
 800ffe4:	2106      	movs	r1, #6
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7fe fb04 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	f000 80a5 	beq.w	801013c <EwGetAttrBitmap+0x1372>
 800fff2:	6863      	ldr	r3, [r4, #4]
 800fff4:	2252      	movs	r2, #82	; 0x52
 800fff6:	801a      	strh	r2, [r3, #0]
 800fff8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fffc:	805a      	strh	r2, [r3, #2]
 800fffe:	2100      	movs	r1, #0
 8010000:	4442      	add	r2, r8
 8010002:	8099      	strh	r1, [r3, #4]
 8010004:	80da      	strh	r2, [r3, #6]
 8010006:	8119      	strh	r1, [r3, #8]
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	f103 010c 	add.w	r1, r3, #12
 801000e:	6061      	str	r1, [r4, #4]
 8010010:	815a      	strh	r2, [r3, #10]
 8010012:	e9d4 3600 	ldrd	r3, r6, [r4]
 8010016:	1af6      	subs	r6, r6, r3
 8010018:	1073      	asrs	r3, r6, #1
 801001a:	9315      	str	r3, [sp, #84]	; 0x54
 801001c:	ab22      	add	r3, sp, #136	; 0x88
 801001e:	1072      	asrs	r2, r6, #1
 8010020:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 8010024:	2107      	movs	r1, #7
 8010026:	4620      	mov	r0, r4
 8010028:	f7fe fae4 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 801002c:	2800      	cmp	r0, #0
 801002e:	f000 8085 	beq.w	801013c <EwGetAttrBitmap+0x1372>
 8010032:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010034:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010036:	eba8 0103 	sub.w	r1, r8, r3
 801003a:	1a8a      	subs	r2, r1, r2
 801003c:	6861      	ldr	r1, [r4, #4]
 801003e:	2047      	movs	r0, #71	; 0x47
 8010040:	8008      	strh	r0, [r1, #0]
 8010042:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010044:	4403      	add	r3, r0
 8010046:	b29b      	uxth	r3, r3
 8010048:	804b      	strh	r3, [r1, #2]
 801004a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801004c:	8088      	strh	r0, [r1, #4]
 801004e:	4413      	add	r3, r2
 8010050:	80cb      	strh	r3, [r1, #6]
 8010052:	f101 000e 	add.w	r0, r1, #14
 8010056:	2300      	movs	r3, #0
 8010058:	810b      	strh	r3, [r1, #8]
 801005a:	814b      	strh	r3, [r1, #10]
 801005c:	6060      	str	r0, [r4, #4]
 801005e:	818b      	strh	r3, [r1, #12]
 8010060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010062:	9313      	str	r3, [sp, #76]	; 0x4c
 8010064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010066:	9314      	str	r3, [sp, #80]	; 0x50
 8010068:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801006a:	9305      	str	r3, [sp, #20]
 801006c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8010072:	9303      	str	r3, [sp, #12]
 8010074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010076:	9302      	str	r3, [sp, #8]
 8010078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801007a:	4629      	mov	r1, r5
 801007c:	e9cd 4300 	strd	r4, r3, [sp]
 8010080:	ee18 0a10 	vmov	r0, s16
 8010084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010086:	f7ff fdf7 	bl	800fc78 <EwGetAttrBitmap+0xeae>
 801008a:	3704      	adds	r7, #4
 801008c:	4605      	mov	r5, r0
 801008e:	2800      	cmp	r0, #0
 8010090:	d054      	beq.n	801013c <EwGetAttrBitmap+0x1372>
 8010092:	e9dd 311a 	ldrd	r3, r1, [sp, #104]	; 0x68
 8010096:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801009a:	6812      	ldr	r2, [r2, #0]
 801009c:	440b      	add	r3, r1
 801009e:	4413      	add	r3, r2
 80100a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100a2:	f842 3b04 	str.w	r3, [r2], #4
 80100a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80100a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100aa:	3204      	adds	r2, #4
 80100ac:	920c      	str	r2, [sp, #48]	; 0x30
 80100ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100b0:	6812      	ldr	r2, [r2, #0]
 80100b2:	459a      	cmp	sl, r3
 80100b4:	441a      	add	r2, r3
 80100b6:	bfb8      	it	lt
 80100b8:	469a      	movlt	sl, r3
 80100ba:	4290      	cmp	r0, r2
 80100bc:	bfb8      	it	lt
 80100be:	4610      	movlt	r0, r2
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	9009      	str	r0, [sp, #36]	; 0x24
 80100c4:	4416      	add	r6, r2
 80100c6:	1a5b      	subs	r3, r3, r1
 80100c8:	8133      	strh	r3, [r6, #8]
 80100ca:	6863      	ldr	r3, [r4, #4]
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100d0:	ebc2 0363 	rsb	r3, r2, r3, asr #1
 80100d4:	8173      	strh	r3, [r6, #10]
 80100d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100d8:	4443      	add	r3, r8
 80100da:	930d      	str	r3, [sp, #52]	; 0x34
 80100dc:	f109 0901 	add.w	r9, r9, #1
 80100e0:	e715      	b.n	800ff0e <EwGetAttrBitmap+0x1144>
 80100e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80100e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80100e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80100ec:	910e      	str	r1, [sp, #56]	; 0x38
 80100ee:	f85e 1b04 	ldr.w	r1, [lr], #4
 80100f2:	296d      	cmp	r1, #109	; 0x6d
 80100f4:	ebaa 0303 	sub.w	r3, sl, r3
 80100f8:	d01c      	beq.n	8010134 <EwGetAttrBitmap+0x136a>
 80100fa:	2974      	cmp	r1, #116	; 0x74
 80100fc:	bf08      	it	eq
 80100fe:	2300      	moveq	r3, #0
 8010100:	6821      	ldr	r1, [r4, #0]
 8010102:	3202      	adds	r2, #2
 8010104:	0050      	lsls	r0, r2, #1
 8010106:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
 801010a:	fa17 f783 	uxtah	r7, r7, r3
 801010e:	f821 7012 	strh.w	r7, [r1, r2, lsl #1]
 8010112:	3004      	adds	r0, #4
 8010114:	eb01 0842 	add.w	r8, r1, r2, lsl #1
 8010118:	5a0a      	ldrh	r2, [r1, r0]
 801011a:	fa12 f383 	uxtah	r3, r2, r3
 801011e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010120:	520b      	strh	r3, [r1, r0]
 8010122:	f852 3b04 	ldr.w	r3, [r2], #4
 8010126:	920f      	str	r2, [sp, #60]	; 0x3c
 8010128:	3301      	adds	r3, #1
 801012a:	bf18      	it	ne
 801012c:	f828 ac08 	strhne.w	sl, [r8, #-8]
 8010130:	3601      	adds	r6, #1
 8010132:	e6f4      	b.n	800ff1e <EwGetAttrBitmap+0x1154>
 8010134:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010138:	105b      	asrs	r3, r3, #1
 801013a:	e7e1      	b.n	8010100 <EwGetAttrBitmap+0x1336>
 801013c:	2500      	movs	r5, #0
 801013e:	4628      	mov	r0, r5
 8010140:	b02f      	add	sp, #188	; 0xbc
 8010142:	ecbd 8b02 	vpop	{d8}
 8010146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014a:	bf00      	nop
 801014c:	08039b8a 	.word	0x08039b8a
 8010150:	00040801 	.word	0x00040801
 8010154:	2b6a      	cmp	r3, #106	; 0x6a
 8010156:	f47f ae1c 	bne.w	800fd92 <EwGetAttrBitmap+0xfc8>
 801015a:	3e20      	subs	r6, #32
 801015c:	f105 000c 	add.w	r0, r5, #12
 8010160:	ab25      	add	r3, sp, #148	; 0x94
 8010162:	9301      	str	r3, [sp, #4]
 8010164:	ab22      	add	r3, sp, #136	; 0x88
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	aa1c      	add	r2, sp, #112	; 0x70
 801016a:	ab1f      	add	r3, sp, #124	; 0x7c
 801016c:	4659      	mov	r1, fp
 801016e:	f7fe f969 	bl	800e444 <EwCanDiscardSurface+0x168>
 8010172:	8803      	ldrh	r3, [r0, #0]
 8010174:	2b3a      	cmp	r3, #58	; 0x3a
 8010176:	4605      	mov	r5, r0
 8010178:	d104      	bne.n	8010184 <EwGetAttrBitmap+0x13ba>
 801017a:	a92b      	add	r1, sp, #172	; 0xac
 801017c:	3002      	adds	r0, #2
 801017e:	f7fe f93b 	bl	800e3f8 <EwCanDiscardSurface+0x11c>
 8010182:	4605      	mov	r5, r0
 8010184:	882b      	ldrh	r3, [r5, #0]
 8010186:	2b7d      	cmp	r3, #125	; 0x7d
 8010188:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801018a:	bf08      	it	eq
 801018c:	3502      	addeq	r5, #2
 801018e:	3301      	adds	r3, #1
 8010190:	d016      	beq.n	80101c0 <EwGetAttrBitmap+0x13f6>
 8010192:	2106      	movs	r1, #6
 8010194:	4620      	mov	r0, r4
 8010196:	f7fe fa2d 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 801019a:	2800      	cmp	r0, #0
 801019c:	d0ce      	beq.n	801013c <EwGetAttrBitmap+0x1372>
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	2252      	movs	r2, #82	; 0x52
 80101a2:	801a      	strh	r2, [r3, #0]
 80101a4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80101a8:	4402      	add	r2, r0
 80101aa:	809a      	strh	r2, [r3, #4]
 80101ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101ae:	80da      	strh	r2, [r3, #6]
 80101b0:	2100      	movs	r1, #0
 80101b2:	f103 020c 	add.w	r2, r3, #12
 80101b6:	8059      	strh	r1, [r3, #2]
 80101b8:	8119      	strh	r1, [r3, #8]
 80101ba:	6062      	str	r2, [r4, #4]
 80101bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80101be:	815a      	strh	r2, [r3, #10]
 80101c0:	e9d4 3700 	ldrd	r3, r7, [r4]
 80101c4:	2107      	movs	r1, #7
 80101c6:	1aff      	subs	r7, r7, r3
 80101c8:	4620      	mov	r0, r4
 80101ca:	ea4f 0867 	mov.w	r8, r7, asr #1
 80101ce:	f7fe fa11 	bl	800e5f4 <EwCanDiscardSurface+0x318>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	d0b2      	beq.n	801013c <EwGetAttrBitmap+0x1372>
 80101d6:	6863      	ldr	r3, [r4, #4]
 80101d8:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 80101dc:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 80101e0:	2147      	movs	r1, #71	; 0x47
 80101e2:	8019      	strh	r1, [r3, #0]
 80101e4:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
 80101e8:	4411      	add	r1, r2
 80101ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80101ec:	2000      	movs	r0, #0
 80101ee:	8058      	strh	r0, [r3, #2]
 80101f0:	9116      	str	r1, [sp, #88]	; 0x58
 80101f2:	4411      	add	r1, r2
 80101f4:	8099      	strh	r1, [r3, #4]
 80101f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101f8:	80da      	strh	r2, [r3, #6]
 80101fa:	f103 010e 	add.w	r1, r3, #14
 80101fe:	8118      	strh	r0, [r3, #8]
 8010200:	8158      	strh	r0, [r3, #10]
 8010202:	6061      	str	r1, [r4, #4]
 8010204:	f8a3 e00c 	strh.w	lr, [r3, #12]
 8010208:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801020a:	9306      	str	r3, [sp, #24]
 801020c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801020e:	9305      	str	r3, [sp, #20]
 8010210:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8010212:	9304      	str	r3, [sp, #16]
 8010214:	ab17      	add	r3, sp, #92	; 0x5c
 8010216:	9303      	str	r3, [sp, #12]
 8010218:	ab28      	add	r3, sp, #160	; 0xa0
 801021a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 801021e:	ebab 0c0e 	sub.w	ip, fp, lr
 8010222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	4629      	mov	r1, r5
 8010228:	ee18 0a10 	vmov	r0, s16
 801022c:	4633      	mov	r3, r6
 801022e:	ebac 0209 	sub.w	r2, ip, r9
 8010232:	f7fe fdd6 	bl	800ede2 <EwGetAttrBitmap+0x18>
 8010236:	4605      	mov	r5, r0
 8010238:	2800      	cmp	r0, #0
 801023a:	f43f af7f 	beq.w	801013c <EwGetAttrBitmap+0x1372>
 801023e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010242:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010244:	440b      	add	r3, r1
 8010246:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010248:	4413      	add	r3, r2
 801024a:	440b      	add	r3, r1
 801024c:	6821      	ldr	r1, [r4, #0]
 801024e:	9316      	str	r3, [sp, #88]	; 0x58
 8010250:	440f      	add	r7, r1
 8010252:	b29b      	uxth	r3, r3
 8010254:	1a9a      	subs	r2, r3, r2
 8010256:	813a      	strh	r2, [r7, #8]
 8010258:	6862      	ldr	r2, [r4, #4]
 801025a:	1a52      	subs	r2, r2, r1
 801025c:	ebc8 0862 	rsb	r8, r8, r2, asr #1
 8010260:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010262:	f8a7 800a 	strh.w	r8, [r7, #10]
 8010266:	3201      	adds	r2, #1
 8010268:	f43f ad54 	beq.w	800fd14 <EwGetAttrBitmap+0xf4a>
 801026c:	f827 3c04 	strh.w	r3, [r7, #-4]
 8010270:	e550      	b.n	800fd14 <EwGetAttrBitmap+0xf4a>

08010272 <EwGetAttrColor>:
 8010272:	b082      	sub	sp, #8
 8010274:	b108      	cbz	r0, 801027a <EwGetAttrColor+0x8>
 8010276:	2900      	cmp	r1, #0
 8010278:	da06      	bge.n	8010288 <EwGetAttrColor+0x16>
 801027a:	2300      	movs	r3, #0
 801027c:	461a      	mov	r2, r3
 801027e:	4619      	mov	r1, r3
 8010280:	4618      	mov	r0, r3
 8010282:	b002      	add	sp, #8
 8010284:	f007 bf38 	b.w	80180f8 <EwNewColor>
 8010288:	6883      	ldr	r3, [r0, #8]
 801028a:	428b      	cmp	r3, r1
 801028c:	ddf5      	ble.n	801027a <EwGetAttrColor+0x8>
 801028e:	6943      	ldr	r3, [r0, #20]
 8010290:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010294:	4602      	mov	r2, r0
 8010296:	4603      	mov	r3, r0
 8010298:	b2d2      	uxtb	r2, r2
 801029a:	2000      	movs	r0, #0
 801029c:	f362 0007 	bfi	r0, r2, #0, #8
 80102a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80102a4:	f362 200f 	bfi	r0, r2, #8, #8
 80102a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80102ac:	f362 4017 	bfi	r0, r2, #16, #8
 80102b0:	0e1b      	lsrs	r3, r3, #24
 80102b2:	f363 601f 	bfi	r0, r3, #24, #8
 80102b6:	b002      	add	sp, #8
 80102b8:	4770      	bx	lr
 80102ba:	b082      	sub	sp, #8
 80102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c0:	ed2d 8b02 	vpush	{d8}
 80102c4:	b09f      	sub	sp, #124	; 0x7c
 80102c6:	ee08 1a90 	vmov	s17, r1
 80102ca:	a92a      	add	r1, sp, #168	; 0xa8
 80102cc:	e881 000c 	stmia.w	r1, {r2, r3}
 80102d0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80102d4:	9311      	str	r3, [sp, #68]	; 0x44
 80102d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80102d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80102da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80102dc:	930e      	str	r3, [sp, #56]	; 0x38
 80102de:	ee08 0a10 	vmov	s16, r0
 80102e2:	ab02      	add	r3, sp, #8
 80102e4:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 80102e6:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 80102e8:	9312      	str	r3, [sp, #72]	; 0x48
 80102ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80102ec:	429c      	cmp	r4, r3
 80102ee:	d306      	bcc.n	80102fe <EwGetAttrColor+0x8c>
 80102f0:	b01f      	add	sp, #124	; 0x7c
 80102f2:	ecbd 8b02 	vpop	{d8}
 80102f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fa:	b002      	add	sp, #8
 80102fc:	4770      	bx	lr
 80102fe:	8823      	ldrh	r3, [r4, #0]
 8010300:	2b47      	cmp	r3, #71	; 0x47
 8010302:	d002      	beq.n	801030a <EwGetAttrColor+0x98>
 8010304:	2b52      	cmp	r3, #82	; 0x52
 8010306:	f040 80af 	bne.w	8010468 <EwGetAttrColor+0x1f6>
 801030a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801030c:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8010310:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8010312:	4416      	add	r6, r2
 8010314:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010318:	2b47      	cmp	r3, #71	; 0x47
 801031a:	440a      	add	r2, r1
 801031c:	920d      	str	r2, [sp, #52]	; 0x34
 801031e:	d071      	beq.n	8010404 <EwGetAttrColor+0x192>
 8010320:	2b52      	cmp	r3, #82	; 0x52
 8010322:	d1e2      	bne.n	80102ea <EwGetAttrColor+0x78>
 8010324:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010326:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801032a:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801032e:	8961      	ldrh	r1, [r4, #10]
 8010330:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8010332:	4413      	add	r3, r2
 8010334:	9310      	str	r3, [sp, #64]	; 0x40
 8010336:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010338:	441f      	add	r7, r3
 801033a:	f7ff ff9a 	bl	8010272 <EwGetAttrColor>
 801033e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010340:	9015      	str	r0, [sp, #84]	; 0x54
 8010342:	eba6 0b03 	sub.w	fp, r6, r3
 8010346:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 801034a:	eba3 0802 	sub.w	r8, r3, r2
 801034e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8010352:	1a9a      	subs	r2, r3, r2
 8010354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010356:	9213      	str	r2, [sp, #76]	; 0x4c
 8010358:	4659      	mov	r1, fp
 801035a:	4628      	mov	r0, r5
 801035c:	eba7 0903 	sub.w	r9, r7, r3
 8010360:	f003 ffad 	bl	80142be <EwGetOpacityFromGradient>
 8010364:	4641      	mov	r1, r8
 8010366:	4682      	mov	sl, r0
 8010368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801036a:	4628      	mov	r0, r5
 801036c:	f003 ffa7 	bl	80142be <EwGetOpacityFromGradient>
 8010370:	464a      	mov	r2, r9
 8010372:	4641      	mov	r1, r8
 8010374:	9013      	str	r0, [sp, #76]	; 0x4c
 8010376:	4628      	mov	r0, r5
 8010378:	f003 ffa1 	bl	80142be <EwGetOpacityFromGradient>
 801037c:	464a      	mov	r2, r9
 801037e:	4680      	mov	r8, r0
 8010380:	4659      	mov	r1, fp
 8010382:	4628      	mov	r0, r5
 8010384:	f003 ff9b 	bl	80142be <EwGetOpacityFromGradient>
 8010388:	ea4f 611a 	mov.w	r1, sl, lsr #24
 801038c:	4683      	mov	fp, r0
 801038e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010390:	f7fe f818 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010396:	9016      	str	r0, [sp, #88]	; 0x58
 8010398:	0e19      	lsrs	r1, r3, #24
 801039a:	4682      	mov	sl, r0
 801039c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801039e:	f7fe f811 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 80103a2:	ea4f 6118 	mov.w	r1, r8, lsr #24
 80103a6:	4681      	mov	r9, r0
 80103a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80103aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80103ac:	f7fe f80a 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 80103b0:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80103b4:	4680      	mov	r8, r0
 80103b6:	9018      	str	r0, [sp, #96]	; 0x60
 80103b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80103ba:	f7fe f803 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 80103be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80103c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103c4:	f8cd a018 	str.w	sl, [sp, #24]
 80103c8:	e9cd 371c 	strd	r3, r7, [sp, #112]	; 0x70
 80103cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103ce:	e9cd 0619 	strd	r0, r6, [sp, #100]	; 0x64
 80103d2:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 80103d6:	e9cd 9807 	strd	r9, r8, [sp, #28]
 80103da:	ab1e      	add	r3, sp, #120	; 0x78
 80103dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80103e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80103e2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80103e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80103e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80103ec:	e88d 0003 	stmia.w	sp, {r0, r1}
 80103f0:	ab2a      	add	r3, sp, #168	; 0xa8
 80103f2:	cb0c      	ldmia	r3, {r2, r3}
 80103f4:	ee18 1a90 	vmov	r1, s17
 80103f8:	ee18 0a10 	vmov	r0, s16
 80103fc:	f7f7 ff62 	bl	80082c4 <EwFillRectangle>
 8010400:	340c      	adds	r4, #12
 8010402:	e772      	b.n	80102ea <EwGetAttrColor+0x78>
 8010404:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010406:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8010408:	8967      	ldrh	r7, [r4, #10]
 801040a:	429a      	cmp	r2, r3
 801040c:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8010410:	da28      	bge.n	8010464 <EwGetAttrColor+0x1f2>
 8010412:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010414:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010416:	429a      	cmp	r2, r3
 8010418:	da24      	bge.n	8010464 <EwGetAttrColor+0x1f2>
 801041a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801041e:	950a      	str	r5, [sp, #40]	; 0x28
 8010420:	441e      	add	r6, r3
 8010422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010424:	932e      	str	r3, [sp, #184]	; 0xb8
 8010426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010428:	932f      	str	r3, [sp, #188]	; 0xbc
 801042a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801042c:	e9cd 7308 	strd	r7, r3, [sp, #32]
 8010430:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010432:	9306      	str	r3, [sp, #24]
 8010434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010436:	e9cd 6304 	strd	r6, r3, [sp, #16]
 801043a:	340e      	adds	r4, #14
 801043c:	9407      	str	r4, [sp, #28]
 801043e:	ab2e      	add	r3, sp, #184	; 0xb8
 8010440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010446:	e883 0003 	stmia.w	r3, {r0, r1}
 801044a:	ab2c      	add	r3, sp, #176	; 0xb0
 801044c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010450:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010454:	ab2a      	add	r3, sp, #168	; 0xa8
 8010456:	cb0c      	ldmia	r3, {r2, r3}
 8010458:	ee18 1a90 	vmov	r1, s17
 801045c:	ee18 0a10 	vmov	r0, s16
 8010460:	f7ff ff2b 	bl	80102ba <EwGetAttrColor+0x48>
 8010464:	463c      	mov	r4, r7
 8010466:	e740      	b.n	80102ea <EwGetAttrColor+0x78>
 8010468:	2b54      	cmp	r3, #84	; 0x54
 801046a:	d001      	beq.n	8010470 <EwGetAttrColor+0x1fe>
 801046c:	2b4a      	cmp	r3, #74	; 0x4a
 801046e:	d103      	bne.n	8010478 <EwGetAttrColor+0x206>
 8010470:	88e3      	ldrh	r3, [r4, #6]
 8010472:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010476:	e738      	b.n	80102ea <EwGetAttrColor+0x78>
 8010478:	2b49      	cmp	r3, #73	; 0x49
 801047a:	d0c1      	beq.n	8010400 <EwGetAttrColor+0x18e>
 801047c:	2b41      	cmp	r3, #65	; 0x41
 801047e:	bf08      	it	eq
 8010480:	340e      	addeq	r4, #14
 8010482:	e732      	b.n	80102ea <EwGetAttrColor+0x78>
 8010484:	b082      	sub	sp, #8
 8010486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048a:	ed2d 8b02 	vpush	{d8}
 801048e:	b0b9      	sub	sp, #228	; 0xe4
 8010490:	e9dd b44c 	ldrd	fp, r4, [sp, #304]	; 0x130
 8010494:	911a      	str	r1, [sp, #104]	; 0x68
 8010496:	a944      	add	r1, sp, #272	; 0x110
 8010498:	e881 000c 	stmia.w	r1, {r2, r3}
 801049c:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 80104a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80104a2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80104a4:	9312      	str	r3, [sp, #72]	; 0x48
 80104a6:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80104a8:	9315      	str	r3, [sp, #84]	; 0x54
 80104aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80104ac:	9314      	str	r3, [sp, #80]	; 0x50
 80104ae:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80104b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80104b2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80104b4:	9316      	str	r3, [sp, #88]	; 0x58
 80104b6:	ee08 0a10 	vmov	s16, r0
 80104ba:	ab02      	add	r3, sp, #8
 80104bc:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80104be:	9213      	str	r2, [sp, #76]	; 0x4c
 80104c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80104c2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80104c4:	429c      	cmp	r4, r3
 80104c6:	d306      	bcc.n	80104d6 <EwGetAttrColor+0x264>
 80104c8:	b039      	add	sp, #228	; 0xe4
 80104ca:	ecbd 8b02 	vpop	{d8}
 80104ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d2:	b002      	add	sp, #8
 80104d4:	4770      	bx	lr
 80104d6:	8823      	ldrh	r3, [r4, #0]
 80104d8:	2b47      	cmp	r3, #71	; 0x47
 80104da:	d003      	beq.n	80104e4 <EwGetAttrColor+0x272>
 80104dc:	2b52      	cmp	r3, #82	; 0x52
 80104de:	d140      	bne.n	8010562 <EwGetAttrColor+0x2f0>
 80104e0:	340c      	adds	r4, #12
 80104e2:	e7ee      	b.n	80104c2 <EwGetAttrColor+0x250>
 80104e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104e8:	8966      	ldrh	r6, [r4, #10]
 80104ea:	4293      	cmp	r3, r2
 80104ec:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80104f0:	dd35      	ble.n	801055e <EwGetAttrColor+0x2ec>
 80104f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104f6:	4293      	cmp	r3, r2
 80104f8:	dd31      	ble.n	801055e <EwGetAttrColor+0x2ec>
 80104fa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80104fe:	994a      	ldr	r1, [sp, #296]	; 0x128
 8010500:	88a2      	ldrh	r2, [r4, #4]
 8010502:	440b      	add	r3, r1
 8010504:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8010508:	950a      	str	r5, [sp, #40]	; 0x28
 801050a:	440b      	add	r3, r1
 801050c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801050e:	9144      	str	r1, [sp, #272]	; 0x110
 8010510:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010512:	9145      	str	r1, [sp, #276]	; 0x114
 8010514:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010516:	9146      	str	r1, [sp, #280]	; 0x118
 8010518:	9914      	ldr	r1, [sp, #80]	; 0x50
 801051a:	9147      	str	r1, [sp, #284]	; 0x11c
 801051c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801051e:	9148      	str	r1, [sp, #288]	; 0x120
 8010520:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010522:	9149      	str	r1, [sp, #292]	; 0x124
 8010524:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010526:	e9cd 6108 	strd	r6, r1, [sp, #32]
 801052a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 801052c:	340e      	adds	r4, #14
 801052e:	fa01 f282 	sxtah	r2, r1, r2
 8010532:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8010536:	e9cd b406 	strd	fp, r4, [sp, #24]
 801053a:	ab48      	add	r3, sp, #288	; 0x120
 801053c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010542:	e883 0003 	stmia.w	r3, {r0, r1}
 8010546:	ab46      	add	r3, sp, #280	; 0x118
 8010548:	e893 0003 	ldmia.w	r3, {r0, r1}
 801054c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010550:	ab44      	add	r3, sp, #272	; 0x110
 8010552:	cb0c      	ldmia	r3, {r2, r3}
 8010554:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010556:	ee18 0a10 	vmov	r0, s16
 801055a:	f7ff ff93 	bl	8010484 <EwGetAttrColor+0x212>
 801055e:	4634      	mov	r4, r6
 8010560:	e7af      	b.n	80104c2 <EwGetAttrColor+0x250>
 8010562:	2b54      	cmp	r3, #84	; 0x54
 8010564:	d004      	beq.n	8010570 <EwGetAttrColor+0x2fe>
 8010566:	f1a3 0249 	sub.w	r2, r3, #73	; 0x49
 801056a:	2a01      	cmp	r2, #1
 801056c:	f200 81c7 	bhi.w	80108fe <EwGetAttrColor+0x68c>
 8010570:	994a      	ldr	r1, [sp, #296]	; 0x128
 8010572:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010576:	440a      	add	r2, r1
 8010578:	9218      	str	r2, [sp, #96]	; 0x60
 801057a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 801057c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010580:	2b4a      	cmp	r3, #74	; 0x4a
 8010582:	440a      	add	r2, r1
 8010584:	9219      	str	r2, [sp, #100]	; 0x64
 8010586:	f000 8120 	beq.w	80107ca <EwGetAttrColor+0x558>
 801058a:	2b54      	cmp	r3, #84	; 0x54
 801058c:	f000 808d 	beq.w	80106aa <EwGetAttrColor+0x438>
 8010590:	2b49      	cmp	r3, #73	; 0x49
 8010592:	d196      	bne.n	80104c2 <EwGetAttrColor+0x250>
 8010594:	88e1      	ldrh	r1, [r4, #6]
 8010596:	4658      	mov	r0, fp
 8010598:	f7fe fc17 	bl	800edca <EwGetAttrBitmap>
 801059c:	4606      	mov	r6, r0
 801059e:	b930      	cbnz	r0, 80105ae <EwGetAttrColor+0x33c>
 80105a0:	4601      	mov	r1, r0
 80105a2:	4658      	mov	r0, fp
 80105a4:	f7fe fc11 	bl	800edca <EwGetAttrBitmap>
 80105a8:	4606      	mov	r6, r0
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d098      	beq.n	80104e0 <EwGetAttrColor+0x26e>
 80105ae:	8923      	ldrh	r3, [r4, #8]
 80105b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105b2:	68b7      	ldr	r7, [r6, #8]
 80105b4:	ee08 3a90 	vmov	s17, r3
 80105b8:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80105c0:	931c      	str	r3, [sp, #112]	; 0x70
 80105c2:	1a52      	subs	r2, r2, r1
 80105c4:	6871      	ldr	r1, [r6, #4]
 80105c6:	921d      	str	r2, [sp, #116]	; 0x74
 80105c8:	eb03 0801 	add.w	r8, r3, r1
 80105cc:	4628      	mov	r0, r5
 80105ce:	4619      	mov	r1, r3
 80105d0:	4417      	add	r7, r2
 80105d2:	f003 fe74 	bl	80142be <EwGetOpacityFromGradient>
 80105d6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80105d8:	4682      	mov	sl, r0
 80105da:	4641      	mov	r1, r8
 80105dc:	4628      	mov	r0, r5
 80105de:	f003 fe6e 	bl	80142be <EwGetOpacityFromGradient>
 80105e2:	463a      	mov	r2, r7
 80105e4:	4681      	mov	r9, r0
 80105e6:	4641      	mov	r1, r8
 80105e8:	4628      	mov	r0, r5
 80105ea:	f003 fe68 	bl	80142be <EwGetOpacityFromGradient>
 80105ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80105f0:	463a      	mov	r2, r7
 80105f2:	4619      	mov	r1, r3
 80105f4:	4680      	mov	r8, r0
 80105f6:	4628      	mov	r0, r5
 80105f8:	f003 fe61 	bl	80142be <EwGetOpacityFromGradient>
 80105fc:	8961      	ldrh	r1, [r4, #10]
 80105fe:	901c      	str	r0, [sp, #112]	; 0x70
 8010600:	4658      	mov	r0, fp
 8010602:	f7ff fe36 	bl	8010272 <EwGetAttrColor>
 8010606:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010608:	9334      	str	r3, [sp, #208]	; 0xd0
 801060a:	2200      	movs	r2, #0
 801060c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801060e:	9335      	str	r3, [sp, #212]	; 0xd4
 8010610:	e9cd 2232 	strd	r2, r2, [sp, #200]	; 0xc8
 8010614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010616:	6872      	ldr	r2, [r6, #4]
 8010618:	9023      	str	r0, [sp, #140]	; 0x8c
 801061a:	441a      	add	r2, r3
 801061c:	9236      	str	r2, [sp, #216]	; 0xd8
 801061e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010620:	68b2      	ldr	r2, [r6, #8]
 8010622:	ea4f 611a 	mov.w	r1, sl, lsr #24
 8010626:	441a      	add	r2, r3
 8010628:	9237      	str	r2, [sp, #220]	; 0xdc
 801062a:	4607      	mov	r7, r0
 801062c:	f7fd feca 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010630:	ea4f 6119 	mov.w	r1, r9, lsr #24
 8010634:	4682      	mov	sl, r0
 8010636:	902c      	str	r0, [sp, #176]	; 0xb0
 8010638:	4638      	mov	r0, r7
 801063a:	f7fd fec3 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801063e:	ea4f 6118 	mov.w	r1, r8, lsr #24
 8010642:	4681      	mov	r9, r0
 8010644:	902d      	str	r0, [sp, #180]	; 0xb4
 8010646:	4638      	mov	r0, r7
 8010648:	f7fd febc 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801064c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801064e:	902e      	str	r0, [sp, #184]	; 0xb8
 8010650:	4680      	mov	r8, r0
 8010652:	0e19      	lsrs	r1, r3, #24
 8010654:	4638      	mov	r0, r7
 8010656:	f7fd feb5 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801065a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801065c:	9344      	str	r3, [sp, #272]	; 0x110
 801065e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010660:	9345      	str	r3, [sp, #276]	; 0x114
 8010662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010664:	9346      	str	r3, [sp, #280]	; 0x118
 8010666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010668:	9347      	str	r3, [sp, #284]	; 0x11c
 801066a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801066c:	902f      	str	r0, [sp, #188]	; 0xbc
 801066e:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8010672:	e9cd 980b 	strd	r9, r8, [sp, #44]	; 0x2c
 8010676:	2100      	movs	r1, #0
 8010678:	ab08      	add	r3, sp, #32
 801067a:	4608      	mov	r0, r1
 801067c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8010680:	e883 0003 	stmia.w	r3, {r0, r1}
 8010684:	ab38      	add	r3, sp, #224	; 0xe0
 8010686:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801068a:	af04      	add	r7, sp, #16
 801068c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8010690:	ab44      	add	r3, sp, #272	; 0x110
 8010692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010694:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010698:	ee18 3a90 	vmov	r3, s17
 801069c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801069e:	ee18 0a10 	vmov	r0, s16
 80106a2:	4631      	mov	r1, r6
 80106a4:	f7fa fe34 	bl	800b310 <EwCopyBitmap>
 80106a8:	e71a      	b.n	80104e0 <EwGetAttrColor+0x26e>
 80106aa:	8921      	ldrh	r1, [r4, #8]
 80106ac:	4658      	mov	r0, fp
 80106ae:	f7fe fb80 	bl	800edb2 <EwGetAttrFont>
 80106b2:	8961      	ldrh	r1, [r4, #10]
 80106b4:	4606      	mov	r6, r0
 80106b6:	4658      	mov	r0, fp
 80106b8:	f7ff fddb 	bl	8010272 <EwGetAttrColor>
 80106bc:	88e3      	ldrh	r3, [r4, #6]
 80106be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80106c0:	931c      	str	r3, [sp, #112]	; 0x70
 80106c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80106c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80106c6:	9034      	str	r0, [sp, #208]	; 0xd0
 80106c8:	1a9f      	subs	r7, r3, r2
 80106ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80106ce:	1a9a      	subs	r2, r3, r2
 80106d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106d2:	921d      	str	r2, [sp, #116]	; 0x74
 80106d4:	eba3 0901 	sub.w	r9, r3, r1
 80106d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106dc:	4628      	mov	r0, r5
 80106de:	eba3 0801 	sub.w	r8, r3, r1
 80106e2:	4639      	mov	r1, r7
 80106e4:	f003 fdeb 	bl	80142be <EwGetOpacityFromGradient>
 80106e8:	4649      	mov	r1, r9
 80106ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80106ec:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 80106f0:	4682      	mov	sl, r0
 80106f2:	4628      	mov	r0, r5
 80106f4:	f003 fde3 	bl	80142be <EwGetOpacityFromGradient>
 80106f8:	4642      	mov	r2, r8
 80106fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80106fc:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010700:	4681      	mov	r9, r0
 8010702:	4628      	mov	r0, r5
 8010704:	f003 fddb 	bl	80142be <EwGetOpacityFromGradient>
 8010708:	4639      	mov	r1, r7
 801070a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801070c:	4680      	mov	r8, r0
 801070e:	4628      	mov	r0, r5
 8010710:	f003 fdd5 	bl	80142be <EwGetOpacityFromGradient>
 8010714:	4607      	mov	r7, r0
 8010716:	b936      	cbnz	r6, 8010726 <EwGetAttrColor+0x4b4>
 8010718:	4631      	mov	r1, r6
 801071a:	4658      	mov	r0, fp
 801071c:	f7fe fb49 	bl	800edb2 <EwGetAttrFont>
 8010720:	4606      	mov	r6, r0
 8010722:	2800      	cmp	r0, #0
 8010724:	d04d      	beq.n	80107c2 <EwGetAttrColor+0x550>
 8010726:	ea4f 611a 	mov.w	r1, sl, lsr #24
 801072a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801072c:	f7fd fe4a 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010730:	ea4f 6119 	mov.w	r1, r9, lsr #24
 8010734:	4682      	mov	sl, r0
 8010736:	9024      	str	r0, [sp, #144]	; 0x90
 8010738:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801073a:	f7fd fe43 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801073e:	ea4f 6118 	mov.w	r1, r8, lsr #24
 8010742:	4681      	mov	r9, r0
 8010744:	9025      	str	r0, [sp, #148]	; 0x94
 8010746:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010748:	f7fd fe3c 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801074c:	0e39      	lsrs	r1, r7, #24
 801074e:	4680      	mov	r8, r0
 8010750:	9026      	str	r0, [sp, #152]	; 0x98
 8010752:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010754:	f7fd fe36 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010758:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801075a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801075c:	9027      	str	r0, [sp, #156]	; 0x9c
 801075e:	1a9b      	subs	r3, r3, r2
 8010760:	9330      	str	r3, [sp, #192]	; 0xc0
 8010762:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010766:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801076a:	1a9b      	subs	r3, r3, r2
 801076c:	9331      	str	r3, [sp, #196]	; 0xc4
 801076e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010770:	9344      	str	r3, [sp, #272]	; 0x110
 8010772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010774:	9345      	str	r3, [sp, #276]	; 0x114
 8010776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010778:	9346      	str	r3, [sp, #280]	; 0x118
 801077a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801077c:	9347      	str	r3, [sp, #284]	; 0x11c
 801077e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010780:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
 8010784:	2300      	movs	r3, #0
 8010786:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801078a:	e9cd 980e 	strd	r9, r8, [sp, #56]	; 0x38
 801078e:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 8010792:	ab09      	add	r3, sp, #36	; 0x24
 8010794:	e883 0003 	stmia.w	r3, {r0, r1}
 8010798:	ab44      	add	r3, sp, #272	; 0x110
 801079a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801079c:	af05      	add	r7, sp, #20
 801079e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80107a2:	ab44      	add	r3, sp, #272	; 0x110
 80107a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107a6:	af01      	add	r7, sp, #4
 80107a8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80107ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80107b2:	ee18 0a10 	vmov	r0, s16
 80107b6:	3b06      	subs	r3, #6
 80107b8:	f104 020c 	add.w	r2, r4, #12
 80107bc:	4631      	mov	r1, r6
 80107be:	f7fc f887 	bl	800c8d0 <EwDrawText>
 80107c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80107c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80107c8:	e67b      	b.n	80104c2 <EwGetAttrColor+0x250>
 80107ca:	8921      	ldrh	r1, [r4, #8]
 80107cc:	4658      	mov	r0, fp
 80107ce:	f7fe faf0 	bl	800edb2 <EwGetAttrFont>
 80107d2:	8961      	ldrh	r1, [r4, #10]
 80107d4:	4606      	mov	r6, r0
 80107d6:	4658      	mov	r0, fp
 80107d8:	f7ff fd4b 	bl	8010272 <EwGetAttrColor>
 80107dc:	88e3      	ldrh	r3, [r4, #6]
 80107de:	931c      	str	r3, [sp, #112]	; 0x70
 80107e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80107e4:	3b01      	subs	r3, #1
 80107e6:	005a      	lsls	r2, r3, #1
 80107e8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80107ec:	921d      	str	r2, [sp, #116]	; 0x74
 80107ee:	931e      	str	r3, [sp, #120]	; 0x78
 80107f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80107f6:	9034      	str	r0, [sp, #208]	; 0xd0
 80107f8:	1a9f      	subs	r7, r3, r2
 80107fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80107fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107fe:	1a9a      	subs	r2, r3, r2
 8010800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010802:	9220      	str	r2, [sp, #128]	; 0x80
 8010804:	eba3 0901 	sub.w	r9, r3, r1
 8010808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801080a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801080c:	4628      	mov	r0, r5
 801080e:	eba3 0801 	sub.w	r8, r3, r1
 8010812:	4639      	mov	r1, r7
 8010814:	f003 fd53 	bl	80142be <EwGetOpacityFromGradient>
 8010818:	4649      	mov	r1, r9
 801081a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801081c:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8010820:	4682      	mov	sl, r0
 8010822:	4628      	mov	r0, r5
 8010824:	f003 fd4b 	bl	80142be <EwGetOpacityFromGradient>
 8010828:	4642      	mov	r2, r8
 801082a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801082c:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8010830:	4681      	mov	r9, r0
 8010832:	4628      	mov	r0, r5
 8010834:	f003 fd43 	bl	80142be <EwGetOpacityFromGradient>
 8010838:	4639      	mov	r1, r7
 801083a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801083c:	4680      	mov	r8, r0
 801083e:	4628      	mov	r0, r5
 8010840:	f003 fd3d 	bl	80142be <EwGetOpacityFromGradient>
 8010844:	4607      	mov	r7, r0
 8010846:	b936      	cbnz	r6, 8010856 <EwGetAttrColor+0x5e4>
 8010848:	4631      	mov	r1, r6
 801084a:	4658      	mov	r0, fp
 801084c:	f7fe fab1 	bl	800edb2 <EwGetAttrFont>
 8010850:	4606      	mov	r6, r0
 8010852:	2800      	cmp	r0, #0
 8010854:	d04f      	beq.n	80108f6 <EwGetAttrColor+0x684>
 8010856:	ea4f 611a 	mov.w	r1, sl, lsr #24
 801085a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801085c:	f7fd fdb2 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010860:	ea4f 6119 	mov.w	r1, r9, lsr #24
 8010864:	4682      	mov	sl, r0
 8010866:	9028      	str	r0, [sp, #160]	; 0xa0
 8010868:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801086a:	f7fd fdab 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801086e:	ea4f 6118 	mov.w	r1, r8, lsr #24
 8010872:	4681      	mov	r9, r0
 8010874:	9029      	str	r0, [sp, #164]	; 0xa4
 8010876:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010878:	f7fd fda4 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 801087c:	0e39      	lsrs	r1, r7, #24
 801087e:	4680      	mov	r8, r0
 8010880:	902a      	str	r0, [sp, #168]	; 0xa8
 8010882:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010884:	f7fd fd9e 	bl	800e3c4 <EwCanDiscardSurface+0xe8>
 8010888:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801088a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801088c:	902b      	str	r0, [sp, #172]	; 0xac
 801088e:	1a9b      	subs	r3, r3, r2
 8010890:	9330      	str	r3, [sp, #192]	; 0xc0
 8010892:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010896:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801089a:	1a9b      	subs	r3, r3, r2
 801089c:	9331      	str	r3, [sp, #196]	; 0xc4
 801089e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108a0:	9344      	str	r3, [sp, #272]	; 0x110
 80108a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108a4:	9345      	str	r3, [sp, #276]	; 0x114
 80108a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108a8:	9346      	str	r3, [sp, #280]	; 0x118
 80108aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80108ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108b0:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
 80108b4:	2300      	movs	r3, #0
 80108b6:	930c      	str	r3, [sp, #48]	; 0x30
 80108b8:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80108bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80108be:	e9cd 980e 	strd	r9, r8, [sp, #56]	; 0x38
 80108c2:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 80108c6:	ab09      	add	r3, sp, #36	; 0x24
 80108c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80108cc:	ab44      	add	r3, sp, #272	; 0x110
 80108ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108d0:	af05      	add	r7, sp, #20
 80108d2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80108d6:	ab44      	add	r3, sp, #272	; 0x110
 80108d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108da:	af01      	add	r7, sp, #4
 80108dc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80108e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108e6:	ee18 0a10 	vmov	r0, s16
 80108ea:	3b07      	subs	r3, #7
 80108ec:	f104 020c 	add.w	r2, r4, #12
 80108f0:	4631      	mov	r1, r6
 80108f2:	f7fb ffed 	bl	800c8d0 <EwDrawText>
 80108f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108f8:	3302      	adds	r3, #2
 80108fa:	441c      	add	r4, r3
 80108fc:	e5e1      	b.n	80104c2 <EwGetAttrColor+0x250>
 80108fe:	2b41      	cmp	r3, #65	; 0x41
 8010900:	bf08      	it	eq
 8010902:	340e      	addeq	r4, #14
 8010904:	e5dd      	b.n	80104c2 <EwGetAttrColor+0x250>

08010906 <EwSetAttrFont>:
 8010906:	b138      	cbz	r0, 8010918 <EwSetAttrFont+0x12>
 8010908:	2900      	cmp	r1, #0
 801090a:	db05      	blt.n	8010918 <EwSetAttrFont+0x12>
 801090c:	6803      	ldr	r3, [r0, #0]
 801090e:	428b      	cmp	r3, r1
 8010910:	bfc4      	itt	gt
 8010912:	68c3      	ldrgt	r3, [r0, #12]
 8010914:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
 8010918:	4770      	bx	lr

0801091a <EwSetAttrBitmap>:
 801091a:	b138      	cbz	r0, 801092c <EwSetAttrBitmap+0x12>
 801091c:	2900      	cmp	r1, #0
 801091e:	db05      	blt.n	801092c <EwSetAttrBitmap+0x12>
 8010920:	6843      	ldr	r3, [r0, #4]
 8010922:	428b      	cmp	r3, r1
 8010924:	bfc4      	itt	gt
 8010926:	6903      	ldrgt	r3, [r0, #16]
 8010928:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
 801092c:	4770      	bx	lr

0801092e <EwSetAttrColor>:
 801092e:	b082      	sub	sp, #8
 8010930:	b140      	cbz	r0, 8010944 <EwSetAttrColor+0x16>
 8010932:	2900      	cmp	r1, #0
 8010934:	db06      	blt.n	8010944 <EwSetAttrColor+0x16>
 8010936:	6883      	ldr	r3, [r0, #8]
 8010938:	428b      	cmp	r3, r1
 801093a:	bfc2      	ittt	gt
 801093c:	6943      	ldrgt	r3, [r0, #20]
 801093e:	4610      	movgt	r0, r2
 8010940:	f843 0021 	strgt.w	r0, [r3, r1, lsl #2]
 8010944:	b002      	add	sp, #8
 8010946:	4770      	bx	lr

08010948 <EwParseAttrString>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	b08f      	sub	sp, #60	; 0x3c
 801094e:	4617      	mov	r7, r2
 8010950:	4698      	mov	r8, r3
 8010952:	f04f 32ff 	mov.w	r2, #4294967295
 8010956:	2300      	movs	r3, #0
 8010958:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 801095c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
 8010960:	460e      	mov	r6, r1
 8010962:	930d      	str	r3, [sp, #52]	; 0x34
 8010964:	4604      	mov	r4, r0
 8010966:	b920      	cbnz	r0, 8010972 <EwParseAttrString+0x2a>
 8010968:	2400      	movs	r4, #0
 801096a:	4620      	mov	r0, r4
 801096c:	b00f      	add	sp, #60	; 0x3c
 801096e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010972:	2900      	cmp	r1, #0
 8010974:	d0f8      	beq.n	8010968 <EwParseAttrString+0x20>
 8010976:	880b      	ldrh	r3, [r1, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d0f5      	beq.n	8010968 <EwParseAttrString+0x20>
 801097c:	2f00      	cmp	r7, #0
 801097e:	ddf3      	ble.n	8010968 <EwParseAttrString+0x20>
 8010980:	200c      	movs	r0, #12
 8010982:	f018 fef5 	bl	8029770 <EwAlloc>
 8010986:	4605      	mov	r5, r0
 8010988:	2800      	cmp	r0, #0
 801098a:	f040 809b 	bne.w	8010ac4 <EwParseAttrString+0x17c>
 801098e:	2015      	movs	r0, #21
 8010990:	f009 f93a 	bl	8019c08 <EwImmediateReclaimMemory>
 8010994:	2800      	cmp	r0, #0
 8010996:	d1f3      	bne.n	8010980 <EwParseAttrString+0x38>
 8010998:	2015      	movs	r0, #21
 801099a:	f008 f985 	bl	8018ca8 <EwError>
 801099e:	e0a9      	b.n	8010af4 <EwParseAttrString+0x1ac>
 80109a0:	2a7b      	cmp	r2, #123	; 0x7b
 80109a2:	d126      	bne.n	80109f2 <EwParseAttrString+0xaa>
 80109a4:	4651      	mov	r1, sl
 80109a6:	4630      	mov	r0, r6
 80109a8:	f7fd fd84 	bl	800e4b4 <EwCanDiscardSurface+0x1d8>
 80109ac:	b330      	cbz	r0, 80109fc <EwParseAttrString+0xb4>
 80109ae:	f106 010a 	add.w	r1, r6, #10
 80109b2:	4608      	mov	r0, r1
 80109b4:	4606      	mov	r6, r0
 80109b6:	f830 2b02 	ldrh.w	r2, [r0], #2
 80109ba:	b11a      	cbz	r2, 80109c4 <EwParseAttrString+0x7c>
 80109bc:	2a7d      	cmp	r2, #125	; 0x7d
 80109be:	d001      	beq.n	80109c4 <EwParseAttrString+0x7c>
 80109c0:	2a7b      	cmp	r2, #123	; 0x7b
 80109c2:	d1f7      	bne.n	80109b4 <EwParseAttrString+0x6c>
 80109c4:	1a72      	subs	r2, r6, r1
 80109c6:	4638      	mov	r0, r7
 80109c8:	9207      	str	r2, [sp, #28]
 80109ca:	f018 ff01 	bl	80297d0 <EwCopy>
 80109ce:	9a07      	ldr	r2, [sp, #28]
 80109d0:	f06f 0301 	mvn.w	r3, #1
 80109d4:	f827 b002 	strh.w	fp, [r7, r2]
 80109d8:	3202      	adds	r2, #2
 80109da:	e9c9 bb03 	strd	fp, fp, [r9, #12]
 80109de:	f8c9 b008 	str.w	fp, [r9, #8]
 80109e2:	f8c9 3004 	str.w	r3, [r9, #4]
 80109e6:	f8c9 b014 	str.w	fp, [r9, #20]
 80109ea:	f849 7b18 	str.w	r7, [r9], #24
 80109ee:	4417      	add	r7, r2
 80109f0:	e02b      	b.n	8010a4a <EwParseAttrString+0x102>
 80109f2:	2a25      	cmp	r2, #37	; 0x25
 80109f4:	8871      	ldrh	r1, [r6, #2]
 80109f6:	d101      	bne.n	80109fc <EwParseAttrString+0xb4>
 80109f8:	b101      	cbz	r1, 80109fc <EwParseAttrString+0xb4>
 80109fa:	3602      	adds	r6, #2
 80109fc:	3602      	adds	r6, #2
 80109fe:	e024      	b.n	8010a4a <EwParseAttrString+0x102>
 8010a00:	2d00      	cmp	r5, #0
 8010a02:	d0b1      	beq.n	8010968 <EwParseAttrString+0x20>
 8010a04:	e049      	b.n	8010a9a <EwParseAttrString+0x152>
 8010a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a08:	f840 ab18 	str.w	sl, [r0], #24
 8010a0c:	1e5a      	subs	r2, r3, #1
 8010a0e:	4253      	negs	r3, r2
 8010a10:	4153      	adcs	r3, r2
 8010a12:	7223      	strb	r3, [r4, #8]
 8010a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a16:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8010a1a:	6123      	str	r3, [r4, #16]
 8010a1c:	007b      	lsls	r3, r7, #1
 8010a1e:	eb00 0747 	add.w	r7, r0, r7, lsl #1
 8010a22:	6829      	ldr	r1, [r5, #0]
 8010a24:	6060      	str	r0, [r4, #4]
 8010a26:	f8c4 900c 	str.w	r9, [r4, #12]
 8010a2a:	6167      	str	r7, [r4, #20]
 8010a2c:	4642      	mov	r2, r8
 8010a2e:	9306      	str	r3, [sp, #24]
 8010a30:	f018 fecc 	bl	80297cc <EwMove>
 8010a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a36:	b19b      	cbz	r3, 8010a60 <EwParseAttrString+0x118>
 8010a38:	2318      	movs	r3, #24
 8010a3a:	fb03 7709 	mla	r7, r3, r9, r7
 8010a3e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8010b84 <EwParseAttrString+0x23c>
 8010a42:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8010a46:	f04f 0b00 	mov.w	fp, #0
 8010a4a:	8832      	ldrh	r2, [r6, #0]
 8010a4c:	2a00      	cmp	r2, #0
 8010a4e:	d1a7      	bne.n	80109a0 <EwParseAttrString+0x58>
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	eb03 0108 	add.w	r1, r3, r8
 8010a56:	9100      	str	r1, [sp, #0]
 8010a58:	6960      	ldr	r0, [r4, #20]
 8010a5a:	4611      	mov	r1, r2
 8010a5c:	f7fd fd37 	bl	800e4ce <EwCanDiscardSurface+0x1f2>
 8010a60:	4a43      	ldr	r2, [pc, #268]	; (8010b70 <EwParseAttrString+0x228>)
 8010a62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a64:	6813      	ldr	r3, [r2, #0]
 8010a66:	2018      	movs	r0, #24
 8010a68:	3318      	adds	r3, #24
 8010a6a:	fb00 3301 	mla	r3, r0, r1, r3
 8010a6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010a74:	9906      	ldr	r1, [sp, #24]
 8010a76:	440b      	add	r3, r1
 8010a78:	6013      	str	r3, [r2, #0]
 8010a7a:	4a3e      	ldr	r2, [pc, #248]	; (8010b74 <EwParseAttrString+0x22c>)
 8010a7c:	6811      	ldr	r1, [r2, #0]
 8010a7e:	428b      	cmp	r3, r1
 8010a80:	bfc8      	it	gt
 8010a82:	6013      	strgt	r3, [r2, #0]
 8010a84:	493c      	ldr	r1, [pc, #240]	; (8010b78 <EwParseAttrString+0x230>)
 8010a86:	4a3d      	ldr	r2, [pc, #244]	; (8010b7c <EwParseAttrString+0x234>)
 8010a88:	6809      	ldr	r1, [r1, #0]
 8010a8a:	6812      	ldr	r2, [r2, #0]
 8010a8c:	440a      	add	r2, r1
 8010a8e:	4413      	add	r3, r2
 8010a90:	4a3b      	ldr	r2, [pc, #236]	; (8010b80 <EwParseAttrString+0x238>)
 8010a92:	6811      	ldr	r1, [r2, #0]
 8010a94:	428b      	cmp	r3, r1
 8010a96:	dd00      	ble.n	8010a9a <EwParseAttrString+0x152>
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	6828      	ldr	r0, [r5, #0]
 8010a9c:	4e34      	ldr	r6, [pc, #208]	; (8010b70 <EwParseAttrString+0x228>)
 8010a9e:	b130      	cbz	r0, 8010aae <EwParseAttrString+0x166>
 8010aa0:	f018 fe68 	bl	8029774 <EwFree>
 8010aa4:	6833      	ldr	r3, [r6, #0]
 8010aa6:	68aa      	ldr	r2, [r5, #8]
 8010aa8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010aac:	6033      	str	r3, [r6, #0]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e9c5 3300 	strd	r3, r3, [r5]
 8010ab4:	60ab      	str	r3, [r5, #8]
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	f018 fe5c 	bl	8029774 <EwFree>
 8010abc:	6833      	ldr	r3, [r6, #0]
 8010abe:	3b0c      	subs	r3, #12
 8010ac0:	6033      	str	r3, [r6, #0]
 8010ac2:	e752      	b.n	801096a <EwParseAttrString+0x22>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8010aca:	6083      	str	r3, [r0, #8]
 8010acc:	4b28      	ldr	r3, [pc, #160]	; (8010b70 <EwParseAttrString+0x228>)
 8010ace:	6819      	ldr	r1, [r3, #0]
 8010ad0:	310c      	adds	r1, #12
 8010ad2:	6019      	str	r1, [r3, #0]
 8010ad4:	4b27      	ldr	r3, [pc, #156]	; (8010b74 <EwParseAttrString+0x22c>)
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	4291      	cmp	r1, r2
 8010ada:	dd00      	ble.n	8010ade <EwParseAttrString+0x196>
 8010adc:	6019      	str	r1, [r3, #0]
 8010ade:	4b27      	ldr	r3, [pc, #156]	; (8010b7c <EwParseAttrString+0x234>)
 8010ae0:	4a25      	ldr	r2, [pc, #148]	; (8010b78 <EwParseAttrString+0x230>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	4419      	add	r1, r3
 8010aea:	4b25      	ldr	r3, [pc, #148]	; (8010b80 <EwParseAttrString+0x238>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	4291      	cmp	r1, r2
 8010af0:	bfc8      	it	gt
 8010af2:	6019      	strgt	r1, [r3, #0]
 8010af4:	ab0d      	add	r3, sp, #52	; 0x34
 8010af6:	9305      	str	r3, [sp, #20]
 8010af8:	ab0c      	add	r3, sp, #48	; 0x30
 8010afa:	9304      	str	r3, [sp, #16]
 8010afc:	ab0b      	add	r3, sp, #44	; 0x2c
 8010afe:	9303      	str	r3, [sp, #12]
 8010b00:	ab0a      	add	r3, sp, #40	; 0x28
 8010b02:	9302      	str	r3, [sp, #8]
 8010b04:	ab09      	add	r3, sp, #36	; 0x24
 8010b06:	e9cd 5300 	strd	r5, r3, [sp]
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	4643      	mov	r3, r8
 8010b0e:	463a      	mov	r2, r7
 8010b10:	4631      	mov	r1, r6
 8010b12:	f7ff f8b1 	bl	800fc78 <EwGetAttrBitmap+0xeae>
 8010b16:	4604      	mov	r4, r0
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	f43f af71 	beq.w	8010a00 <EwParseAttrString+0xb8>
 8010b1e:	e9d5 3200 	ldrd	r3, r2, [r5]
 8010b22:	eba2 0803 	sub.w	r8, r2, r3
 8010b26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010b2a:	ea4f 0a68 	mov.w	sl, r8, asr #1
 8010b2e:	f018 0f02 	tst.w	r8, #2
 8010b32:	4413      	add	r3, r2
 8010b34:	bf14      	ite	ne
 8010b36:	f10a 0701 	addne.w	r7, sl, #1
 8010b3a:	4657      	moveq	r7, sl
 8010b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8010b3e:	f04f 090c 	mov.w	r9, #12
 8010b42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b46:	300c      	adds	r0, #12
 8010b48:	fb09 0003 	mla	r0, r9, r3, r0
 8010b4c:	4438      	add	r0, r7
 8010b4e:	0040      	lsls	r0, r0, #1
 8010b50:	f018 fe0e 	bl	8029770 <EwAlloc>
 8010b54:	4604      	mov	r4, r0
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f47f af55 	bne.w	8010a06 <EwParseAttrString+0xbe>
 8010b5c:	2014      	movs	r0, #20
 8010b5e:	f009 f853 	bl	8019c08 <EwImmediateReclaimMemory>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d1ed      	bne.n	8010b42 <EwParseAttrString+0x1fa>
 8010b66:	2014      	movs	r0, #20
 8010b68:	f008 f89e 	bl	8018ca8 <EwError>
 8010b6c:	e795      	b.n	8010a9a <EwParseAttrString+0x152>
 8010b6e:	bf00      	nop
 8010b70:	200002e8 	.word	0x200002e8
 8010b74:	20000304 	.word	0x20000304
 8010b78:	200002e4 	.word	0x200002e4
 8010b7c:	200002d8 	.word	0x200002d8
 8010b80:	200002ec 	.word	0x200002ec
 8010b84:	08039b74 	.word	0x08039b74

08010b88 <EwFreeAttrString>:
 8010b88:	b470      	push	{r4, r5, r6}
 8010b8a:	b1e0      	cbz	r0, 8010bc6 <EwFreeAttrString+0x3e>
 8010b8c:	4d0f      	ldr	r5, [pc, #60]	; (8010bcc <EwFreeAttrString+0x44>)
 8010b8e:	68c1      	ldr	r1, [r0, #12]
 8010b90:	682a      	ldr	r2, [r5, #0]
 8010b92:	6804      	ldr	r4, [r0, #0]
 8010b94:	2618      	movs	r6, #24
 8010b96:	3a18      	subs	r2, #24
 8010b98:	fb06 2211 	mls	r2, r6, r1, r2
 8010b9c:	6901      	ldr	r1, [r0, #16]
 8010b9e:	2c00      	cmp	r4, #0
 8010ba0:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
 8010ba4:	f004 0201 	and.w	r2, r4, #1
 8010ba8:	bfb8      	it	lt
 8010baa:	4252      	neglt	r2, r2
 8010bac:	4422      	add	r2, r4
 8010bae:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8010bb2:	602a      	str	r2, [r5, #0]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	bc70      	pop	{r4, r5, r6}
 8010bb8:	e9c0 2200 	strd	r2, r2, [r0]
 8010bbc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010bc0:	6142      	str	r2, [r0, #20]
 8010bc2:	f018 bdd7 	b.w	8029774 <EwFree>
 8010bc6:	bc70      	pop	{r4, r5, r6}
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	200002e8 	.word	0x200002e8

08010bd0 <EwDrawAttrText>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	b0a9      	sub	sp, #164	; 0xa4
 8010bd6:	461d      	mov	r5, r3
 8010bd8:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
 8010bdc:	910c      	str	r1, [sp, #48]	; 0x30
 8010bde:	4616      	mov	r6, r2
 8010be0:	930d      	str	r3, [sp, #52]	; 0x34
 8010be2:	4604      	mov	r4, r0
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d070      	beq.n	8010cca <EwDrawAttrText+0xfa>
 8010be8:	2900      	cmp	r1, #0
 8010bea:	d06e      	beq.n	8010cca <EwDrawAttrText+0xfa>
 8010bec:	2a00      	cmp	r2, #0
 8010bee:	d06c      	beq.n	8010cca <EwDrawAttrText+0xfa>
 8010bf0:	2d00      	cmp	r5, #0
 8010bf2:	db6a      	blt.n	8010cca <EwDrawAttrText+0xfa>
 8010bf4:	6903      	ldr	r3, [r0, #16]
 8010bf6:	42ab      	cmp	r3, r5
 8010bf8:	dd67      	ble.n	8010cca <EwDrawAttrText+0xfa>
 8010bfa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8010bfc:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8010bfe:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8010c00:	061b      	lsls	r3, r3, #24
 8010c02:	930e      	str	r3, [sp, #56]	; 0x38
 8010c04:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8010c06:	061b      	lsls	r3, r3, #24
 8010c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c0a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8010c0c:	061b      	lsls	r3, r3, #24
 8010c0e:	e9dd 7836 	ldrd	r7, r8, [sp, #216]	; 0xd8
 8010c12:	9310      	str	r3, [sp, #64]	; 0x40
 8010c14:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010c16:	061b      	lsls	r3, r3, #24
 8010c18:	eba1 0108 	sub.w	r1, r1, r8
 8010c1c:	1bc0      	subs	r0, r0, r7
 8010c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8010c20:	aa0e      	add	r2, sp, #56	; 0x38
 8010c22:	ab12      	add	r3, sp, #72	; 0x48
 8010c24:	e9dd 9a3a 	ldrd	r9, sl, [sp, #232]	; 0xe8
 8010c28:	f003 fa90 	bl	801414c <EwInitOpacityGradient>
 8010c2c:	ab36      	add	r3, sp, #216	; 0xd8
 8010c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c30:	f10d 0c04 	add.w	ip, sp, #4
 8010c34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8010c38:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	ab32      	add	r3, sp, #200	; 0xc8
 8010c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c40:	a832      	add	r0, sp, #200	; 0xc8
 8010c42:	f009 f9c9 	bl	8019fd8 <EwIntersectRect>
 8010c46:	ab12      	add	r3, sp, #72	; 0x48
 8010c48:	930a      	str	r3, [sp, #40]	; 0x28
 8010c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c4c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8010c50:	9309      	str	r3, [sp, #36]	; 0x24
 8010c52:	6833      	ldr	r3, [r6, #0]
 8010c54:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8010c58:	e9cd b307 	strd	fp, r3, [sp, #28]
 8010c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c5e:	eba8 080a 	sub.w	r8, r8, sl
 8010c62:	e9cd 8305 	strd	r8, r3, [sp, #20]
 8010c66:	eba7 0709 	sub.w	r7, r7, r9
 8010c6a:	9704      	str	r7, [sp, #16]
 8010c6c:	ab36      	add	r3, sp, #216	; 0xd8
 8010c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c72:	f10d 0a08 	add.w	sl, sp, #8
 8010c76:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010c7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8010c7e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010c82:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c86:	ab32      	add	r3, sp, #200	; 0xc8
 8010c88:	cb0c      	ldmia	r3, {r2, r3}
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f7ff fb14 	bl	80102ba <EwGetAttrColor+0x48>
 8010c92:	ab12      	add	r3, sp, #72	; 0x48
 8010c94:	930a      	str	r3, [sp, #40]	; 0x28
 8010c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c98:	9309      	str	r3, [sp, #36]	; 0x24
 8010c9a:	6833      	ldr	r3, [r6, #0]
 8010c9c:	9704      	str	r7, [sp, #16]
 8010c9e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8010ca2:	e9cd b307 	strd	fp, r3, [sp, #28]
 8010ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ca8:	e9cd 8305 	strd	r8, r3, [sp, #20]
 8010cac:	ab36      	add	r3, sp, #216	; 0xd8
 8010cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010cb2:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010cb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010cba:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010cbe:	ab32      	add	r3, sp, #200	; 0xc8
 8010cc0:	cb0c      	ldmia	r3, {r2, r3}
 8010cc2:	4629      	mov	r1, r5
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7ff fbdd 	bl	8010484 <EwGetAttrColor+0x212>
 8010cca:	b029      	add	sp, #164	; 0xa4
 8010ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cd0 <EwGetAttrTextSize>:
 8010cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cd4:	b08f      	sub	sp, #60	; 0x3c
 8010cd6:	ae06      	add	r6, sp, #24
 8010cd8:	460f      	mov	r7, r1
 8010cda:	4605      	mov	r5, r0
 8010cdc:	2210      	movs	r2, #16
 8010cde:	2100      	movs	r1, #0
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f020 f8c9 	bl	8030e78 <memset>
 8010ce6:	b147      	cbz	r7, 8010cfa <EwGetAttrTextSize+0x2a>
 8010ce8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010cec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010cf0:	eb04 0943 	add.w	r9, r4, r3, lsl #1
 8010cf4:	af01      	add	r7, sp, #4
 8010cf6:	454c      	cmp	r4, r9
 8010cf8:	d307      	bcc.n	8010d0a <EwGetAttrTextSize+0x3a>
 8010cfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d02:	4628      	mov	r0, r5
 8010d04:	b00f      	add	sp, #60	; 0x3c
 8010d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d0a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d10:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d1c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8010d20:	930d      	str	r3, [sp, #52]	; 0x34
 8010d22:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010d26:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8010d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010d32:	4630      	mov	r0, r6
 8010d34:	f009 f989 	bl	801a04a <EwUnionRect>
 8010d38:	8823      	ldrh	r3, [r4, #0]
 8010d3a:	2b52      	cmp	r3, #82	; 0x52
 8010d3c:	bf16      	itet	ne
 8010d3e:	8963      	ldrhne	r3, [r4, #10]
 8010d40:	340c      	addeq	r4, #12
 8010d42:	eb04 0443 	addne.w	r4, r4, r3, lsl #1
 8010d46:	e7d6      	b.n	8010cf6 <EwGetAttrTextSize+0x26>

08010d48 <EwIsAttrTextRTL>:
 8010d48:	b118      	cbz	r0, 8010d52 <EwIsAttrTextRTL+0xa>
 8010d4a:	7a00      	ldrb	r0, [r0, #8]
 8010d4c:	3800      	subs	r0, #0
 8010d4e:	bf18      	it	ne
 8010d50:	2001      	movne	r0, #1
 8010d52:	4770      	bx	lr

08010d54 <EwGetNoOfAttrLinks>:
 8010d54:	b100      	cbz	r0, 8010d58 <EwGetNoOfAttrLinks+0x4>
 8010d56:	68c0      	ldr	r0, [r0, #12]
 8010d58:	4770      	bx	lr

08010d5a <EwGetAttrLinkName>:
 8010d5a:	b150      	cbz	r0, 8010d72 <EwGetAttrLinkName+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	db08      	blt.n	8010d72 <EwGetAttrLinkName+0x18>
 8010d60:	68c3      	ldr	r3, [r0, #12]
 8010d62:	428b      	cmp	r3, r1
 8010d64:	dd05      	ble.n	8010d72 <EwGetAttrLinkName+0x18>
 8010d66:	2218      	movs	r2, #24
 8010d68:	6943      	ldr	r3, [r0, #20]
 8010d6a:	4351      	muls	r1, r2
 8010d6c:	5858      	ldr	r0, [r3, r1]
 8010d6e:	f00b ba1c 	b.w	801c1aa <EwNewString>
 8010d72:	2000      	movs	r0, #0
 8010d74:	4770      	bx	lr

08010d76 <EwGetNoOfAttrLinkRegions>:
 8010d76:	b158      	cbz	r0, 8010d90 <EwGetNoOfAttrLinkRegions+0x1a>
 8010d78:	2900      	cmp	r1, #0
 8010d7a:	db08      	blt.n	8010d8e <EwGetNoOfAttrLinkRegions+0x18>
 8010d7c:	68c3      	ldr	r3, [r0, #12]
 8010d7e:	428b      	cmp	r3, r1
 8010d80:	dd05      	ble.n	8010d8e <EwGetNoOfAttrLinkRegions+0x18>
 8010d82:	6943      	ldr	r3, [r0, #20]
 8010d84:	2218      	movs	r2, #24
 8010d86:	fb02 3101 	mla	r1, r2, r1, r3
 8010d8a:	68c8      	ldr	r0, [r1, #12]
 8010d8c:	4770      	bx	lr
 8010d8e:	2000      	movs	r0, #0
 8010d90:	4770      	bx	lr

08010d92 <EwGetAttrLinkRect>:
 8010d92:	b570      	push	{r4, r5, r6, lr}
 8010d94:	4604      	mov	r4, r0
 8010d96:	461e      	mov	r6, r3
 8010d98:	4610      	mov	r0, r2
 8010d9a:	b931      	cbnz	r1, 8010daa <EwGetAttrLinkRect+0x18>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e9c4 3300 	strd	r3, r3, [r4]
 8010da2:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8010da6:	4620      	mov	r0, r4
 8010da8:	bd70      	pop	{r4, r5, r6, pc}
 8010daa:	2a00      	cmp	r2, #0
 8010dac:	dbf6      	blt.n	8010d9c <EwGetAttrLinkRect+0xa>
 8010dae:	68cb      	ldr	r3, [r1, #12]
 8010db0:	4293      	cmp	r3, r2
 8010db2:	ddf3      	ble.n	8010d9c <EwGetAttrLinkRect+0xa>
 8010db4:	2e00      	cmp	r6, #0
 8010db6:	dbf1      	blt.n	8010d9c <EwGetAttrLinkRect+0xa>
 8010db8:	694d      	ldr	r5, [r1, #20]
 8010dba:	2318      	movs	r3, #24
 8010dbc:	fb03 5502 	mla	r5, r3, r2, r5
 8010dc0:	68eb      	ldr	r3, [r5, #12]
 8010dc2:	42b3      	cmp	r3, r6
 8010dc4:	ddea      	ble.n	8010d9c <EwGetAttrLinkRect+0xa>
 8010dc6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8010dca:	4631      	mov	r1, r6
 8010dcc:	3001      	adds	r0, #1
 8010dce:	f7fd fbea 	bl	800e5a6 <EwCanDiscardSurface+0x2ca>
 8010dd2:	b190      	cbz	r0, 8010dfa <EwGetAttrLinkRect+0x68>
 8010dd4:	692b      	ldr	r3, [r5, #16]
 8010dd6:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8010dda:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010dde:	696d      	ldr	r5, [r5, #20]
 8010de0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010de4:	441e      	add	r6, r3
 8010de6:	441a      	add	r2, r3
 8010de8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010dec:	4429      	add	r1, r5
 8010dee:	1958      	adds	r0, r3, r5
 8010df0:	e9c4 6100 	strd	r6, r1, [r4]
 8010df4:	e9c4 2002 	strd	r2, r0, [r4, #8]
 8010df8:	e7d5      	b.n	8010da6 <EwGetAttrLinkRect+0x14>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	4601      	mov	r1, r0
 8010dfe:	4606      	mov	r6, r0
 8010e00:	e7f6      	b.n	8010df0 <EwGetAttrLinkRect+0x5e>

08010e02 <EwGetAttrLinkBaseline>:
 8010e02:	b538      	push	{r3, r4, r5, lr}
 8010e04:	460d      	mov	r5, r1
 8010e06:	4611      	mov	r1, r2
 8010e08:	b1b8      	cbz	r0, 8010e3a <EwGetAttrLinkBaseline+0x38>
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	db16      	blt.n	8010e3c <EwGetAttrLinkBaseline+0x3a>
 8010e0e:	68c3      	ldr	r3, [r0, #12]
 8010e10:	42ab      	cmp	r3, r5
 8010e12:	dd13      	ble.n	8010e3c <EwGetAttrLinkBaseline+0x3a>
 8010e14:	2a00      	cmp	r2, #0
 8010e16:	db11      	blt.n	8010e3c <EwGetAttrLinkBaseline+0x3a>
 8010e18:	6944      	ldr	r4, [r0, #20]
 8010e1a:	2318      	movs	r3, #24
 8010e1c:	fb03 4405 	mla	r4, r3, r5, r4
 8010e20:	68e3      	ldr	r3, [r4, #12]
 8010e22:	4293      	cmp	r3, r2
 8010e24:	dd0a      	ble.n	8010e3c <EwGetAttrLinkBaseline+0x3a>
 8010e26:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8010e2a:	1c68      	adds	r0, r5, #1
 8010e2c:	f7fd fbbb 	bl	800e5a6 <EwCanDiscardSurface+0x2ca>
 8010e30:	b118      	cbz	r0, 8010e3a <EwGetAttrLinkBaseline+0x38>
 8010e32:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8010e36:	6963      	ldr	r3, [r4, #20]
 8010e38:	4418      	add	r0, r3
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	e7fc      	b.n	8010e3a <EwGetAttrLinkBaseline+0x38>
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	4d0c      	ldr	r5, [pc, #48]	; (8010e74 <EwGetAttrLinkBaseline+0x72>)
 8010e44:	f240 126b 	movw	r2, #363	; 0x16b
 8010e48:	2100      	movs	r1, #0
 8010e4a:	188b      	adds	r3, r1, r2
 8010e4c:	105e      	asrs	r6, r3, #1
 8010e4e:	f023 0301 	bic.w	r3, r3, #1
 8010e52:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8010e56:	1b04      	subs	r4, r0, r4
 8010e58:	2c00      	cmp	r4, #0
 8010e5a:	d103      	bne.n	8010e64 <EwGetAttrLinkBaseline+0x62>
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	bfb4      	ite	lt
 8010e66:	f106 32ff 	addlt.w	r2, r6, #4294967295
 8010e6a:	1c71      	addge	r1, r6, #1
 8010e6c:	4291      	cmp	r1, r2
 8010e6e:	ddec      	ble.n	8010e4a <EwGetAttrLinkBaseline+0x48>
 8010e70:	2000      	movs	r0, #0
 8010e72:	e7f6      	b.n	8010e62 <EwGetAttrLinkBaseline+0x60>
 8010e74:	08034640 	.word	0x08034640
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	4e0d      	ldr	r6, [pc, #52]	; (8010eb0 <EwGetAttrLinkBaseline+0xae>)
 8010e7c:	224f      	movs	r2, #79	; 0x4f
 8010e7e:	2100      	movs	r1, #0
 8010e80:	188b      	adds	r3, r1, r2
 8010e82:	105b      	asrs	r3, r3, #1
 8010e84:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
 8010e88:	009c      	lsls	r4, r3, #2
 8010e8a:	f8b5 55b0 	ldrh.w	r5, [r5, #1456]	; 0x5b0
 8010e8e:	1b45      	subs	r5, r0, r5
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	d104      	bne.n	8010e9e <EwGetAttrLinkBaseline+0x9c>
 8010e94:	4807      	ldr	r0, [pc, #28]	; (8010eb4 <EwGetAttrLinkBaseline+0xb2>)
 8010e96:	1c63      	adds	r3, r4, #1
 8010e98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010e9c:	bd70      	pop	{r4, r5, r6, pc}
 8010e9e:	bfb4      	ite	lt
 8010ea0:	f103 32ff 	addlt.w	r2, r3, #4294967295
 8010ea4:	1c59      	addge	r1, r3, #1
 8010ea6:	4291      	cmp	r1, r2
 8010ea8:	ddea      	ble.n	8010e80 <EwGetAttrLinkBaseline+0x7e>
 8010eaa:	2000      	movs	r0, #0
 8010eac:	e7f6      	b.n	8010e9c <EwGetAttrLinkBaseline+0x9a>
 8010eae:	bf00      	nop
 8010eb0:	08034640 	.word	0x08034640
 8010eb4:	08034bf0 	.word	0x08034bf0
 8010eb8:	7843      	ldrb	r3, [r0, #1]
 8010eba:	4288      	cmp	r0, r1
 8010ebc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8010ec0:	d301      	bcc.n	8010ec6 <EwGetAttrLinkBaseline+0xc4>
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	4770      	bx	lr
 8010ec6:	7842      	ldrb	r2, [r0, #1]
 8010ec8:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8010ecc:	d102      	bne.n	8010ed4 <EwGetAttrLinkBaseline+0xd2>
 8010ece:	3002      	adds	r0, #2
 8010ed0:	4281      	cmp	r1, r0
 8010ed2:	d8f8      	bhi.n	8010ec6 <EwGetAttrLinkBaseline+0xc4>
 8010ed4:	3802      	subs	r0, #2
 8010ed6:	4770      	bx	lr
 8010ed8:	7803      	ldrb	r3, [r0, #0]
 8010eda:	f003 031f 	and.w	r3, r3, #31
 8010ede:	3b14      	subs	r3, #20
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	b510      	push	{r4, lr}
 8010ee4:	d802      	bhi.n	8010eec <EwGetAttrLinkBaseline+0xea>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	4281      	cmp	r1, r0
 8010eea:	d801      	bhi.n	8010ef0 <EwGetAttrLinkBaseline+0xee>
 8010eec:	2000      	movs	r0, #0
 8010eee:	bd10      	pop	{r4, pc}
 8010ef0:	7802      	ldrb	r2, [r0, #0]
 8010ef2:	f002 021f 	and.w	r2, r2, #31
 8010ef6:	f1a2 0414 	sub.w	r4, r2, #20
 8010efa:	2c02      	cmp	r4, #2
 8010efc:	d802      	bhi.n	8010f04 <EwGetAttrLinkBaseline+0x102>
 8010efe:	3301      	adds	r3, #1
 8010f00:	3002      	adds	r0, #2
 8010f02:	e7f1      	b.n	8010ee8 <EwGetAttrLinkBaseline+0xe6>
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d0fb      	beq.n	8010f00 <EwGetAttrLinkBaseline+0xfe>
 8010f08:	2a17      	cmp	r2, #23
 8010f0a:	d1f9      	bne.n	8010f00 <EwGetAttrLinkBaseline+0xfe>
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d0ee      	beq.n	8010eee <EwGetAttrLinkBaseline+0xec>
 8010f10:	3b01      	subs	r3, #1
 8010f12:	e7f5      	b.n	8010f00 <EwGetAttrLinkBaseline+0xfe>
 8010f14:	b508      	push	{r3, lr}
 8010f16:	4288      	cmp	r0, r1
 8010f18:	d301      	bcc.n	8010f1e <EwGetAttrLinkBaseline+0x11c>
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	bd08      	pop	{r3, pc}
 8010f1e:	7803      	ldrb	r3, [r0, #0]
 8010f20:	f003 031f 	and.w	r3, r3, #31
 8010f24:	1e5a      	subs	r2, r3, #1
 8010f26:	2a02      	cmp	r2, #2
 8010f28:	d9f8      	bls.n	8010f1c <EwGetAttrLinkBaseline+0x11a>
 8010f2a:	3b14      	subs	r3, #20
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d804      	bhi.n	8010f3a <EwGetAttrLinkBaseline+0x138>
 8010f30:	f7ff ffd2 	bl	8010ed8 <EwGetAttrLinkBaseline+0xd6>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	bf08      	it	eq
 8010f38:	4608      	moveq	r0, r1
 8010f3a:	3002      	adds	r0, #2
 8010f3c:	e7eb      	b.n	8010f16 <EwGetAttrLinkBaseline+0x114>

08010f3e <EwInitBidi>:
 8010f3e:	2001      	movs	r0, #1
 8010f40:	4770      	bx	lr

08010f42 <EwCreateBidi>:
 8010f42:	b570      	push	{r4, r5, r6, lr}
 8010f44:	1e06      	subs	r6, r0, #0
 8010f46:	dd11      	ble.n	8010f6c <EwCreateBidi+0x2a>
 8010f48:	f106 0309 	add.w	r3, r6, #9
 8010f4c:	005d      	lsls	r5, r3, #1
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f018 fc0e 	bl	8029770 <EwAlloc>
 8010f54:	b960      	cbnz	r0, 8010f70 <EwCreateBidi+0x2e>
 8010f56:	2011      	movs	r0, #17
 8010f58:	f008 fe56 	bl	8019c08 <EwImmediateReclaimMemory>
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d1f5      	bne.n	8010f4e <EwCreateBidi+0xc>
 8010f62:	2011      	movs	r0, #17
 8010f64:	f007 fea0 	bl	8018ca8 <EwError>
 8010f68:	4620      	mov	r0, r4
 8010f6a:	e01c      	b.n	8010fa6 <EwCreateBidi+0x64>
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	e01a      	b.n	8010fa6 <EwCreateBidi+0x64>
 8010f70:	4a0d      	ldr	r2, [pc, #52]	; (8010fa8 <EwCreateBidi+0x66>)
 8010f72:	6006      	str	r6, [r0, #0]
 8010f74:	f100 0310 	add.w	r3, r0, #16
 8010f78:	6083      	str	r3, [r0, #8]
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	6043      	str	r3, [r0, #4]
 8010f7e:	8183      	strh	r3, [r0, #12]
 8010f80:	6813      	ldr	r3, [r2, #0]
 8010f82:	442b      	add	r3, r5
 8010f84:	6013      	str	r3, [r2, #0]
 8010f86:	4a09      	ldr	r2, [pc, #36]	; (8010fac <EwCreateBidi+0x6a>)
 8010f88:	6811      	ldr	r1, [r2, #0]
 8010f8a:	428b      	cmp	r3, r1
 8010f8c:	dd00      	ble.n	8010f90 <EwCreateBidi+0x4e>
 8010f8e:	6013      	str	r3, [r2, #0]
 8010f90:	4a07      	ldr	r2, [pc, #28]	; (8010fb0 <EwCreateBidi+0x6e>)
 8010f92:	4908      	ldr	r1, [pc, #32]	; (8010fb4 <EwCreateBidi+0x72>)
 8010f94:	6812      	ldr	r2, [r2, #0]
 8010f96:	6809      	ldr	r1, [r1, #0]
 8010f98:	440a      	add	r2, r1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4a06      	ldr	r2, [pc, #24]	; (8010fb8 <EwCreateBidi+0x76>)
 8010f9e:	6811      	ldr	r1, [r2, #0]
 8010fa0:	428b      	cmp	r3, r1
 8010fa2:	dd00      	ble.n	8010fa6 <EwCreateBidi+0x64>
 8010fa4:	6013      	str	r3, [r2, #0]
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	200002e8 	.word	0x200002e8
 8010fac:	20000304 	.word	0x20000304
 8010fb0:	200002d8 	.word	0x200002d8
 8010fb4:	200002e4 	.word	0x200002e4
 8010fb8:	200002ec 	.word	0x200002ec

08010fbc <EwFreeBidi>:
 8010fbc:	b148      	cbz	r0, 8010fd2 <EwFreeBidi+0x16>
 8010fbe:	4905      	ldr	r1, [pc, #20]	; (8010fd4 <EwFreeBidi+0x18>)
 8010fc0:	6802      	ldr	r2, [r0, #0]
 8010fc2:	680b      	ldr	r3, [r1, #0]
 8010fc4:	3201      	adds	r2, #1
 8010fc6:	3b10      	subs	r3, #16
 8010fc8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010fcc:	600b      	str	r3, [r1, #0]
 8010fce:	f018 bbd1 	b.w	8029774 <EwFree>
 8010fd2:	4770      	bx	lr
 8010fd4:	200002e8 	.word	0x200002e8

08010fd8 <EwBidiIsNeeded>:
 8010fd8:	b118      	cbz	r0, 8010fe2 <EwBidiIsNeeded+0xa>
 8010fda:	7b40      	ldrb	r0, [r0, #13]
 8010fdc:	3800      	subs	r0, #0
 8010fde:	bf18      	it	ne
 8010fe0:	2001      	movne	r0, #1
 8010fe2:	4770      	bx	lr

08010fe4 <EwBidiIsRTL>:
 8010fe4:	b118      	cbz	r0, 8010fee <EwBidiIsRTL+0xa>
 8010fe6:	7b00      	ldrb	r0, [r0, #12]
 8010fe8:	1e43      	subs	r3, r0, #1
 8010fea:	4258      	negs	r0, r3
 8010fec:	4158      	adcs	r0, r3
 8010fee:	4770      	bx	lr

08010ff0 <EwBidiGetCharLevel>:
 8010ff0:	b158      	cbz	r0, 801100a <EwBidiGetCharLevel+0x1a>
 8010ff2:	2900      	cmp	r1, #0
 8010ff4:	db02      	blt.n	8010ffc <EwBidiGetCharLevel+0xc>
 8010ff6:	6843      	ldr	r3, [r0, #4]
 8010ff8:	428b      	cmp	r3, r1
 8010ffa:	dc01      	bgt.n	8011000 <EwBidiGetCharLevel+0x10>
 8010ffc:	7b00      	ldrb	r0, [r0, #12]
 8010ffe:	4770      	bx	lr
 8011000:	6883      	ldr	r3, [r0, #8]
 8011002:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8011006:	7848      	ldrb	r0, [r1, #1]
 8011008:	0840      	lsrs	r0, r0, #1
 801100a:	4770      	bx	lr

0801100c <EwBidiInit>:
 801100c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011010:	4688      	mov	r8, r1
 8011012:	4699      	mov	r9, r3
 8011014:	4604      	mov	r4, r0
 8011016:	2800      	cmp	r0, #0
 8011018:	f000 80b2 	beq.w	8011180 <EwBidiInit+0x174>
 801101c:	2a00      	cmp	r2, #0
 801101e:	6886      	ldr	r6, [r0, #8]
 8011020:	6805      	ldr	r5, [r0, #0]
 8011022:	da03      	bge.n	801102c <EwBidiInit+0x20>
 8011024:	4640      	mov	r0, r8
 8011026:	f00b fba3 	bl	801c770 <EwGetStringLength>
 801102a:	4602      	mov	r2, r0
 801102c:	b916      	cbnz	r6, 8011034 <EwBidiInit+0x28>
 801102e:	2000      	movs	r0, #0
 8011030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	4295      	cmp	r5, r2
 8011036:	dbfa      	blt.n	801102e <EwBidiInit+0x22>
 8011038:	f1b9 0f00 	cmp.w	r9, #0
 801103c:	bfd4      	ite	le
 801103e:	2000      	movle	r0, #0
 8011040:	2001      	movgt	r0, #1
 8011042:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8011190 <EwBidiInit+0x184>
 8011046:	4605      	mov	r5, r0
 8011048:	2700      	movs	r7, #0
 801104a:	4297      	cmp	r7, r2
 801104c:	db1c      	blt.n	8011088 <EwBidiInit+0x7c>
 801104e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011052:	f04f 0100 	mov.w	r1, #0
 8011056:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
 801105a:	6062      	str	r2, [r4, #4]
 801105c:	7365      	strb	r5, [r4, #13]
 801105e:	7320      	strb	r0, [r4, #12]
 8011060:	2d00      	cmp	r5, #0
 8011062:	d0e4      	beq.n	801102e <EwBidiInit+0x22>
 8011064:	f1b9 0f00 	cmp.w	r9, #0
 8011068:	da0c      	bge.n	8011084 <EwBidiInit+0x78>
 801106a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 801106e:	4630      	mov	r0, r6
 8011070:	f7ff ff50 	bl	8010f14 <EwGetAttrLinkBaseline+0x112>
 8011074:	b130      	cbz	r0, 8011084 <EwBidiInit+0x78>
 8011076:	7803      	ldrb	r3, [r0, #0]
 8011078:	f003 031f 	and.w	r3, r3, #31
 801107c:	3b01      	subs	r3, #1
 801107e:	bf18      	it	ne
 8011080:	2301      	movne	r3, #1
 8011082:	7323      	strb	r3, [r4, #12]
 8011084:	2001      	movs	r0, #1
 8011086:	e7d3      	b.n	8011030 <EwBidiInit+0x24>
 8011088:	f838 b017 	ldrh.w	fp, [r8, r7, lsl #1]
 801108c:	f240 414b 	movw	r1, #1099	; 0x44b
 8011090:	2300      	movs	r3, #0
 8011092:	eb03 0c01 	add.w	ip, r3, r1
 8011096:	ea4f 0e6c 	mov.w	lr, ip, asr #1
 801109a:	f02c 0c01 	bic.w	ip, ip, #1
 801109e:	44d4      	add	ip, sl
 80110a0:	f8bc c830 	ldrh.w	ip, [ip, #2096]	; 0x830
 80110a4:	45e3      	cmp	fp, ip
 80110a6:	d00d      	beq.n	80110c4 <EwBidiInit+0xb8>
 80110a8:	d204      	bcs.n	80110b4 <EwBidiInit+0xa8>
 80110aa:	f10e 31ff 	add.w	r1, lr, #4294967295
 80110ae:	4299      	cmp	r1, r3
 80110b0:	daef      	bge.n	8011092 <EwBidiInit+0x86>
 80110b2:	e007      	b.n	80110c4 <EwBidiInit+0xb8>
 80110b4:	f10e 0301 	add.w	r3, lr, #1
 80110b8:	eb0a 0c43 	add.w	ip, sl, r3, lsl #1
 80110bc:	f8bc c830 	ldrh.w	ip, [ip, #2096]	; 0x830
 80110c0:	45dc      	cmp	ip, fp
 80110c2:	d9f4      	bls.n	80110ae <EwBidiInit+0xa2>
 80110c4:	4b31      	ldr	r3, [pc, #196]	; (801118c <EwBidiInit+0x180>)
 80110c6:	449e      	add	lr, r3
 80110c8:	f81e 1c30 	ldrb.w	r1, [lr, #-48]
 80110cc:	f001 031f 	and.w	r3, r1, #31
 80110d0:	2b18      	cmp	r3, #24
 80110d2:	d03c      	beq.n	801114e <EwBidiInit+0x142>
 80110d4:	2b19      	cmp	r3, #25
 80110d6:	d03c      	beq.n	8011152 <EwBidiInit+0x146>
 80110d8:	2b1a      	cmp	r3, #26
 80110da:	d03c      	beq.n	8011156 <EwBidiInit+0x14a>
 80110dc:	2b1b      	cmp	r3, #27
 80110de:	d03c      	beq.n	801115a <EwBidiInit+0x14e>
 80110e0:	f001 0c60 	and.w	ip, r1, #96	; 0x60
 80110e4:	f1bc 0f20 	cmp.w	ip, #32
 80110e8:	d039      	beq.n	801115e <EwBidiInit+0x152>
 80110ea:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 80110ee:	d038      	beq.n	8011162 <EwBidiInit+0x156>
 80110f0:	f1bc 0f60 	cmp.w	ip, #96	; 0x60
 80110f4:	d037      	beq.n	8011166 <EwBidiInit+0x15a>
 80110f6:	2b09      	cmp	r3, #9
 80110f8:	d037      	beq.n	801116a <EwBidiInit+0x15e>
 80110fa:	2b0d      	cmp	r3, #13
 80110fc:	d037      	beq.n	801116e <EwBidiInit+0x162>
 80110fe:	f1a3 0c0b 	sub.w	ip, r3, #11
 8011102:	f1bc 0f01 	cmp.w	ip, #1
 8011106:	d934      	bls.n	8011172 <EwBidiInit+0x166>
 8011108:	f1a3 0c14 	sub.w	ip, r3, #20
 801110c:	f1bc 0f03 	cmp.w	ip, #3
 8011110:	d931      	bls.n	8011176 <EwBidiInit+0x16a>
 8011112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011116:	bf0c      	ite	eq
 8011118:	2100      	moveq	r1, #0
 801111a:	210c      	movne	r1, #12
 801111c:	f1a3 0c18 	sub.w	ip, r3, #24
 8011120:	f1bc 0f03 	cmp.w	ip, #3
 8011124:	d929      	bls.n	801117a <EwBidiInit+0x16e>
 8011126:	b965      	cbnz	r5, 8011142 <EwBidiInit+0x136>
 8011128:	1e9d      	subs	r5, r3, #2
 801112a:	2d01      	cmp	r5, #1
 801112c:	d926      	bls.n	801117c <EwBidiInit+0x170>
 801112e:	2b11      	cmp	r3, #17
 8011130:	d024      	beq.n	801117c <EwBidiInit+0x170>
 8011132:	2b12      	cmp	r3, #18
 8011134:	d022      	beq.n	801117c <EwBidiInit+0x170>
 8011136:	f1a3 0c15 	sub.w	ip, r3, #21
 801113a:	f1dc 0500 	rsbs	r5, ip, #0
 801113e:	eb45 050c 	adc.w	r5, r5, ip
 8011142:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8011146:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
 801114a:	3701      	adds	r7, #1
 801114c:	e77d      	b.n	801104a <EwBidiInit+0x3e>
 801114e:	2108      	movs	r1, #8
 8011150:	e7e4      	b.n	801111c <EwBidiInit+0x110>
 8011152:	2109      	movs	r1, #9
 8011154:	e7e2      	b.n	801111c <EwBidiInit+0x110>
 8011156:	210a      	movs	r1, #10
 8011158:	e7e0      	b.n	801111c <EwBidiInit+0x110>
 801115a:	210b      	movs	r1, #11
 801115c:	e7de      	b.n	801111c <EwBidiInit+0x110>
 801115e:	2101      	movs	r1, #1
 8011160:	e7dc      	b.n	801111c <EwBidiInit+0x110>
 8011162:	2102      	movs	r1, #2
 8011164:	e7da      	b.n	801111c <EwBidiInit+0x110>
 8011166:	2103      	movs	r1, #3
 8011168:	e7d8      	b.n	801111c <EwBidiInit+0x110>
 801116a:	2104      	movs	r1, #4
 801116c:	e7d6      	b.n	801111c <EwBidiInit+0x110>
 801116e:	2105      	movs	r1, #5
 8011170:	e7d4      	b.n	801111c <EwBidiInit+0x110>
 8011172:	2106      	movs	r1, #6
 8011174:	e7d2      	b.n	801111c <EwBidiInit+0x110>
 8011176:	2107      	movs	r1, #7
 8011178:	e7d0      	b.n	801111c <EwBidiInit+0x110>
 801117a:	2303      	movs	r3, #3
 801117c:	2501      	movs	r5, #1
 801117e:	e7e0      	b.n	8011142 <EwBidiInit+0x136>
 8011180:	2a00      	cmp	r2, #0
 8011182:	f6bf af54 	bge.w	801102e <EwBidiInit+0x22>
 8011186:	4626      	mov	r6, r4
 8011188:	4625      	mov	r5, r4
 801118a:	e74b      	b.n	8011024 <EwBidiInit+0x18>
 801118c:	08035738 	.word	0x08035738
 8011190:	08034640 	.word	0x08034640

08011194 <EwBidiProcess>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 801119c:	9108      	str	r1, [sp, #32]
 801119e:	2800      	cmp	r0, #0
 80111a0:	f000 84c8 	beq.w	8011b34 <EwBidiProcess+0x9a0>
 80111a4:	7b03      	ldrb	r3, [r0, #12]
 80111a6:	9305      	str	r3, [sp, #20]
 80111a8:	6883      	ldr	r3, [r0, #8]
 80111aa:	6844      	ldr	r4, [r0, #4]
 80111ac:	9301      	str	r3, [sp, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f000 84c0 	beq.w	8011b34 <EwBidiProcess+0x9a0>
 80111b4:	1ca3      	adds	r3, r4, #2
 80111b6:	9309      	str	r3, [sp, #36]	; 0x24
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	9804      	ldr	r0, [sp, #16]
 80111be:	f018 fad7 	bl	8029770 <EwAlloc>
 80111c2:	9002      	str	r0, [sp, #8]
 80111c4:	2800      	cmp	r0, #0
 80111c6:	f040 8459 	bne.w	8011a7c <EwBidiProcess+0x8e8>
 80111ca:	2012      	movs	r0, #18
 80111cc:	f008 fd1c 	bl	8019c08 <EwImmediateReclaimMemory>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	d1f3      	bne.n	80111bc <EwBidiProcess+0x28>
 80111d4:	2012      	movs	r0, #18
 80111d6:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 80111da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111de:	f007 bd63 	b.w	8018ca8 <EwError>
 80111e2:	46b3      	mov	fp, r6
 80111e4:	f81b 3b02 	ldrb.w	r3, [fp], #2
 80111e8:	f003 031f 	and.w	r3, r3, #31
 80111ec:	2b16      	cmp	r3, #22
 80111ee:	d144      	bne.n	801127a <EwBidiProcess+0xe6>
 80111f0:	4649      	mov	r1, r9
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7ff fe70 	bl	8010ed8 <EwGetAttrLinkBaseline+0xd6>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	bf14      	ite	ne
 80111fc:	4601      	movne	r1, r0
 80111fe:	4649      	moveq	r1, r9
 8011200:	4658      	mov	r0, fp
 8011202:	f7ff fe87 	bl	8010f14 <EwGetAttrLinkBaseline+0x112>
 8011206:	2800      	cmp	r0, #0
 8011208:	d068      	beq.n	80112dc <EwBidiProcess+0x148>
 801120a:	7803      	ldrb	r3, [r0, #0]
 801120c:	f003 031e 	and.w	r3, r3, #30
 8011210:	2b02      	cmp	r3, #2
 8011212:	bf14      	ite	ne
 8011214:	2314      	movne	r3, #20
 8011216:	2315      	moveq	r3, #21
 8011218:	f1a3 0214 	sub.w	r2, r3, #20
 801121c:	2a01      	cmp	r2, #1
 801121e:	d861      	bhi.n	80112e4 <EwBidiProcess+0x150>
 8011220:	f815 2014 	ldrb.w	r2, [r5, r4, lsl #1]
 8011224:	7871      	ldrb	r1, [r6, #1]
 8011226:	f362 0147 	bfi	r1, r2, #1, #7
 801122a:	7071      	strb	r1, [r6, #1]
 801122c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 8011230:	7849      	ldrb	r1, [r1, #1]
 8011232:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8011236:	bf1e      	ittt	ne
 8011238:	7830      	ldrbne	r0, [r6, #0]
 801123a:	f361 0004 	bfine	r0, r1, #0, #5
 801123e:	7030      	strbne	r0, [r6, #0]
 8011240:	f002 0101 	and.w	r1, r2, #1
 8011244:	2b15      	cmp	r3, #21
 8011246:	bf0c      	ite	eq
 8011248:	1c4b      	addeq	r3, r1, #1
 801124a:	f1c1 0302 	rsbne	r3, r1, #2
 801124e:	4413      	add	r3, r2
 8011250:	2b7d      	cmp	r3, #125	; 0x7d
 8011252:	dc45      	bgt.n	80112e0 <EwBidiProcess+0x14c>
 8011254:	ea57 0208 	orrs.w	r2, r7, r8
 8011258:	d142      	bne.n	80112e0 <EwBidiProcess+0x14c>
 801125a:	3401      	adds	r4, #1
 801125c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 8011260:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
 8011264:	784b      	ldrb	r3, [r1, #1]
 8011266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801126a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801126e:	f10a 0a01 	add.w	sl, sl, #1
 8011272:	704b      	strb	r3, [r1, #1]
 8011274:	4690      	mov	r8, r2
 8011276:	4617      	mov	r7, r2
 8011278:	e028      	b.n	80112cc <EwBidiProcess+0x138>
 801127a:	2b11      	cmp	r3, #17
 801127c:	d005      	beq.n	801128a <EwBidiProcess+0xf6>
 801127e:	2b0f      	cmp	r3, #15
 8011280:	d003      	beq.n	801128a <EwBidiProcess+0xf6>
 8011282:	2b12      	cmp	r3, #18
 8011284:	d001      	beq.n	801128a <EwBidiProcess+0xf6>
 8011286:	2b10      	cmp	r3, #16
 8011288:	d1c6      	bne.n	8011218 <EwBidiProcess+0x84>
 801128a:	f815 2014 	ldrb.w	r2, [r5, r4, lsl #1]
 801128e:	f1a3 0011 	sub.w	r0, r3, #17
 8011292:	2801      	cmp	r0, #1
 8011294:	f002 0101 	and.w	r1, r2, #1
 8011298:	d81a      	bhi.n	80112d0 <EwBidiProcess+0x13c>
 801129a:	3101      	adds	r1, #1
 801129c:	2b12      	cmp	r3, #18
 801129e:	440a      	add	r2, r1
 80112a0:	d01a      	beq.n	80112d8 <EwBidiProcess+0x144>
 80112a2:	f1a3 0010 	sub.w	r0, r3, #16
 80112a6:	4241      	negs	r1, r0
 80112a8:	4141      	adcs	r1, r0
 80112aa:	2a7d      	cmp	r2, #125	; 0x7d
 80112ac:	f300 83dc 	bgt.w	8011a68 <EwBidiProcess+0x8d4>
 80112b0:	b967      	cbnz	r7, 80112cc <EwBidiProcess+0x138>
 80112b2:	f1b8 0f00 	cmp.w	r8, #0
 80112b6:	d109      	bne.n	80112cc <EwBidiProcess+0x138>
 80112b8:	3401      	adds	r4, #1
 80112ba:	f805 2014 	strb.w	r2, [r5, r4, lsl #1]
 80112be:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 80112c2:	7853      	ldrb	r3, [r2, #1]
 80112c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112c8:	430b      	orrs	r3, r1
 80112ca:	7053      	strb	r3, [r2, #1]
 80112cc:	465e      	mov	r6, fp
 80112ce:	e3fa      	b.n	8011ac6 <EwBidiProcess+0x932>
 80112d0:	f1c1 0102 	rsb	r1, r1, #2
 80112d4:	440a      	add	r2, r1
 80112d6:	e7e4      	b.n	80112a2 <EwBidiProcess+0x10e>
 80112d8:	2102      	movs	r1, #2
 80112da:	e7e6      	b.n	80112aa <EwBidiProcess+0x116>
 80112dc:	2314      	movs	r3, #20
 80112de:	e79b      	b.n	8011218 <EwBidiProcess+0x84>
 80112e0:	3701      	adds	r7, #1
 80112e2:	e7f3      	b.n	80112cc <EwBidiProcess+0x138>
 80112e4:	2b17      	cmp	r3, #23
 80112e6:	d120      	bne.n	801132a <EwBidiProcess+0x196>
 80112e8:	b18f      	cbz	r7, 801130e <EwBidiProcess+0x17a>
 80112ea:	3f01      	subs	r7, #1
 80112ec:	f815 2014 	ldrb.w	r2, [r5, r4, lsl #1]
 80112f0:	7873      	ldrb	r3, [r6, #1]
 80112f2:	f362 0347 	bfi	r3, r2, #1, #7
 80112f6:	7073      	strb	r3, [r6, #1]
 80112f8:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80112fc:	785b      	ldrb	r3, [r3, #1]
 80112fe:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
 8011302:	bf1e      	ittt	ne
 8011304:	7832      	ldrbne	r2, [r6, #0]
 8011306:	f363 0204 	bfine	r2, r3, #0, #5
 801130a:	7032      	strbne	r2, [r6, #0]
 801130c:	e7de      	b.n	80112cc <EwBidiProcess+0x138>
 801130e:	f1ba 0f00 	cmp.w	sl, #0
 8011312:	d0eb      	beq.n	80112ec <EwBidiProcess+0x158>
 8011314:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8011318:	3c01      	subs	r4, #1
 801131a:	785b      	ldrb	r3, [r3, #1]
 801131c:	065b      	lsls	r3, r3, #25
 801131e:	d5f9      	bpl.n	8011314 <EwBidiProcess+0x180>
 8011320:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011324:	f04f 0800 	mov.w	r8, #0
 8011328:	e7e0      	b.n	80112ec <EwBidiProcess+0x158>
 801132a:	2b13      	cmp	r3, #19
 801132c:	d110      	bne.n	8011350 <EwBidiProcess+0x1bc>
 801132e:	2f00      	cmp	r7, #0
 8011330:	d1cc      	bne.n	80112cc <EwBidiProcess+0x138>
 8011332:	f1b8 0f00 	cmp.w	r8, #0
 8011336:	d002      	beq.n	801133e <EwBidiProcess+0x1aa>
 8011338:	f108 38ff 	add.w	r8, r8, #4294967295
 801133c:	e7c6      	b.n	80112cc <EwBidiProcess+0x138>
 801133e:	2c00      	cmp	r4, #0
 8011340:	d0c4      	beq.n	80112cc <EwBidiProcess+0x138>
 8011342:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	065e      	lsls	r6, r3, #25
 801134a:	d4bf      	bmi.n	80112cc <EwBidiProcess+0x138>
 801134c:	3c01      	subs	r4, #1
 801134e:	e7bd      	b.n	80112cc <EwBidiProcess+0x138>
 8011350:	3b0a      	subs	r3, #10
 8011352:	2b01      	cmp	r3, #1
 8011354:	d8ca      	bhi.n	80112ec <EwBidiProcess+0x158>
 8011356:	e7b9      	b.n	80112cc <EwBidiProcess+0x138>
 8011358:	781a      	ldrb	r2, [r3, #0]
 801135a:	f002 021f 	and.w	r2, r2, #31
 801135e:	f102 0111 	add.w	r1, r2, #17
 8011362:	f001 011f 	and.w	r1, r1, #31
 8011366:	2904      	cmp	r1, #4
 8011368:	d901      	bls.n	801136e <EwBidiProcess+0x1da>
 801136a:	2a0a      	cmp	r2, #10
 801136c:	d10b      	bne.n	8011386 <EwBidiProcess+0x1f2>
 801136e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011370:	9902      	ldr	r1, [sp, #8]
 8011372:	f10a 0a01 	add.w	sl, sl, #1
 8011376:	eba2 020a 	sub.w	r2, r2, sl
 801137a:	3802      	subs	r0, #2
 801137c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011380:	3302      	adds	r3, #2
 8011382:	3002      	adds	r0, #2
 8011384:	e3a6      	b.n	8011ad4 <EwBidiProcess+0x940>
 8011386:	4283      	cmp	r3, r0
 8011388:	bf84      	itt	hi
 801138a:	881a      	ldrhhi	r2, [r3, #0]
 801138c:	8002      	strhhi	r2, [r0, #0]
 801138e:	e7f7      	b.n	8011380 <EwBidiProcess+0x1ec>
 8011390:	2300      	movs	r3, #0
 8011392:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011396:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801139a:	782a      	ldrb	r2, [r5, #0]
 801139c:	f002 011f 	and.w	r1, r2, #31
 80113a0:	2917      	cmp	r1, #23
 80113a2:	d105      	bne.n	80113b0 <EwBidiProcess+0x21c>
 80113a4:	d104      	bne.n	80113b0 <EwBidiProcess+0x21c>
 80113a6:	4629      	mov	r1, r5
 80113a8:	9a01      	ldr	r2, [sp, #4]
 80113aa:	428a      	cmp	r2, r1
 80113ac:	f240 8090 	bls.w	80114d0 <EwBidiProcess+0x33c>
 80113b0:	9a01      	ldr	r2, [sp, #4]
 80113b2:	786b      	ldrb	r3, [r5, #1]
 80113b4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 80113b8:	9e02      	ldr	r6, [sp, #8]
 80113ba:	4295      	cmp	r5, r2
 80113bc:	bf88      	it	hi
 80113be:	f815 1c01 	ldrbhi.w	r1, [r5, #-1]
 80113c2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80113c6:	bf8c      	ite	hi
 80113c8:	0849      	lsrhi	r1, r1, #1
 80113ca:	4639      	movls	r1, r7
 80113cc:	428b      	cmp	r3, r1
 80113ce:	bf38      	it	cc
 80113d0:	460b      	movcc	r3, r1
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80113da:	3301      	adds	r3, #1
 80113dc:	f363 0104 	bfi	r1, r3, #0, #5
 80113e0:	aa0d      	add	r2, sp, #52	; 0x34
 80113e2:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
 80113e6:	4628      	mov	r0, r5
 80113e8:	f846 2b04 	str.w	r2, [r6], #4
 80113ec:	4659      	mov	r1, fp
 80113ee:	f7ff fd63 	bl	8010eb8 <EwGetAttrLinkBaseline+0xb6>
 80113f2:	9c02      	ldr	r4, [sp, #8]
 80113f4:	4680      	mov	r8, r0
 80113f6:	4622      	mov	r2, r4
 80113f8:	462b      	mov	r3, r5
 80113fa:	4543      	cmp	r3, r8
 80113fc:	d97d      	bls.n	80114fa <EwBidiProcess+0x366>
 80113fe:	1e68      	subs	r0, r5, #1
 8011400:	f1c5 0302 	rsb	r3, r5, #2
 8011404:	f108 0101 	add.w	r1, r8, #1
 8011408:	4443      	add	r3, r8
 801140a:	4281      	cmp	r1, r0
 801140c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8011410:	f023 0301 	bic.w	r3, r3, #1
 8011414:	bf38      	it	cc
 8011416:	2300      	movcc	r3, #0
 8011418:	441d      	add	r5, r3
 801141a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 801141e:	bf38      	it	cc
 8011420:	2300      	movcc	r3, #0
 8011422:	18f3      	adds	r3, r6, r3
 8011424:	4659      	mov	r1, fp
 8011426:	4640      	mov	r0, r8
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	f7ff fd55 	bl	8010ed8 <EwGetAttrLinkBaseline+0xd6>
 801142e:	4681      	mov	r9, r0
 8011430:	2800      	cmp	r0, #0
 8011432:	d166      	bne.n	8011502 <EwBidiProcess+0x36e>
 8011434:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011438:	f1ab 0302 	sub.w	r3, fp, #2
 801143c:	4598      	cmp	r8, r3
 801143e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011442:	d209      	bcs.n	8011458 <EwBidiProcess+0x2c4>
 8011444:	f898 3000 	ldrb.w	r3, [r8]
 8011448:	f003 031f 	and.w	r3, r3, #31
 801144c:	3b14      	subs	r3, #20
 801144e:	2b02      	cmp	r3, #2
 8011450:	bf84      	itt	hi
 8011452:	f898 7003 	ldrbhi.w	r7, [r8, #3]
 8011456:	087f      	lsrhi	r7, r7, #1
 8011458:	4297      	cmp	r7, r2
 801145a:	bf38      	it	cc
 801145c:	4617      	movcc	r7, r2
 801145e:	f007 0701 	and.w	r7, r7, #1
 8011462:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8011466:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801146a:	3701      	adds	r7, #1
 801146c:	ab0e      	add	r3, sp, #56	; 0x38
 801146e:	f367 0204 	bfi	r2, r7, #0, #5
 8011472:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8011476:	f849 3b04 	str.w	r3, [r9], #4
 801147a:	46b4      	mov	ip, r6
 801147c:	4631      	mov	r1, r6
 801147e:	4589      	cmp	r9, r1
 8011480:	d85b      	bhi.n	801153a <EwBidiProcess+0x3a6>
 8011482:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8011486:	4633      	mov	r3, r6
 8011488:	f007 071f 	and.w	r7, r7, #31
 801148c:	454b      	cmp	r3, r9
 801148e:	d369      	bcc.n	8011564 <EwBidiProcess+0x3d0>
 8011490:	2704      	movs	r7, #4
 8011492:	3404      	adds	r4, #4
 8011494:	45a1      	cmp	r9, r4
 8011496:	f200 80b5 	bhi.w	8011604 <EwBidiProcess+0x470>
 801149a:	4632      	mov	r2, r6
 801149c:	200e      	movs	r0, #14
 801149e:	4591      	cmp	r9, r2
 80114a0:	f200 80d5 	bhi.w	801164e <EwBidiProcess+0x4ba>
 80114a4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80114a8:	f003 031f 	and.w	r3, r3, #31
 80114ac:	45e1      	cmp	r9, ip
 80114ae:	f200 80de 	bhi.w	801166e <EwBidiProcess+0x4da>
 80114b2:	f04f 0800 	mov.w	r8, #0
 80114b6:	f8cd a018 	str.w	sl, [sp, #24]
 80114ba:	4637      	mov	r7, r6
 80114bc:	f8cd 801c 	str.w	r8, [sp, #28]
 80114c0:	f04f 34ff 	mov.w	r4, #4294967295
 80114c4:	9b03      	ldr	r3, [sp, #12]
 80114c6:	42bb      	cmp	r3, r7
 80114c8:	f240 8188 	bls.w	80117dc <EwBidiProcess+0x648>
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	e0e9      	b.n	80116a4 <EwBidiProcess+0x510>
 80114d0:	780a      	ldrb	r2, [r1, #0]
 80114d2:	f002 021f 	and.w	r2, r2, #31
 80114d6:	2a17      	cmp	r2, #23
 80114d8:	d102      	bne.n	80114e0 <EwBidiProcess+0x34c>
 80114da:	3b01      	subs	r3, #1
 80114dc:	3902      	subs	r1, #2
 80114de:	e763      	b.n	80113a8 <EwBidiProcess+0x214>
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d0fb      	beq.n	80114dc <EwBidiProcess+0x348>
 80114e4:	3a14      	subs	r2, #20
 80114e6:	2a02      	cmp	r2, #2
 80114e8:	d8f8      	bhi.n	80114dc <EwBidiProcess+0x348>
 80114ea:	3301      	adds	r3, #1
 80114ec:	d1f6      	bne.n	80114dc <EwBidiProcess+0x348>
 80114ee:	4628      	mov	r0, r5
 80114f0:	4659      	mov	r1, fp
 80114f2:	f7ff fce1 	bl	8010eb8 <EwGetAttrLinkBaseline+0xb6>
 80114f6:	1c85      	adds	r5, r0, #2
 80114f8:	e2fa      	b.n	8011af0 <EwBidiProcess+0x95c>
 80114fa:	f842 3f04 	str.w	r3, [r2, #4]!
 80114fe:	3302      	adds	r3, #2
 8011500:	e77b      	b.n	80113fa <EwBidiProcess+0x266>
 8011502:	f7ff fcd9 	bl	8010eb8 <EwGetAttrLinkBaseline+0xb6>
 8011506:	9b03      	ldr	r3, [sp, #12]
 8011508:	4680      	mov	r8, r0
 801150a:	1f1a      	subs	r2, r3, #4
 801150c:	464b      	mov	r3, r9
 801150e:	4543      	cmp	r3, r8
 8011510:	d90f      	bls.n	8011532 <EwBidiProcess+0x39e>
 8011512:	f1c9 0302 	rsb	r3, r9, #2
 8011516:	4443      	add	r3, r8
 8011518:	085b      	lsrs	r3, r3, #1
 801151a:	f108 0201 	add.w	r2, r8, #1
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	f109 39ff 	add.w	r9, r9, #4294967295
 8011524:	454a      	cmp	r2, r9
 8011526:	bf38      	it	cc
 8011528:	2300      	movcc	r3, #0
 801152a:	9a03      	ldr	r2, [sp, #12]
 801152c:	441a      	add	r2, r3
 801152e:	4613      	mov	r3, r2
 8011530:	e778      	b.n	8011424 <EwBidiProcess+0x290>
 8011532:	f842 3f04 	str.w	r3, [r2, #4]!
 8011536:	3302      	adds	r3, #2
 8011538:	e7e9      	b.n	801150e <EwBidiProcess+0x37a>
 801153a:	f851 0b04 	ldr.w	r0, [r1], #4
 801153e:	7802      	ldrb	r2, [r0, #0]
 8011540:	f002 031f 	and.w	r3, r2, #31
 8011544:	2b09      	cmp	r3, #9
 8011546:	d19a      	bne.n	801147e <EwBidiProcess+0x2ea>
 8011548:	f851 3c08 	ldr.w	r3, [r1, #-8]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	f003 031f 	and.w	r3, r3, #31
 8011552:	f1a3 0714 	sub.w	r7, r3, #20
 8011556:	2f03      	cmp	r7, #3
 8011558:	bf98      	it	ls
 801155a:	230e      	movls	r3, #14
 801155c:	f363 0204 	bfi	r2, r3, #0, #5
 8011560:	7002      	strb	r2, [r0, #0]
 8011562:	e78c      	b.n	801147e <EwBidiProcess+0x2ea>
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	7811      	ldrb	r1, [r2, #0]
 8011568:	f001 001f 	and.w	r0, r1, #31
 801156c:	f100 3eff 	add.w	lr, r0, #4294967295
 8011570:	f1be 0f02 	cmp.w	lr, #2
 8011574:	d83d      	bhi.n	80115f2 <EwBidiProcess+0x45e>
 8011576:	4607      	mov	r7, r0
 8011578:	7811      	ldrb	r1, [r2, #0]
 801157a:	f001 001f 	and.w	r0, r1, #31
 801157e:	2803      	cmp	r0, #3
 8011580:	bf02      	ittt	eq
 8011582:	2002      	moveq	r0, #2
 8011584:	f360 0104 	bfieq	r1, r0, #0, #5
 8011588:	7011      	strbeq	r1, [r2, #0]
 801158a:	f892 e000 	ldrb.w	lr, [r2]
 801158e:	f00e 011f 	and.w	r1, lr, #31
 8011592:	2904      	cmp	r1, #4
 8011594:	d112      	bne.n	80115bc <EwBidiProcess+0x428>
 8011596:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801159a:	f898 1000 	ldrb.w	r1, [r8]
 801159e:	f001 001f 	and.w	r0, r1, #31
 80115a2:	2805      	cmp	r0, #5
 80115a4:	d10a      	bne.n	80115bc <EwBidiProcess+0x428>
 80115a6:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80115aa:	7800      	ldrb	r0, [r0, #0]
 80115ac:	ea8e 0000 	eor.w	r0, lr, r0
 80115b0:	06c0      	lsls	r0, r0, #27
 80115b2:	bf04      	itt	eq
 80115b4:	f36e 0104 	bfieq	r1, lr, #0, #5
 80115b8:	f888 1000 	strbeq.w	r1, [r8]
 80115bc:	7810      	ldrb	r0, [r2, #0]
 80115be:	f000 021f 	and.w	r2, r0, #31
 80115c2:	2a07      	cmp	r2, #7
 80115c4:	d001      	beq.n	80115ca <EwBidiProcess+0x436>
 80115c6:	2a04      	cmp	r2, #4
 80115c8:	d111      	bne.n	80115ee <EwBidiProcess+0x45a>
 80115ca:	f853 ec04 	ldr.w	lr, [r3, #-4]
 80115ce:	f89e 1000 	ldrb.w	r1, [lr]
 80115d2:	f001 021f 	and.w	r2, r1, #31
 80115d6:	2a08      	cmp	r2, #8
 80115d8:	d109      	bne.n	80115ee <EwBidiProcess+0x45a>
 80115da:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80115de:	7812      	ldrb	r2, [r2, #0]
 80115e0:	4042      	eors	r2, r0
 80115e2:	06d2      	lsls	r2, r2, #27
 80115e4:	bf04      	itt	eq
 80115e6:	f360 0104 	bfieq	r1, r0, #0, #5
 80115ea:	f88e 1000 	strbeq.w	r1, [lr]
 80115ee:	3304      	adds	r3, #4
 80115f0:	e74c      	b.n	801148c <EwBidiProcess+0x2f8>
 80115f2:	2804      	cmp	r0, #4
 80115f4:	d1c0      	bne.n	8011578 <EwBidiProcess+0x3e4>
 80115f6:	2f03      	cmp	r7, #3
 80115f8:	bf02      	ittt	eq
 80115fa:	2007      	moveq	r0, #7
 80115fc:	f360 0104 	bfieq	r1, r0, #0, #5
 8011600:	7011      	strbeq	r1, [r2, #0]
 8011602:	e7b9      	b.n	8011578 <EwBidiProcess+0x3e4>
 8011604:	6822      	ldr	r2, [r4, #0]
 8011606:	7813      	ldrb	r3, [r2, #0]
 8011608:	f003 031f 	and.w	r3, r3, #31
 801160c:	2b04      	cmp	r3, #4
 801160e:	d01c      	beq.n	801164a <EwBidiProcess+0x4b6>
 8011610:	7811      	ldrb	r1, [r2, #0]
 8011612:	f001 031f 	and.w	r3, r1, #31
 8011616:	2b06      	cmp	r3, #6
 8011618:	f47f af3b 	bne.w	8011492 <EwBidiProcess+0x2fe>
 801161c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	f003 031f 	and.w	r3, r3, #31
 8011626:	2b04      	cmp	r3, #4
 8011628:	bf04      	itt	eq
 801162a:	f363 0104 	bfieq	r1, r3, #0, #5
 801162e:	7011      	strbeq	r1, [r2, #0]
 8011630:	e72f      	b.n	8011492 <EwBidiProcess+0x2fe>
 8011632:	f367 0304 	bfi	r3, r7, #0, #5
 8011636:	700b      	strb	r3, [r1, #0]
 8011638:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 801163c:	780b      	ldrb	r3, [r1, #0]
 801163e:	f003 0e1f 	and.w	lr, r3, #31
 8011642:	f1be 0f06 	cmp.w	lr, #6
 8011646:	d0f4      	beq.n	8011632 <EwBidiProcess+0x49e>
 8011648:	e7e2      	b.n	8011610 <EwBidiProcess+0x47c>
 801164a:	4620      	mov	r0, r4
 801164c:	e7f4      	b.n	8011638 <EwBidiProcess+0x4a4>
 801164e:	f852 1b04 	ldr.w	r1, [r2], #4
 8011652:	780b      	ldrb	r3, [r1, #0]
 8011654:	f003 031f 	and.w	r3, r3, #31
 8011658:	1f5c      	subs	r4, r3, #5
 801165a:	2c01      	cmp	r4, #1
 801165c:	d902      	bls.n	8011664 <EwBidiProcess+0x4d0>
 801165e:	2b08      	cmp	r3, #8
 8011660:	f47f af1d 	bne.w	801149e <EwBidiProcess+0x30a>
 8011664:	780b      	ldrb	r3, [r1, #0]
 8011666:	f360 0304 	bfi	r3, r0, #0, #5
 801166a:	700b      	strb	r3, [r1, #0]
 801166c:	e717      	b.n	801149e <EwBidiProcess+0x30a>
 801166e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011672:	780a      	ldrb	r2, [r1, #0]
 8011674:	f002 001f 	and.w	r0, r2, #31
 8011678:	2804      	cmp	r0, #4
 801167a:	d105      	bne.n	8011688 <EwBidiProcess+0x4f4>
 801167c:	2b01      	cmp	r3, #1
 801167e:	f47f af15 	bne.w	80114ac <EwBidiProcess+0x318>
 8011682:	f363 0204 	bfi	r2, r3, #0, #5
 8011686:	700a      	strb	r2, [r1, #0]
 8011688:	7809      	ldrb	r1, [r1, #0]
 801168a:	f001 021f 	and.w	r2, r1, #31
 801168e:	3a01      	subs	r2, #1
 8011690:	2a02      	cmp	r2, #2
 8011692:	bf98      	it	ls
 8011694:	f001 031f 	andls.w	r3, r1, #31
 8011698:	e708      	b.n	80114ac <EwBidiProcess+0x318>
 801169a:	9a06      	ldr	r2, [sp, #24]
 801169c:	3a01      	subs	r2, #1
 801169e:	f108 0801 	add.w	r8, r8, #1
 80116a2:	9206      	str	r2, [sp, #24]
 80116a4:	9a06      	ldr	r2, [sp, #24]
 80116a6:	b14a      	cbz	r2, 80116bc <EwBidiProcess+0x528>
 80116a8:	f06f 0103 	mvn.w	r1, #3
 80116ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80116ae:	fb01 f108 	mul.w	r1, r1, r8
 80116b2:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 80116b6:	5841      	ldr	r1, [r0, r1]
 80116b8:	4291      	cmp	r1, r2
 80116ba:	d9ee      	bls.n	801169a <EwBidiProcess+0x506>
 80116bc:	781a      	ldrb	r2, [r3, #0]
 80116be:	f002 021f 	and.w	r2, r2, #31
 80116c2:	2a0e      	cmp	r2, #14
 80116c4:	d117      	bne.n	80116f6 <EwBidiProcess+0x562>
 80116c6:	881a      	ldrh	r2, [r3, #0]
 80116c8:	f402 72f0 	and.w	r2, r2, #480	; 0x1e0
 80116cc:	2a20      	cmp	r2, #32
 80116ce:	d114      	bne.n	80116fa <EwBidiProcess+0x566>
 80116d0:	2c3d      	cmp	r4, #61	; 0x3d
 80116d2:	f300 8083 	bgt.w	80117dc <EwBidiProcess+0x648>
 80116d6:	3401      	adds	r4, #1
 80116d8:	aa2f      	add	r2, sp, #188	; 0xbc
 80116da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80116de:	9a01      	ldr	r2, [sp, #4]
 80116e0:	1a9b      	subs	r3, r3, r2
 80116e2:	eb08 0363 	add.w	r3, r8, r3, asr #1
 80116e6:	9a08      	ldr	r2, [sp, #32]
 80116e8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80116ec:	f7ff fba8 	bl	8010e40 <EwGetAttrLinkBaseline+0x3e>
 80116f0:	ab0f      	add	r3, sp, #60	; 0x3c
 80116f2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 80116f6:	3704      	adds	r7, #4
 80116f8:	e6e4      	b.n	80114c4 <EwBidiProcess+0x330>
 80116fa:	2a40      	cmp	r2, #64	; 0x40
 80116fc:	d1fb      	bne.n	80116f6 <EwBidiProcess+0x562>
 80116fe:	9a01      	ldr	r2, [sp, #4]
 8011700:	9908      	ldr	r1, [sp, #32]
 8011702:	1a9a      	subs	r2, r3, r2
 8011704:	eb08 0262 	add.w	r2, r8, r2, asr #1
 8011708:	f242 3c2a 	movw	ip, #9002	; 0x232a
 801170c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8011710:	f243 0e09 	movw	lr, #12297	; 0x3009
 8011714:	4622      	mov	r2, r4
 8011716:	2a00      	cmp	r2, #0
 8011718:	dd21      	ble.n	801175e <EwBidiProcess+0x5ca>
 801171a:	a80f      	add	r0, sp, #60	; 0x3c
 801171c:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8011720:	4281      	cmp	r1, r0
 8011722:	d003      	beq.n	801172c <EwBidiProcess+0x598>
 8011724:	4561      	cmp	r1, ip
 8011726:	d116      	bne.n	8011756 <EwBidiProcess+0x5c2>
 8011728:	4570      	cmp	r0, lr
 801172a:	d112      	bne.n	8011752 <EwBidiProcess+0x5be>
 801172c:	a80f      	add	r0, sp, #60	; 0x3c
 801172e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8011732:	4281      	cmp	r1, r0
 8011734:	d007      	beq.n	8011746 <EwBidiProcess+0x5b2>
 8011736:	f242 3c2a 	movw	ip, #9002	; 0x232a
 801173a:	4561      	cmp	r1, ip
 801173c:	f243 0e09 	movw	lr, #12297	; 0x3009
 8011740:	d114      	bne.n	801176c <EwBidiProcess+0x5d8>
 8011742:	4570      	cmp	r0, lr
 8011744:	d10c      	bne.n	8011760 <EwBidiProcess+0x5cc>
 8011746:	4623      	mov	r3, r4
 8011748:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
 801174c:	f04f 0e03 	mov.w	lr, #3
 8011750:	e017      	b.n	8011782 <EwBidiProcess+0x5ee>
 8011752:	3a01      	subs	r2, #1
 8011754:	e7df      	b.n	8011716 <EwBidiProcess+0x582>
 8011756:	4571      	cmp	r1, lr
 8011758:	d1fb      	bne.n	8011752 <EwBidiProcess+0x5be>
 801175a:	4560      	cmp	r0, ip
 801175c:	e7e5      	b.n	801172a <EwBidiProcess+0x596>
 801175e:	d0e5      	beq.n	801172c <EwBidiProcess+0x598>
 8011760:	881a      	ldrh	r2, [r3, #0]
 8011762:	2103      	movs	r1, #3
 8011764:	f361 1248 	bfi	r2, r1, #5, #4
 8011768:	801a      	strh	r2, [r3, #0]
 801176a:	e7c4      	b.n	80116f6 <EwBidiProcess+0x562>
 801176c:	4571      	cmp	r1, lr
 801176e:	d1f7      	bne.n	8011760 <EwBidiProcess+0x5cc>
 8011770:	4560      	cmp	r0, ip
 8011772:	e7e7      	b.n	8011744 <EwBidiProcess+0x5b0>
 8011774:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 8011778:	8808      	ldrh	r0, [r1, #0]
 801177a:	f36e 1048 	bfi	r0, lr, #5, #4
 801177e:	8008      	strh	r0, [r1, #0]
 8011780:	3b01      	subs	r3, #1
 8011782:	4293      	cmp	r3, r2
 8011784:	dcf6      	bgt.n	8011774 <EwBidiProcess+0x5e0>
 8011786:	1b13      	subs	r3, r2, r4
 8011788:	4294      	cmp	r4, r2
 801178a:	bfb8      	it	lt
 801178c:	2300      	movlt	r3, #0
 801178e:	3c01      	subs	r4, #1
 8011790:	441c      	add	r4, r3
 8011792:	9b07      	ldr	r3, [sp, #28]
 8011794:	3301      	adds	r3, #1
 8011796:	9307      	str	r3, [sp, #28]
 8011798:	e7ad      	b.n	80116f6 <EwBidiProcess+0x562>
 801179a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 801179e:	881a      	ldrh	r2, [r3, #0]
 80117a0:	f360 1248 	bfi	r2, r0, #5, #4
 80117a4:	801a      	strh	r2, [r3, #0]
 80117a6:	3c01      	subs	r4, #1
 80117a8:	2c00      	cmp	r4, #0
 80117aa:	daf6      	bge.n	801179a <EwBidiProcess+0x606>
 80117ac:	2103      	movs	r1, #3
 80117ae:	9b03      	ldr	r3, [sp, #12]
 80117b0:	42bb      	cmp	r3, r7
 80117b2:	d816      	bhi.n	80117e2 <EwBidiProcess+0x64e>
 80117b4:	9b07      	ldr	r3, [sp, #28]
 80117b6:	b17b      	cbz	r3, 80117d8 <EwBidiProcess+0x644>
 80117b8:	9b02      	ldr	r3, [sp, #8]
 80117ba:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	7859      	ldrb	r1, [r3, #1]
 80117c2:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80117c6:	1c4b      	adds	r3, r1, #1
 80117c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80117cc:	f00c 0c1f 	and.w	ip, ip, #31
 80117d0:	4637      	mov	r7, r6
 80117d2:	9303      	str	r3, [sp, #12]
 80117d4:	454f      	cmp	r7, r9
 80117d6:	d317      	bcc.n	8011808 <EwBidiProcess+0x674>
 80117d8:	2200      	movs	r2, #0
 80117da:	e098      	b.n	801190e <EwBidiProcess+0x77a>
 80117dc:	a92f      	add	r1, sp, #188	; 0xbc
 80117de:	2003      	movs	r0, #3
 80117e0:	e7e2      	b.n	80117a8 <EwBidiProcess+0x614>
 80117e2:	f857 3b04 	ldr.w	r3, [r7], #4
 80117e6:	781a      	ldrb	r2, [r3, #0]
 80117e8:	f002 021f 	and.w	r2, r2, #31
 80117ec:	2a0e      	cmp	r2, #14
 80117ee:	d1de      	bne.n	80117ae <EwBidiProcess+0x61a>
 80117f0:	881a      	ldrh	r2, [r3, #0]
 80117f2:	f402 72f0 	and.w	r2, r2, #480	; 0x1e0
 80117f6:	2a20      	cmp	r2, #32
 80117f8:	d001      	beq.n	80117fe <EwBidiProcess+0x66a>
 80117fa:	2a40      	cmp	r2, #64	; 0x40
 80117fc:	d1d7      	bne.n	80117ae <EwBidiProcess+0x61a>
 80117fe:	881a      	ldrh	r2, [r3, #0]
 8011800:	f361 1248 	bfi	r2, r1, #5, #4
 8011804:	801a      	strh	r2, [r3, #0]
 8011806:	e7d2      	b.n	80117ae <EwBidiProcess+0x61a>
 8011808:	f857 4b04 	ldr.w	r4, [r7], #4
 801180c:	8823      	ldrh	r3, [r4, #0]
 801180e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011812:	2b2e      	cmp	r3, #46	; 0x2e
 8011814:	d104      	bne.n	8011820 <EwBidiProcess+0x68c>
 8011816:	46be      	mov	lr, r7
 8011818:	2001      	movs	r0, #1
 801181a:	45f1      	cmp	r9, lr
 801181c:	4672      	mov	r2, lr
 801181e:	d801      	bhi.n	8011824 <EwBidiProcess+0x690>
 8011820:	2200      	movs	r2, #0
 8011822:	e00d      	b.n	8011840 <EwBidiProcess+0x6ac>
 8011824:	6813      	ldr	r3, [r2, #0]
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801182c:	2b2e      	cmp	r3, #46	; 0x2e
 801182e:	f10e 0e04 	add.w	lr, lr, #4
 8011832:	d101      	bne.n	8011838 <EwBidiProcess+0x6a4>
 8011834:	3001      	adds	r0, #1
 8011836:	e7f0      	b.n	801181a <EwBidiProcess+0x686>
 8011838:	2b4e      	cmp	r3, #78	; 0x4e
 801183a:	d1ee      	bne.n	801181a <EwBidiProcess+0x686>
 801183c:	3801      	subs	r0, #1
 801183e:	d1ec      	bne.n	801181a <EwBidiProcess+0x686>
 8011840:	7823      	ldrb	r3, [r4, #0]
 8011842:	f003 031f 	and.w	r3, r3, #31
 8011846:	2b04      	cmp	r3, #4
 8011848:	d01d      	beq.n	8011886 <EwBidiProcess+0x6f2>
 801184a:	2b07      	cmp	r3, #7
 801184c:	d01b      	beq.n	8011886 <EwBidiProcess+0x6f2>
 801184e:	1e58      	subs	r0, r3, #1
 8011850:	2801      	cmp	r0, #1
 8011852:	bf88      	it	hi
 8011854:	4663      	movhi	r3, ip
 8011856:	2a00      	cmp	r2, #0
 8011858:	d040      	beq.n	80118dc <EwBidiProcess+0x748>
 801185a:	2000      	movs	r0, #0
 801185c:	46b8      	mov	r8, r7
 801185e:	4686      	mov	lr, r0
 8011860:	4590      	cmp	r8, r2
 8011862:	46c4      	mov	ip, r8
 8011864:	d22a      	bcs.n	80118bc <EwBidiProcess+0x728>
 8011866:	f1be 0f00 	cmp.w	lr, #0
 801186a:	d00e      	beq.n	801188a <EwBidiProcess+0x6f6>
 801186c:	b168      	cbz	r0, 801188a <EwBidiProcess+0x6f6>
 801186e:	7823      	ldrb	r3, [r4, #0]
 8011870:	9903      	ldr	r1, [sp, #12]
 8011872:	f361 0304 	bfi	r3, r1, #0, #5
 8011876:	7023      	strb	r3, [r4, #0]
 8011878:	6813      	ldr	r3, [r2, #0]
 801187a:	7818      	ldrb	r0, [r3, #0]
 801187c:	f361 0004 	bfi	r0, r1, #0, #5
 8011880:	7018      	strb	r0, [r3, #0]
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	e16f      	b.n	8011b66 <EwBidiProcess+0x9d2>
 8011886:	2302      	movs	r3, #2
 8011888:	e7e5      	b.n	8011856 <EwBidiProcess+0x6c2>
 801188a:	f8dc c000 	ldr.w	ip, [ip]
 801188e:	f89c c000 	ldrb.w	ip, [ip]
 8011892:	f00c 0c1f 	and.w	ip, ip, #31
 8011896:	f1bc 0f01 	cmp.w	ip, #1
 801189a:	f108 0804 	add.w	r8, r8, #4
 801189e:	d102      	bne.n	80118a6 <EwBidiProcess+0x712>
 80118a0:	f10e 0e01 	add.w	lr, lr, #1
 80118a4:	e7dc      	b.n	8011860 <EwBidiProcess+0x6cc>
 80118a6:	f1bc 0f02 	cmp.w	ip, #2
 80118aa:	d005      	beq.n	80118b8 <EwBidiProcess+0x724>
 80118ac:	f1bc 0f07 	cmp.w	ip, #7
 80118b0:	d002      	beq.n	80118b8 <EwBidiProcess+0x724>
 80118b2:	f1bc 0f04 	cmp.w	ip, #4
 80118b6:	d1d3      	bne.n	8011860 <EwBidiProcess+0x6cc>
 80118b8:	3001      	adds	r0, #1
 80118ba:	e7d1      	b.n	8011860 <EwBidiProcess+0x6cc>
 80118bc:	9907      	ldr	r1, [sp, #28]
 80118be:	2901      	cmp	r1, #1
 80118c0:	d006      	beq.n	80118d0 <EwBidiProcess+0x73c>
 80118c2:	2800      	cmp	r0, #0
 80118c4:	d1d3      	bne.n	801186e <EwBidiProcess+0x6da>
 80118c6:	f1be 0f00 	cmp.w	lr, #0
 80118ca:	d007      	beq.n	80118dc <EwBidiProcess+0x748>
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	e136      	b.n	8011b3e <EwBidiProcess+0x9aa>
 80118d0:	f1be 0f00 	cmp.w	lr, #0
 80118d4:	d1cb      	bne.n	801186e <EwBidiProcess+0x6da>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	f040 8130 	bne.w	8011b3c <EwBidiProcess+0x9a8>
 80118dc:	469c      	mov	ip, r3
 80118de:	e779      	b.n	80117d4 <EwBidiProcess+0x640>
 80118e0:	7820      	ldrb	r0, [r4, #0]
 80118e2:	f363 0004 	bfi	r0, r3, #0, #5
 80118e6:	7020      	strb	r0, [r4, #0]
 80118e8:	e13f      	b.n	8011b6a <EwBidiProcess+0x9d6>
 80118ea:	6833      	ldr	r3, [r6, #0]
 80118ec:	7819      	ldrb	r1, [r3, #0]
 80118ee:	f001 031f 	and.w	r3, r1, #31
 80118f2:	f1a3 000b 	sub.w	r0, r3, #11
 80118f6:	b2c0      	uxtb	r0, r0
 80118f8:	2a00      	cmp	r2, #0
 80118fa:	f040 80bb 	bne.w	8011a74 <EwBidiProcess+0x8e0>
 80118fe:	2803      	cmp	r0, #3
 8011900:	d935      	bls.n	801196e <EwBidiProcess+0x7da>
 8011902:	f1a3 0214 	sub.w	r2, r3, #20
 8011906:	2a03      	cmp	r2, #3
 8011908:	d904      	bls.n	8011914 <EwBidiProcess+0x780>
 801190a:	2200      	movs	r2, #0
 801190c:	3604      	adds	r6, #4
 801190e:	454e      	cmp	r6, r9
 8011910:	d3eb      	bcc.n	80118ea <EwBidiProcess+0x756>
 8011912:	e0ed      	b.n	8011af0 <EwBidiProcess+0x95c>
 8011914:	4632      	mov	r2, r6
 8011916:	3b14      	subs	r3, #20
 8011918:	2b03      	cmp	r3, #3
 801191a:	d9f7      	bls.n	801190c <EwBidiProcess+0x778>
 801191c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8011920:	7818      	ldrb	r0, [r3, #0]
 8011922:	f000 001f 	and.w	r0, r0, #31
 8011926:	2804      	cmp	r0, #4
 8011928:	f001 031f 	and.w	r3, r1, #31
 801192c:	f000 8132 	beq.w	8011b94 <EwBidiProcess+0xa00>
 8011930:	2807      	cmp	r0, #7
 8011932:	f000 812f 	beq.w	8011b94 <EwBidiProcess+0xa00>
 8011936:	2b04      	cmp	r3, #4
 8011938:	d015      	beq.n	8011966 <EwBidiProcess+0x7d2>
 801193a:	2b07      	cmp	r3, #7
 801193c:	bf08      	it	eq
 801193e:	2302      	moveq	r3, #2
 8011940:	4298      	cmp	r0, r3
 8011942:	d102      	bne.n	801194a <EwBidiProcess+0x7b6>
 8011944:	1e59      	subs	r1, r3, #1
 8011946:	2901      	cmp	r1, #1
 8011948:	d904      	bls.n	8011954 <EwBidiProcess+0x7c0>
 801194a:	6813      	ldr	r3, [r2, #0]
 801194c:	785b      	ldrb	r3, [r3, #1]
 801194e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011952:	3301      	adds	r3, #1
 8011954:	4296      	cmp	r6, r2
 8011956:	d9d8      	bls.n	801190a <EwBidiProcess+0x776>
 8011958:	f852 1b04 	ldr.w	r1, [r2], #4
 801195c:	7808      	ldrb	r0, [r1, #0]
 801195e:	f363 0004 	bfi	r0, r3, #0, #5
 8011962:	7008      	strb	r0, [r1, #0]
 8011964:	e7f6      	b.n	8011954 <EwBidiProcess+0x7c0>
 8011966:	2302      	movs	r3, #2
 8011968:	e7ea      	b.n	8011940 <EwBidiProcess+0x7ac>
 801196a:	2302      	movs	r3, #2
 801196c:	e7f2      	b.n	8011954 <EwBidiProcess+0x7c0>
 801196e:	4632      	mov	r2, r6
 8011970:	e7cc      	b.n	801190c <EwBidiProcess+0x778>
 8011972:	7853      	ldrb	r3, [r2, #1]
 8011974:	7810      	ldrb	r0, [r2, #0]
 8011976:	079c      	lsls	r4, r3, #30
 8011978:	f000 001f 	and.w	r0, r0, #31
 801197c:	ea4f 0153 	mov.w	r1, r3, lsr #1
 8011980:	d50b      	bpl.n	801199a <EwBidiProcess+0x806>
 8011982:	2807      	cmp	r0, #7
 8011984:	d807      	bhi.n	8011996 <EwBidiProcess+0x802>
 8011986:	fa25 f000 	lsr.w	r0, r5, r0
 801198a:	07c0      	lsls	r0, r0, #31
 801198c:	d503      	bpl.n	8011996 <EwBidiProcess+0x802>
 801198e:	3101      	adds	r1, #1
 8011990:	f361 0347 	bfi	r3, r1, #1, #7
 8011994:	7053      	strb	r3, [r2, #1]
 8011996:	3202      	adds	r2, #2
 8011998:	e0af      	b.n	8011afa <EwBidiProcess+0x966>
 801199a:	2802      	cmp	r0, #2
 801199c:	b284      	uxth	r4, r0
 801199e:	d0f6      	beq.n	801198e <EwBidiProcess+0x7fa>
 80119a0:	2c04      	cmp	r4, #4
 80119a2:	d001      	beq.n	80119a8 <EwBidiProcess+0x814>
 80119a4:	2c07      	cmp	r4, #7
 80119a6:	d1f6      	bne.n	8011996 <EwBidiProcess+0x802>
 80119a8:	7853      	ldrb	r3, [r2, #1]
 80119aa:	3102      	adds	r1, #2
 80119ac:	e7f0      	b.n	8011990 <EwBidiProcess+0x7fc>
 80119ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119b0:	9902      	ldr	r1, [sp, #8]
 80119b2:	eba2 020a 	sub.w	r2, r2, sl
 80119b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d14f      	bne.n	8011a5e <EwBidiProcess+0x8ca>
 80119be:	9a01      	ldr	r2, [sp, #4]
 80119c0:	9c08      	ldr	r4, [sp, #32]
 80119c2:	1a9a      	subs	r2, r3, r2
 80119c4:	4629      	mov	r1, r5
 80119c6:	5aa4      	ldrh	r4, [r4, r2]
 80119c8:	9a01      	ldr	r2, [sp, #4]
 80119ca:	4290      	cmp	r0, r2
 80119cc:	d308      	bcc.n	80119e0 <EwBidiProcess+0x84c>
 80119ce:	7842      	ldrb	r2, [r0, #1]
 80119d0:	9e05      	ldr	r6, [sp, #20]
 80119d2:	ea4f 0952 	mov.w	r9, r2, lsr #1
 80119d6:	ebb6 0f52 	cmp.w	r6, r2, lsr #1
 80119da:	bfb8      	it	lt
 80119dc:	fa1f f189 	uxthlt.w	r1, r9
 80119e0:	f1ab 0202 	sub.w	r2, fp, #2
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d207      	bcs.n	80119f8 <EwBidiProcess+0x864>
 80119e8:	78da      	ldrb	r2, [r3, #3]
 80119ea:	ea4f 0952 	mov.w	r9, r2, lsr #1
 80119ee:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
 80119f2:	bfb8      	it	lt
 80119f4:	fa1f f189 	uxthlt.w	r1, r9
 80119f8:	f242 020d 	movw	r2, #8205	; 0x200d
 80119fc:	4294      	cmp	r4, r2
 80119fe:	881a      	ldrh	r2, [r3, #0]
 8011a00:	d112      	bne.n	8011a28 <EwBidiProcess+0x894>
 8011a02:	f368 1248 	bfi	r2, r8, #5, #4
 8011a06:	801a      	strh	r2, [r3, #0]
 8011a08:	881a      	ldrh	r2, [r3, #0]
 8011a0a:	0249      	lsls	r1, r1, #9
 8011a0c:	f041 011f 	orr.w	r1, r1, #31
 8011a10:	f402 72f0 	and.w	r2, r2, #480	; 0x1e0
 8011a14:	4311      	orrs	r1, r2
 8011a16:	8019      	strh	r1, [r3, #0]
 8011a18:	3002      	adds	r0, #2
 8011a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a1e:	f10b 0b02 	add.w	fp, fp, #2
 8011a22:	3802      	subs	r0, #2
 8011a24:	3b02      	subs	r3, #2
 8011a26:	e079      	b.n	8011b1c <EwBidiProcess+0x988>
 8011a28:	2c08      	cmp	r4, #8
 8011a2a:	d915      	bls.n	8011a58 <EwBidiProcess+0x8c4>
 8011a2c:	f1a4 090e 	sub.w	r9, r4, #14
 8011a30:	f1b9 0f0d 	cmp.w	r9, #13
 8011a34:	d910      	bls.n	8011a58 <EwBidiProcess+0x8c4>
 8011a36:	f1a4 097f 	sub.w	r9, r4, #127	; 0x7f
 8011a3a:	f1b9 0f05 	cmp.w	r9, #5
 8011a3e:	d90b      	bls.n	8011a58 <EwBidiProcess+0x8c4>
 8011a40:	f1a4 0986 	sub.w	r9, r4, #134	; 0x86
 8011a44:	f1b9 0f19 	cmp.w	r9, #25
 8011a48:	d906      	bls.n	8011a58 <EwBidiProcess+0x8c4>
 8011a4a:	42bc      	cmp	r4, r7
 8011a4c:	d004      	beq.n	8011a58 <EwBidiProcess+0x8c4>
 8011a4e:	4564      	cmp	r4, ip
 8011a50:	d002      	beq.n	8011a58 <EwBidiProcess+0x8c4>
 8011a52:	f36e 1248 	bfi	r2, lr, #5, #4
 8011a56:	e7d6      	b.n	8011a06 <EwBidiProcess+0x872>
 8011a58:	f36f 1248 	bfc	r2, #5, #4
 8011a5c:	e7d3      	b.n	8011a06 <EwBidiProcess+0x872>
 8011a5e:	4298      	cmp	r0, r3
 8011a60:	bf3c      	itt	cc
 8011a62:	8802      	ldrhcc	r2, [r0, #0]
 8011a64:	801a      	strhcc	r2, [r3, #0]
 8011a66:	e7dc      	b.n	8011a22 <EwBidiProcess+0x88e>
 8011a68:	2f00      	cmp	r7, #0
 8011a6a:	f47f ac2f 	bne.w	80112cc <EwBidiProcess+0x138>
 8011a6e:	f108 0801 	add.w	r8, r8, #1
 8011a72:	e42b      	b.n	80112cc <EwBidiProcess+0x138>
 8011a74:	2803      	cmp	r0, #3
 8011a76:	f63f af4e 	bhi.w	8011916 <EwBidiProcess+0x782>
 8011a7a:	e747      	b.n	801190c <EwBidiProcess+0x778>
 8011a7c:	4a49      	ldr	r2, [pc, #292]	; (8011ba4 <EwBidiProcess+0xa10>)
 8011a7e:	9904      	ldr	r1, [sp, #16]
 8011a80:	6813      	ldr	r3, [r2, #0]
 8011a82:	440b      	add	r3, r1
 8011a84:	6013      	str	r3, [r2, #0]
 8011a86:	4a48      	ldr	r2, [pc, #288]	; (8011ba8 <EwBidiProcess+0xa14>)
 8011a88:	6811      	ldr	r1, [r2, #0]
 8011a8a:	428b      	cmp	r3, r1
 8011a8c:	dd00      	ble.n	8011a90 <EwBidiProcess+0x8fc>
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	4a46      	ldr	r2, [pc, #280]	; (8011bac <EwBidiProcess+0xa18>)
 8011a92:	4947      	ldr	r1, [pc, #284]	; (8011bb0 <EwBidiProcess+0xa1c>)
 8011a94:	6812      	ldr	r2, [r2, #0]
 8011a96:	6809      	ldr	r1, [r1, #0]
 8011a98:	9e01      	ldr	r6, [sp, #4]
 8011a9a:	440a      	add	r2, r1
 8011a9c:	4413      	add	r3, r2
 8011a9e:	4a45      	ldr	r2, [pc, #276]	; (8011bb4 <EwBidiProcess+0xa20>)
 8011aa0:	6811      	ldr	r1, [r2, #0]
 8011aa2:	428b      	cmp	r3, r1
 8011aa4:	bfc8      	it	gt
 8011aa6:	6013      	strgt	r3, [r2, #0]
 8011aa8:	9b01      	ldr	r3, [sp, #4]
 8011aaa:	ad6e      	add	r5, sp, #440	; 0x1b8
 8011aac:	eb03 0944 	add.w	r9, r3, r4, lsl #1
 8011ab0:	9b05      	ldr	r3, [sp, #20]
 8011ab2:	702b      	strb	r3, [r5, #0]
 8011ab4:	786b      	ldrb	r3, [r5, #1]
 8011ab6:	f04f 0a00 	mov.w	sl, #0
 8011aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011abe:	706b      	strb	r3, [r5, #1]
 8011ac0:	46d0      	mov	r8, sl
 8011ac2:	4657      	mov	r7, sl
 8011ac4:	4654      	mov	r4, sl
 8011ac6:	454e      	cmp	r6, r9
 8011ac8:	f4ff ab8b 	bcc.w	80111e2 <EwBidiProcess+0x4e>
 8011acc:	9801      	ldr	r0, [sp, #4]
 8011ace:	f04f 0a00 	mov.w	sl, #0
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	454b      	cmp	r3, r9
 8011ad6:	f4ff ac3f 	bcc.w	8011358 <EwBidiProcess+0x1c4>
 8011ada:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8011ade:	e9dd 5201 	ldrd	r5, r2, [sp, #4]
 8011ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	3b04      	subs	r3, #4
 8011ae8:	18d3      	adds	r3, r2, r3
 8011aea:	eba9 0b4a 	sub.w	fp, r9, sl, lsl #1
 8011aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011af0:	455d      	cmp	r5, fp
 8011af2:	f4ff ac4d 	bcc.w	8011390 <EwBidiProcess+0x1fc>
 8011af6:	9a01      	ldr	r2, [sp, #4]
 8011af8:	2592      	movs	r5, #146	; 0x92
 8011afa:	455a      	cmp	r2, fp
 8011afc:	f4ff af39 	bcc.w	8011972 <EwBidiProcess+0x7de>
 8011b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b02:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8011b06:	f1ab 0002 	sub.w	r0, fp, #2
 8011b0a:	4403      	add	r3, r0
 8011b0c:	f641 070e 	movw	r7, #6158	; 0x180e
 8011b10:	f242 0c0c 	movw	ip, #8204	; 0x200c
 8011b14:	f04f 0e0c 	mov.w	lr, #12
 8011b18:	f04f 080b 	mov.w	r8, #11
 8011b1c:	f1ba 0f00 	cmp.w	sl, #0
 8011b20:	f47f af45 	bne.w	80119ae <EwBidiProcess+0x81a>
 8011b24:	9802      	ldr	r0, [sp, #8]
 8011b26:	f017 fe25 	bl	8029774 <EwFree>
 8011b2a:	4a1e      	ldr	r2, [pc, #120]	; (8011ba4 <EwBidiProcess+0xa10>)
 8011b2c:	9904      	ldr	r1, [sp, #16]
 8011b2e:	6813      	ldr	r3, [r2, #0]
 8011b30:	1a5b      	subs	r3, r3, r1
 8011b32:	6013      	str	r3, [r2, #0]
 8011b34:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8011b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	f43f ae96 	beq.w	801186e <EwBidiProcess+0x6da>
 8011b42:	f894 c000 	ldrb.w	ip, [r4]
 8011b46:	f003 001f 	and.w	r0, r3, #31
 8011b4a:	f360 0c04 	bfi	ip, r0, #0, #5
 8011b4e:	f884 c000 	strb.w	ip, [r4]
 8011b52:	6814      	ldr	r4, [r2, #0]
 8011b54:	f894 c000 	ldrb.w	ip, [r4]
 8011b58:	f360 0c04 	bfi	ip, r0, #0, #5
 8011b5c:	f884 c000 	strb.w	ip, [r4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f43f aebb 	beq.w	80118dc <EwBidiProcess+0x748>
 8011b66:	f1a7 0c04 	sub.w	ip, r7, #4
 8011b6a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 8011b6e:	8820      	ldrh	r0, [r4, #0]
 8011b70:	f400 70f0 	and.w	r0, r0, #480	; 0x1e0
 8011b74:	2880      	cmp	r0, #128	; 0x80
 8011b76:	f43f aeb3 	beq.w	80118e0 <EwBidiProcess+0x74c>
 8011b7a:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8011b7e:	8820      	ldrh	r0, [r4, #0]
 8011b80:	f400 70f0 	and.w	r0, r0, #480	; 0x1e0
 8011b84:	2880      	cmp	r0, #128	; 0x80
 8011b86:	f47f aea9 	bne.w	80118dc <EwBidiProcess+0x748>
 8011b8a:	7820      	ldrb	r0, [r4, #0]
 8011b8c:	f363 0004 	bfi	r0, r3, #0, #5
 8011b90:	7020      	strb	r0, [r4, #0]
 8011b92:	e7f2      	b.n	8011b7a <EwBidiProcess+0x9e6>
 8011b94:	2b04      	cmp	r3, #4
 8011b96:	f43f aee8 	beq.w	801196a <EwBidiProcess+0x7d6>
 8011b9a:	2b07      	cmp	r3, #7
 8011b9c:	f43f aee5 	beq.w	801196a <EwBidiProcess+0x7d6>
 8011ba0:	2002      	movs	r0, #2
 8011ba2:	e6cd      	b.n	8011940 <EwBidiProcess+0x7ac>
 8011ba4:	200002e8 	.word	0x200002e8
 8011ba8:	20000304 	.word	0x20000304
 8011bac:	200002d8 	.word	0x200002d8
 8011bb0:	200002e4 	.word	0x200002e4
 8011bb4:	200002ec 	.word	0x200002ec

08011bb8 <EwBidiApplyShaping>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	b08b      	sub	sp, #44	; 0x2c
 8011bbe:	460d      	mov	r5, r1
 8011bc0:	4616      	mov	r6, r2
 8011bc2:	9302      	str	r3, [sp, #8]
 8011bc4:	b1d0      	cbz	r0, 8011bfc <EwBidiApplyShaping+0x44>
 8011bc6:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
 8011bca:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8011bce:	9306      	str	r3, [sp, #24]
 8011bd0:	f1b9 0f00 	cmp.w	r9, #0
 8011bd4:	d00f      	beq.n	8011bf6 <EwBidiApplyShaping+0x3e>
 8011bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bd8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011be0:	3a01      	subs	r2, #1
 8011be2:	9204      	str	r2, [sp, #16]
 8011be4:	0092      	lsls	r2, r2, #2
 8011be6:	085b      	lsrs	r3, r3, #1
 8011be8:	9205      	str	r2, [sp, #20]
 8011bea:	f8cd 9004 	str.w	r9, [sp, #4]
 8011bee:	9a01      	ldr	r2, [sp, #4]
 8011bf0:	9906      	ldr	r1, [sp, #24]
 8011bf2:	428a      	cmp	r2, r1
 8011bf4:	d905      	bls.n	8011c02 <EwBidiApplyShaping+0x4a>
 8011bf6:	b00b      	add	sp, #44	; 0x2c
 8011bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	4681      	mov	r9, r0
 8011c00:	e7e3      	b.n	8011bca <EwBidiApplyShaping+0x12>
 8011c02:	9a01      	ldr	r2, [sp, #4]
 8011c04:	7852      	ldrb	r2, [r2, #1]
 8011c06:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8011c0a:	d104      	bne.n	8011c16 <EwBidiApplyShaping+0x5e>
 8011c0c:	9a01      	ldr	r2, [sp, #4]
 8011c0e:	9906      	ldr	r1, [sp, #24]
 8011c10:	428a      	cmp	r2, r1
 8011c12:	f0c0 8124 	bcc.w	8011e5e <EwBidiApplyShaping+0x2a6>
 8011c16:	2400      	movs	r4, #0
 8011c18:	f003 0301 	and.w	r3, r3, #1
 8011c1c:	4627      	mov	r7, r4
 8011c1e:	46a0      	mov	r8, r4
 8011c20:	9307      	str	r3, [sp, #28]
 8011c22:	e109      	b.n	8011e38 <EwBidiApplyShaping+0x280>
 8011c24:	9b03      	ldr	r3, [sp, #12]
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011c2c:	2b04      	cmp	r3, #4
 8011c2e:	f000 8169 	beq.w	8011f04 <EwBidiApplyShaping+0x34c>
 8011c32:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011c36:	9b07      	ldr	r3, [sp, #28]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d147      	bne.n	8011ccc <EwBidiApplyShaping+0x114>
 8011c3c:	4642      	mov	r2, r8
 8011c3e:	463b      	mov	r3, r7
 8011c40:	2c00      	cmp	r4, #0
 8011c42:	f000 80f2 	beq.w	8011e2a <EwBidiApplyShaping+0x272>
 8011c46:	8821      	ldrh	r1, [r4, #0]
 8011c48:	f401 71f0 	and.w	r1, r1, #480	; 0x1e0
 8011c4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011c50:	d141      	bne.n	8011cd6 <EwBidiApplyShaping+0x11e>
 8011c52:	eba4 0b09 	sub.w	fp, r4, r9
 8011c56:	9208      	str	r2, [sp, #32]
 8011c58:	f835 000b 	ldrh.w	r0, [r5, fp]
 8011c5c:	f7ff f90c 	bl	8010e78 <EwGetAttrLinkBaseline+0x76>
 8011c60:	9a08      	ldr	r2, [sp, #32]
 8011c62:	4682      	mov	sl, r0
 8011c64:	b3ae      	cbz	r6, 8011cd2 <EwBidiApplyShaping+0x11a>
 8011c66:	ea4f 036b 	mov.w	r3, fp, asr #1
 8011c6a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011c6e:	f3c3 3307 	ubfx	r3, r3, #12, #8
 8011c72:	9904      	ldr	r1, [sp, #16]
 8011c74:	4299      	cmp	r1, r3
 8011c76:	bfd8      	it	le
 8011c78:	9b05      	ldrle	r3, [sp, #20]
 8011c7a:	9902      	ldr	r1, [sp, #8]
 8011c7c:	bfc8      	it	gt
 8011c7e:	009b      	lslgt	r3, r3, #2
 8011c80:	58c8      	ldr	r0, [r1, r3]
 8011c82:	b900      	cbnz	r0, 8011c86 <EwBidiApplyShaping+0xce>
 8011c84:	6808      	ldr	r0, [r1, #0]
 8011c86:	f1ba 0f00 	cmp.w	sl, #0
 8011c8a:	f000 80ad 	beq.w	8011de8 <EwBidiApplyShaping+0x230>
 8011c8e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011c92:	2900      	cmp	r1, #0
 8011c94:	f000 80a8 	beq.w	8011de8 <EwBidiApplyShaping+0x230>
 8011c98:	2a00      	cmp	r2, #0
 8011c9a:	f000 80a5 	beq.w	8011de8 <EwBidiApplyShaping+0x230>
 8011c9e:	8813      	ldrh	r3, [r2, #0]
 8011ca0:	f403 72d0 	and.w	r2, r3, #416	; 0x1a0
 8011ca4:	f5b2 7f90 	cmp.w	r2, #288	; 0x120
 8011ca8:	d005      	beq.n	8011cb6 <EwBidiApplyShaping+0xfe>
 8011caa:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8011cae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011cb2:	f040 8099 	bne.w	8011de8 <EwBidiApplyShaping+0x230>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	f040 80eb 	bne.w	8011e92 <EwBidiApplyShaping+0x2da>
 8011cbc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011cc0:	e089      	b.n	8011dd6 <EwBidiApplyShaping+0x21e>
 8011cc2:	f04f 0800 	mov.w	r8, #0
 8011cc6:	e7b6      	b.n	8011c36 <EwBidiApplyShaping+0x7e>
 8011cc8:	46b8      	mov	r8, r7
 8011cca:	e7b4      	b.n	8011c36 <EwBidiApplyShaping+0x7e>
 8011ccc:	463a      	mov	r2, r7
 8011cce:	4643      	mov	r3, r8
 8011cd0:	e7b6      	b.n	8011c40 <EwBidiApplyShaping+0x88>
 8011cd2:	4633      	mov	r3, r6
 8011cd4:	e7cd      	b.n	8011c72 <EwBidiApplyShaping+0xba>
 8011cd6:	f5b1 7f90 	cmp.w	r1, #288	; 0x120
 8011cda:	d135      	bne.n	8011d48 <EwBidiApplyShaping+0x190>
 8011cdc:	eba4 0b09 	sub.w	fp, r4, r9
 8011ce0:	9308      	str	r3, [sp, #32]
 8011ce2:	f835 000b 	ldrh.w	r0, [r5, fp]
 8011ce6:	f7ff f8c7 	bl	8010e78 <EwGetAttrLinkBaseline+0x76>
 8011cea:	9b08      	ldr	r3, [sp, #32]
 8011cec:	4682      	mov	sl, r0
 8011cee:	b34e      	cbz	r6, 8011d44 <EwBidiApplyShaping+0x18c>
 8011cf0:	ea4f 026b 	mov.w	r2, fp, asr #1
 8011cf4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8011cf8:	f3c2 3207 	ubfx	r2, r2, #12, #8
 8011cfc:	9904      	ldr	r1, [sp, #16]
 8011cfe:	4291      	cmp	r1, r2
 8011d00:	bfd8      	it	le
 8011d02:	9a05      	ldrle	r2, [sp, #20]
 8011d04:	9902      	ldr	r1, [sp, #8]
 8011d06:	bfc8      	it	gt
 8011d08:	0092      	lslgt	r2, r2, #2
 8011d0a:	5888      	ldr	r0, [r1, r2]
 8011d0c:	b900      	cbnz	r0, 8011d10 <EwBidiApplyShaping+0x158>
 8011d0e:	6808      	ldr	r0, [r1, #0]
 8011d10:	f1ba 0f00 	cmp.w	sl, #0
 8011d14:	d068      	beq.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d16:	f8ba 1000 	ldrh.w	r1, [sl]
 8011d1a:	2900      	cmp	r1, #0
 8011d1c:	d064      	beq.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d062      	beq.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	f403 72d0 	and.w	r2, r3, #416	; 0x1a0
 8011d28:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011d2c:	d004      	beq.n	8011d38 <EwBidiApplyShaping+0x180>
 8011d2e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8011d32:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8011d36:	d157      	bne.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	f040 80b0 	bne.w	8011e9e <EwBidiApplyShaping+0x2e6>
 8011d3e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011d42:	e048      	b.n	8011dd6 <EwBidiApplyShaping+0x21e>
 8011d44:	4632      	mov	r2, r6
 8011d46:	e7d9      	b.n	8011cfc <EwBidiApplyShaping+0x144>
 8011d48:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8011d4c:	d14c      	bne.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d4e:	eba4 0b09 	sub.w	fp, r4, r9
 8011d52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011d56:	f835 000b 	ldrh.w	r0, [r5, fp]
 8011d5a:	f7ff f88d 	bl	8010e78 <EwGetAttrLinkBaseline+0x76>
 8011d5e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8011d62:	4682      	mov	sl, r0
 8011d64:	2e00      	cmp	r6, #0
 8011d66:	d039      	beq.n	8011ddc <EwBidiApplyShaping+0x224>
 8011d68:	ea4f 016b 	mov.w	r1, fp, asr #1
 8011d6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8011d70:	f3c1 3107 	ubfx	r1, r1, #12, #8
 8011d74:	9804      	ldr	r0, [sp, #16]
 8011d76:	4288      	cmp	r0, r1
 8011d78:	bfd8      	it	le
 8011d7a:	9905      	ldrle	r1, [sp, #20]
 8011d7c:	9802      	ldr	r0, [sp, #8]
 8011d7e:	bfc8      	it	gt
 8011d80:	0089      	lslgt	r1, r1, #2
 8011d82:	5840      	ldr	r0, [r0, r1]
 8011d84:	b908      	cbnz	r0, 8011d8a <EwBidiApplyShaping+0x1d2>
 8011d86:	9902      	ldr	r1, [sp, #8]
 8011d88:	6808      	ldr	r0, [r1, #0]
 8011d8a:	f1ba 0f00 	cmp.w	sl, #0
 8011d8e:	d02b      	beq.n	8011de8 <EwBidiApplyShaping+0x230>
 8011d90:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8011d94:	2900      	cmp	r1, #0
 8011d96:	d066      	beq.n	8011e66 <EwBidiApplyShaping+0x2ae>
 8011d98:	2a00      	cmp	r2, #0
 8011d9a:	d064      	beq.n	8011e66 <EwBidiApplyShaping+0x2ae>
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d062      	beq.n	8011e66 <EwBidiApplyShaping+0x2ae>
 8011da0:	f8b2 c000 	ldrh.w	ip, [r2]
 8011da4:	f40c 7ed0 	and.w	lr, ip, #416	; 0x1a0
 8011da8:	f5be 7f90 	cmp.w	lr, #288	; 0x120
 8011dac:	d004      	beq.n	8011db8 <EwBidiApplyShaping+0x200>
 8011dae:	f40c 7cf0 	and.w	ip, ip, #480	; 0x1e0
 8011db2:	f5bc 7fa0 	cmp.w	ip, #320	; 0x140
 8011db6:	d156      	bne.n	8011e66 <EwBidiApplyShaping+0x2ae>
 8011db8:	f8b3 c000 	ldrh.w	ip, [r3]
 8011dbc:	f40c 7ed0 	and.w	lr, ip, #416	; 0x1a0
 8011dc0:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8011dc4:	d004      	beq.n	8011dd0 <EwBidiApplyShaping+0x218>
 8011dc6:	f40c 7cf0 	and.w	ip, ip, #480	; 0x1e0
 8011dca:	f5bc 7fb0 	cmp.w	ip, #352	; 0x160
 8011dce:	d14a      	bne.n	8011e66 <EwBidiApplyShaping+0x2ae>
 8011dd0:	b930      	cbnz	r0, 8011de0 <EwBidiApplyShaping+0x228>
 8011dd2:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011dd6:	f825 300b 	strh.w	r3, [r5, fp]
 8011dda:	e005      	b.n	8011de8 <EwBidiApplyShaping+0x230>
 8011ddc:	4631      	mov	r1, r6
 8011dde:	e7c9      	b.n	8011d74 <EwBidiApplyShaping+0x1bc>
 8011de0:	f7fb fa9a 	bl	800d318 <EwIsGlyphAvailable>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d1f4      	bne.n	8011dd2 <EwBidiApplyShaping+0x21a>
 8011de8:	b1ff      	cbz	r7, 8011e2a <EwBidiApplyShaping+0x272>
 8011dea:	9b07      	ldr	r3, [sp, #28]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	bf14      	ite	ne
 8011df0:	46bb      	movne	fp, r7
 8011df2:	46a3      	moveq	fp, r4
 8011df4:	ebab 0b09 	sub.w	fp, fp, r9
 8011df8:	bf14      	ite	ne
 8011dfa:	46a2      	movne	sl, r4
 8011dfc:	46ba      	moveq	sl, r7
 8011dfe:	f835 200b 	ldrh.w	r2, [r5, fp]
 8011e02:	ebaa 0a09 	sub.w	sl, sl, r9
 8011e06:	f64f 61df 	movw	r1, #65247	; 0xfedf
 8011e0a:	428a      	cmp	r2, r1
 8011e0c:	f835 300a 	ldrh.w	r3, [r5, sl]
 8011e10:	d17d      	bne.n	8011f0e <EwBidiApplyShaping+0x356>
 8011e12:	f503 73bf 	add.w	r3, r3, #382	; 0x17e
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	2b0c      	cmp	r3, #12
 8011e1a:	d806      	bhi.n	8011e2a <EwBidiApplyShaping+0x272>
 8011e1c:	4a46      	ldr	r2, [pc, #280]	; (8011f38 <EwBidiApplyShaping+0x380>)
 8011e1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011e22:	f8b3 141c 	ldrh.w	r1, [r3, #1052]	; 0x41c
 8011e26:	2900      	cmp	r1, #0
 8011e28:	d145      	bne.n	8011eb6 <EwBidiApplyShaping+0x2fe>
 8011e2a:	9b03      	ldr	r3, [sp, #12]
 8011e2c:	3302      	adds	r3, #2
 8011e2e:	9303      	str	r3, [sp, #12]
 8011e30:	4643      	mov	r3, r8
 8011e32:	46b8      	mov	r8, r7
 8011e34:	4627      	mov	r7, r4
 8011e36:	461c      	mov	r4, r3
 8011e38:	9b01      	ldr	r3, [sp, #4]
 8011e3a:	9a03      	ldr	r2, [sp, #12]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	f63f aef1 	bhi.w	8011c24 <EwBidiApplyShaping+0x6c>
 8011e42:	2f00      	cmp	r7, #0
 8011e44:	f47f af3d 	bne.w	8011cc2 <EwBidiApplyShaping+0x10a>
 8011e48:	f1b8 0f00 	cmp.w	r8, #0
 8011e4c:	f47f af3c 	bne.w	8011cc8 <EwBidiApplyShaping+0x110>
 8011e50:	2c00      	cmp	r4, #0
 8011e52:	f47f aef0 	bne.w	8011c36 <EwBidiApplyShaping+0x7e>
 8011e56:	785b      	ldrb	r3, [r3, #1]
 8011e58:	9a01      	ldr	r2, [sp, #4]
 8011e5a:	9203      	str	r2, [sp, #12]
 8011e5c:	085b      	lsrs	r3, r3, #1
 8011e5e:	9a01      	ldr	r2, [sp, #4]
 8011e60:	3202      	adds	r2, #2
 8011e62:	9201      	str	r2, [sp, #4]
 8011e64:	e6c3      	b.n	8011bee <EwBidiApplyShaping+0x36>
 8011e66:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011e6a:	2900      	cmp	r1, #0
 8011e6c:	f43f af53 	beq.w	8011d16 <EwBidiApplyShaping+0x15e>
 8011e70:	2a00      	cmp	r2, #0
 8011e72:	f43f af50 	beq.w	8011d16 <EwBidiApplyShaping+0x15e>
 8011e76:	8812      	ldrh	r2, [r2, #0]
 8011e78:	f402 7cd0 	and.w	ip, r2, #416	; 0x1a0
 8011e7c:	f5bc 7f90 	cmp.w	ip, #288	; 0x120
 8011e80:	f43f af19 	beq.w	8011cb6 <EwBidiApplyShaping+0xfe>
 8011e84:	f402 72f0 	and.w	r2, r2, #480	; 0x1e0
 8011e88:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8011e8c:	f47f af43 	bne.w	8011d16 <EwBidiApplyShaping+0x15e>
 8011e90:	e711      	b.n	8011cb6 <EwBidiApplyShaping+0xfe>
 8011e92:	f7fb fa41 	bl	800d318 <EwIsGlyphAvailable>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	f47f af10 	bne.w	8011cbc <EwBidiApplyShaping+0x104>
 8011e9c:	e7a4      	b.n	8011de8 <EwBidiApplyShaping+0x230>
 8011e9e:	f7fb fa3b 	bl	800d318 <EwIsGlyphAvailable>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	f47f af4b 	bne.w	8011d3e <EwBidiApplyShaping+0x186>
 8011ea8:	e79e      	b.n	8011de8 <EwBidiApplyShaping+0x230>
 8011eaa:	f64f 628e 	movw	r2, #65166	; 0xfe8e
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d1bb      	bne.n	8011e2a <EwBidiApplyShaping+0x272>
 8011eb2:	f64f 61fc 	movw	r1, #65276	; 0xfefc
 8011eb6:	b31e      	cbz	r6, 8011f00 <EwBidiApplyShaping+0x348>
 8011eb8:	ea4f 036a 	mov.w	r3, sl, asr #1
 8011ebc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011ec0:	f3c3 3307 	ubfx	r3, r3, #12, #8
 8011ec4:	9a04      	ldr	r2, [sp, #16]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	bfd8      	it	le
 8011eca:	9b05      	ldrle	r3, [sp, #20]
 8011ecc:	9a02      	ldr	r2, [sp, #8]
 8011ece:	bfc8      	it	gt
 8011ed0:	009b      	lslgt	r3, r3, #2
 8011ed2:	58d0      	ldr	r0, [r2, r3]
 8011ed4:	b908      	cbnz	r0, 8011eda <EwBidiApplyShaping+0x322>
 8011ed6:	6810      	ldr	r0, [r2, #0]
 8011ed8:	b128      	cbz	r0, 8011ee6 <EwBidiApplyShaping+0x32e>
 8011eda:	9108      	str	r1, [sp, #32]
 8011edc:	f7fb fa1c 	bl	800d318 <EwIsGlyphAvailable>
 8011ee0:	9908      	ldr	r1, [sp, #32]
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d0a1      	beq.n	8011e2a <EwBidiApplyShaping+0x272>
 8011ee6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011eea:	f825 100a 	strh.w	r1, [r5, sl]
 8011eee:	f825 300b 	strh.w	r3, [r5, fp]
 8011ef2:	e79a      	b.n	8011e2a <EwBidiApplyShaping+0x272>
 8011ef4:	f64f 61fa 	movw	r1, #65274	; 0xfefa
 8011ef8:	e7dd      	b.n	8011eb6 <EwBidiApplyShaping+0x2fe>
 8011efa:	f64f 61f6 	movw	r1, #65270	; 0xfef6
 8011efe:	e7da      	b.n	8011eb6 <EwBidiApplyShaping+0x2fe>
 8011f00:	4633      	mov	r3, r6
 8011f02:	e7df      	b.n	8011ec4 <EwBidiApplyShaping+0x30c>
 8011f04:	463b      	mov	r3, r7
 8011f06:	4647      	mov	r7, r8
 8011f08:	46a0      	mov	r8, r4
 8011f0a:	461c      	mov	r4, r3
 8011f0c:	e78d      	b.n	8011e2a <EwBidiApplyShaping+0x272>
 8011f0e:	f64f 61e0 	movw	r1, #65248	; 0xfee0
 8011f12:	428a      	cmp	r2, r1
 8011f14:	d189      	bne.n	8011e2a <EwBidiApplyShaping+0x272>
 8011f16:	f64f 6288 	movw	r2, #65160	; 0xfe88
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d0ea      	beq.n	8011ef4 <EwBidiApplyShaping+0x33c>
 8011f1e:	d8c4      	bhi.n	8011eaa <EwBidiApplyShaping+0x2f2>
 8011f20:	f64f 6282 	movw	r2, #65154	; 0xfe82
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d0e8      	beq.n	8011efa <EwBidiApplyShaping+0x342>
 8011f28:	f64f 6284 	movw	r2, #65156	; 0xfe84
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	f47f af7c 	bne.w	8011e2a <EwBidiApplyShaping+0x272>
 8011f32:	f64f 61f8 	movw	r1, #65272	; 0xfef8
 8011f36:	e7be      	b.n	8011eb6 <EwBidiApplyShaping+0x2fe>
 8011f38:	08035738 	.word	0x08035738

08011f3c <EwBidiMirrorGlyphs>:
 8011f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3e:	460e      	mov	r6, r1
 8011f40:	b138      	cbz	r0, 8011f52 <EwBidiMirrorGlyphs+0x16>
 8011f42:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 8011f46:	0064      	lsls	r4, r4, #1
 8011f48:	b11d      	cbz	r5, 8011f52 <EwBidiMirrorGlyphs+0x16>
 8011f4a:	3c02      	subs	r4, #2
 8011f4c:	442c      	add	r4, r5
 8011f4e:	42ac      	cmp	r4, r5
 8011f50:	d200      	bcs.n	8011f54 <EwBidiMirrorGlyphs+0x18>
 8011f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f54:	7863      	ldrb	r3, [r4, #1]
 8011f56:	079b      	lsls	r3, r3, #30
 8011f58:	d50b      	bpl.n	8011f72 <EwBidiMirrorGlyphs+0x36>
 8011f5a:	8823      	ldrh	r3, [r4, #0]
 8011f5c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8011f60:	3b01      	subs	r3, #1
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	d805      	bhi.n	8011f72 <EwBidiMirrorGlyphs+0x36>
 8011f66:	1b67      	subs	r7, r4, r5
 8011f68:	5bf0      	ldrh	r0, [r6, r7]
 8011f6a:	f7fe ff69 	bl	8010e40 <EwGetAttrLinkBaseline+0x3e>
 8011f6e:	b100      	cbz	r0, 8011f72 <EwBidiMirrorGlyphs+0x36>
 8011f70:	53f0      	strh	r0, [r6, r7]
 8011f72:	3c02      	subs	r4, #2
 8011f74:	e7eb      	b.n	8011f4e <EwBidiMirrorGlyphs+0x12>

08011f76 <EwBidiCompleteRow>:
 8011f76:	b510      	push	{r4, lr}
 8011f78:	b150      	cbz	r0, 8011f90 <EwBidiCompleteRow+0x1a>
 8011f7a:	6883      	ldr	r3, [r0, #8]
 8011f7c:	7b00      	ldrb	r0, [r0, #12]
 8011f7e:	eb13 0242 	adds.w	r2, r3, r2, lsl #1
 8011f82:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8011f86:	d003      	beq.n	8011f90 <EwBidiCompleteRow+0x1a>
 8011f88:	3a02      	subs	r2, #2
 8011f8a:	2101      	movs	r1, #1
 8011f8c:	42a2      	cmp	r2, r4
 8011f8e:	d200      	bcs.n	8011f92 <EwBidiCompleteRow+0x1c>
 8011f90:	bd10      	pop	{r4, pc}
 8011f92:	8813      	ldrh	r3, [r2, #0]
 8011f94:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8011f98:	2b06      	cmp	r3, #6
 8011f9a:	d106      	bne.n	8011faa <EwBidiCompleteRow+0x34>
 8011f9c:	7853      	ldrb	r3, [r2, #1]
 8011f9e:	f360 0347 	bfi	r3, r0, #1, #7
 8011fa2:	7053      	strb	r3, [r2, #1]
 8011fa4:	2101      	movs	r1, #1
 8011fa6:	3a02      	subs	r2, #2
 8011fa8:	e7f0      	b.n	8011f8c <EwBidiCompleteRow+0x16>
 8011faa:	b141      	cbz	r1, 8011fbe <EwBidiCompleteRow+0x48>
 8011fac:	f003 030d 	and.w	r3, r3, #13
 8011fb0:	2b05      	cmp	r3, #5
 8011fb2:	d104      	bne.n	8011fbe <EwBidiCompleteRow+0x48>
 8011fb4:	7853      	ldrb	r3, [r2, #1]
 8011fb6:	f360 0347 	bfi	r3, r0, #1, #7
 8011fba:	7053      	strb	r3, [r2, #1]
 8011fbc:	e7f3      	b.n	8011fa6 <EwBidiCompleteRow+0x30>
 8011fbe:	7813      	ldrb	r3, [r2, #0]
 8011fc0:	f003 031f 	and.w	r3, r3, #31
 8011fc4:	2b1f      	cmp	r3, #31
 8011fc6:	bf18      	it	ne
 8011fc8:	2100      	movne	r1, #0
 8011fca:	e7ec      	b.n	8011fa6 <EwBidiCompleteRow+0x30>

08011fcc <EwBidiReorderChars>:
 8011fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd0:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	b198      	cbz	r0, 8012000 <EwBidiReorderChars+0x34>
 8011fd8:	6884      	ldr	r4, [r0, #8]
 8011fda:	eb04 0041 	add.w	r0, r4, r1, lsl #1
 8011fde:	eb04 0842 	add.w	r8, r4, r2, lsl #1
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	4606      	mov	r6, r0
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	460a      	mov	r2, r1
 8011fea:	460c      	mov	r4, r1
 8011fec:	f10d 090c 	add.w	r9, sp, #12
 8011ff0:	4546      	cmp	r6, r8
 8011ff2:	d907      	bls.n	8012004 <EwBidiReorderChars+0x38>
 8011ff4:	4291      	cmp	r1, r2
 8011ff6:	d84d      	bhi.n	8012094 <EwBidiReorderChars+0xc8>
 8011ff8:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8011ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012000:	4680      	mov	r8, r0
 8012002:	e7ee      	b.n	8011fe2 <EwBidiReorderChars+0x16>
 8012004:	d244      	bcs.n	8012090 <EwBidiReorderChars+0xc4>
 8012006:	7877      	ldrb	r7, [r6, #1]
 8012008:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 801200c:	087f      	lsrs	r7, r7, #1
 801200e:	42bc      	cmp	r4, r7
 8012010:	d307      	bcc.n	8012022 <EwBidiReorderChars+0x56>
 8012012:	9b00      	ldr	r3, [sp, #0]
 8012014:	eba6 0e00 	sub.w	lr, r6, r0
 8012018:	f1ae 0e02 	sub.w	lr, lr, #2
 801201c:	46a4      	mov	ip, r4
 801201e:	449e      	add	lr, r3
 8012020:	e01d      	b.n	801205e <EwBidiReorderChars+0x92>
 8012022:	3401      	adds	r4, #1
 8012024:	f84c 5b04 	str.w	r5, [ip], #4
 8012028:	b2e4      	uxtb	r4, r4
 801202a:	4635      	mov	r5, r6
 801202c:	e7ef      	b.n	801200e <EwBidiReorderChars+0x42>
 801202e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012032:	fa5f fc8c 	uxtb.w	ip, ip
 8012036:	eba6 0a05 	sub.w	sl, r6, r5
 801203a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 801203e:	9301      	str	r3, [sp, #4]
 8012040:	f1ba 0f02 	cmp.w	sl, #2
 8012044:	dd0a      	ble.n	801205c <EwBidiReorderChars+0x90>
 8012046:	9b00      	ldr	r3, [sp, #0]
 8012048:	1a2d      	subs	r5, r5, r0
 801204a:	441d      	add	r5, r3
 801204c:	42aa      	cmp	r2, r5
 801204e:	d101      	bne.n	8012054 <EwBidiReorderChars+0x88>
 8012050:	4571      	cmp	r1, lr
 8012052:	d01a      	beq.n	801208a <EwBidiReorderChars+0xbe>
 8012054:	4291      	cmp	r1, r2
 8012056:	d80f      	bhi.n	8012078 <EwBidiReorderChars+0xac>
 8012058:	4671      	mov	r1, lr
 801205a:	462a      	mov	r2, r5
 801205c:	9d01      	ldr	r5, [sp, #4]
 801205e:	45bc      	cmp	ip, r7
 8012060:	d8e5      	bhi.n	801202e <EwBidiReorderChars+0x62>
 8012062:	eba7 0c04 	sub.w	ip, r7, r4
 8012066:	42a7      	cmp	r7, r4
 8012068:	bf88      	it	hi
 801206a:	f04f 0c00 	movhi.w	ip, #0
 801206e:	fa54 f48c 	uxtab	r4, r4, ip
 8012072:	b2e4      	uxtb	r4, r4
 8012074:	3602      	adds	r6, #2
 8012076:	e7bb      	b.n	8011ff0 <EwBidiReorderChars+0x24>
 8012078:	f8b2 a000 	ldrh.w	sl, [r2]
 801207c:	f8b1 b000 	ldrh.w	fp, [r1]
 8012080:	f822 bb02 	strh.w	fp, [r2], #2
 8012084:	f821 a902 	strh.w	sl, [r1], #-2
 8012088:	e7e4      	b.n	8012054 <EwBidiReorderChars+0x88>
 801208a:	2100      	movs	r1, #0
 801208c:	460a      	mov	r2, r1
 801208e:	e7e5      	b.n	801205c <EwBidiReorderChars+0x90>
 8012090:	2700      	movs	r7, #0
 8012092:	e7be      	b.n	8012012 <EwBidiReorderChars+0x46>
 8012094:	8813      	ldrh	r3, [r2, #0]
 8012096:	8808      	ldrh	r0, [r1, #0]
 8012098:	f822 0b02 	strh.w	r0, [r2], #2
 801209c:	f821 3902 	strh.w	r3, [r1], #-2
 80120a0:	e7a8      	b.n	8011ff4 <EwBidiReorderChars+0x28>

080120a2 <EwBidiReorderDWords>:
 80120a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	b1a8      	cbz	r0, 80120da <EwBidiReorderDWords+0x38>
 80120ae:	6880      	ldr	r0, [r0, #8]
 80120b0:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 80120b4:	eb00 0842 	add.w	r8, r0, r2, lsl #1
 80120b8:	2000      	movs	r0, #0
 80120ba:	4626      	mov	r6, r4
 80120bc:	4621      	mov	r1, r4
 80120be:	4602      	mov	r2, r0
 80120c0:	4605      	mov	r5, r0
 80120c2:	f10d 090c 	add.w	r9, sp, #12
 80120c6:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 80120ca:	4546      	cmp	r6, r8
 80120cc:	d908      	bls.n	80120e0 <EwBidiReorderDWords+0x3e>
 80120ce:	4290      	cmp	r0, r2
 80120d0:	d850      	bhi.n	8012174 <EwBidiReorderDWords+0xd2>
 80120d2:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 80120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120da:	4604      	mov	r4, r0
 80120dc:	4680      	mov	r8, r0
 80120de:	e7eb      	b.n	80120b8 <EwBidiReorderDWords+0x16>
 80120e0:	d246      	bcs.n	8012170 <EwBidiReorderDWords+0xce>
 80120e2:	7877      	ldrb	r7, [r6, #1]
 80120e4:	eb09 0c85 	add.w	ip, r9, r5, lsl #2
 80120e8:	087f      	lsrs	r7, r7, #1
 80120ea:	42bd      	cmp	r5, r7
 80120ec:	d308      	bcc.n	8012100 <EwBidiReorderDWords+0x5e>
 80120ee:	9b00      	ldr	r3, [sp, #0]
 80120f0:	eba6 0e04 	sub.w	lr, r6, r4
 80120f4:	eb0a 0e6e 	add.w	lr, sl, lr, asr #1
 80120f8:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80120fc:	46ac      	mov	ip, r5
 80120fe:	e01f      	b.n	8012140 <EwBidiReorderDWords+0x9e>
 8012100:	3501      	adds	r5, #1
 8012102:	f84c 1b04 	str.w	r1, [ip], #4
 8012106:	b2ed      	uxtb	r5, r5
 8012108:	4631      	mov	r1, r6
 801210a:	e7ee      	b.n	80120ea <EwBidiReorderDWords+0x48>
 801210c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012110:	fa5f fc8c 	uxtb.w	ip, ip
 8012114:	eba6 0b01 	sub.w	fp, r6, r1
 8012118:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 801211c:	9301      	str	r3, [sp, #4]
 801211e:	f1bb 0f02 	cmp.w	fp, #2
 8012122:	dd0c      	ble.n	801213e <EwBidiReorderDWords+0x9c>
 8012124:	9b00      	ldr	r3, [sp, #0]
 8012126:	1b09      	subs	r1, r1, r4
 8012128:	1049      	asrs	r1, r1, #1
 801212a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801212e:	428a      	cmp	r2, r1
 8012130:	d101      	bne.n	8012136 <EwBidiReorderDWords+0x94>
 8012132:	4570      	cmp	r0, lr
 8012134:	d019      	beq.n	801216a <EwBidiReorderDWords+0xc8>
 8012136:	4290      	cmp	r0, r2
 8012138:	d80f      	bhi.n	801215a <EwBidiReorderDWords+0xb8>
 801213a:	4670      	mov	r0, lr
 801213c:	460a      	mov	r2, r1
 801213e:	9901      	ldr	r1, [sp, #4]
 8012140:	45bc      	cmp	ip, r7
 8012142:	d8e3      	bhi.n	801210c <EwBidiReorderDWords+0x6a>
 8012144:	eba7 0c05 	sub.w	ip, r7, r5
 8012148:	42af      	cmp	r7, r5
 801214a:	bf88      	it	hi
 801214c:	f04f 0c00 	movhi.w	ip, #0
 8012150:	fa55 f58c 	uxtab	r5, r5, ip
 8012154:	b2ed      	uxtb	r5, r5
 8012156:	3602      	adds	r6, #2
 8012158:	e7b7      	b.n	80120ca <EwBidiReorderDWords+0x28>
 801215a:	f8d2 b000 	ldr.w	fp, [r2]
 801215e:	6803      	ldr	r3, [r0, #0]
 8012160:	f842 3b04 	str.w	r3, [r2], #4
 8012164:	f840 b904 	str.w	fp, [r0], #-4
 8012168:	e7e5      	b.n	8012136 <EwBidiReorderDWords+0x94>
 801216a:	2000      	movs	r0, #0
 801216c:	4602      	mov	r2, r0
 801216e:	e7e6      	b.n	801213e <EwBidiReorderDWords+0x9c>
 8012170:	2700      	movs	r7, #0
 8012172:	e7bc      	b.n	80120ee <EwBidiReorderDWords+0x4c>
 8012174:	6813      	ldr	r3, [r2, #0]
 8012176:	6801      	ldr	r1, [r0, #0]
 8012178:	f842 1b04 	str.w	r1, [r2], #4
 801217c:	f840 3904 	str.w	r3, [r0], #-4
 8012180:	e7a5      	b.n	80120ce <EwBidiReorderDWords+0x2c>

08012182 <EwBidiReorderIndex>:
 8012182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012186:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 801218a:	b180      	cbz	r0, 80121ae <EwBidiReorderIndex+0x2c>
 801218c:	6880      	ldr	r0, [r0, #8]
 801218e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012192:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8012196:	4618      	mov	r0, r3
 8012198:	460c      	mov	r4, r1
 801219a:	460a      	mov	r2, r1
 801219c:	2300      	movs	r3, #0
 801219e:	f10d 0e04 	add.w	lr, sp, #4
 80121a2:	4564      	cmp	r4, ip
 80121a4:	d906      	bls.n	80121b4 <EwBidiReorderIndex+0x32>
 80121a6:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80121aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ae:	4601      	mov	r1, r0
 80121b0:	4684      	mov	ip, r0
 80121b2:	e7f0      	b.n	8012196 <EwBidiReorderIndex+0x14>
 80121b4:	d230      	bcs.n	8012218 <EwBidiReorderIndex+0x96>
 80121b6:	7865      	ldrb	r5, [r4, #1]
 80121b8:	eb0e 0683 	add.w	r6, lr, r3, lsl #2
 80121bc:	086d      	lsrs	r5, r5, #1
 80121be:	42ab      	cmp	r3, r5
 80121c0:	d304      	bcc.n	80121cc <EwBidiReorderIndex+0x4a>
 80121c2:	1a67      	subs	r7, r4, r1
 80121c4:	107f      	asrs	r7, r7, #1
 80121c6:	3f01      	subs	r7, #1
 80121c8:	461e      	mov	r6, r3
 80121ca:	e01a      	b.n	8012202 <EwBidiReorderIndex+0x80>
 80121cc:	3301      	adds	r3, #1
 80121ce:	f846 2b04 	str.w	r2, [r6], #4
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	4622      	mov	r2, r4
 80121d6:	e7f2      	b.n	80121be <EwBidiReorderIndex+0x3c>
 80121d8:	3e01      	subs	r6, #1
 80121da:	b2f6      	uxtb	r6, r6
 80121dc:	eba4 0802 	sub.w	r8, r4, r2
 80121e0:	f1b8 0f02 	cmp.w	r8, #2
 80121e4:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 80121e8:	dd0a      	ble.n	8012200 <EwBidiReorderIndex+0x7e>
 80121ea:	1a52      	subs	r2, r2, r1
 80121ec:	ebb0 0f62 	cmp.w	r0, r2, asr #1
 80121f0:	ea4f 0862 	mov.w	r8, r2, asr #1
 80121f4:	db04      	blt.n	8012200 <EwBidiReorderIndex+0x7e>
 80121f6:	42b8      	cmp	r0, r7
 80121f8:	bfdc      	itt	le
 80121fa:	eba0 0008 	suble.w	r0, r0, r8
 80121fe:	1a38      	suble	r0, r7, r0
 8012200:	464a      	mov	r2, r9
 8012202:	42ae      	cmp	r6, r5
 8012204:	d8e8      	bhi.n	80121d8 <EwBidiReorderIndex+0x56>
 8012206:	1aee      	subs	r6, r5, r3
 8012208:	42ab      	cmp	r3, r5
 801220a:	bf38      	it	cc
 801220c:	2600      	movcc	r6, #0
 801220e:	fa53 f386 	uxtab	r3, r3, r6
 8012212:	b2db      	uxtb	r3, r3
 8012214:	3402      	adds	r4, #2
 8012216:	e7c4      	b.n	80121a2 <EwBidiReorderIndex+0x20>
 8012218:	2500      	movs	r5, #0
 801221a:	e7d2      	b.n	80121c2 <EwBidiReorderIndex+0x40>

0801221c <EwBidiReverseReorderIndex>:
 801221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801221e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8012222:	b1c8      	cbz	r0, 8012258 <EwBidiReverseReorderIndex+0x3c>
 8012224:	1a52      	subs	r2, r2, r1
 8012226:	6880      	ldr	r0, [r0, #8]
 8012228:	3a01      	subs	r2, #1
 801222a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801222e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8012232:	da11      	bge.n	8012258 <EwBidiReverseReorderIndex+0x3c>
 8012234:	2100      	movs	r1, #0
 8012236:	460d      	mov	r5, r1
 8012238:	af40      	add	r7, sp, #256	; 0x100
 801223a:	4295      	cmp	r5, r2
 801223c:	db10      	blt.n	8012260 <EwBidiReverseReorderIndex+0x44>
 801223e:	af40      	add	r7, sp, #256	; 0x100
 8012240:	46ec      	mov	ip, sp
 8012242:	2500      	movs	r5, #0
 8012244:	42a9      	cmp	r1, r5
 8012246:	d007      	beq.n	8012258 <EwBidiReverseReorderIndex+0x3c>
 8012248:	f83c 4b02 	ldrh.w	r4, [ip], #2
 801224c:	429c      	cmp	r4, r3
 801224e:	dc03      	bgt.n	8012258 <EwBidiReverseReorderIndex+0x3c>
 8012250:	f837 6b02 	ldrh.w	r6, [r7], #2
 8012254:	429e      	cmp	r6, r3
 8012256:	da2f      	bge.n	80122b8 <EwBidiReverseReorderIndex+0x9c>
 8012258:	4618      	mov	r0, r3
 801225a:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 801225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012260:	eb00 0445 	add.w	r4, r0, r5, lsl #1
 8012264:	eb00 0642 	add.w	r6, r0, r2, lsl #1
 8012268:	7864      	ldrb	r4, [r4, #1]
 801226a:	7876      	ldrb	r6, [r6, #1]
 801226c:	ebb1 0f54 	cmp.w	r1, r4, lsr #1
 8012270:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8012274:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012278:	da09      	bge.n	801228e <EwBidiReverseReorderIndex+0x72>
 801227a:	42b1      	cmp	r1, r6
 801227c:	da0e      	bge.n	801229c <EwBidiReverseReorderIndex+0x80>
 801227e:	1c4c      	adds	r4, r1, #1
 8012280:	45a4      	cmp	ip, r4
 8012282:	f82d 5011 	strh.w	r5, [sp, r1, lsl #1]
 8012286:	f827 2011 	strh.w	r2, [r7, r1, lsl #1]
 801228a:	dc02      	bgt.n	8012292 <EwBidiReverseReorderIndex+0x76>
 801228c:	4621      	mov	r1, r4
 801228e:	3501      	adds	r5, #1
 8012290:	460c      	mov	r4, r1
 8012292:	42a6      	cmp	r6, r4
 8012294:	dc00      	bgt.n	8012298 <EwBidiReverseReorderIndex+0x7c>
 8012296:	3a01      	subs	r2, #1
 8012298:	4621      	mov	r1, r4
 801229a:	e7ce      	b.n	801223a <EwBidiReverseReorderIndex+0x1e>
 801229c:	460c      	mov	r4, r1
 801229e:	e7fa      	b.n	8012296 <EwBidiReverseReorderIndex+0x7a>
 80122a0:	3a01      	subs	r2, #1
 80122a2:	4294      	cmp	r4, r2
 80122a4:	da06      	bge.n	80122b4 <EwBidiReverseReorderIndex+0x98>
 80122a6:	eb00 0e42 	add.w	lr, r0, r2, lsl #1
 80122aa:	f81e ec01 	ldrb.w	lr, [lr, #-1]
 80122ae:	ebb5 0f5e 	cmp.w	r5, lr, lsr #1
 80122b2:	dbf5      	blt.n	80122a0 <EwBidiReverseReorderIndex+0x84>
 80122b4:	461c      	mov	r4, r3
 80122b6:	e009      	b.n	80122cc <EwBidiReverseReorderIndex+0xb0>
 80122b8:	461a      	mov	r2, r3
 80122ba:	e7f2      	b.n	80122a2 <EwBidiReverseReorderIndex+0x86>
 80122bc:	eb00 0e44 	add.w	lr, r0, r4, lsl #1
 80122c0:	f89e e003 	ldrb.w	lr, [lr, #3]
 80122c4:	ebb5 0f5e 	cmp.w	r5, lr, lsr #1
 80122c8:	da02      	bge.n	80122d0 <EwBidiReverseReorderIndex+0xb4>
 80122ca:	3401      	adds	r4, #1
 80122cc:	42a6      	cmp	r6, r4
 80122ce:	dcf5      	bgt.n	80122bc <EwBidiReverseReorderIndex+0xa0>
 80122d0:	1a9b      	subs	r3, r3, r2
 80122d2:	1ae3      	subs	r3, r4, r3
 80122d4:	3501      	adds	r5, #1
 80122d6:	e7b5      	b.n	8012244 <EwBidiReverseReorderIndex+0x28>

080122d8 <EwBidiGetTypesAndLevels>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	b128      	cbz	r0, 80122e8 <EwBidiGetTypesAndLevels+0x10>
 80122dc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80122e0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80122e4:	4283      	cmp	r3, r0
 80122e6:	d300      	bcc.n	80122ea <EwBidiGetTypesAndLevels+0x12>
 80122e8:	bd10      	pop	{r4, pc}
 80122ea:	781c      	ldrb	r4, [r3, #0]
 80122ec:	f3c4 0404 	ubfx	r4, r4, #0, #5
 80122f0:	f801 4b01 	strb.w	r4, [r1], #1
 80122f4:	785c      	ldrb	r4, [r3, #1]
 80122f6:	f3c4 0446 	ubfx	r4, r4, #1, #7
 80122fa:	f802 4b01 	strb.w	r4, [r2], #1
 80122fe:	3302      	adds	r3, #2
 8012300:	e7f0      	b.n	80122e4 <EwBidiGetTypesAndLevels+0xc>
 8012302:	bf00      	nop
 8012304:	4b07      	ldr	r3, [pc, #28]	; (8012324 <EwBidiGetTypesAndLevels+0x4c>)
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	6042      	str	r2, [r0, #4]
 801230a:	2100      	movs	r1, #0
 801230c:	6001      	str	r1, [r0, #0]
 801230e:	b132      	cbz	r2, 801231e <EwBidiGetTypesAndLevels+0x46>
 8012310:	6010      	str	r0, [r2, #0]
 8012312:	6899      	ldr	r1, [r3, #8]
 8012314:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012316:	6018      	str	r0, [r3, #0]
 8012318:	440a      	add	r2, r1
 801231a:	609a      	str	r2, [r3, #8]
 801231c:	4770      	bx	lr
 801231e:	6058      	str	r0, [r3, #4]
 8012320:	e7f7      	b.n	8012312 <EwBidiGetTypesAndLevels+0x3a>
 8012322:	bf00      	nop
 8012324:	200001e8 	.word	0x200001e8
 8012328:	e9d0 1200 	ldrd	r1, r2, [r0]
 801232c:	4b08      	ldr	r3, [pc, #32]	; (8012350 <EwBidiGetTypesAndLevels+0x78>)
 801232e:	b15a      	cbz	r2, 8012348 <EwBidiGetTypesAndLevels+0x70>
 8012330:	6011      	str	r1, [r2, #0]
 8012332:	6801      	ldr	r1, [r0, #0]
 8012334:	b151      	cbz	r1, 801234c <EwBidiGetTypesAndLevels+0x74>
 8012336:	604a      	str	r2, [r1, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	e9c0 2200 	strd	r2, r2, [r0]
 801233e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012340:	689a      	ldr	r2, [r3, #8]
 8012342:	1a52      	subs	r2, r2, r1
 8012344:	609a      	str	r2, [r3, #8]
 8012346:	4770      	bx	lr
 8012348:	6059      	str	r1, [r3, #4]
 801234a:	e7f2      	b.n	8012332 <EwBidiGetTypesAndLevels+0x5a>
 801234c:	601a      	str	r2, [r3, #0]
 801234e:	e7f3      	b.n	8012338 <EwBidiGetTypesAndLevels+0x60>
 8012350:	200001e8 	.word	0x200001e8
 8012354:	4a0f      	ldr	r2, [pc, #60]	; (8012394 <EwBidiGetTypesAndLevels+0xbc>)
 8012356:	6981      	ldr	r1, [r0, #24]
 8012358:	68d3      	ldr	r3, [r2, #12]
 801235a:	b570      	push	{r4, r5, r6, lr}
 801235c:	6994      	ldr	r4, [r2, #24]
 801235e:	6044      	str	r4, [r0, #4]
 8012360:	3b01      	subs	r3, #1
 8012362:	2600      	movs	r6, #0
 8012364:	400b      	ands	r3, r1
 8012366:	e9d2 1504 	ldrd	r1, r5, [r2, #16]
 801236a:	6006      	str	r6, [r0, #0]
 801236c:	b16c      	cbz	r4, 801238a <EwBidiGetTypesAndLevels+0xb2>
 801236e:	6020      	str	r0, [r4, #0]
 8012370:	6190      	str	r0, [r2, #24]
 8012372:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8012376:	6082      	str	r2, [r0, #8]
 8012378:	2200      	movs	r2, #0
 801237a:	60c2      	str	r2, [r0, #12]
 801237c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8012380:	b12a      	cbz	r2, 801238e <EwBidiGetTypesAndLevels+0xb6>
 8012382:	60d0      	str	r0, [r2, #12]
 8012384:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012388:	bd70      	pop	{r4, r5, r6, pc}
 801238a:	61d0      	str	r0, [r2, #28]
 801238c:	e7f0      	b.n	8012370 <EwBidiGetTypesAndLevels+0x98>
 801238e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
 8012392:	e7f7      	b.n	8012384 <EwBidiGetTypesAndLevels+0xac>
 8012394:	200001e8 	.word	0x200001e8
 8012398:	4a13      	ldr	r2, [pc, #76]	; (80123e8 <EwBidiGetTypesAndLevels+0x110>)
 801239a:	6981      	ldr	r1, [r0, #24]
 801239c:	b570      	push	{r4, r5, r6, lr}
 801239e:	e9d2 3503 	ldrd	r3, r5, [r2, #12]
 80123a2:	3b01      	subs	r3, #1
 80123a4:	400b      	ands	r3, r1
 80123a6:	e9d0 4100 	ldrd	r4, r1, [r0]
 80123aa:	6956      	ldr	r6, [r2, #20]
 80123ac:	b189      	cbz	r1, 80123d2 <EwBidiGetTypesAndLevels+0xfa>
 80123ae:	600c      	str	r4, [r1, #0]
 80123b0:	6804      	ldr	r4, [r0, #0]
 80123b2:	b184      	cbz	r4, 80123d6 <EwBidiGetTypesAndLevels+0xfe>
 80123b4:	6061      	str	r1, [r4, #4]
 80123b6:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 80123ba:	b171      	cbz	r1, 80123da <EwBidiGetTypesAndLevels+0x102>
 80123bc:	60ca      	str	r2, [r1, #12]
 80123be:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80123c2:	b169      	cbz	r1, 80123e0 <EwBidiGetTypesAndLevels+0x108>
 80123c4:	608a      	str	r2, [r1, #8]
 80123c6:	2300      	movs	r3, #0
 80123c8:	e9c0 3300 	strd	r3, r3, [r0]
 80123cc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80123d0:	bd70      	pop	{r4, r5, r6, pc}
 80123d2:	61d4      	str	r4, [r2, #28]
 80123d4:	e7ec      	b.n	80123b0 <EwBidiGetTypesAndLevels+0xd8>
 80123d6:	6191      	str	r1, [r2, #24]
 80123d8:	e7ed      	b.n	80123b6 <EwBidiGetTypesAndLevels+0xde>
 80123da:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 80123de:	e7ee      	b.n	80123be <EwBidiGetTypesAndLevels+0xe6>
 80123e0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 80123e4:	e7ef      	b.n	80123c6 <EwBidiGetTypesAndLevels+0xee>
 80123e6:	bf00      	nop
 80123e8:	200001e8 	.word	0x200001e8
 80123ec:	680b      	ldr	r3, [r1, #0]
 80123ee:	6043      	str	r3, [r0, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	6082      	str	r2, [r0, #8]
 80123f4:	b11b      	cbz	r3, 80123fe <EwBidiGetTypesAndLevels+0x126>
 80123f6:	6098      	str	r0, [r3, #8]
 80123f8:	6008      	str	r0, [r1, #0]
 80123fa:	6001      	str	r1, [r0, #0]
 80123fc:	4770      	bx	lr
 80123fe:	6048      	str	r0, [r1, #4]
 8012400:	e7fa      	b.n	80123f8 <EwBidiGetTypesAndLevels+0x120>
 8012402:	6802      	ldr	r2, [r0, #0]
 8012404:	b152      	cbz	r2, 801241c <EwBidiGetTypesAndLevels+0x144>
 8012406:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801240a:	b143      	cbz	r3, 801241e <EwBidiGetTypesAndLevels+0x146>
 801240c:	6099      	str	r1, [r3, #8]
 801240e:	6881      	ldr	r1, [r0, #8]
 8012410:	b139      	cbz	r1, 8012422 <EwBidiGetTypesAndLevels+0x14a>
 8012412:	604b      	str	r3, [r1, #4]
 8012414:	2300      	movs	r3, #0
 8012416:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801241a:	6003      	str	r3, [r0, #0]
 801241c:	4770      	bx	lr
 801241e:	6051      	str	r1, [r2, #4]
 8012420:	e7f5      	b.n	801240e <EwBidiGetTypesAndLevels+0x136>
 8012422:	6013      	str	r3, [r2, #0]
 8012424:	e7f6      	b.n	8012414 <EwBidiGetTypesAndLevels+0x13c>
 8012426:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801242a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80124f0 <EwBidiGetTypesAndLevels+0x218>
 801242e:	f9b0 801e 	ldrsh.w	r8, [r0, #30]
 8012432:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012436:	f9b0 601c 	ldrsh.w	r6, [r0, #28]
 801243a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 801243e:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
 8012442:	fb93 f7f2 	sdiv	r7, r3, r2
 8012446:	4490      	add	r8, r2
 8012448:	4416      	add	r6, r2
 801244a:	fb94 f4f2 	sdiv	r4, r4, r2
 801244e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012452:	3e01      	subs	r6, #1
 8012454:	fb98 f8f2 	sdiv	r8, r8, r2
 8012458:	fb96 f6f2 	sdiv	r6, r6, r2
 801245c:	f7ff ff9c 	bl	8012398 <EwBidiGetTypesAndLevels+0xc0>
 8012460:	4262      	negs	r2, r4
 8012462:	f002 021f 	and.w	r2, r2, #31
 8012466:	f004 031f 	and.w	r3, r4, #31
 801246a:	bf58      	it	pl
 801246c:	4253      	negpl	r3, r2
 801246e:	4a1e      	ldr	r2, [pc, #120]	; (80124e8 <EwBidiGetTypesAndLevels+0x210>)
 8012470:	e9d9 ce09 	ldrd	ip, lr, [r9, #36]	; 0x24
 8012474:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8012478:	2c00      	cmp	r4, #0
 801247a:	fa02 f203 	lsl.w	r2, r2, r3
 801247e:	bfb8      	it	lt
 8012480:	341f      	addlt	r4, #31
 8012482:	4605      	mov	r5, r0
 8012484:	43d2      	mvns	r2, r2
 8012486:	1164      	asrs	r4, r4, #5
 8012488:	fb0e f307 	mul.w	r3, lr, r7
 801248c:	2e00      	cmp	r6, #0
 801248e:	dc1b      	bgt.n	80124c8 <EwBidiGetTypesAndLevels+0x1f0>
 8012490:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8012492:	4c16      	ldr	r4, [pc, #88]	; (80124ec <EwBidiGetTypesAndLevels+0x214>)
 8012494:	b148      	cbz	r0, 80124aa <EwBidiGetTypesAndLevels+0x1d2>
 8012496:	f017 f96d 	bl	8029774 <EwFree>
 801249a:	8bab      	ldrh	r3, [r5, #28]
 801249c:	8be9      	ldrh	r1, [r5, #30]
 801249e:	2201      	movs	r2, #1
 80124a0:	fb13 2201 	smlabb	r2, r3, r1, r2
 80124a4:	6823      	ldr	r3, [r4, #0]
 80124a6:	1a9b      	subs	r3, r3, r2
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	62eb      	str	r3, [r5, #44]	; 0x2c
 80124ae:	4628      	mov	r0, r5
 80124b0:	f017 f960 	bl	8029774 <EwFree>
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	3b30      	subs	r3, #48	; 0x30
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80124be:	3b01      	subs	r3, #1
 80124c0:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 80124c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	4619      	mov	r1, r3
 80124cc:	bfb8      	it	lt
 80124ce:	f103 011f 	addlt.w	r1, r3, #31
 80124d2:	eb04 1161 	add.w	r1, r4, r1, asr #5
 80124d6:	3e01      	subs	r6, #1
 80124d8:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 80124dc:	4010      	ands	r0, r2
 80124de:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
 80124e2:	4473      	add	r3, lr
 80124e4:	e7d2      	b.n	801248c <EwBidiGetTypesAndLevels+0x1b4>
 80124e6:	bf00      	nop
 80124e8:	08035b70 	.word	0x08035b70
 80124ec:	200002e8 	.word	0x200002e8
 80124f0:	200001e8 	.word	0x200001e8
 80124f4:	b508      	push	{r3, lr}
 80124f6:	f7ff ff84 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 80124fa:	f017 f93b 	bl	8029774 <EwFree>
 80124fe:	4a04      	ldr	r2, [pc, #16]	; (8012510 <EwBidiGetTypesAndLevels+0x238>)
 8012500:	4904      	ldr	r1, [pc, #16]	; (8012514 <EwBidiGetTypesAndLevels+0x23c>)
 8012502:	6813      	ldr	r3, [r2, #0]
 8012504:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012506:	3b28      	subs	r3, #40	; 0x28
 8012508:	1a5b      	subs	r3, r3, r1
 801250a:	6013      	str	r3, [r2, #0]
 801250c:	bd08      	pop	{r3, pc}
 801250e:	bf00      	nop
 8012510:	200002e8 	.word	0x200002e8
 8012514:	200001e8 	.word	0x200001e8
 8012518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251a:	4c15      	ldr	r4, [pc, #84]	; (8012570 <EwBidiGetTypesAndLevels+0x298>)
 801251c:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8012520:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8012524:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012528:	b140      	cbz	r0, 801253c <EwBidiGetTypesAndLevels+0x264>
 801252a:	b943      	cbnz	r3, 801253e <EwBidiGetTypesAndLevels+0x266>
 801252c:	f7ff ff69 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 8012530:	4910      	ldr	r1, [pc, #64]	; (8012574 <EwBidiGetTypesAndLevels+0x29c>)
 8012532:	f7ff ff5b 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 8012536:	f003 fd2c 	bl	8015f92 <EwExecuteTasks>
 801253a:	e7f3      	b.n	8012524 <EwBidiGetTypesAndLevels+0x24c>
 801253c:	b133      	cbz	r3, 801254c <EwBidiGetTypesAndLevels+0x274>
 801253e:	4618      	mov	r0, r3
 8012540:	f7ff ff5f 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 8012544:	4639      	mov	r1, r7
 8012546:	f7ff ff51 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 801254a:	e7eb      	b.n	8012524 <EwBidiGetTypesAndLevels+0x24c>
 801254c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 801254e:	b175      	cbz	r5, 801256e <EwBidiGetTypesAndLevels+0x296>
 8012550:	4628      	mov	r0, r5
 8012552:	f005 f835 	bl	80175c0 <EwCompleteTasks>
 8012556:	68eb      	ldr	r3, [r5, #12]
 8012558:	691a      	ldr	r2, [r3, #16]
 801255a:	3a01      	subs	r2, #1
 801255c:	611a      	str	r2, [r3, #16]
 801255e:	68da      	ldr	r2, [r3, #12]
 8012560:	3a01      	subs	r2, #1
 8012562:	60da      	str	r2, [r3, #12]
 8012564:	4628      	mov	r0, r5
 8012566:	f7ff ff4c 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 801256a:	4631      	mov	r1, r6
 801256c:	e7eb      	b.n	8012546 <EwBidiGetTypesAndLevels+0x26e>
 801256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012570:	200001e8 	.word	0x200001e8
 8012574:	20000224 	.word	0x20000224
 8012578:	4a18      	ldr	r2, [pc, #96]	; (80125dc <EwBidiGetTypesAndLevels+0x304>)
 801257a:	6813      	ldr	r3, [r2, #0]
 801257c:	b510      	push	{r4, lr}
 801257e:	3b3c      	subs	r3, #60	; 0x3c
 8012580:	4604      	mov	r4, r0
 8012582:	6013      	str	r3, [r2, #0]
 8012584:	f7ff fed0 	bl	8012328 <EwBidiGetTypesAndLevels+0x50>
 8012588:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801258a:	b138      	cbz	r0, 801259c <EwBidiGetTypesAndLevels+0x2c4>
 801258c:	f7ff ff39 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 8012590:	4913      	ldr	r1, [pc, #76]	; (80125e0 <EwBidiGetTypesAndLevels+0x308>)
 8012592:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012594:	f7ff ff2a 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 8012598:	2300      	movs	r3, #0
 801259a:	6363      	str	r3, [r4, #52]	; 0x34
 801259c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80125a0:	b913      	cbnz	r3, 80125a8 <EwBidiGetTypesAndLevels+0x2d0>
 80125a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80125a4:	f016 fe14 	bl	80291d0 <GfxDestroySurface>
 80125a8:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80125ac:	2b02      	cmp	r3, #2
 80125ae:	d102      	bne.n	80125b6 <EwBidiGetTypesAndLevels+0x2de>
 80125b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80125b2:	f016 fe0d 	bl	80291d0 <GfxDestroySurface>
 80125b6:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d102      	bne.n	80125c4 <EwBidiGetTypesAndLevels+0x2ec>
 80125be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80125c0:	f016 fe06 	bl	80291d0 <GfxDestroySurface>
 80125c4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d102      	bne.n	80125d2 <EwBidiGetTypesAndLevels+0x2fa>
 80125cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80125ce:	f016 fdff 	bl	80291d0 <GfxDestroySurface>
 80125d2:	4620      	mov	r0, r4
 80125d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d8:	f017 b8cc 	b.w	8029774 <EwFree>
 80125dc:	200002e8 	.word	0x200002e8
 80125e0:	20000234 	.word	0x20000234
 80125e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	4f35      	ldr	r7, [pc, #212]	; (80126c0 <EwBidiGetTypesAndLevels+0x3e8>)
 80125ea:	687c      	ldr	r4, [r7, #4]
 80125ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80125f0:	4605      	mov	r5, r0
 80125f2:	460e      	mov	r6, r1
 80125f4:	eb00 0901 	add.w	r9, r0, r1
 80125f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fa:	b933      	cbnz	r3, 801260a <EwBidiGetTypesAndLevels+0x332>
 80125fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fe:	b923      	cbnz	r3, 801260a <EwBidiGetTypesAndLevels+0x332>
 8012600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012602:	b913      	cbnz	r3, 801260a <EwBidiGetTypesAndLevels+0x332>
 8012604:	2e01      	cmp	r6, #1
 8012606:	d00a      	beq.n	801261e <EwBidiGetTypesAndLevels+0x346>
 8012608:	e011      	b.n	801262e <EwBidiGetTypesAndLevels+0x356>
 801260a:	f7ff ff85 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 801260e:	e7f3      	b.n	80125f8 <EwBidiGetTypesAndLevels+0x320>
 8012610:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8012614:	f1ba 0f00 	cmp.w	sl, #0
 8012618:	d005      	beq.n	8012626 <EwBidiGetTypesAndLevels+0x34e>
 801261a:	f8d8 8000 	ldr.w	r8, [r8]
 801261e:	f1b8 0f00 	cmp.w	r8, #0
 8012622:	d1f5      	bne.n	8012610 <EwBidiGetTypesAndLevels+0x338>
 8012624:	e003      	b.n	801262e <EwBidiGetTypesAndLevels+0x356>
 8012626:	4640      	mov	r0, r8
 8012628:	f7ff fefd 	bl	8012426 <EwBidiGetTypesAndLevels+0x14e>
 801262c:	4656      	mov	r6, sl
 801262e:	2d01      	cmp	r5, #1
 8012630:	d012      	beq.n	8012658 <EwBidiGetTypesAndLevels+0x380>
 8012632:	f04f 0800 	mov.w	r8, #0
 8012636:	46c2      	mov	sl, r8
 8012638:	2d01      	cmp	r5, #1
 801263a:	d102      	bne.n	8012642 <EwBidiGetTypesAndLevels+0x36a>
 801263c:	f1b8 0f03 	cmp.w	r8, #3
 8012640:	d112      	bne.n	8012668 <EwBidiGetTypesAndLevels+0x390>
 8012642:	eba9 0005 	sub.w	r0, r9, r5
 8012646:	1b80      	subs	r0, r0, r6
 8012648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8012650:	f1b8 0f00 	cmp.w	r8, #0
 8012654:	d003      	beq.n	801265e <EwBidiGetTypesAndLevels+0x386>
 8012656:	6824      	ldr	r4, [r4, #0]
 8012658:	2c00      	cmp	r4, #0
 801265a:	d1f7      	bne.n	801264c <EwBidiGetTypesAndLevels+0x374>
 801265c:	e7e9      	b.n	8012632 <EwBidiGetTypesAndLevels+0x35a>
 801265e:	4620      	mov	r0, r4
 8012660:	f7ff ff8a 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 8012664:	4645      	mov	r5, r8
 8012666:	e7e4      	b.n	8012632 <EwBidiGetTypesAndLevels+0x35a>
 8012668:	687c      	ldr	r4, [r7, #4]
 801266a:	b32c      	cbz	r4, 80126b8 <EwBidiGetTypesAndLevels+0x3e0>
 801266c:	6963      	ldr	r3, [r4, #20]
 801266e:	f8d4 b000 	ldr.w	fp, [r4]
 8012672:	b90b      	cbnz	r3, 8012678 <EwBidiGetTypesAndLevels+0x3a0>
 8012674:	465c      	mov	r4, fp
 8012676:	e7f8      	b.n	801266a <EwBidiGetTypesAndLevels+0x392>
 8012678:	69a3      	ldr	r3, [r4, #24]
 801267a:	b913      	cbnz	r3, 8012682 <EwBidiGetTypesAndLevels+0x3aa>
 801267c:	69e3      	ldr	r3, [r4, #28]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d0f8      	beq.n	8012674 <EwBidiGetTypesAndLevels+0x39c>
 8012682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012684:	2b00      	cmp	r3, #0
 8012686:	ddf5      	ble.n	8012674 <EwBidiGetTypesAndLevels+0x39c>
 8012688:	68e3      	ldr	r3, [r4, #12]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d1f2      	bne.n	8012674 <EwBidiGetTypesAndLevels+0x39c>
 801268e:	68a3      	ldr	r3, [r4, #8]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d1ef      	bne.n	8012674 <EwBidiGetTypesAndLevels+0x39c>
 8012694:	4641      	mov	r1, r8
 8012696:	4620      	mov	r0, r4
 8012698:	f7fb fe20 	bl	800e2dc <EwCanDiscardSurface>
 801269c:	2800      	cmp	r0, #0
 801269e:	d0e9      	beq.n	8012674 <EwBidiGetTypesAndLevels+0x39c>
 80126a0:	68e3      	ldr	r3, [r4, #12]
 80126a2:	f8c4 a014 	str.w	sl, [r4, #20]
 80126a6:	3b01      	subs	r3, #1
 80126a8:	60e3      	str	r3, [r4, #12]
 80126aa:	68a3      	ldr	r3, [r4, #8]
 80126ac:	3b01      	subs	r3, #1
 80126ae:	60a3      	str	r3, [r4, #8]
 80126b0:	4620      	mov	r0, r4
 80126b2:	f7ff ff61 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 80126b6:	2500      	movs	r5, #0
 80126b8:	f108 0801 	add.w	r8, r8, #1
 80126bc:	e7bc      	b.n	8012638 <EwBidiGetTypesAndLevels+0x360>
 80126be:	bf00      	nop
 80126c0:	200001e8 	.word	0x200001e8
 80126c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8012780 <EwBidiGetTypesAndLevels+0x4a8>
 80126cc:	4c2b      	ldr	r4, [pc, #172]	; (801277c <EwBidiGetTypesAndLevels+0x4a4>)
 80126ce:	4606      	mov	r6, r0
 80126d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80126d4:	2700      	movs	r7, #0
 80126d6:	b926      	cbnz	r6, 80126e2 <EwBidiGetTypesAndLevels+0x40a>
 80126d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80126dc:	6823      	ldr	r3, [r4, #0]
 80126de:	429a      	cmp	r2, r3
 80126e0:	dd4a      	ble.n	8012778 <EwBidiGetTypesAndLevels+0x4a0>
 80126e2:	b928      	cbnz	r0, 80126f0 <EwBidiGetTypesAndLevels+0x418>
 80126e4:	4605      	mov	r5, r0
 80126e6:	f8df a094 	ldr.w	sl, [pc, #148]	; 801277c <EwBidiGetTypesAndLevels+0x4a4>
 80126ea:	f04f 0900 	mov.w	r9, #0
 80126ee:	e011      	b.n	8012714 <EwBidiGetTypesAndLevels+0x43c>
 80126f0:	68c3      	ldr	r3, [r0, #12]
 80126f2:	6805      	ldr	r5, [r0, #0]
 80126f4:	b913      	cbnz	r3, 80126fc <EwBidiGetTypesAndLevels+0x424>
 80126f6:	f7ff ff3f 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 80126fa:	3701      	adds	r7, #1
 80126fc:	4628      	mov	r0, r5
 80126fe:	e7ea      	b.n	80126d6 <EwBidiGetTypesAndLevels+0x3fe>
 8012700:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012704:	b996      	cbnz	r6, 801272c <EwBidiGetTypesAndLevels+0x454>
 8012706:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801270a:	f8da 3000 	ldr.w	r3, [sl]
 801270e:	429a      	cmp	r2, r3
 8012710:	dc0c      	bgt.n	801272c <EwBidiGetTypesAndLevels+0x454>
 8012712:	3501      	adds	r5, #1
 8012714:	b92e      	cbnz	r6, 8012722 <EwBidiGetTypesAndLevels+0x44a>
 8012716:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801271a:	f8da 3000 	ldr.w	r3, [sl]
 801271e:	429a      	cmp	r2, r3
 8012720:	dd01      	ble.n	8012726 <EwBidiGetTypesAndLevels+0x44e>
 8012722:	2d03      	cmp	r5, #3
 8012724:	d1ec      	bne.n	8012700 <EwBidiGetTypesAndLevels+0x428>
 8012726:	4638      	mov	r0, r7
 8012728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272c:	2c00      	cmp	r4, #0
 801272e:	d0f0      	beq.n	8012712 <EwBidiGetTypesAndLevels+0x43a>
 8012730:	6963      	ldr	r3, [r4, #20]
 8012732:	f8d4 b000 	ldr.w	fp, [r4]
 8012736:	b1eb      	cbz	r3, 8012774 <EwBidiGetTypesAndLevels+0x49c>
 8012738:	69a3      	ldr	r3, [r4, #24]
 801273a:	b90b      	cbnz	r3, 8012740 <EwBidiGetTypesAndLevels+0x468>
 801273c:	69e3      	ldr	r3, [r4, #28]
 801273e:	b1cb      	cbz	r3, 8012774 <EwBidiGetTypesAndLevels+0x49c>
 8012740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012742:	2b00      	cmp	r3, #0
 8012744:	dd16      	ble.n	8012774 <EwBidiGetTypesAndLevels+0x49c>
 8012746:	68e3      	ldr	r3, [r4, #12]
 8012748:	2b01      	cmp	r3, #1
 801274a:	d113      	bne.n	8012774 <EwBidiGetTypesAndLevels+0x49c>
 801274c:	68a3      	ldr	r3, [r4, #8]
 801274e:	2b01      	cmp	r3, #1
 8012750:	d110      	bne.n	8012774 <EwBidiGetTypesAndLevels+0x49c>
 8012752:	4629      	mov	r1, r5
 8012754:	4620      	mov	r0, r4
 8012756:	f7fb fdc1 	bl	800e2dc <EwCanDiscardSurface>
 801275a:	b158      	cbz	r0, 8012774 <EwBidiGetTypesAndLevels+0x49c>
 801275c:	68e3      	ldr	r3, [r4, #12]
 801275e:	f8c4 9014 	str.w	r9, [r4, #20]
 8012762:	3b01      	subs	r3, #1
 8012764:	60e3      	str	r3, [r4, #12]
 8012766:	68a3      	ldr	r3, [r4, #8]
 8012768:	3b01      	subs	r3, #1
 801276a:	60a3      	str	r3, [r4, #8]
 801276c:	4620      	mov	r0, r4
 801276e:	3701      	adds	r7, #1
 8012770:	f7ff ff02 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 8012774:	465c      	mov	r4, fp
 8012776:	e7c5      	b.n	8012704 <EwBidiGetTypesAndLevels+0x42c>
 8012778:	4635      	mov	r5, r6
 801277a:	e7b4      	b.n	80126e6 <EwBidiGetTypesAndLevels+0x40e>
 801277c:	20000014 	.word	0x20000014
 8012780:	200001e8 	.word	0x200001e8

08012784 <EwDoneGfxCore>:
 8012784:	b510      	push	{r4, lr}
 8012786:	4c29      	ldr	r4, [pc, #164]	; (801282c <EwDoneGfxCore+0xa8>)
 8012788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801278a:	2b00      	cmp	r3, #0
 801278c:	d136      	bne.n	80127fc <EwDoneGfxCore+0x78>
 801278e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012790:	2b00      	cmp	r3, #0
 8012792:	d133      	bne.n	80127fc <EwDoneGfxCore+0x78>
 8012794:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012796:	2b00      	cmp	r3, #0
 8012798:	d130      	bne.n	80127fc <EwDoneGfxCore+0x78>
 801279a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801279c:	b108      	cbz	r0, 80127a2 <EwDoneGfxCore+0x1e>
 801279e:	f7ff fdb1 	bl	8012304 <EwBidiGetTypesAndLevels+0x2c>
 80127a2:	69a0      	ldr	r0, [r4, #24]
 80127a4:	bb68      	cbnz	r0, 8012802 <EwDoneGfxCore+0x7e>
 80127a6:	6820      	ldr	r0, [r4, #0]
 80127a8:	bb70      	cbnz	r0, 8012808 <EwDoneGfxCore+0x84>
 80127aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ac:	bb78      	cbnz	r0, 801280e <EwDoneGfxCore+0x8a>
 80127ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80127b0:	bb80      	cbnz	r0, 8012814 <EwDoneGfxCore+0x90>
 80127b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80127b4:	bb88      	cbnz	r0, 801281a <EwDoneGfxCore+0x96>
 80127b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80127b8:	bb90      	cbnz	r0, 8012820 <EwDoneGfxCore+0x9c>
 80127ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80127bc:	bb98      	cbnz	r0, 8012826 <EwDoneGfxCore+0xa2>
 80127be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80127c0:	b108      	cbz	r0, 80127c6 <EwDoneGfxCore+0x42>
 80127c2:	f016 ffd7 	bl	8029774 <EwFree>
 80127c6:	6920      	ldr	r0, [r4, #16]
 80127c8:	b108      	cbz	r0, 80127ce <EwDoneGfxCore+0x4a>
 80127ca:	f016 ffd3 	bl	8029774 <EwFree>
 80127ce:	6960      	ldr	r0, [r4, #20]
 80127d0:	b108      	cbz	r0, 80127d6 <EwDoneGfxCore+0x52>
 80127d2:	f016 ffcf 	bl	8029774 <EwFree>
 80127d6:	4916      	ldr	r1, [pc, #88]	; (8012830 <EwDoneGfxCore+0xac>)
 80127d8:	68e2      	ldr	r2, [r4, #12]
 80127da:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80127dc:	2300      	movs	r3, #0
 80127de:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80127e2:	6263      	str	r3, [r4, #36]	; 0x24
 80127e4:	6563      	str	r3, [r4, #84]	; 0x54
 80127e6:	680b      	ldr	r3, [r1, #0]
 80127e8:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
 80127ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80127ee:	4343      	muls	r3, r0
 80127f0:	bf48      	it	mi
 80127f2:	3307      	addmi	r3, #7
 80127f4:	eba2 03e3 	sub.w	r3, r2, r3, asr #3
 80127f8:	600b      	str	r3, [r1, #0]
 80127fa:	bd10      	pop	{r4, pc}
 80127fc:	f7ff fe8c 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8012800:	e7c2      	b.n	8012788 <EwDoneGfxCore+0x4>
 8012802:	f7ff fe10 	bl	8012426 <EwBidiGetTypesAndLevels+0x14e>
 8012806:	e7cc      	b.n	80127a2 <EwDoneGfxCore+0x1e>
 8012808:	f7ff feb6 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 801280c:	e7cb      	b.n	80127a6 <EwDoneGfxCore+0x22>
 801280e:	f7ff fe71 	bl	80124f4 <EwBidiGetTypesAndLevels+0x21c>
 8012812:	e7ca      	b.n	80127aa <EwDoneGfxCore+0x26>
 8012814:	f7ff fe6e 	bl	80124f4 <EwBidiGetTypesAndLevels+0x21c>
 8012818:	e7c9      	b.n	80127ae <EwDoneGfxCore+0x2a>
 801281a:	f7ff fe6b 	bl	80124f4 <EwBidiGetTypesAndLevels+0x21c>
 801281e:	e7c8      	b.n	80127b2 <EwDoneGfxCore+0x2e>
 8012820:	f7ff fe68 	bl	80124f4 <EwBidiGetTypesAndLevels+0x21c>
 8012824:	e7c7      	b.n	80127b6 <EwDoneGfxCore+0x32>
 8012826:	f7ff fe65 	bl	80124f4 <EwBidiGetTypesAndLevels+0x21c>
 801282a:	e7c6      	b.n	80127ba <EwDoneGfxCore+0x36>
 801282c:	200001e8 	.word	0x200001e8
 8012830:	200002e8 	.word	0x200002e8

08012834 <EwCreateSurface>:
 8012834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012838:	4699      	mov	r9, r3
 801283a:	1c43      	adds	r3, r0, #1
 801283c:	4605      	mov	r5, r0
 801283e:	460f      	mov	r7, r1
 8012840:	4690      	mov	r8, r2
 8012842:	d026      	beq.n	8012892 <EwCreateSurface+0x5e>
 8012844:	f7ff fe68 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8012848:	2000      	movs	r0, #0
 801284a:	f7ff ff3b 	bl	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 801284e:	203c      	movs	r0, #60	; 0x3c
 8012850:	f016 ff8e 	bl	8029770 <EwAlloc>
 8012854:	4604      	mov	r4, r0
 8012856:	bba8      	cbnz	r0, 80128c4 <EwCreateSurface+0x90>
 8012858:	2101      	movs	r1, #1
 801285a:	4608      	mov	r0, r1
 801285c:	f7ff fec2 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 8012860:	2800      	cmp	r0, #0
 8012862:	d1f4      	bne.n	801284e <EwCreateSurface+0x1a>
 8012864:	2025      	movs	r0, #37	; 0x25
 8012866:	f007 f9cf 	bl	8019c08 <EwImmediateReclaimMemory>
 801286a:	2800      	cmp	r0, #0
 801286c:	d1ef      	bne.n	801284e <EwCreateSurface+0x1a>
 801286e:	2025      	movs	r0, #37	; 0x25
 8012870:	f006 fa1a 	bl	8018ca8 <EwError>
 8012874:	e06e      	b.n	8012954 <EwCreateSurface+0x120>
 8012876:	2d02      	cmp	r5, #2
 8012878:	d029      	beq.n	80128ce <EwCreateSurface+0x9a>
 801287a:	2d01      	cmp	r5, #1
 801287c:	d027      	beq.n	80128ce <EwCreateSurface+0x9a>
 801287e:	2d03      	cmp	r5, #3
 8012880:	d025      	beq.n	80128ce <EwCreateSurface+0x9a>
 8012882:	2100      	movs	r1, #0
 8012884:	2001      	movs	r0, #1
 8012886:	f7ff fead 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 801288a:	b9f0      	cbnz	r0, 80128ca <EwCreateSurface+0x96>
 801288c:	4620      	mov	r0, r4
 801288e:	f016 ff71 	bl	8029774 <EwFree>
 8012892:	2400      	movs	r4, #0
 8012894:	e05e      	b.n	8012954 <EwCreateSurface+0x120>
 8012896:	2d02      	cmp	r5, #2
 8012898:	d104      	bne.n	80128a4 <EwCreateSurface+0x70>
 801289a:	4641      	mov	r1, r8
 801289c:	4638      	mov	r0, r7
 801289e:	f001 fbb4 	bl	801400a <EwGetAlpha8SurfaceMemSize>
 80128a2:	e022      	b.n	80128ea <EwCreateSurface+0xb6>
 80128a4:	2d01      	cmp	r5, #1
 80128a6:	d104      	bne.n	80128b2 <EwCreateSurface+0x7e>
 80128a8:	4641      	mov	r1, r8
 80128aa:	4638      	mov	r0, r7
 80128ac:	f001 fb7d 	bl	8013faa <EwGetIndex8SurfaceMemSize>
 80128b0:	e01b      	b.n	80128ea <EwCreateSurface+0xb6>
 80128b2:	2d03      	cmp	r5, #3
 80128b4:	f04f 0000 	mov.w	r0, #0
 80128b8:	d117      	bne.n	80128ea <EwCreateSurface+0xb6>
 80128ba:	4641      	mov	r1, r8
 80128bc:	4638      	mov	r0, r7
 80128be:	f7ed fe44 	bl	800054a <EwGetRGB565SurfaceMemSize>
 80128c2:	e012      	b.n	80128ea <EwCreateSurface+0xb6>
 80128c4:	213c      	movs	r1, #60	; 0x3c
 80128c6:	f016 ff7b 	bl	80297c0 <EwZero>
 80128ca:	2d00      	cmp	r5, #0
 80128cc:	d1d3      	bne.n	8012876 <EwCreateSurface+0x42>
 80128ce:	4642      	mov	r2, r8
 80128d0:	4639      	mov	r1, r7
 80128d2:	4628      	mov	r0, r5
 80128d4:	f016 fbb2 	bl	802903c <GfxCreateSurface>
 80128d8:	4606      	mov	r6, r0
 80128da:	2800      	cmp	r0, #0
 80128dc:	d0d1      	beq.n	8012882 <EwCreateSurface+0x4e>
 80128de:	2d00      	cmp	r5, #0
 80128e0:	d1d9      	bne.n	8012896 <EwCreateSurface+0x62>
 80128e2:	4641      	mov	r1, r8
 80128e4:	4638      	mov	r0, r7
 80128e6:	f7ed fd32 	bl	800034e <EwGetNativeSurfaceMemSize>
 80128ea:	9b08      	ldr	r3, [sp, #32]
 80128ec:	61a3      	str	r3, [r4, #24]
 80128ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f0:	61e3      	str	r3, [r4, #28]
 80128f2:	2301      	movs	r3, #1
 80128f4:	62a0      	str	r0, [r4, #40]	; 0x28
 80128f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128f8:	4620      	mov	r0, r4
 80128fa:	8425      	strh	r5, [r4, #32]
 80128fc:	8467      	strh	r7, [r4, #34]	; 0x22
 80128fe:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
 8012902:	63a6      	str	r6, [r4, #56]	; 0x38
 8012904:	f7ff fcfe 	bl	8012304 <EwBidiGetTypesAndLevels+0x2c>
 8012908:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 801290c:	3202      	adds	r2, #2
 801290e:	3302      	adds	r3, #2
 8012910:	60a2      	str	r2, [r4, #8]
 8012912:	60e3      	str	r3, [r4, #12]
 8012914:	f8c4 9014 	str.w	r9, [r4, #20]
 8012918:	2000      	movs	r0, #0
 801291a:	f7ff fed3 	bl	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 801291e:	68e3      	ldr	r3, [r4, #12]
 8012920:	490e      	ldr	r1, [pc, #56]	; (801295c <EwCreateSurface+0x128>)
 8012922:	3b01      	subs	r3, #1
 8012924:	60e3      	str	r3, [r4, #12]
 8012926:	68a3      	ldr	r3, [r4, #8]
 8012928:	3b01      	subs	r3, #1
 801292a:	60a3      	str	r3, [r4, #8]
 801292c:	680b      	ldr	r3, [r1, #0]
 801292e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012932:	4b0b      	ldr	r3, [pc, #44]	; (8012960 <EwCreateSurface+0x12c>)
 8012934:	600a      	str	r2, [r1, #0]
 8012936:	6819      	ldr	r1, [r3, #0]
 8012938:	428a      	cmp	r2, r1
 801293a:	bfc8      	it	gt
 801293c:	601a      	strgt	r2, [r3, #0]
 801293e:	4909      	ldr	r1, [pc, #36]	; (8012964 <EwCreateSurface+0x130>)
 8012940:	4b09      	ldr	r3, [pc, #36]	; (8012968 <EwCreateSurface+0x134>)
 8012942:	6809      	ldr	r1, [r1, #0]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	440b      	add	r3, r1
 8012948:	4413      	add	r3, r2
 801294a:	4a08      	ldr	r2, [pc, #32]	; (801296c <EwCreateSurface+0x138>)
 801294c:	6811      	ldr	r1, [r2, #0]
 801294e:	428b      	cmp	r3, r1
 8012950:	dd00      	ble.n	8012954 <EwCreateSurface+0x120>
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	4620      	mov	r0, r4
 8012956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801295a:	bf00      	nop
 801295c:	200002e8 	.word	0x200002e8
 8012960:	20000304 	.word	0x20000304
 8012964:	200002e4 	.word	0x200002e4
 8012968:	200002d8 	.word	0x200002d8
 801296c:	200002ec 	.word	0x200002ec

08012970 <EwInitGfxCore>:
 8012970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012972:	4c72      	ldr	r4, [pc, #456]	; (8012b3c <EwInitGfxCore+0x1cc>)
 8012974:	4d72      	ldr	r5, [pc, #456]	; (8012b40 <EwInitGfxCore+0x1d0>)
 8012976:	2300      	movs	r3, #0
 8012978:	e9c4 3300 	strd	r3, r3, [r4]
 801297c:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8012980:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8012984:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8012988:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801298c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8012990:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8012994:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8012998:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801299c:	60a3      	str	r3, [r4, #8]
 801299e:	6563      	str	r3, [r4, #84]	; 0x54
 80129a0:	6263      	str	r3, [r4, #36]	; 0x24
 80129a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80129a4:	686b      	ldr	r3, [r5, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	dc16      	bgt.n	80129d8 <EwInitGfxCore+0x68>
 80129aa:	2301      	movs	r3, #1
 80129ac:	606b      	str	r3, [r5, #4]
 80129ae:	68ab      	ldr	r3, [r5, #8]
 80129b0:	4a64      	ldr	r2, [pc, #400]	; (8012b44 <EwInitGfxCore+0x1d4>)
 80129b2:	2b1f      	cmp	r3, #31
 80129b4:	bfdc      	itt	le
 80129b6:	2320      	movle	r3, #32
 80129b8:	60ab      	strle	r3, [r5, #8]
 80129ba:	68eb      	ldr	r3, [r5, #12]
 80129bc:	2b1f      	cmp	r3, #31
 80129be:	bfdc      	itt	le
 80129c0:	2320      	movle	r3, #32
 80129c2:	60eb      	strle	r3, [r5, #12]
 80129c4:	686b      	ldr	r3, [r5, #4]
 80129c6:	3308      	adds	r3, #8
 80129c8:	019b      	lsls	r3, r3, #6
 80129ca:	4293      	cmp	r3, r2
 80129cc:	6323      	str	r3, [r4, #48]	; 0x30
 80129ce:	dd09      	ble.n	80129e4 <EwInitGfxCore+0x74>
 80129d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129d4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80129d6:	e010      	b.n	80129fa <EwInitGfxCore+0x8a>
 80129d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80129dc:	dde7      	ble.n	80129ae <EwInitGfxCore+0x3e>
 80129de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129e2:	e7e3      	b.n	80129ac <EwInitGfxCore+0x3c>
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	461a      	mov	r2, r3
 80129e8:	bfb8      	it	lt
 80129ea:	f103 020f 	addlt.w	r2, r3, #15
 80129ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129f2:	ea4f 1222 	mov.w	r2, r2, asr #4
 80129f6:	db4a      	blt.n	8012a8e <EwInitGfxCore+0x11e>
 80129f8:	66e2      	str	r2, [r4, #108]	; 0x6c
 80129fa:	68eb      	ldr	r3, [r5, #12]
 80129fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a00:	dc47      	bgt.n	8012a92 <EwInitGfxCore+0x122>
 8012a02:	2220      	movs	r2, #32
 8012a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8012a06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012a08:	68a8      	ldr	r0, [r5, #8]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	3b01      	subs	r3, #1
 8012a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a12:	fb90 f0f3 	sdiv	r0, r0, r3
 8012a16:	4606      	mov	r6, r0
 8012a18:	4356      	muls	r6, r2
 8012a1a:	6223      	str	r3, [r4, #32]
 8012a1c:	fb03 f202 	mul.w	r2, r3, r2
 8012a20:	fb00 f303 	mul.w	r3, r0, r3
 8012a24:	60ab      	str	r3, [r5, #8]
 8012a26:	fb02 f303 	mul.w	r3, r2, r3
 8012a2a:	bf48      	it	mi
 8012a2c:	3607      	addmi	r6, #7
 8012a2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012a32:	6620      	str	r0, [r4, #96]	; 0x60
 8012a34:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8012a38:	60ea      	str	r2, [r5, #12]
 8012a3a:	db36      	blt.n	8012aaa <EwInitGfxCore+0x13a>
 8012a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a40:	60e3      	str	r3, [r4, #12]
 8012a42:	68e0      	ldr	r0, [r4, #12]
 8012a44:	0080      	lsls	r0, r0, #2
 8012a46:	f016 fe93 	bl	8029770 <EwAlloc>
 8012a4a:	6120      	str	r0, [r4, #16]
 8012a4c:	68e0      	ldr	r0, [r4, #12]
 8012a4e:	0080      	lsls	r0, r0, #2
 8012a50:	f016 fe8e 	bl	8029770 <EwAlloc>
 8012a54:	6160      	str	r0, [r4, #20]
 8012a56:	4630      	mov	r0, r6
 8012a58:	f016 fe8a 	bl	8029770 <EwAlloc>
 8012a5c:	6a21      	ldr	r1, [r4, #32]
 8012a5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012a60:	6260      	str	r0, [r4, #36]	; 0x24
 8012a62:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012a64:	2300      	movs	r3, #0
 8012a66:	434a      	muls	r2, r1
 8012a68:	e9cd 3300 	strd	r3, r3, [sp]
 8012a6c:	4341      	muls	r1, r0
 8012a6e:	2002      	movs	r0, #2
 8012a70:	f7ff fee0 	bl	8012834 <EwCreateSurface>
 8012a74:	6922      	ldr	r2, [r4, #16]
 8012a76:	6560      	str	r0, [r4, #84]	; 0x54
 8012a78:	b122      	cbz	r2, 8012a84 <EwInitGfxCore+0x114>
 8012a7a:	6962      	ldr	r2, [r4, #20]
 8012a7c:	b112      	cbz	r2, 8012a84 <EwInitGfxCore+0x114>
 8012a7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012a80:	b102      	cbz	r2, 8012a84 <EwInitGfxCore+0x114>
 8012a82:	bb88      	cbnz	r0, 8012ae8 <EwInitGfxCore+0x178>
 8012a84:	f7ff fe7e 	bl	8012784 <EwDoneGfxCore>
 8012a88:	2000      	movs	r0, #0
 8012a8a:	b002      	add	sp, #8
 8012a8c:	bd70      	pop	{r4, r5, r6, pc}
 8012a8e:	2380      	movs	r3, #128	; 0x80
 8012a90:	e7a0      	b.n	80129d4 <EwInitGfxCore+0x64>
 8012a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a96:	dc01      	bgt.n	8012a9c <EwInitGfxCore+0x12c>
 8012a98:	2240      	movs	r2, #64	; 0x40
 8012a9a:	e7b3      	b.n	8012a04 <EwInitGfxCore+0x94>
 8012a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012aa0:	bfd4      	ite	le
 8012aa2:	2280      	movle	r2, #128	; 0x80
 8012aa4:	f44f 7280 	movgt.w	r2, #256	; 0x100
 8012aa8:	e7ac      	b.n	8012a04 <EwInitGfxCore+0x94>
 8012aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012aae:	db01      	blt.n	8012ab4 <EwInitGfxCore+0x144>
 8012ab0:	2380      	movs	r3, #128	; 0x80
 8012ab2:	e7c5      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012ab8:	db01      	blt.n	8012abe <EwInitGfxCore+0x14e>
 8012aba:	2340      	movs	r3, #64	; 0x40
 8012abc:	e7c0      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ac2:	db01      	blt.n	8012ac8 <EwInitGfxCore+0x158>
 8012ac4:	2320      	movs	r3, #32
 8012ac6:	e7bb      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012acc:	db01      	blt.n	8012ad2 <EwInitGfxCore+0x162>
 8012ace:	2310      	movs	r3, #16
 8012ad0:	e7b6      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ad6:	db01      	blt.n	8012adc <EwInitGfxCore+0x16c>
 8012ad8:	2308      	movs	r3, #8
 8012ada:	e7b1      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ae0:	bfac      	ite	ge
 8012ae2:	2304      	movge	r3, #4
 8012ae4:	2302      	movlt	r3, #2
 8012ae6:	e7ab      	b.n	8012a40 <EwInitGfxCore+0xd0>
 8012ae8:	f7ff fc1e 	bl	8012328 <EwBidiGetTypesAndLevels+0x50>
 8012aec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012aee:	4631      	mov	r1, r6
 8012af0:	f016 fe66 	bl	80297c0 <EwZero>
 8012af4:	68e1      	ldr	r1, [r4, #12]
 8012af6:	6920      	ldr	r0, [r4, #16]
 8012af8:	0089      	lsls	r1, r1, #2
 8012afa:	f016 fe61 	bl	80297c0 <EwZero>
 8012afe:	68e1      	ldr	r1, [r4, #12]
 8012b00:	6960      	ldr	r0, [r4, #20]
 8012b02:	0089      	lsls	r1, r1, #2
 8012b04:	f016 fe5c 	bl	80297c0 <EwZero>
 8012b08:	4b0f      	ldr	r3, [pc, #60]	; (8012b48 <EwInitGfxCore+0x1d8>)
 8012b0a:	68e2      	ldr	r2, [r4, #12]
 8012b0c:	6819      	ldr	r1, [r3, #0]
 8012b0e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012b12:	4431      	add	r1, r6
 8012b14:	6019      	str	r1, [r3, #0]
 8012b16:	4b0d      	ldr	r3, [pc, #52]	; (8012b4c <EwInitGfxCore+0x1dc>)
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	4291      	cmp	r1, r2
 8012b1c:	bfc8      	it	gt
 8012b1e:	6019      	strgt	r1, [r3, #0]
 8012b20:	4a0b      	ldr	r2, [pc, #44]	; (8012b50 <EwInitGfxCore+0x1e0>)
 8012b22:	4b0c      	ldr	r3, [pc, #48]	; (8012b54 <EwInitGfxCore+0x1e4>)
 8012b24:	6812      	ldr	r2, [r2, #0]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4413      	add	r3, r2
 8012b2a:	4419      	add	r1, r3
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <EwInitGfxCore+0x1e8>)
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	4291      	cmp	r1, r2
 8012b32:	bfc8      	it	gt
 8012b34:	6019      	strgt	r1, [r3, #0]
 8012b36:	2001      	movs	r0, #1
 8012b38:	e7a7      	b.n	8012a8a <EwInitGfxCore+0x11a>
 8012b3a:	bf00      	nop
 8012b3c:	200001e8 	.word	0x200001e8
 8012b40:	20000014 	.word	0x20000014
 8012b44:	0002000f 	.word	0x0002000f
 8012b48:	200002e8 	.word	0x200002e8
 8012b4c:	20000304 	.word	0x20000304
 8012b50:	200002e4 	.word	0x200002e4
 8012b54:	200002d8 	.word	0x200002d8
 8012b58:	200002ec 	.word	0x200002ec

08012b5c <EwCreateConstSurface>:
 8012b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b60:	4699      	mov	r9, r3
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	e9dd b80b 	ldrd	fp, r8, [sp, #44]	; 0x2c
 8012b68:	4605      	mov	r5, r0
 8012b6a:	460e      	mov	r6, r1
 8012b6c:	4617      	mov	r7, r2
 8012b6e:	d026      	beq.n	8012bbe <EwCreateConstSurface+0x62>
 8012b70:	f7ff fcd2 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8012b74:	2000      	movs	r0, #0
 8012b76:	f7ff fda5 	bl	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 8012b7a:	203c      	movs	r0, #60	; 0x3c
 8012b7c:	f016 fdf8 	bl	8029770 <EwAlloc>
 8012b80:	4604      	mov	r4, r0
 8012b82:	b9f0      	cbnz	r0, 8012bc2 <EwCreateConstSurface+0x66>
 8012b84:	2101      	movs	r1, #1
 8012b86:	4608      	mov	r0, r1
 8012b88:	f7ff fd2c 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d1f4      	bne.n	8012b7a <EwCreateConstSurface+0x1e>
 8012b90:	2026      	movs	r0, #38	; 0x26
 8012b92:	f007 f839 	bl	8019c08 <EwImmediateReclaimMemory>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d1ef      	bne.n	8012b7a <EwCreateConstSurface+0x1e>
 8012b9a:	2026      	movs	r0, #38	; 0x26
 8012b9c:	f006 f884 	bl	8018ca8 <EwError>
 8012ba0:	e053      	b.n	8012c4a <EwCreateConstSurface+0xee>
 8012ba2:	2d02      	cmp	r5, #2
 8012ba4:	d012      	beq.n	8012bcc <EwCreateConstSurface+0x70>
 8012ba6:	2d01      	cmp	r5, #1
 8012ba8:	d010      	beq.n	8012bcc <EwCreateConstSurface+0x70>
 8012baa:	2d03      	cmp	r5, #3
 8012bac:	d00e      	beq.n	8012bcc <EwCreateConstSurface+0x70>
 8012bae:	2100      	movs	r1, #0
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	f7ff fd17 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 8012bb6:	b938      	cbnz	r0, 8012bc8 <EwCreateConstSurface+0x6c>
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f016 fddb 	bl	8029774 <EwFree>
 8012bbe:	2400      	movs	r4, #0
 8012bc0:	e043      	b.n	8012c4a <EwCreateConstSurface+0xee>
 8012bc2:	213c      	movs	r1, #60	; 0x3c
 8012bc4:	f016 fdfc 	bl	80297c0 <EwZero>
 8012bc8:	2d00      	cmp	r5, #0
 8012bca:	d1ea      	bne.n	8012ba2 <EwCreateConstSurface+0x46>
 8012bcc:	4643      	mov	r3, r8
 8012bce:	463a      	mov	r2, r7
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f016 fa9e 	bl	8029114 <GfxCreateConstSurface>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d0e8      	beq.n	8012bae <EwCreateConstSurface+0x52>
 8012bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bde:	8425      	strh	r5, [r4, #32]
 8012be0:	e9c4 3b06 	strd	r3, fp, [r4, #24]
 8012be4:	2500      	movs	r5, #0
 8012be6:	ea53 030b 	orrs.w	r3, r3, fp
 8012bea:	bf14      	ite	ne
 8012bec:	2301      	movne	r3, #1
 8012bee:	462b      	moveq	r3, r5
 8012bf0:	63a0      	str	r0, [r4, #56]	; 0x38
 8012bf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	8466      	strh	r6, [r4, #34]	; 0x22
 8012bf8:	84a7      	strh	r7, [r4, #36]	; 0x24
 8012bfa:	62a5      	str	r5, [r4, #40]	; 0x28
 8012bfc:	f7ff fb82 	bl	8012304 <EwBidiGetTypesAndLevels+0x2c>
 8012c00:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8012c04:	3202      	adds	r2, #2
 8012c06:	3302      	adds	r3, #2
 8012c08:	60a2      	str	r2, [r4, #8]
 8012c0a:	60e3      	str	r3, [r4, #12]
 8012c0c:	f8c4 9014 	str.w	r9, [r4, #20]
 8012c10:	4628      	mov	r0, r5
 8012c12:	f7ff fd57 	bl	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 8012c16:	68e3      	ldr	r3, [r4, #12]
 8012c18:	4a0d      	ldr	r2, [pc, #52]	; (8012c50 <EwCreateConstSurface+0xf4>)
 8012c1a:	3b01      	subs	r3, #1
 8012c1c:	60e3      	str	r3, [r4, #12]
 8012c1e:	68a3      	ldr	r3, [r4, #8]
 8012c20:	3b01      	subs	r3, #1
 8012c22:	60a3      	str	r3, [r4, #8]
 8012c24:	6813      	ldr	r3, [r2, #0]
 8012c26:	333c      	adds	r3, #60	; 0x3c
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	4a0a      	ldr	r2, [pc, #40]	; (8012c54 <EwCreateConstSurface+0xf8>)
 8012c2c:	6811      	ldr	r1, [r2, #0]
 8012c2e:	428b      	cmp	r3, r1
 8012c30:	dd00      	ble.n	8012c34 <EwCreateConstSurface+0xd8>
 8012c32:	6013      	str	r3, [r2, #0]
 8012c34:	4a08      	ldr	r2, [pc, #32]	; (8012c58 <EwCreateConstSurface+0xfc>)
 8012c36:	4909      	ldr	r1, [pc, #36]	; (8012c5c <EwCreateConstSurface+0x100>)
 8012c38:	6812      	ldr	r2, [r2, #0]
 8012c3a:	6809      	ldr	r1, [r1, #0]
 8012c3c:	440a      	add	r2, r1
 8012c3e:	4413      	add	r3, r2
 8012c40:	4a07      	ldr	r2, [pc, #28]	; (8012c60 <EwCreateConstSurface+0x104>)
 8012c42:	6811      	ldr	r1, [r2, #0]
 8012c44:	428b      	cmp	r3, r1
 8012c46:	dd00      	ble.n	8012c4a <EwCreateConstSurface+0xee>
 8012c48:	6013      	str	r3, [r2, #0]
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c50:	200002e8 	.word	0x200002e8
 8012c54:	20000304 	.word	0x20000304
 8012c58:	200002d8 	.word	0x200002d8
 8012c5c:	200002e4 	.word	0x200002e4
 8012c60:	200002ec 	.word	0x200002ec

08012c64 <EwFindSurface>:
 8012c64:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8012c68:	461e      	mov	r6, r3
 8012c6a:	1c43      	adds	r3, r0, #1
 8012c6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012c6e:	4605      	mov	r5, r0
 8012c70:	4689      	mov	r9, r1
 8012c72:	4692      	mov	sl, r2
 8012c74:	d103      	bne.n	8012c7e <EwFindSurface+0x1a>
 8012c76:	2400      	movs	r4, #0
 8012c78:	4620      	mov	r0, r4
 8012c7a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
 8012c7e:	4b18      	ldr	r3, [pc, #96]	; (8012ce0 <EwFindSurface+0x7c>)
 8012c80:	681c      	ldr	r4, [r3, #0]
 8012c82:	f7ff fc49 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8012c86:	2000      	movs	r0, #0
 8012c88:	b1d4      	cbz	r4, 8012cc0 <EwFindSurface+0x5c>
 8012c8a:	68a3      	ldr	r3, [r4, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	dc15      	bgt.n	8012cbc <EwFindSurface+0x58>
 8012c90:	69a3      	ldr	r3, [r4, #24]
 8012c92:	9a08      	ldr	r2, [sp, #32]
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d111      	bne.n	8012cbc <EwFindSurface+0x58>
 8012c98:	69e3      	ldr	r3, [r4, #28]
 8012c9a:	42bb      	cmp	r3, r7
 8012c9c:	d10e      	bne.n	8012cbc <EwFindSurface+0x58>
 8012c9e:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8012ca2:	42ab      	cmp	r3, r5
 8012ca4:	d10a      	bne.n	8012cbc <EwFindSurface+0x58>
 8012ca6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8012caa:	454b      	cmp	r3, r9
 8012cac:	d106      	bne.n	8012cbc <EwFindSurface+0x58>
 8012cae:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8012cb2:	4553      	cmp	r3, sl
 8012cb4:	d102      	bne.n	8012cbc <EwFindSurface+0x58>
 8012cb6:	68e3      	ldr	r3, [r4, #12]
 8012cb8:	b12b      	cbz	r3, 8012cc6 <EwFindSurface+0x62>
 8012cba:	4620      	mov	r0, r4
 8012cbc:	6864      	ldr	r4, [r4, #4]
 8012cbe:	e7e3      	b.n	8012c88 <EwFindSurface+0x24>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d0d8      	beq.n	8012c76 <EwFindSurface+0x12>
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f7ff fb2e 	bl	8012328 <EwBidiGetTypesAndLevels+0x50>
 8012ccc:	f7ff fb1a 	bl	8012304 <EwBidiGetTypesAndLevels+0x2c>
 8012cd0:	68a3      	ldr	r3, [r4, #8]
 8012cd2:	6166      	str	r6, [r4, #20]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	60a3      	str	r3, [r4, #8]
 8012cd8:	68e3      	ldr	r3, [r4, #12]
 8012cda:	3301      	adds	r3, #1
 8012cdc:	60e3      	str	r3, [r4, #12]
 8012cde:	e7cb      	b.n	8012c78 <EwFindSurface+0x14>
 8012ce0:	200001e8 	.word	0x200001e8

08012ce4 <EwFreeSurface>:
 8012ce4:	6883      	ldr	r3, [r0, #8]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	b510      	push	{r4, lr}
 8012cea:	dd14      	ble.n	8012d16 <EwFreeSurface+0x32>
 8012cec:	3b01      	subs	r3, #1
 8012cee:	6083      	str	r3, [r0, #8]
 8012cf0:	68c3      	ldr	r3, [r0, #12]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	60c3      	str	r3, [r0, #12]
 8012cf8:	6142      	str	r2, [r0, #20]
 8012cfa:	f7ff fb15 	bl	8012328 <EwBidiGetTypesAndLevels+0x50>
 8012cfe:	f7ff fb01 	bl	8012304 <EwBidiGetTypesAndLevels+0x2c>
 8012d02:	68c3      	ldr	r3, [r0, #12]
 8012d04:	b91b      	cbnz	r3, 8012d0e <EwFreeSurface+0x2a>
 8012d06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012d08:	b90b      	cbnz	r3, 8012d0e <EwFreeSurface+0x2a>
 8012d0a:	f7ff fc35 	bl	8012578 <EwBidiGetTypesAndLevels+0x2a0>
 8012d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d12:	2000      	movs	r0, #0
 8012d14:	e4d6      	b.n	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 8012d16:	bd10      	pop	{r4, pc}

08012d18 <EwUnlockSurface>:
 8012d18:	b530      	push	{r4, r5, lr}
 8012d1a:	6883      	ldr	r3, [r0, #8]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	b087      	sub	sp, #28
 8012d20:	4605      	mov	r5, r0
 8012d22:	460c      	mov	r4, r1
 8012d24:	f340 808d 	ble.w	8012e42 <EwUnlockSurface+0x12a>
 8012d28:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	d115      	bne.n	8012d5c <EwUnlockSurface+0x44>
 8012d30:	2300      	movs	r3, #0
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
 8012d36:	9302      	str	r3, [sp, #8]
 8012d38:	f002 0202 	and.w	r2, r2, #2
 8012d3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d40:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8012d44:	9301      	str	r3, [sp, #4]
 8012d46:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 8012d50:	f9b1 201c 	ldrsh.w	r2, [r1, #28]
 8012d54:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012d56:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012d58:	f016 fa8a 	bl	8029270 <GfxUnlockSurface>
 8012d5c:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8012d60:	b9a3      	cbnz	r3, 8012d8c <EwUnlockSurface+0x74>
 8012d62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8012d64:	9305      	str	r3, [sp, #20]
 8012d66:	f002 0202 	and.w	r2, r2, #2
 8012d6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d6e:	9302      	str	r3, [sp, #8]
 8012d70:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8012d74:	9301      	str	r3, [sp, #4]
 8012d76:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8012d80:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8012d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012d86:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012d88:	f016 fa72 	bl	8029270 <GfxUnlockSurface>
 8012d8c:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8012d90:	2b02      	cmp	r3, #2
 8012d92:	d115      	bne.n	8012dc0 <EwUnlockSurface+0xa8>
 8012d94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8012d96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012d98:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f002 0202 	and.w	r2, r2, #2
 8012da0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012da4:	9305      	str	r3, [sp, #20]
 8012da6:	9302      	str	r3, [sp, #8]
 8012da8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8012dac:	9301      	str	r3, [sp, #4]
 8012dae:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8012db8:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8012dbc:	f016 fa58 	bl	8029270 <GfxUnlockSurface>
 8012dc0:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d11a      	bne.n	8012dfe <EwUnlockSurface+0xe6>
 8012dc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8012dca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012dcc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012dce:	f003 0208 	and.w	r2, r3, #8
 8012dd2:	f003 0302 	and.w	r3, r3, #2
 8012dd6:	9304      	str	r3, [sp, #16]
 8012dd8:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 8012ddc:	9303      	str	r3, [sp, #12]
 8012dde:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8012de2:	9302      	str	r3, [sp, #8]
 8012de4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8012dee:	9205      	str	r2, [sp, #20]
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8012df6:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8012dfa:	f016 fa39 	bl	8029270 <GfxUnlockSurface>
 8012dfe:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	d115      	bne.n	8012e32 <EwUnlockSurface+0x11a>
 8012e06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8012e08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012e0a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f002 0202 	and.w	r2, r2, #2
 8012e12:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e16:	9305      	str	r3, [sp, #20]
 8012e18:	9302      	str	r3, [sp, #8]
 8012e1a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8012e2a:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8012e2e:	f016 fa1f 	bl	8029270 <GfxUnlockSurface>
 8012e32:	2300      	movs	r3, #0
 8012e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e36:	68ab      	ldr	r3, [r5, #8]
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	60ab      	str	r3, [r5, #8]
 8012e3c:	68eb      	ldr	r3, [r5, #12]
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	60eb      	str	r3, [r5, #12]
 8012e42:	b007      	add	sp, #28
 8012e44:	bd30      	pop	{r4, r5, pc}

08012e46 <EwCreateGlyph>:
 8012e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8013080 <EwCreateGlyph+0x23a>
 8012e4e:	b08f      	sub	sp, #60	; 0x3c
 8012e50:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
 8012e54:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8012e58:	185f      	adds	r7, r3, r1
 8012e5a:	181d      	adds	r5, r3, r0
 8012e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e60:	3f01      	subs	r7, #1
 8012e62:	3d01      	subs	r5, #1
 8012e64:	fb97 f7f3 	sdiv	r7, r7, r3
 8012e68:	fb95 f5f3 	sdiv	r5, r5, r3
 8012e6c:	f7ff fb54 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8012e70:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8012e74:	42bb      	cmp	r3, r7
 8012e76:	da05      	bge.n	8012e84 <EwCreateGlyph+0x3e>
 8012e78:	f04f 0a00 	mov.w	sl, #0
 8012e7c:	4650      	mov	r0, sl
 8012e7e:	b00f      	add	sp, #60	; 0x3c
 8012e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e84:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8012e88:	42ab      	cmp	r3, r5
 8012e8a:	dbf5      	blt.n	8012e78 <EwCreateGlyph+0x32>
 8012e8c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8012e90:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	eba2 0205 	sub.w	r2, r2, r5
 8012e9a:	bfb8      	it	lt
 8012e9c:	331f      	addlt	r3, #31
 8012e9e:	115b      	asrs	r3, r3, #5
 8012ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8012ea2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8012ea6:	9206      	str	r2, [sp, #24]
 8012ea8:	009a      	lsls	r2, r3, #2
 8012eaa:	9204      	str	r2, [sp, #16]
 8012eac:	9a06      	ldr	r2, [sp, #24]
 8012eae:	f04f 0c00 	mov.w	ip, #0
 8012eb2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8012eb6:	4666      	mov	r6, ip
 8012eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012eba:	4296      	cmp	r6, r2
 8012ebc:	f300 80cb 	bgt.w	8013056 <EwCreateGlyph+0x210>
 8012ec0:	9a06      	ldr	r2, [sp, #24]
 8012ec2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8012ec6:	9207      	str	r2, [sp, #28]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	9201      	str	r2, [sp, #4]
 8012ecc:	19aa      	adds	r2, r5, r6
 8012ece:	46ce      	mov	lr, r9
 8012ed0:	920d      	str	r2, [sp, #52]	; 0x34
 8012ed2:	9a01      	ldr	r2, [sp, #4]
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	dc04      	bgt.n	8012ee2 <EwCreateGlyph+0x9c>
 8012ed8:	9a04      	ldr	r2, [sp, #16]
 8012eda:	3601      	adds	r6, #1
 8012edc:	4491      	add	r9, r2
 8012ede:	449c      	add	ip, r3
 8012ee0:	e7ea      	b.n	8012eb8 <EwCreateGlyph+0x72>
 8012ee2:	4a66      	ldr	r2, [pc, #408]	; (801307c <EwCreateGlyph+0x236>)
 8012ee4:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012ee8:	9205      	str	r2, [sp, #20]
 8012eea:	9a07      	ldr	r2, [sp, #28]
 8012eec:	4611      	mov	r1, r2
 8012eee:	f1c7 001f 	rsb	r0, r7, #31
 8012ef2:	f851 2b04 	ldr.w	r2, [r1], #4
 8012ef6:	9107      	str	r1, [sp, #28]
 8012ef8:	9905      	ldr	r1, [sp, #20]
 8012efa:	9208      	str	r2, [sp, #32]
 8012efc:	9a08      	ldr	r2, [sp, #32]
 8012efe:	1c44      	adds	r4, r0, #1
 8012f00:	ea02 0201 	and.w	r2, r2, r1
 8012f04:	940a      	str	r4, [sp, #40]	; 0x28
 8012f06:	d000      	beq.n	8012f0a <EwCreateGlyph+0xc4>
 8012f08:	bb02      	cbnz	r2, 8012f4c <EwCreateGlyph+0x106>
 8012f0a:	fab2 f282 	clz	r2, r2
 8012f0e:	0952      	lsrs	r2, r2, #5
 8012f10:	f106 0a01 	add.w	sl, r6, #1
 8012f14:	46f3      	mov	fp, lr
 8012f16:	2a00      	cmp	r2, #0
 8012f18:	f000 80a5 	beq.w	8013066 <EwCreateGlyph+0x220>
 8012f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f1e:	4592      	cmp	sl, r2
 8012f20:	db17      	blt.n	8012f52 <EwCreateGlyph+0x10c>
 8012f22:	2030      	movs	r0, #48	; 0x30
 8012f24:	f016 fc24 	bl	8029770 <EwAlloc>
 8012f28:	4682      	mov	sl, r0
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d170      	bne.n	8013010 <EwCreateGlyph+0x1ca>
 8012f2e:	2101      	movs	r1, #1
 8012f30:	4608      	mov	r0, r1
 8012f32:	f7ff fb57 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d1f3      	bne.n	8012f22 <EwCreateGlyph+0xdc>
 8012f3a:	2027      	movs	r0, #39	; 0x27
 8012f3c:	f006 fe64 	bl	8019c08 <EwImmediateReclaimMemory>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d1a3      	bne.n	8012e8c <EwCreateGlyph+0x46>
 8012f44:	2027      	movs	r0, #39	; 0x27
 8012f46:	f005 feaf 	bl	8018ca8 <EwError>
 8012f4a:	e797      	b.n	8012e7c <EwCreateGlyph+0x36>
 8012f4c:	0049      	lsls	r1, r1, #1
 8012f4e:	3801      	subs	r0, #1
 8012f50:	e7d4      	b.n	8012efc <EwCreateGlyph+0xb6>
 8012f52:	f8db 2000 	ldr.w	r2, [fp]
 8012f56:	9c04      	ldr	r4, [sp, #16]
 8012f58:	4211      	tst	r1, r2
 8012f5a:	bf0c      	ite	eq
 8012f5c:	2201      	moveq	r2, #1
 8012f5e:	2200      	movne	r2, #0
 8012f60:	f10a 0a01 	add.w	sl, sl, #1
 8012f64:	44a3      	add	fp, r4
 8012f66:	e7d6      	b.n	8012f16 <EwCreateGlyph+0xd0>
 8012f68:	2a00      	cmp	r2, #0
 8012f6a:	4610      	mov	r0, r2
 8012f6c:	bfb8      	it	lt
 8012f6e:	f102 001f 	addlt.w	r0, r2, #31
 8012f72:	eb07 1060 	add.w	r0, r7, r0, asr #5
 8012f76:	3d01      	subs	r5, #1
 8012f78:	f85e 3020 	ldr.w	r3, [lr, r0, lsl #2]
 8012f7c:	430b      	orrs	r3, r1
 8012f7e:	f84e 3020 	str.w	r3, [lr, r0, lsl #2]
 8012f82:	4462      	add	r2, ip
 8012f84:	2d00      	cmp	r5, #0
 8012f86:	dcef      	bgt.n	8012f68 <EwCreateGlyph+0x122>
 8012f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f8a:	8c27      	ldrh	r7, [r4, #32]
 8012f8c:	f8ca 3014 	str.w	r3, [sl, #20]
 8012f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f92:	f8ca 3018 	str.w	r3, [sl, #24]
 8012f96:	9b02      	ldr	r3, [sp, #8]
 8012f98:	f8aa 301c 	strh.w	r3, [sl, #28]
 8012f9c:	fb16 f607 	smulbb	r6, r6, r7
 8012fa0:	9b03      	ldr	r3, [sp, #12]
 8012fa2:	f8aa 301e 	strh.w	r3, [sl, #30]
 8012fa6:	fb19 f907 	smulbb	r9, r9, r7
 8012faa:	f8aa 6026 	strh.w	r6, [sl, #38]	; 0x26
 8012fae:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
 8012fb2:	4650      	mov	r0, sl
 8012fb4:	f7ff f9ce 	bl	8012354 <EwBidiGetTypesAndLevels+0x7c>
 8012fb8:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012fbc:	9a02      	ldr	r2, [sp, #8]
 8012fbe:	9903      	ldr	r1, [sp, #12]
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	f8ca 3010 	str.w	r3, [sl, #16]
 8012fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	bfbc      	itt	lt
 8012fcc:	4613      	movlt	r3, r2
 8012fce:	6663      	strlt	r3, [r4, #100]	; 0x64
 8012fd0:	4b2b      	ldr	r3, [pc, #172]	; (8013080 <EwCreateGlyph+0x23a>)
 8012fd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012fd4:	428a      	cmp	r2, r1
 8012fd6:	bfbc      	itt	lt
 8012fd8:	460a      	movlt	r2, r1
 8012fda:	669a      	strlt	r2, [r3, #104]	; 0x68
 8012fdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012fde:	4929      	ldr	r1, [pc, #164]	; (8013084 <EwCreateGlyph+0x23e>)
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fe4:	680b      	ldr	r3, [r1, #0]
 8012fe6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012fea:	4b27      	ldr	r3, [pc, #156]	; (8013088 <EwCreateGlyph+0x242>)
 8012fec:	600a      	str	r2, [r1, #0]
 8012fee:	6819      	ldr	r1, [r3, #0]
 8012ff0:	428a      	cmp	r2, r1
 8012ff2:	bfc8      	it	gt
 8012ff4:	601a      	strgt	r2, [r3, #0]
 8012ff6:	4925      	ldr	r1, [pc, #148]	; (801308c <EwCreateGlyph+0x246>)
 8012ff8:	4b25      	ldr	r3, [pc, #148]	; (8013090 <EwCreateGlyph+0x24a>)
 8012ffa:	6809      	ldr	r1, [r1, #0]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	440b      	add	r3, r1
 8013000:	4413      	add	r3, r2
 8013002:	4a24      	ldr	r2, [pc, #144]	; (8013094 <EwCreateGlyph+0x24e>)
 8013004:	6811      	ldr	r1, [r2, #0]
 8013006:	428b      	cmp	r3, r1
 8013008:	f77f af38 	ble.w	8012e7c <EwCreateGlyph+0x36>
 801300c:	6013      	str	r3, [r2, #0]
 801300e:	e735      	b.n	8012e7c <EwCreateGlyph+0x36>
 8013010:	9c01      	ldr	r4, [sp, #4]
 8013012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013014:	3401      	adds	r4, #1
 8013016:	ebc7 1744 	rsb	r7, r7, r4, lsl #5
 801301a:	eba7 0903 	sub.w	r9, r7, r3
 801301e:	2130      	movs	r1, #48	; 0x30
 8013020:	f016 fbce 	bl	80297c0 <EwZero>
 8013024:	4c16      	ldr	r4, [pc, #88]	; (8013080 <EwCreateGlyph+0x23a>)
 8013026:	f1d9 0300 	rsbs	r3, r9, #0
 801302a:	f003 031f 	and.w	r3, r3, #31
 801302e:	f009 011f 	and.w	r1, r9, #31
 8013032:	e9d4 ec09 	ldrd	lr, ip, [r4, #36]	; 0x24
 8013036:	bf58      	it	pl
 8013038:	4259      	negpl	r1, r3
 801303a:	9b05      	ldr	r3, [sp, #20]
 801303c:	f1b9 0f00 	cmp.w	r9, #0
 8013040:	464f      	mov	r7, r9
 8013042:	fa03 f301 	lsl.w	r3, r3, r1
 8013046:	bfb8      	it	lt
 8013048:	f109 071f 	addlt.w	r7, r9, #31
 801304c:	4619      	mov	r1, r3
 801304e:	117f      	asrs	r7, r7, #5
 8013050:	fb0c f206 	mul.w	r2, ip, r6
 8013054:	e796      	b.n	8012f84 <EwCreateGlyph+0x13e>
 8013056:	2101      	movs	r1, #1
 8013058:	2000      	movs	r0, #0
 801305a:	f7ff fac3 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 801305e:	2800      	cmp	r0, #0
 8013060:	f47f af14 	bne.w	8012e8c <EwCreateGlyph+0x46>
 8013064:	e708      	b.n	8012e78 <EwCreateGlyph+0x32>
 8013066:	2800      	cmp	r0, #0
 8013068:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801306c:	f73f af6f 	bgt.w	8012f4e <EwCreateGlyph+0x108>
 8013070:	9a01      	ldr	r2, [sp, #4]
 8013072:	3201      	adds	r2, #1
 8013074:	9201      	str	r2, [sp, #4]
 8013076:	f10e 0e04 	add.w	lr, lr, #4
 801307a:	e72a      	b.n	8012ed2 <EwCreateGlyph+0x8c>
 801307c:	08035b70 	.word	0x08035b70
 8013080:	200001e8 	.word	0x200001e8
 8013084:	200002e8 	.word	0x200002e8
 8013088:	20000304 	.word	0x20000304
 801308c:	200002e4 	.word	0x200002e4
 8013090:	200002d8 	.word	0x200002d8
 8013094:	200002ec 	.word	0x200002ec

08013098 <EwFindGlyph>:
 8013098:	4a0f      	ldr	r2, [pc, #60]	; (80130d8 <EwFindGlyph+0x40>)
 801309a:	68d3      	ldr	r3, [r2, #12]
 801309c:	6912      	ldr	r2, [r2, #16]
 801309e:	3b01      	subs	r3, #1
 80130a0:	400b      	ands	r3, r1
 80130a2:	b570      	push	{r4, r5, r6, lr}
 80130a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130a8:	4606      	mov	r6, r0
 80130aa:	460d      	mov	r5, r1
 80130ac:	f7ff fa34 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 80130b0:	b16c      	cbz	r4, 80130ce <EwFindGlyph+0x36>
 80130b2:	6963      	ldr	r3, [r4, #20]
 80130b4:	42b3      	cmp	r3, r6
 80130b6:	d10c      	bne.n	80130d2 <EwFindGlyph+0x3a>
 80130b8:	69a3      	ldr	r3, [r4, #24]
 80130ba:	42ab      	cmp	r3, r5
 80130bc:	d109      	bne.n	80130d2 <EwFindGlyph+0x3a>
 80130be:	4620      	mov	r0, r4
 80130c0:	f7ff f96a 	bl	8012398 <EwBidiGetTypesAndLevels+0xc0>
 80130c4:	f7ff f946 	bl	8012354 <EwBidiGetTypesAndLevels+0x7c>
 80130c8:	6923      	ldr	r3, [r4, #16]
 80130ca:	3301      	adds	r3, #1
 80130cc:	6123      	str	r3, [r4, #16]
 80130ce:	4620      	mov	r0, r4
 80130d0:	bd70      	pop	{r4, r5, r6, pc}
 80130d2:	68a4      	ldr	r4, [r4, #8]
 80130d4:	e7ec      	b.n	80130b0 <EwFindGlyph+0x18>
 80130d6:	bf00      	nop
 80130d8:	200001e8 	.word	0x200001e8

080130dc <EwFreeGlyph>:
 80130dc:	6903      	ldr	r3, [r0, #16]
 80130de:	3b01      	subs	r3, #1
 80130e0:	6103      	str	r3, [r0, #16]
 80130e2:	4770      	bx	lr

080130e4 <EwDiscardGlyph>:
 80130e4:	6903      	ldr	r3, [r0, #16]
 80130e6:	b90b      	cbnz	r3, 80130ec <EwDiscardGlyph+0x8>
 80130e8:	f7ff b99d 	b.w	8012426 <EwBidiGetTypesAndLevels+0x14e>
 80130ec:	4770      	bx	lr

080130ee <EwUnlockGlyphCache>:
 80130ee:	b119      	cbz	r1, 80130f8 <EwUnlockGlyphCache+0xa>
 80130f0:	4b02      	ldr	r3, [pc, #8]	; (80130fc <EwUnlockGlyphCache+0xe>)
 80130f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80130f4:	f7ff be10 	b.w	8012d18 <EwUnlockSurface>
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	200001e8 	.word	0x200001e8

08013100 <EwInitIssue>:
 8013100:	b570      	push	{r4, r5, r6, lr}
 8013102:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013104:	4605      	mov	r5, r0
 8013106:	f7ff fa07 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 801310a:	b9cc      	cbnz	r4, 8013140 <EwInitIssue+0x40>
 801310c:	4e29      	ldr	r6, [pc, #164]	; (80131b4 <EwInitIssue+0xb4>)
 801310e:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8013110:	b30c      	cbz	r4, 8013156 <EwInitIssue+0x56>
 8013112:	4620      	mov	r0, r4
 8013114:	f7ff f975 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 8013118:	6b32      	ldr	r2, [r6, #48]	; 0x30
 801311a:	60e5      	str	r5, [r4, #12]
 801311c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013120:	6163      	str	r3, [r4, #20]
 8013122:	4413      	add	r3, r2
 8013124:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8013128:	2300      	movs	r3, #0
 801312a:	e9c4 3300 	strd	r3, r3, [r4]
 801312e:	60a3      	str	r3, [r4, #8]
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	6223      	str	r3, [r4, #32]
 8013134:	4920      	ldr	r1, [pc, #128]	; (80131b8 <EwInitIssue+0xb8>)
 8013136:	636c      	str	r4, [r5, #52]	; 0x34
 8013138:	4620      	mov	r0, r4
 801313a:	f7ff f957 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 801313e:	e008      	b.n	8013152 <EwInitIssue+0x52>
 8013140:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013144:	1a9b      	subs	r3, r3, r2
 8013146:	6962      	ldr	r2, [r4, #20]
 8013148:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801314c:	1a52      	subs	r2, r2, r1
 801314e:	4413      	add	r3, r2
 8013150:	6223      	str	r3, [r4, #32]
 8013152:	4620      	mov	r0, r4
 8013154:	bd70      	pop	{r4, r5, r6, pc}
 8013156:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8013158:	3028      	adds	r0, #40	; 0x28
 801315a:	f016 fb09 	bl	8029770 <EwAlloc>
 801315e:	4604      	mov	r4, r0
 8013160:	b1c0      	cbz	r0, 8013194 <EwInitIssue+0x94>
 8013162:	4a16      	ldr	r2, [pc, #88]	; (80131bc <EwInitIssue+0xbc>)
 8013164:	2300      	movs	r3, #0
 8013166:	6811      	ldr	r1, [r2, #0]
 8013168:	6243      	str	r3, [r0, #36]	; 0x24
 801316a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801316c:	440b      	add	r3, r1
 801316e:	3328      	adds	r3, #40	; 0x28
 8013170:	6013      	str	r3, [r2, #0]
 8013172:	4a13      	ldr	r2, [pc, #76]	; (80131c0 <EwInitIssue+0xc0>)
 8013174:	6811      	ldr	r1, [r2, #0]
 8013176:	428b      	cmp	r3, r1
 8013178:	bfc8      	it	gt
 801317a:	6013      	strgt	r3, [r2, #0]
 801317c:	4911      	ldr	r1, [pc, #68]	; (80131c4 <EwInitIssue+0xc4>)
 801317e:	4a12      	ldr	r2, [pc, #72]	; (80131c8 <EwInitIssue+0xc8>)
 8013180:	6809      	ldr	r1, [r1, #0]
 8013182:	6812      	ldr	r2, [r2, #0]
 8013184:	440a      	add	r2, r1
 8013186:	4413      	add	r3, r2
 8013188:	4a10      	ldr	r2, [pc, #64]	; (80131cc <EwInitIssue+0xcc>)
 801318a:	6811      	ldr	r1, [r2, #0]
 801318c:	428b      	cmp	r3, r1
 801318e:	ddc3      	ble.n	8013118 <EwInitIssue+0x18>
 8013190:	6013      	str	r3, [r2, #0]
 8013192:	e7c1      	b.n	8013118 <EwInitIssue+0x18>
 8013194:	2101      	movs	r1, #1
 8013196:	4608      	mov	r0, r1
 8013198:	f7ff fa24 	bl	80125e4 <EwBidiGetTypesAndLevels+0x30c>
 801319c:	2800      	cmp	r0, #0
 801319e:	d1b6      	bne.n	801310e <EwInitIssue+0xe>
 80131a0:	2028      	movs	r0, #40	; 0x28
 80131a2:	f006 fd31 	bl	8019c08 <EwImmediateReclaimMemory>
 80131a6:	2800      	cmp	r0, #0
 80131a8:	d1b1      	bne.n	801310e <EwInitIssue+0xe>
 80131aa:	2028      	movs	r0, #40	; 0x28
 80131ac:	f005 fd7c 	bl	8018ca8 <EwError>
 80131b0:	e7cf      	b.n	8013152 <EwInitIssue+0x52>
 80131b2:	bf00      	nop
 80131b4:	200001e8 	.word	0x200001e8
 80131b8:	20000240 	.word	0x20000240
 80131bc:	200002e8 	.word	0x200002e8
 80131c0:	20000304 	.word	0x20000304
 80131c4:	200002e4 	.word	0x200002e4
 80131c8:	200002d8 	.word	0x200002d8
 80131cc:	200002ec 	.word	0x200002ec

080131d0 <EwAllocTask>:
 80131d0:	e9d0 3c05 	ldrd	r3, ip, [r0, #20]
 80131d4:	ebac 0303 	sub.w	r3, ip, r3
 80131d8:	2b13      	cmp	r3, #19
 80131da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131dc:	460f      	mov	r7, r1
 80131de:	dd14      	ble.n	801320a <EwAllocTask+0x3a>
 80131e0:	f1ac 0614 	sub.w	r6, ip, #20
 80131e4:	6186      	str	r6, [r0, #24]
 80131e6:	b159      	cbz	r1, 8013200 <EwAllocTask+0x30>
 80131e8:	460d      	mov	r5, r1
 80131ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131ec:	4634      	mov	r4, r6
 80131ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	6023      	str	r3, [r4, #0]
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	f84c 3c14 	str.w	r3, [ip, #-20]
 80131fa:	603e      	str	r6, [r7, #0]
 80131fc:	4630      	mov	r0, r6
 80131fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013200:	6903      	ldr	r3, [r0, #16]
 8013202:	f84c 3c14 	str.w	r3, [ip, #-20]
 8013206:	6106      	str	r6, [r0, #16]
 8013208:	e7f8      	b.n	80131fc <EwAllocTask+0x2c>
 801320a:	2600      	movs	r6, #0
 801320c:	e7f6      	b.n	80131fc <EwAllocTask+0x2c>

0801320e <EwAllocTasks>:
 801320e:	b570      	push	{r4, r5, r6, lr}
 8013210:	4616      	mov	r6, r2
 8013212:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8013216:	2900      	cmp	r1, #0
 8013218:	eba3 0202 	sub.w	r2, r3, r2
 801321c:	f04f 0314 	mov.w	r3, #20
 8013220:	4605      	mov	r5, r0
 8013222:	460c      	mov	r4, r1
 8013224:	fb01 f303 	mul.w	r3, r1, r3
 8013228:	f04f 0000 	mov.w	r0, #0
 801322c:	dd03      	ble.n	8013236 <EwAllocTasks+0x28>
 801322e:	429a      	cmp	r2, r3
 8013230:	db01      	blt.n	8013236 <EwAllocTasks+0x28>
 8013232:	3c01      	subs	r4, #1
 8013234:	d200      	bcs.n	8013238 <EwAllocTasks+0x2a>
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	4631      	mov	r1, r6
 801323a:	4628      	mov	r0, r5
 801323c:	f7ff ffc8 	bl	80131d0 <EwAllocTask>
 8013240:	e7f7      	b.n	8013232 <EwAllocTasks+0x24>

08013242 <EwAllocTaskData>:
 8013242:	b530      	push	{r4, r5, lr}
 8013244:	e9d0 2405 	ldrd	r2, r4, [r0, #20]
 8013248:	f101 0513 	add.w	r5, r1, #19
 801324c:	1aa3      	subs	r3, r4, r2
 801324e:	429d      	cmp	r5, r3
 8013250:	da0f      	bge.n	8013272 <EwAllocTaskData+0x30>
 8013252:	69c3      	ldr	r3, [r0, #28]
 8013254:	4411      	add	r1, r2
 8013256:	1b1b      	subs	r3, r3, r4
 8013258:	f100 0428 	add.w	r4, r0, #40	; 0x28
 801325c:	6141      	str	r1, [r0, #20]
 801325e:	1b09      	subs	r1, r1, r4
 8013260:	4419      	add	r1, r3
 8013262:	6a03      	ldr	r3, [r0, #32]
 8013264:	1ac9      	subs	r1, r1, r3
 8013266:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013268:	428b      	cmp	r3, r1
 801326a:	da00      	bge.n	801326e <EwAllocTaskData+0x2c>
 801326c:	6241      	str	r1, [r0, #36]	; 0x24
 801326e:	4610      	mov	r0, r2
 8013270:	bd30      	pop	{r4, r5, pc}
 8013272:	2200      	movs	r2, #0
 8013274:	e7fb      	b.n	801326e <EwAllocTaskData+0x2c>

08013276 <EwFreeTaskData>:
 8013276:	6943      	ldr	r3, [r0, #20]
 8013278:	428b      	cmp	r3, r1
 801327a:	d904      	bls.n	8013286 <EwFreeTaskData+0x10>
 801327c:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8013280:	4299      	cmp	r1, r3
 8013282:	bf28      	it	cs
 8013284:	6141      	strcs	r1, [r0, #20]
 8013286:	4770      	bx	lr

08013288 <EwFlushTasks>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	b1e8      	cbz	r0, 80132c8 <EwFlushTasks+0x40>
 801328c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801328e:	2d00      	cmp	r5, #0
 8013290:	d03c      	beq.n	801330c <EwFlushTasks+0x84>
 8013292:	68ec      	ldr	r4, [r5, #12]
 8013294:	2c00      	cmp	r4, #0
 8013296:	d03b      	beq.n	8013310 <EwFlushTasks+0x88>
 8013298:	6922      	ldr	r2, [r4, #16]
 801329a:	68a3      	ldr	r3, [r4, #8]
 801329c:	4413      	add	r3, r2
 801329e:	68e2      	ldr	r2, [r4, #12]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	dd18      	ble.n	80132d6 <EwFlushTasks+0x4e>
 80132a4:	4628      	mov	r0, r5
 80132a6:	f7ff f8ac 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 80132aa:	4e1a      	ldr	r6, [pc, #104]	; (8013314 <EwFlushTasks+0x8c>)
 80132ac:	f7ff f934 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 80132b0:	6922      	ldr	r2, [r4, #16]
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	4413      	add	r3, r2
 80132b6:	68e2      	ldr	r2, [r4, #12]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	dd08      	ble.n	80132ce <EwFlushTasks+0x46>
 80132bc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80132be:	b133      	cbz	r3, 80132ce <EwFlushTasks+0x46>
 80132c0:	68d8      	ldr	r0, [r3, #12]
 80132c2:	f7ff ffe1 	bl	8013288 <EwFlushTasks>
 80132c6:	e7f1      	b.n	80132ac <EwFlushTasks+0x24>
 80132c8:	4b12      	ldr	r3, [pc, #72]	; (8013314 <EwFlushTasks+0x8c>)
 80132ca:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80132cc:	e7df      	b.n	801328e <EwFlushTasks+0x6>
 80132ce:	4912      	ldr	r1, [pc, #72]	; (8013318 <EwFlushTasks+0x90>)
 80132d0:	4628      	mov	r0, r5
 80132d2:	f7ff f88b 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 80132d6:	4628      	mov	r0, r5
 80132d8:	f002 fcf2 	bl	8015cc0 <EwEliminateTasks>
 80132dc:	4628      	mov	r0, r5
 80132de:	f002 fbd3 	bl	8015a88 <EwReorderTasks>
 80132e2:	4628      	mov	r0, r5
 80132e4:	f7ff f88d 	bl	8012402 <EwBidiGetTypesAndLevels+0x12a>
 80132e8:	490c      	ldr	r1, [pc, #48]	; (801331c <EwFlushTasks+0x94>)
 80132ea:	f7ff f87f 	bl	80123ec <EwBidiGetTypesAndLevels+0x114>
 80132ee:	6923      	ldr	r3, [r4, #16]
 80132f0:	3301      	adds	r3, #1
 80132f2:	6123      	str	r3, [r4, #16]
 80132f4:	68e3      	ldr	r3, [r4, #12]
 80132f6:	2500      	movs	r5, #0
 80132f8:	3301      	adds	r3, #1
 80132fa:	60e3      	str	r3, [r4, #12]
 80132fc:	6365      	str	r5, [r4, #52]	; 0x34
 80132fe:	f7ff f90b 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 8013302:	4628      	mov	r0, r5
 8013304:	f7ff f9de 	bl	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 8013308:	2001      	movs	r0, #1
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	4628      	mov	r0, r5
 801330e:	e7fc      	b.n	801330a <EwFlushTasks+0x82>
 8013310:	4620      	mov	r0, r4
 8013312:	e7fa      	b.n	801330a <EwFlushTasks+0x82>
 8013314:	200001e8 	.word	0x200001e8
 8013318:	20000240 	.word	0x20000240
 801331c:	2000021c 	.word	0x2000021c

08013320 <EwDoneIssue>:
 8013320:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013322:	e9d1 3205 	ldrd	r3, r2, [r1, #20]
 8013326:	b430      	push	{r4, r5}
 8013328:	69cd      	ldr	r5, [r1, #28]
 801332a:	1ad4      	subs	r4, r2, r3
 801332c:	1aaa      	subs	r2, r5, r2
 801332e:	eb02 75d2 	add.w	r5, r2, r2, lsr #31
 8013332:	eba4 0465 	sub.w	r4, r4, r5, asr #1
 8013336:	f101 0528 	add.w	r5, r1, #40	; 0x28
 801333a:	1b5b      	subs	r3, r3, r5
 801333c:	6a0d      	ldr	r5, [r1, #32]
 801333e:	4413      	add	r3, r2
 8013340:	1b5b      	subs	r3, r3, r5
 8013342:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8013344:	429d      	cmp	r5, r3
 8013346:	bfb8      	it	lt
 8013348:	624b      	strlt	r3, [r1, #36]	; 0x24
 801334a:	4b08      	ldr	r3, [pc, #32]	; (801336c <EwDoneIssue+0x4c>)
 801334c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801334e:	42a3      	cmp	r3, r4
 8013350:	dc06      	bgt.n	8013360 <EwDoneIssue+0x40>
 8013352:	2314      	movs	r3, #20
 8013354:	fbb2 f2f3 	udiv	r2, r2, r3
 8013358:	4b05      	ldr	r3, [pc, #20]	; (8013370 <EwDoneIssue+0x50>)
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	4293      	cmp	r3, r2
 801335e:	dc02      	bgt.n	8013366 <EwDoneIssue+0x46>
 8013360:	bc30      	pop	{r4, r5}
 8013362:	f7ff bf91 	b.w	8013288 <EwFlushTasks>
 8013366:	bc30      	pop	{r4, r5}
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop
 801336c:	200001e8 	.word	0x200001e8
 8013370:	20000014 	.word	0x20000014

08013374 <EwWaitForSurface>:
 8013374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013376:	4605      	mov	r5, r0
 8013378:	460f      	mov	r7, r1
 801337a:	f7ff ff85 	bl	8013288 <EwFlushTasks>
 801337e:	4e0d      	ldr	r6, [pc, #52]	; (80133b4 <EwWaitForSurface+0x40>)
 8013380:	4604      	mov	r4, r0
 8013382:	692b      	ldr	r3, [r5, #16]
 8013384:	b98b      	cbnz	r3, 80133aa <EwWaitForSurface+0x36>
 8013386:	b19f      	cbz	r7, 80133b0 <EwWaitForSurface+0x3c>
 8013388:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 801338c:	429a      	cmp	r2, r3
 801338e:	dd0f      	ble.n	80133b0 <EwWaitForSurface+0x3c>
 8013390:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8013392:	b953      	cbnz	r3, 80133aa <EwWaitForSurface+0x36>
 8013394:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8013396:	b943      	cbnz	r3, 80133aa <EwWaitForSurface+0x36>
 8013398:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801339a:	b933      	cbnz	r3, 80133aa <EwWaitForSurface+0x36>
 801339c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 801339e:	b13b      	cbz	r3, 80133b0 <EwWaitForSurface+0x3c>
 80133a0:	68d8      	ldr	r0, [r3, #12]
 80133a2:	f7ff ff71 	bl	8013288 <EwFlushTasks>
 80133a6:	4304      	orrs	r4, r0
 80133a8:	e7eb      	b.n	8013382 <EwWaitForSurface+0xe>
 80133aa:	f7ff f8b5 	bl	8012518 <EwBidiGetTypesAndLevels+0x240>
 80133ae:	e7e8      	b.n	8013382 <EwWaitForSurface+0xe>
 80133b0:	4620      	mov	r0, r4
 80133b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133b4:	200001e8 	.word	0x200001e8

080133b8 <EwLockSurface>:
 80133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	460f      	mov	r7, r1
 80133be:	6881      	ldr	r1, [r0, #8]
 80133c0:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
 80133c4:	b089      	sub	sp, #36	; 0x24
 80133c6:	3101      	adds	r1, #1
 80133c8:	f8bd 5054 	ldrh.w	r5, [sp, #84]	; 0x54
 80133cc:	6081      	str	r1, [r0, #8]
 80133ce:	68c1      	ldr	r1, [r0, #12]
 80133d0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80133d4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80133d6:	469a      	mov	sl, r3
 80133d8:	3101      	adds	r1, #1
 80133da:	062b      	lsls	r3, r5, #24
 80133dc:	4604      	mov	r4, r0
 80133de:	4693      	mov	fp, r2
 80133e0:	60c1      	str	r1, [r0, #12]
 80133e2:	d403      	bmi.n	80133ec <EwLockSurface+0x34>
 80133e4:	f005 010a 	and.w	r1, r5, #10
 80133e8:	f7ff ffc4 	bl	8013374 <EwWaitForSurface>
 80133ec:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 80133f0:	3101      	adds	r1, #1
 80133f2:	f04f 0000 	mov.w	r0, #0
 80133f6:	d111      	bne.n	801341c <EwLockSurface+0x64>
 80133f8:	f005 0102 	and.w	r1, r5, #2
 80133fc:	9104      	str	r1, [sp, #16]
 80133fe:	f005 0101 	and.w	r1, r5, #1
 8013402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013406:	e9cd 0606 	strd	r0, r6, [sp, #24]
 801340a:	e9cd 8000 	strd	r8, r0, [sp]
 801340e:	9005      	str	r0, [sp, #20]
 8013410:	4653      	mov	r3, sl
 8013412:	465a      	mov	r2, fp
 8013414:	4639      	mov	r1, r7
 8013416:	4648      	mov	r0, r9
 8013418:	f015 fef6 	bl	8029208 <GfxLockSurface>
 801341c:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 8013420:	b989      	cbnz	r1, 8013446 <EwLockSurface+0x8e>
 8013422:	f005 0002 	and.w	r0, r5, #2
 8013426:	9004      	str	r0, [sp, #16]
 8013428:	f005 0001 	and.w	r0, r5, #1
 801342c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8013430:	e9cd 1606 	strd	r1, r6, [sp, #24]
 8013434:	e9cd 8100 	strd	r8, r1, [sp]
 8013438:	9105      	str	r1, [sp, #20]
 801343a:	4653      	mov	r3, sl
 801343c:	465a      	mov	r2, fp
 801343e:	4639      	mov	r1, r7
 8013440:	4648      	mov	r0, r9
 8013442:	f015 fee1 	bl	8029208 <GfxLockSurface>
 8013446:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 801344a:	2902      	cmp	r1, #2
 801344c:	d112      	bne.n	8013474 <EwLockSurface+0xbc>
 801344e:	f005 0002 	and.w	r0, r5, #2
 8013452:	2100      	movs	r1, #0
 8013454:	9004      	str	r0, [sp, #16]
 8013456:	f005 0001 	and.w	r0, r5, #1
 801345a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801345e:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8013462:	e9cd 8100 	strd	r8, r1, [sp]
 8013466:	9607      	str	r6, [sp, #28]
 8013468:	4653      	mov	r3, sl
 801346a:	465a      	mov	r2, fp
 801346c:	4639      	mov	r1, r7
 801346e:	4648      	mov	r0, r9
 8013470:	f015 feca 	bl	8029208 <GfxLockSurface>
 8013474:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 8013478:	2901      	cmp	r1, #1
 801347a:	d117      	bne.n	80134ac <EwLockSurface+0xf4>
 801347c:	f005 0108 	and.w	r1, r5, #8
 8013480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013482:	9106      	str	r1, [sp, #24]
 8013484:	f005 0104 	and.w	r1, r5, #4
 8013488:	9105      	str	r1, [sp, #20]
 801348a:	9302      	str	r3, [sp, #8]
 801348c:	f005 0102 	and.w	r1, r5, #2
 8013490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013492:	9104      	str	r1, [sp, #16]
 8013494:	f005 0101 	and.w	r1, r5, #1
 8013498:	e9cd 8300 	strd	r8, r3, [sp]
 801349c:	9103      	str	r1, [sp, #12]
 801349e:	9607      	str	r6, [sp, #28]
 80134a0:	4653      	mov	r3, sl
 80134a2:	465a      	mov	r2, fp
 80134a4:	4639      	mov	r1, r7
 80134a6:	4648      	mov	r0, r9
 80134a8:	f015 feae 	bl	8029208 <GfxLockSurface>
 80134ac:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 80134b0:	2903      	cmp	r1, #3
 80134b2:	d112      	bne.n	80134da <EwLockSurface+0x122>
 80134b4:	f005 0002 	and.w	r0, r5, #2
 80134b8:	2100      	movs	r1, #0
 80134ba:	9004      	str	r0, [sp, #16]
 80134bc:	f005 0001 	and.w	r0, r5, #1
 80134c0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80134c4:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80134c8:	e9cd 8100 	strd	r8, r1, [sp]
 80134cc:	9607      	str	r6, [sp, #28]
 80134ce:	4653      	mov	r3, sl
 80134d0:	465a      	mov	r2, fp
 80134d2:	4639      	mov	r1, r7
 80134d4:	4648      	mov	r0, r9
 80134d6:	f015 fe97 	bl	8029208 <GfxLockSurface>
 80134da:	b940      	cbnz	r0, 80134ee <EwLockSurface+0x136>
 80134dc:	68a3      	ldr	r3, [r4, #8]
 80134de:	3b01      	subs	r3, #1
 80134e0:	60a3      	str	r3, [r4, #8]
 80134e2:	68e3      	ldr	r3, [r4, #12]
 80134e4:	3b01      	subs	r3, #1
 80134e6:	60e3      	str	r3, [r4, #12]
 80134e8:	b009      	add	sp, #36	; 0x24
 80134ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134f0:	84b3      	strh	r3, [r6, #36]	; 0x24
 80134f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134f4:	62f0      	str	r0, [r6, #44]	; 0x2c
 80134f6:	83b7      	strh	r7, [r6, #28]
 80134f8:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80134fc:	f8a6 a020 	strh.w	sl, [r6, #32]
 8013500:	f8a6 8022 	strh.w	r8, [r6, #34]	; 0x22
 8013504:	84f3      	strh	r3, [r6, #38]	; 0x26
 8013506:	8535      	strh	r5, [r6, #40]	; 0x28
 8013508:	2001      	movs	r0, #1
 801350a:	e7ed      	b.n	80134e8 <EwLockSurface+0x130>

0801350c <EwLockGlyphCache>:
 801350c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801350e:	2300      	movs	r3, #0
 8013510:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8013514:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8013518:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8013522:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	; 0x28
 8013526:	f9b0 1026 	ldrsh.w	r1, [r0, #38]	; 0x26
 801352a:	4803      	ldr	r0, [pc, #12]	; (8013538 <EwLockGlyphCache+0x2c>)
 801352c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801352e:	f7ff ff43 	bl	80133b8 <EwLockSurface>
 8013532:	b007      	add	sp, #28
 8013534:	f85d fb04 	ldr.w	pc, [sp], #4
 8013538:	200001e8 	.word	0x200001e8

0801353c <EwCleanSurfaceCache>:
 801353c:	2001      	movs	r0, #1
 801353e:	f7ff b8c1 	b.w	80126c4 <EwBidiGetTypesAndLevels+0x3ec>
 8013542:	bf00      	nop
 8013544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013548:	2800      	cmp	r0, #0
 801354a:	ea82 77e2 	eor.w	r7, r2, r2, asr #31
 801354e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8013552:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8013556:	eba7 77e2 	sub.w	r7, r7, r2, asr #31
 801355a:	da04      	bge.n	8013566 <EwCleanSurfaceCache+0x2a>
 801355c:	4249      	negs	r1, r1
 801355e:	43c0      	mvns	r0, r0
 8013560:	2900      	cmp	r1, #0
 8013562:	bf08      	it	eq
 8013564:	3001      	addeq	r0, #1
 8013566:	fa1f fc87 	uxth.w	ip, r7
 801356a:	fa1f fe80 	uxth.w	lr, r0
 801356e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8013572:	0c3f      	lsrs	r7, r7, #16
 8013574:	b28e      	uxth	r6, r1
 8013576:	fb0e f20c 	mul.w	r2, lr, ip
 801357a:	fb06 f10c 	mul.w	r1, r6, ip
 801357e:	fb08 2207 	mla	r2, r8, r7, r2
 8013582:	437e      	muls	r6, r7
 8013584:	fb08 f30c 	mul.w	r3, r8, ip
 8013588:	eb02 4216 	add.w	r2, r2, r6, lsr #16
 801358c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013590:	fb0e f707 	mul.w	r7, lr, r7
 8013594:	0c00      	lsrs	r0, r0, #16
 8013596:	fb0c f000 	mul.w	r0, ip, r0
 801359a:	eb02 4207 	add.w	r2, r2, r7, lsl #16
 801359e:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80135a2:	b298      	uxth	r0, r3
 80135a4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 80135a8:	fa10 f086 	uxtah	r0, r0, r6
 80135ac:	041b      	lsls	r3, r3, #16
 80135ae:	eb02 4210 	add.w	r2, r2, r0, lsr #16
 80135b2:	eb03 4006 	add.w	r0, r3, r6, lsl #16
 80135b6:	4408      	add	r0, r1
 80135b8:	0fc0      	lsrs	r0, r0, #31
 80135ba:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 80135be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80135c2:	42a5      	cmp	r5, r4
 80135c4:	bf18      	it	ne
 80135c6:	4240      	negne	r0, r0
 80135c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ce:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80135d2:	4604      	mov	r4, r0
 80135d4:	ea80 70e0 	eor.w	r0, r0, r0, asr #31
 80135d8:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 80135dc:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	b286      	uxth	r6, r0
 80135e4:	0c00      	lsrs	r0, r0, #16
 80135e6:	fb00 f702 	mul.w	r7, r0, r2
 80135ea:	0fcd      	lsrs	r5, r1, #31
 80135ec:	0c19      	lsrs	r1, r3, #16
 80135ee:	fb01 f306 	mul.w	r3, r1, r6
 80135f2:	4356      	muls	r6, r2
 80135f4:	b2ba      	uxth	r2, r7
 80135f6:	eb02 4216 	add.w	r2, r2, r6, lsr #16
 80135fa:	fa12 f283 	uxtah	r2, r2, r3
 80135fe:	0c1b      	lsrs	r3, r3, #16
 8013600:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013604:	fb00 3301 	mla	r3, r0, r1, r3
 8013608:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801360c:	0058      	lsls	r0, r3, #1
 801360e:	ebb5 7fd4 	cmp.w	r5, r4, lsr #31
 8013612:	bf18      	it	ne
 8013614:	4240      	negne	r0, r0
 8013616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801361c:	b08d      	sub	sp, #52	; 0x34
 801361e:	4688      	mov	r8, r1
 8013620:	9201      	str	r2, [sp, #4]
 8013622:	9309      	str	r3, [sp, #36]	; 0x24
 8013624:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013628:	f022 020f 	bic.w	r2, r2, #15
 801362c:	f102 010e 	add.w	r1, r2, #14
 8013630:	9104      	str	r1, [sp, #16]
 8013632:	9901      	ldr	r1, [sp, #4]
 8013634:	9003      	str	r0, [sp, #12]
 8013636:	1c95      	adds	r5, r2, #2
 8013638:	3212      	adds	r2, #18
 801363a:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 801363e:	f04f 0b00 	mov.w	fp, #0
 8013642:	f04f 3aff 	mov.w	sl, #4294967295
 8013646:	920b      	str	r2, [sp, #44]	; 0x2c
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	2a00      	cmp	r2, #0
 801364c:	dc30      	bgt.n	80136b0 <EwCleanSurfaceCache+0x174>
 801364e:	ea4f 142c 	mov.w	r4, ip, asr #4
 8013652:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013656:	f1bb 0f00 	cmp.w	fp, #0
 801365a:	f000 8096 	beq.w	801378a <EwCleanSurfaceCache+0x24e>
 801365e:	2c00      	cmp	r4, #0
 8013660:	f000 8093 	beq.w	801378a <EwCleanSurfaceCache+0x24e>
 8013664:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8013668:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 801366c:	2903      	cmp	r1, #3
 801366e:	bfd8      	it	le
 8013670:	0189      	lslle	r1, r1, #6
 8013672:	9803      	ldr	r0, [sp, #12]
 8013674:	bfd4      	ite	le
 8013676:	b2c9      	uxtble	r1, r1
 8013678:	21ff      	movgt	r1, #255	; 0xff
 801367a:	4622      	mov	r2, r4
 801367c:	f016 f8a4 	bl	80297c8 <EwFill>
 8013680:	2500      	movs	r5, #0
 8013682:	1c73      	adds	r3, r6, #1
 8013684:	9304      	str	r3, [sp, #16]
 8013686:	f108 0304 	add.w	r3, r8, #4
 801368a:	42b4      	cmp	r4, r6
 801368c:	dd7f      	ble.n	801378e <EwCleanSurfaceCache+0x252>
 801368e:	f1bb 0f00 	cmp.w	fp, #0
 8013692:	f000 8105 	beq.w	80138a0 <EwCleanSurfaceCache+0x364>
 8013696:	42b5      	cmp	r5, r6
 8013698:	f300 80eb 	bgt.w	8013872 <EwCleanSurfaceCache+0x336>
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	429c      	cmp	r4, r3
 80136a0:	f2c0 80eb 	blt.w	801387a <EwCleanSurfaceCache+0x33e>
 80136a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80136a6:	b103      	cbz	r3, 80136aa <EwCleanSurfaceCache+0x16e>
 80136a8:	601d      	str	r5, [r3, #0]
 80136aa:	1b70      	subs	r0, r6, r5
 80136ac:	3001      	adds	r0, #1
 80136ae:	e0fb      	b.n	80138a8 <EwCleanSurfaceCache+0x36c>
 80136b0:	f102 0901 	add.w	r9, r2, #1
 80136b4:	6899      	ldr	r1, [r3, #8]
 80136b6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80136ba:	3310      	adds	r3, #16
 80136bc:	454b      	cmp	r3, r9
 80136be:	d901      	bls.n	80136c4 <EwCleanSurfaceCache+0x188>
 80136c0:	3b04      	subs	r3, #4
 80136c2:	e7c1      	b.n	8013648 <EwCleanSurfaceCache+0x10c>
 80136c4:	42a9      	cmp	r1, r5
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	da2b      	bge.n	8013722 <EwCleanSurfaceCache+0x1e6>
 80136ca:	4295      	cmp	r5, r2
 80136cc:	dd29      	ble.n	8013722 <EwCleanSurfaceCache+0x1e6>
 80136ce:	4619      	mov	r1, r3
 80136d0:	42aa      	cmp	r2, r5
 80136d2:	460b      	mov	r3, r1
 80136d4:	da01      	bge.n	80136da <EwCleanSurfaceCache+0x19e>
 80136d6:	4549      	cmp	r1, r9
 80136d8:	d320      	bcc.n	801371c <EwCleanSurfaceCache+0x1e0>
 80136da:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80136de:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80136e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136e4:	1a30      	subs	r0, r6, r0
 80136e6:	9007      	str	r0, [sp, #28]
 80136e8:	4291      	cmp	r1, r2
 80136ea:	bfb4      	ite	lt
 80136ec:	2001      	movlt	r0, #1
 80136ee:	f04f 30ff 	movge.w	r0, #4294967295
 80136f2:	9005      	str	r0, [sp, #20]
 80136f4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80136f8:	9006      	str	r0, [sp, #24]
 80136fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80136fe:	1b80      	subs	r0, r0, r6
 8013700:	1a6e      	subs	r6, r5, r1
 8013702:	0084      	lsls	r4, r0, #2
 8013704:	4370      	muls	r0, r6
 8013706:	9002      	str	r0, [sp, #8]
 8013708:	1a50      	subs	r0, r2, r1
 801370a:	9408      	str	r4, [sp, #32]
 801370c:	900a      	str	r0, [sp, #40]	; 0x28
 801370e:	462c      	mov	r4, r5
 8013710:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013712:	42a0      	cmp	r0, r4
 8013714:	d112      	bne.n	801373c <EwCleanSurfaceCache+0x200>
 8013716:	3308      	adds	r3, #8
 8013718:	4611      	mov	r1, r2
 801371a:	e7cf      	b.n	80136bc <EwCleanSurfaceCache+0x180>
 801371c:	f851 2f08 	ldr.w	r2, [r1, #8]!
 8013720:	e7d6      	b.n	80136d0 <EwCleanSurfaceCache+0x194>
 8013722:	9804      	ldr	r0, [sp, #16]
 8013724:	4281      	cmp	r1, r0
 8013726:	ddda      	ble.n	80136de <EwCleanSurfaceCache+0x1a2>
 8013728:	4619      	mov	r1, r3
 801372a:	9804      	ldr	r0, [sp, #16]
 801372c:	4282      	cmp	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	ddd3      	ble.n	80136da <EwCleanSurfaceCache+0x19e>
 8013732:	4549      	cmp	r1, r9
 8013734:	d2d1      	bcs.n	80136da <EwCleanSurfaceCache+0x19e>
 8013736:	f851 2f08 	ldr.w	r2, [r1, #8]!
 801373a:	e7f6      	b.n	801372a <EwCleanSurfaceCache+0x1ee>
 801373c:	42a1      	cmp	r1, r4
 801373e:	f300 808e 	bgt.w	801385e <EwCleanSurfaceCache+0x322>
 8013742:	42a2      	cmp	r2, r4
 8013744:	dd08      	ble.n	8013758 <EwCleanSurfaceCache+0x21c>
 8013746:	9f07      	ldr	r7, [sp, #28]
 8013748:	980a      	ldr	r0, [sp, #40]	; 0x28
 801374a:	9e02      	ldr	r6, [sp, #8]
 801374c:	fb96 f0f0 	sdiv	r0, r6, r0
 8013750:	19c0      	adds	r0, r0, r7
 8013752:	d507      	bpl.n	8013764 <EwCleanSurfaceCache+0x228>
 8013754:	9805      	ldr	r0, [sp, #20]
 8013756:	4483      	add	fp, r0
 8013758:	9e02      	ldr	r6, [sp, #8]
 801375a:	9808      	ldr	r0, [sp, #32]
 801375c:	4406      	add	r6, r0
 801375e:	3404      	adds	r4, #4
 8013760:	9602      	str	r6, [sp, #8]
 8013762:	e7d5      	b.n	8013710 <EwCleanSurfaceCache+0x1d4>
 8013764:	9f01      	ldr	r7, [sp, #4]
 8013766:	ebb7 1f20 	cmp.w	r7, r0, asr #4
 801376a:	ddf5      	ble.n	8013758 <EwCleanSurfaceCache+0x21c>
 801376c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8013770:	9f06      	ldr	r7, [sp, #24]
 8013772:	f838 601e 	ldrh.w	r6, [r8, lr, lsl #1]
 8013776:	4584      	cmp	ip, r0
 8013778:	443e      	add	r6, r7
 801377a:	bfa8      	it	ge
 801377c:	4684      	movge	ip, r0
 801377e:	4582      	cmp	sl, r0
 8013780:	f828 601e 	strh.w	r6, [r8, lr, lsl #1]
 8013784:	bfb8      	it	lt
 8013786:	4682      	movlt	sl, r0
 8013788:	e7e6      	b.n	8013758 <EwCleanSurfaceCache+0x21c>
 801378a:	4625      	mov	r5, r4
 801378c:	e779      	b.n	8013682 <EwCleanSurfaceCache+0x146>
 801378e:	eb08 02c4 	add.w	r2, r8, r4, lsl #3
 8013792:	f858 9034 	ldr.w	r9, [r8, r4, lsl #3]
 8013796:	6852      	ldr	r2, [r2, #4]
 8013798:	9202      	str	r2, [sp, #8]
 801379a:	4627      	mov	r7, r4
 801379c:	f107 0a01 	add.w	sl, r7, #1
 80137a0:	f1b9 0f00 	cmp.w	r9, #0
 80137a4:	d15f      	bne.n	8013866 <EwCleanSurfaceCache+0x32a>
 80137a6:	9a02      	ldr	r2, [sp, #8]
 80137a8:	2a00      	cmp	r2, #0
 80137aa:	d15c      	bne.n	8013866 <EwCleanSurfaceCache+0x32a>
 80137ac:	9a04      	ldr	r2, [sp, #16]
 80137ae:	4552      	cmp	r2, sl
 80137b0:	d14e      	bne.n	8013850 <EwCleanSurfaceCache+0x314>
 80137b2:	f1bb 0f00 	cmp.w	fp, #0
 80137b6:	d049      	beq.n	801384c <EwCleanSurfaceCache+0x310>
 80137b8:	42a7      	cmp	r7, r4
 80137ba:	dd47      	ble.n	801384c <EwCleanSurfaceCache+0x310>
 80137bc:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 80137c0:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 80137c4:	2903      	cmp	r1, #3
 80137c6:	9305      	str	r3, [sp, #20]
 80137c8:	9b03      	ldr	r3, [sp, #12]
 80137ca:	bfd4      	ite	le
 80137cc:	0189      	lslle	r1, r1, #6
 80137ce:	21ff      	movgt	r1, #255	; 0xff
 80137d0:	1918      	adds	r0, r3, r4
 80137d2:	1b3a      	subs	r2, r7, r4
 80137d4:	b2c9      	uxtb	r1, r1
 80137d6:	f015 fff7 	bl	80297c8 <EwFill>
 80137da:	9b02      	ldr	r3, [sp, #8]
 80137dc:	ea53 0309 	orrs.w	r3, r3, r9
 80137e0:	9b05      	ldr	r3, [sp, #20]
 80137e2:	d033      	beq.n	801384c <EwCleanSurfaceCache+0x310>
 80137e4:	fa0b f189 	sxtah	r1, fp, r9
 80137e8:	eb01 4929 	add.w	r9, r1, r9, asr #16
 80137ec:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80137f0:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 80137f4:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 80137f8:	9902      	ldr	r1, [sp, #8]
 80137fa:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 80137fe:	2a04      	cmp	r2, #4
 8013800:	fa09 f981 	sxtah	r9, r9, r1
 8013804:	bfa8      	it	ge
 8013806:	2204      	movge	r2, #4
 8013808:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
 801380c:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8013810:	2804      	cmp	r0, #4
 8013812:	bfd4      	ite	le
 8013814:	1812      	addle	r2, r2, r0
 8013816:	3204      	addgt	r2, #4
 8013818:	2904      	cmp	r1, #4
 801381a:	bfd4      	ite	le
 801381c:	1852      	addle	r2, r2, r1
 801381e:	3204      	addgt	r2, #4
 8013820:	9902      	ldr	r1, [sp, #8]
 8013822:	eb09 4b21 	add.w	fp, r9, r1, asr #16
 8013826:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 801382a:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 801382e:	2904      	cmp	r1, #4
 8013830:	bfd4      	ite	le
 8013832:	1852      	addle	r2, r2, r1
 8013834:	3204      	addgt	r2, #4
 8013836:	b11a      	cbz	r2, 8013840 <EwCleanSurfaceCache+0x304>
 8013838:	9903      	ldr	r1, [sp, #12]
 801383a:	0112      	lsls	r2, r2, #4
 801383c:	3a01      	subs	r2, #1
 801383e:	55ca      	strb	r2, [r1, r7]
 8013840:	2200      	movs	r2, #0
 8013842:	f848 2037 	str.w	r2, [r8, r7, lsl #3]
 8013846:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 801384a:	607a      	str	r2, [r7, #4]
 801384c:	4654      	mov	r4, sl
 801384e:	e71c      	b.n	801368a <EwCleanSurfaceCache+0x14e>
 8013850:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
 8013854:	f858 903a 	ldr.w	r9, [r8, sl, lsl #3]
 8013858:	9202      	str	r2, [sp, #8]
 801385a:	4657      	mov	r7, sl
 801385c:	e79e      	b.n	801379c <EwCleanSurfaceCache+0x260>
 801385e:	42a2      	cmp	r2, r4
 8013860:	f77f af71 	ble.w	8013746 <EwCleanSurfaceCache+0x20a>
 8013864:	e778      	b.n	8013758 <EwCleanSurfaceCache+0x21c>
 8013866:	f1bb 0f00 	cmp.w	fp, #0
 801386a:	d0bb      	beq.n	80137e4 <EwCleanSurfaceCache+0x2a8>
 801386c:	42a7      	cmp	r7, r4
 801386e:	ddb9      	ble.n	80137e4 <EwCleanSurfaceCache+0x2a8>
 8013870:	e7a4      	b.n	80137bc <EwCleanSurfaceCache+0x280>
 8013872:	9b01      	ldr	r3, [sp, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	dd16      	ble.n	80138a6 <EwCleanSurfaceCache+0x36a>
 8013878:	2400      	movs	r4, #0
 801387a:	9b01      	ldr	r3, [sp, #4]
 801387c:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8013880:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 8013884:	1b1a      	subs	r2, r3, r4
 8013886:	9b03      	ldr	r3, [sp, #12]
 8013888:	2903      	cmp	r1, #3
 801388a:	4423      	add	r3, r4
 801388c:	bfd8      	it	le
 801388e:	0189      	lslle	r1, r1, #6
 8013890:	4618      	mov	r0, r3
 8013892:	bfd4      	ite	le
 8013894:	b2c9      	uxtble	r1, r1
 8013896:	21ff      	movgt	r1, #255	; 0xff
 8013898:	f015 ff96 	bl	80297c8 <EwFill>
 801389c:	9b01      	ldr	r3, [sp, #4]
 801389e:	1e5e      	subs	r6, r3, #1
 80138a0:	42ae      	cmp	r6, r5
 80138a2:	f6bf aeff 	bge.w	80136a4 <EwCleanSurfaceCache+0x168>
 80138a6:	2000      	movs	r0, #0
 80138a8:	b00d      	add	sp, #52	; 0x34
 80138aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b2:	b087      	sub	sp, #28
 80138b4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80138b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80138bc:	468a      	mov	sl, r1
 80138be:	9901      	ldr	r1, [sp, #4]
 80138c0:	9003      	str	r0, [sp, #12]
 80138c2:	f022 020f 	bic.w	r2, r2, #15
 80138c6:	3208      	adds	r2, #8
 80138c8:	ea4f 1801 	mov.w	r8, r1, lsl #4
 80138cc:	f04f 0b00 	mov.w	fp, #0
 80138d0:	f04f 35ff 	mov.w	r5, #4294967295
 80138d4:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80138d8:	681f      	ldr	r7, [r3, #0]
 80138da:	2f00      	cmp	r7, #0
 80138dc:	dc27      	bgt.n	801392e <EwCleanSurfaceCache+0x3f2>
 80138de:	ea4f 1428 	mov.w	r4, r8, asr #4
 80138e2:	112d      	asrs	r5, r5, #4
 80138e4:	f1bb 0f00 	cmp.w	fp, #0
 80138e8:	d073      	beq.n	80139d2 <EwCleanSurfaceCache+0x496>
 80138ea:	2c00      	cmp	r4, #0
 80138ec:	d071      	beq.n	80139d2 <EwCleanSurfaceCache+0x496>
 80138ee:	9803      	ldr	r0, [sp, #12]
 80138f0:	4622      	mov	r2, r4
 80138f2:	21ff      	movs	r1, #255	; 0xff
 80138f4:	f015 ff68 	bl	80297c8 <EwFill>
 80138f8:	f04f 0900 	mov.w	r9, #0
 80138fc:	1c6b      	adds	r3, r5, #1
 80138fe:	9304      	str	r3, [sp, #16]
 8013900:	f10a 0304 	add.w	r3, sl, #4
 8013904:	42ac      	cmp	r4, r5
 8013906:	dd66      	ble.n	80139d6 <EwCleanSurfaceCache+0x49a>
 8013908:	f1bb 0f00 	cmp.w	fp, #0
 801390c:	f000 80cc 	beq.w	8013aa8 <EwCleanSurfaceCache+0x56c>
 8013910:	45a9      	cmp	r9, r5
 8013912:	f300 80bb 	bgt.w	8013a8c <EwCleanSurfaceCache+0x550>
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	429c      	cmp	r4, r3
 801391a:	f2c0 80bb 	blt.w	8013a94 <EwCleanSurfaceCache+0x558>
 801391e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013920:	b10b      	cbz	r3, 8013926 <EwCleanSurfaceCache+0x3ea>
 8013922:	f8c3 9000 	str.w	r9, [r3]
 8013926:	eba5 0009 	sub.w	r0, r5, r9
 801392a:	3001      	adds	r0, #1
 801392c:	e0c0      	b.n	8013ab0 <EwCleanSurfaceCache+0x574>
 801392e:	3701      	adds	r7, #1
 8013930:	689e      	ldr	r6, [r3, #8]
 8013932:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013936:	3310      	adds	r3, #16
 8013938:	42bb      	cmp	r3, r7
 801393a:	d901      	bls.n	8013940 <EwCleanSurfaceCache+0x404>
 801393c:	3b04      	subs	r3, #4
 801393e:	e7cb      	b.n	80138d8 <EwCleanSurfaceCache+0x39c>
 8013940:	4296      	cmp	r6, r2
 8013942:	6819      	ldr	r1, [r3, #0]
 8013944:	da64      	bge.n	8013a10 <EwCleanSurfaceCache+0x4d4>
 8013946:	428a      	cmp	r2, r1
 8013948:	dd13      	ble.n	8013972 <EwCleanSurfaceCache+0x436>
 801394a:	4618      	mov	r0, r3
 801394c:	4291      	cmp	r1, r2
 801394e:	4603      	mov	r3, r0
 8013950:	da01      	bge.n	8013956 <EwCleanSurfaceCache+0x41a>
 8013952:	42b8      	cmp	r0, r7
 8013954:	d308      	bcc.n	8013968 <EwCleanSurfaceCache+0x42c>
 8013956:	f850 6c08 	ldr.w	r6, [r0, #-8]
 801395a:	4296      	cmp	r6, r2
 801395c:	db07      	blt.n	801396e <EwCleanSurfaceCache+0x432>
 801395e:	428a      	cmp	r2, r1
 8013960:	dc07      	bgt.n	8013972 <EwCleanSurfaceCache+0x436>
 8013962:	3308      	adds	r3, #8
 8013964:	460e      	mov	r6, r1
 8013966:	e7e7      	b.n	8013938 <EwCleanSurfaceCache+0x3fc>
 8013968:	f850 1f08 	ldr.w	r1, [r0, #8]!
 801396c:	e7ee      	b.n	801394c <EwCleanSurfaceCache+0x410>
 801396e:	4291      	cmp	r1, r2
 8013970:	dbf7      	blt.n	8013962 <EwCleanSurfaceCache+0x426>
 8013972:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8013976:	f853 4c04 	ldr.w	r4, [r3, #-4]
 801397a:	eba2 0c06 	sub.w	ip, r2, r6
 801397e:	1a24      	subs	r4, r4, r0
 8013980:	fb0c f404 	mul.w	r4, ip, r4
 8013984:	eba1 0c06 	sub.w	ip, r1, r6
 8013988:	fb94 fcfc 	sdiv	ip, r4, ip
 801398c:	9c02      	ldr	r4, [sp, #8]
 801398e:	1b00      	subs	r0, r0, r4
 8013990:	eb1c 0400 	adds.w	r4, ip, r0
 8013994:	d506      	bpl.n	80139a4 <EwCleanSurfaceCache+0x468>
 8013996:	428e      	cmp	r6, r1
 8013998:	bfb4      	ite	lt
 801399a:	2601      	movlt	r6, #1
 801399c:	f04f 36ff 	movge.w	r6, #4294967295
 80139a0:	44b3      	add	fp, r6
 80139a2:	e7de      	b.n	8013962 <EwCleanSurfaceCache+0x426>
 80139a4:	9801      	ldr	r0, [sp, #4]
 80139a6:	ebb0 1f24 	cmp.w	r0, r4, asr #4
 80139aa:	ddda      	ble.n	8013962 <EwCleanSurfaceCache+0x426>
 80139ac:	ea4f 0ca4 	mov.w	ip, r4, asr #2
 80139b0:	428e      	cmp	r6, r1
 80139b2:	bfac      	ite	ge
 80139b4:	46ce      	movge	lr, r9
 80139b6:	f04f 0e01 	movlt.w	lr, #1
 80139ba:	f83a 001c 	ldrh.w	r0, [sl, ip, lsl #1]
 80139be:	45a0      	cmp	r8, r4
 80139c0:	4470      	add	r0, lr
 80139c2:	bfa8      	it	ge
 80139c4:	46a0      	movge	r8, r4
 80139c6:	42a5      	cmp	r5, r4
 80139c8:	f82a 001c 	strh.w	r0, [sl, ip, lsl #1]
 80139cc:	bfb8      	it	lt
 80139ce:	4625      	movlt	r5, r4
 80139d0:	e7c7      	b.n	8013962 <EwCleanSurfaceCache+0x426>
 80139d2:	46a1      	mov	r9, r4
 80139d4:	e792      	b.n	80138fc <EwCleanSurfaceCache+0x3c0>
 80139d6:	eb0a 02c4 	add.w	r2, sl, r4, lsl #3
 80139da:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 80139de:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80139e2:	4627      	mov	r7, r4
 80139e4:	1c7a      	adds	r2, r7, #1
 80139e6:	9202      	str	r2, [sp, #8]
 80139e8:	b9f6      	cbnz	r6, 8013a28 <EwCleanSurfaceCache+0x4ec>
 80139ea:	f1b8 0f00 	cmp.w	r8, #0
 80139ee:	d11b      	bne.n	8013a28 <EwCleanSurfaceCache+0x4ec>
 80139f0:	9904      	ldr	r1, [sp, #16]
 80139f2:	428a      	cmp	r2, r1
 80139f4:	d105      	bne.n	8013a02 <EwCleanSurfaceCache+0x4c6>
 80139f6:	f1bb 0f00 	cmp.w	fp, #0
 80139fa:	d045      	beq.n	8013a88 <EwCleanSurfaceCache+0x54c>
 80139fc:	42a7      	cmp	r7, r4
 80139fe:	dd43      	ble.n	8013a88 <EwCleanSurfaceCache+0x54c>
 8013a00:	e017      	b.n	8013a32 <EwCleanSurfaceCache+0x4f6>
 8013a02:	9a02      	ldr	r2, [sp, #8]
 8013a04:	f85a 6032 	ldr.w	r6, [sl, r2, lsl #3]
 8013a08:	f853 8032 	ldr.w	r8, [r3, r2, lsl #3]
 8013a0c:	4617      	mov	r7, r2
 8013a0e:	e7e9      	b.n	80139e4 <EwCleanSurfaceCache+0x4a8>
 8013a10:	dda5      	ble.n	801395e <EwCleanSurfaceCache+0x422>
 8013a12:	428a      	cmp	r2, r1
 8013a14:	daa3      	bge.n	801395e <EwCleanSurfaceCache+0x422>
 8013a16:	4618      	mov	r0, r3
 8013a18:	4291      	cmp	r1, r2
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	dd9b      	ble.n	8013956 <EwCleanSurfaceCache+0x41a>
 8013a1e:	42b8      	cmp	r0, r7
 8013a20:	d299      	bcs.n	8013956 <EwCleanSurfaceCache+0x41a>
 8013a22:	f850 1f08 	ldr.w	r1, [r0, #8]!
 8013a26:	e7f7      	b.n	8013a18 <EwCleanSurfaceCache+0x4dc>
 8013a28:	f1bb 0f00 	cmp.w	fp, #0
 8013a2c:	d00c      	beq.n	8013a48 <EwCleanSurfaceCache+0x50c>
 8013a2e:	42a7      	cmp	r7, r4
 8013a30:	dd0a      	ble.n	8013a48 <EwCleanSurfaceCache+0x50c>
 8013a32:	9305      	str	r3, [sp, #20]
 8013a34:	9b03      	ldr	r3, [sp, #12]
 8013a36:	1b3a      	subs	r2, r7, r4
 8013a38:	1918      	adds	r0, r3, r4
 8013a3a:	21ff      	movs	r1, #255	; 0xff
 8013a3c:	f015 fec4 	bl	80297c8 <EwFill>
 8013a40:	ea56 0308 	orrs.w	r3, r6, r8
 8013a44:	9b05      	ldr	r3, [sp, #20]
 8013a46:	d01f      	beq.n	8013a88 <EwCleanSurfaceCache+0x54c>
 8013a48:	fa0b f186 	sxtah	r1, fp, r6
 8013a4c:	eb11 4626 	adds.w	r6, r1, r6, asr #16
 8013a50:	bf14      	ite	ne
 8013a52:	2201      	movne	r2, #1
 8013a54:	2200      	moveq	r2, #0
 8013a56:	2900      	cmp	r1, #0
 8013a58:	bf18      	it	ne
 8013a5a:	3201      	addne	r2, #1
 8013a5c:	fa06 f688 	sxtah	r6, r6, r8
 8013a60:	2e00      	cmp	r6, #0
 8013a62:	bf18      	it	ne
 8013a64:	3201      	addne	r2, #1
 8013a66:	eb16 4b28 	adds.w	fp, r6, r8, asr #16
 8013a6a:	bf14      	ite	ne
 8013a6c:	2101      	movne	r1, #1
 8013a6e:	2100      	moveq	r1, #0
 8013a70:	440a      	add	r2, r1
 8013a72:	2a02      	cmp	r2, #2
 8013a74:	bfc2      	ittt	gt
 8013a76:	9903      	ldrgt	r1, [sp, #12]
 8013a78:	22ff      	movgt	r2, #255	; 0xff
 8013a7a:	55ca      	strbgt	r2, [r1, r7]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f84a 2037 	str.w	r2, [sl, r7, lsl #3]
 8013a82:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
 8013a86:	607a      	str	r2, [r7, #4]
 8013a88:	9c02      	ldr	r4, [sp, #8]
 8013a8a:	e73b      	b.n	8013904 <EwCleanSurfaceCache+0x3c8>
 8013a8c:	9b01      	ldr	r3, [sp, #4]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	dd0d      	ble.n	8013aae <EwCleanSurfaceCache+0x572>
 8013a92:	2400      	movs	r4, #0
 8013a94:	9b01      	ldr	r3, [sp, #4]
 8013a96:	1b1a      	subs	r2, r3, r4
 8013a98:	9b03      	ldr	r3, [sp, #12]
 8013a9a:	4423      	add	r3, r4
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	21ff      	movs	r1, #255	; 0xff
 8013aa0:	f015 fe92 	bl	80297c8 <EwFill>
 8013aa4:	9b01      	ldr	r3, [sp, #4]
 8013aa6:	1e5d      	subs	r5, r3, #1
 8013aa8:	454d      	cmp	r5, r9
 8013aaa:	f6bf af38 	bge.w	801391e <EwCleanSurfaceCache+0x3e2>
 8013aae:	2000      	movs	r0, #0
 8013ab0:	b007      	add	sp, #28
 8013ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aba:	b08b      	sub	sp, #44	; 0x2c
 8013abc:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8013ac0:	9201      	str	r2, [sp, #4]
 8013ac2:	9307      	str	r3, [sp, #28]
 8013ac4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ac8:	9901      	ldr	r1, [sp, #4]
 8013aca:	f022 020f 	bic.w	r2, r2, #15
 8013ace:	1c95      	adds	r5, r2, #2
 8013ad0:	f102 090e 	add.w	r9, r2, #14
 8013ad4:	3212      	adds	r2, #18
 8013ad6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8013ada:	f04f 0b00 	mov.w	fp, #0
 8013ade:	f04f 38ff 	mov.w	r8, #4294967295
 8013ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	2a00      	cmp	r2, #0
 8013ae8:	dc2d      	bgt.n	8013b46 <EwCleanSurfaceCache+0x60a>
 8013aea:	ea4f 142e 	mov.w	r4, lr, asr #4
 8013aee:	ea4f 1628 	mov.w	r6, r8, asr #4
 8013af2:	f1bb 0f00 	cmp.w	fp, #0
 8013af6:	f000 8093 	beq.w	8013c20 <EwCleanSurfaceCache+0x6e4>
 8013afa:	2c00      	cmp	r4, #0
 8013afc:	f000 8090 	beq.w	8013c20 <EwCleanSurfaceCache+0x6e4>
 8013b00:	4b7d      	ldr	r3, [pc, #500]	; (8013cf8 <EwCleanSurfaceCache+0x7bc>)
 8013b02:	9803      	ldr	r0, [sp, #12]
 8013b04:	f813 100b 	ldrb.w	r1, [r3, fp]
 8013b08:	0189      	lsls	r1, r1, #6
 8013b0a:	3901      	subs	r1, #1
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	b2c9      	uxtb	r1, r1
 8013b10:	f015 fe5a 	bl	80297c8 <EwFill>
 8013b14:	2500      	movs	r5, #0
 8013b16:	1c73      	adds	r3, r6, #1
 8013b18:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8013cf8 <EwCleanSurfaceCache+0x7bc>
 8013b1c:	9304      	str	r3, [sp, #16]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	42b4      	cmp	r4, r6
 8013b22:	dd7f      	ble.n	8013c24 <EwCleanSurfaceCache+0x6e8>
 8013b24:	f1bb 0f00 	cmp.w	fp, #0
 8013b28:	f000 80de 	beq.w	8013ce8 <EwCleanSurfaceCache+0x7ac>
 8013b2c:	42b5      	cmp	r5, r6
 8013b2e:	f300 80c8 	bgt.w	8013cc2 <EwCleanSurfaceCache+0x786>
 8013b32:	9b01      	ldr	r3, [sp, #4]
 8013b34:	429c      	cmp	r4, r3
 8013b36:	f2c0 80c8 	blt.w	8013cca <EwCleanSurfaceCache+0x78e>
 8013b3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b3c:	b103      	cbz	r3, 8013b40 <EwCleanSurfaceCache+0x604>
 8013b3e:	601d      	str	r5, [r3, #0]
 8013b40:	1b70      	subs	r0, r6, r5
 8013b42:	3001      	adds	r0, #1
 8013b44:	e0d4      	b.n	8013cf0 <EwCleanSurfaceCache+0x7b4>
 8013b46:	f102 0a01 	add.w	sl, r2, #1
 8013b4a:	6899      	ldr	r1, [r3, #8]
 8013b4c:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013b50:	3310      	adds	r3, #16
 8013b52:	4553      	cmp	r3, sl
 8013b54:	d901      	bls.n	8013b5a <EwCleanSurfaceCache+0x61e>
 8013b56:	3b04      	subs	r3, #4
 8013b58:	e7c4      	b.n	8013ae4 <EwCleanSurfaceCache+0x5a8>
 8013b5a:	42a9      	cmp	r1, r5
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	da22      	bge.n	8013ba6 <EwCleanSurfaceCache+0x66a>
 8013b60:	4295      	cmp	r5, r2
 8013b62:	dd20      	ble.n	8013ba6 <EwCleanSurfaceCache+0x66a>
 8013b64:	4619      	mov	r1, r3
 8013b66:	42aa      	cmp	r2, r5
 8013b68:	460b      	mov	r3, r1
 8013b6a:	da01      	bge.n	8013b70 <EwCleanSurfaceCache+0x634>
 8013b6c:	4551      	cmp	r1, sl
 8013b6e:	d317      	bcc.n	8013ba0 <EwCleanSurfaceCache+0x664>
 8013b70:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8013b74:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8013b78:	9807      	ldr	r0, [sp, #28]
 8013b7a:	1a30      	subs	r0, r6, r0
 8013b7c:	9005      	str	r0, [sp, #20]
 8013b7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013b82:	1b80      	subs	r0, r0, r6
 8013b84:	0084      	lsls	r4, r0, #2
 8013b86:	1a6e      	subs	r6, r5, r1
 8013b88:	4370      	muls	r0, r6
 8013b8a:	9406      	str	r4, [sp, #24]
 8013b8c:	1a54      	subs	r4, r2, r1
 8013b8e:	9004      	str	r0, [sp, #16]
 8013b90:	9408      	str	r4, [sp, #32]
 8013b92:	4628      	mov	r0, r5
 8013b94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013b96:	4284      	cmp	r4, r0
 8013b98:	d110      	bne.n	8013bbc <EwCleanSurfaceCache+0x680>
 8013b9a:	3308      	adds	r3, #8
 8013b9c:	4611      	mov	r1, r2
 8013b9e:	e7d8      	b.n	8013b52 <EwCleanSurfaceCache+0x616>
 8013ba0:	f851 2f08 	ldr.w	r2, [r1, #8]!
 8013ba4:	e7df      	b.n	8013b66 <EwCleanSurfaceCache+0x62a>
 8013ba6:	4549      	cmp	r1, r9
 8013ba8:	dde4      	ble.n	8013b74 <EwCleanSurfaceCache+0x638>
 8013baa:	4619      	mov	r1, r3
 8013bac:	454a      	cmp	r2, r9
 8013bae:	460b      	mov	r3, r1
 8013bb0:	ddde      	ble.n	8013b70 <EwCleanSurfaceCache+0x634>
 8013bb2:	4551      	cmp	r1, sl
 8013bb4:	d2dc      	bcs.n	8013b70 <EwCleanSurfaceCache+0x634>
 8013bb6:	f851 2f08 	ldr.w	r2, [r1, #8]!
 8013bba:	e7f7      	b.n	8013bac <EwCleanSurfaceCache+0x670>
 8013bbc:	4281      	cmp	r1, r0
 8013bbe:	dc77      	bgt.n	8013cb0 <EwCleanSurfaceCache+0x774>
 8013bc0:	4282      	cmp	r2, r0
 8013bc2:	dd0d      	ble.n	8013be0 <EwCleanSurfaceCache+0x6a4>
 8013bc4:	9f05      	ldr	r7, [sp, #20]
 8013bc6:	9c08      	ldr	r4, [sp, #32]
 8013bc8:	9e04      	ldr	r6, [sp, #16]
 8013bca:	fb96 f4f4 	sdiv	r4, r6, r4
 8013bce:	19e4      	adds	r4, r4, r7
 8013bd0:	d50c      	bpl.n	8013bec <EwCleanSurfaceCache+0x6b0>
 8013bd2:	f3c0 0481 	ubfx	r4, r0, #2, #2
 8013bd6:	2601      	movs	r6, #1
 8013bd8:	fa06 f404 	lsl.w	r4, r6, r4
 8013bdc:	ea8b 0b04 	eor.w	fp, fp, r4
 8013be0:	9e04      	ldr	r6, [sp, #16]
 8013be2:	9c06      	ldr	r4, [sp, #24]
 8013be4:	4426      	add	r6, r4
 8013be6:	3004      	adds	r0, #4
 8013be8:	9604      	str	r6, [sp, #16]
 8013bea:	e7d3      	b.n	8013b94 <EwCleanSurfaceCache+0x658>
 8013bec:	9f01      	ldr	r7, [sp, #4]
 8013bee:	ebb7 1f24 	cmp.w	r7, r4, asr #4
 8013bf2:	ddf5      	ble.n	8013be0 <EwCleanSurfaceCache+0x6a4>
 8013bf4:	2601      	movs	r6, #1
 8013bf6:	f3c0 0781 	ubfx	r7, r0, #2, #2
 8013bfa:	ea4f 0ca4 	mov.w	ip, r4, asr #2
 8013bfe:	fa06 f707 	lsl.w	r7, r6, r7
 8013c02:	9e02      	ldr	r6, [sp, #8]
 8013c04:	f816 600c 	ldrb.w	r6, [r6, ip]
 8013c08:	45a6      	cmp	lr, r4
 8013c0a:	ea87 0706 	eor.w	r7, r7, r6
 8013c0e:	9e02      	ldr	r6, [sp, #8]
 8013c10:	bfa8      	it	ge
 8013c12:	46a6      	movge	lr, r4
 8013c14:	45a0      	cmp	r8, r4
 8013c16:	f806 700c 	strb.w	r7, [r6, ip]
 8013c1a:	bfb8      	it	lt
 8013c1c:	46a0      	movlt	r8, r4
 8013c1e:	e7df      	b.n	8013be0 <EwCleanSurfaceCache+0x6a4>
 8013c20:	4625      	mov	r5, r4
 8013c22:	e778      	b.n	8013b16 <EwCleanSurfaceCache+0x5da>
 8013c24:	9a02      	ldr	r2, [sp, #8]
 8013c26:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013c2a:	4627      	mov	r7, r4
 8013c2c:	f107 0a01 	add.w	sl, r7, #1
 8013c30:	f1b8 0f00 	cmp.w	r8, #0
 8013c34:	d13f      	bne.n	8013cb6 <EwCleanSurfaceCache+0x77a>
 8013c36:	9a04      	ldr	r2, [sp, #16]
 8013c38:	4552      	cmp	r2, sl
 8013c3a:	d134      	bne.n	8013ca6 <EwCleanSurfaceCache+0x76a>
 8013c3c:	f1bb 0f00 	cmp.w	fp, #0
 8013c40:	d02f      	beq.n	8013ca2 <EwCleanSurfaceCache+0x766>
 8013c42:	42a7      	cmp	r7, r4
 8013c44:	dd2d      	ble.n	8013ca2 <EwCleanSurfaceCache+0x766>
 8013c46:	f819 100b 	ldrb.w	r1, [r9, fp]
 8013c4a:	9b03      	ldr	r3, [sp, #12]
 8013c4c:	0189      	lsls	r1, r1, #6
 8013c4e:	3901      	subs	r1, #1
 8013c50:	1918      	adds	r0, r3, r4
 8013c52:	1b3a      	subs	r2, r7, r4
 8013c54:	b2c9      	uxtb	r1, r1
 8013c56:	f015 fdb7 	bl	80297c8 <EwFill>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	f1b8 0f00 	cmp.w	r8, #0
 8013c60:	d01f      	beq.n	8013ca2 <EwCleanSurfaceCache+0x766>
 8013c62:	fa4f f488 	sxtb.w	r4, r8
 8013c66:	ea84 040b 	eor.w	r4, r4, fp
 8013c6a:	f348 2007 	sbfx	r0, r8, #8, #8
 8013c6e:	f919 2004 	ldrsb.w	r2, [r9, r4]
 8013c72:	4044      	eors	r4, r0
 8013c74:	f348 4007 	sbfx	r0, r8, #16, #8
 8013c78:	4060      	eors	r0, r4
 8013c7a:	f919 1004 	ldrsb.w	r1, [r9, r4]
 8013c7e:	ea80 6b28 	eor.w	fp, r0, r8, asr #24
 8013c82:	4411      	add	r1, r2
 8013c84:	f919 2000 	ldrsb.w	r2, [r9, r0]
 8013c88:	4411      	add	r1, r2
 8013c8a:	f919 200b 	ldrsb.w	r2, [r9, fp]
 8013c8e:	1852      	adds	r2, r2, r1
 8013c90:	bf1f      	itttt	ne
 8013c92:	0112      	lslne	r2, r2, #4
 8013c94:	9903      	ldrne	r1, [sp, #12]
 8013c96:	f102 32ff 	addne.w	r2, r2, #4294967295
 8013c9a:	55ca      	strbne	r2, [r1, r7]
 8013c9c:	9a02      	ldr	r2, [sp, #8]
 8013c9e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8013ca2:	4654      	mov	r4, sl
 8013ca4:	e73c      	b.n	8013b20 <EwCleanSurfaceCache+0x5e4>
 8013ca6:	9a02      	ldr	r2, [sp, #8]
 8013ca8:	4657      	mov	r7, sl
 8013caa:	f852 802a 	ldr.w	r8, [r2, sl, lsl #2]
 8013cae:	e7bd      	b.n	8013c2c <EwCleanSurfaceCache+0x6f0>
 8013cb0:	4282      	cmp	r2, r0
 8013cb2:	dd87      	ble.n	8013bc4 <EwCleanSurfaceCache+0x688>
 8013cb4:	e794      	b.n	8013be0 <EwCleanSurfaceCache+0x6a4>
 8013cb6:	f1bb 0f00 	cmp.w	fp, #0
 8013cba:	d0d2      	beq.n	8013c62 <EwCleanSurfaceCache+0x726>
 8013cbc:	42a7      	cmp	r7, r4
 8013cbe:	ddd0      	ble.n	8013c62 <EwCleanSurfaceCache+0x726>
 8013cc0:	e7c1      	b.n	8013c46 <EwCleanSurfaceCache+0x70a>
 8013cc2:	9b01      	ldr	r3, [sp, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	dd12      	ble.n	8013cee <EwCleanSurfaceCache+0x7b2>
 8013cc8:	2400      	movs	r4, #0
 8013cca:	4b0b      	ldr	r3, [pc, #44]	; (8013cf8 <EwCleanSurfaceCache+0x7bc>)
 8013ccc:	f813 100b 	ldrb.w	r1, [r3, fp]
 8013cd0:	9b01      	ldr	r3, [sp, #4]
 8013cd2:	1b1a      	subs	r2, r3, r4
 8013cd4:	9b03      	ldr	r3, [sp, #12]
 8013cd6:	0189      	lsls	r1, r1, #6
 8013cd8:	4423      	add	r3, r4
 8013cda:	3901      	subs	r1, #1
 8013cdc:	4618      	mov	r0, r3
 8013cde:	b2c9      	uxtb	r1, r1
 8013ce0:	f015 fd72 	bl	80297c8 <EwFill>
 8013ce4:	9b01      	ldr	r3, [sp, #4]
 8013ce6:	1e5e      	subs	r6, r3, #1
 8013ce8:	42ae      	cmp	r6, r5
 8013cea:	f6bf af26 	bge.w	8013b3a <EwCleanSurfaceCache+0x5fe>
 8013cee:	2000      	movs	r0, #0
 8013cf0:	b00b      	add	sp, #44	; 0x2c
 8013cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf6:	bf00      	nop
 8013cf8:	08035bf4 	.word	0x08035bf4
 8013cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	b085      	sub	sp, #20
 8013d02:	4690      	mov	r8, r2
 8013d04:	468b      	mov	fp, r1
 8013d06:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8013d0a:	f021 010f 	bic.w	r1, r1, #15
 8013d0e:	9001      	str	r0, [sp, #4]
 8013d10:	9302      	str	r3, [sp, #8]
 8013d12:	3108      	adds	r1, #8
 8013d14:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8013d18:	2700      	movs	r7, #0
 8013d1a:	f04f 35ff 	mov.w	r5, #4294967295
 8013d1e:	f04f 0a01 	mov.w	sl, #1
 8013d22:	6813      	ldr	r3, [r2, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	dc21      	bgt.n	8013d6c <EwCleanSurfaceCache+0x830>
 8013d28:	1124      	asrs	r4, r4, #4
 8013d2a:	112d      	asrs	r5, r5, #4
 8013d2c:	2f00      	cmp	r7, #0
 8013d2e:	d06d      	beq.n	8013e0c <EwCleanSurfaceCache+0x8d0>
 8013d30:	2c00      	cmp	r4, #0
 8013d32:	d06b      	beq.n	8013e0c <EwCleanSurfaceCache+0x8d0>
 8013d34:	9801      	ldr	r0, [sp, #4]
 8013d36:	4622      	mov	r2, r4
 8013d38:	21ff      	movs	r1, #255	; 0xff
 8013d3a:	f015 fd45 	bl	80297c8 <EwFill>
 8013d3e:	f04f 0a00 	mov.w	sl, #0
 8013d42:	1c6b      	adds	r3, r5, #1
 8013d44:	9302      	str	r3, [sp, #8]
 8013d46:	42ac      	cmp	r4, r5
 8013d48:	dd62      	ble.n	8013e10 <EwCleanSurfaceCache+0x8d4>
 8013d4a:	2f00      	cmp	r7, #0
 8013d4c:	f000 80c7 	beq.w	8013ede <EwCleanSurfaceCache+0x9a2>
 8013d50:	45aa      	cmp	sl, r5
 8013d52:	f300 80b6 	bgt.w	8013ec2 <EwCleanSurfaceCache+0x986>
 8013d56:	4544      	cmp	r4, r8
 8013d58:	f2c0 80b7 	blt.w	8013eca <EwCleanSurfaceCache+0x98e>
 8013d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d5e:	b10b      	cbz	r3, 8013d64 <EwCleanSurfaceCache+0x828>
 8013d60:	f8c3 a000 	str.w	sl, [r3]
 8013d64:	eba5 000a 	sub.w	r0, r5, sl
 8013d68:	3001      	adds	r0, #1
 8013d6a:	e0bc      	b.n	8013ee6 <EwCleanSurfaceCache+0x9aa>
 8013d6c:	f103 0c01 	add.w	ip, r3, #1
 8013d70:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
 8013d74:	6893      	ldr	r3, [r2, #8]
 8013d76:	3210      	adds	r2, #16
 8013d78:	4562      	cmp	r2, ip
 8013d7a:	d901      	bls.n	8013d80 <EwCleanSurfaceCache+0x844>
 8013d7c:	3a04      	subs	r2, #4
 8013d7e:	e7d0      	b.n	8013d22 <EwCleanSurfaceCache+0x7e6>
 8013d80:	428b      	cmp	r3, r1
 8013d82:	6810      	ldr	r0, [r2, #0]
 8013d84:	f280 8089 	bge.w	8013e9a <EwCleanSurfaceCache+0x95e>
 8013d88:	4281      	cmp	r1, r0
 8013d8a:	dd13      	ble.n	8013db4 <EwCleanSurfaceCache+0x878>
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	4288      	cmp	r0, r1
 8013d90:	461a      	mov	r2, r3
 8013d92:	da01      	bge.n	8013d98 <EwCleanSurfaceCache+0x85c>
 8013d94:	4563      	cmp	r3, ip
 8013d96:	d308      	bcc.n	8013daa <EwCleanSurfaceCache+0x86e>
 8013d98:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8013d9c:	428b      	cmp	r3, r1
 8013d9e:	db07      	blt.n	8013db0 <EwCleanSurfaceCache+0x874>
 8013da0:	4281      	cmp	r1, r0
 8013da2:	dc07      	bgt.n	8013db4 <EwCleanSurfaceCache+0x878>
 8013da4:	3208      	adds	r2, #8
 8013da6:	4603      	mov	r3, r0
 8013da8:	e7e6      	b.n	8013d78 <EwCleanSurfaceCache+0x83c>
 8013daa:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8013dae:	e7ee      	b.n	8013d8e <EwCleanSurfaceCache+0x852>
 8013db0:	4288      	cmp	r0, r1
 8013db2:	dbf7      	blt.n	8013da4 <EwCleanSurfaceCache+0x868>
 8013db4:	f852 ec0c 	ldr.w	lr, [r2, #-12]
 8013db8:	f852 6c04 	ldr.w	r6, [r2, #-4]
 8013dbc:	eba1 0903 	sub.w	r9, r1, r3
 8013dc0:	eba6 060e 	sub.w	r6, r6, lr
 8013dc4:	fb09 f606 	mul.w	r6, r9, r6
 8013dc8:	1ac3      	subs	r3, r0, r3
 8013dca:	fb96 f3f3 	sdiv	r3, r6, r3
 8013dce:	9e02      	ldr	r6, [sp, #8]
 8013dd0:	ebae 0e06 	sub.w	lr, lr, r6
 8013dd4:	eb13 030e 	adds.w	r3, r3, lr
 8013dd8:	d502      	bpl.n	8013de0 <EwCleanSurfaceCache+0x8a4>
 8013dda:	f087 0701 	eor.w	r7, r7, #1
 8013dde:	e7e1      	b.n	8013da4 <EwCleanSurfaceCache+0x868>
 8013de0:	ebb8 1f23 	cmp.w	r8, r3, asr #4
 8013de4:	ea4f 1e23 	mov.w	lr, r3, asr #4
 8013de8:	dddc      	ble.n	8013da4 <EwCleanSurfaceCache+0x868>
 8013dea:	f81b 900e 	ldrb.w	r9, [fp, lr]
 8013dee:	f3c3 0681 	ubfx	r6, r3, #2, #2
 8013df2:	429c      	cmp	r4, r3
 8013df4:	fa0a f606 	lsl.w	r6, sl, r6
 8013df8:	ea86 0609 	eor.w	r6, r6, r9
 8013dfc:	bfa8      	it	ge
 8013dfe:	461c      	movge	r4, r3
 8013e00:	429d      	cmp	r5, r3
 8013e02:	f80b 600e 	strb.w	r6, [fp, lr]
 8013e06:	bfb8      	it	lt
 8013e08:	461d      	movlt	r5, r3
 8013e0a:	e7cb      	b.n	8013da4 <EwCleanSurfaceCache+0x868>
 8013e0c:	46a2      	mov	sl, r4
 8013e0e:	e798      	b.n	8013d42 <EwCleanSurfaceCache+0x806>
 8013e10:	f81b 6004 	ldrb.w	r6, [fp, r4]
 8013e14:	46a1      	mov	r9, r4
 8013e16:	f109 0301 	add.w	r3, r9, #1
 8013e1a:	2e00      	cmp	r6, #0
 8013e1c:	d14c      	bne.n	8013eb8 <EwCleanSurfaceCache+0x97c>
 8013e1e:	9a02      	ldr	r2, [sp, #8]
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d136      	bne.n	8013e92 <EwCleanSurfaceCache+0x956>
 8013e24:	2f00      	cmp	r7, #0
 8013e26:	d032      	beq.n	8013e8e <EwCleanSurfaceCache+0x952>
 8013e28:	45a1      	cmp	r9, r4
 8013e2a:	dd30      	ble.n	8013e8e <EwCleanSurfaceCache+0x952>
 8013e2c:	9303      	str	r3, [sp, #12]
 8013e2e:	9b01      	ldr	r3, [sp, #4]
 8013e30:	eba9 0204 	sub.w	r2, r9, r4
 8013e34:	1918      	adds	r0, r3, r4
 8013e36:	21ff      	movs	r1, #255	; 0xff
 8013e38:	f015 fcc6 	bl	80297c8 <EwFill>
 8013e3c:	9b03      	ldr	r3, [sp, #12]
 8013e3e:	b336      	cbz	r6, 8013e8e <EwCleanSurfaceCache+0x952>
 8013e40:	f006 0001 	and.w	r0, r6, #1
 8013e44:	ea80 0407 	eor.w	r4, r0, r7
 8013e48:	f3c6 0240 	ubfx	r2, r6, #1, #1
 8013e4c:	ea82 0104 	eor.w	r1, r2, r4
 8013e50:	1b12      	subs	r2, r2, r4
 8013e52:	bf18      	it	ne
 8013e54:	2201      	movne	r2, #1
 8013e56:	42b8      	cmp	r0, r7
 8013e58:	bf18      	it	ne
 8013e5a:	3201      	addne	r2, #1
 8013e5c:	f3c6 0480 	ubfx	r4, r6, #2, #1
 8013e60:	ea84 0001 	eor.w	r0, r4, r1
 8013e64:	428c      	cmp	r4, r1
 8013e66:	bf18      	it	ne
 8013e68:	3201      	addne	r2, #1
 8013e6a:	f3c6 06c0 	ubfx	r6, r6, #3, #1
 8013e6e:	4286      	cmp	r6, r0
 8013e70:	bf18      	it	ne
 8013e72:	3201      	addne	r2, #1
 8013e74:	2a02      	cmp	r2, #2
 8013e76:	bfc2      	ittt	gt
 8013e78:	9a01      	ldrgt	r2, [sp, #4]
 8013e7a:	f04f 31ff 	movgt.w	r1, #4294967295
 8013e7e:	f802 1009 	strbgt.w	r1, [r2, r9]
 8013e82:	f04f 0200 	mov.w	r2, #0
 8013e86:	f80b 2009 	strb.w	r2, [fp, r9]
 8013e8a:	ea86 0700 	eor.w	r7, r6, r0
 8013e8e:	461c      	mov	r4, r3
 8013e90:	e759      	b.n	8013d46 <EwCleanSurfaceCache+0x80a>
 8013e92:	f81b 6003 	ldrb.w	r6, [fp, r3]
 8013e96:	4699      	mov	r9, r3
 8013e98:	e7bd      	b.n	8013e16 <EwCleanSurfaceCache+0x8da>
 8013e9a:	dd81      	ble.n	8013da0 <EwCleanSurfaceCache+0x864>
 8013e9c:	4281      	cmp	r1, r0
 8013e9e:	f6bf af7f 	bge.w	8013da0 <EwCleanSurfaceCache+0x864>
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	4288      	cmp	r0, r1
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	f77f af76 	ble.w	8013d98 <EwCleanSurfaceCache+0x85c>
 8013eac:	4563      	cmp	r3, ip
 8013eae:	f4bf af73 	bcs.w	8013d98 <EwCleanSurfaceCache+0x85c>
 8013eb2:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8013eb6:	e7f5      	b.n	8013ea4 <EwCleanSurfaceCache+0x968>
 8013eb8:	2f00      	cmp	r7, #0
 8013eba:	d0c1      	beq.n	8013e40 <EwCleanSurfaceCache+0x904>
 8013ebc:	45a1      	cmp	r9, r4
 8013ebe:	ddbf      	ble.n	8013e40 <EwCleanSurfaceCache+0x904>
 8013ec0:	e7b4      	b.n	8013e2c <EwCleanSurfaceCache+0x8f0>
 8013ec2:	f1b8 0f00 	cmp.w	r8, #0
 8013ec6:	dd0d      	ble.n	8013ee4 <EwCleanSurfaceCache+0x9a8>
 8013ec8:	2400      	movs	r4, #0
 8013eca:	9b01      	ldr	r3, [sp, #4]
 8013ecc:	4423      	add	r3, r4
 8013ece:	eba8 0204 	sub.w	r2, r8, r4
 8013ed2:	21ff      	movs	r1, #255	; 0xff
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f015 fc77 	bl	80297c8 <EwFill>
 8013eda:	f108 35ff 	add.w	r5, r8, #4294967295
 8013ede:	4555      	cmp	r5, sl
 8013ee0:	f6bf af3c 	bge.w	8013d5c <EwCleanSurfaceCache+0x820>
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	b005      	add	sp, #20
 8013ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eec:	2800      	cmp	r0, #0
 8013eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ef0:	d027      	beq.n	8013f42 <EwCleanSurfaceCache+0xa06>
 8013ef2:	f04f 0601 	mov.w	r6, #1
 8013ef6:	f04f 0300 	mov.w	r3, #0
 8013efa:	bfb4      	ite	lt
 8013efc:	4247      	neglt	r7, r0
 8013efe:	4607      	movge	r7, r0
 8013f00:	253d      	movs	r5, #61	; 0x3d
 8013f02:	461c      	mov	r4, r3
 8013f04:	46b6      	mov	lr, r6
 8013f06:	0076      	lsls	r6, r6, #1
 8013f08:	42be      	cmp	r6, r7
 8013f0a:	d30e      	bcc.n	8013f2a <EwCleanSurfaceCache+0x9ee>
 8013f0c:	2d1f      	cmp	r5, #31
 8013f0e:	bfc6      	itte	gt
 8013f10:	f1a5 0c20 	subgt.w	ip, r5, #32
 8013f14:	fa0e fc0c 	lslgt.w	ip, lr, ip
 8013f18:	fa0e fc05 	lslle.w	ip, lr, r5
 8013f1c:	eba6 0607 	sub.w	r6, r6, r7
 8013f20:	bfcc      	ite	gt
 8013f22:	ea43 030c 	orrgt.w	r3, r3, ip
 8013f26:	ea44 040c 	orrle.w	r4, r4, ip
 8013f2a:	3d01      	subs	r5, #1
 8013f2c:	d2eb      	bcs.n	8013f06 <EwCleanSurfaceCache+0x9ca>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	da02      	bge.n	8013f38 <EwCleanSurfaceCache+0x9fc>
 8013f32:	4264      	negs	r4, r4
 8013f34:	b11c      	cbz	r4, 8013f3e <EwCleanSurfaceCache+0xa02>
 8013f36:	43db      	mvns	r3, r3
 8013f38:	600b      	str	r3, [r1, #0]
 8013f3a:	6014      	str	r4, [r2, #0]
 8013f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f3e:	425b      	negs	r3, r3
 8013f40:	e7fa      	b.n	8013f38 <EwCleanSurfaceCache+0x9fc>
 8013f42:	6008      	str	r0, [r1, #0]
 8013f44:	6010      	str	r0, [r2, #0]
 8013f46:	e7f9      	b.n	8013f3c <EwCleanSurfaceCache+0xa00>

08013f48 <EwDestroyIndex8Surface>:
 8013f48:	b410      	push	{r4}
 8013f4a:	b168      	cbz	r0, 8013f68 <EwDestroyIndex8Surface+0x20>
 8013f4c:	6943      	ldr	r3, [r0, #20]
 8013f4e:	4a08      	ldr	r2, [pc, #32]	; (8013f70 <EwDestroyIndex8Surface+0x28>)
 8013f50:	b93b      	cbnz	r3, 8013f62 <EwDestroyIndex8Surface+0x1a>
 8013f52:	e9d0 1400 	ldrd	r1, r4, [r0]
 8013f56:	6813      	ldr	r3, [r2, #0]
 8013f58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013f5c:	fb04 3311 	mls	r3, r4, r1, r3
 8013f60:	6013      	str	r3, [r2, #0]
 8013f62:	6813      	ldr	r3, [r2, #0]
 8013f64:	3b18      	subs	r3, #24
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f6c:	f015 bc02 	b.w	8029774 <EwFree>
 8013f70:	200002e8 	.word	0x200002e8

08013f74 <EwGetIndex8SurfaceMemory>:
 8013f74:	b530      	push	{r4, r5, lr}
 8013f76:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 8013f7a:	b10d      	cbz	r5, 8013f80 <EwGetIndex8SurfaceMemory+0xc>
 8013f7c:	6945      	ldr	r5, [r0, #20]
 8013f7e:	b995      	cbnz	r5, 8013fa6 <EwGetIndex8SurfaceMemory+0x32>
 8013f80:	6905      	ldr	r5, [r0, #16]
 8013f82:	fb02 1105 	mla	r1, r2, r5, r1
 8013f86:	6882      	ldr	r2, [r0, #8]
 8013f88:	60a5      	str	r5, [r4, #8]
 8013f8a:	4411      	add	r1, r2
 8013f8c:	6021      	str	r1, [r4, #0]
 8013f8e:	2100      	movs	r1, #0
 8013f90:	e9c4 1104 	strd	r1, r1, [r4, #16]
 8013f94:	60e1      	str	r1, [r4, #12]
 8013f96:	68c1      	ldr	r1, [r0, #12]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013f9e:	6062      	str	r2, [r4, #4]
 8013fa0:	61a3      	str	r3, [r4, #24]
 8013fa2:	4610      	mov	r0, r2
 8013fa4:	bd30      	pop	{r4, r5, pc}
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	e7fc      	b.n	8013fa4 <EwGetIndex8SurfaceMemory+0x30>

08013faa <EwGetIndex8SurfaceMemSize>:
 8013faa:	4348      	muls	r0, r1
 8013fac:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8013fb0:	4770      	bx	lr

08013fb2 <EwDestroyAlpha8Surface>:
 8013fb2:	b410      	push	{r4}
 8013fb4:	b148      	cbz	r0, 8013fca <EwDestroyAlpha8Surface+0x18>
 8013fb6:	4908      	ldr	r1, [pc, #32]	; (8013fd8 <EwDestroyAlpha8Surface+0x26>)
 8013fb8:	6903      	ldr	r3, [r0, #16]
 8013fba:	680a      	ldr	r2, [r1, #0]
 8013fbc:	b94b      	cbnz	r3, 8013fd2 <EwDestroyAlpha8Surface+0x20>
 8013fbe:	e9d0 3400 	ldrd	r3, r4, [r0]
 8013fc2:	4363      	muls	r3, r4
 8013fc4:	3314      	adds	r3, #20
 8013fc6:	1ad3      	subs	r3, r2, r3
 8013fc8:	600b      	str	r3, [r1, #0]
 8013fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fce:	f015 bbd1 	b.w	8029774 <EwFree>
 8013fd2:	2314      	movs	r3, #20
 8013fd4:	e7f7      	b.n	8013fc6 <EwDestroyAlpha8Surface+0x14>
 8013fd6:	bf00      	nop
 8013fd8:	200002e8 	.word	0x200002e8

08013fdc <EwGetAlpha8SurfaceMemory>:
 8013fdc:	b510      	push	{r4, lr}
 8013fde:	e9dd 4302 	ldrd	r4, r3, [sp, #8]
 8013fe2:	b10c      	cbz	r4, 8013fe8 <EwGetAlpha8SurfaceMemory+0xc>
 8013fe4:	6904      	ldr	r4, [r0, #16]
 8013fe6:	b974      	cbnz	r4, 8014006 <EwGetAlpha8SurfaceMemory+0x2a>
 8013fe8:	68c4      	ldr	r4, [r0, #12]
 8013fea:	fb02 1104 	mla	r1, r2, r4, r1
 8013fee:	6882      	ldr	r2, [r0, #8]
 8013ff0:	609c      	str	r4, [r3, #8]
 8013ff2:	4411      	add	r1, r2
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8013ffa:	2001      	movs	r0, #1
 8013ffc:	6019      	str	r1, [r3, #0]
 8013ffe:	6058      	str	r0, [r3, #4]
 8014000:	60da      	str	r2, [r3, #12]
 8014002:	619a      	str	r2, [r3, #24]
 8014004:	bd10      	pop	{r4, pc}
 8014006:	2000      	movs	r0, #0
 8014008:	e7fc      	b.n	8014004 <EwGetAlpha8SurfaceMemory+0x28>

0801400a <EwGetAlpha8SurfaceMemSize>:
 801400a:	4348      	muls	r0, r1
 801400c:	3014      	adds	r0, #20
 801400e:	4770      	bx	lr

08014010 <EwInitColorGradient>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	e9d2 4500 	ldrd	r4, r5, [r2]
 8014018:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 801401c:	4564      	cmp	r4, ip
 801401e:	f040 808a 	bne.w	8014136 <EwInitColorGradient+0x126>
 8014022:	ebb5 0e07 	subs.w	lr, r5, r7
 8014026:	bf18      	it	ne
 8014028:	f04f 0e01 	movne.w	lr, #1
 801402c:	42ac      	cmp	r4, r5
 801402e:	f040 8085 	bne.w	801413c <EwInitColorGradient+0x12c>
 8014032:	45bc      	cmp	ip, r7
 8014034:	f040 8082 	bne.w	801413c <EwInitColorGradient+0x12c>
 8014038:	f04f 0800 	mov.w	r8, #0
 801403c:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8014040:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014044:	b121      	cbz	r1, 8014050 <EwInitColorGradient+0x40>
 8014046:	f1be 0f00 	cmp.w	lr, #0
 801404a:	d001      	beq.n	8014050 <EwInitColorGradient+0x40>
 801404c:	fb92 f2f1 	sdiv	r2, r2, r1
 8014050:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 8014054:	0521      	lsls	r1, r4, #20
 8014056:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 801405a:	fa5f fa8c 	uxtb.w	sl, ip
 801405e:	6019      	str	r1, [r3, #0]
 8014060:	b2e1      	uxtb	r1, r4
 8014062:	ebaa 0a01 	sub.w	sl, sl, r1
 8014066:	0529      	lsls	r1, r5, #20
 8014068:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 801406c:	fa5f f987 	uxtb.w	r9, r7
 8014070:	6099      	str	r1, [r3, #8]
 8014072:	b2e9      	uxtb	r1, r5
 8014074:	eba9 0901 	sub.w	r9, r9, r1
 8014078:	0321      	lsls	r1, r4, #12
 801407a:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 801407e:	e9c3 e814 	strd	lr, r8, [r3, #80]	; 0x50
 8014082:	6119      	str	r1, [r3, #16]
 8014084:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8014088:	f3c4 2107 	ubfx	r1, r4, #8, #8
 801408c:	eba8 0801 	sub.w	r8, r8, r1
 8014090:	0329      	lsls	r1, r5, #12
 8014092:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8014096:	e9c3 6212 	strd	r6, r2, [r3, #72]	; 0x48
 801409a:	6199      	str	r1, [r3, #24]
 801409c:	f3c7 2607 	ubfx	r6, r7, #8, #8
 80140a0:	f3c5 2107 	ubfx	r1, r5, #8, #8
 80140a4:	1a76      	subs	r6, r6, r1
 80140a6:	0121      	lsls	r1, r4, #4
 80140a8:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80140ac:	f3cc 4007 	ubfx	r0, ip, #16, #8
 80140b0:	6219      	str	r1, [r3, #32]
 80140b2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80140b6:	1a40      	subs	r0, r0, r1
 80140b8:	0129      	lsls	r1, r5, #4
 80140ba:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 80140be:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80140c2:	6299      	str	r1, [r3, #40]	; 0x28
 80140c4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 80140c8:	ebab 0101 	sub.w	r1, fp, r1
 80140cc:	ea4f 1b14 	mov.w	fp, r4, lsr #4
 80140d0:	0e24      	lsrs	r4, r4, #24
 80140d2:	ebc4 641c 	rsb	r4, r4, ip, lsr #24
 80140d6:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 80140da:	0e2d      	lsrs	r5, r5, #24
 80140dc:	f00b 6b7f 	and.w	fp, fp, #267386880	; 0xff00000
 80140e0:	f00c 6c7f 	and.w	ip, ip, #267386880	; 0xff00000
 80140e4:	ebc5 6717 	rsb	r7, r5, r7, lsr #24
 80140e8:	f8c3 a004 	str.w	sl, [r3, #4]
 80140ec:	f8c3 900c 	str.w	r9, [r3, #12]
 80140f0:	f8c3 8014 	str.w	r8, [r3, #20]
 80140f4:	61de      	str	r6, [r3, #28]
 80140f6:	6258      	str	r0, [r3, #36]	; 0x24
 80140f8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80140fa:	f8c3 b030 	str.w	fp, [r3, #48]	; 0x30
 80140fe:	635c      	str	r4, [r3, #52]	; 0x34
 8014100:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
 8014104:	63df      	str	r7, [r3, #60]	; 0x3c
 8014106:	f1be 0f00 	cmp.w	lr, #0
 801410a:	d012      	beq.n	8014132 <EwInitColorGradient+0x122>
 801410c:	fb02 f50a 	mul.w	r5, r2, sl
 8014110:	605d      	str	r5, [r3, #4]
 8014112:	fb02 f509 	mul.w	r5, r2, r9
 8014116:	60dd      	str	r5, [r3, #12]
 8014118:	4356      	muls	r6, r2
 801411a:	fb02 f508 	mul.w	r5, r2, r8
 801411e:	4350      	muls	r0, r2
 8014120:	4351      	muls	r1, r2
 8014122:	4354      	muls	r4, r2
 8014124:	4357      	muls	r7, r2
 8014126:	615d      	str	r5, [r3, #20]
 8014128:	61de      	str	r6, [r3, #28]
 801412a:	6258      	str	r0, [r3, #36]	; 0x24
 801412c:	62d9      	str	r1, [r3, #44]	; 0x2c
 801412e:	635c      	str	r4, [r3, #52]	; 0x34
 8014130:	63df      	str	r7, [r3, #60]	; 0x3c
 8014132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014136:	f04f 0e01 	mov.w	lr, #1
 801413a:	e777      	b.n	801402c <EwInitColorGradient+0x1c>
 801413c:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8014140:	b108      	cbz	r0, 8014146 <EwInitColorGradient+0x136>
 8014142:	fb96 f6f0 	sdiv	r6, r6, r0
 8014146:	f04f 0801 	mov.w	r8, #1
 801414a:	e779      	b.n	8014040 <EwInitColorGradient+0x30>

0801414c <EwInitOpacityGradient>:
 801414c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014150:	e9d2 4500 	ldrd	r4, r5, [r2]
 8014154:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8014158:	4574      	cmp	r4, lr
 801415a:	d13b      	bne.n	80141d4 <EwInitOpacityGradient+0x88>
 801415c:	ebb5 070c 	subs.w	r7, r5, ip
 8014160:	bf18      	it	ne
 8014162:	2701      	movne	r7, #1
 8014164:	42ac      	cmp	r4, r5
 8014166:	d137      	bne.n	80141d8 <EwInitOpacityGradient+0x8c>
 8014168:	45e6      	cmp	lr, ip
 801416a:	d135      	bne.n	80141d8 <EwInitOpacityGradient+0x8c>
 801416c:	f04f 0800 	mov.w	r8, #0
 8014170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014174:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8014178:	b111      	cbz	r1, 8014180 <EwInitOpacityGradient+0x34>
 801417a:	b10f      	cbz	r7, 8014180 <EwInitOpacityGradient+0x34>
 801417c:	fb96 f6f1 	sdiv	r6, r6, r1
 8014180:	e9c3 2612 	strd	r2, r6, [r3, #72]	; 0x48
 8014184:	2200      	movs	r2, #0
 8014186:	e9c3 2200 	strd	r2, r2, [r3]
 801418a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801418e:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8014192:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8014196:	e9c3 2208 	strd	r2, r2, [r3, #32]
 801419a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 801419e:	0922      	lsrs	r2, r4, #4
 80141a0:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 80141a4:	631a      	str	r2, [r3, #48]	; 0x30
 80141a6:	092a      	lsrs	r2, r5, #4
 80141a8:	f002 627f 	and.w	r2, r2, #267386880	; 0xff00000
 80141ac:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 80141b0:	0e24      	lsrs	r4, r4, #24
 80141b2:	0e29      	lsrs	r1, r5, #24
 80141b4:	ebc4 641e 	rsb	r4, r4, lr, lsr #24
 80141b8:	639a      	str	r2, [r3, #56]	; 0x38
 80141ba:	ebc1 621c 	rsb	r2, r1, ip, lsr #24
 80141be:	e9c3 7814 	strd	r7, r8, [r3, #80]	; 0x50
 80141c2:	635c      	str	r4, [r3, #52]	; 0x34
 80141c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80141c6:	b11f      	cbz	r7, 80141d0 <EwInitOpacityGradient+0x84>
 80141c8:	4374      	muls	r4, r6
 80141ca:	4372      	muls	r2, r6
 80141cc:	635c      	str	r4, [r3, #52]	; 0x34
 80141ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80141d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d4:	2701      	movs	r7, #1
 80141d6:	e7c5      	b.n	8014164 <EwInitOpacityGradient+0x18>
 80141d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80141dc:	b108      	cbz	r0, 80141e2 <EwInitOpacityGradient+0x96>
 80141de:	fb92 f2f0 	sdiv	r2, r2, r0
 80141e2:	f04f 0801 	mov.w	r8, #1
 80141e6:	e7c5      	b.n	8014174 <EwInitOpacityGradient+0x28>

080141e8 <EwGetColorFromGradient>:
 80141e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ec:	e9d0 7914 	ldrd	r7, r9, [r0, #80]	; 0x50
 80141f0:	468a      	mov	sl, r1
 80141f2:	6805      	ldr	r5, [r0, #0]
 80141f4:	6903      	ldr	r3, [r0, #16]
 80141f6:	6a01      	ldr	r1, [r0, #32]
 80141f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80141fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80141fe:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8014202:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
 8014206:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8014208:	b317      	cbz	r7, 8014250 <EwGetColorFromGradient+0x68>
 801420a:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 801420e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014210:	42ba      	cmp	r2, r7
 8014212:	bfa8      	it	ge
 8014214:	463a      	movge	r2, r7
 8014216:	b15a      	cbz	r2, 8014230 <EwGetColorFromGradient+0x48>
 8014218:	6847      	ldr	r7, [r0, #4]
 801421a:	fb07 5502 	mla	r5, r7, r2, r5
 801421e:	6947      	ldr	r7, [r0, #20]
 8014220:	fb07 3302 	mla	r3, r7, r2, r3
 8014224:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8014226:	fb07 1102 	mla	r1, r7, r2, r1
 801422a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 801422c:	fb07 4402 	mla	r4, r7, r2, r4
 8014230:	f1b9 0f00 	cmp.w	r9, #0
 8014234:	d034      	beq.n	80142a0 <EwGetColorFromGradient+0xb8>
 8014236:	b15a      	cbz	r2, 8014250 <EwGetColorFromGradient+0x68>
 8014238:	68c7      	ldr	r7, [r0, #12]
 801423a:	fb07 8802 	mla	r8, r7, r2, r8
 801423e:	69c7      	ldr	r7, [r0, #28]
 8014240:	fb07 ee02 	mla	lr, r7, r2, lr
 8014244:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014246:	fb07 cc02 	mla	ip, r7, r2, ip
 801424a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801424c:	fb07 6602 	mla	r6, r7, r2, r6
 8014250:	f1b9 0f00 	cmp.w	r9, #0
 8014254:	d024      	beq.n	80142a0 <EwGetColorFromGradient+0xb8>
 8014256:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801425c:	4552      	cmp	r2, sl
 801425e:	bfa8      	it	ge
 8014260:	4652      	movge	r2, sl
 8014262:	b1ea      	cbz	r2, 80142a0 <EwGetColorFromGradient+0xb8>
 8014264:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014266:	4342      	muls	r2, r0
 8014268:	f005 607f 	and.w	r0, r5, #267386880	; 0xff00000
 801426c:	152d      	asrs	r5, r5, #20
 801426e:	ebc5 5528 	rsb	r5, r5, r8, asr #20
 8014272:	fb02 0505 	mla	r5, r2, r5, r0
 8014276:	f003 607f 	and.w	r0, r3, #267386880	; 0xff00000
 801427a:	151b      	asrs	r3, r3, #20
 801427c:	ebc3 532e 	rsb	r3, r3, lr, asr #20
 8014280:	fb02 0303 	mla	r3, r2, r3, r0
 8014284:	f001 607f 	and.w	r0, r1, #267386880	; 0xff00000
 8014288:	1509      	asrs	r1, r1, #20
 801428a:	ebc1 512c 	rsb	r1, r1, ip, asr #20
 801428e:	fb02 0101 	mla	r1, r2, r1, r0
 8014292:	f004 607f 	and.w	r0, r4, #267386880	; 0xff00000
 8014296:	1524      	asrs	r4, r4, #20
 8014298:	ebc4 5426 	rsb	r4, r4, r6, asr #20
 801429c:	fb02 0404 	mla	r4, r2, r4, r0
 80142a0:	1318      	asrs	r0, r3, #12
 80142a2:	1109      	asrs	r1, r1, #4
 80142a4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80142a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80142ac:	4308      	orrs	r0, r1
 80142ae:	ea40 5525 	orr.w	r5, r0, r5, asr #20
 80142b2:	0120      	lsls	r0, r4, #4
 80142b4:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80142b8:	4328      	orrs	r0, r5
 80142ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080142be <EwGetOpacityFromGradient>:
 80142be:	b570      	push	{r4, r5, r6, lr}
 80142c0:	e9d0 6514 	ldrd	r6, r5, [r0, #80]	; 0x50
 80142c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80142c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80142c8:	b176      	cbz	r6, 80142e8 <EwGetOpacityFromGradient+0x2a>
 80142ca:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80142cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80142d0:	42b2      	cmp	r2, r6
 80142d2:	bfa8      	it	ge
 80142d4:	4632      	movge	r2, r6
 80142d6:	b112      	cbz	r2, 80142de <EwGetOpacityFromGradient+0x20>
 80142d8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80142da:	fb06 3302 	mla	r3, r6, r2, r3
 80142de:	b1a5      	cbz	r5, 801430a <EwGetOpacityFromGradient+0x4c>
 80142e0:	b112      	cbz	r2, 80142e8 <EwGetOpacityFromGradient+0x2a>
 80142e2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80142e4:	fb06 4402 	mla	r4, r6, r2, r4
 80142e8:	b17d      	cbz	r5, 801430a <EwGetOpacityFromGradient+0x4c>
 80142ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80142ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80142f0:	4291      	cmp	r1, r2
 80142f2:	bfa8      	it	ge
 80142f4:	4611      	movge	r1, r2
 80142f6:	b141      	cbz	r1, 801430a <EwGetOpacityFromGradient+0x4c>
 80142f8:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80142fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80142fe:	151b      	asrs	r3, r3, #20
 8014300:	ebc3 5324 	rsb	r3, r3, r4, asr #20
 8014304:	4343      	muls	r3, r0
 8014306:	fb01 2303 	mla	r3, r1, r3, r2
 801430a:	0118      	lsls	r0, r3, #4
 801430c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8014310:	bd70      	pop	{r4, r5, r6, pc}

08014312 <EwRasterAlpha8Polygon>:
 8014312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014316:	b089      	sub	sp, #36	; 0x24
 8014318:	4615      	mov	r5, r2
 801431a:	e9dd b212 	ldrd	fp, r2, [sp, #72]	; 0x48
 801431e:	9205      	str	r2, [sp, #20]
 8014320:	e9dd 9216 	ldrd	r9, r2, [sp, #88]	; 0x58
 8014324:	e9dd a714 	ldrd	sl, r7, [sp, #80]	; 0x50
 8014328:	4680      	mov	r8, r0
 801432a:	460e      	mov	r6, r1
 801432c:	9206      	str	r2, [sp, #24]
 801432e:	bb0a      	cbnz	r2, 8014374 <EwRasterAlpha8Polygon+0x62>
 8014330:	f1b9 0f00 	cmp.w	r9, #0
 8014334:	bf14      	ite	ne
 8014336:	2104      	movne	r1, #4
 8014338:	2101      	moveq	r1, #1
 801433a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801433e:	f8d8 4000 	ldr.w	r4, [r8]
 8014342:	fb00 5003 	mla	r0, r0, r3, r5
 8014346:	fb0b f101 	mul.w	r1, fp, r1
 801434a:	4404      	add	r4, r0
 801434c:	4608      	mov	r0, r1
 801434e:	9107      	str	r1, [sp, #28]
 8014350:	f015 fa0e 	bl	8029770 <EwAlloc>
 8014354:	9907      	ldr	r1, [sp, #28]
 8014356:	4605      	mov	r5, r0
 8014358:	2800      	cmp	r0, #0
 801435a:	d162      	bne.n	8014422 <EwRasterAlpha8Polygon+0x110>
 801435c:	200f      	movs	r0, #15
 801435e:	f005 fc53 	bl	8019c08 <EwImmediateReclaimMemory>
 8014362:	9907      	ldr	r1, [sp, #28]
 8014364:	2800      	cmp	r0, #0
 8014366:	d1f1      	bne.n	801434c <EwRasterAlpha8Polygon+0x3a>
 8014368:	200f      	movs	r0, #15
 801436a:	b009      	add	sp, #36	; 0x24
 801436c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014370:	f004 bc9a 	b.w	8018ca8 <EwError>
 8014374:	2108      	movs	r1, #8
 8014376:	e7e0      	b.n	801433a <EwRasterAlpha8Polygon+0x28>
 8014378:	9b06      	ldr	r3, [sp, #24]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d039      	beq.n	80143f2 <EwRasterAlpha8Polygon+0xe0>
 801437e:	f1b9 0f00 	cmp.w	r9, #0
 8014382:	d02c      	beq.n	80143de <EwRasterAlpha8Polygon+0xcc>
 8014384:	2300      	movs	r3, #0
 8014386:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801438a:	9700      	str	r7, [sp, #0]
 801438c:	4653      	mov	r3, sl
 801438e:	465a      	mov	r2, fp
 8014390:	4629      	mov	r1, r5
 8014392:	4620      	mov	r0, r4
 8014394:	f7ff f940 	bl	8013618 <EwCleanSurfaceCache+0xdc>
 8014398:	9b05      	ldr	r3, [sp, #20]
 801439a:	3b01      	subs	r3, #1
 801439c:	9305      	str	r3, [sp, #20]
 801439e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143a2:	3710      	adds	r7, #16
 80143a4:	441c      	add	r4, r3
 80143a6:	9b05      	ldr	r3, [sp, #20]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	dce5      	bgt.n	8014378 <EwRasterAlpha8Polygon+0x66>
 80143ac:	4b1e      	ldr	r3, [pc, #120]	; (8014428 <EwRasterAlpha8Polygon+0x116>)
 80143ae:	681a      	ldr	r2, [r3, #0]
 80143b0:	4b1e      	ldr	r3, [pc, #120]	; (801442c <EwRasterAlpha8Polygon+0x11a>)
 80143b2:	6819      	ldr	r1, [r3, #0]
 80143b4:	3204      	adds	r2, #4
 80143b6:	428a      	cmp	r2, r1
 80143b8:	bfc8      	it	gt
 80143ba:	601a      	strgt	r2, [r3, #0]
 80143bc:	491c      	ldr	r1, [pc, #112]	; (8014430 <EwRasterAlpha8Polygon+0x11e>)
 80143be:	4b1d      	ldr	r3, [pc, #116]	; (8014434 <EwRasterAlpha8Polygon+0x122>)
 80143c0:	6809      	ldr	r1, [r1, #0]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	440b      	add	r3, r1
 80143c6:	4413      	add	r3, r2
 80143c8:	4a1b      	ldr	r2, [pc, #108]	; (8014438 <EwRasterAlpha8Polygon+0x126>)
 80143ca:	6811      	ldr	r1, [r2, #0]
 80143cc:	4628      	mov	r0, r5
 80143ce:	428b      	cmp	r3, r1
 80143d0:	bfc8      	it	gt
 80143d2:	6013      	strgt	r3, [r2, #0]
 80143d4:	b009      	add	sp, #36	; 0x24
 80143d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143da:	f015 b9cb 	b.w	8029774 <EwFree>
 80143de:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80143e2:	9700      	str	r7, [sp, #0]
 80143e4:	4653      	mov	r3, sl
 80143e6:	465a      	mov	r2, fp
 80143e8:	4629      	mov	r1, r5
 80143ea:	4620      	mov	r0, r4
 80143ec:	f7ff fa5f 	bl	80138ae <EwCleanSurfaceCache+0x372>
 80143f0:	e7d2      	b.n	8014398 <EwRasterAlpha8Polygon+0x86>
 80143f2:	f1b9 0f00 	cmp.w	r9, #0
 80143f6:	d00a      	beq.n	801440e <EwRasterAlpha8Polygon+0xfc>
 80143f8:	9b06      	ldr	r3, [sp, #24]
 80143fa:	9700      	str	r7, [sp, #0]
 80143fc:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014400:	465a      	mov	r2, fp
 8014402:	4653      	mov	r3, sl
 8014404:	4629      	mov	r1, r5
 8014406:	4620      	mov	r0, r4
 8014408:	f7ff fb55 	bl	8013ab6 <EwCleanSurfaceCache+0x57a>
 801440c:	e7c4      	b.n	8014398 <EwRasterAlpha8Polygon+0x86>
 801440e:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8014412:	9700      	str	r7, [sp, #0]
 8014414:	4653      	mov	r3, sl
 8014416:	465a      	mov	r2, fp
 8014418:	4629      	mov	r1, r5
 801441a:	4620      	mov	r0, r4
 801441c:	f7ff fc6e 	bl	8013cfc <EwCleanSurfaceCache+0x7c0>
 8014420:	e7ba      	b.n	8014398 <EwRasterAlpha8Polygon+0x86>
 8014422:	f015 f9cd 	bl	80297c0 <EwZero>
 8014426:	e7be      	b.n	80143a6 <EwRasterAlpha8Polygon+0x94>
 8014428:	200002e8 	.word	0x200002e8
 801442c:	20000304 	.word	0x20000304
 8014430:	200002e4 	.word	0x200002e4
 8014434:	200002d8 	.word	0x200002d8
 8014438:	200002ec 	.word	0x200002ec

0801443c <EwEmulateLine>:
 801443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014440:	b097      	sub	sp, #92	; 0x5c
 8014442:	1a5c      	subs	r4, r3, r1
 8014444:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 8014448:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801444a:	ebac 0e02 	sub.w	lr, ip, r2
 801444e:	2c00      	cmp	r4, #0
 8014450:	bfb8      	it	lt
 8014452:	4264      	neglt	r4, r4
 8014454:	f1be 0f00 	cmp.w	lr, #0
 8014458:	bfb8      	it	lt
 801445a:	f1ce 0e00 	rsblt	lr, lr, #0
 801445e:	4574      	cmp	r4, lr
 8014460:	46a1      	mov	r9, r4
 8014462:	4682      	mov	sl, r0
 8014464:	bfb8      	it	lt
 8014466:	46f1      	movlt	r9, lr
 8014468:	6828      	ldr	r0, [r5, #0]
 801446a:	9000      	str	r0, [sp, #0]
 801446c:	4574      	cmp	r4, lr
 801446e:	6928      	ldr	r0, [r5, #16]
 8014470:	9004      	str	r0, [sp, #16]
 8014472:	bfca      	itet	gt
 8014474:	ea4f 480e 	movgt.w	r8, lr, lsl #16
 8014478:	f44f 3880 	movle.w	r8, #65536	; 0x10000
 801447c:	fb98 f8f4 	sdivgt	r8, r8, r4
 8014480:	4574      	cmp	r4, lr
 8014482:	6a28      	ldr	r0, [r5, #32]
 8014484:	9008      	str	r0, [sp, #32]
 8014486:	bfb6      	itet	lt
 8014488:	0424      	lsllt	r4, r4, #16
 801448a:	f44f 3b80 	movge.w	fp, #65536	; 0x10000
 801448e:	fb94 fbfe 	sdivlt	fp, r4, lr
 8014492:	428b      	cmp	r3, r1
 8014494:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014496:	900c      	str	r0, [sp, #48]	; 0x30
 8014498:	ea4f 4601 	mov.w	r6, r1, lsl #16
 801449c:	ea4f 4702 	mov.w	r7, r2, lsl #16
 80144a0:	bfb8      	it	lt
 80144a2:	f1cb 0b00 	rsblt	fp, fp, #0
 80144a6:	4594      	cmp	ip, r2
 80144a8:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
 80144ac:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 80144b0:	da01      	bge.n	80144b6 <EwEmulateLine+0x7a>
 80144b2:	f1c8 0800 	rsb	r8, r8, #0
 80144b6:	f1b9 0f00 	cmp.w	r9, #0
 80144ba:	d102      	bne.n	80144c2 <EwEmulateLine+0x86>
 80144bc:	b017      	add	sp, #92	; 0x5c
 80144be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144c4:	ebb3 4f26 	cmp.w	r3, r6, asr #16
 80144c8:	ea4f 4126 	mov.w	r1, r6, asr #16
 80144cc:	dc0f      	bgt.n	80144ee <EwEmulateLine+0xb2>
 80144ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80144d0:	4299      	cmp	r1, r3
 80144d2:	da0c      	bge.n	80144ee <EwEmulateLine+0xb2>
 80144d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80144d6:	ebb3 4f27 	cmp.w	r3, r7, asr #16
 80144da:	ea4f 4227 	mov.w	r2, r7, asr #16
 80144de:	dc06      	bgt.n	80144ee <EwEmulateLine+0xb2>
 80144e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80144e2:	429a      	cmp	r2, r3
 80144e4:	da03      	bge.n	80144ee <EwEmulateLine+0xb2>
 80144e6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80144e8:	466b      	mov	r3, sp
 80144ea:	4650      	mov	r0, sl
 80144ec:	47a0      	blx	r4
 80144ee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80144f0:	445e      	add	r6, fp
 80144f2:	4447      	add	r7, r8
 80144f4:	b17b      	cbz	r3, 8014516 <EwEmulateLine+0xda>
 80144f6:	686a      	ldr	r2, [r5, #4]
 80144f8:	9b00      	ldr	r3, [sp, #0]
 80144fa:	4413      	add	r3, r2
 80144fc:	9300      	str	r3, [sp, #0]
 80144fe:	696a      	ldr	r2, [r5, #20]
 8014500:	9b04      	ldr	r3, [sp, #16]
 8014502:	4413      	add	r3, r2
 8014504:	9304      	str	r3, [sp, #16]
 8014506:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014508:	9b08      	ldr	r3, [sp, #32]
 801450a:	4413      	add	r3, r2
 801450c:	9308      	str	r3, [sp, #32]
 801450e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8014510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014512:	4413      	add	r3, r2
 8014514:	930c      	str	r3, [sp, #48]	; 0x30
 8014516:	f109 39ff 	add.w	r9, r9, #4294967295
 801451a:	e7cc      	b.n	80144b6 <EwEmulateLine+0x7a>

0801451c <EwEmulateFill>:
 801451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014520:	ed2d 8b02 	vpush	{d8}
 8014524:	b09d      	sub	sp, #116	; 0x74
 8014526:	4605      	mov	r5, r0
 8014528:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801452a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801452c:	9003      	str	r0, [sp, #12]
 801452e:	6828      	ldr	r0, [r5, #0]
 8014530:	9004      	str	r0, [sp, #16]
 8014532:	68e8      	ldr	r0, [r5, #12]
 8014534:	9005      	str	r0, [sp, #20]
 8014536:	e9d5 0601 	ldrd	r0, r6, [r5, #4]
 801453a:	4348      	muls	r0, r1
 801453c:	fb06 0602 	mla	r6, r6, r2, r0
 8014540:	9804      	ldr	r0, [sp, #16]
 8014542:	f8d4 9000 	ldr.w	r9, [r4]
 8014546:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801454a:	6a27      	ldr	r7, [r4, #32]
 801454c:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8014550:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8014554:	4406      	add	r6, r0
 8014556:	602e      	str	r6, [r5, #0]
 8014558:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
 801455c:	4371      	muls	r1, r6
 801455e:	fb00 1202 	mla	r2, r0, r2, r1
 8014562:	9905      	ldr	r1, [sp, #20]
 8014564:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8014566:	440a      	add	r2, r1
 8014568:	60ea      	str	r2, [r5, #12]
 801456a:	68a2      	ldr	r2, [r4, #8]
 801456c:	9201      	str	r2, [sp, #4]
 801456e:	69a2      	ldr	r2, [r4, #24]
 8014570:	9200      	str	r2, [sp, #0]
 8014572:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014574:	ee08 3a10 	vmov	s16, r3
 8014578:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801457a:	b1e2      	cbz	r2, 80145b6 <EwEmulateFill+0x9a>
 801457c:	b1db      	cbz	r3, 80145b6 <EwEmulateFill+0x9a>
 801457e:	6862      	ldr	r2, [r4, #4]
 8014580:	9901      	ldr	r1, [sp, #4]
 8014582:	fb02 9903 	mla	r9, r2, r3, r9
 8014586:	68e2      	ldr	r2, [r4, #12]
 8014588:	fb02 1203 	mla	r2, r2, r3, r1
 801458c:	9201      	str	r2, [sp, #4]
 801458e:	6962      	ldr	r2, [r4, #20]
 8014590:	9900      	ldr	r1, [sp, #0]
 8014592:	fb02 8803 	mla	r8, r2, r3, r8
 8014596:	69e2      	ldr	r2, [r4, #28]
 8014598:	fb02 1203 	mla	r2, r2, r3, r1
 801459c:	9200      	str	r2, [sp, #0]
 801459e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80145a0:	fb02 7703 	mla	r7, r2, r3, r7
 80145a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145a6:	fb02 bb03 	mla	fp, r2, r3, fp
 80145aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80145ac:	fb02 6603 	mla	r6, r2, r3, r6
 80145b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80145b2:	fb02 aa03 	mla	sl, r2, r3, sl
 80145b6:	f009 637f 	and.w	r3, r9, #267386880	; 0xff00000
 80145ba:	9306      	str	r3, [sp, #24]
 80145bc:	f008 637f 	and.w	r3, r8, #267386880	; 0xff00000
 80145c0:	930a      	str	r3, [sp, #40]	; 0x28
 80145c2:	f007 637f 	and.w	r3, r7, #267386880	; 0xff00000
 80145c6:	930e      	str	r3, [sp, #56]	; 0x38
 80145c8:	f006 637f 	and.w	r3, r6, #267386880	; 0xff00000
 80145cc:	9312      	str	r3, [sp, #72]	; 0x48
 80145ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80145d0:	9302      	str	r3, [sp, #8]
 80145d2:	9b02      	ldr	r3, [sp, #8]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	dc08      	bgt.n	80145ea <EwEmulateFill+0xce>
 80145d8:	9b04      	ldr	r3, [sp, #16]
 80145da:	602b      	str	r3, [r5, #0]
 80145dc:	9b05      	ldr	r3, [sp, #20]
 80145de:	60eb      	str	r3, [r5, #12]
 80145e0:	b01d      	add	sp, #116	; 0x74
 80145e2:	ecbd 8b02 	vpop	{d8}
 80145e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ea:	9a03      	ldr	r2, [sp, #12]
 80145ec:	2a00      	cmp	r2, #0
 80145ee:	d033      	beq.n	8014658 <EwEmulateFill+0x13c>
 80145f0:	9901      	ldr	r1, [sp, #4]
 80145f2:	9b00      	ldr	r3, [sp, #0]
 80145f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80145f6:	ea4f 5029 	mov.w	r0, r9, asr #20
 80145fa:	ebc0 5021 	rsb	r0, r0, r1, asr #20
 80145fe:	ea4f 5c27 	mov.w	ip, r7, asr #20
 8014602:	ea4f 5128 	mov.w	r1, r8, asr #20
 8014606:	ea4f 5e26 	mov.w	lr, r6, asr #20
 801460a:	ebc1 5123 	rsb	r1, r1, r3, asr #20
 801460e:	ebcc 5c2b 	rsb	ip, ip, fp, asr #20
 8014612:	ebce 5e2a 	rsb	lr, lr, sl, asr #20
 8014616:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014618:	4350      	muls	r0, r2
 801461a:	4351      	muls	r1, r2
 801461c:	fb02 fc0c 	mul.w	ip, r2, ip
 8014620:	fb02 f20e 	mul.w	r2, r2, lr
 8014624:	9007      	str	r0, [sp, #28]
 8014626:	910b      	str	r1, [sp, #44]	; 0x2c
 8014628:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801462c:	9213      	str	r2, [sp, #76]	; 0x4c
 801462e:	b18b      	cbz	r3, 8014654 <EwEmulateFill+0x138>
 8014630:	9b06      	ldr	r3, [sp, #24]
 8014632:	469e      	mov	lr, r3
 8014634:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014636:	fb03 e000 	mla	r0, r3, r0, lr
 801463a:	9006      	str	r0, [sp, #24]
 801463c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801463e:	fb03 0101 	mla	r1, r3, r1, r0
 8014642:	910a      	str	r1, [sp, #40]	; 0x28
 8014644:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014646:	fb03 110c 	mla	r1, r3, ip, r1
 801464a:	910e      	str	r1, [sp, #56]	; 0x38
 801464c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801464e:	fb03 1202 	mla	r2, r3, r2, r1
 8014652:	9212      	str	r2, [sp, #72]	; 0x48
 8014654:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014656:	9303      	str	r3, [sp, #12]
 8014658:	ee18 1a10 	vmov	r1, s16
 801465c:	aa06      	add	r2, sp, #24
 801465e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014660:	4628      	mov	r0, r5
 8014662:	4798      	blx	r3
 8014664:	682a      	ldr	r2, [r5, #0]
 8014666:	68a9      	ldr	r1, [r5, #8]
 8014668:	440a      	add	r2, r1
 801466a:	602a      	str	r2, [r5, #0]
 801466c:	6969      	ldr	r1, [r5, #20]
 801466e:	68ea      	ldr	r2, [r5, #12]
 8014670:	440a      	add	r2, r1
 8014672:	60ea      	str	r2, [r5, #12]
 8014674:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014676:	b1fa      	cbz	r2, 80146b8 <EwEmulateFill+0x19c>
 8014678:	6862      	ldr	r2, [r4, #4]
 801467a:	9b01      	ldr	r3, [sp, #4]
 801467c:	4491      	add	r9, r2
 801467e:	f009 627f 	and.w	r2, r9, #267386880	; 0xff00000
 8014682:	9206      	str	r2, [sp, #24]
 8014684:	68e2      	ldr	r2, [r4, #12]
 8014686:	4413      	add	r3, r2
 8014688:	6962      	ldr	r2, [r4, #20]
 801468a:	9301      	str	r3, [sp, #4]
 801468c:	4490      	add	r8, r2
 801468e:	f008 627f 	and.w	r2, r8, #267386880	; 0xff00000
 8014692:	9b00      	ldr	r3, [sp, #0]
 8014694:	920a      	str	r2, [sp, #40]	; 0x28
 8014696:	69e2      	ldr	r2, [r4, #28]
 8014698:	4413      	add	r3, r2
 801469a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	4417      	add	r7, r2
 80146a0:	f007 627f 	and.w	r2, r7, #267386880	; 0xff00000
 80146a4:	920e      	str	r2, [sp, #56]	; 0x38
 80146a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80146a8:	4493      	add	fp, r2
 80146aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80146ac:	4416      	add	r6, r2
 80146ae:	f006 627f 	and.w	r2, r6, #267386880	; 0xff00000
 80146b2:	9212      	str	r2, [sp, #72]	; 0x48
 80146b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80146b6:	4492      	add	sl, r2
 80146b8:	9b02      	ldr	r3, [sp, #8]
 80146ba:	3b01      	subs	r3, #1
 80146bc:	e788      	b.n	80145d0 <EwEmulateFill+0xb4>

080146be <EwEmulateCopy>:
 80146be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c2:	b0a1      	sub	sp, #132	; 0x84
 80146c4:	460d      	mov	r5, r1
 80146c6:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80146c8:	6887      	ldr	r7, [r0, #8]
 80146ca:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80146cc:	9604      	str	r6, [sp, #16]
 80146ce:	6806      	ldr	r6, [r0, #0]
 80146d0:	9605      	str	r6, [sp, #20]
 80146d2:	68c6      	ldr	r6, [r0, #12]
 80146d4:	9606      	str	r6, [sp, #24]
 80146d6:	682e      	ldr	r6, [r5, #0]
 80146d8:	9607      	str	r6, [sp, #28]
 80146da:	68ee      	ldr	r6, [r5, #12]
 80146dc:	9608      	str	r6, [sp, #32]
 80146de:	6846      	ldr	r6, [r0, #4]
 80146e0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80146e2:	f8d4 9000 	ldr.w	r9, [r4]
 80146e6:	4356      	muls	r6, r2
 80146e8:	fb07 6603 	mla	r6, r7, r3, r6
 80146ec:	9f05      	ldr	r7, [sp, #20]
 80146ee:	443e      	add	r6, r7
 80146f0:	6006      	str	r6, [r0, #0]
 80146f2:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
 80146f6:	437a      	muls	r2, r7
 80146f8:	fb06 2203 	mla	r2, r6, r3, r2
 80146fc:	9b06      	ldr	r3, [sp, #24]
 80146fe:	682e      	ldr	r6, [r5, #0]
 8014700:	441a      	add	r2, r3
 8014702:	e9dd ec2c 	ldrd	lr, ip, [sp, #176]	; 0xb0
 8014706:	60c2      	str	r2, [r0, #12]
 8014708:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 801470c:	fb0e f303 	mul.w	r3, lr, r3
 8014710:	fb02 320c 	mla	r2, r2, ip, r3
 8014714:	4432      	add	r2, r6
 8014716:	602a      	str	r2, [r5, #0]
 8014718:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801471c:	68ee      	ldr	r6, [r5, #12]
 801471e:	fb0e f202 	mul.w	r2, lr, r2
 8014722:	fb03 230c 	mla	r3, r3, ip, r2
 8014726:	4433      	add	r3, r6
 8014728:	60eb      	str	r3, [r5, #12]
 801472a:	68a3      	ldr	r3, [r4, #8]
 801472c:	9302      	str	r3, [sp, #8]
 801472e:	69a3      	ldr	r3, [r4, #24]
 8014730:	9301      	str	r3, [sp, #4]
 8014732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014738:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801473c:	6a27      	ldr	r7, [r4, #32]
 801473e:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8014742:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8014746:	b1f3      	cbz	r3, 8014786 <EwEmulateCopy+0xc8>
 8014748:	b1e9      	cbz	r1, 8014786 <EwEmulateCopy+0xc8>
 801474a:	6863      	ldr	r3, [r4, #4]
 801474c:	9a02      	ldr	r2, [sp, #8]
 801474e:	fb03 9901 	mla	r9, r3, r1, r9
 8014752:	68e3      	ldr	r3, [r4, #12]
 8014754:	fb03 2301 	mla	r3, r3, r1, r2
 8014758:	9302      	str	r3, [sp, #8]
 801475a:	6963      	ldr	r3, [r4, #20]
 801475c:	9a01      	ldr	r2, [sp, #4]
 801475e:	fb03 8801 	mla	r8, r3, r1, r8
 8014762:	69e3      	ldr	r3, [r4, #28]
 8014764:	fb03 2301 	mla	r3, r3, r1, r2
 8014768:	9301      	str	r3, [sp, #4]
 801476a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801476c:	9a00      	ldr	r2, [sp, #0]
 801476e:	fb03 7701 	mla	r7, r3, r1, r7
 8014772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014774:	fb03 bb01 	mla	fp, r3, r1, fp
 8014778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801477a:	fb03 2301 	mla	r3, r3, r1, r2
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014782:	fb03 aa01 	mla	sl, r3, r1, sl
 8014786:	f009 637f 	and.w	r3, r9, #267386880	; 0xff00000
 801478a:	930a      	str	r3, [sp, #40]	; 0x28
 801478c:	f008 637f 	and.w	r3, r8, #267386880	; 0xff00000
 8014790:	930e      	str	r3, [sp, #56]	; 0x38
 8014792:	f007 637f 	and.w	r3, r7, #267386880	; 0xff00000
 8014796:	9312      	str	r3, [sp, #72]	; 0x48
 8014798:	9b00      	ldr	r3, [sp, #0]
 801479a:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 801479e:	9316      	str	r3, [sp, #88]	; 0x58
 80147a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80147a2:	9303      	str	r3, [sp, #12]
 80147a4:	9b03      	ldr	r3, [sp, #12]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	dc0a      	bgt.n	80147c0 <EwEmulateCopy+0x102>
 80147aa:	9b05      	ldr	r3, [sp, #20]
 80147ac:	6003      	str	r3, [r0, #0]
 80147ae:	9b06      	ldr	r3, [sp, #24]
 80147b0:	60c3      	str	r3, [r0, #12]
 80147b2:	9b07      	ldr	r3, [sp, #28]
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	9b08      	ldr	r3, [sp, #32]
 80147b8:	60eb      	str	r3, [r5, #12]
 80147ba:	b021      	add	sp, #132	; 0x84
 80147bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c0:	9b04      	ldr	r3, [sp, #16]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d034      	beq.n	8014830 <EwEmulateCopy+0x172>
 80147c6:	9a02      	ldr	r2, [sp, #8]
 80147c8:	9e01      	ldr	r6, [sp, #4]
 80147ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80147cc:	ea4f 5129 	mov.w	r1, r9, asr #20
 80147d0:	ebc1 5122 	rsb	r1, r1, r2, asr #20
 80147d4:	ea4f 5228 	mov.w	r2, r8, asr #20
 80147d8:	ebc2 5226 	rsb	r2, r2, r6, asr #20
 80147dc:	9e00      	ldr	r6, [sp, #0]
 80147de:	ea4f 5c27 	mov.w	ip, r7, asr #20
 80147e2:	ea4f 5e26 	mov.w	lr, r6, asr #20
 80147e6:	ebcc 5c2b 	rsb	ip, ip, fp, asr #20
 80147ea:	ebce 5e2a 	rsb	lr, lr, sl, asr #20
 80147ee:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 80147f0:	4359      	muls	r1, r3
 80147f2:	435a      	muls	r2, r3
 80147f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80147f8:	fb03 f30e 	mul.w	r3, r3, lr
 80147fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80147fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8014800:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8014804:	9317      	str	r3, [sp, #92]	; 0x5c
 8014806:	b18e      	cbz	r6, 801482c <EwEmulateCopy+0x16e>
 8014808:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801480a:	46b6      	mov	lr, r6
 801480c:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 801480e:	fb06 e101 	mla	r1, r6, r1, lr
 8014812:	910a      	str	r1, [sp, #40]	; 0x28
 8014814:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014816:	fb06 1202 	mla	r2, r6, r2, r1
 801481a:	920e      	str	r2, [sp, #56]	; 0x38
 801481c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801481e:	fb06 220c 	mla	r2, r6, ip, r2
 8014822:	9212      	str	r2, [sp, #72]	; 0x48
 8014824:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014826:	fb06 2303 	mla	r3, r6, r3, r2
 801482a:	9316      	str	r3, [sp, #88]	; 0x58
 801482c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801482e:	9304      	str	r3, [sp, #16]
 8014830:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014832:	9009      	str	r0, [sp, #36]	; 0x24
 8014834:	ab0a      	add	r3, sp, #40	; 0x28
 8014836:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 8014838:	4629      	mov	r1, r5
 801483a:	47b0      	blx	r6
 801483c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801483e:	6803      	ldr	r3, [r0, #0]
 8014840:	6882      	ldr	r2, [r0, #8]
 8014842:	4413      	add	r3, r2
 8014844:	6003      	str	r3, [r0, #0]
 8014846:	6942      	ldr	r2, [r0, #20]
 8014848:	68c3      	ldr	r3, [r0, #12]
 801484a:	4413      	add	r3, r2
 801484c:	60c3      	str	r3, [r0, #12]
 801484e:	68aa      	ldr	r2, [r5, #8]
 8014850:	682b      	ldr	r3, [r5, #0]
 8014852:	4413      	add	r3, r2
 8014854:	602b      	str	r3, [r5, #0]
 8014856:	696a      	ldr	r2, [r5, #20]
 8014858:	68eb      	ldr	r3, [r5, #12]
 801485a:	4413      	add	r3, r2
 801485c:	60eb      	str	r3, [r5, #12]
 801485e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014860:	b30b      	cbz	r3, 80148a6 <EwEmulateCopy+0x1e8>
 8014862:	6863      	ldr	r3, [r4, #4]
 8014864:	9a02      	ldr	r2, [sp, #8]
 8014866:	4499      	add	r9, r3
 8014868:	f009 637f 	and.w	r3, r9, #267386880	; 0xff00000
 801486c:	930a      	str	r3, [sp, #40]	; 0x28
 801486e:	68e3      	ldr	r3, [r4, #12]
 8014870:	441a      	add	r2, r3
 8014872:	6963      	ldr	r3, [r4, #20]
 8014874:	9202      	str	r2, [sp, #8]
 8014876:	4498      	add	r8, r3
 8014878:	f008 637f 	and.w	r3, r8, #267386880	; 0xff00000
 801487c:	9a01      	ldr	r2, [sp, #4]
 801487e:	930e      	str	r3, [sp, #56]	; 0x38
 8014880:	69e3      	ldr	r3, [r4, #28]
 8014882:	441a      	add	r2, r3
 8014884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014886:	9201      	str	r2, [sp, #4]
 8014888:	441f      	add	r7, r3
 801488a:	f007 637f 	and.w	r3, r7, #267386880	; 0xff00000
 801488e:	9312      	str	r3, [sp, #72]	; 0x48
 8014890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014892:	9a00      	ldr	r2, [sp, #0]
 8014894:	449b      	add	fp, r3
 8014896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014898:	441a      	add	r2, r3
 801489a:	f002 637f 	and.w	r3, r2, #267386880	; 0xff00000
 801489e:	9316      	str	r3, [sp, #88]	; 0x58
 80148a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80148a2:	9200      	str	r2, [sp, #0]
 80148a4:	449a      	add	sl, r3
 80148a6:	9b03      	ldr	r3, [sp, #12]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	e77a      	b.n	80147a2 <EwEmulateCopy+0xe4>

080148ac <EwEmulateWarp>:
 80148ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b0:	b0d5      	sub	sp, #340	; 0x154
 80148b2:	4684      	mov	ip, r0
 80148b4:	9029      	str	r0, [sp, #164]	; 0xa4
 80148b6:	460c      	mov	r4, r1
 80148b8:	9211      	str	r2, [sp, #68]	; 0x44
 80148ba:	930d      	str	r3, [sp, #52]	; 0x34
 80148bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148c0:	ae46      	add	r6, sp, #280	; 0x118
 80148c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80148c4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80148c8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80148cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80148ce:	ae4d      	add	r6, sp, #308	; 0x134
 80148d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80148d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80148d6:	e9dd 7e68 	ldrd	r7, lr, [sp, #416]	; 0x1a0
 80148da:	9d62      	ldr	r5, [sp, #392]	; 0x188
 80148dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80148e0:	9a61      	ldr	r2, [sp, #388]	; 0x184
 80148e2:	995e      	ldr	r1, [sp, #376]	; 0x178
 80148e4:	2300      	movs	r3, #0
 80148e6:	428a      	cmp	r2, r1
 80148e8:	e9cd 333c 	strd	r3, r3, [sp, #240]	; 0xf0
 80148ec:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
 80148f0:	e9cd 3340 	strd	r3, r3, [sp, #256]	; 0x100
 80148f4:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
 80148f8:	d107      	bne.n	801490a <EwEmulateWarp+0x5e>
 80148fa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80148fc:	9961      	ldr	r1, [sp, #388]	; 0x184
 80148fe:	428a      	cmp	r2, r1
 8014900:	d103      	bne.n	801490a <EwEmulateWarp+0x5e>
 8014902:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8014904:	1a9a      	subs	r2, r3, r2
 8014906:	4253      	negs	r3, r2
 8014908:	4153      	adcs	r3, r2
 801490a:	9313      	str	r3, [sp, #76]	; 0x4c
 801490c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801490e:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014912:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8014916:	f200 8132 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 801491a:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801491c:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014920:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8014924:	f200 812b 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 8014928:	f505 43fa 	add.w	r3, r5, #32000	; 0x7d00
 801492c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8014930:	f200 8125 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 8014934:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014936:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 801493a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 801493e:	f200 811e 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 8014942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014944:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014948:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 801494c:	f200 8117 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 8014950:	9b60      	ldr	r3, [sp, #384]	; 0x180
 8014952:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014956:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 801495a:	f200 8110 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 801495e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8014960:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014964:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8014968:	f200 8109 	bhi.w	8014b7e <EwEmulateWarp+0x2d2>
 801496c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801496e:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8014972:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8014976:	bf94      	ite	ls
 8014978:	2300      	movls	r3, #0
 801497a:	2301      	movhi	r3, #1
 801497c:	930a      	str	r3, [sp, #40]	; 0x28
 801497e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8014980:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8014982:	9966      	ldr	r1, [sp, #408]	; 0x198
 8014984:	437b      	muls	r3, r7
 8014986:	fb02 330e 	mla	r3, r2, lr, r3
 801498a:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 801498c:	4413      	add	r3, r2
 801498e:	934d      	str	r3, [sp, #308]	; 0x134
 8014990:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8014992:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014994:	435f      	muls	r7, r3
 8014996:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8014998:	fb03 7e0e 	mla	lr, r3, lr, r7
 801499c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801499e:	9f50      	ldr	r7, [sp, #320]	; 0x140
 80149a0:	00db      	lsls	r3, r3, #3
 80149a2:	932b      	str	r3, [sp, #172]	; 0xac
 80149a4:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	932c      	str	r3, [sp, #176]	; 0xb0
 80149aa:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80149ac:	4293      	cmp	r3, r2
 80149ae:	bfa8      	it	ge
 80149b0:	4613      	movge	r3, r2
 80149b2:	461c      	mov	r4, r3
 80149b4:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80149b6:	429c      	cmp	r4, r3
 80149b8:	bfa8      	it	ge
 80149ba:	461c      	movge	r4, r3
 80149bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149be:	429c      	cmp	r4, r3
 80149c0:	bfa8      	it	ge
 80149c2:	461c      	movge	r4, r3
 80149c4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80149c6:	428b      	cmp	r3, r1
 80149c8:	bfb8      	it	lt
 80149ca:	460b      	movlt	r3, r1
 80149cc:	9960      	ldr	r1, [sp, #384]	; 0x180
 80149ce:	3403      	adds	r4, #3
 80149d0:	428b      	cmp	r3, r1
 80149d2:	f024 0207 	bic.w	r2, r4, #7
 80149d6:	bfb8      	it	lt
 80149d8:	460b      	movlt	r3, r1
 80149da:	9c6d      	ldr	r4, [sp, #436]	; 0x1b4
 80149dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80149de:	00e4      	lsls	r4, r4, #3
 80149e0:	428b      	cmp	r3, r1
 80149e2:	bfb8      	it	lt
 80149e4:	460b      	movlt	r3, r1
 80149e6:	4294      	cmp	r4, r2
 80149e8:	bfb8      	it	lt
 80149ea:	4614      	movlt	r4, r2
 80149ec:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80149ee:	3303      	adds	r3, #3
 80149f0:	00d2      	lsls	r2, r2, #3
 80149f2:	f023 0307 	bic.w	r3, r3, #7
 80149f6:	429a      	cmp	r2, r3
 80149f8:	bfa8      	it	ge
 80149fa:	461a      	movge	r2, r3
 80149fc:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80149fe:	922d      	str	r2, [sp, #180]	; 0xb4
 8014a00:	1a5b      	subs	r3, r3, r1
 8014a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a06:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8014a08:	1a9b      	subs	r3, r3, r2
 8014a0a:	9314      	str	r3, [sp, #80]	; 0x50
 8014a0c:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 8014a0e:	9b61      	ldr	r3, [sp, #388]	; 0x184
 8014a10:	4477      	add	r7, lr
 8014a12:	1a9b      	subs	r3, r3, r2
 8014a14:	9750      	str	r7, [sp, #320]	; 0x140
 8014a16:	9315      	str	r3, [sp, #84]	; 0x54
 8014a18:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8014a1a:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014a1c:	1a9b      	subs	r3, r3, r2
 8014a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a20:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8014a22:	9a61      	ldr	r2, [sp, #388]	; 0x184
 8014a24:	1aeb      	subs	r3, r5, r3
 8014a26:	9316      	str	r3, [sp, #88]	; 0x58
 8014a28:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014a2a:	1a9b      	subs	r3, r3, r2
 8014a2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a2e:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014a30:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8014a32:	1a9b      	subs	r3, r3, r2
 8014a34:	9310      	str	r3, [sp, #64]	; 0x40
 8014a36:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014a38:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8014a3a:	1aeb      	subs	r3, r5, r3
 8014a3c:	9318      	str	r3, [sp, #96]	; 0x60
 8014a3e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014a40:	1a9b      	subs	r3, r3, r2
 8014a42:	9319      	str	r3, [sp, #100]	; 0x64
 8014a44:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a48:	1a5b      	subs	r3, r3, r1
 8014a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8014a4c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014a4e:	1a9b      	subs	r3, r3, r2
 8014a50:	931a      	str	r3, [sp, #104]	; 0x68
 8014a52:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 8014a54:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8014a56:	1a9b      	subs	r3, r3, r2
 8014a58:	931b      	str	r3, [sp, #108]	; 0x6c
 8014a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a5c:	b19b      	cbz	r3, 8014a86 <EwEmulateWarp+0x1da>
 8014a5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a60:	aa3d      	add	r2, sp, #244	; 0xf4
 8014a62:	a93c      	add	r1, sp, #240	; 0xf0
 8014a64:	f7ff fa42 	bl	8013eec <EwCleanSurfaceCache+0x9b0>
 8014a68:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014a6a:	aa3f      	add	r2, sp, #252	; 0xfc
 8014a6c:	a93e      	add	r1, sp, #248	; 0xf8
 8014a6e:	f7ff fa3d 	bl	8013eec <EwCleanSurfaceCache+0x9b0>
 8014a72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014a74:	aa41      	add	r2, sp, #260	; 0x104
 8014a76:	a940      	add	r1, sp, #256	; 0x100
 8014a78:	f7ff fa38 	bl	8013eec <EwCleanSurfaceCache+0x9b0>
 8014a7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014a7e:	aa43      	add	r2, sp, #268	; 0x10c
 8014a80:	a942      	add	r1, sp, #264	; 0x108
 8014a82:	f7ff fa33 	bl	8013eec <EwCleanSurfaceCache+0x9b0>
 8014a86:	1d23      	adds	r3, r4, #4
 8014a88:	9307      	str	r3, [sp, #28]
 8014a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014a92:	105b      	asrs	r3, r3, #1
 8014a94:	932e      	str	r3, [sp, #184]	; 0xb8
 8014a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a98:	105b      	asrs	r3, r3, #1
 8014a9a:	932f      	str	r3, [sp, #188]	; 0xbc
 8014a9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	9339      	str	r3, [sp, #228]	; 0xe4
 8014aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aa4:	f1c3 0304 	rsb	r3, r3, #4
 8014aa8:	4423      	add	r3, r4
 8014aaa:	435a      	muls	r2, r3
 8014aac:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014ab0:	9228      	str	r2, [sp, #160]	; 0xa0
 8014ab2:	9a61      	ldr	r2, [sp, #388]	; 0x184
 8014ab4:	00d2      	lsls	r2, r2, #3
 8014ab6:	9238      	str	r2, [sp, #224]	; 0xe0
 8014ab8:	9a61      	ldr	r2, [sp, #388]	; 0x184
 8014aba:	435a      	muls	r2, r3
 8014abc:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014ac0:	9227      	str	r2, [sp, #156]	; 0x9c
 8014ac2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ac4:	00d2      	lsls	r2, r2, #3
 8014ac6:	9236      	str	r2, [sp, #216]	; 0xd8
 8014ac8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014aca:	435a      	muls	r2, r3
 8014acc:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014ad0:	9226      	str	r2, [sp, #152]	; 0x98
 8014ad2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ad4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ad6:	00d2      	lsls	r2, r2, #3
 8014ad8:	9233      	str	r2, [sp, #204]	; 0xcc
 8014ada:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014adc:	f1c2 0204 	rsb	r2, r2, #4
 8014ae0:	4422      	add	r2, r4
 8014ae2:	4351      	muls	r1, r2
 8014ae4:	eb01 0160 	add.w	r1, r1, r0, asr #1
 8014ae8:	9124      	str	r1, [sp, #144]	; 0x90
 8014aea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014aec:	00c9      	lsls	r1, r1, #3
 8014aee:	9132      	str	r1, [sp, #200]	; 0xc8
 8014af0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014af2:	4351      	muls	r1, r2
 8014af4:	eb01 0160 	add.w	r1, r1, r0, asr #1
 8014af8:	9122      	str	r1, [sp, #136]	; 0x88
 8014afa:	9964      	ldr	r1, [sp, #400]	; 0x190
 8014afc:	00c9      	lsls	r1, r1, #3
 8014afe:	912a      	str	r1, [sp, #168]	; 0xa8
 8014b00:	9964      	ldr	r1, [sp, #400]	; 0x190
 8014b02:	434a      	muls	r2, r1
 8014b04:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8014b08:	9221      	str	r2, [sp, #132]	; 0x84
 8014b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014b0e:	00d2      	lsls	r2, r2, #3
 8014b10:	9231      	str	r2, [sp, #196]	; 0xc4
 8014b12:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014b14:	f1c2 0204 	rsb	r2, r2, #4
 8014b18:	4414      	add	r4, r2
 8014b1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b1c:	4362      	muls	r2, r4
 8014b1e:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014b22:	921f      	str	r2, [sp, #124]	; 0x7c
 8014b24:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014b26:	4362      	muls	r2, r4
 8014b28:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014b2c:	9220      	str	r2, [sp, #128]	; 0x80
 8014b2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014b30:	00d2      	lsls	r2, r2, #3
 8014b32:	9230      	str	r2, [sp, #192]	; 0xc0
 8014b34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014b36:	4354      	muls	r4, r2
 8014b38:	eb04 0261 	add.w	r2, r4, r1, asr #1
 8014b3c:	921e      	str	r2, [sp, #120]	; 0x78
 8014b3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b42:	00d2      	lsls	r2, r2, #3
 8014b44:	9237      	str	r2, [sp, #220]	; 0xdc
 8014b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b48:	435a      	muls	r2, r3
 8014b4a:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014b4e:	9225      	str	r2, [sp, #148]	; 0x94
 8014b50:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8014b52:	00d2      	lsls	r2, r2, #3
 8014b54:	9235      	str	r2, [sp, #212]	; 0xd4
 8014b56:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8014b58:	435a      	muls	r2, r3
 8014b5a:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8014b5e:	9223      	str	r2, [sp, #140]	; 0x8c
 8014b60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014b62:	00d2      	lsls	r2, r2, #3
 8014b64:	9234      	str	r2, [sp, #208]	; 0xd0
 8014b66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014b68:	4353      	muls	r3, r2
 8014b6a:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8014b6e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014b70:	931d      	str	r3, [sp, #116]	; 0x74
 8014b72:	9b07      	ldr	r3, [sp, #28]
 8014b74:	4293      	cmp	r3, r2
 8014b76:	db04      	blt.n	8014b82 <EwEmulateWarp+0x2d6>
 8014b78:	b055      	add	sp, #340	; 0x154
 8014b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7e:	2301      	movs	r3, #1
 8014b80:	e6fc      	b.n	801497c <EwEmulateWarp+0xd0>
 8014b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	f000 81d0 	beq.w	8014f2a <EwEmulateWarp+0x67e>
 8014b8a:	9b07      	ldr	r3, [sp, #28]
 8014b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	f2c0 8336 	blt.w	8015200 <EwEmulateWarp+0x954>
 8014b94:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014b96:	4293      	cmp	r3, r2
 8014b98:	dd03      	ble.n	8014ba2 <EwEmulateWarp+0x2f6>
 8014b9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b9c:	4293      	cmp	r3, r2
 8014b9e:	f300 8320 	bgt.w	80151e2 <EwEmulateWarp+0x936>
 8014ba2:	9b07      	ldr	r3, [sp, #28]
 8014ba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ba6:	1a9a      	subs	r2, r3, r2
 8014ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014baa:	bb1b      	cbnz	r3, 8014bf4 <EwEmulateWarp+0x348>
 8014bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014bae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014bb0:	fb93 f9f2 	sdiv	r9, r3, r2
 8014bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bb6:	4499      	add	r9, r3
 8014bb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014bba:	fb93 fbf2 	sdiv	fp, r3, r2
 8014bbe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014bc0:	fb93 f4f2 	sdiv	r4, r3, r2
 8014bc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014bc6:	fb93 f0f2 	sdiv	r0, r3, r2
 8014bca:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8014bcc:	18c3      	adds	r3, r0, r3
 8014bce:	9308      	str	r3, [sp, #32]
 8014bd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014bd4:	4599      	cmp	r9, r3
 8014bd6:	f000 81b3 	beq.w	8014f40 <EwEmulateWarp+0x694>
 8014bda:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8014bde:	4625      	mov	r5, r4
 8014be0:	f040 81b4 	bne.w	8014f4c <EwEmulateWarp+0x6a0>
 8014be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014be6:	9b08      	ldr	r3, [sp, #32]
 8014be8:	9309      	str	r3, [sp, #36]	; 0x24
 8014bea:	465e      	mov	r6, fp
 8014bec:	9408      	str	r4, [sp, #32]
 8014bee:	46a3      	mov	fp, r4
 8014bf0:	46ca      	mov	sl, r9
 8014bf2:	e02c      	b.n	8014c4e <EwEmulateWarp+0x3a2>
 8014bf4:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8014bf8:	f7fe fca4 	bl	8013544 <EwCleanSurfaceCache+0x8>
 8014bfc:	4601      	mov	r1, r0
 8014bfe:	9008      	str	r0, [sp, #32]
 8014c00:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014c02:	f7fe fce3 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c08:	9908      	ldr	r1, [sp, #32]
 8014c0a:	eb00 0903 	add.w	r9, r0, r3
 8014c0e:	9861      	ldr	r0, [sp, #388]	; 0x184
 8014c10:	f7fe fcdc 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014c14:	9908      	ldr	r1, [sp, #32]
 8014c16:	4683      	mov	fp, r0
 8014c18:	2000      	movs	r0, #0
 8014c1a:	f7fe fcd7 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014c1e:	9908      	ldr	r1, [sp, #32]
 8014c20:	4604      	mov	r4, r0
 8014c22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014c24:	f7fe fcd2 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014c28:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8014c2a:	18c3      	adds	r3, r0, r3
 8014c2c:	9308      	str	r3, [sp, #32]
 8014c2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014c32:	4599      	cmp	r9, r3
 8014c34:	f000 818e 	beq.w	8014f54 <EwEmulateWarp+0x6a8>
 8014c38:	9b08      	ldr	r3, [sp, #32]
 8014c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c3c:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8014c40:	4625      	mov	r5, r4
 8014c42:	465e      	mov	r6, fp
 8014c44:	46ca      	mov	sl, r9
 8014c46:	d102      	bne.n	8014c4e <EwEmulateWarp+0x3a2>
 8014c48:	2400      	movs	r4, #0
 8014c4a:	46a3      	mov	fp, r4
 8014c4c:	9408      	str	r4, [sp, #32]
 8014c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d031      	beq.n	8014cb8 <EwEmulateWarp+0x40c>
 8014c54:	9b07      	ldr	r3, [sp, #28]
 8014c56:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	f2c0 82bc 	blt.w	80151d6 <EwEmulateWarp+0x92a>
 8014c5e:	9b07      	ldr	r3, [sp, #28]
 8014c60:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8014c62:	4293      	cmp	r3, r2
 8014c64:	dd03      	ble.n	8014c6e <EwEmulateWarp+0x3c2>
 8014c66:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	f300 82af 	bgt.w	80151cc <EwEmulateWarp+0x920>
 8014c6e:	9b07      	ldr	r3, [sp, #28]
 8014c70:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8014c72:	1a9a      	subs	r2, r3, r2
 8014c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f040 817d 	bne.w	8014f76 <EwEmulateWarp+0x6ca>
 8014c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c84:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 8014c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c88:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014c8a:	4413      	add	r3, r2
 8014c8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014c8e:	fb92 f2f1 	sdiv	r2, r2, r1
 8014c92:	9961      	ldr	r1, [sp, #388]	; 0x184
 8014c94:	454b      	cmp	r3, r9
 8014c96:	440a      	add	r2, r1
 8014c98:	bfb8      	it	lt
 8014c9a:	4616      	movlt	r6, r2
 8014c9c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8014c9e:	bfbc      	itt	lt
 8014ca0:	9609      	strlt	r6, [sp, #36]	; 0x24
 8014ca2:	4699      	movlt	r9, r3
 8014ca4:	fb91 f1f0 	sdiv	r1, r1, r0
 8014ca8:	bfb8      	it	lt
 8014caa:	460d      	movlt	r5, r1
 8014cac:	4553      	cmp	r3, sl
 8014cae:	dd03      	ble.n	8014cb8 <EwEmulateWarp+0x40c>
 8014cb0:	460c      	mov	r4, r1
 8014cb2:	4693      	mov	fp, r2
 8014cb4:	9208      	str	r2, [sp, #32]
 8014cb6:	469a      	mov	sl, r3
 8014cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d02f      	beq.n	8014d1e <EwEmulateWarp+0x472>
 8014cbe:	9b07      	ldr	r3, [sp, #28]
 8014cc0:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	f2c0 827c 	blt.w	80151c0 <EwEmulateWarp+0x914>
 8014cc8:	9b07      	ldr	r3, [sp, #28]
 8014cca:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	dd03      	ble.n	8014cd8 <EwEmulateWarp+0x42c>
 8014cd0:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	f300 826f 	bgt.w	80151b6 <EwEmulateWarp+0x90a>
 8014cd8:	9b07      	ldr	r3, [sp, #28]
 8014cda:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014cdc:	1a9a      	subs	r2, r3, r2
 8014cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f040 816c 	bne.w	8014fbe <EwEmulateWarp+0x712>
 8014ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ce8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014cea:	fb93 f3f2 	sdiv	r3, r3, r2
 8014cee:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8014cf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014cf2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014cf4:	4413      	add	r3, r2
 8014cf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014cf8:	fb92 f1f1 	sdiv	r1, r2, r1
 8014cfc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014cfe:	fb92 f2f0 	sdiv	r2, r2, r0
 8014d02:	9867      	ldr	r0, [sp, #412]	; 0x19c
 8014d04:	454b      	cmp	r3, r9
 8014d06:	4402      	add	r2, r0
 8014d08:	bfbf      	itttt	lt
 8014d0a:	4615      	movlt	r5, r2
 8014d0c:	460e      	movlt	r6, r1
 8014d0e:	9509      	strlt	r5, [sp, #36]	; 0x24
 8014d10:	4699      	movlt	r9, r3
 8014d12:	4553      	cmp	r3, sl
 8014d14:	dd03      	ble.n	8014d1e <EwEmulateWarp+0x472>
 8014d16:	4614      	mov	r4, r2
 8014d18:	468b      	mov	fp, r1
 8014d1a:	9208      	str	r2, [sp, #32]
 8014d1c:	469a      	mov	sl, r3
 8014d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d032      	beq.n	8014d8a <EwEmulateWarp+0x4de>
 8014d24:	9b07      	ldr	r3, [sp, #28]
 8014d26:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	f2c0 823e 	blt.w	80151aa <EwEmulateWarp+0x8fe>
 8014d2e:	9b07      	ldr	r3, [sp, #28]
 8014d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d32:	4293      	cmp	r3, r2
 8014d34:	dd02      	ble.n	8014d3c <EwEmulateWarp+0x490>
 8014d36:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014d38:	4293      	cmp	r3, r2
 8014d3a:	dc26      	bgt.n	8014d8a <EwEmulateWarp+0x4de>
 8014d3c:	9b07      	ldr	r3, [sp, #28]
 8014d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d40:	1a9a      	subs	r2, r3, r2
 8014d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f040 815d 	bne.w	8015004 <EwEmulateWarp+0x758>
 8014d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d54:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014d56:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014d58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014d5a:	4413      	add	r3, r2
 8014d5c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014d5e:	fb92 f1f1 	sdiv	r1, r2, r1
 8014d62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014d64:	fb92 f0f0 	sdiv	r0, r2, r0
 8014d68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014d6a:	fb92 f2f7 	sdiv	r2, r2, r7
 8014d6e:	9f5e      	ldr	r7, [sp, #376]	; 0x178
 8014d70:	454b      	cmp	r3, r9
 8014d72:	443a      	add	r2, r7
 8014d74:	bfbf      	itttt	lt
 8014d76:	4605      	movlt	r5, r0
 8014d78:	460e      	movlt	r6, r1
 8014d7a:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014d7c:	4699      	movlt	r9, r3
 8014d7e:	4553      	cmp	r3, sl
 8014d80:	dd03      	ble.n	8014d8a <EwEmulateWarp+0x4de>
 8014d82:	4604      	mov	r4, r0
 8014d84:	468b      	mov	fp, r1
 8014d86:	9208      	str	r2, [sp, #32]
 8014d88:	469a      	mov	sl, r3
 8014d8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014d8c:	f109 0703 	add.w	r7, r9, #3
 8014d90:	f027 0707 	bic.w	r7, r7, #7
 8014d94:	429f      	cmp	r7, r3
 8014d96:	bfb8      	it	lt
 8014d98:	461f      	movlt	r7, r3
 8014d9a:	f10a 0803 	add.w	r8, sl, #3
 8014d9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014da0:	f028 0807 	bic.w	r8, r8, #7
 8014da4:	4598      	cmp	r8, r3
 8014da6:	bfa8      	it	ge
 8014da8:	4698      	movge	r8, r3
 8014daa:	4547      	cmp	r7, r8
 8014dac:	f280 808a 	bge.w	8014ec4 <EwEmulateWarp+0x618>
 8014db0:	9b07      	ldr	r3, [sp, #28]
 8014db2:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8014db4:	10d8      	asrs	r0, r3, #3
 8014db6:	ea4f 03e8 	mov.w	r3, r8, asr #3
 8014dba:	eba3 03e7 	sub.w	r3, r3, r7, asr #3
 8014dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dc0:	105b      	asrs	r3, r3, #1
 8014dc2:	931c      	str	r3, [sp, #112]	; 0x70
 8014dc4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014dc6:	10f9      	asrs	r1, r7, #3
 8014dc8:	434b      	muls	r3, r1
 8014dca:	fb02 3300 	mla	r3, r2, r0, r3
 8014dce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014dd0:	6812      	ldr	r2, [r2, #0]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	9346      	str	r3, [sp, #280]	; 0x118
 8014dd6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8014dd8:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8014dda:	434b      	muls	r3, r1
 8014ddc:	fb02 3200 	mla	r2, r2, r0, r3
 8014de0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	441a      	add	r2, r3
 8014de6:	ebab 0306 	sub.w	r3, fp, r6
 8014dea:	9249      	str	r2, [sp, #292]	; 0x124
 8014dec:	9312      	str	r3, [sp, #72]	; 0x48
 8014dee:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8014df2:	ebaa 0009 	sub.w	r0, sl, r9
 8014df6:	eba7 0709 	sub.w	r7, r7, r9
 8014dfa:	eba3 0902 	sub.w	r9, r3, r2
 8014dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e00:	eba8 080a 	sub.w	r8, r8, sl
 8014e04:	3704      	adds	r7, #4
 8014e06:	f108 0804 	add.w	r8, r8, #4
 8014e0a:	eba4 0a05 	sub.w	sl, r4, r5
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f040 8122 	bne.w	8015058 <EwEmulateWarp+0x7ac>
 8014e14:	b370      	cbz	r0, 8014e74 <EwEmulateWarp+0x5c8>
 8014e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e18:	437b      	muls	r3, r7
 8014e1a:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8014e1e:	fb93 f3f0 	sdiv	r3, r3, r0
 8014e22:	441e      	add	r6, r3
 8014e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e26:	fb03 f308 	mul.w	r3, r3, r8
 8014e2a:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8014e2e:	fb93 f3f0 	sdiv	r3, r3, r0
 8014e32:	449b      	add	fp, r3
 8014e34:	fb0a f307 	mul.w	r3, sl, r7
 8014e38:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8014e3c:	fb09 f707 	mul.w	r7, r9, r7
 8014e40:	fb93 f3f0 	sdiv	r3, r3, r0
 8014e44:	441d      	add	r5, r3
 8014e46:	4613      	mov	r3, r2
 8014e48:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8014e4c:	fb97 f7f0 	sdiv	r7, r7, r0
 8014e50:	443b      	add	r3, r7
 8014e52:	9309      	str	r3, [sp, #36]	; 0x24
 8014e54:	9b08      	ldr	r3, [sp, #32]
 8014e56:	fb0a fa08 	mul.w	sl, sl, r8
 8014e5a:	fb09 f908 	mul.w	r9, r9, r8
 8014e5e:	eb0a 0a60 	add.w	sl, sl, r0, asr #1
 8014e62:	eb09 0960 	add.w	r9, r9, r0, asr #1
 8014e66:	fb9a faf0 	sdiv	sl, sl, r0
 8014e6a:	fb99 f9f0 	sdiv	r9, r9, r0
 8014e6e:	4454      	add	r4, sl
 8014e70:	444b      	add	r3, r9
 8014e72:	9308      	str	r3, [sp, #32]
 8014e74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e76:	ebab 0306 	sub.w	r3, fp, r6
 8014e7a:	eb02 3303 	add.w	r3, r2, r3, lsl #12
 8014e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e80:	fb93 fbf2 	sdiv	fp, r3, r2
 8014e84:	0333      	lsls	r3, r6, #12
 8014e86:	eba4 0a05 	sub.w	sl, r4, r5
 8014e8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e8c:	f503 54c0 	add.w	r4, r3, #6144	; 0x1800
 8014e90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e92:	032d      	lsls	r5, r5, #12
 8014e94:	eb02 3a0a 	add.w	sl, r2, sl, lsl #12
 8014e98:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8014e9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e9e:	fb9a faf2 	sdiv	sl, sl, r2
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f000 810e 	beq.w	80150c4 <EwEmulateWarp+0x818>
 8014ea8:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
 8014eae:	9304      	str	r3, [sp, #16]
 8014eb0:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 8014eb2:	e9cd 5b00 	strd	r5, fp, [sp]
 8014eb6:	e9cd a302 	strd	sl, r3, [sp, #8]
 8014eba:	a94d      	add	r1, sp, #308	; 0x134
 8014ebc:	4623      	mov	r3, r4
 8014ebe:	a846      	add	r0, sp, #280	; 0x118
 8014ec0:	9c71      	ldr	r4, [sp, #452]	; 0x1c4
 8014ec2:	47a0      	blx	r4
 8014ec4:	9b07      	ldr	r3, [sp, #28]
 8014ec6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8014ec8:	3308      	adds	r3, #8
 8014eca:	9307      	str	r3, [sp, #28]
 8014ecc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014ece:	4413      	add	r3, r2
 8014ed0:	9328      	str	r3, [sp, #160]	; 0xa0
 8014ed2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8014ed4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014ed6:	4413      	add	r3, r2
 8014ed8:	9327      	str	r3, [sp, #156]	; 0x9c
 8014eda:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8014edc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014ede:	4413      	add	r3, r2
 8014ee0:	9326      	str	r3, [sp, #152]	; 0x98
 8014ee2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8014ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ee6:	4413      	add	r3, r2
 8014ee8:	9324      	str	r3, [sp, #144]	; 0x90
 8014eea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8014eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014eee:	4413      	add	r3, r2
 8014ef0:	9322      	str	r3, [sp, #136]	; 0x88
 8014ef2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ef6:	4413      	add	r3, r2
 8014ef8:	9321      	str	r3, [sp, #132]	; 0x84
 8014efa:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8014efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014efe:	4413      	add	r3, r2
 8014f00:	931f      	str	r3, [sp, #124]	; 0x7c
 8014f02:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8014f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014f06:	4413      	add	r3, r2
 8014f08:	9320      	str	r3, [sp, #128]	; 0x80
 8014f0a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8014f0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014f0e:	4413      	add	r3, r2
 8014f10:	931e      	str	r3, [sp, #120]	; 0x78
 8014f12:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8014f14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014f16:	4413      	add	r3, r2
 8014f18:	9325      	str	r3, [sp, #148]	; 0x94
 8014f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f1c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8014f1e:	4413      	add	r3, r2
 8014f20:	9323      	str	r3, [sp, #140]	; 0x8c
 8014f22:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8014f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f26:	4413      	add	r3, r2
 8014f28:	e621      	b.n	8014b6e <EwEmulateWarp+0x2c2>
 8014f2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014f2c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8014f30:	4625      	mov	r5, r4
 8014f32:	46a3      	mov	fp, r4
 8014f34:	4626      	mov	r6, r4
 8014f36:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8014f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014f3e:	e686      	b.n	8014c4e <EwEmulateWarp+0x3a2>
 8014f40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014f42:	9509      	str	r5, [sp, #36]	; 0x24
 8014f44:	462e      	mov	r6, r5
 8014f46:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8014f4a:	e680      	b.n	8014c4e <EwEmulateWarp+0x3a2>
 8014f4c:	9b08      	ldr	r3, [sp, #32]
 8014f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f50:	465e      	mov	r6, fp
 8014f52:	e64d      	b.n	8014bf0 <EwEmulateWarp+0x344>
 8014f54:	2500      	movs	r5, #0
 8014f56:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8014f5a:	462e      	mov	r6, r5
 8014f5c:	9509      	str	r5, [sp, #36]	; 0x24
 8014f5e:	e676      	b.n	8014c4e <EwEmulateWarp+0x3a2>
 8014f60:	2400      	movs	r4, #0
 8014f62:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8014f66:	4625      	mov	r5, r4
 8014f68:	46a3      	mov	fp, r4
 8014f6a:	4626      	mov	r6, r4
 8014f6c:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8014f70:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014f74:	e673      	b.n	8014c5e <EwEmulateWarp+0x3b2>
 8014f76:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8014f7a:	f7fe fae3 	bl	8013544 <EwCleanSurfaceCache+0x8>
 8014f7e:	4601      	mov	r1, r0
 8014f80:	900f      	str	r0, [sp, #60]	; 0x3c
 8014f82:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014f84:	f7fe fb22 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014f88:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8014f8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f8c:	18c7      	adds	r7, r0, r3
 8014f8e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014f90:	f7fe fb1c 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014f94:	9b61      	ldr	r3, [sp, #388]	; 0x184
 8014f96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f98:	eb00 0803 	add.w	r8, r0, r3
 8014f9c:	9864      	ldr	r0, [sp, #400]	; 0x190
 8014f9e:	f7fe fb15 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014fa2:	454f      	cmp	r7, r9
 8014fa4:	bfbf      	itttt	lt
 8014fa6:	4646      	movlt	r6, r8
 8014fa8:	4605      	movlt	r5, r0
 8014faa:	9609      	strlt	r6, [sp, #36]	; 0x24
 8014fac:	46b9      	movlt	r9, r7
 8014fae:	4557      	cmp	r7, sl
 8014fb0:	bfc1      	itttt	gt
 8014fb2:	46c3      	movgt	fp, r8
 8014fb4:	4604      	movgt	r4, r0
 8014fb6:	f8cd b020 	strgt.w	fp, [sp, #32]
 8014fba:	46ba      	movgt	sl, r7
 8014fbc:	e67c      	b.n	8014cb8 <EwEmulateWarp+0x40c>
 8014fbe:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	; 0x100
 8014fc2:	f7fe fabf 	bl	8013544 <EwCleanSurfaceCache+0x8>
 8014fc6:	4601      	mov	r1, r0
 8014fc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8014fca:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014fcc:	f7fe fafe 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014fd0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014fd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014fd4:	18c7      	adds	r7, r0, r3
 8014fd6:	9864      	ldr	r0, [sp, #400]	; 0x190
 8014fd8:	f7fe faf8 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014fdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014fde:	4680      	mov	r8, r0
 8014fe0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014fe2:	f7fe faf3 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8014fe6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8014fe8:	454f      	cmp	r7, r9
 8014fea:	4418      	add	r0, r3
 8014fec:	bfbf      	itttt	lt
 8014fee:	4605      	movlt	r5, r0
 8014ff0:	4646      	movlt	r6, r8
 8014ff2:	9509      	strlt	r5, [sp, #36]	; 0x24
 8014ff4:	46b9      	movlt	r9, r7
 8014ff6:	4557      	cmp	r7, sl
 8014ff8:	bfc1      	itttt	gt
 8014ffa:	4604      	movgt	r4, r0
 8014ffc:	46c3      	movgt	fp, r8
 8014ffe:	9408      	strgt	r4, [sp, #32]
 8015000:	46ba      	movgt	sl, r7
 8015002:	e68c      	b.n	8014d1e <EwEmulateWarp+0x472>
 8015004:	e9dd 0142 	ldrd	r0, r1, [sp, #264]	; 0x108
 8015008:	f7fe fa9c 	bl	8013544 <EwCleanSurfaceCache+0x8>
 801500c:	4601      	mov	r1, r0
 801500e:	900f      	str	r0, [sp, #60]	; 0x3c
 8015010:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015012:	f7fe fadb 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8015016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015018:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801501a:	18c7      	adds	r7, r0, r3
 801501c:	2000      	movs	r0, #0
 801501e:	f7fe fad5 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8015022:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015024:	9112      	str	r1, [sp, #72]	; 0x48
 8015026:	4680      	mov	r8, r0
 8015028:	9867      	ldr	r0, [sp, #412]	; 0x19c
 801502a:	f7fe facf 	bl	80135cc <EwCleanSurfaceCache+0x90>
 801502e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015030:	900f      	str	r0, [sp, #60]	; 0x3c
 8015032:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015034:	f7fe faca 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8015038:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 801503a:	4418      	add	r0, r3
 801503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801503e:	454f      	cmp	r7, r9
 8015040:	bfbf      	itttt	lt
 8015042:	461d      	movlt	r5, r3
 8015044:	4646      	movlt	r6, r8
 8015046:	9009      	strlt	r0, [sp, #36]	; 0x24
 8015048:	46b9      	movlt	r9, r7
 801504a:	4557      	cmp	r7, sl
 801504c:	bfc1      	itttt	gt
 801504e:	461c      	movgt	r4, r3
 8015050:	46c3      	movgt	fp, r8
 8015052:	9008      	strgt	r0, [sp, #32]
 8015054:	46ba      	movgt	sl, r7
 8015056:	e698      	b.n	8014d8a <EwEmulateWarp+0x4de>
 8015058:	aa45      	add	r2, sp, #276	; 0x114
 801505a:	a944      	add	r1, sp, #272	; 0x110
 801505c:	f7fe ff46 	bl	8013eec <EwCleanSurfaceCache+0x9b0>
 8015060:	e9dd 3144 	ldrd	r3, r1, [sp, #272]	; 0x110
 8015064:	463a      	mov	r2, r7
 8015066:	4618      	mov	r0, r3
 8015068:	913b      	str	r1, [sp, #236]	; 0xec
 801506a:	933a      	str	r3, [sp, #232]	; 0xe8
 801506c:	f7fe fa6a 	bl	8013544 <EwCleanSurfaceCache+0x8>
 8015070:	e9dd 313a 	ldrd	r3, r1, [sp, #232]	; 0xe8
 8015074:	4642      	mov	r2, r8
 8015076:	4607      	mov	r7, r0
 8015078:	4618      	mov	r0, r3
 801507a:	f7fe fa63 	bl	8013544 <EwCleanSurfaceCache+0x8>
 801507e:	4639      	mov	r1, r7
 8015080:	4680      	mov	r8, r0
 8015082:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015084:	f7fe faa2 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8015088:	4641      	mov	r1, r8
 801508a:	4406      	add	r6, r0
 801508c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801508e:	f7fe fa9d 	bl	80135cc <EwCleanSurfaceCache+0x90>
 8015092:	4639      	mov	r1, r7
 8015094:	4483      	add	fp, r0
 8015096:	4650      	mov	r0, sl
 8015098:	f7fe fa98 	bl	80135cc <EwCleanSurfaceCache+0x90>
 801509c:	4641      	mov	r1, r8
 801509e:	4405      	add	r5, r0
 80150a0:	4650      	mov	r0, sl
 80150a2:	f7fe fa93 	bl	80135cc <EwCleanSurfaceCache+0x90>
 80150a6:	4639      	mov	r1, r7
 80150a8:	4404      	add	r4, r0
 80150aa:	4648      	mov	r0, r9
 80150ac:	f7fe fa8e 	bl	80135cc <EwCleanSurfaceCache+0x90>
 80150b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b2:	4641      	mov	r1, r8
 80150b4:	4403      	add	r3, r0
 80150b6:	4648      	mov	r0, r9
 80150b8:	9309      	str	r3, [sp, #36]	; 0x24
 80150ba:	f7fe fa87 	bl	80135cc <EwCleanSurfaceCache+0x90>
 80150be:	9b08      	ldr	r3, [sp, #32]
 80150c0:	4403      	add	r3, r0
 80150c2:	e6d6      	b.n	8014e72 <EwEmulateWarp+0x5c6>
 80150c4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80150c8:	1a98      	subs	r0, r3, r2
 80150ca:	0316      	lsls	r6, r2, #12
 80150cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150ce:	f506 56c0 	add.w	r6, r6, #6144	; 0x1800
 80150d2:	eb03 3000 	add.w	r0, r3, r0, lsl #12
 80150d6:	1332      	asrs	r2, r6, #12
 80150d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150da:	fb90 f3f3 	sdiv	r3, r0, r3
 80150de:	eb05 3066 	add.w	r0, r5, r6, asr #13
 80150e2:	9312      	str	r3, [sp, #72]	; 0x48
 80150e4:	fb90 f0f2 	sdiv	r0, r0, r2
 80150e8:	eb04 3366 	add.w	r3, r4, r6, asr #13
 80150ec:	0400      	lsls	r0, r0, #16
 80150ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80150f2:	041b      	lsls	r3, r3, #16
 80150f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80150f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80150f8:	2a10      	cmp	r2, #16
 80150fa:	bfa8      	it	ge
 80150fc:	2210      	movge	r2, #16
 80150fe:	4691      	mov	r9, r2
 8015100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015102:	3a02      	subs	r2, #2
 8015104:	2a0e      	cmp	r2, #14
 8015106:	bf94      	ite	ls
 8015108:	f109 32ff 	addls.w	r2, r9, #4294967295
 801510c:	464a      	movhi	r2, r9
 801510e:	fb01 6602 	mla	r6, r1, r2, r6
 8015112:	fb0a 5502 	mla	r5, sl, r2, r5
 8015116:	ea4f 3e26 	mov.w	lr, r6, asr #12
 801511a:	eb05 3766 	add.w	r7, r5, r6, asr #13
 801511e:	fb97 f7fe 	sdiv	r7, r7, lr
 8015122:	043f      	lsls	r7, r7, #16
 8015124:	9708      	str	r7, [sp, #32]
 8015126:	9f08      	ldr	r7, [sp, #32]
 8015128:	fb0b 4402 	mla	r4, fp, r2, r4
 801512c:	eb04 3166 	add.w	r1, r4, r6, asr #13
 8015130:	fb91 f1fe 	sdiv	r1, r1, lr
 8015134:	eba7 0e00 	sub.w	lr, r7, r0
 8015138:	ea4f 4801 	mov.w	r8, r1, lsl #16
 801513c:	9f70      	ldr	r7, [sp, #448]	; 0x1c0
 801513e:	9705      	str	r7, [sp, #20]
 8015140:	ebc3 4101 	rsb	r1, r3, r1, lsl #16
 8015144:	eb01 0162 	add.w	r1, r1, r2, asr #1
 8015148:	2a10      	cmp	r2, #16
 801514a:	ea4f 0c62 	mov.w	ip, r2, asr #1
 801514e:	9f6b      	ldr	r7, [sp, #428]	; 0x1ac
 8015150:	bf14      	ite	ne
 8015152:	fb91 f1f2 	sdivne	r1, r1, r2
 8015156:	1109      	asreq	r1, r1, #4
 8015158:	44f4      	add	ip, lr
 801515a:	2a10      	cmp	r2, #16
 801515c:	9704      	str	r7, [sp, #16]
 801515e:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 8015160:	bf14      	ite	ne
 8015162:	fb9c f2f2 	sdivne	r2, ip, r2
 8015166:	ea4f 122c 	moveq.w	r2, ip, asr #4
 801516a:	f500 50c0 	add.w	r0, r0, #6144	; 0x1800
 801516e:	e9cd 2702 	strd	r2, r7, [sp, #8]
 8015172:	9101      	str	r1, [sp, #4]
 8015174:	9000      	str	r0, [sp, #0]
 8015176:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801517a:	9f71      	ldr	r7, [sp, #452]	; 0x1c4
 801517c:	464a      	mov	r2, r9
 801517e:	a94d      	add	r1, sp, #308	; 0x134
 8015180:	a846      	add	r0, sp, #280	; 0x118
 8015182:	47b8      	blx	r7
 8015184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015186:	ebb3 0309 	subs.w	r3, r3, r9
 801518a:	930f      	str	r3, [sp, #60]	; 0x3c
 801518c:	f43f ae9a 	beq.w	8014ec4 <EwEmulateWarp+0x618>
 8015190:	e9dd 3246 	ldrd	r3, r2, [sp, #280]	; 0x118
 8015194:	fb02 3309 	mla	r3, r2, r9, r3
 8015198:	9346      	str	r3, [sp, #280]	; 0x118
 801519a:	e9dd 3249 	ldrd	r3, r2, [sp, #292]	; 0x124
 801519e:	fb02 3309 	mla	r3, r2, r9, r3
 80151a2:	9349      	str	r3, [sp, #292]	; 0x124
 80151a4:	9808      	ldr	r0, [sp, #32]
 80151a6:	4643      	mov	r3, r8
 80151a8:	e7a4      	b.n	80150f4 <EwEmulateWarp+0x848>
 80151aa:	9b07      	ldr	r3, [sp, #28]
 80151ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151ae:	4293      	cmp	r3, r2
 80151b0:	f6ff adeb 	blt.w	8014d8a <EwEmulateWarp+0x4de>
 80151b4:	e5c2      	b.n	8014d3c <EwEmulateWarp+0x490>
 80151b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f47f adb8 	bne.w	8014d2e <EwEmulateWarp+0x482>
 80151be:	e5e4      	b.n	8014d8a <EwEmulateWarp+0x4de>
 80151c0:	9b07      	ldr	r3, [sp, #28]
 80151c2:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80151c4:	4293      	cmp	r3, r2
 80151c6:	f6ff adaa 	blt.w	8014d1e <EwEmulateWarp+0x472>
 80151ca:	e585      	b.n	8014cd8 <EwEmulateWarp+0x42c>
 80151cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f47f ad7a 	bne.w	8014cc8 <EwEmulateWarp+0x41c>
 80151d4:	e5a3      	b.n	8014d1e <EwEmulateWarp+0x472>
 80151d6:	9b07      	ldr	r3, [sp, #28]
 80151d8:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 80151da:	4293      	cmp	r3, r2
 80151dc:	f6ff ad6c 	blt.w	8014cb8 <EwEmulateWarp+0x40c>
 80151e0:	e545      	b.n	8014c6e <EwEmulateWarp+0x3c2>
 80151e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f47f aebb 	bne.w	8014f60 <EwEmulateWarp+0x6b4>
 80151ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80151ee:	461c      	mov	r4, r3
 80151f0:	461d      	mov	r5, r3
 80151f2:	469b      	mov	fp, r3
 80151f4:	461e      	mov	r6, r3
 80151f6:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80151fa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80151fe:	e55b      	b.n	8014cb8 <EwEmulateWarp+0x40c>
 8015200:	9b07      	ldr	r3, [sp, #28]
 8015202:	9a60      	ldr	r2, [sp, #384]	; 0x180
 8015204:	4293      	cmp	r3, r2
 8015206:	f6bf accc 	bge.w	8014ba2 <EwEmulateWarp+0x2f6>
 801520a:	2400      	movs	r4, #0
 801520c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8015210:	4625      	mov	r5, r4
 8015212:	46a3      	mov	fp, r4
 8015214:	4626      	mov	r6, r4
 8015216:	e68e      	b.n	8014f36 <EwEmulateWarp+0x68a>

08015218 <EwEmulateFillPolygon>:
 8015218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	ed2d 8b02 	vpush	{d8}
 8015220:	b0b5      	sub	sp, #212	; 0xd4
 8015222:	4605      	mov	r5, r0
 8015224:	930b      	str	r3, [sp, #44]	; 0x2c
 8015226:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015228:	9c44      	ldr	r4, [sp, #272]	; 0x110
 801522a:	f8dd 9118 	ldr.w	r9, [sp, #280]	; 0x118
 801522e:	910c      	str	r1, [sp, #48]	; 0x30
 8015230:	9214      	str	r2, [sp, #80]	; 0x50
 8015232:	bb3b      	cbnz	r3, 8015284 <EwEmulateFillPolygon+0x6c>
 8015234:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015236:	2b00      	cmp	r3, #0
 8015238:	bf14      	ite	ne
 801523a:	f04f 0805 	movne.w	r8, #5
 801523e:	f04f 0802 	moveq.w	r8, #2
 8015242:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8015244:	221c      	movs	r2, #28
 8015246:	2100      	movs	r1, #0
 8015248:	a817      	add	r0, sp, #92	; 0x5c
 801524a:	fb03 f808 	mul.w	r8, r3, r8
 801524e:	f01b fe13 	bl	8030e78 <memset>
 8015252:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015254:	9313      	str	r3, [sp, #76]	; 0x4c
 8015256:	682b      	ldr	r3, [r5, #0]
 8015258:	930d      	str	r3, [sp, #52]	; 0x34
 801525a:	68eb      	ldr	r3, [r5, #12]
 801525c:	930e      	str	r3, [sp, #56]	; 0x38
 801525e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015260:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 8015264:	4640      	mov	r0, r8
 8015266:	f014 fa83 	bl	8029770 <EwAlloc>
 801526a:	4606      	mov	r6, r0
 801526c:	2800      	cmp	r0, #0
 801526e:	f040 8111 	bne.w	8015494 <EwEmulateFillPolygon+0x27c>
 8015272:	2010      	movs	r0, #16
 8015274:	f004 fcc8 	bl	8019c08 <EwImmediateReclaimMemory>
 8015278:	2800      	cmp	r0, #0
 801527a:	d1f3      	bne.n	8015264 <EwEmulateFillPolygon+0x4c>
 801527c:	2010      	movs	r0, #16
 801527e:	f003 fd13 	bl	8018ca8 <EwError>
 8015282:	e17f      	b.n	8015584 <EwEmulateFillPolygon+0x36c>
 8015284:	f04f 0809 	mov.w	r8, #9
 8015288:	e7db      	b.n	8015242 <EwEmulateFillPolygon+0x2a>
 801528a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801528c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801528e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8015292:	011b      	lsls	r3, r3, #4
 8015294:	2a00      	cmp	r2, #0
 8015296:	f000 80ae 	beq.w	80153f6 <EwEmulateFillPolygon+0x1de>
 801529a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801529c:	2a00      	cmp	r2, #0
 801529e:	f000 809d 	beq.w	80153dc <EwEmulateFillPolygon+0x1c4>
 80152a2:	aa16      	add	r2, sp, #88	; 0x58
 80152a4:	9202      	str	r2, [sp, #8]
 80152a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152a8:	ee18 0a10 	vmov	r0, s16
 80152ac:	e9cd 3200 	strd	r3, r2, [sp]
 80152b0:	4631      	mov	r1, r6
 80152b2:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80152b4:	4653      	mov	r3, sl
 80152b6:	f7fe f9af 	bl	8013618 <EwCleanSurfaceCache+0xdc>
 80152ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152bc:	4602      	mov	r2, r0
 80152be:	2b00      	cmp	r3, #0
 80152c0:	f000 80b5 	beq.w	801542e <EwEmulateFillPolygon+0x216>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	f000 80b4 	beq.w	8015432 <EwEmulateFillPolygon+0x21a>
 80152ca:	9907      	ldr	r1, [sp, #28]
 80152cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80152ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80152d0:	ea4f 5028 	mov.w	r0, r8, asr #20
 80152d4:	ebc0 5021 	rsb	r0, r0, r1, asr #20
 80152d8:	9905      	ldr	r1, [sp, #20]
 80152da:	ea4f 5c21 	mov.w	ip, r1, asr #20
 80152de:	9908      	ldr	r1, [sp, #32]
 80152e0:	ebcc 5c21 	rsb	ip, ip, r1, asr #20
 80152e4:	ea4f 512b 	mov.w	r1, fp, asr #20
 80152e8:	ebc1 5127 	rsb	r1, r1, r7, asr #20
 80152ec:	9f06      	ldr	r7, [sp, #24]
 80152ee:	ea4f 5e27 	mov.w	lr, r7, asr #20
 80152f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80152f4:	ebce 5e27 	rsb	lr, lr, r7, asr #20
 80152f8:	9f45      	ldr	r7, [sp, #276]	; 0x114
 80152fa:	4358      	muls	r0, r3
 80152fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8015300:	4359      	muls	r1, r3
 8015302:	fb03 f30e 	mul.w	r3, r3, lr
 8015306:	901f      	str	r0, [sp, #124]	; 0x7c
 8015308:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 801530c:	9127      	str	r1, [sp, #156]	; 0x9c
 801530e:	932b      	str	r3, [sp, #172]	; 0xac
 8015310:	b18f      	cbz	r7, 8015336 <EwEmulateFillPolygon+0x11e>
 8015312:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8015314:	46be      	mov	lr, r7
 8015316:	9f45      	ldr	r7, [sp, #276]	; 0x114
 8015318:	fb07 e000 	mla	r0, r7, r0, lr
 801531c:	901e      	str	r0, [sp, #120]	; 0x78
 801531e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8015320:	fb07 000c 	mla	r0, r7, ip, r0
 8015324:	9022      	str	r0, [sp, #136]	; 0x88
 8015326:	9826      	ldr	r0, [sp, #152]	; 0x98
 8015328:	fb07 0101 	mla	r1, r7, r1, r0
 801532c:	9126      	str	r1, [sp, #152]	; 0x98
 801532e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015330:	fb07 1303 	mla	r3, r7, r3, r1
 8015334:	932a      	str	r3, [sp, #168]	; 0xa8
 8015336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015338:	9313      	str	r3, [sp, #76]	; 0x4c
 801533a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801533c:	930f      	str	r3, [sp, #60]	; 0x3c
 801533e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015340:	9310      	str	r3, [sp, #64]	; 0x40
 8015342:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015344:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015346:	9311      	str	r3, [sp, #68]	; 0x44
 8015348:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801534a:	9312      	str	r3, [sp, #72]	; 0x48
 801534c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801534e:	b1a1      	cbz	r1, 801537a <EwEmulateFillPolygon+0x162>
 8015350:	b19b      	cbz	r3, 801537a <EwEmulateFillPolygon+0x162>
 8015352:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015354:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015356:	fb01 0103 	mla	r1, r1, r3, r0
 801535a:	911e      	str	r1, [sp, #120]	; 0x78
 801535c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801535e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015360:	fb01 0103 	mla	r1, r1, r3, r0
 8015364:	9122      	str	r1, [sp, #136]	; 0x88
 8015366:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015368:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801536a:	fb01 0103 	mla	r1, r1, r3, r0
 801536e:	9126      	str	r1, [sp, #152]	; 0x98
 8015370:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015372:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015374:	fb01 0103 	mla	r1, r1, r3, r0
 8015378:	912a      	str	r1, [sp, #168]	; 0xa8
 801537a:	ee18 1a10 	vmov	r1, s16
 801537e:	4419      	add	r1, r3
 8015380:	9117      	str	r1, [sp, #92]	; 0x5c
 8015382:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015384:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015386:	9215      	str	r2, [sp, #84]	; 0x54
 8015388:	440b      	add	r3, r1
 801538a:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
 801538e:	4359      	muls	r1, r3
 8015390:	fb00 1107 	mla	r1, r0, r7, r1
 8015394:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015396:	4401      	add	r1, r0
 8015398:	6029      	str	r1, [r5, #0]
 801539a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801539e:	4343      	muls	r3, r0
 80153a0:	fb01 3307 	mla	r3, r1, r7, r3
 80153a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80153a6:	9f47      	ldr	r7, [sp, #284]	; 0x11c
 80153a8:	440b      	add	r3, r1
 80153aa:	60eb      	str	r3, [r5, #12]
 80153ac:	a917      	add	r1, sp, #92	; 0x5c
 80153ae:	ab1e      	add	r3, sp, #120	; 0x78
 80153b0:	4628      	mov	r0, r5
 80153b2:	47b8      	blx	r7
 80153b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153b6:	931e      	str	r3, [sp, #120]	; 0x78
 80153b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153ba:	9322      	str	r3, [sp, #136]	; 0x88
 80153bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153be:	9326      	str	r3, [sp, #152]	; 0x98
 80153c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153c2:	932a      	str	r3, [sp, #168]	; 0xa8
 80153c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d033      	beq.n	8015432 <EwEmulateFillPolygon+0x21a>
 80153ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80153cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80153ce:	ee18 3a10 	vmov	r3, s16
 80153d2:	4611      	mov	r1, r2
 80153d4:	4418      	add	r0, r3
 80153d6:	f014 f9f3 	bl	80297c0 <EwZero>
 80153da:	e02a      	b.n	8015432 <EwEmulateFillPolygon+0x21a>
 80153dc:	aa16      	add	r2, sp, #88	; 0x58
 80153de:	9202      	str	r2, [sp, #8]
 80153e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153e2:	ee18 0a10 	vmov	r0, s16
 80153e6:	e9cd 3200 	strd	r3, r2, [sp]
 80153ea:	4631      	mov	r1, r6
 80153ec:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80153ee:	4653      	mov	r3, sl
 80153f0:	f7fe fa5d 	bl	80138ae <EwCleanSurfaceCache+0x372>
 80153f4:	e761      	b.n	80152ba <EwEmulateFillPolygon+0xa2>
 80153f6:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80153f8:	b162      	cbz	r2, 8015414 <EwEmulateFillPolygon+0x1fc>
 80153fa:	aa16      	add	r2, sp, #88	; 0x58
 80153fc:	9202      	str	r2, [sp, #8]
 80153fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015400:	ee18 0a10 	vmov	r0, s16
 8015404:	e9cd 3200 	strd	r3, r2, [sp]
 8015408:	4631      	mov	r1, r6
 801540a:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801540c:	4653      	mov	r3, sl
 801540e:	f7fe fb52 	bl	8013ab6 <EwCleanSurfaceCache+0x57a>
 8015412:	e752      	b.n	80152ba <EwEmulateFillPolygon+0xa2>
 8015414:	aa16      	add	r2, sp, #88	; 0x58
 8015416:	9202      	str	r2, [sp, #8]
 8015418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801541a:	ee18 0a10 	vmov	r0, s16
 801541e:	e9cd 3200 	strd	r3, r2, [sp]
 8015422:	4631      	mov	r1, r6
 8015424:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8015426:	4653      	mov	r3, sl
 8015428:	f7fe fc68 	bl	8013cfc <EwCleanSurfaceCache+0x7c0>
 801542c:	e745      	b.n	80152ba <EwEmulateFillPolygon+0xa2>
 801542e:	2800      	cmp	r0, #0
 8015430:	d183      	bne.n	801533a <EwEmulateFillPolygon+0x122>
 8015432:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015434:	b33b      	cbz	r3, 8015486 <EwEmulateFillPolygon+0x26e>
 8015436:	6863      	ldr	r3, [r4, #4]
 8015438:	9a07      	ldr	r2, [sp, #28]
 801543a:	4498      	add	r8, r3
 801543c:	f008 637f 	and.w	r3, r8, #267386880	; 0xff00000
 8015440:	931e      	str	r3, [sp, #120]	; 0x78
 8015442:	68e3      	ldr	r3, [r4, #12]
 8015444:	441a      	add	r2, r3
 8015446:	9207      	str	r2, [sp, #28]
 8015448:	6963      	ldr	r3, [r4, #20]
 801544a:	9a05      	ldr	r2, [sp, #20]
 801544c:	441a      	add	r2, r3
 801544e:	f002 637f 	and.w	r3, r2, #267386880	; 0xff00000
 8015452:	9205      	str	r2, [sp, #20]
 8015454:	9322      	str	r3, [sp, #136]	; 0x88
 8015456:	9a08      	ldr	r2, [sp, #32]
 8015458:	69e3      	ldr	r3, [r4, #28]
 801545a:	441a      	add	r2, r3
 801545c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801545e:	9208      	str	r2, [sp, #32]
 8015460:	449b      	add	fp, r3
 8015462:	f00b 637f 	and.w	r3, fp, #267386880	; 0xff00000
 8015466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015468:	9326      	str	r3, [sp, #152]	; 0x98
 801546a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801546c:	441a      	add	r2, r3
 801546e:	9209      	str	r2, [sp, #36]	; 0x24
 8015470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015472:	9a06      	ldr	r2, [sp, #24]
 8015474:	441a      	add	r2, r3
 8015476:	f002 637f 	and.w	r3, r2, #267386880	; 0xff00000
 801547a:	9206      	str	r2, [sp, #24]
 801547c:	932a      	str	r3, [sp, #168]	; 0xa8
 801547e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015482:	441a      	add	r2, r3
 8015484:	920a      	str	r2, [sp, #40]	; 0x28
 8015486:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015488:	3b01      	subs	r3, #1
 801548a:	9341      	str	r3, [sp, #260]	; 0x104
 801548c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801548e:	3301      	adds	r3, #1
 8015490:	930b      	str	r3, [sp, #44]	; 0x2c
 8015492:	e059      	b.n	8015548 <EwEmulateFillPolygon+0x330>
 8015494:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8015496:	eba8 0703 	sub.w	r7, r8, r3
 801549a:	183b      	adds	r3, r7, r0
 801549c:	4641      	mov	r1, r8
 801549e:	ee08 3a10 	vmov	s16, r3
 80154a2:	f014 f98d 	bl	80297c0 <EwZero>
 80154a6:	68a3      	ldr	r3, [r4, #8]
 80154a8:	9307      	str	r3, [sp, #28]
 80154aa:	6923      	ldr	r3, [r4, #16]
 80154ac:	9305      	str	r3, [sp, #20]
 80154ae:	69a3      	ldr	r3, [r4, #24]
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80154b4:	9309      	str	r3, [sp, #36]	; 0x24
 80154b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80154b8:	9306      	str	r3, [sp, #24]
 80154ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80154bc:	930a      	str	r3, [sp, #40]	; 0x28
 80154be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80154c0:	f8d4 8000 	ldr.w	r8, [r4]
 80154c4:	f8d4 b020 	ldr.w	fp, [r4, #32]
 80154c8:	b333      	cbz	r3, 8015518 <EwEmulateFillPolygon+0x300>
 80154ca:	f1b9 0f00 	cmp.w	r9, #0
 80154ce:	d023      	beq.n	8015518 <EwEmulateFillPolygon+0x300>
 80154d0:	6863      	ldr	r3, [r4, #4]
 80154d2:	9a07      	ldr	r2, [sp, #28]
 80154d4:	fb03 8809 	mla	r8, r3, r9, r8
 80154d8:	68e3      	ldr	r3, [r4, #12]
 80154da:	fb03 2309 	mla	r3, r3, r9, r2
 80154de:	9307      	str	r3, [sp, #28]
 80154e0:	9a05      	ldr	r2, [sp, #20]
 80154e2:	6963      	ldr	r3, [r4, #20]
 80154e4:	fb03 2309 	mla	r3, r3, r9, r2
 80154e8:	9305      	str	r3, [sp, #20]
 80154ea:	9a08      	ldr	r2, [sp, #32]
 80154ec:	69e3      	ldr	r3, [r4, #28]
 80154ee:	fb03 2309 	mla	r3, r3, r9, r2
 80154f2:	9308      	str	r3, [sp, #32]
 80154f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154f8:	fb03 bb09 	mla	fp, r3, r9, fp
 80154fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80154fe:	fb03 2309 	mla	r3, r3, r9, r2
 8015502:	9309      	str	r3, [sp, #36]	; 0x24
 8015504:	9a06      	ldr	r2, [sp, #24]
 8015506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015508:	fb03 2309 	mla	r3, r3, r9, r2
 801550c:	9306      	str	r3, [sp, #24]
 801550e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015512:	fb03 2309 	mla	r3, r3, r9, r2
 8015516:	930a      	str	r3, [sp, #40]	; 0x28
 8015518:	f008 637f 	and.w	r3, r8, #267386880	; 0xff00000
 801551c:	931e      	str	r3, [sp, #120]	; 0x78
 801551e:	9b05      	ldr	r3, [sp, #20]
 8015520:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8015524:	9322      	str	r3, [sp, #136]	; 0x88
 8015526:	f00b 637f 	and.w	r3, fp, #267386880	; 0xff00000
 801552a:	9326      	str	r3, [sp, #152]	; 0x98
 801552c:	9b06      	ldr	r3, [sp, #24]
 801552e:	f04f 0900 	mov.w	r9, #0
 8015532:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
 8015536:	932a      	str	r3, [sp, #168]	; 0xa8
 8015538:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 801553c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8015540:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 8015544:	f8cd 90ac 	str.w	r9, [sp, #172]	; 0xac
 8015548:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801554a:	2b00      	cmp	r3, #0
 801554c:	f73f ae9d 	bgt.w	801528a <EwEmulateFillPolygon+0x72>
 8015550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015552:	602b      	str	r3, [r5, #0]
 8015554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015556:	60eb      	str	r3, [r5, #12]
 8015558:	4b0d      	ldr	r3, [pc, #52]	; (8015590 <EwEmulateFillPolygon+0x378>)
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	4b0d      	ldr	r3, [pc, #52]	; (8015594 <EwEmulateFillPolygon+0x37c>)
 801555e:	6819      	ldr	r1, [r3, #0]
 8015560:	3204      	adds	r2, #4
 8015562:	428a      	cmp	r2, r1
 8015564:	bfc8      	it	gt
 8015566:	601a      	strgt	r2, [r3, #0]
 8015568:	490b      	ldr	r1, [pc, #44]	; (8015598 <EwEmulateFillPolygon+0x380>)
 801556a:	4b0c      	ldr	r3, [pc, #48]	; (801559c <EwEmulateFillPolygon+0x384>)
 801556c:	6809      	ldr	r1, [r1, #0]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	440b      	add	r3, r1
 8015572:	4413      	add	r3, r2
 8015574:	4a0a      	ldr	r2, [pc, #40]	; (80155a0 <EwEmulateFillPolygon+0x388>)
 8015576:	6811      	ldr	r1, [r2, #0]
 8015578:	4630      	mov	r0, r6
 801557a:	428b      	cmp	r3, r1
 801557c:	bfc8      	it	gt
 801557e:	6013      	strgt	r3, [r2, #0]
 8015580:	f014 f8f8 	bl	8029774 <EwFree>
 8015584:	b035      	add	sp, #212	; 0xd4
 8015586:	ecbd 8b02 	vpop	{d8}
 801558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801558e:	bf00      	nop
 8015590:	200002e8 	.word	0x200002e8
 8015594:	20000304 	.word	0x20000304
 8015598:	200002e4 	.word	0x200002e4
 801559c:	200002d8 	.word	0x200002d8
 80155a0:	200002ec 	.word	0x200002ec

080155a4 <EwAllocVideo>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	4605      	mov	r5, r0
 80155a8:	4628      	mov	r0, r5
 80155aa:	f014 f8e1 	bl	8029770 <EwAlloc>
 80155ae:	4604      	mov	r4, r0
 80155b0:	b940      	cbnz	r0, 80155c4 <EwAllocVideo+0x20>
 80155b2:	b13d      	cbz	r5, 80155c4 <EwAllocVideo+0x20>
 80155b4:	2029      	movs	r0, #41	; 0x29
 80155b6:	f004 fb27 	bl	8019c08 <EwImmediateReclaimMemory>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	d1f4      	bne.n	80155a8 <EwAllocVideo+0x4>
 80155be:	2029      	movs	r0, #41	; 0x29
 80155c0:	f003 fb72 	bl	8018ca8 <EwError>
 80155c4:	4620      	mov	r0, r4
 80155c6:	bd38      	pop	{r3, r4, r5, pc}

080155c8 <EwCreateIndex8Surface>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	fb01 f600 	mul.w	r6, r1, r0
 80155ce:	4604      	mov	r4, r0
 80155d0:	f506 6083 	add.w	r0, r6, #1048	; 0x418
 80155d4:	460d      	mov	r5, r1
 80155d6:	f7ff ffe5 	bl	80155a4 <EwAllocVideo>
 80155da:	b300      	cbz	r0, 801561e <EwCreateIndex8Surface+0x56>
 80155dc:	f100 0318 	add.w	r3, r0, #24
 80155e0:	4a0f      	ldr	r2, [pc, #60]	; (8015620 <EwCreateIndex8Surface+0x58>)
 80155e2:	60c3      	str	r3, [r0, #12]
 80155e4:	f500 6383 	add.w	r3, r0, #1048	; 0x418
 80155e8:	6083      	str	r3, [r0, #8]
 80155ea:	2300      	movs	r3, #0
 80155ec:	6143      	str	r3, [r0, #20]
 80155ee:	6813      	ldr	r3, [r2, #0]
 80155f0:	6104      	str	r4, [r0, #16]
 80155f2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80155f6:	4433      	add	r3, r6
 80155f8:	e9c0 4500 	strd	r4, r5, [r0]
 80155fc:	6013      	str	r3, [r2, #0]
 80155fe:	4a09      	ldr	r2, [pc, #36]	; (8015624 <EwCreateIndex8Surface+0x5c>)
 8015600:	6811      	ldr	r1, [r2, #0]
 8015602:	428b      	cmp	r3, r1
 8015604:	bfc8      	it	gt
 8015606:	6013      	strgt	r3, [r2, #0]
 8015608:	4907      	ldr	r1, [pc, #28]	; (8015628 <EwCreateIndex8Surface+0x60>)
 801560a:	4a08      	ldr	r2, [pc, #32]	; (801562c <EwCreateIndex8Surface+0x64>)
 801560c:	6809      	ldr	r1, [r1, #0]
 801560e:	6812      	ldr	r2, [r2, #0]
 8015610:	440a      	add	r2, r1
 8015612:	4413      	add	r3, r2
 8015614:	4a06      	ldr	r2, [pc, #24]	; (8015630 <EwCreateIndex8Surface+0x68>)
 8015616:	6811      	ldr	r1, [r2, #0]
 8015618:	428b      	cmp	r3, r1
 801561a:	bfc8      	it	gt
 801561c:	6013      	strgt	r3, [r2, #0]
 801561e:	bd70      	pop	{r4, r5, r6, pc}
 8015620:	200002e8 	.word	0x200002e8
 8015624:	20000304 	.word	0x20000304
 8015628:	200002e4 	.word	0x200002e4
 801562c:	200002d8 	.word	0x200002d8
 8015630:	200002ec 	.word	0x200002ec

08015634 <EwCreateConstIndex8Surface>:
 8015634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015636:	4605      	mov	r5, r0
 8015638:	460e      	mov	r6, r1
 801563a:	4614      	mov	r4, r2
 801563c:	2a00      	cmp	r2, #0
 801563e:	d02c      	beq.n	801569a <EwCreateConstIndex8Surface+0x66>
 8015640:	6810      	ldr	r0, [r2, #0]
 8015642:	b348      	cbz	r0, 8015698 <EwCreateConstIndex8Surface+0x64>
 8015644:	6990      	ldr	r0, [r2, #24]
 8015646:	b338      	cbz	r0, 8015698 <EwCreateConstIndex8Surface+0x64>
 8015648:	6857      	ldr	r7, [r2, #4]
 801564a:	2f01      	cmp	r7, #1
 801564c:	d125      	bne.n	801569a <EwCreateConstIndex8Surface+0x66>
 801564e:	6893      	ldr	r3, [r2, #8]
 8015650:	42ab      	cmp	r3, r5
 8015652:	db22      	blt.n	801569a <EwCreateConstIndex8Surface+0x66>
 8015654:	2018      	movs	r0, #24
 8015656:	f7ff ffa5 	bl	80155a4 <EwAllocVideo>
 801565a:	b1e8      	cbz	r0, 8015698 <EwCreateConstIndex8Surface+0x64>
 801565c:	69a3      	ldr	r3, [r4, #24]
 801565e:	60c3      	str	r3, [r0, #12]
 8015660:	6823      	ldr	r3, [r4, #0]
 8015662:	490f      	ldr	r1, [pc, #60]	; (80156a0 <EwCreateConstIndex8Surface+0x6c>)
 8015664:	6083      	str	r3, [r0, #8]
 8015666:	68a3      	ldr	r3, [r4, #8]
 8015668:	e9c0 3704 	strd	r3, r7, [r0, #16]
 801566c:	680b      	ldr	r3, [r1, #0]
 801566e:	f103 0218 	add.w	r2, r3, #24
 8015672:	4b0c      	ldr	r3, [pc, #48]	; (80156a4 <EwCreateConstIndex8Surface+0x70>)
 8015674:	e9c0 5600 	strd	r5, r6, [r0]
 8015678:	600a      	str	r2, [r1, #0]
 801567a:	6819      	ldr	r1, [r3, #0]
 801567c:	428a      	cmp	r2, r1
 801567e:	bfc8      	it	gt
 8015680:	601a      	strgt	r2, [r3, #0]
 8015682:	4909      	ldr	r1, [pc, #36]	; (80156a8 <EwCreateConstIndex8Surface+0x74>)
 8015684:	4b09      	ldr	r3, [pc, #36]	; (80156ac <EwCreateConstIndex8Surface+0x78>)
 8015686:	6809      	ldr	r1, [r1, #0]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	440b      	add	r3, r1
 801568c:	4413      	add	r3, r2
 801568e:	4a08      	ldr	r2, [pc, #32]	; (80156b0 <EwCreateConstIndex8Surface+0x7c>)
 8015690:	6811      	ldr	r1, [r2, #0]
 8015692:	428b      	cmp	r3, r1
 8015694:	dd00      	ble.n	8015698 <EwCreateConstIndex8Surface+0x64>
 8015696:	6013      	str	r3, [r2, #0]
 8015698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801569a:	2000      	movs	r0, #0
 801569c:	e7fc      	b.n	8015698 <EwCreateConstIndex8Surface+0x64>
 801569e:	bf00      	nop
 80156a0:	200002e8 	.word	0x200002e8
 80156a4:	20000304 	.word	0x20000304
 80156a8:	200002e4 	.word	0x200002e4
 80156ac:	200002d8 	.word	0x200002d8
 80156b0:	200002ec 	.word	0x200002ec

080156b4 <EwCreateAlpha8Surface>:
 80156b4:	b570      	push	{r4, r5, r6, lr}
 80156b6:	fb01 f600 	mul.w	r6, r1, r0
 80156ba:	4604      	mov	r4, r0
 80156bc:	f106 0014 	add.w	r0, r6, #20
 80156c0:	460d      	mov	r5, r1
 80156c2:	f7ff ff6f 	bl	80155a4 <EwAllocVideo>
 80156c6:	b1e0      	cbz	r0, 8015702 <EwCreateAlpha8Surface+0x4e>
 80156c8:	4a0e      	ldr	r2, [pc, #56]	; (8015704 <EwCreateAlpha8Surface+0x50>)
 80156ca:	f100 0314 	add.w	r3, r0, #20
 80156ce:	e9c0 3402 	strd	r3, r4, [r0, #8]
 80156d2:	2300      	movs	r3, #0
 80156d4:	6103      	str	r3, [r0, #16]
 80156d6:	6813      	ldr	r3, [r2, #0]
 80156d8:	3314      	adds	r3, #20
 80156da:	4433      	add	r3, r6
 80156dc:	e9c0 4500 	strd	r4, r5, [r0]
 80156e0:	6013      	str	r3, [r2, #0]
 80156e2:	4a09      	ldr	r2, [pc, #36]	; (8015708 <EwCreateAlpha8Surface+0x54>)
 80156e4:	6811      	ldr	r1, [r2, #0]
 80156e6:	428b      	cmp	r3, r1
 80156e8:	bfc8      	it	gt
 80156ea:	6013      	strgt	r3, [r2, #0]
 80156ec:	4907      	ldr	r1, [pc, #28]	; (801570c <EwCreateAlpha8Surface+0x58>)
 80156ee:	4a08      	ldr	r2, [pc, #32]	; (8015710 <EwCreateAlpha8Surface+0x5c>)
 80156f0:	6809      	ldr	r1, [r1, #0]
 80156f2:	6812      	ldr	r2, [r2, #0]
 80156f4:	440a      	add	r2, r1
 80156f6:	4413      	add	r3, r2
 80156f8:	4a06      	ldr	r2, [pc, #24]	; (8015714 <EwCreateAlpha8Surface+0x60>)
 80156fa:	6811      	ldr	r1, [r2, #0]
 80156fc:	428b      	cmp	r3, r1
 80156fe:	bfc8      	it	gt
 8015700:	6013      	strgt	r3, [r2, #0]
 8015702:	bd70      	pop	{r4, r5, r6, pc}
 8015704:	200002e8 	.word	0x200002e8
 8015708:	20000304 	.word	0x20000304
 801570c:	200002e4 	.word	0x200002e4
 8015710:	200002d8 	.word	0x200002d8
 8015714:	200002ec 	.word	0x200002ec

08015718 <EwCreateConstAlpha8Surface>:
 8015718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801571a:	4605      	mov	r5, r0
 801571c:	460e      	mov	r6, r1
 801571e:	4614      	mov	r4, r2
 8015720:	b342      	cbz	r2, 8015774 <EwCreateConstAlpha8Surface+0x5c>
 8015722:	6810      	ldr	r0, [r2, #0]
 8015724:	b328      	cbz	r0, 8015772 <EwCreateConstAlpha8Surface+0x5a>
 8015726:	6857      	ldr	r7, [r2, #4]
 8015728:	2f01      	cmp	r7, #1
 801572a:	d123      	bne.n	8015774 <EwCreateConstAlpha8Surface+0x5c>
 801572c:	6893      	ldr	r3, [r2, #8]
 801572e:	42ab      	cmp	r3, r5
 8015730:	db20      	blt.n	8015774 <EwCreateConstAlpha8Surface+0x5c>
 8015732:	2014      	movs	r0, #20
 8015734:	f7ff ff36 	bl	80155a4 <EwAllocVideo>
 8015738:	b1d8      	cbz	r0, 8015772 <EwCreateConstAlpha8Surface+0x5a>
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	490e      	ldr	r1, [pc, #56]	; (8015778 <EwCreateConstAlpha8Surface+0x60>)
 801573e:	6083      	str	r3, [r0, #8]
 8015740:	68a3      	ldr	r3, [r4, #8]
 8015742:	e9c0 3703 	strd	r3, r7, [r0, #12]
 8015746:	680b      	ldr	r3, [r1, #0]
 8015748:	f103 0214 	add.w	r2, r3, #20
 801574c:	4b0b      	ldr	r3, [pc, #44]	; (801577c <EwCreateConstAlpha8Surface+0x64>)
 801574e:	e9c0 5600 	strd	r5, r6, [r0]
 8015752:	600a      	str	r2, [r1, #0]
 8015754:	6819      	ldr	r1, [r3, #0]
 8015756:	428a      	cmp	r2, r1
 8015758:	bfc8      	it	gt
 801575a:	601a      	strgt	r2, [r3, #0]
 801575c:	4908      	ldr	r1, [pc, #32]	; (8015780 <EwCreateConstAlpha8Surface+0x68>)
 801575e:	4b09      	ldr	r3, [pc, #36]	; (8015784 <EwCreateConstAlpha8Surface+0x6c>)
 8015760:	6809      	ldr	r1, [r1, #0]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	440b      	add	r3, r1
 8015766:	4413      	add	r3, r2
 8015768:	4a07      	ldr	r2, [pc, #28]	; (8015788 <EwCreateConstAlpha8Surface+0x70>)
 801576a:	6811      	ldr	r1, [r2, #0]
 801576c:	428b      	cmp	r3, r1
 801576e:	dd00      	ble.n	8015772 <EwCreateConstAlpha8Surface+0x5a>
 8015770:	6013      	str	r3, [r2, #0]
 8015772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015774:	2000      	movs	r0, #0
 8015776:	e7fc      	b.n	8015772 <EwCreateConstAlpha8Surface+0x5a>
 8015778:	200002e8 	.word	0x200002e8
 801577c:	20000304 	.word	0x20000304
 8015780:	200002e4 	.word	0x200002e4
 8015784:	200002d8 	.word	0x200002d8
 8015788:	200002ec 	.word	0x200002ec

0801578c <EwFreeVideo>:
 801578c:	f013 bff2 	b.w	8029774 <EwFree>
 8015790:	b530      	push	{r4, r5, lr}
 8015792:	4d18      	ldr	r5, [pc, #96]	; (80157f4 <EwFreeVideo+0x68>)
 8015794:	b087      	sub	sp, #28
 8015796:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015798:	4604      	mov	r4, r0
 801579a:	b148      	cbz	r0, 80157b0 <EwFreeVideo+0x24>
 801579c:	4298      	cmp	r0, r3
 801579e:	d126      	bne.n	80157ee <EwFreeVideo+0x62>
 80157a0:	4814      	ldr	r0, [pc, #80]	; (80157f4 <EwFreeVideo+0x68>)
 80157a2:	e003      	b.n	80157ac <EwFreeVideo+0x20>
 80157a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d1fa      	bne.n	80157a0 <EwFreeVideo+0x14>
 80157aa:	2000      	movs	r0, #0
 80157ac:	b007      	add	sp, #28
 80157ae:	bd30      	pop	{r4, r5, pc}
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d0fa      	beq.n	80157aa <EwFreeVideo+0x1e>
 80157b4:	4618      	mov	r0, r3
 80157b6:	490f      	ldr	r1, [pc, #60]	; (80157f4 <EwFreeVideo+0x68>)
 80157b8:	f7fd faae 	bl	8012d18 <EwUnlockSurface>
 80157bc:	2300      	movs	r3, #0
 80157be:	632b      	str	r3, [r5, #48]	; 0x30
 80157c0:	2c00      	cmp	r4, #0
 80157c2:	d0f2      	beq.n	80157aa <EwFreeVideo+0x1e>
 80157c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157c8:	2283      	movs	r2, #131	; 0x83
 80157ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80157ce:	2200      	movs	r2, #0
 80157d0:	9504      	str	r5, [sp, #16]
 80157d2:	9201      	str	r2, [sp, #4]
 80157d4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80157d8:	9300      	str	r3, [sp, #0]
 80157da:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80157de:	4611      	mov	r1, r2
 80157e0:	4620      	mov	r0, r4
 80157e2:	f7fd fde9 	bl	80133b8 <EwLockSurface>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	d0dc      	beq.n	80157a4 <EwFreeVideo+0x18>
 80157ea:	632c      	str	r4, [r5, #48]	; 0x30
 80157ec:	e7d8      	b.n	80157a0 <EwFreeVideo+0x14>
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d1e0      	bne.n	80157b4 <EwFreeVideo+0x28>
 80157f2:	e7e7      	b.n	80157c4 <EwFreeVideo+0x38>
 80157f4:	20000258 	.word	0x20000258
 80157f8:	b570      	push	{r4, r5, r6, lr}
 80157fa:	4e19      	ldr	r6, [pc, #100]	; (8015860 <EwFreeVideo+0xd4>)
 80157fc:	b086      	sub	sp, #24
 80157fe:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8015800:	4604      	mov	r4, r0
 8015802:	b140      	cbz	r0, 8015816 <EwFreeVideo+0x8a>
 8015804:	4298      	cmp	r0, r3
 8015806:	d128      	bne.n	801585a <EwFreeVideo+0xce>
 8015808:	4816      	ldr	r0, [pc, #88]	; (8015864 <EwFreeVideo+0xd8>)
 801580a:	e024      	b.n	8015856 <EwFreeVideo+0xca>
 801580c:	6e73      	ldr	r3, [r6, #100]	; 0x64
 801580e:	2b00      	cmp	r3, #0
 8015810:	d1fa      	bne.n	8015808 <EwFreeVideo+0x7c>
 8015812:	2000      	movs	r0, #0
 8015814:	e01f      	b.n	8015856 <EwFreeVideo+0xca>
 8015816:	2b00      	cmp	r3, #0
 8015818:	d0fb      	beq.n	8015812 <EwFreeVideo+0x86>
 801581a:	4618      	mov	r0, r3
 801581c:	4911      	ldr	r1, [pc, #68]	; (8015864 <EwFreeVideo+0xd8>)
 801581e:	f7fd fa7b 	bl	8012d18 <EwUnlockSurface>
 8015822:	2300      	movs	r3, #0
 8015824:	6673      	str	r3, [r6, #100]	; 0x64
 8015826:	2c00      	cmp	r4, #0
 8015828:	d0f3      	beq.n	8015812 <EwFreeVideo+0x86>
 801582a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801582e:	2285      	movs	r2, #133	; 0x85
 8015830:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015834:	4d0b      	ldr	r5, [pc, #44]	; (8015864 <EwFreeVideo+0xd8>)
 8015836:	9504      	str	r5, [sp, #16]
 8015838:	2200      	movs	r2, #0
 801583a:	9201      	str	r2, [sp, #4]
 801583c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8015846:	4611      	mov	r1, r2
 8015848:	4620      	mov	r0, r4
 801584a:	f7fd fdb5 	bl	80133b8 <EwLockSurface>
 801584e:	2800      	cmp	r0, #0
 8015850:	d0dc      	beq.n	801580c <EwFreeVideo+0x80>
 8015852:	6674      	str	r4, [r6, #100]	; 0x64
 8015854:	4628      	mov	r0, r5
 8015856:	b006      	add	sp, #24
 8015858:	bd70      	pop	{r4, r5, r6, pc}
 801585a:	2b00      	cmp	r3, #0
 801585c:	d1dd      	bne.n	801581a <EwFreeVideo+0x8e>
 801585e:	e7e4      	b.n	801582a <EwFreeVideo+0x9e>
 8015860:	20000258 	.word	0x20000258
 8015864:	2000028c 	.word	0x2000028c
 8015868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801586c:	460d      	mov	r5, r1
 801586e:	b08b      	sub	sp, #44	; 0x2c
 8015870:	4606      	mov	r6, r0
 8015872:	2000      	movs	r0, #0
 8015874:	690c      	ldr	r4, [r1, #16]
 8015876:	4617      	mov	r7, r2
 8015878:	4698      	mov	r8, r3
 801587a:	f7ff ff89 	bl	8015790 <EwFreeVideo+0x4>
 801587e:	2000      	movs	r0, #0
 8015880:	f7ff ffba 	bl	80157f8 <EwFreeVideo+0x6c>
 8015884:	88e9      	ldrh	r1, [r5, #6]
 8015886:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
 801588a:	f9b5 e00a 	ldrsh.w	lr, [r5, #10]
 801588e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8015892:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8015896:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015898:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801589c:	f8cd 9020 	str.w	r9, [sp, #32]
 80158a0:	f001 0908 	and.w	r9, r1, #8
 80158a4:	f001 0101 	and.w	r1, r1, #1
 80158a8:	f8cd 901c 	str.w	r9, [sp, #28]
 80158ac:	9106      	str	r1, [sp, #24]
 80158ae:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 80158b2:	eba1 010e 	sub.w	r1, r1, lr
 80158b6:	9105      	str	r1, [sp, #20]
 80158b8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 80158bc:	f8cd c008 	str.w	ip, [sp, #8]
 80158c0:	eba1 010c 	sub.w	r1, r1, ip
 80158c4:	e9cd e103 	strd	lr, r1, [sp, #12]
 80158c8:	f9b4 1036 	ldrsh.w	r1, [r4, #54]	; 0x36
 80158cc:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80158d0:	1ac9      	subs	r1, r1, r3
 80158d2:	9101      	str	r1, [sp, #4]
 80158d4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80158d8:	1a89      	subs	r1, r1, r2
 80158da:	9100      	str	r1, [sp, #0]
 80158dc:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80158e0:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 80158e4:	edd4 4a09 	vldr	s9, [r4, #36]	; 0x24
 80158e8:	ed94 4a08 	vldr	s8, [r4, #32]
 80158ec:	edd4 3a07 	vldr	s7, [r4, #28]
 80158f0:	ed94 3a06 	vldr	s6, [r4, #24]
 80158f4:	edd4 2a05 	vldr	s5, [r4, #20]
 80158f8:	ed94 2a04 	vldr	s4, [r4, #16]
 80158fc:	edd4 1a03 	vldr	s3, [r4, #12]
 8015900:	ed94 1a02 	vldr	s2, [r4, #8]
 8015904:	edd4 0a01 	vldr	s1, [r4, #4]
 8015908:	ed94 0a00 	vldr	s0, [r4]
 801590c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801590e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8015910:	47a8      	blx	r5
 8015912:	b00b      	add	sp, #44	; 0x2c
 8015914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801591c:	b0aa      	sub	sp, #168	; 0xa8
 801591e:	690c      	ldr	r4, [r1, #16]
 8015920:	460d      	mov	r5, r1
 8015922:	4690      	mov	r8, r2
 8015924:	4699      	mov	r9, r3
 8015926:	f7ff ff33 	bl	8015790 <EwFreeVideo+0x4>
 801592a:	4606      	mov	r6, r0
 801592c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801592e:	f7ff ff63 	bl	80157f8 <EwFreeVideo+0x6c>
 8015932:	4607      	mov	r7, r0
 8015934:	2e00      	cmp	r6, #0
 8015936:	f000 80a2 	beq.w	8015a7e <EwFreeVideo+0x2f2>
 801593a:	2800      	cmp	r0, #0
 801593c:	f000 809f 	beq.w	8015a7e <EwFreeVideo+0x2f2>
 8015940:	f9b4 e036 	ldrsh.w	lr, [r4, #54]	; 0x36
 8015944:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
 8015948:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801594c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8015950:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8015954:	4653      	mov	r3, sl
 8015956:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801595a:	ebae 0101 	sub.w	r1, lr, r1
 801595e:	ebac 0000 	sub.w	r0, ip, r0
 8015962:	f7fe fb55 	bl	8014010 <EwInitColorGradient>
 8015966:	edd4 6a00 	vldr	s13, [r4]
 801596a:	ed94 6a03 	vldr	s12, [r4, #12]
 801596e:	edd4 5a04 	vldr	s11, [r4, #16]
 8015972:	ed94 5a06 	vldr	s10, [r4, #24]
 8015976:	edd4 4a07 	vldr	s9, [r4, #28]
 801597a:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 801597e:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
 8015982:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8015986:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
 801598a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801598e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8015992:	eeb0 4a67 	vmov.f32	s8, s15
 8015996:	eea6 4a87 	vfma.f32	s8, s13, s14
 801599a:	4630      	mov	r0, r6
 801599c:	edd4 6a01 	vldr	s13, [r4, #4]
 80159a0:	eef0 3a67 	vmov.f32	s7, s15
 80159a4:	eee6 3a87 	vfma.f32	s7, s13, s14
 80159a8:	eef0 6a67 	vmov.f32	s13, s15
 80159ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80159b0:	eeb0 6a67 	vmov.f32	s12, s15
 80159b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80159b8:	eef0 5a67 	vmov.f32	s11, s15
 80159bc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80159c0:	eeb0 5a67 	vmov.f32	s10, s15
 80159c4:	eea4 5a87 	vfma.f32	s10, s9, s14
 80159c8:	eef0 4a67 	vmov.f32	s9, s15
 80159cc:	eee3 4a07 	vfma.f32	s9, s6, s14
 80159d0:	ed94 3a0a 	vldr	s6, [r4, #40]	; 0x28
 80159d4:	e9cd a312 	strd	sl, r3, [sp, #72]	; 0x48
 80159d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159dc:	9311      	str	r3, [sp, #68]	; 0x44
 80159de:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80159e2:	9310      	str	r3, [sp, #64]	; 0x40
 80159e4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80159e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80159ea:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80159ee:	930e      	str	r3, [sp, #56]	; 0x38
 80159f0:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 80159f4:	1a5b      	subs	r3, r3, r1
 80159f6:	930d      	str	r3, [sp, #52]	; 0x34
 80159f8:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 80159fc:	920a      	str	r2, [sp, #40]	; 0x28
 80159fe:	1a9b      	subs	r3, r3, r2
 8015a00:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
 8015a04:	eee3 7a07 	vfma.f32	s15, s6, s14
 8015a08:	4639      	mov	r1, r7
 8015a0a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8015a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a12:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015a16:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 8015a1a:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 8015a1e:	edcd 7a08 	vstr	s15, [sp, #32]
 8015a22:	edcd 4a07 	vstr	s9, [sp, #28]
 8015a26:	edd4 7a08 	vldr	s15, [r4, #32]
 8015a2a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 8015a2e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a32:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8015a36:	edcd 7a06 	vstr	s15, [sp, #24]
 8015a3a:	ed8d 5a05 	vstr	s10, [sp, #20]
 8015a3e:	edcd 5a04 	vstr	s11, [sp, #16]
 8015a42:	edd4 7a05 	vldr	s15, [r4, #20]
 8015a46:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8015a4a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a4e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015a52:	edcd 7a03 	vstr	s15, [sp, #12]
 8015a56:	ed8d 6a02 	vstr	s12, [sp, #8]
 8015a5a:	edcd 6a01 	vstr	s13, [sp, #4]
 8015a5e:	edd4 7a02 	vldr	s15, [r4, #8]
 8015a62:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a66:	edcd 7a00 	vstr	s15, [sp]
 8015a6a:	eefd 7ae3 	vcvt.s32.f32	s15, s7
 8015a6e:	ee17 3a90 	vmov	r3, s15
 8015a72:	eefd 7ac4 	vcvt.s32.f32	s15, s8
 8015a76:	ee17 2a90 	vmov	r2, s15
 8015a7a:	f7fe ff17 	bl	80148ac <EwEmulateWarp>
 8015a7e:	b02a      	add	sp, #168	; 0xa8
 8015a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015a84 <EwGfxTasksInit>:
 8015a84:	2001      	movs	r0, #1
 8015a86:	4770      	bx	lr

08015a88 <EwReorderTasks>:
 8015a88:	6902      	ldr	r2, [r0, #16]
 8015a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a8e:	2a00      	cmp	r2, #0
 8015a90:	f000 80ff 	beq.w	8015c92 <EwReorderTasks+0x20a>
 8015a94:	6811      	ldr	r1, [r2, #0]
 8015a96:	f8df e210 	ldr.w	lr, [pc, #528]	; 8015ca8 <EwReorderTasks+0x220>
 8015a9a:	4e82      	ldr	r6, [pc, #520]	; (8015ca4 <EwReorderTasks+0x21c>)
 8015a9c:	4614      	mov	r4, r2
 8015a9e:	f04f 0c10 	mov.w	ip, #16
 8015aa2:	f04f 0808 	mov.w	r8, #8
 8015aa6:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 8015aaa:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
 8015aae:	f009 050f 	and.w	r5, r9, #15
 8015ab2:	3f01      	subs	r7, #1
 8015ab4:	462b      	mov	r3, r5
 8015ab6:	2f08      	cmp	r7, #8
 8015ab8:	f200 80e1 	bhi.w	8015c7e <EwReorderTasks+0x1f6>
 8015abc:	e8df f017 	tbh	[pc, r7, lsl #1]
 8015ac0:	0025001a 	.word	0x0025001a
 8015ac4:	00a00036 	.word	0x00a00036
 8015ac8:	00c200b1 	.word	0x00c200b1
 8015acc:	00830009 	.word	0x00830009
 8015ad0:	00d3      	.short	0x00d3
 8015ad2:	68c7      	ldr	r7, [r0, #12]
 8015ad4:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015ad8:	3701      	adds	r7, #1
 8015ada:	bf08      	it	eq
 8015adc:	f105 0308 	addeq.w	r3, r5, #8
 8015ae0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015ae4:	fab3 f383 	clz	r3, r3
 8015ae8:	095b      	lsrs	r3, r3, #5
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	bf0c      	ite	eq
 8015aee:	2300      	moveq	r3, #0
 8015af0:	4673      	movne	r3, lr
 8015af2:	e034      	b.n	8015b5e <EwReorderTasks+0xd6>
 8015af4:	68c7      	ldr	r7, [r0, #12]
 8015af6:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015afa:	3701      	adds	r7, #1
 8015afc:	bf08      	it	eq
 8015afe:	f105 0308 	addeq.w	r3, r5, #8
 8015b02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b08:	e7ec      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015b0a:	68c7      	ldr	r7, [r0, #12]
 8015b0c:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015b10:	3701      	adds	r7, #1
 8015b12:	bf08      	it	eq
 8015b14:	f105 0320 	addeq.w	r3, r5, #32
 8015b18:	6925      	ldr	r5, [r4, #16]
 8015b1a:	68ed      	ldr	r5, [r5, #12]
 8015b1c:	8c2d      	ldrh	r5, [r5, #32]
 8015b1e:	fb15 3308 	smlabb	r3, r5, r8, r3
 8015b22:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b2a:	e7db      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015b2c:	68c7      	ldr	r7, [r0, #12]
 8015b2e:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015b32:	3701      	adds	r7, #1
 8015b34:	bf08      	it	eq
 8015b36:	f105 0320 	addeq.w	r3, r5, #32
 8015b3a:	6925      	ldr	r5, [r4, #16]
 8015b3c:	696d      	ldr	r5, [r5, #20]
 8015b3e:	8c2d      	ldrh	r5, [r5, #32]
 8015b40:	fb15 3308 	smlabb	r3, r5, r8, r3
 8015b44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b48:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 8015b4c:	2d00      	cmp	r5, #0
 8015b4e:	f040 8096 	bne.w	8015c7e <EwReorderTasks+0x1f6>
 8015b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	bf14      	ite	ne
 8015b5a:	2300      	movne	r3, #0
 8015b5c:	4673      	moveq	r3, lr
 8015b5e:	ea49 0303 	orr.w	r3, r9, r3
 8015b62:	80e3      	strh	r3, [r4, #6]
 8015b64:	6824      	ldr	r4, [r4, #0]
 8015b66:	2c00      	cmp	r4, #0
 8015b68:	d19d      	bne.n	8015aa6 <EwReorderTasks+0x1e>
 8015b6a:	2900      	cmp	r1, #0
 8015b6c:	f000 8091 	beq.w	8015c92 <EwReorderTasks+0x20a>
 8015b70:	6014      	str	r4, [r2, #0]
 8015b72:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8015b76:	2c00      	cmp	r4, #0
 8015b78:	4613      	mov	r3, r2
 8015b7a:	f2c0 808d 	blt.w	8015c98 <EwReorderTasks+0x210>
 8015b7e:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 8015b82:	2c00      	cmp	r4, #0
 8015b84:	f280 8088 	bge.w	8015c98 <EwReorderTasks+0x210>
 8015b88:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015b8c:	f9b1 400c 	ldrsh.w	r4, [r1, #12]
 8015b90:	42a5      	cmp	r5, r4
 8015b92:	da11      	bge.n	8015bb8 <EwReorderTasks+0x130>
 8015b94:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015b98:	f9b1 400e 	ldrsh.w	r4, [r1, #14]
 8015b9c:	42a5      	cmp	r5, r4
 8015b9e:	da0b      	bge.n	8015bb8 <EwReorderTasks+0x130>
 8015ba0:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8015ba4:	f9b2 400c 	ldrsh.w	r4, [r2, #12]
 8015ba8:	42a5      	cmp	r5, r4
 8015baa:	da05      	bge.n	8015bb8 <EwReorderTasks+0x130>
 8015bac:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8015bb0:	f9b2 400e 	ldrsh.w	r4, [r2, #14]
 8015bb4:	42a5      	cmp	r5, r4
 8015bb6:	db6f      	blt.n	8015c98 <EwReorderTasks+0x210>
 8015bb8:	6812      	ldr	r2, [r2, #0]
 8015bba:	2a00      	cmp	r2, #0
 8015bbc:	d061      	beq.n	8015c82 <EwReorderTasks+0x1fa>
 8015bbe:	680c      	ldr	r4, [r1, #0]
 8015bc0:	601c      	str	r4, [r3, #0]
 8015bc2:	600b      	str	r3, [r1, #0]
 8015bc4:	e7d5      	b.n	8015b72 <EwReorderTasks+0xea>
 8015bc6:	6927      	ldr	r7, [r4, #16]
 8015bc8:	f9b7 a016 	ldrsh.w	sl, [r7, #22]
 8015bcc:	68c7      	ldr	r7, [r0, #12]
 8015bce:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015bd2:	3701      	adds	r7, #1
 8015bd4:	d110      	bne.n	8015bf8 <EwReorderTasks+0x170>
 8015bd6:	f1ba 0f00 	cmp.w	sl, #0
 8015bda:	d006      	beq.n	8015bea <EwReorderTasks+0x162>
 8015bdc:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8015be0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015be4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8015be8:	e77c      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015bea:	f105 0320 	add.w	r3, r5, #32
 8015bee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015bf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015bf6:	e775      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015bf8:	f1ba 0f00 	cmp.w	sl, #0
 8015bfc:	d0f7      	beq.n	8015bee <EwReorderTasks+0x166>
 8015bfe:	e7ef      	b.n	8015be0 <EwReorderTasks+0x158>
 8015c00:	68c7      	ldr	r7, [r0, #12]
 8015c02:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015c06:	3701      	adds	r7, #1
 8015c08:	bf08      	it	eq
 8015c0a:	f105 0340 	addeq.w	r3, r5, #64	; 0x40
 8015c0e:	6925      	ldr	r5, [r4, #16]
 8015c10:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8015c12:	8c2d      	ldrh	r5, [r5, #32]
 8015c14:	fb15 330c 	smlabb	r3, r5, ip, r3
 8015c18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015c1c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8015c20:	e760      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015c22:	68c7      	ldr	r7, [r0, #12]
 8015c24:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015c28:	3701      	adds	r7, #1
 8015c2a:	bf08      	it	eq
 8015c2c:	f105 0340 	addeq.w	r3, r5, #64	; 0x40
 8015c30:	6925      	ldr	r5, [r4, #16]
 8015c32:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8015c34:	8c2d      	ldrh	r5, [r5, #32]
 8015c36:	fb15 330c 	smlabb	r3, r5, ip, r3
 8015c3a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015c3e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015c42:	e74f      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015c44:	68c7      	ldr	r7, [r0, #12]
 8015c46:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015c4a:	3701      	adds	r7, #1
 8015c4c:	bf08      	it	eq
 8015c4e:	f105 0340 	addeq.w	r3, r5, #64	; 0x40
 8015c52:	6925      	ldr	r5, [r4, #16]
 8015c54:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8015c56:	8c2d      	ldrh	r5, [r5, #32]
 8015c58:	fb15 330c 	smlabb	r3, r5, ip, r3
 8015c5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015c60:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 8015c64:	e73e      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015c66:	68c7      	ldr	r7, [r0, #12]
 8015c68:	f9b7 7020 	ldrsh.w	r7, [r7, #32]
 8015c6c:	3701      	adds	r7, #1
 8015c6e:	bf08      	it	eq
 8015c70:	f105 0320 	addeq.w	r3, r5, #32
 8015c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015c78:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8015c7c:	e732      	b.n	8015ae4 <EwReorderTasks+0x5c>
 8015c7e:	2300      	movs	r3, #0
 8015c80:	e76d      	b.n	8015b5e <EwReorderTasks+0xd6>
 8015c82:	6019      	str	r1, [r3, #0]
 8015c84:	680c      	ldr	r4, [r1, #0]
 8015c86:	600a      	str	r2, [r1, #0]
 8015c88:	4621      	mov	r1, r4
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	2900      	cmp	r1, #0
 8015c8e:	f47f af70 	bne.w	8015b72 <EwReorderTasks+0xea>
 8015c92:	6102      	str	r2, [r0, #16]
 8015c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c98:	680b      	ldr	r3, [r1, #0]
 8015c9a:	600a      	str	r2, [r1, #0]
 8015c9c:	460a      	mov	r2, r1
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	e7f4      	b.n	8015c8c <EwReorderTasks+0x204>
 8015ca2:	bf00      	nop
 8015ca4:	08035c04 	.word	0x08035c04
 8015ca8:	ffff8000 	.word	0xffff8000

08015cac <EwReverseTasks>:
 8015cac:	6903      	ldr	r3, [r0, #16]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	b90b      	cbnz	r3, 8015cb6 <EwReverseTasks+0xa>
 8015cb2:	6102      	str	r2, [r0, #16]
 8015cb4:	4770      	bx	lr
 8015cb6:	6819      	ldr	r1, [r3, #0]
 8015cb8:	601a      	str	r2, [r3, #0]
 8015cba:	461a      	mov	r2, r3
 8015cbc:	460b      	mov	r3, r1
 8015cbe:	e7f7      	b.n	8015cb0 <EwReverseTasks+0x4>

08015cc0 <EwEliminateTasks>:
 8015cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	2500      	movs	r5, #0
 8015cc6:	6904      	ldr	r4, [r0, #16]
 8015cc8:	4681      	mov	r9, r0
 8015cca:	462e      	mov	r6, r5
 8015ccc:	46a8      	mov	r8, r5
 8015cce:	462f      	mov	r7, r5
 8015cd0:	46aa      	mov	sl, r5
 8015cd2:	46ae      	mov	lr, r5
 8015cd4:	b90c      	cbnz	r4, 8015cda <EwEliminateTasks+0x1a>
 8015cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cda:	f1ba 0f00 	cmp.w	sl, #0
 8015cde:	d11f      	bne.n	8015d20 <EwEliminateTasks+0x60>
 8015ce0:	88e3      	ldrh	r3, [r4, #6]
 8015ce2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8015ce6:	05db      	lsls	r3, r3, #23
 8015ce8:	0ddb      	lsrs	r3, r3, #23
 8015cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015cee:	d114      	bne.n	8015d1a <EwEliminateTasks+0x5a>
 8015cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cf4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015cf8:	1ad1      	subs	r1, r2, r3
 8015cfa:	290f      	cmp	r1, #15
 8015cfc:	dd0d      	ble.n	8015d1a <EwEliminateTasks+0x5a>
 8015cfe:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8015d02:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8015d06:	eba0 0c01 	sub.w	ip, r0, r1
 8015d0a:	f1bc 0f0f 	cmp.w	ip, #15
 8015d0e:	dd04      	ble.n	8015d1a <EwEliminateTasks+0x5a>
 8015d10:	4605      	mov	r5, r0
 8015d12:	460e      	mov	r6, r1
 8015d14:	4690      	mov	r8, r2
 8015d16:	461f      	mov	r7, r3
 8015d18:	46a2      	mov	sl, r4
 8015d1a:	46a6      	mov	lr, r4
 8015d1c:	6824      	ldr	r4, [r4, #0]
 8015d1e:	e7d9      	b.n	8015cd4 <EwEliminateTasks+0x14>
 8015d20:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8015d24:	4540      	cmp	r0, r8
 8015d26:	da0b      	bge.n	8015d40 <EwEliminateTasks+0x80>
 8015d28:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015d2c:	42aa      	cmp	r2, r5
 8015d2e:	da07      	bge.n	8015d40 <EwEliminateTasks+0x80>
 8015d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d34:	42bb      	cmp	r3, r7
 8015d36:	dd03      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d3c:	42b1      	cmp	r1, r6
 8015d3e:	dc05      	bgt.n	8015d4c <EwEliminateTasks+0x8c>
 8015d40:	6823      	ldr	r3, [r4, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d1e9      	bne.n	8015d1a <EwEliminateTasks+0x5a>
 8015d46:	4654      	mov	r4, sl
 8015d48:	469a      	mov	sl, r3
 8015d4a:	e7e6      	b.n	8015d1a <EwEliminateTasks+0x5a>
 8015d4c:	42b8      	cmp	r0, r7
 8015d4e:	bfac      	ite	ge
 8015d50:	f04f 0c01 	movge.w	ip, #1
 8015d54:	f04f 0c00 	movlt.w	ip, #0
 8015d58:	42b2      	cmp	r2, r6
 8015d5a:	bfa8      	it	ge
 8015d5c:	f04c 0c02 	orrge.w	ip, ip, #2
 8015d60:	4543      	cmp	r3, r8
 8015d62:	bfd8      	it	le
 8015d64:	f04c 0c04 	orrle.w	ip, ip, #4
 8015d68:	42a9      	cmp	r1, r5
 8015d6a:	bfd8      	it	le
 8015d6c:	f04c 0c08 	orrle.w	ip, ip, #8
 8015d70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015d74:	f1bc 0f0e 	cmp.w	ip, #14
 8015d78:	d810      	bhi.n	8015d9c <EwEliminateTasks+0xdc>
 8015d7a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8015d7e:	002a      	.short	0x002a
 8015d80:	00580042 	.word	0x00580042
 8015d84:	0082006c 	.word	0x0082006c
 8015d88:	00a90095 	.word	0x00a90095
 8015d8c:	00c400ab 	.word	0x00c400ab
 8015d90:	00eb00d8 	.word	0x00eb00d8
 8015d94:	010100ee 	.word	0x010100ee
 8015d98:	01050103 	.word	0x01050103
 8015d9c:	eba8 0307 	sub.w	r3, r8, r7
 8015da0:	2b0f      	cmp	r3, #15
 8015da2:	ddcd      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015da4:	1bab      	subs	r3, r5, r6
 8015da6:	2b0f      	cmp	r3, #15
 8015da8:	ddca      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015daa:	4622      	mov	r2, r4
 8015dac:	2103      	movs	r1, #3
 8015dae:	4648      	mov	r0, r9
 8015db0:	f7fd fa2d 	bl	801320e <EwAllocTasks>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	d0c3      	beq.n	8015d40 <EwEliminateTasks+0x80>
 8015db8:	6803      	ldr	r3, [r0, #0]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	81e6      	strh	r6, [r4, #14]
 8015dbe:	8145      	strh	r5, [r0, #10]
 8015dc0:	815e      	strh	r6, [r3, #10]
 8015dc2:	81dd      	strh	r5, [r3, #14]
 8015dc4:	819f      	strh	r7, [r3, #12]
 8015dc6:	8156      	strh	r6, [r2, #10]
 8015dc8:	81d5      	strh	r5, [r2, #14]
 8015dca:	f8a2 8008 	strh.w	r8, [r2, #8]
 8015dce:	4604      	mov	r4, r0
 8015dd0:	e7b6      	b.n	8015d40 <EwEliminateTasks+0x80>
 8015dd2:	eba8 0300 	sub.w	r3, r8, r0
 8015dd6:	2b0f      	cmp	r3, #15
 8015dd8:	ddb2      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015dda:	1bab      	subs	r3, r5, r6
 8015ddc:	2b0f      	cmp	r3, #15
 8015dde:	ddaf      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015de0:	4622      	mov	r2, r4
 8015de2:	2102      	movs	r1, #2
 8015de4:	4648      	mov	r0, r9
 8015de6:	f7fd fa12 	bl	801320e <EwAllocTasks>
 8015dea:	2800      	cmp	r0, #0
 8015dec:	d0a8      	beq.n	8015d40 <EwEliminateTasks+0x80>
 8015dee:	6803      	ldr	r3, [r0, #0]
 8015df0:	f8a4 8008 	strh.w	r8, [r4, #8]
 8015df4:	f8a0 800c 	strh.w	r8, [r0, #12]
 8015df8:	81c6      	strh	r6, [r0, #14]
 8015dfa:	f8a3 800c 	strh.w	r8, [r3, #12]
 8015dfe:	815d      	strh	r5, [r3, #10]
 8015e00:	e7e5      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015e02:	eba8 0307 	sub.w	r3, r8, r7
 8015e06:	2b0f      	cmp	r3, #15
 8015e08:	dd9a      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015e0a:	1aaa      	subs	r2, r5, r2
 8015e0c:	2a0f      	cmp	r2, #15
 8015e0e:	dd97      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015e10:	4622      	mov	r2, r4
 8015e12:	2102      	movs	r1, #2
 8015e14:	4648      	mov	r0, r9
 8015e16:	f7fd f9fa 	bl	801320e <EwAllocTasks>
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	d090      	beq.n	8015d40 <EwEliminateTasks+0x80>
 8015e1e:	6803      	ldr	r3, [r0, #0]
 8015e20:	8165      	strh	r5, [r4, #10]
 8015e22:	8187      	strh	r7, [r0, #12]
 8015e24:	81c5      	strh	r5, [r0, #14]
 8015e26:	f8a3 8008 	strh.w	r8, [r3, #8]
 8015e2a:	81dd      	strh	r5, [r3, #14]
 8015e2c:	e7cf      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015e2e:	eba8 0300 	sub.w	r3, r8, r0
 8015e32:	2b0f      	cmp	r3, #15
 8015e34:	dd84      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015e36:	1aaa      	subs	r2, r5, r2
 8015e38:	2a0f      	cmp	r2, #15
 8015e3a:	dd81      	ble.n	8015d40 <EwEliminateTasks+0x80>
 8015e3c:	4622      	mov	r2, r4
 8015e3e:	2101      	movs	r1, #1
 8015e40:	4648      	mov	r0, r9
 8015e42:	f7fd f9e4 	bl	801320e <EwAllocTasks>
 8015e46:	2800      	cmp	r0, #0
 8015e48:	f43f af7a 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015e4c:	8165      	strh	r5, [r4, #10]
 8015e4e:	81c5      	strh	r5, [r0, #14]
 8015e50:	f8a0 8008 	strh.w	r8, [r0, #8]
 8015e54:	e7bb      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015e56:	1bdb      	subs	r3, r3, r7
 8015e58:	2b0f      	cmp	r3, #15
 8015e5a:	f77f af71 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015e5e:	1bab      	subs	r3, r5, r6
 8015e60:	2b0f      	cmp	r3, #15
 8015e62:	f77f af6d 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015e66:	4622      	mov	r2, r4
 8015e68:	2102      	movs	r1, #2
 8015e6a:	4648      	mov	r0, r9
 8015e6c:	f7fd f9cf 	bl	801320e <EwAllocTasks>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	f43f af65 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015e76:	6803      	ldr	r3, [r0, #0]
 8015e78:	81a7      	strh	r7, [r4, #12]
 8015e7a:	8107      	strh	r7, [r0, #8]
 8015e7c:	81c6      	strh	r6, [r0, #14]
 8015e7e:	811f      	strh	r7, [r3, #8]
 8015e80:	e7bd      	b.n	8015dfe <EwEliminateTasks+0x13e>
 8015e82:	1a1b      	subs	r3, r3, r0
 8015e84:	2b0f      	cmp	r3, #15
 8015e86:	f77f af5b 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015e8a:	1bab      	subs	r3, r5, r6
 8015e8c:	2b0f      	cmp	r3, #15
 8015e8e:	f77f af57 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015e92:	4622      	mov	r2, r4
 8015e94:	2101      	movs	r1, #1
 8015e96:	4648      	mov	r0, r9
 8015e98:	f7fd f9b9 	bl	801320e <EwAllocTasks>
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	f43f af4f 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015ea2:	81e6      	strh	r6, [r4, #14]
 8015ea4:	8145      	strh	r5, [r0, #10]
 8015ea6:	e792      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015ea8:	1bdb      	subs	r3, r3, r7
 8015eaa:	2b0f      	cmp	r3, #15
 8015eac:	f77f af48 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015eb0:	1aaa      	subs	r2, r5, r2
 8015eb2:	2a0f      	cmp	r2, #15
 8015eb4:	f77f af44 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015eb8:	4622      	mov	r2, r4
 8015eba:	2101      	movs	r1, #1
 8015ebc:	4648      	mov	r0, r9
 8015ebe:	f7fd f9a6 	bl	801320e <EwAllocTasks>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	f43f af3c 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015ec8:	8165      	strh	r5, [r4, #10]
 8015eca:	81c5      	strh	r5, [r0, #14]
 8015ecc:	8187      	strh	r7, [r0, #12]
 8015ece:	e77e      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015ed0:	8165      	strh	r5, [r4, #10]
 8015ed2:	e735      	b.n	8015d40 <EwEliminateTasks+0x80>
 8015ed4:	eba8 0307 	sub.w	r3, r8, r7
 8015ed8:	2b0f      	cmp	r3, #15
 8015eda:	f77f af31 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015ede:	1b89      	subs	r1, r1, r6
 8015ee0:	290f      	cmp	r1, #15
 8015ee2:	f77f af2d 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015ee6:	4622      	mov	r2, r4
 8015ee8:	2102      	movs	r1, #2
 8015eea:	4648      	mov	r0, r9
 8015eec:	f7fd f98f 	bl	801320e <EwAllocTasks>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	f43f af25 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015ef6:	6803      	ldr	r3, [r0, #0]
 8015ef8:	81e6      	strh	r6, [r4, #14]
 8015efa:	8187      	strh	r7, [r0, #12]
 8015efc:	8146      	strh	r6, [r0, #10]
 8015efe:	f8a3 8008 	strh.w	r8, [r3, #8]
 8015f02:	815e      	strh	r6, [r3, #10]
 8015f04:	e763      	b.n	8015dce <EwEliminateTasks+0x10e>
 8015f06:	eba8 0300 	sub.w	r3, r8, r0
 8015f0a:	2b0f      	cmp	r3, #15
 8015f0c:	f77f af18 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f10:	1b89      	subs	r1, r1, r6
 8015f12:	290f      	cmp	r1, #15
 8015f14:	f77f af14 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f18:	4622      	mov	r2, r4
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	4648      	mov	r0, r9
 8015f1e:	f7fd f976 	bl	801320e <EwAllocTasks>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	f43f af0c 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015f28:	81e6      	strh	r6, [r4, #14]
 8015f2a:	8146      	strh	r6, [r0, #10]
 8015f2c:	e790      	b.n	8015e50 <EwEliminateTasks+0x190>
 8015f2e:	eba8 0307 	sub.w	r3, r8, r7
 8015f32:	2b0f      	cmp	r3, #15
 8015f34:	f77f af04 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f38:	1a8a      	subs	r2, r1, r2
 8015f3a:	2a0f      	cmp	r2, #15
 8015f3c:	f77f af00 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f40:	4622      	mov	r2, r4
 8015f42:	2101      	movs	r1, #1
 8015f44:	4648      	mov	r0, r9
 8015f46:	f7fd f962 	bl	801320e <EwAllocTasks>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f43f aef8 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015f50:	81a7      	strh	r7, [r4, #12]
 8015f52:	e77d      	b.n	8015e50 <EwEliminateTasks+0x190>
 8015f54:	f8a4 8008 	strh.w	r8, [r4, #8]
 8015f58:	e6f2      	b.n	8015d40 <EwEliminateTasks+0x80>
 8015f5a:	1bdb      	subs	r3, r3, r7
 8015f5c:	2b0f      	cmp	r3, #15
 8015f5e:	f77f aeef 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f62:	1b89      	subs	r1, r1, r6
 8015f64:	290f      	cmp	r1, #15
 8015f66:	f77f aeeb 	ble.w	8015d40 <EwEliminateTasks+0x80>
 8015f6a:	4622      	mov	r2, r4
 8015f6c:	2101      	movs	r1, #1
 8015f6e:	4648      	mov	r0, r9
 8015f70:	f7fd f94d 	bl	801320e <EwAllocTasks>
 8015f74:	2800      	cmp	r0, #0
 8015f76:	f43f aee3 	beq.w	8015d40 <EwEliminateTasks+0x80>
 8015f7a:	81e6      	strh	r6, [r4, #14]
 8015f7c:	8146      	strh	r6, [r0, #10]
 8015f7e:	e7a5      	b.n	8015ecc <EwEliminateTasks+0x20c>
 8015f80:	81e6      	strh	r6, [r4, #14]
 8015f82:	e6dd      	b.n	8015d40 <EwEliminateTasks+0x80>
 8015f84:	81a7      	strh	r7, [r4, #12]
 8015f86:	e6db      	b.n	8015d40 <EwEliminateTasks+0x80>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	f8ce 3000 	str.w	r3, [lr]
 8015f8e:	4674      	mov	r4, lr
 8015f90:	e6d6      	b.n	8015d40 <EwEliminateTasks+0x80>

08015f92 <EwExecuteTasks>:
 8015f92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f96:	ed2d 8b02 	vpush	{d8}
 8015f9a:	b0e3      	sub	sp, #396	; 0x18c
 8015f9c:	f8d0 b010 	ldr.w	fp, [r0, #16]
 8015fa0:	9016      	str	r0, [sp, #88]	; 0x58
 8015fa2:	f1bb 0f00 	cmp.w	fp, #0
 8015fa6:	d109      	bne.n	8015fbc <EwExecuteTasks+0x2a>
 8015fa8:	4658      	mov	r0, fp
 8015faa:	f7ff fbf1 	bl	8015790 <EwFreeVideo+0x4>
 8015fae:	4658      	mov	r0, fp
 8015fb0:	b063      	add	sp, #396	; 0x18c
 8015fb2:	ecbd 8b02 	vpop	{d8}
 8015fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fba:	e41d      	b.n	80157f8 <EwFreeVideo+0x6c>
 8015fbc:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8015fc0:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8015fc4:	f003 030f 	and.w	r3, r3, #15
 8015fc8:	3a01      	subs	r2, #1
 8015fca:	461d      	mov	r5, r3
 8015fcc:	2a08      	cmp	r2, #8
 8015fce:	d844      	bhi.n	801605a <EwExecuteTasks+0xc8>
 8015fd0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015fd4:	01640097 	.word	0x01640097
 8015fd8:	09b4025a 	.word	0x09b4025a
 8015fdc:	09ee09d5 	.word	0x09ee09d5
 8015fe0:	04430009 	.word	0x04430009
 8015fe4:	0a06      	.short	0x0a06
 8015fe6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fe8:	f8db 4010 	ldr.w	r4, [fp, #16]
 8015fec:	68d6      	ldr	r6, [r2, #12]
 8015fee:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
 8015ff2:	3201      	adds	r2, #1
 8015ff4:	bf08      	it	eq
 8015ff6:	f103 0508 	addeq.w	r5, r3, #8
 8015ffa:	4ba6      	ldr	r3, [pc, #664]	; (8016294 <EwExecuteTasks+0x302>)
 8015ffc:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 8016000:	2f00      	cmp	r7, #0
 8016002:	d036      	beq.n	8016072 <EwExecuteTasks+0xe0>
 8016004:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8016008:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 801600c:	f9bb 800e 	ldrsh.w	r8, [fp, #14]
 8016010:	1aed      	subs	r5, r5, r3
 8016012:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8016016:	2000      	movs	r0, #0
 8016018:	eba8 0803 	sub.w	r8, r8, r3
 801601c:	f7ff fbb8 	bl	8015790 <EwFreeVideo+0x4>
 8016020:	2000      	movs	r0, #0
 8016022:	f7ff fbe9 	bl	80157f8 <EwFreeVideo+0x6c>
 8016026:	4620      	mov	r0, r4
 8016028:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801602c:	f930 1b08 	ldrsh.w	r1, [r0], #8
 8016030:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016034:	9006      	str	r0, [sp, #24]
 8016036:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801603a:	9503      	str	r5, [sp, #12]
 801603c:	f000 0001 	and.w	r0, r0, #1
 8016040:	e9cd 8004 	strd	r8, r0, [sp, #16]
 8016044:	f9bb 000a 	ldrsh.w	r0, [fp, #10]
 8016048:	9002      	str	r0, [sp, #8]
 801604a:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801604e:	9001      	str	r0, [sp, #4]
 8016050:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8016054:	9000      	str	r0, [sp, #0]
 8016056:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8016058:	47b8      	blx	r7
 801605a:	4a8f      	ldr	r2, [pc, #572]	; (8016298 <EwExecuteTasks+0x306>)
 801605c:	6e94      	ldr	r4, [r2, #104]	; 0x68
 801605e:	b12c      	cbz	r4, 801606c <EwExecuteTasks+0xda>
 8016060:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016062:	e9d2 321b 	ldrd	r3, r2, [r2, #108]	; 0x6c
 8016066:	68c0      	ldr	r0, [r0, #12]
 8016068:	4659      	mov	r1, fp
 801606a:	47a0      	blx	r4
 801606c:	f8db b000 	ldr.w	fp, [fp]
 8016070:	e797      	b.n	8015fa2 <EwExecuteTasks+0x10>
 8016072:	4630      	mov	r0, r6
 8016074:	f7ff fb8c 	bl	8015790 <EwFreeVideo+0x4>
 8016078:	4606      	mov	r6, r0
 801607a:	2800      	cmp	r0, #0
 801607c:	d0ed      	beq.n	801605a <EwExecuteTasks+0xc8>
 801607e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8016082:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016086:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801608a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801608e:	68a2      	ldr	r2, [r4, #8]
 8016090:	1bc9      	subs	r1, r1, r7
 8016092:	e9cd 2236 	strd	r2, r2, [sp, #216]	; 0xd8
 8016096:	1a1b      	subs	r3, r3, r0
 8016098:	2900      	cmp	r1, #0
 801609a:	bfb8      	it	lt
 801609c:	4249      	neglt	r1, r1
 801609e:	2b00      	cmp	r3, #0
 80160a0:	bfb8      	it	lt
 80160a2:	425b      	neglt	r3, r3
 80160a4:	68e2      	ldr	r2, [r4, #12]
 80160a6:	9239      	str	r2, [sp, #228]	; 0xe4
 80160a8:	3101      	adds	r1, #1
 80160aa:	3301      	adds	r3, #1
 80160ac:	4299      	cmp	r1, r3
 80160ae:	bfb8      	it	lt
 80160b0:	4619      	movlt	r1, r3
 80160b2:	68e2      	ldr	r2, [r4, #12]
 80160b4:	9238      	str	r2, [sp, #224]	; 0xe0
 80160b6:	af4c      	add	r7, sp, #304	; 0x130
 80160b8:	463b      	mov	r3, r7
 80160ba:	aa36      	add	r2, sp, #216	; 0xd8
 80160bc:	4608      	mov	r0, r1
 80160be:	f7fd ffa7 	bl	8014010 <EwInitColorGradient>
 80160c2:	4874      	ldr	r0, [pc, #464]	; (8016294 <EwExecuteTasks+0x302>)
 80160c4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80160c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80160cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80160d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80160d4:	f8d5 0950 	ldr.w	r0, [r5, #2384]	; 0x950
 80160d8:	e9cd 7005 	strd	r7, r0, [sp, #20]
 80160dc:	f9bb 000e 	ldrsh.w	r0, [fp, #14]
 80160e0:	9004      	str	r0, [sp, #16]
 80160e2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
 80160e6:	9003      	str	r0, [sp, #12]
 80160e8:	f9bb 000a 	ldrsh.w	r0, [fp, #10]
 80160ec:	9002      	str	r0, [sp, #8]
 80160ee:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 80160f2:	9001      	str	r0, [sp, #4]
 80160f4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80160f8:	9000      	str	r0, [sp, #0]
 80160fa:	4630      	mov	r0, r6
 80160fc:	f7fe f99e 	bl	801443c <EwEmulateLine>
 8016100:	e7ab      	b.n	801605a <EwExecuteTasks+0xc8>
 8016102:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016104:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 8016108:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 801610c:	f8db 4010 	ldr.w	r4, [fp, #16]
 8016110:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
 8016114:	3201      	adds	r2, #1
 8016116:	bf08      	it	eq
 8016118:	f103 0508 	addeq.w	r5, r3, #8
 801611c:	4b5d      	ldr	r3, [pc, #372]	; (8016294 <EwExecuteTasks+0x302>)
 801611e:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016122:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8016126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016128:	9314      	str	r3, [sp, #80]	; 0x50
 801612a:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 801612e:	1afb      	subs	r3, r7, r3
 8016130:	ee08 3a10 	vmov	s16, r3
 8016134:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	9315      	str	r3, [sp, #84]	; 0x54
 801613c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801613e:	2b00      	cmp	r3, #0
 8016140:	d064      	beq.n	801620c <EwExecuteTasks+0x27a>
 8016142:	2000      	movs	r0, #0
 8016144:	f7ff fb24 	bl	8015790 <EwFreeVideo+0x4>
 8016148:	2000      	movs	r0, #0
 801614a:	f7ff fb55 	bl	80157f8 <EwFreeVideo+0x6c>
 801614e:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016152:	075d      	lsls	r5, r3, #29
 8016154:	f104 0708 	add.w	r7, r4, #8
 8016158:	d545      	bpl.n	80161e6 <EwExecuteTasks+0x254>
 801615a:	f9bb 5008 	ldrsh.w	r5, [fp, #8]
 801615e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016162:	f9bb 600a 	ldrsh.w	r6, [fp, #10]
 8016166:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801616a:	4285      	cmp	r5, r0
 801616c:	dc0d      	bgt.n	801618a <EwExecuteTasks+0x1f8>
 801616e:	428e      	cmp	r6, r1
 8016170:	dc0b      	bgt.n	801618a <EwExecuteTasks+0x1f8>
 8016172:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 8016176:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801617a:	429a      	cmp	r2, r3
 801617c:	db05      	blt.n	801618a <EwExecuteTasks+0x1f8>
 801617e:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016182:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016186:	429a      	cmp	r2, r3
 8016188:	da2d      	bge.n	80161e6 <EwExecuteTasks+0x254>
 801618a:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 801618e:	f9bb 900c 	ldrsh.w	r9, [fp, #12]
 8016192:	f9bb 800e 	ldrsh.w	r8, [fp, #14]
 8016196:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 801619a:	ab4c      	add	r3, sp, #304	; 0x130
 801619c:	1a2d      	subs	r5, r5, r0
 801619e:	1a76      	subs	r6, r6, r1
 80161a0:	eba9 0900 	sub.w	r9, r9, r0
 80161a4:	eba8 0801 	sub.w	r8, r8, r1
 80161a8:	463a      	mov	r2, r7
 80161aa:	ebac 0101 	sub.w	r1, ip, r1
 80161ae:	1a20      	subs	r0, r4, r0
 80161b0:	f7fd ff2e 	bl	8014010 <EwInitColorGradient>
 80161b4:	4632      	mov	r2, r6
 80161b6:	4629      	mov	r1, r5
 80161b8:	a84c      	add	r0, sp, #304	; 0x130
 80161ba:	f7fe f815 	bl	80141e8 <EwGetColorFromGradient>
 80161be:	4632      	mov	r2, r6
 80161c0:	9036      	str	r0, [sp, #216]	; 0xd8
 80161c2:	4649      	mov	r1, r9
 80161c4:	a84c      	add	r0, sp, #304	; 0x130
 80161c6:	f7fe f80f 	bl	80141e8 <EwGetColorFromGradient>
 80161ca:	4642      	mov	r2, r8
 80161cc:	9037      	str	r0, [sp, #220]	; 0xdc
 80161ce:	4649      	mov	r1, r9
 80161d0:	a84c      	add	r0, sp, #304	; 0x130
 80161d2:	f7fe f809 	bl	80141e8 <EwGetColorFromGradient>
 80161d6:	4642      	mov	r2, r8
 80161d8:	9038      	str	r0, [sp, #224]	; 0xe0
 80161da:	4629      	mov	r1, r5
 80161dc:	a84c      	add	r0, sp, #304	; 0x130
 80161de:	f7fe f803 	bl	80141e8 <EwGetColorFromGradient>
 80161e2:	af36      	add	r7, sp, #216	; 0xd8
 80161e4:	9039      	str	r0, [sp, #228]	; 0xe4
 80161e6:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 80161ea:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 80161ee:	9702      	str	r7, [sp, #8]
 80161f0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80161f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	9301      	str	r3, [sp, #4]
 80161fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161fe:	9300      	str	r3, [sp, #0]
 8016200:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016204:	ee18 3a10 	vmov	r3, s16
 8016208:	47a0      	blx	r4
 801620a:	e726      	b.n	801605a <EwExecuteTasks+0xc8>
 801620c:	4650      	mov	r0, sl
 801620e:	f7ff fabf 	bl	8015790 <EwFreeVideo+0x4>
 8016212:	4606      	mov	r6, r0
 8016214:	2800      	cmp	r0, #0
 8016216:	f43f af20 	beq.w	801605a <EwExecuteTasks+0xc8>
 801621a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801621e:	f003 0306 	and.w	r3, r3, #6
 8016222:	2b06      	cmp	r3, #6
 8016224:	d108      	bne.n	8016238 <EwExecuteTasks+0x2a6>
 8016226:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 801622a:	429a      	cmp	r2, r3
 801622c:	d104      	bne.n	8016238 <EwExecuteTasks+0x2a6>
 801622e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016232:	429a      	cmp	r2, r3
 8016234:	bf08      	it	eq
 8016236:	3d04      	subeq	r5, #4
 8016238:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 801623c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016240:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 8016244:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016248:	f50d 7898 	add.w	r8, sp, #304	; 0x130
 801624c:	4643      	mov	r3, r8
 801624e:	f104 0208 	add.w	r2, r4, #8
 8016252:	ebae 0101 	sub.w	r1, lr, r1
 8016256:	ebac 0000 	sub.w	r0, ip, r0
 801625a:	f7fd fed9 	bl	8014010 <EwInitColorGradient>
 801625e:	4b0d      	ldr	r3, [pc, #52]	; (8016294 <EwExecuteTasks+0x302>)
 8016260:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 8016264:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 8016268:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801626c:	4630      	mov	r0, r6
 801626e:	f8d5 398c 	ldr.w	r3, [r5, #2444]	; 0x98c
 8016272:	9304      	str	r3, [sp, #16]
 8016274:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016278:	1ad3      	subs	r3, r2, r3
 801627a:	9303      	str	r3, [sp, #12]
 801627c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8016280:	1acb      	subs	r3, r1, r3
 8016282:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8016286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	ee18 3a10 	vmov	r3, s16
 801628e:	f7fe f945 	bl	801451c <EwEmulateFill>
 8016292:	e6e2      	b.n	801605a <EwExecuteTasks+0xc8>
 8016294:	08035c04 	.word	0x08035c04
 8016298:	20000258 	.word	0x20000258
 801629c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801629e:	f8db 4010 	ldr.w	r4, [fp, #16]
 80162a2:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80162a6:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
 80162aa:	3201      	adds	r2, #1
 80162ac:	bf08      	it	eq
 80162ae:	f103 0520 	addeq.w	r5, r3, #32
 80162b2:	68e3      	ldr	r3, [r4, #12]
 80162b4:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 80162b8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80162bc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80162c0:	4b70      	ldr	r3, [pc, #448]	; (8016484 <EwExecuteTasks+0x4f2>)
 80162c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80162c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162ca:	9314      	str	r3, [sp, #80]	; 0x50
 80162cc:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 80162d0:	1ad3      	subs	r3, r2, r3
 80162d2:	9315      	str	r3, [sp, #84]	; 0x54
 80162d4:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80162d8:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80162dc:	1ad3      	subs	r3, r2, r3
 80162de:	9317      	str	r3, [sp, #92]	; 0x5c
 80162e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d076      	beq.n	80163d4 <EwExecuteTasks+0x442>
 80162e6:	2000      	movs	r0, #0
 80162e8:	f7ff fa52 	bl	8015790 <EwFreeVideo+0x4>
 80162ec:	2000      	movs	r0, #0
 80162ee:	f7ff fa83 	bl	80157f8 <EwFreeVideo+0x6c>
 80162f2:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80162f6:	0758      	lsls	r0, r3, #29
 80162f8:	f104 0a10 	add.w	sl, r4, #16
 80162fc:	d546      	bpl.n	801638c <EwExecuteTasks+0x3fa>
 80162fe:	f9bb 5008 	ldrsh.w	r5, [fp, #8]
 8016302:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016306:	f9bb 600a 	ldrsh.w	r6, [fp, #10]
 801630a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801630e:	4285      	cmp	r5, r0
 8016310:	dc0d      	bgt.n	801632e <EwExecuteTasks+0x39c>
 8016312:	428e      	cmp	r6, r1
 8016314:	dc0b      	bgt.n	801632e <EwExecuteTasks+0x39c>
 8016316:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 801631a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801631e:	429a      	cmp	r2, r3
 8016320:	db05      	blt.n	801632e <EwExecuteTasks+0x39c>
 8016322:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016326:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801632a:	429a      	cmp	r2, r3
 801632c:	da2e      	bge.n	801638c <EwExecuteTasks+0x3fa>
 801632e:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8016332:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 8016336:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 801633a:	f9bb 700e 	ldrsh.w	r7, [fp, #14]
 801633e:	ab4c      	add	r3, sp, #304	; 0x130
 8016340:	1a2d      	subs	r5, r5, r0
 8016342:	1a76      	subs	r6, r6, r1
 8016344:	eba8 0800 	sub.w	r8, r8, r0
 8016348:	1a7f      	subs	r7, r7, r1
 801634a:	ebac 0000 	sub.w	r0, ip, r0
 801634e:	ebae 0101 	sub.w	r1, lr, r1
 8016352:	4652      	mov	r2, sl
 8016354:	f7fd fe5c 	bl	8014010 <EwInitColorGradient>
 8016358:	4632      	mov	r2, r6
 801635a:	4629      	mov	r1, r5
 801635c:	a84c      	add	r0, sp, #304	; 0x130
 801635e:	f7fd ff43 	bl	80141e8 <EwGetColorFromGradient>
 8016362:	4632      	mov	r2, r6
 8016364:	9036      	str	r0, [sp, #216]	; 0xd8
 8016366:	4641      	mov	r1, r8
 8016368:	a84c      	add	r0, sp, #304	; 0x130
 801636a:	f7fd ff3d 	bl	80141e8 <EwGetColorFromGradient>
 801636e:	463a      	mov	r2, r7
 8016370:	9037      	str	r0, [sp, #220]	; 0xdc
 8016372:	4641      	mov	r1, r8
 8016374:	a84c      	add	r0, sp, #304	; 0x130
 8016376:	f7fd ff37 	bl	80141e8 <EwGetColorFromGradient>
 801637a:	463a      	mov	r2, r7
 801637c:	9038      	str	r0, [sp, #224]	; 0xe0
 801637e:	4629      	mov	r1, r5
 8016380:	a84c      	add	r0, sp, #304	; 0x130
 8016382:	f7fd ff31 	bl	80141e8 <EwGetColorFromGradient>
 8016386:	f10d 0ad8 	add.w	sl, sp, #216	; 0xd8
 801638a:	9039      	str	r0, [sp, #228]	; 0xe4
 801638c:	68e0      	ldr	r0, [r4, #12]
 801638e:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 8016392:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8016396:	f8cd a014 	str.w	sl, [sp, #20]
 801639a:	f8bb 1006 	ldrh.w	r1, [fp, #6]
 801639e:	f001 0101 	and.w	r1, r1, #1
 80163a2:	9104      	str	r1, [sp, #16]
 80163a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80163a6:	9103      	str	r1, [sp, #12]
 80163a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80163aa:	9102      	str	r1, [sp, #8]
 80163ac:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80163b0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80163b4:	4419      	add	r1, r3
 80163b6:	1b49      	subs	r1, r1, r5
 80163b8:	9101      	str	r1, [sp, #4]
 80163ba:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80163be:	f9b4 4000 	ldrsh.w	r4, [r4]
 80163c2:	4411      	add	r1, r2
 80163c4:	1b09      	subs	r1, r1, r4
 80163c6:	9100      	str	r1, [sp, #0]
 80163c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80163ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80163cc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 80163d0:	47a0      	blx	r4
 80163d2:	e642      	b.n	801605a <EwExecuteTasks+0xc8>
 80163d4:	4648      	mov	r0, r9
 80163d6:	f7ff f9db 	bl	8015790 <EwFreeVideo+0x4>
 80163da:	4606      	mov	r6, r0
 80163dc:	68e0      	ldr	r0, [r4, #12]
 80163de:	f7ff fa0b 	bl	80157f8 <EwFreeVideo+0x6c>
 80163e2:	4607      	mov	r7, r0
 80163e4:	2e00      	cmp	r6, #0
 80163e6:	f43f ae38 	beq.w	801605a <EwExecuteTasks+0xc8>
 80163ea:	2800      	cmp	r0, #0
 80163ec:	f43f ae35 	beq.w	801605a <EwExecuteTasks+0xc8>
 80163f0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80163f4:	f003 0306 	and.w	r3, r3, #6
 80163f8:	2b06      	cmp	r3, #6
 80163fa:	d108      	bne.n	801640e <EwExecuteTasks+0x47c>
 80163fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016400:	429a      	cmp	r2, r3
 8016402:	d104      	bne.n	801640e <EwExecuteTasks+0x47c>
 8016404:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016408:	429a      	cmp	r2, r3
 801640a:	bf08      	it	eq
 801640c:	3d04      	subeq	r5, #4
 801640e:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 8016412:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8016416:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801641a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801641e:	f50d 7898 	add.w	r8, sp, #304	; 0x130
 8016422:	4643      	mov	r3, r8
 8016424:	f104 0210 	add.w	r2, r4, #16
 8016428:	ebae 0101 	sub.w	r1, lr, r1
 801642c:	ebac 0000 	sub.w	r0, ip, r0
 8016430:	f7fd fdee 	bl	8014010 <EwInitColorGradient>
 8016434:	4913      	ldr	r1, [pc, #76]	; (8016484 <EwExecuteTasks+0x4f2>)
 8016436:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801643a:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 801643e:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 8016442:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016446:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801644a:	f8d5 19d0 	ldr.w	r1, [r5, #2512]	; 0x9d0
 801644e:	9107      	str	r1, [sp, #28]
 8016450:	eba3 010c 	sub.w	r1, r3, ip
 8016454:	9106      	str	r1, [sp, #24]
 8016456:	1a11      	subs	r1, r2, r0
 8016458:	e9cd 8104 	strd	r8, r1, [sp, #16]
 801645c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8016460:	4419      	add	r1, r3
 8016462:	eba1 010c 	sub.w	r1, r1, ip
 8016466:	9103      	str	r1, [sp, #12]
 8016468:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801646c:	4411      	add	r1, r2
 801646e:	1a08      	subs	r0, r1, r0
 8016470:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016472:	9101      	str	r1, [sp, #4]
 8016474:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016476:	9002      	str	r0, [sp, #8]
 8016478:	9100      	str	r1, [sp, #0]
 801647a:	4630      	mov	r0, r6
 801647c:	4639      	mov	r1, r7
 801647e:	f7fe f91e 	bl	80146be <EwEmulateCopy>
 8016482:	e5ea      	b.n	801605a <EwExecuteTasks+0xc8>
 8016484:	08035c04 	.word	0x08035c04
 8016488:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801648a:	f8db 4010 	ldr.w	r4, [fp, #16]
 801648e:	68d2      	ldr	r2, [r2, #12]
 8016490:	9217      	str	r2, [sp, #92]	; 0x5c
 8016492:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8016496:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801649a:	f9bb 600a 	ldrsh.w	r6, [fp, #10]
 801649e:	3201      	adds	r2, #1
 80164a0:	bf08      	it	eq
 80164a2:	f103 0520 	addeq.w	r5, r3, #32
 80164a6:	6963      	ldr	r3, [r4, #20]
 80164a8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80164ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80164b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80164b4:	4ba5      	ldr	r3, [pc, #660]	; (801674c <EwExecuteTasks+0x7ba>)
 80164b6:	1a8a      	subs	r2, r1, r2
 80164b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80164bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164c0:	9214      	str	r2, [sp, #80]	; 0x50
 80164c2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80164c6:	f8d3 7184 	ldr.w	r7, [r3, #388]	; 0x184
 80164ca:	1a8a      	subs	r2, r1, r2
 80164cc:	9215      	str	r2, [sp, #84]	; 0x54
 80164ce:	2f00      	cmp	r7, #0
 80164d0:	f000 809a 	beq.w	8016608 <EwExecuteTasks+0x676>
 80164d4:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 80164d8:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 80164dc:	1ad3      	subs	r3, r2, r3
 80164de:	9318      	str	r3, [sp, #96]	; 0x60
 80164e0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80164e4:	2000      	movs	r0, #0
 80164e6:	1b9b      	subs	r3, r3, r6
 80164e8:	9319      	str	r3, [sp, #100]	; 0x64
 80164ea:	f7ff f951 	bl	8015790 <EwFreeVideo+0x4>
 80164ee:	2000      	movs	r0, #0
 80164f0:	f7ff f982 	bl	80157f8 <EwFreeVideo+0x6c>
 80164f4:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80164f8:	0759      	lsls	r1, r3, #29
 80164fa:	f104 0a18 	add.w	sl, r4, #24
 80164fe:	d54b      	bpl.n	8016598 <EwExecuteTasks+0x606>
 8016500:	f9bb 5008 	ldrsh.w	r5, [fp, #8]
 8016504:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016508:	4285      	cmp	r5, r0
 801650a:	dc11      	bgt.n	8016530 <EwExecuteTasks+0x59e>
 801650c:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 8016510:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016514:	429a      	cmp	r2, r3
 8016516:	dc0b      	bgt.n	8016530 <EwExecuteTasks+0x59e>
 8016518:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 801651c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	db05      	blt.n	8016530 <EwExecuteTasks+0x59e>
 8016524:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016528:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801652c:	429a      	cmp	r2, r3
 801652e:	da33      	bge.n	8016598 <EwExecuteTasks+0x606>
 8016530:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8016534:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 8016538:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801653c:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
 8016540:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 8016544:	f9bb 600e 	ldrsh.w	r6, [fp, #14]
 8016548:	ab4c      	add	r3, sp, #304	; 0x130
 801654a:	1a2d      	subs	r5, r5, r0
 801654c:	eba9 0901 	sub.w	r9, r9, r1
 8016550:	eba8 0800 	sub.w	r8, r8, r0
 8016554:	1a76      	subs	r6, r6, r1
 8016556:	ebac 0000 	sub.w	r0, ip, r0
 801655a:	ebae 0101 	sub.w	r1, lr, r1
 801655e:	4652      	mov	r2, sl
 8016560:	f7fd fd56 	bl	8014010 <EwInitColorGradient>
 8016564:	464a      	mov	r2, r9
 8016566:	4629      	mov	r1, r5
 8016568:	a84c      	add	r0, sp, #304	; 0x130
 801656a:	f7fd fe3d 	bl	80141e8 <EwGetColorFromGradient>
 801656e:	464a      	mov	r2, r9
 8016570:	9036      	str	r0, [sp, #216]	; 0xd8
 8016572:	4641      	mov	r1, r8
 8016574:	a84c      	add	r0, sp, #304	; 0x130
 8016576:	f7fd fe37 	bl	80141e8 <EwGetColorFromGradient>
 801657a:	4632      	mov	r2, r6
 801657c:	9037      	str	r0, [sp, #220]	; 0xdc
 801657e:	4641      	mov	r1, r8
 8016580:	a84c      	add	r0, sp, #304	; 0x130
 8016582:	f7fd fe31 	bl	80141e8 <EwGetColorFromGradient>
 8016586:	4632      	mov	r2, r6
 8016588:	9038      	str	r0, [sp, #224]	; 0xe0
 801658a:	4629      	mov	r1, r5
 801658c:	a84c      	add	r0, sp, #304	; 0x130
 801658e:	f7fd fe2b 	bl	80141e8 <EwGetColorFromGradient>
 8016592:	f10d 0ad8 	add.w	sl, sp, #216	; 0xd8
 8016596:	9039      	str	r0, [sp, #228]	; 0xe4
 8016598:	6960      	ldr	r0, [r4, #20]
 801659a:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 801659e:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80165a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80165a6:	f8bb 1006 	ldrh.w	r1, [fp, #6]
 80165aa:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80165ac:	f001 0101 	and.w	r1, r1, #1
 80165b0:	9108      	str	r1, [sp, #32]
 80165b2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80165b6:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
 80165ba:	1a59      	subs	r1, r3, r1
 80165bc:	4429      	add	r1, r5
 80165be:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80165c0:	fb91 f5f5 	sdiv	r5, r1, r5
 80165c4:	fb06 1115 	mls	r1, r6, r5, r1
 80165c8:	9107      	str	r1, [sp, #28]
 80165ca:	f9b4 1000 	ldrsh.w	r1, [r4]
 80165ce:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80165d2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80165d4:	9604      	str	r6, [sp, #16]
 80165d6:	1a51      	subs	r1, r2, r1
 80165d8:	4429      	add	r1, r5
 80165da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80165dc:	fb91 f5f5 	sdiv	r5, r1, r5
 80165e0:	fb06 1115 	mls	r1, r6, r5, r1
 80165e4:	9106      	str	r1, [sp, #24]
 80165e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80165e8:	9105      	str	r1, [sp, #20]
 80165ea:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80165ee:	9103      	str	r1, [sp, #12]
 80165f0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80165f4:	9102      	str	r1, [sp, #8]
 80165f6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80165f8:	9101      	str	r1, [sp, #4]
 80165fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165fc:	9100      	str	r1, [sp, #0]
 80165fe:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8016600:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016602:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016604:	47b8      	blx	r7
 8016606:	e528      	b.n	801605a <EwExecuteTasks+0xc8>
 8016608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801660c:	9319      	str	r3, [sp, #100]	; 0x64
 801660e:	2b00      	cmp	r3, #0
 8016610:	f000 809e 	beq.w	8016750 <EwExecuteTasks+0x7be>
 8016614:	4638      	mov	r0, r7
 8016616:	f7ff f8bb 	bl	8015790 <EwFreeVideo+0x4>
 801661a:	4638      	mov	r0, r7
 801661c:	f7ff f8ec 	bl	80157f8 <EwFreeVideo+0x6c>
 8016620:	69a3      	ldr	r3, [r4, #24]
 8016622:	9336      	str	r3, [sp, #216]	; 0xd8
 8016624:	69e3      	ldr	r3, [r4, #28]
 8016626:	9337      	str	r3, [sp, #220]	; 0xdc
 8016628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801662a:	9339      	str	r3, [sp, #228]	; 0xe4
 801662c:	6a23      	ldr	r3, [r4, #32]
 801662e:	9338      	str	r3, [sp, #224]	; 0xe0
 8016630:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016634:	075a      	lsls	r2, r3, #29
 8016636:	d50d      	bpl.n	8016654 <EwExecuteTasks+0x6c2>
 8016638:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 801663c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016640:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8016644:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016648:	ab4c      	add	r3, sp, #304	; 0x130
 801664a:	aa36      	add	r2, sp, #216	; 0xd8
 801664c:	1a79      	subs	r1, r7, r1
 801664e:	1a28      	subs	r0, r5, r0
 8016650:	f7fd fcde 	bl	8014010 <EwInitColorGradient>
 8016654:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016658:	4296      	cmp	r6, r2
 801665a:	f6bf acfe 	bge.w	801605a <EwExecuteTasks+0xc8>
 801665e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016662:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8016666:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016668:	f9bb 8008 	ldrsh.w	r8, [fp, #8]
 801666c:	1af3      	subs	r3, r6, r3
 801666e:	440b      	add	r3, r1
 8016670:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016672:	fb93 f1f1 	sdiv	r1, r3, r1
 8016676:	fb00 3311 	mls	r3, r0, r1, r3
 801667a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801667e:	440b      	add	r3, r1
 8016680:	931a      	str	r3, [sp, #104]	; 0x68
 8016682:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016684:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8016688:	1b92      	subs	r2, r2, r6
 801668a:	1a5b      	subs	r3, r3, r1
 801668c:	4293      	cmp	r3, r2
 801668e:	bfa8      	it	ge
 8016690:	4613      	movge	r3, r2
 8016692:	9318      	str	r3, [sp, #96]	; 0x60
 8016694:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8016698:	4598      	cmp	r8, r3
 801669a:	db02      	blt.n	80166a2 <EwExecuteTasks+0x710>
 801669c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801669e:	441e      	add	r6, r3
 80166a0:	e7d8      	b.n	8016654 <EwExecuteTasks+0x6c2>
 80166a2:	f9b4 9000 	ldrsh.w	r9, [r4]
 80166a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80166aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80166ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80166ae:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80166b2:	eba8 0909 	sub.w	r9, r8, r9
 80166b6:	444d      	add	r5, r9
 80166b8:	fb95 f2f2 	sdiv	r2, r5, r2
 80166bc:	fb01 5512 	mls	r5, r1, r2, r5
 80166c0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80166c4:	18aa      	adds	r2, r5, r2
 80166c6:	eba3 0308 	sub.w	r3, r3, r8
 80166ca:	1abf      	subs	r7, r7, r2
 80166cc:	429f      	cmp	r7, r3
 80166ce:	bfa8      	it	ge
 80166d0:	461f      	movge	r7, r3
 80166d2:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80166d6:	921b      	str	r2, [sp, #108]	; 0x6c
 80166d8:	075b      	lsls	r3, r3, #29
 80166da:	d51f      	bpl.n	801671c <EwExecuteTasks+0x78a>
 80166dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80166e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80166e2:	1ab2      	subs	r2, r6, r2
 80166e4:	4649      	mov	r1, r9
 80166e6:	a84c      	add	r0, sp, #304	; 0x130
 80166e8:	eb03 0a02 	add.w	sl, r3, r2
 80166ec:	921c      	str	r2, [sp, #112]	; 0x70
 80166ee:	f7fd fd7b 	bl	80141e8 <EwGetColorFromGradient>
 80166f2:	eb09 0507 	add.w	r5, r9, r7
 80166f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166f8:	9036      	str	r0, [sp, #216]	; 0xd8
 80166fa:	4629      	mov	r1, r5
 80166fc:	a84c      	add	r0, sp, #304	; 0x130
 80166fe:	f7fd fd73 	bl	80141e8 <EwGetColorFromGradient>
 8016702:	4652      	mov	r2, sl
 8016704:	9037      	str	r0, [sp, #220]	; 0xdc
 8016706:	4629      	mov	r1, r5
 8016708:	a84c      	add	r0, sp, #304	; 0x130
 801670a:	f7fd fd6d 	bl	80141e8 <EwGetColorFromGradient>
 801670e:	4652      	mov	r2, sl
 8016710:	9038      	str	r0, [sp, #224]	; 0xe0
 8016712:	4649      	mov	r1, r9
 8016714:	a84c      	add	r0, sp, #304	; 0x130
 8016716:	f7fd fd67 	bl	80141e8 <EwGetColorFromGradient>
 801671a:	9039      	str	r0, [sp, #228]	; 0xe4
 801671c:	ab36      	add	r3, sp, #216	; 0xd8
 801671e:	6961      	ldr	r1, [r4, #20]
 8016720:	9305      	str	r3, [sp, #20]
 8016722:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016726:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016728:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801672a:	f003 0301 	and.w	r3, r3, #1
 801672e:	9304      	str	r3, [sp, #16]
 8016730:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016732:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8016736:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016738:	9301      	str	r3, [sp, #4]
 801673a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801673c:	9300      	str	r3, [sp, #0]
 801673e:	4642      	mov	r2, r8
 8016740:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016742:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016744:	4633      	mov	r3, r6
 8016746:	47a8      	blx	r5
 8016748:	44b8      	add	r8, r7
 801674a:	e7a3      	b.n	8016694 <EwExecuteTasks+0x702>
 801674c:	08035c04 	.word	0x08035c04
 8016750:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016752:	f7ff f81d 	bl	8015790 <EwFreeVideo+0x4>
 8016756:	4681      	mov	r9, r0
 8016758:	6960      	ldr	r0, [r4, #20]
 801675a:	f7ff f84d 	bl	80157f8 <EwFreeVideo+0x6c>
 801675e:	4682      	mov	sl, r0
 8016760:	f1b9 0f00 	cmp.w	r9, #0
 8016764:	f43f ac79 	beq.w	801605a <EwExecuteTasks+0xc8>
 8016768:	2800      	cmp	r0, #0
 801676a:	f43f ac76 	beq.w	801605a <EwExecuteTasks+0xc8>
 801676e:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016772:	f003 0306 	and.w	r3, r3, #6
 8016776:	2b06      	cmp	r3, #6
 8016778:	d108      	bne.n	801678c <EwExecuteTasks+0x7fa>
 801677a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801677e:	429a      	cmp	r2, r3
 8016780:	d104      	bne.n	801678c <EwExecuteTasks+0x7fa>
 8016782:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016786:	429a      	cmp	r2, r3
 8016788:	bf08      	it	eq
 801678a:	3d04      	subeq	r5, #4
 801678c:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8016790:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016794:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
 8016798:	f9b4 0000 	ldrsh.w	r0, [r4]
 801679c:	ab4c      	add	r3, sp, #304	; 0x130
 801679e:	f104 0218 	add.w	r2, r4, #24
 80167a2:	ebac 0101 	sub.w	r1, ip, r1
 80167a6:	1a38      	subs	r0, r7, r0
 80167a8:	f7fd fc32 	bl	8014010 <EwInitColorGradient>
 80167ac:	4b72      	ldr	r3, [pc, #456]	; (8016978 <EwExecuteTasks+0x9e6>)
 80167ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80167b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80167b4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80167b8:	429e      	cmp	r6, r3
 80167ba:	f6bf ac4e 	bge.w	801605a <EwExecuteTasks+0xc8>
 80167be:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80167c2:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80167c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80167c8:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 80167cc:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 80167d0:	1b75      	subs	r5, r6, r5
 80167d2:	440d      	add	r5, r1
 80167d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80167d6:	fb95 f1f1 	sdiv	r1, r5, r1
 80167da:	fb00 5511 	mls	r5, r0, r1, r5
 80167de:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80167e2:	440d      	add	r5, r1
 80167e4:	1b7f      	subs	r7, r7, r5
 80167e6:	1b9b      	subs	r3, r3, r6
 80167e8:	429f      	cmp	r7, r3
 80167ea:	bfa8      	it	ge
 80167ec:	461f      	movge	r7, r3
 80167ee:	f9bb 100c 	ldrsh.w	r1, [fp, #12]
 80167f2:	428a      	cmp	r2, r1
 80167f4:	db01      	blt.n	80167fa <EwExecuteTasks+0x868>
 80167f6:	443e      	add	r6, r7
 80167f8:	e7dc      	b.n	80167b4 <EwExecuteTasks+0x822>
 80167fa:	f9b4 0000 	ldrsh.w	r0, [r4]
 80167fe:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8016802:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8016806:	9218      	str	r2, [sp, #96]	; 0x60
 8016808:	1a10      	subs	r0, r2, r0
 801680a:	eb03 0e00 	add.w	lr, r3, r0
 801680e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016810:	fb9e fcf3 	sdiv	ip, lr, r3
 8016814:	fb03 e31c 	mls	r3, r3, ip, lr
 8016818:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 801681c:	4463      	add	r3, ip
 801681e:	eba8 0803 	sub.w	r8, r8, r3
 8016822:	1a89      	subs	r1, r1, r2
 8016824:	4588      	cmp	r8, r1
 8016826:	bfa8      	it	ge
 8016828:	4688      	movge	r8, r1
 801682a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801682c:	f8d1 19d0 	ldr.w	r1, [r1, #2512]	; 0x9d0
 8016830:	9107      	str	r1, [sp, #28]
 8016832:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016836:	f8cd 8000 	str.w	r8, [sp]
 801683a:	1a71      	subs	r1, r6, r1
 801683c:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8016840:	a94c      	add	r1, sp, #304	; 0x130
 8016842:	e9cd 5103 	strd	r5, r1, [sp, #12]
 8016846:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801684a:	4651      	mov	r1, sl
 801684c:	4633      	mov	r3, r6
 801684e:	4648      	mov	r0, r9
 8016850:	f7fd ff35 	bl	80146be <EwEmulateCopy>
 8016854:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016856:	4442      	add	r2, r8
 8016858:	e7c9      	b.n	80167ee <EwExecuteTasks+0x85c>
 801685a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801685c:	f8db 4010 	ldr.w	r4, [fp, #16]
 8016860:	68d2      	ldr	r2, [r2, #12]
 8016862:	921a      	str	r2, [sp, #104]	; 0x68
 8016864:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8016868:	9215      	str	r2, [sp, #84]	; 0x54
 801686a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801686c:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8016870:	3201      	adds	r2, #1
 8016872:	d104      	bne.n	801687e <EwExecuteTasks+0x8ec>
 8016874:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016876:	2a00      	cmp	r2, #0
 8016878:	d07a      	beq.n	8016970 <EwExecuteTasks+0x9de>
 801687a:	f103 0540 	add.w	r5, r3, #64	; 0x40
 801687e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016882:	f9b4 9000 	ldrsh.w	r9, [r4]
 8016886:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
 801688a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801688e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8016892:	9319      	str	r3, [sp, #100]	; 0x64
 8016894:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016898:	9314      	str	r3, [sp, #80]	; 0x50
 801689a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801689e:	9328      	str	r3, [sp, #160]	; 0xa0
 80168a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	f040 81d2 	bne.w	8016c4c <EwExecuteTasks+0xcba>
 80168a8:	4b33      	ldr	r3, [pc, #204]	; (8016978 <EwExecuteTasks+0x9e6>)
 80168aa:	f105 0610 	add.w	r6, r5, #16
 80168ae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80168b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80168b6:	931e      	str	r3, [sp, #120]	; 0x78
 80168b8:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80168bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80168be:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 80168c2:	9318      	str	r3, [sp, #96]	; 0x60
 80168c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80168c8:	9320      	str	r3, [sp, #128]	; 0x80
 80168ca:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80168ce:	9321      	str	r3, [sp, #132]	; 0x84
 80168d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168d2:	4499      	add	r9, r3
 80168d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80168d6:	4443      	add	r3, r8
 80168d8:	9322      	str	r3, [sp, #136]	; 0x88
 80168da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80168dc:	2b00      	cmp	r3, #0
 80168de:	f000 80f1 	beq.w	8016ac4 <EwExecuteTasks+0xb32>
 80168e2:	6923      	ldr	r3, [r4, #16]
 80168e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80168e6:	9314      	str	r3, [sp, #80]	; 0x50
 80168e8:	f7fe ff52 	bl	8015790 <EwFreeVideo+0x4>
 80168ec:	9815      	ldr	r0, [sp, #84]	; 0x54
 80168ee:	f7fe ff83 	bl	80157f8 <EwFreeVideo+0x6c>
 80168f2:	69a3      	ldr	r3, [r4, #24]
 80168f4:	9336      	str	r3, [sp, #216]	; 0xd8
 80168f6:	69e3      	ldr	r3, [r4, #28]
 80168f8:	9337      	str	r3, [sp, #220]	; 0xdc
 80168fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168fc:	9339      	str	r3, [sp, #228]	; 0xe4
 80168fe:	6a23      	ldr	r3, [r4, #32]
 8016900:	9338      	str	r3, [sp, #224]	; 0xe0
 8016902:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016906:	075d      	lsls	r5, r3, #29
 8016908:	d50d      	bpl.n	8016926 <EwExecuteTasks+0x994>
 801690a:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 801690e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016912:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8016916:	f9b4 0000 	ldrsh.w	r0, [r4]
 801691a:	ab4c      	add	r3, sp, #304	; 0x130
 801691c:	aa36      	add	r2, sp, #216	; 0xd8
 801691e:	1a71      	subs	r1, r6, r1
 8016920:	1a28      	subs	r0, r5, r0
 8016922:	f7fd fb75 	bl	8014010 <EwInitColorGradient>
 8016926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016928:	459a      	cmp	sl, r3
 801692a:	f4bf ab96 	bcs.w	801605a <EwExecuteTasks+0xc8>
 801692e:	e9da 1200 	ldrd	r1, r2, [sl]
 8016932:	f9b2 0020 	ldrsh.w	r0, [r2, #32]
 8016936:	eb01 0309 	add.w	r3, r1, r9
 801693a:	4403      	add	r3, r0
 801693c:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
 8016940:	4403      	add	r3, r0
 8016942:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016944:	4283      	cmp	r3, r0
 8016946:	dc19      	bgt.n	801697c <EwExecuteTasks+0x9ea>
 8016948:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 801694c:	440b      	add	r3, r1
 801694e:	4499      	add	r9, r3
 8016950:	68e3      	ldr	r3, [r4, #12]
 8016952:	b153      	cbz	r3, 801696a <EwExecuteTasks+0x9d8>
 8016954:	6992      	ldr	r2, [r2, #24]
 8016956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801695a:	2a20      	cmp	r2, #32
 801695c:	d105      	bne.n	801696a <EwExecuteTasks+0x9d8>
 801695e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016960:	4413      	add	r3, r2
 8016962:	eb09 4923 	add.w	r9, r9, r3, asr #16
 8016966:	b29b      	uxth	r3, r3
 8016968:	9314      	str	r3, [sp, #80]	; 0x50
 801696a:	f10a 0a08 	add.w	sl, sl, #8
 801696e:	e7da      	b.n	8016926 <EwExecuteTasks+0x994>
 8016970:	f103 0520 	add.w	r5, r3, #32
 8016974:	e783      	b.n	801687e <EwExecuteTasks+0x8ec>
 8016976:	bf00      	nop
 8016978:	08035c04 	.word	0x08035c04
 801697c:	f8da 3000 	ldr.w	r3, [sl]
 8016980:	f8da 6004 	ldr.w	r6, [sl, #4]
 8016984:	931f      	str	r3, [sp, #124]	; 0x7c
 8016986:	eb03 0209 	add.w	r2, r3, r9
 801698a:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 801698e:	18d3      	adds	r3, r2, r3
 8016990:	9315      	str	r3, [sp, #84]	; 0x54
 8016992:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016994:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016996:	4293      	cmp	r3, r2
 8016998:	bfb8      	it	lt
 801699a:	4613      	movlt	r3, r2
 801699c:	461f      	mov	r7, r3
 801699e:	f9b6 301c 	ldrsh.w	r3, [r6, #28]
 80169a2:	4413      	add	r3, r2
 80169a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80169a6:	4293      	cmp	r3, r2
 80169a8:	bfa8      	it	ge
 80169aa:	4613      	movge	r3, r2
 80169ac:	4297      	cmp	r7, r2
 80169ae:	931c      	str	r3, [sp, #112]	; 0x70
 80169b0:	f6bf ab53 	bge.w	801605a <EwExecuteTasks+0xc8>
 80169b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80169b6:	429f      	cmp	r7, r3
 80169b8:	da6a      	bge.n	8016a90 <EwExecuteTasks+0xafe>
 80169ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80169bc:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
 80169c0:	f9b6 501e 	ldrsh.w	r5, [r6, #30]
 80169c4:	4413      	add	r3, r2
 80169c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80169c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169cc:	4293      	cmp	r3, r2
 80169ce:	bfb8      	it	lt
 80169d0:	4613      	movlt	r3, r2
 80169d2:	4415      	add	r5, r2
 80169d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169d6:	4295      	cmp	r5, r2
 80169d8:	4698      	mov	r8, r3
 80169da:	462b      	mov	r3, r5
 80169dc:	bfa8      	it	ge
 80169de:	4613      	movge	r3, r2
 80169e0:	4598      	cmp	r8, r3
 80169e2:	931d      	str	r3, [sp, #116]	; 0x74
 80169e4:	da54      	bge.n	8016a90 <EwExecuteTasks+0xafe>
 80169e6:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80169ea:	f9b6 3026 	ldrsh.w	r3, [r6, #38]	; 0x26
 80169ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80169f0:	0750      	lsls	r0, r2, #29
 80169f2:	f9b6 3028 	ldrsh.w	r3, [r6, #40]	; 0x28
 80169f6:	9324      	str	r3, [sp, #144]	; 0x90
 80169f8:	d528      	bpl.n	8016a4c <EwExecuteTasks+0xaba>
 80169fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 80169fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016a00:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8016a04:	1a7b      	subs	r3, r7, r1
 8016a06:	1a69      	subs	r1, r5, r1
 8016a08:	ee08 1a10 	vmov	s16, r1
 8016a0c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016a0e:	9325      	str	r3, [sp, #148]	; 0x94
 8016a10:	eba8 0200 	sub.w	r2, r8, r0
 8016a14:	1a0d      	subs	r5, r1, r0
 8016a16:	4619      	mov	r1, r3
 8016a18:	a84c      	add	r0, sp, #304	; 0x130
 8016a1a:	9226      	str	r2, [sp, #152]	; 0x98
 8016a1c:	f7fd fbe4 	bl	80141e8 <EwGetColorFromGradient>
 8016a20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016a22:	9036      	str	r0, [sp, #216]	; 0xd8
 8016a24:	ee18 1a10 	vmov	r1, s16
 8016a28:	a84c      	add	r0, sp, #304	; 0x130
 8016a2a:	f7fd fbdd 	bl	80141e8 <EwGetColorFromGradient>
 8016a2e:	ee18 1a10 	vmov	r1, s16
 8016a32:	9037      	str	r0, [sp, #220]	; 0xdc
 8016a34:	462a      	mov	r2, r5
 8016a36:	a84c      	add	r0, sp, #304	; 0x130
 8016a38:	f7fd fbd6 	bl	80141e8 <EwGetColorFromGradient>
 8016a3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016a3e:	9038      	str	r0, [sp, #224]	; 0xe0
 8016a40:	462a      	mov	r2, r5
 8016a42:	4619      	mov	r1, r3
 8016a44:	a84c      	add	r0, sp, #304	; 0x130
 8016a46:	f7fd fbcf 	bl	80141e8 <EwGetColorFromGradient>
 8016a4a:	9039      	str	r0, [sp, #228]	; 0xe4
 8016a4c:	4b9e      	ldr	r3, [pc, #632]	; (8016cc8 <EwExecuteTasks+0xd36>)
 8016a4e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016a50:	6819      	ldr	r1, [r3, #0]
 8016a52:	ab36      	add	r3, sp, #216	; 0xd8
 8016a54:	9305      	str	r3, [sp, #20]
 8016a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a58:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8016a5c:	eba3 0508 	sub.w	r5, r3, r8
 8016a60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016a62:	9503      	str	r5, [sp, #12]
 8016a64:	f002 0201 	and.w	r2, r2, #1
 8016a68:	9204      	str	r2, [sp, #16]
 8016a6a:	1bda      	subs	r2, r3, r7
 8016a6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016a6e:	9202      	str	r2, [sp, #8]
 8016a70:	4443      	add	r3, r8
 8016a72:	461a      	mov	r2, r3
 8016a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a76:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8016a78:	1ad3      	subs	r3, r2, r3
 8016a7a:	9301      	str	r3, [sp, #4]
 8016a7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016a80:	443b      	add	r3, r7
 8016a82:	1a9b      	subs	r3, r3, r2
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016a88:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016a8a:	4643      	mov	r3, r8
 8016a8c:	463a      	mov	r2, r7
 8016a8e:	47a8      	blx	r5
 8016a90:	f9b6 3024 	ldrsh.w	r3, [r6, #36]	; 0x24
 8016a94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016a96:	4413      	add	r3, r2
 8016a98:	4499      	add	r9, r3
 8016a9a:	68e3      	ldr	r3, [r4, #12]
 8016a9c:	b153      	cbz	r3, 8016ab4 <EwExecuteTasks+0xb22>
 8016a9e:	69b2      	ldr	r2, [r6, #24]
 8016aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016aa4:	2a20      	cmp	r2, #32
 8016aa6:	d105      	bne.n	8016ab4 <EwExecuteTasks+0xb22>
 8016aa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016aaa:	4413      	add	r3, r2
 8016aac:	eb09 4923 	add.w	r9, r9, r3, asr #16
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	9314      	str	r3, [sp, #80]	; 0x50
 8016ab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ab6:	f10a 0a08 	add.w	sl, sl, #8
 8016aba:	459a      	cmp	sl, r3
 8016abc:	f4ff af5e 	bcc.w	801697c <EwExecuteTasks+0x9ea>
 8016ac0:	f7ff bacb 	b.w	801605a <EwExecuteTasks+0xc8>
 8016ac4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016ac6:	f7fe fe63 	bl	8015790 <EwFreeVideo+0x4>
 8016aca:	4b7f      	ldr	r3, [pc, #508]	; (8016cc8 <EwExecuteTasks+0xd36>)
 8016acc:	9014      	str	r0, [sp, #80]	; 0x50
 8016ace:	6818      	ldr	r0, [r3, #0]
 8016ad0:	f7fe fe92 	bl	80157f8 <EwFreeVideo+0x6c>
 8016ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ad6:	9015      	str	r0, [sp, #84]	; 0x54
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f43f aabe 	beq.w	801605a <EwExecuteTasks+0xc8>
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	f43f aabb 	beq.w	801605a <EwExecuteTasks+0xc8>
 8016ae4:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016ae8:	f003 0306 	and.w	r3, r3, #6
 8016aec:	2b06      	cmp	r3, #6
 8016aee:	d109      	bne.n	8016b04 <EwExecuteTasks+0xb72>
 8016af0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d105      	bne.n	8016b04 <EwExecuteTasks+0xb72>
 8016af8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016afc:	429a      	cmp	r2, r3
 8016afe:	bf08      	it	eq
 8016b00:	f105 060c 	addeq.w	r6, r5, #12
 8016b04:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8016b08:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016b0c:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8016b10:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016b14:	6927      	ldr	r7, [r4, #16]
 8016b16:	ab4c      	add	r3, sp, #304	; 0x130
 8016b18:	f104 0218 	add.w	r2, r4, #24
 8016b1c:	ebac 0101 	sub.w	r1, ip, r1
 8016b20:	1a28      	subs	r0, r5, r0
 8016b22:	f7fd fa75 	bl	8014010 <EwInitColorGradient>
 8016b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016b28:	459a      	cmp	sl, r3
 8016b2a:	f4bf aa96 	bcs.w	801605a <EwExecuteTasks+0xc8>
 8016b2e:	e9da 1200 	ldrd	r1, r2, [sl]
 8016b32:	f9b2 0020 	ldrsh.w	r0, [r2, #32]
 8016b36:	eb01 0309 	add.w	r3, r1, r9
 8016b3a:	4403      	add	r3, r0
 8016b3c:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
 8016b40:	4403      	add	r3, r0
 8016b42:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016b44:	4283      	cmp	r3, r0
 8016b46:	dd6f      	ble.n	8016c28 <EwExecuteTasks+0xc96>
 8016b48:	4b60      	ldr	r3, [pc, #384]	; (8016ccc <EwExecuteTasks+0xd3a>)
 8016b4a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8016b4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b50:	e9da 6500 	ldrd	r6, r5, [sl]
 8016b54:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8016b58:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
 8016b5c:	eb06 0c09 	add.w	ip, r6, r9
 8016b60:	449c      	add	ip, r3
 8016b62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b64:	4563      	cmp	r3, ip
 8016b66:	bfb8      	it	lt
 8016b68:	4663      	movlt	r3, ip
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b6e:	4461      	add	r1, ip
 8016b70:	4299      	cmp	r1, r3
 8016b72:	bfa8      	it	ge
 8016b74:	4619      	movge	r1, r3
 8016b76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b78:	911a      	str	r1, [sp, #104]	; 0x68
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	f6bf aa6d 	bge.w	801605a <EwExecuteTasks+0xc8>
 8016b80:	428a      	cmp	r2, r1
 8016b82:	da3b      	bge.n	8016bfc <EwExecuteTasks+0xc6a>
 8016b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016b86:	f9b5 8022 	ldrsh.w	r8, [r5, #34]	; 0x22
 8016b8a:	f9b5 001e 	ldrsh.w	r0, [r5, #30]
 8016b8e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016b90:	4498      	add	r8, r3
 8016b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b94:	4440      	add	r0, r8
 8016b96:	4543      	cmp	r3, r8
 8016b98:	bfb8      	it	lt
 8016b9a:	4643      	movlt	r3, r8
 8016b9c:	4288      	cmp	r0, r1
 8016b9e:	bfa8      	it	ge
 8016ba0:	4608      	movge	r0, r1
 8016ba2:	4283      	cmp	r3, r0
 8016ba4:	da2a      	bge.n	8016bfc <EwExecuteTasks+0xc6a>
 8016ba6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016ba8:	f8d1 19d0 	ldr.w	r1, [r1, #2512]	; 0x9d0
 8016bac:	9107      	str	r1, [sp, #28]
 8016bae:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 8016bb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016bb4:	eba3 0e0e 	sub.w	lr, r3, lr
 8016bb8:	f8cd e018 	str.w	lr, [sp, #24]
 8016bbc:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016bc0:	eba2 0e0e 	sub.w	lr, r2, lr
 8016bc4:	f8cd e014 	str.w	lr, [sp, #20]
 8016bc8:	f50d 7e98 	add.w	lr, sp, #304	; 0x130
 8016bcc:	f8cd e010 	str.w	lr, [sp, #16]
 8016bd0:	f9b5 e028 	ldrsh.w	lr, [r5, #40]	; 0x28
 8016bd4:	449e      	add	lr, r3
 8016bd6:	ebae 0e08 	sub.w	lr, lr, r8
 8016bda:	f8cd e00c 	str.w	lr, [sp, #12]
 8016bde:	f9b5 e026 	ldrsh.w	lr, [r5, #38]	; 0x26
 8016be2:	4496      	add	lr, r2
 8016be4:	1ac0      	subs	r0, r0, r3
 8016be6:	1a89      	subs	r1, r1, r2
 8016be8:	ebae 0c0c 	sub.w	ip, lr, ip
 8016bec:	9001      	str	r0, [sp, #4]
 8016bee:	9100      	str	r1, [sp, #0]
 8016bf0:	f8cd c008 	str.w	ip, [sp, #8]
 8016bf4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8016bf8:	f7fd fd61 	bl	80146be <EwEmulateCopy>
 8016bfc:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 8016c00:	441e      	add	r6, r3
 8016c02:	68e3      	ldr	r3, [r4, #12]
 8016c04:	44b1      	add	r9, r6
 8016c06:	b143      	cbz	r3, 8016c1a <EwExecuteTasks+0xc88>
 8016c08:	69aa      	ldr	r2, [r5, #24]
 8016c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c0e:	2a20      	cmp	r2, #32
 8016c10:	bf02      	ittt	eq
 8016c12:	18ff      	addeq	r7, r7, r3
 8016c14:	eb09 4927 	addeq.w	r9, r9, r7, asr #16
 8016c18:	b2bf      	uxtheq	r7, r7
 8016c1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c1c:	f10a 0a08 	add.w	sl, sl, #8
 8016c20:	459a      	cmp	sl, r3
 8016c22:	d395      	bcc.n	8016b50 <EwExecuteTasks+0xbbe>
 8016c24:	f7ff ba19 	b.w	801605a <EwExecuteTasks+0xc8>
 8016c28:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8016c2c:	440b      	add	r3, r1
 8016c2e:	4499      	add	r9, r3
 8016c30:	68e3      	ldr	r3, [r4, #12]
 8016c32:	b143      	cbz	r3, 8016c46 <EwExecuteTasks+0xcb4>
 8016c34:	6992      	ldr	r2, [r2, #24]
 8016c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c3a:	2a20      	cmp	r2, #32
 8016c3c:	bf02      	ittt	eq
 8016c3e:	18ff      	addeq	r7, r7, r3
 8016c40:	eb09 4927 	addeq.w	r9, r9, r7, asr #16
 8016c44:	b2bf      	uxtheq	r7, r7
 8016c46:	f10a 0a08 	add.w	sl, sl, #8
 8016c4a:	e76c      	b.n	8016b26 <EwExecuteTasks+0xb94>
 8016c4c:	f105 0320 	add.w	r3, r5, #32
 8016c50:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c54:	4b1d      	ldr	r3, [pc, #116]	; (8016ccc <EwExecuteTasks+0xd3a>)
 8016c56:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
 8016c5a:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8016c5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016c62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8016c66:	9325      	str	r3, [sp, #148]	; 0x94
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f000 81af 	beq.w	8016fcc <EwExecuteTasks+0x103a>
 8016c6e:	6923      	ldr	r3, [r4, #16]
 8016c70:	931d      	str	r3, [sp, #116]	; 0x74
 8016c72:	2000      	movs	r0, #0
 8016c74:	f7fe fd8c 	bl	8015790 <EwFreeVideo+0x4>
 8016c78:	2000      	movs	r0, #0
 8016c7a:	f7fe fdbd 	bl	80157f8 <EwFreeVideo+0x6c>
 8016c7e:	eba7 0309 	sub.w	r3, r7, r9
 8016c82:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c84:	eba6 0308 	sub.w	r3, r6, r8
 8016c88:	9318      	str	r3, [sp, #96]	; 0x60
 8016c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c8c:	2b5a      	cmp	r3, #90	; 0x5a
 8016c8e:	d11f      	bne.n	8016cd0 <EwExecuteTasks+0xd3e>
 8016c90:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8016c94:	f9bb 800a 	ldrsh.w	r8, [fp, #10]
 8016c98:	1af3      	subs	r3, r6, r3
 8016c9a:	931c      	str	r3, [sp, #112]	; 0x70
 8016c9c:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8016ca0:	eba3 0309 	sub.w	r3, r3, r9
 8016ca4:	9321      	str	r3, [sp, #132]	; 0x84
 8016ca6:	eba6 0308 	sub.w	r3, r6, r8
 8016caa:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8016cae:	931e      	str	r3, [sp, #120]	; 0x78
 8016cb0:	eba6 0309 	sub.w	r3, r6, r9
 8016cb4:	9322      	str	r3, [sp, #136]	; 0x88
 8016cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cb8:	9336      	str	r3, [sp, #216]	; 0xd8
 8016cba:	69a3      	ldr	r3, [r4, #24]
 8016cbc:	9337      	str	r3, [sp, #220]	; 0xdc
 8016cbe:	6a23      	ldr	r3, [r4, #32]
 8016cc0:	9339      	str	r3, [sp, #228]	; 0xe4
 8016cc2:	69e3      	ldr	r3, [r4, #28]
 8016cc4:	9338      	str	r3, [sp, #224]	; 0xe0
 8016cc6:	e023      	b.n	8016d10 <EwExecuteTasks+0xd7e>
 8016cc8:	2000023c 	.word	0x2000023c
 8016ccc:	08035c04 	.word	0x08035c04
 8016cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cd2:	2bb4      	cmp	r3, #180	; 0xb4
 8016cd4:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8016cd8:	d149      	bne.n	8016d6e <EwExecuteTasks+0xddc>
 8016cda:	1afb      	subs	r3, r7, r3
 8016cdc:	931c      	str	r3, [sp, #112]	; 0x70
 8016cde:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8016ce2:	f9bb 8008 	ldrsh.w	r8, [fp, #8]
 8016ce6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ce8:	1af3      	subs	r3, r6, r3
 8016cea:	9321      	str	r3, [sp, #132]	; 0x84
 8016cec:	eba7 0308 	sub.w	r3, r7, r8
 8016cf0:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
 8016cf4:	931e      	str	r3, [sp, #120]	; 0x78
 8016cf6:	1bf3      	subs	r3, r6, r7
 8016cf8:	9322      	str	r3, [sp, #136]	; 0x88
 8016cfa:	6a23      	ldr	r3, [r4, #32]
 8016cfc:	9336      	str	r3, [sp, #216]	; 0xd8
 8016cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d00:	9337      	str	r3, [sp, #220]	; 0xdc
 8016d02:	69e3      	ldr	r3, [r4, #28]
 8016d04:	9339      	str	r3, [sp, #228]	; 0xe4
 8016d06:	69a3      	ldr	r3, [r4, #24]
 8016d08:	9338      	str	r3, [sp, #224]	; 0xe0
 8016d0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d0e:	9218      	str	r2, [sp, #96]	; 0x60
 8016d10:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016d12:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016d14:	ab4c      	add	r3, sp, #304	; 0x130
 8016d16:	aa36      	add	r2, sp, #216	; 0xd8
 8016d18:	f7fd f97a 	bl	8014010 <EwInitColorGradient>
 8016d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d1e:	459a      	cmp	sl, r3
 8016d20:	f4bf a99b 	bcs.w	801605a <EwExecuteTasks+0xc8>
 8016d24:	e9da 1200 	ldrd	r1, r2, [sl]
 8016d28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d2a:	f9b2 0020 	ldrsh.w	r0, [r2, #32]
 8016d2e:	18cb      	adds	r3, r1, r3
 8016d30:	4403      	add	r3, r0
 8016d32:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
 8016d36:	4403      	add	r3, r0
 8016d38:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016d3a:	4283      	cmp	r3, r0
 8016d3c:	f300 80c0 	bgt.w	8016ec0 <EwExecuteTasks+0xf2e>
 8016d40:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8016d44:	440b      	add	r3, r1
 8016d46:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016d48:	4419      	add	r1, r3
 8016d4a:	68e3      	ldr	r3, [r4, #12]
 8016d4c:	9114      	str	r1, [sp, #80]	; 0x50
 8016d4e:	b15b      	cbz	r3, 8016d68 <EwExecuteTasks+0xdd6>
 8016d50:	6992      	ldr	r2, [r2, #24]
 8016d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d56:	2a20      	cmp	r2, #32
 8016d58:	d106      	bne.n	8016d68 <EwExecuteTasks+0xdd6>
 8016d5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016d5c:	4413      	add	r3, r2
 8016d5e:	eb01 4223 	add.w	r2, r1, r3, asr #16
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	9214      	str	r2, [sp, #80]	; 0x50
 8016d66:	931d      	str	r3, [sp, #116]	; 0x74
 8016d68:	f10a 0a08 	add.w	sl, sl, #8
 8016d6c:	e7d6      	b.n	8016d1c <EwExecuteTasks+0xd8a>
 8016d6e:	1afb      	subs	r3, r7, r3
 8016d70:	9321      	str	r3, [sp, #132]	; 0x84
 8016d72:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8016d76:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8016d7a:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 8016d7e:	eba3 0308 	sub.w	r3, r3, r8
 8016d82:	931e      	str	r3, [sp, #120]	; 0x78
 8016d84:	1bbb      	subs	r3, r7, r6
 8016d86:	9322      	str	r3, [sp, #136]	; 0x88
 8016d88:	69e3      	ldr	r3, [r4, #28]
 8016d8a:	9336      	str	r3, [sp, #216]	; 0xd8
 8016d8c:	6a23      	ldr	r3, [r4, #32]
 8016d8e:	9337      	str	r3, [sp, #220]	; 0xdc
 8016d90:	69a3      	ldr	r3, [r4, #24]
 8016d92:	9339      	str	r3, [sp, #228]	; 0xe4
 8016d94:	eba2 0208 	sub.w	r2, r2, r8
 8016d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d9a:	921c      	str	r2, [sp, #112]	; 0x70
 8016d9c:	e792      	b.n	8016cc4 <EwExecuteTasks+0xd32>
 8016d9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016da0:	eba2 0c08 	sub.w	ip, r2, r8
 8016da4:	1b55      	subs	r5, r2, r5
 8016da6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016da8:	2ab4      	cmp	r2, #180	; 0xb4
 8016daa:	f040 8105 	bne.w	8016fb8 <EwExecuteTasks+0x1026>
 8016dae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016db0:	eba2 0109 	sub.w	r1, r2, r9
 8016db4:	eba2 0e06 	sub.w	lr, r2, r6
 8016db8:	44be      	add	lr, r7
 8016dba:	19c8      	adds	r0, r1, r7
 8016dbc:	449c      	add	ip, r3
 8016dbe:	441d      	add	r5, r3
 8016dc0:	9524      	str	r5, [sp, #144]	; 0x90
 8016dc2:	4661      	mov	r1, ip
 8016dc4:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8016dc8:	4607      	mov	r7, r0
 8016dca:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8016dce:	932a      	str	r3, [sp, #168]	; 0xa8
 8016dd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016dd2:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 8016dd6:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 8016dda:	4443      	add	r3, r8
 8016ddc:	4698      	mov	r8, r3
 8016dde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016de0:	4433      	add	r3, r6
 8016de2:	461e      	mov	r6, r3
 8016de4:	4b78      	ldr	r3, [pc, #480]	; (8016fc8 <EwExecuteTasks+0x1036>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	932b      	str	r3, [sp, #172]	; 0xac
 8016dea:	ab36      	add	r3, sp, #216	; 0xd8
 8016dec:	9308      	str	r3, [sp, #32]
 8016dee:	2300      	movs	r3, #0
 8016df0:	9307      	str	r3, [sp, #28]
 8016df2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8016df6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016df8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016dfc:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8016e00:	f009 0901 	and.w	r9, r9, #1
 8016e04:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8016e08:	ee07 5a90 	vmov	s15, r5
 8016e0c:	f8cd 9018 	str.w	r9, [sp, #24]
 8016e10:	f9bb 900e 	ldrsh.w	r9, [fp, #14]
 8016e14:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8016e16:	eef8 3ae7 	vcvt.f32.s32	s7, s15
 8016e1a:	ee07 7a90 	vmov	s15, r7
 8016e1e:	eba9 0902 	sub.w	r9, r9, r2
 8016e22:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8016e26:	ee07 1a90 	vmov	s15, r1
 8016e2a:	f8cd 9014 	str.w	r9, [sp, #20]
 8016e2e:	f9bb 900c 	ldrsh.w	r9, [fp, #12]
 8016e32:	9302      	str	r3, [sp, #8]
 8016e34:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8016e38:	ee07 0a90 	vmov	s15, r0
 8016e3c:	eba9 0903 	sub.w	r9, r9, r3
 8016e40:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 8016e44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016e46:	9301      	str	r3, [sp, #4]
 8016e48:	ee07 ca90 	vmov	s15, ip
 8016e4c:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8016e50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e58:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016e5a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016e5c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016e5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016e60:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016e64:	ee07 ea90 	vmov	s15, lr
 8016e68:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016e6c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016e70:	eba8 0303 	sub.w	r3, r8, r3
 8016e74:	1ab2      	subs	r2, r6, r2
 8016e76:	eeb0 4a65 	vmov.f32	s8, s11
 8016e7a:	eef0 2a65 	vmov.f32	s5, s11
 8016e7e:	eeb0 1a65 	vmov.f32	s2, s11
 8016e82:	47a8      	blx	r5
 8016e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e86:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016e88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8016e8c:	4413      	add	r3, r2
 8016e8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e90:	441a      	add	r2, r3
 8016e92:	68e3      	ldr	r3, [r4, #12]
 8016e94:	9214      	str	r2, [sp, #80]	; 0x50
 8016e96:	b16b      	cbz	r3, 8016eb4 <EwExecuteTasks+0xf22>
 8016e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e9a:	6992      	ldr	r2, [r2, #24]
 8016e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ea0:	2a20      	cmp	r2, #32
 8016ea2:	d107      	bne.n	8016eb4 <EwExecuteTasks+0xf22>
 8016ea4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016ea6:	4413      	add	r3, r2
 8016ea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016eaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	9214      	str	r2, [sp, #80]	; 0x50
 8016eb2:	931d      	str	r3, [sp, #116]	; 0x74
 8016eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016eb6:	f10a 0a08 	add.w	sl, sl, #8
 8016eba:	459a      	cmp	sl, r3
 8016ebc:	f4bf a8cd 	bcs.w	801605a <EwExecuteTasks+0xc8>
 8016ec0:	f8da 3000 	ldr.w	r3, [sl]
 8016ec4:	9326      	str	r3, [sp, #152]	; 0x98
 8016ec6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016eca:	9317      	str	r3, [sp, #92]	; 0x5c
 8016ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ece:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016ed0:	189a      	adds	r2, r3, r2
 8016ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ed4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016ed8:	18d3      	adds	r3, r2, r3
 8016eda:	931f      	str	r3, [sp, #124]	; 0x7c
 8016edc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016ede:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	bfb8      	it	lt
 8016ee4:	4613      	movlt	r3, r2
 8016ee6:	461e      	mov	r6, r3
 8016ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016eea:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 8016eee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ef0:	4411      	add	r1, r2
 8016ef2:	428b      	cmp	r3, r1
 8016ef4:	bfa8      	it	ge
 8016ef6:	460b      	movge	r3, r1
 8016ef8:	4699      	mov	r9, r3
 8016efa:	1b9b      	subs	r3, r3, r6
 8016efc:	9327      	str	r3, [sp, #156]	; 0x9c
 8016efe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016f00:	429e      	cmp	r6, r3
 8016f02:	f6bf a8aa 	bge.w	801605a <EwExecuteTasks+0xc8>
 8016f06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	ddbb      	ble.n	8016e84 <EwExecuteTasks+0xef2>
 8016f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f0e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8016f10:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8016f14:	4413      	add	r3, r2
 8016f16:	9320      	str	r3, [sp, #128]	; 0x80
 8016f18:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8016f1c:	4293      	cmp	r3, r2
 8016f1e:	bfb8      	it	lt
 8016f20:	4613      	movlt	r3, r2
 8016f22:	4698      	mov	r8, r3
 8016f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f26:	f9b3 701e 	ldrsh.w	r7, [r3, #30]
 8016f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016f2c:	4417      	add	r7, r2
 8016f2e:	42bb      	cmp	r3, r7
 8016f30:	bfa8      	it	ge
 8016f32:	463b      	movge	r3, r7
 8016f34:	461d      	mov	r5, r3
 8016f36:	eba3 0308 	sub.w	r3, r3, r8
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8016f3e:	dda1      	ble.n	8016e84 <EwExecuteTasks+0xef2>
 8016f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f42:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8016f46:	932b      	str	r3, [sp, #172]	; 0xac
 8016f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f4a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8016f4e:	932c      	str	r3, [sp, #176]	; 0xb0
 8016f50:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8016f54:	0759      	lsls	r1, r3, #29
 8016f56:	d517      	bpl.n	8016f88 <EwExecuteTasks+0xff6>
 8016f58:	4642      	mov	r2, r8
 8016f5a:	4631      	mov	r1, r6
 8016f5c:	a84c      	add	r0, sp, #304	; 0x130
 8016f5e:	f7fd f943 	bl	80141e8 <EwGetColorFromGradient>
 8016f62:	4642      	mov	r2, r8
 8016f64:	9036      	str	r0, [sp, #216]	; 0xd8
 8016f66:	4649      	mov	r1, r9
 8016f68:	a84c      	add	r0, sp, #304	; 0x130
 8016f6a:	f7fd f93d 	bl	80141e8 <EwGetColorFromGradient>
 8016f6e:	462a      	mov	r2, r5
 8016f70:	9037      	str	r0, [sp, #220]	; 0xdc
 8016f72:	4649      	mov	r1, r9
 8016f74:	a84c      	add	r0, sp, #304	; 0x130
 8016f76:	f7fd f937 	bl	80141e8 <EwGetColorFromGradient>
 8016f7a:	462a      	mov	r2, r5
 8016f7c:	9038      	str	r0, [sp, #224]	; 0xe0
 8016f7e:	4631      	mov	r1, r6
 8016f80:	a84c      	add	r0, sp, #304	; 0x130
 8016f82:	f7fd f931 	bl	80141e8 <EwGetColorFromGradient>
 8016f86:	9039      	str	r0, [sp, #228]	; 0xe4
 8016f88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016f8a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8016f8e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016f92:	2a5a      	cmp	r2, #90	; 0x5a
 8016f94:	f47f af03 	bne.w	8016d9e <EwExecuteTasks+0xe0c>
 8016f98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f9a:	eba2 0c06 	sub.w	ip, r2, r6
 8016f9e:	eba2 0109 	sub.w	r1, r2, r9
 8016fa2:	eb08 0e07 	add.w	lr, r8, r7
 8016fa6:	449c      	add	ip, r3
 8016fa8:	442f      	add	r7, r5
 8016faa:	4419      	add	r1, r3
 8016fac:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	9723      	str	r7, [sp, #140]	; 0x8c
 8016fb4:	4670      	mov	r0, lr
 8016fb6:	e708      	b.n	8016dca <EwExecuteTasks+0xe38>
 8016fb8:	eb07 0e0c 	add.w	lr, r7, ip
 8016fbc:	eb09 0103 	add.w	r1, r9, r3
 8016fc0:	eb06 0c03 	add.w	ip, r6, r3
 8016fc4:	442f      	add	r7, r5
 8016fc6:	e7f1      	b.n	8016fac <EwExecuteTasks+0x101a>
 8016fc8:	2000023c 	.word	0x2000023c
 8016fcc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016fce:	f7fe fbdf 	bl	8015790 <EwFreeVideo+0x4>
 8016fd2:	4b94      	ldr	r3, [pc, #592]	; (8017224 <EwExecuteTasks+0x1292>)
 8016fd4:	9029      	str	r0, [sp, #164]	; 0xa4
 8016fd6:	6818      	ldr	r0, [r3, #0]
 8016fd8:	f7fe fc0e 	bl	80157f8 <EwFreeVideo+0x6c>
 8016fdc:	f8bb c006 	ldrh.w	ip, [fp, #6]
 8016fe0:	902a      	str	r0, [sp, #168]	; 0xa8
 8016fe2:	f01c 0304 	ands.w	r3, ip, #4
 8016fe6:	932b      	str	r3, [sp, #172]	; 0xac
 8016fe8:	bf0c      	ite	eq
 8016fea:	ab36      	addeq	r3, sp, #216	; 0xd8
 8016fec:	ab4c      	addne	r3, sp, #304	; 0x130
 8016fee:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ff0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f43f a831 	beq.w	801605a <EwExecuteTasks+0xc8>
 8016ff8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	f43f a82d 	beq.w	801605a <EwExecuteTasks+0xc8>
 8017000:	f00c 0c06 	and.w	ip, ip, #6
 8017004:	f1bc 0f06 	cmp.w	ip, #6
 8017008:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
 801700c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8017010:	d105      	bne.n	801701e <EwExecuteTasks+0x108c>
 8017012:	4282      	cmp	r2, r0
 8017014:	d103      	bne.n	801701e <EwExecuteTasks+0x108c>
 8017016:	4299      	cmp	r1, r3
 8017018:	bf04      	itt	eq
 801701a:	351c      	addeq	r5, #28
 801701c:	9517      	streq	r5, [sp, #92]	; 0x5c
 801701e:	6925      	ldr	r5, [r4, #16]
 8017020:	9520      	str	r5, [sp, #128]	; 0x80
 8017022:	eba7 0509 	sub.w	r5, r7, r9
 8017026:	951c      	str	r5, [sp, #112]	; 0x70
 8017028:	eba6 0508 	sub.w	r5, r6, r8
 801702c:	951a      	str	r5, [sp, #104]	; 0x68
 801702e:	f9bb 500a 	ldrsh.w	r5, [fp, #10]
 8017032:	9518      	str	r5, [sp, #96]	; 0x60
 8017034:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8017038:	951b      	str	r5, [sp, #108]	; 0x6c
 801703a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801703c:	f9bb c00e 	ldrsh.w	ip, [fp, #14]
 8017040:	f9bb e008 	ldrsh.w	lr, [fp, #8]
 8017044:	2d5a      	cmp	r5, #90	; 0x5a
 8017046:	f040 80ad 	bne.w	80171a4 <EwExecuteTasks+0x1212>
 801704a:	eba6 050c 	sub.w	r5, r6, ip
 801704e:	951d      	str	r5, [sp, #116]	; 0x74
 8017050:	ebae 0509 	sub.w	r5, lr, r9
 8017054:	9523      	str	r5, [sp, #140]	; 0x8c
 8017056:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017058:	1b75      	subs	r5, r6, r5
 801705a:	951e      	str	r5, [sp, #120]	; 0x78
 801705c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801705e:	e9cd 3232 	strd	r3, r2, [sp, #200]	; 0xc8
 8017062:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8017066:	eba5 0509 	sub.w	r5, r5, r9
 801706a:	9524      	str	r5, [sp, #144]	; 0x90
 801706c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801706e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017070:	ab36      	add	r3, sp, #216	; 0xd8
 8017072:	aa32      	add	r2, sp, #200	; 0xc8
 8017074:	f7fc ffcc 	bl	8014010 <EwInitColorGradient>
 8017078:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801707a:	459a      	cmp	sl, r3
 801707c:	f4be afed 	bcs.w	801605a <EwExecuteTasks+0xc8>
 8017080:	e9da 1200 	ldrd	r1, r2, [sl]
 8017084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017086:	f9b2 0020 	ldrsh.w	r0, [r2, #32]
 801708a:	18cb      	adds	r3, r1, r3
 801708c:	4403      	add	r3, r0
 801708e:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
 8017092:	4403      	add	r3, r0
 8017094:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017096:	4283      	cmp	r3, r0
 8017098:	f340 80ac 	ble.w	80171f4 <EwExecuteTasks+0x1262>
 801709c:	4b62      	ldr	r3, [pc, #392]	; (8017228 <EwExecuteTasks+0x1296>)
 801709e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80170a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80170a4:	9331      	str	r3, [sp, #196]	; 0xc4
 80170a6:	f8da 3000 	ldr.w	r3, [sl]
 80170aa:	932c      	str	r3, [sp, #176]	; 0xb0
 80170ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80170b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80170b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80170b6:	189a      	adds	r2, r3, r2
 80170b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80170be:	18d3      	adds	r3, r2, r3
 80170c0:	9321      	str	r3, [sp, #132]	; 0x84
 80170c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170c6:	4293      	cmp	r3, r2
 80170c8:	bfb8      	it	lt
 80170ca:	4613      	movlt	r3, r2
 80170cc:	9318      	str	r3, [sp, #96]	; 0x60
 80170ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170d0:	f9b3 701c 	ldrsh.w	r7, [r3, #28]
 80170d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80170d6:	4417      	add	r7, r2
 80170d8:	42bb      	cmp	r3, r7
 80170da:	bfa8      	it	ge
 80170dc:	463b      	movge	r3, r7
 80170de:	461d      	mov	r5, r3
 80170e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80170e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80170e4:	1aeb      	subs	r3, r5, r3
 80170e6:	9325      	str	r3, [sp, #148]	; 0x94
 80170e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80170ea:	4293      	cmp	r3, r2
 80170ec:	f6be afb5 	bge.w	801605a <EwExecuteTasks+0xc8>
 80170f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	f340 80f8 	ble.w	80172e8 <EwExecuteTasks+0x1356>
 80170f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80170fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8017100:	4413      	add	r3, r2
 8017102:	9322      	str	r3, [sp, #136]	; 0x88
 8017104:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8017108:	4293      	cmp	r3, r2
 801710a:	bfb8      	it	lt
 801710c:	4613      	movlt	r3, r2
 801710e:	461f      	mov	r7, r3
 8017110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017112:	f9b3 801e 	ldrsh.w	r8, [r3, #30]
 8017116:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017118:	4490      	add	r8, r2
 801711a:	4543      	cmp	r3, r8
 801711c:	bfa8      	it	ge
 801711e:	4643      	movge	r3, r8
 8017120:	461e      	mov	r6, r3
 8017122:	1bdb      	subs	r3, r3, r7
 8017124:	2b00      	cmp	r3, #0
 8017126:	932d      	str	r3, [sp, #180]	; 0xb4
 8017128:	f340 80de 	ble.w	80172e8 <EwExecuteTasks+0x1356>
 801712c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801712e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8017132:	932f      	str	r3, [sp, #188]	; 0xbc
 8017134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017136:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801713a:	9330      	str	r3, [sp, #192]	; 0xc0
 801713c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801713e:	b1bb      	cbz	r3, 8017170 <EwExecuteTasks+0x11de>
 8017140:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017142:	463a      	mov	r2, r7
 8017144:	a836      	add	r0, sp, #216	; 0xd8
 8017146:	f7fd f84f 	bl	80141e8 <EwGetColorFromGradient>
 801714a:	463a      	mov	r2, r7
 801714c:	9032      	str	r0, [sp, #200]	; 0xc8
 801714e:	4629      	mov	r1, r5
 8017150:	a836      	add	r0, sp, #216	; 0xd8
 8017152:	f7fd f849 	bl	80141e8 <EwGetColorFromGradient>
 8017156:	4632      	mov	r2, r6
 8017158:	9033      	str	r0, [sp, #204]	; 0xcc
 801715a:	4629      	mov	r1, r5
 801715c:	a836      	add	r0, sp, #216	; 0xd8
 801715e:	f7fd f843 	bl	80141e8 <EwGetColorFromGradient>
 8017162:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017164:	9034      	str	r0, [sp, #208]	; 0xd0
 8017166:	4632      	mov	r2, r6
 8017168:	a836      	add	r0, sp, #216	; 0xd8
 801716a:	f7fd f83d 	bl	80141e8 <EwGetColorFromGradient>
 801716e:	9035      	str	r0, [sp, #212]	; 0xd4
 8017170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017172:	f9b4 8000 	ldrsh.w	r8, [r4]
 8017176:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801717a:	2a5a      	cmp	r2, #90	; 0x5a
 801717c:	d156      	bne.n	801722c <EwExecuteTasks+0x129a>
 801717e:	eb07 0208 	add.w	r2, r7, r8
 8017182:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017184:	921b      	str	r2, [sp, #108]	; 0x6c
 8017186:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017188:	eba2 0901 	sub.w	r9, r2, r1
 801718c:	1b52      	subs	r2, r2, r5
 801718e:	4499      	add	r9, r3
 8017190:	44b0      	add	r8, r6
 8017192:	18d3      	adds	r3, r2, r3
 8017194:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017196:	931f      	str	r3, [sp, #124]	; 0x7c
 8017198:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 801719c:	461e      	mov	r6, r3
 801719e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80171a2:	e05a      	b.n	801725a <EwExecuteTasks+0x12c8>
 80171a4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80171a6:	1b7d      	subs	r5, r7, r5
 80171a8:	951d      	str	r5, [sp, #116]	; 0x74
 80171aa:	eba7 050e 	sub.w	r5, r7, lr
 80171ae:	951e      	str	r5, [sp, #120]	; 0x78
 80171b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80171b2:	2db4      	cmp	r5, #180	; 0xb4
 80171b4:	d10e      	bne.n	80171d4 <EwExecuteTasks+0x1242>
 80171b6:	eba6 050c 	sub.w	r5, r6, ip
 80171ba:	9523      	str	r5, [sp, #140]	; 0x8c
 80171bc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80171be:	e9cd 1332 	strd	r1, r3, [sp, #200]	; 0xc8
 80171c2:	e9cd 2034 	strd	r2, r0, [sp, #208]	; 0xd0
 80171c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80171c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80171ca:	921a      	str	r2, [sp, #104]	; 0x68
 80171cc:	1b75      	subs	r5, r6, r5
 80171ce:	9524      	str	r5, [sp, #144]	; 0x90
 80171d0:	931c      	str	r3, [sp, #112]	; 0x70
 80171d2:	e74b      	b.n	801706c <EwExecuteTasks+0x10da>
 80171d4:	e9cd 3234 	strd	r3, r2, [sp, #208]	; 0xd0
 80171d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80171da:	9324      	str	r3, [sp, #144]	; 0x90
 80171dc:	ebac 0308 	sub.w	r3, ip, r8
 80171e0:	931e      	str	r3, [sp, #120]	; 0x78
 80171e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80171e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80171e8:	eba3 0308 	sub.w	r3, r3, r8
 80171ec:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80171f0:	931d      	str	r3, [sp, #116]	; 0x74
 80171f2:	e73b      	b.n	801706c <EwExecuteTasks+0x10da>
 80171f4:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 80171f8:	440b      	add	r3, r1
 80171fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80171fc:	4419      	add	r1, r3
 80171fe:	68e3      	ldr	r3, [r4, #12]
 8017200:	9114      	str	r1, [sp, #80]	; 0x50
 8017202:	b15b      	cbz	r3, 801721c <EwExecuteTasks+0x128a>
 8017204:	6992      	ldr	r2, [r2, #24]
 8017206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801720a:	2a20      	cmp	r2, #32
 801720c:	d106      	bne.n	801721c <EwExecuteTasks+0x128a>
 801720e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017210:	4413      	add	r3, r2
 8017212:	eb01 4223 	add.w	r2, r1, r3, asr #16
 8017216:	b29b      	uxth	r3, r3
 8017218:	9214      	str	r2, [sp, #80]	; 0x50
 801721a:	9320      	str	r3, [sp, #128]	; 0x80
 801721c:	f10a 0a08 	add.w	sl, sl, #8
 8017220:	e72a      	b.n	8017078 <EwExecuteTasks+0x10e6>
 8017222:	bf00      	nop
 8017224:	2000023c 	.word	0x2000023c
 8017228:	08035c04 	.word	0x08035c04
 801722c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801722e:	eba2 0907 	sub.w	r9, r2, r7
 8017232:	1b96      	subs	r6, r2, r6
 8017234:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017236:	2ab4      	cmp	r2, #180	; 0xb4
 8017238:	d177      	bne.n	801732a <EwExecuteTasks+0x1398>
 801723a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801723c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801723e:	1a52      	subs	r2, r2, r1
 8017240:	4442      	add	r2, r8
 8017242:	921b      	str	r2, [sp, #108]	; 0x6c
 8017244:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017246:	1b55      	subs	r5, r2, r5
 8017248:	4499      	add	r9, r3
 801724a:	441e      	add	r6, r3
 801724c:	4445      	add	r5, r8
 801724e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017250:	9627      	str	r6, [sp, #156]	; 0x9c
 8017252:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8017256:	9326      	str	r3, [sp, #152]	; 0x98
 8017258:	46a8      	mov	r8, r5
 801725a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801725c:	b12b      	cbz	r3, 801726a <EwExecuteTasks+0x12d8>
 801725e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017260:	9825      	ldr	r0, [sp, #148]	; 0x94
 8017262:	ab4c      	add	r3, sp, #304	; 0x130
 8017264:	aa32      	add	r2, sp, #200	; 0xc8
 8017266:	f7fc fed3 	bl	8014010 <EwInitColorGradient>
 801726a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801726c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801726e:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8017272:	9313      	str	r3, [sp, #76]	; 0x4c
 8017274:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017276:	9312      	str	r3, [sp, #72]	; 0x48
 8017278:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 801727c:	9311      	str	r3, [sp, #68]	; 0x44
 801727e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8017282:	9310      	str	r3, [sp, #64]	; 0x40
 8017284:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8017288:	930f      	str	r3, [sp, #60]	; 0x3c
 801728a:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 801728e:	930e      	str	r3, [sp, #56]	; 0x38
 8017290:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017292:	930d      	str	r3, [sp, #52]	; 0x34
 8017294:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017296:	930c      	str	r3, [sp, #48]	; 0x30
 8017298:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801729a:	443b      	add	r3, r7
 801729c:	1a9b      	subs	r3, r3, r2
 801729e:	930b      	str	r3, [sp, #44]	; 0x2c
 80172a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80172a2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80172a4:	4413      	add	r3, r2
 80172a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172a8:	1a9b      	subs	r3, r3, r2
 80172aa:	930a      	str	r3, [sp, #40]	; 0x28
 80172ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172ae:	00db      	lsls	r3, r3, #3
 80172b0:	9308      	str	r3, [sp, #32]
 80172b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80172b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80172be:	00f6      	lsls	r6, r6, #3
 80172c0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80172c4:	9209      	str	r2, [sp, #36]	; 0x24
 80172c6:	9605      	str	r6, [sp, #20]
 80172c8:	00ed      	lsls	r5, r5, #3
 80172ca:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80172ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172d0:	e9cd 2500 	strd	r2, r5, [sp]
 80172d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80172d6:	00df      	lsls	r7, r3, #3
 80172d8:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
 80172dc:	9702      	str	r7, [sp, #8]
 80172de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80172e2:	00d2      	lsls	r2, r2, #3
 80172e4:	f7fd fae2 	bl	80148ac <EwEmulateWarp>
 80172e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80172ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80172ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80172f0:	4413      	add	r3, r2
 80172f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80172f4:	441a      	add	r2, r3
 80172f6:	68e3      	ldr	r3, [r4, #12]
 80172f8:	9214      	str	r2, [sp, #80]	; 0x50
 80172fa:	b173      	cbz	r3, 801731a <EwExecuteTasks+0x1388>
 80172fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80172fe:	6992      	ldr	r2, [r2, #24]
 8017300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017304:	2a20      	cmp	r2, #32
 8017306:	d108      	bne.n	801731a <EwExecuteTasks+0x1388>
 8017308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801730a:	441a      	add	r2, r3
 801730c:	4613      	mov	r3, r2
 801730e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017314:	b29b      	uxth	r3, r3
 8017316:	9214      	str	r2, [sp, #80]	; 0x50
 8017318:	9320      	str	r3, [sp, #128]	; 0x80
 801731a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801731c:	f10a 0a08 	add.w	sl, sl, #8
 8017320:	459a      	cmp	sl, r3
 8017322:	f4ff aec0 	bcc.w	80170a6 <EwExecuteTasks+0x1114>
 8017326:	f7fe be98 	b.w	801605a <EwExecuteTasks+0xc8>
 801732a:	eb08 0209 	add.w	r2, r8, r9
 801732e:	921b      	str	r2, [sp, #108]	; 0x6c
 8017330:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017332:	44b0      	add	r8, r6
 8017334:	eb02 0903 	add.w	r9, r2, r3
 8017338:	18eb      	adds	r3, r5, r3
 801733a:	e72b      	b.n	8017194 <EwExecuteTasks+0x1202>
 801733c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801733e:	68d0      	ldr	r0, [r2, #12]
 8017340:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 8017344:	3201      	adds	r2, #1
 8017346:	bf08      	it	eq
 8017348:	f103 0540 	addeq.w	r5, r3, #64	; 0x40
 801734c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017350:	4a95      	ldr	r2, [pc, #596]	; (80175a8 <EwExecuteTasks+0x1616>)
 8017352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017354:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8017358:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801735c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017360:	f8d2 2484 	ldr.w	r2, [r2, #1156]	; 0x484
 8017364:	b12a      	cbz	r2, 8017372 <EwExecuteTasks+0x13e0>
 8017366:	4a91      	ldr	r2, [pc, #580]	; (80175ac <EwExecuteTasks+0x161a>)
 8017368:	4659      	mov	r1, fp
 801736a:	f7fe fa7d 	bl	8015868 <EwFreeVideo+0xdc>
 801736e:	f7fe be74 	b.w	801605a <EwExecuteTasks+0xc8>
 8017372:	4a8f      	ldr	r2, [pc, #572]	; (80175b0 <EwExecuteTasks+0x161e>)
 8017374:	4659      	mov	r1, fp
 8017376:	f7fe facf 	bl	8015918 <EwFreeVideo+0x18c>
 801737a:	f7fe be6e 	b.w	801605a <EwExecuteTasks+0xc8>
 801737e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017380:	68d0      	ldr	r0, [r2, #12]
 8017382:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 8017386:	3201      	adds	r2, #1
 8017388:	bf08      	it	eq
 801738a:	f103 0540 	addeq.w	r5, r3, #64	; 0x40
 801738e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017392:	4a85      	ldr	r2, [pc, #532]	; (80175a8 <EwExecuteTasks+0x1616>)
 8017394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017396:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801739a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801739e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80173a2:	f8d2 2288 	ldr.w	r2, [r2, #648]	; 0x288
 80173a6:	b10a      	cbz	r2, 80173ac <EwExecuteTasks+0x141a>
 80173a8:	4a82      	ldr	r2, [pc, #520]	; (80175b4 <EwExecuteTasks+0x1622>)
 80173aa:	e7dd      	b.n	8017368 <EwExecuteTasks+0x13d6>
 80173ac:	4a82      	ldr	r2, [pc, #520]	; (80175b8 <EwExecuteTasks+0x1626>)
 80173ae:	e7e1      	b.n	8017374 <EwExecuteTasks+0x13e2>
 80173b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173b2:	68d0      	ldr	r0, [r2, #12]
 80173b4:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 80173b8:	3201      	adds	r2, #1
 80173ba:	bf08      	it	eq
 80173bc:	f103 0540 	addeq.w	r5, r3, #64	; 0x40
 80173c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80173c4:	4a78      	ldr	r2, [pc, #480]	; (80175a8 <EwExecuteTasks+0x1616>)
 80173c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80173cc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80173d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80173d4:	f8d2 2680 	ldr.w	r2, [r2, #1664]	; 0x680
 80173d8:	2a00      	cmp	r2, #0
 80173da:	d0e7      	beq.n	80173ac <EwExecuteTasks+0x141a>
 80173dc:	4a77      	ldr	r2, [pc, #476]	; (80175bc <EwExecuteTasks+0x162a>)
 80173de:	e7c3      	b.n	8017368 <EwExecuteTasks+0x13d6>
 80173e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173e2:	f8db 4010 	ldr.w	r4, [fp, #16]
 80173e6:	68d2      	ldr	r2, [r2, #12]
 80173e8:	9214      	str	r2, [sp, #80]	; 0x50
 80173ea:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 80173ee:	3201      	adds	r2, #1
 80173f0:	bf08      	it	eq
 80173f2:	f103 0520 	addeq.w	r5, r3, #32
 80173f6:	4b6c      	ldr	r3, [pc, #432]	; (80175a8 <EwExecuteTasks+0x1616>)
 80173f8:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
 80173fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8017400:	f104 091c 	add.w	r9, r4, #28
 8017404:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8017408:	9315      	str	r3, [sp, #84]	; 0x54
 801740a:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 801740e:	1ad3      	subs	r3, r2, r3
 8017410:	9317      	str	r3, [sp, #92]	; 0x5c
 8017412:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8017416:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801741a:	1ad3      	subs	r3, r2, r3
 801741c:	9318      	str	r3, [sp, #96]	; 0x60
 801741e:	f005 0308 	and.w	r3, r5, #8
 8017422:	9319      	str	r3, [sp, #100]	; 0x64
 8017424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017426:	2b00      	cmp	r3, #0
 8017428:	d071      	beq.n	801750e <EwExecuteTasks+0x157c>
 801742a:	2000      	movs	r0, #0
 801742c:	f7fe f9b0 	bl	8015790 <EwFreeVideo+0x4>
 8017430:	2000      	movs	r0, #0
 8017432:	f7fe f9e1 	bl	80157f8 <EwFreeVideo+0x6c>
 8017436:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801743a:	075a      	lsls	r2, r3, #29
 801743c:	f104 0a0c 	add.w	sl, r4, #12
 8017440:	d563      	bpl.n	801750a <EwExecuteTasks+0x1578>
 8017442:	f9bb 5008 	ldrsh.w	r5, [fp, #8]
 8017446:	f9b4 0000 	ldrsh.w	r0, [r4]
 801744a:	f9bb 800a 	ldrsh.w	r8, [fp, #10]
 801744e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017452:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 8017456:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 801745a:	f9bb 600e 	ldrsh.w	r6, [fp, #14]
 801745e:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8017462:	4285      	cmp	r5, r0
 8017464:	dc05      	bgt.n	8017472 <EwExecuteTasks+0x14e0>
 8017466:	4588      	cmp	r8, r1
 8017468:	dc03      	bgt.n	8017472 <EwExecuteTasks+0x14e0>
 801746a:	4567      	cmp	r7, ip
 801746c:	db01      	blt.n	8017472 <EwExecuteTasks+0x14e0>
 801746e:	4576      	cmp	r6, lr
 8017470:	da4b      	bge.n	801750a <EwExecuteTasks+0x1578>
 8017472:	ab4c      	add	r3, sp, #304	; 0x130
 8017474:	1a2d      	subs	r5, r5, r0
 8017476:	eba8 0801 	sub.w	r8, r8, r1
 801747a:	1a3f      	subs	r7, r7, r0
 801747c:	1a76      	subs	r6, r6, r1
 801747e:	ebac 0000 	sub.w	r0, ip, r0
 8017482:	ebae 0101 	sub.w	r1, lr, r1
 8017486:	4652      	mov	r2, sl
 8017488:	f7fc fdc2 	bl	8014010 <EwInitColorGradient>
 801748c:	4642      	mov	r2, r8
 801748e:	4629      	mov	r1, r5
 8017490:	a84c      	add	r0, sp, #304	; 0x130
 8017492:	f7fc fea9 	bl	80141e8 <EwGetColorFromGradient>
 8017496:	4642      	mov	r2, r8
 8017498:	9036      	str	r0, [sp, #216]	; 0xd8
 801749a:	4639      	mov	r1, r7
 801749c:	a84c      	add	r0, sp, #304	; 0x130
 801749e:	f7fc fea3 	bl	80141e8 <EwGetColorFromGradient>
 80174a2:	4632      	mov	r2, r6
 80174a4:	9037      	str	r0, [sp, #220]	; 0xdc
 80174a6:	4639      	mov	r1, r7
 80174a8:	a84c      	add	r0, sp, #304	; 0x130
 80174aa:	f7fc fe9d 	bl	80141e8 <EwGetColorFromGradient>
 80174ae:	4629      	mov	r1, r5
 80174b0:	9038      	str	r0, [sp, #224]	; 0xe0
 80174b2:	4632      	mov	r2, r6
 80174b4:	a84c      	add	r0, sp, #304	; 0x130
 80174b6:	f7fc fe97 	bl	80141e8 <EwGetColorFromGradient>
 80174ba:	a936      	add	r1, sp, #216	; 0xd8
 80174bc:	9039      	str	r0, [sp, #228]	; 0xe4
 80174be:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80174c2:	0743      	lsls	r3, r0, #29
 80174c4:	d50a      	bpl.n	80174dc <EwExecuteTasks+0x154a>
 80174c6:	458a      	cmp	sl, r1
 80174c8:	d108      	bne.n	80174dc <EwExecuteTasks+0x154a>
 80174ca:	680b      	ldr	r3, [r1, #0]
 80174cc:	9336      	str	r3, [sp, #216]	; 0xd8
 80174ce:	684b      	ldr	r3, [r1, #4]
 80174d0:	9337      	str	r3, [sp, #220]	; 0xdc
 80174d2:	688b      	ldr	r3, [r1, #8]
 80174d4:	9338      	str	r3, [sp, #224]	; 0xe0
 80174d6:	68cb      	ldr	r3, [r1, #12]
 80174d8:	9339      	str	r3, [sp, #228]	; 0xe4
 80174da:	a936      	add	r1, sp, #216	; 0xd8
 80174dc:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80174e0:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 80174e4:	9105      	str	r1, [sp, #20]
 80174e6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80174ea:	9104      	str	r1, [sp, #16]
 80174ec:	9919      	ldr	r1, [sp, #100]	; 0x64
 80174ee:	9103      	str	r1, [sp, #12]
 80174f0:	f000 0001 	and.w	r0, r0, #1
 80174f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174f6:	9002      	str	r0, [sp, #8]
 80174f8:	9101      	str	r1, [sp, #4]
 80174fa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80174fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80174fe:	9100      	str	r1, [sp, #0]
 8017500:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017502:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017504:	4649      	mov	r1, r9
 8017506:	f7fe bf63 	b.w	80163d0 <EwExecuteTasks+0x43e>
 801750a:	4651      	mov	r1, sl
 801750c:	e7d7      	b.n	80174be <EwExecuteTasks+0x152c>
 801750e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017510:	f7fe f93e 	bl	8015790 <EwFreeVideo+0x4>
 8017514:	4606      	mov	r6, r0
 8017516:	2800      	cmp	r0, #0
 8017518:	f43e ad9f 	beq.w	801605a <EwExecuteTasks+0xc8>
 801751c:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8017520:	f003 0306 	and.w	r3, r3, #6
 8017524:	2b06      	cmp	r3, #6
 8017526:	f025 0508 	bic.w	r5, r5, #8
 801752a:	d108      	bne.n	801753e <EwExecuteTasks+0x15ac>
 801752c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8017530:	429a      	cmp	r2, r3
 8017532:	d104      	bne.n	801753e <EwExecuteTasks+0x15ac>
 8017534:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8017538:	429a      	cmp	r2, r3
 801753a:	bf08      	it	eq
 801753c:	3d04      	subeq	r5, #4
 801753e:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8017542:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017546:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 801754a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801754e:	af4c      	add	r7, sp, #304	; 0x130
 8017550:	463b      	mov	r3, r7
 8017552:	f104 020c 	add.w	r2, r4, #12
 8017556:	ebae 0101 	sub.w	r1, lr, r1
 801755a:	ebac 0000 	sub.w	r0, ip, r0
 801755e:	f7fc fd57 	bl	8014010 <EwInitColorGradient>
 8017562:	4911      	ldr	r1, [pc, #68]	; (80175a8 <EwExecuteTasks+0x1616>)
 8017564:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
 8017568:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801756c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8017570:	4630      	mov	r0, r6
 8017572:	f8d5 1a10 	ldr.w	r1, [r5, #2576]	; 0xa10
 8017576:	9107      	str	r1, [sp, #28]
 8017578:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801757c:	1a59      	subs	r1, r3, r1
 801757e:	9106      	str	r1, [sp, #24]
 8017580:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017584:	1a51      	subs	r1, r2, r1
 8017586:	e9cd 7104 	strd	r7, r1, [sp, #16]
 801758a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801758e:	9103      	str	r1, [sp, #12]
 8017590:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017592:	9102      	str	r1, [sp, #8]
 8017594:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017596:	9101      	str	r1, [sp, #4]
 8017598:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801759a:	9100      	str	r1, [sp, #0]
 801759c:	4649      	mov	r1, r9
 801759e:	f7fd fe3b 	bl	8015218 <EwEmulateFillPolygon>
 80175a2:	f7fe bd5a 	b.w	801605a <EwExecuteTasks+0xc8>
 80175a6:	bf00      	nop
 80175a8:	08035c04 	.word	0x08035c04
 80175ac:	08036088 	.word	0x08036088
 80175b0:	080368dc 	.word	0x080368dc
 80175b4:	08035e8c 	.word	0x08035e8c
 80175b8:	080366d8 	.word	0x080366d8
 80175bc:	08036284 	.word	0x08036284

080175c0 <EwCompleteTasks>:
 80175c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175c2:	e9d0 3506 	ldrd	r3, r5, [r0, #24]
 80175c6:	2200      	movs	r2, #0
 80175c8:	42ab      	cmp	r3, r5
 80175ca:	d300      	bcc.n	80175ce <EwCompleteTasks+0xe>
 80175cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175ce:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80175d2:	3902      	subs	r1, #2
 80175d4:	2906      	cmp	r1, #6
 80175d6:	d80c      	bhi.n	80175f2 <EwCompleteTasks+0x32>
 80175d8:	e8df f001 	tbb	[pc, r1]
 80175dc:	2a2a0d04 	.word	0x2a2a0d04
 80175e0:	0b2a      	.short	0x0b2a
 80175e2:	16          	.byte	0x16
 80175e3:	00          	.byte	0x00
 80175e4:	691c      	ldr	r4, [r3, #16]
 80175e6:	68e1      	ldr	r1, [r4, #12]
 80175e8:	b119      	cbz	r1, 80175f2 <EwCompleteTasks+0x32>
 80175ea:	68c8      	ldr	r0, [r1, #12]
 80175ec:	3801      	subs	r0, #1
 80175ee:	60c8      	str	r0, [r1, #12]
 80175f0:	60e2      	str	r2, [r4, #12]
 80175f2:	3314      	adds	r3, #20
 80175f4:	e7e8      	b.n	80175c8 <EwCompleteTasks+0x8>
 80175f6:	691c      	ldr	r4, [r3, #16]
 80175f8:	6961      	ldr	r1, [r4, #20]
 80175fa:	2900      	cmp	r1, #0
 80175fc:	d0f9      	beq.n	80175f2 <EwCompleteTasks+0x32>
 80175fe:	68c8      	ldr	r0, [r1, #12]
 8017600:	3801      	subs	r0, #1
 8017602:	60c8      	str	r0, [r1, #12]
 8017604:	6162      	str	r2, [r4, #20]
 8017606:	e7f4      	b.n	80175f2 <EwCompleteTasks+0x32>
 8017608:	6919      	ldr	r1, [r3, #16]
 801760a:	f9b1 0014 	ldrsh.w	r0, [r1, #20]
 801760e:	f101 042c 	add.w	r4, r1, #44	; 0x2c
 8017612:	2800      	cmp	r0, #0
 8017614:	f100 37ff 	add.w	r7, r0, #4294967295
 8017618:	f104 0408 	add.w	r4, r4, #8
 801761c:	dc01      	bgt.n	8017622 <EwCompleteTasks+0x62>
 801761e:	828a      	strh	r2, [r1, #20]
 8017620:	e7e7      	b.n	80175f2 <EwCompleteTasks+0x32>
 8017622:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8017626:	6930      	ldr	r0, [r6, #16]
 8017628:	3801      	subs	r0, #1
 801762a:	6130      	str	r0, [r6, #16]
 801762c:	4638      	mov	r0, r7
 801762e:	e7f0      	b.n	8017612 <EwCompleteTasks+0x52>
 8017630:	691c      	ldr	r4, [r3, #16]
 8017632:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017634:	2900      	cmp	r1, #0
 8017636:	d0dc      	beq.n	80175f2 <EwCompleteTasks+0x32>
 8017638:	68c8      	ldr	r0, [r1, #12]
 801763a:	3801      	subs	r0, #1
 801763c:	60c8      	str	r0, [r1, #12]
 801763e:	63a2      	str	r2, [r4, #56]	; 0x38
 8017640:	e7d7      	b.n	80175f2 <EwCompleteTasks+0x32>

08017642 <EwCountTasks>:
 8017642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017644:	6900      	ldr	r0, [r0, #16]
 8017646:	2500      	movs	r5, #0
 8017648:	462e      	mov	r6, r5
 801764a:	462f      	mov	r7, r5
 801764c:	b918      	cbnz	r0, 8017656 <EwCountTasks+0x14>
 801764e:	600f      	str	r7, [r1, #0]
 8017650:	6016      	str	r6, [r2, #0]
 8017652:	601d      	str	r5, [r3, #0]
 8017654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017656:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801765a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 801765e:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8017662:	eba4 040c 	sub.w	r4, r4, ip
 8017666:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 801766a:	ebac 0c0e 	sub.w	ip, ip, lr
 801766e:	fb0c f404 	mul.w	r4, ip, r4
 8017672:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8017676:	6800      	ldr	r0, [r0, #0]
 8017678:	f01c 0f01 	tst.w	ip, #1
 801767c:	f107 0701 	add.w	r7, r7, #1
 8017680:	bf14      	ite	ne
 8017682:	192d      	addne	r5, r5, r4
 8017684:	1936      	addeq	r6, r6, r4
 8017686:	e7e1      	b.n	801764c <EwCountTasks+0xa>

08017688 <EwTraceTasks>:
 8017688:	4b02      	ldr	r3, [pc, #8]	; (8017694 <EwTraceTasks+0xc>)
 801768a:	e9c3 211b 	strd	r2, r1, [r3, #108]	; 0x6c
 801768e:	6698      	str	r0, [r3, #104]	; 0x68
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	20000258 	.word	0x20000258

08017698 <EwBmpInit>:
 8017698:	b508      	push	{r3, lr}
 801769a:	4b07      	ldr	r3, [pc, #28]	; (80176b8 <EwBmpInit+0x20>)
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	f240 7301 	movw	r3, #1793	; 0x701
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d006      	beq.n	80176b4 <EwBmpInit+0x1c>
 80176a6:	20e8      	movs	r0, #232	; 0xe8
 80176a8:	f001 fafe 	bl	8018ca8 <EwError>
 80176ac:	f012 f864 	bl	8029778 <EwPanic>
 80176b0:	2000      	movs	r0, #0
 80176b2:	bd08      	pop	{r3, pc}
 80176b4:	2001      	movs	r0, #1
 80176b6:	e7fc      	b.n	80176b2 <EwBmpInit+0x1a>
 80176b8:	080337d8 	.word	0x080337d8

080176bc <EwBmpDone>:
 80176bc:	4770      	bx	lr

080176be <EwBmpOpen>:
 80176be:	6801      	ldr	r1, [r0, #0]
 80176c0:	4b22      	ldr	r3, [pc, #136]	; (801774c <EwBmpOpen+0x8e>)
 80176c2:	440b      	add	r3, r1
 80176c4:	2b03      	cmp	r3, #3
 80176c6:	b510      	push	{r4, lr}
 80176c8:	d908      	bls.n	80176dc <EwBmpOpen+0x1e>
 80176ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80176cc:	20e9      	movs	r0, #233	; 0xe9
 80176ce:	f001 faf1 	bl	8018cb4 <EwErrorS>
 80176d2:	f012 f851 	bl	8029778 <EwPanic>
 80176d6:	2400      	movs	r4, #0
 80176d8:	4620      	mov	r0, r4
 80176da:	bd10      	pop	{r4, pc}
 80176dc:	6842      	ldr	r2, [r0, #4]
 80176de:	2a0c      	cmp	r2, #12
 80176e0:	d806      	bhi.n	80176f0 <EwBmpOpen+0x32>
 80176e2:	f641 0382 	movw	r3, #6274	; 0x1882
 80176e6:	40d3      	lsrs	r3, r2
 80176e8:	43db      	mvns	r3, r3
 80176ea:	f013 0401 	ands.w	r4, r3, #1
 80176ee:	d002      	beq.n	80176f6 <EwBmpOpen+0x38>
 80176f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80176f2:	20ea      	movs	r0, #234	; 0xea
 80176f4:	e7eb      	b.n	80176ce <EwBmpOpen+0x10>
 80176f6:	4b16      	ldr	r3, [pc, #88]	; (8017750 <EwBmpOpen+0x92>)
 80176f8:	4299      	cmp	r1, r3
 80176fa:	d006      	beq.n	801770a <EwBmpOpen+0x4c>
 80176fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80176fe:	20eb      	movs	r0, #235	; 0xeb
 8017700:	f001 fad8 	bl	8018cb4 <EwErrorS>
 8017704:	f012 f838 	bl	8029778 <EwPanic>
 8017708:	e7e6      	b.n	80176d8 <EwBmpOpen+0x1a>
 801770a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801770c:	b9e4      	cbnz	r4, 8017748 <EwBmpOpen+0x8a>
 801770e:	2a01      	cmp	r2, #1
 8017710:	d107      	bne.n	8017722 <EwBmpOpen+0x64>
 8017712:	6a03      	ldr	r3, [r0, #32]
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	4b0f      	ldr	r3, [pc, #60]	; (8017754 <EwBmpOpen+0x96>)
 8017718:	429a      	cmp	r2, r3
 801771a:	d015      	beq.n	8017748 <EwBmpOpen+0x8a>
 801771c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801771e:	20ec      	movs	r0, #236	; 0xec
 8017720:	e7ee      	b.n	8017700 <EwBmpOpen+0x42>
 8017722:	2a0b      	cmp	r2, #11
 8017724:	d107      	bne.n	8017736 <EwBmpOpen+0x78>
 8017726:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017728:	681a      	ldr	r2, [r3, #0]
 801772a:	4b0a      	ldr	r3, [pc, #40]	; (8017754 <EwBmpOpen+0x96>)
 801772c:	429a      	cmp	r2, r3
 801772e:	d00b      	beq.n	8017748 <EwBmpOpen+0x8a>
 8017730:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017732:	20ed      	movs	r0, #237	; 0xed
 8017734:	e7e4      	b.n	8017700 <EwBmpOpen+0x42>
 8017736:	2a07      	cmp	r2, #7
 8017738:	d106      	bne.n	8017748 <EwBmpOpen+0x8a>
 801773a:	6a03      	ldr	r3, [r0, #32]
 801773c:	881b      	ldrh	r3, [r3, #0]
 801773e:	2b5b      	cmp	r3, #91	; 0x5b
 8017740:	d002      	beq.n	8017748 <EwBmpOpen+0x8a>
 8017742:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017744:	20ee      	movs	r0, #238	; 0xee
 8017746:	e7db      	b.n	8017700 <EwBmpOpen+0x42>
 8017748:	4604      	mov	r4, r0
 801774a:	e7c5      	b.n	80176d8 <EwBmpOpen+0x1a>
 801774c:	9d928f9c 	.word	0x9d928f9c
 8017750:	626d7064 	.word	0x626d7064
 8017754:	00600210 	.word	0x00600210

08017758 <EwBmpClose>:
 8017758:	4770      	bx	lr

0801775a <EwBmpGetMetrics>:
 801775a:	b570      	push	{r4, r5, r6, lr}
 801775c:	6844      	ldr	r4, [r0, #4]
 801775e:	6986      	ldr	r6, [r0, #24]
 8017760:	2c01      	cmp	r4, #1
 8017762:	bf04      	itt	eq
 8017764:	2400      	moveq	r4, #0
 8017766:	600c      	streq	r4, [r1, #0]
 8017768:	6844      	ldr	r4, [r0, #4]
 801776a:	2c07      	cmp	r4, #7
 801776c:	bf04      	itt	eq
 801776e:	2403      	moveq	r4, #3
 8017770:	600c      	streq	r4, [r1, #0]
 8017772:	6844      	ldr	r4, [r0, #4]
 8017774:	2c0c      	cmp	r4, #12
 8017776:	bf04      	itt	eq
 8017778:	2402      	moveq	r4, #2
 801777a:	600c      	streq	r4, [r1, #0]
 801777c:	6844      	ldr	r4, [r0, #4]
 801777e:	2c0b      	cmp	r4, #11
 8017780:	bf04      	itt	eq
 8017782:	2401      	moveq	r4, #1
 8017784:	600c      	streq	r4, [r1, #0]
 8017786:	2100      	movs	r1, #0
 8017788:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801778c:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 8017790:	42a5      	cmp	r5, r4
 8017792:	d10f      	bne.n	80177b4 <EwBmpGetMetrics+0x5a>
 8017794:	b901      	cbnz	r1, 8017798 <EwBmpGetMetrics+0x3e>
 8017796:	6941      	ldr	r1, [r0, #20]
 8017798:	6019      	str	r1, [r3, #0]
 801779a:	6943      	ldr	r3, [r0, #20]
 801779c:	6013      	str	r3, [r2, #0]
 801779e:	9b04      	ldr	r3, [sp, #16]
 80177a0:	6882      	ldr	r2, [r0, #8]
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	9b05      	ldr	r3, [sp, #20]
 80177a6:	68c2      	ldr	r2, [r0, #12]
 80177a8:	601a      	str	r2, [r3, #0]
 80177aa:	9b06      	ldr	r3, [sp, #24]
 80177ac:	6902      	ldr	r2, [r0, #16]
 80177ae:	601a      	str	r2, [r3, #0]
 80177b0:	2001      	movs	r0, #1
 80177b2:	bd70      	pop	{r4, r5, r6, pc}
 80177b4:	3101      	adds	r1, #1
 80177b6:	e7e9      	b.n	801778c <EwBmpGetMetrics+0x32>

080177b8 <EwBmpGetFrameMetrics>:
 80177b8:	2900      	cmp	r1, #0
 80177ba:	b510      	push	{r4, lr}
 80177bc:	db12      	blt.n	80177e4 <EwBmpGetFrameMetrics+0x2c>
 80177be:	6944      	ldr	r4, [r0, #20]
 80177c0:	428c      	cmp	r4, r1
 80177c2:	dd0f      	ble.n	80177e4 <EwBmpGetFrameMetrics+0x2c>
 80177c4:	2418      	movs	r4, #24
 80177c6:	4361      	muls	r1, r4
 80177c8:	69c4      	ldr	r4, [r0, #28]
 80177ca:	1860      	adds	r0, r4, r1
 80177cc:	5861      	ldr	r1, [r4, r1]
 80177ce:	6011      	str	r1, [r2, #0]
 80177d0:	6842      	ldr	r2, [r0, #4]
 80177d2:	601a      	str	r2, [r3, #0]
 80177d4:	9b02      	ldr	r3, [sp, #8]
 80177d6:	6882      	ldr	r2, [r0, #8]
 80177d8:	601a      	str	r2, [r3, #0]
 80177da:	9b03      	ldr	r3, [sp, #12]
 80177dc:	68c2      	ldr	r2, [r0, #12]
 80177de:	601a      	str	r2, [r3, #0]
 80177e0:	2001      	movs	r0, #1
 80177e2:	bd10      	pop	{r4, pc}
 80177e4:	2000      	movs	r0, #0
 80177e6:	e7fc      	b.n	80177e2 <EwBmpGetFrameMetrics+0x2a>

080177e8 <EwBmpGetFrameMemory>:
 80177e8:	2900      	cmp	r1, #0
 80177ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ec:	db3e      	blt.n	801786c <EwBmpGetFrameMemory+0x84>
 80177ee:	6943      	ldr	r3, [r0, #20]
 80177f0:	428b      	cmp	r3, r1
 80177f2:	dd3b      	ble.n	801786c <EwBmpGetFrameMemory+0x84>
 80177f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d138      	bne.n	801786c <EwBmpGetFrameMemory+0x84>
 80177fa:	69c5      	ldr	r5, [r0, #28]
 80177fc:	6846      	ldr	r6, [r0, #4]
 80177fe:	6a04      	ldr	r4, [r0, #32]
 8017800:	2718      	movs	r7, #24
 8017802:	fb07 5101 	mla	r1, r7, r1, r5
 8017806:	2e0c      	cmp	r6, #12
 8017808:	690d      	ldr	r5, [r1, #16]
 801780a:	6881      	ldr	r1, [r0, #8]
 801780c:	f101 0102 	add.w	r1, r1, #2
 8017810:	d109      	bne.n	8017826 <EwBmpGetFrameMemory+0x3e>
 8017812:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8017816:	442c      	add	r4, r5
 8017818:	2001      	movs	r0, #1
 801781a:	6014      	str	r4, [r2, #0]
 801781c:	6091      	str	r1, [r2, #8]
 801781e:	6050      	str	r0, [r2, #4]
 8017820:	60d3      	str	r3, [r2, #12]
 8017822:	6193      	str	r3, [r2, #24]
 8017824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017826:	2e07      	cmp	r6, #7
 8017828:	d10a      	bne.n	8017840 <EwBmpGetFrameMemory+0x58>
 801782a:	3502      	adds	r5, #2
 801782c:	0049      	lsls	r1, r1, #1
 801782e:	442c      	add	r4, r5
 8017830:	6091      	str	r1, [r2, #8]
 8017832:	6014      	str	r4, [r2, #0]
 8017834:	2102      	movs	r1, #2
 8017836:	e9c2 3304 	strd	r3, r3, [r2, #16]
 801783a:	6051      	str	r1, [r2, #4]
 801783c:	60d3      	str	r3, [r2, #12]
 801783e:	e00b      	b.n	8017858 <EwBmpGetFrameMemory+0x70>
 8017840:	2e0b      	cmp	r6, #11
 8017842:	d10c      	bne.n	801785e <EwBmpGetFrameMemory+0x76>
 8017844:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8017848:	60d3      	str	r3, [r2, #12]
 801784a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801784c:	6091      	str	r1, [r2, #8]
 801784e:	442c      	add	r4, r5
 8017850:	2101      	movs	r1, #1
 8017852:	6014      	str	r4, [r2, #0]
 8017854:	6051      	str	r1, [r2, #4]
 8017856:	3304      	adds	r3, #4
 8017858:	6193      	str	r3, [r2, #24]
 801785a:	2001      	movs	r0, #1
 801785c:	e7e2      	b.n	8017824 <EwBmpGetFrameMemory+0x3c>
 801785e:	3504      	adds	r5, #4
 8017860:	0089      	lsls	r1, r1, #2
 8017862:	442c      	add	r4, r5
 8017864:	6091      	str	r1, [r2, #8]
 8017866:	6014      	str	r4, [r2, #0]
 8017868:	2104      	movs	r1, #4
 801786a:	e7e4      	b.n	8017836 <EwBmpGetFrameMemory+0x4e>
 801786c:	2000      	movs	r0, #0
 801786e:	e7d9      	b.n	8017824 <EwBmpGetFrameMemory+0x3c>

08017870 <EwBmpLoadFrame>:
 8017870:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017874:	2900      	cmp	r1, #0
 8017876:	4605      	mov	r5, r0
 8017878:	4691      	mov	r9, r2
 801787a:	f2c0 8098 	blt.w	80179ae <EwBmpLoadFrame+0x13e>
 801787e:	6943      	ldr	r3, [r0, #20]
 8017880:	428b      	cmp	r3, r1
 8017882:	f340 8094 	ble.w	80179ae <EwBmpLoadFrame+0x13e>
 8017886:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017888:	b338      	cbz	r0, 80178da <EwBmpLoadFrame+0x6a>
 801788a:	6893      	ldr	r3, [r2, #8]
 801788c:	69ea      	ldr	r2, [r5, #28]
 801788e:	686f      	ldr	r7, [r5, #4]
 8017890:	f8d9 8000 	ldr.w	r8, [r9]
 8017894:	2018      	movs	r0, #24
 8017896:	fb00 2101 	mla	r1, r0, r1, r2
 801789a:	6a28      	ldr	r0, [r5, #32]
 801789c:	690a      	ldr	r2, [r1, #16]
 801789e:	4410      	add	r0, r2
 80178a0:	f1a7 020b 	sub.w	r2, r7, #11
 80178a4:	2a01      	cmp	r2, #1
 80178a6:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
 80178aa:	d819      	bhi.n	80178e0 <EwBmpLoadFrame+0x70>
 80178ac:	4622      	mov	r2, r4
 80178ae:	4641      	mov	r1, r8
 80178b0:	f002 feba 	bl	801a628 <EwDecompress>
 80178b4:	686b      	ldr	r3, [r5, #4]
 80178b6:	2b07      	cmp	r3, #7
 80178b8:	d152      	bne.n	8017960 <EwBmpLoadFrame+0xf0>
 80178ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80178be:	f8d9 0000 	ldr.w	r0, [r9]
 80178c2:	4f3c      	ldr	r7, [pc, #240]	; (80179b4 <EwBmpLoadFrame+0x144>)
 80178c4:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80178c8:	2500      	movs	r5, #0
 80178ca:	42ac      	cmp	r4, r5
 80178cc:	bfac      	ite	ge
 80178ce:	191b      	addge	r3, r3, r4
 80178d0:	195b      	addlt	r3, r3, r5
 80178d2:	005b      	lsls	r3, r3, #1
 80178d4:	42b5      	cmp	r5, r6
 80178d6:	db3f      	blt.n	8017958 <EwBmpLoadFrame+0xe8>
 80178d8:	2001      	movs	r0, #1
 80178da:	b002      	add	sp, #8
 80178dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e0:	2f07      	cmp	r7, #7
 80178e2:	9301      	str	r3, [sp, #4]
 80178e4:	d110      	bne.n	8017908 <EwBmpLoadFrame+0x98>
 80178e6:	0062      	lsls	r2, r4, #1
 80178e8:	4641      	mov	r1, r8
 80178ea:	f002 fe9d 	bl	801a628 <EwDecompress>
 80178ee:	9b01      	ldr	r3, [sp, #4]
 80178f0:	2700      	movs	r7, #0
 80178f2:	f023 0a01 	bic.w	sl, r3, #1
 80178f6:	42b7      	cmp	r7, r6
 80178f8:	dadc      	bge.n	80178b4 <EwBmpLoadFrame+0x44>
 80178fa:	4640      	mov	r0, r8
 80178fc:	4621      	mov	r1, r4
 80178fe:	f002 ffbd 	bl	801a87c <EwAdaptByteOrder2>
 8017902:	3701      	adds	r7, #1
 8017904:	44d0      	add	r8, sl
 8017906:	e7f6      	b.n	80178f6 <EwBmpLoadFrame+0x86>
 8017908:	00a2      	lsls	r2, r4, #2
 801790a:	4641      	mov	r1, r8
 801790c:	f002 fe8c 	bl	801a628 <EwDecompress>
 8017910:	9b01      	ldr	r3, [sp, #4]
 8017912:	f04f 0a00 	mov.w	sl, #0
 8017916:	f023 0703 	bic.w	r7, r3, #3
 801791a:	45b2      	cmp	sl, r6
 801791c:	daca      	bge.n	80178b4 <EwBmpLoadFrame+0x44>
 801791e:	4640      	mov	r0, r8
 8017920:	4621      	mov	r1, r4
 8017922:	f002 ffac 	bl	801a87e <EwAdaptByteOrder4>
 8017926:	f10a 0a01 	add.w	sl, sl, #1
 801792a:	44b8      	add	r8, r7
 801792c:	e7f5      	b.n	801791a <EwBmpLoadFrame+0xaa>
 801792e:	f8be 1000 	ldrh.w	r1, [lr]
 8017932:	ea01 0207 	and.w	r2, r1, r7
 8017936:	f001 081f 	and.w	r8, r1, #31
 801793a:	0ad2      	lsrs	r2, r2, #11
 801793c:	ea42 22c8 	orr.w	r2, r2, r8, lsl #11
 8017940:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017944:	430a      	orrs	r2, r1
 8017946:	f82e 2b02 	strh.w	r2, [lr], #2
 801794a:	f10c 0c01 	add.w	ip, ip, #1
 801794e:	45a4      	cmp	ip, r4
 8017950:	dbed      	blt.n	801792e <EwBmpLoadFrame+0xbe>
 8017952:	3501      	adds	r5, #1
 8017954:	4418      	add	r0, r3
 8017956:	e7bd      	b.n	80178d4 <EwBmpLoadFrame+0x64>
 8017958:	4686      	mov	lr, r0
 801795a:	f04f 0c00 	mov.w	ip, #0
 801795e:	e7f6      	b.n	801794e <EwBmpLoadFrame+0xde>
 8017960:	2b01      	cmp	r3, #1
 8017962:	d1b9      	bne.n	80178d8 <EwBmpLoadFrame+0x68>
 8017964:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017968:	f8d9 0000 	ldr.w	r0, [r9]
 801796c:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8017970:	2500      	movs	r5, #0
 8017972:	42ac      	cmp	r4, r5
 8017974:	bfac      	ite	ge
 8017976:	191b      	addge	r3, r3, r4
 8017978:	195b      	addlt	r3, r3, r5
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	42b5      	cmp	r5, r6
 801797e:	daab      	bge.n	80178d8 <EwBmpLoadFrame+0x68>
 8017980:	4684      	mov	ip, r0
 8017982:	2700      	movs	r7, #0
 8017984:	e00e      	b.n	80179a4 <EwBmpLoadFrame+0x134>
 8017986:	f8dc 1000 	ldr.w	r1, [ip]
 801798a:	040a      	lsls	r2, r1, #16
 801798c:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8017990:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8017994:	ea42 020e 	orr.w	r2, r2, lr
 8017998:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 801799c:	430a      	orrs	r2, r1
 801799e:	f84c 2b04 	str.w	r2, [ip], #4
 80179a2:	3701      	adds	r7, #1
 80179a4:	42a7      	cmp	r7, r4
 80179a6:	dbee      	blt.n	8017986 <EwBmpLoadFrame+0x116>
 80179a8:	3501      	adds	r5, #1
 80179aa:	4418      	add	r0, r3
 80179ac:	e7e6      	b.n	801797c <EwBmpLoadFrame+0x10c>
 80179ae:	2000      	movs	r0, #0
 80179b0:	e793      	b.n	80178da <EwBmpLoadFrame+0x6a>
 80179b2:	bf00      	nop
 80179b4:	fffff800 	.word	0xfffff800

080179b8 <EwBmpLoadClut>:
 80179b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80179ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179be:	460c      	mov	r4, r1
 80179c0:	b363      	cbz	r3, 8017a1c <EwBmpLoadClut+0x64>
 80179c2:	6843      	ldr	r3, [r0, #4]
 80179c4:	2b0b      	cmp	r3, #11
 80179c6:	d13d      	bne.n	8017a44 <EwBmpLoadClut+0x8c>
 80179c8:	4f1f      	ldr	r7, [pc, #124]	; (8017a48 <EwBmpLoadClut+0x90>)
 80179ca:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80179cc:	69a0      	ldr	r0, [r4, #24]
 80179ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80179d2:	f011 fef5 	bl	80297c0 <EwZero>
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	1d35      	adds	r5, r6, #4
 80179da:	b13b      	cbz	r3, 80179ec <EwBmpLoadClut+0x34>
 80179dc:	4a1b      	ldr	r2, [pc, #108]	; (8017a4c <EwBmpLoadClut+0x94>)
 80179de:	6812      	ldr	r2, [r2, #0]
 80179e0:	42b2      	cmp	r2, r6
 80179e2:	d803      	bhi.n	80179ec <EwBmpLoadClut+0x34>
 80179e4:	4a1a      	ldr	r2, [pc, #104]	; (8017a50 <EwBmpLoadClut+0x98>)
 80179e6:	6812      	ldr	r2, [r2, #0]
 80179e8:	42b2      	cmp	r2, r6
 80179ea:	d21a      	bcs.n	8017a22 <EwBmpLoadClut+0x6a>
 80179ec:	6832      	ldr	r2, [r6, #0]
 80179ee:	69a0      	ldr	r0, [r4, #24]
 80179f0:	0092      	lsls	r2, r2, #2
 80179f2:	4629      	mov	r1, r5
 80179f4:	f011 feec 	bl	80297d0 <EwCopy>
 80179f8:	69a2      	ldr	r2, [r4, #24]
 80179fa:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80179fe:	6811      	ldr	r1, [r2, #0]
 8017a00:	040b      	lsls	r3, r1, #16
 8017a02:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8017a06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017a0a:	4323      	orrs	r3, r4
 8017a0c:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8017a10:	430b      	orrs	r3, r1
 8017a12:	f842 3b04 	str.w	r3, [r2], #4
 8017a16:	4282      	cmp	r2, r0
 8017a18:	d1f1      	bne.n	80179fe <EwBmpLoadClut+0x46>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a22:	4630      	mov	r0, r6
 8017a24:	4798      	blx	r3
 8017a26:	f8d0 8000 	ldr.w	r8, [r0]
 8017a2a:	2600      	movs	r6, #0
 8017a2c:	4546      	cmp	r6, r8
 8017a2e:	dae3      	bge.n	80179f8 <EwBmpLoadClut+0x40>
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	4628      	mov	r0, r5
 8017a34:	4798      	blx	r3
 8017a36:	69a3      	ldr	r3, [r4, #24]
 8017a38:	6802      	ldr	r2, [r0, #0]
 8017a3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017a3e:	3504      	adds	r5, #4
 8017a40:	3601      	adds	r6, #1
 8017a42:	e7f3      	b.n	8017a2c <EwBmpLoadClut+0x74>
 8017a44:	2300      	movs	r3, #0
 8017a46:	e7e9      	b.n	8017a1c <EwBmpLoadClut+0x64>
 8017a48:	20000328 	.word	0x20000328
 8017a4c:	2000032c 	.word	0x2000032c
 8017a50:	20000330 	.word	0x20000330

08017a54 <EwBmpLoadMappingTable>:
 8017a54:	6982      	ldr	r2, [r0, #24]
 8017a56:	b530      	push	{r4, r5, lr}
 8017a58:	4613      	mov	r3, r2
 8017a5a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f833 4b02 	ldrh.w	r4, [r3], #2
 8017a64:	42ac      	cmp	r4, r5
 8017a66:	d102      	bne.n	8017a6e <EwBmpLoadMappingTable+0x1a>
 8017a68:	1a80      	subs	r0, r0, r2
 8017a6a:	1040      	asrs	r0, r0, #1
 8017a6c:	bd30      	pop	{r4, r5, pc}
 8017a6e:	f821 4b02 	strh.w	r4, [r1], #2
 8017a72:	e7f4      	b.n	8017a5e <EwBmpLoadMappingTable+0xa>
 8017a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a78:	f8df b070 	ldr.w	fp, [pc, #112]	; 8017aec <EwBmpLoadMappingTable+0x98>
 8017a7c:	f8db 4000 	ldr.w	r4, [fp]
 8017a80:	4680      	mov	r8, r0
 8017a82:	460d      	mov	r5, r1
 8017a84:	1e57      	subs	r7, r2, #1
 8017a86:	b14c      	cbz	r4, 8017a9c <EwBmpLoadMappingTable+0x48>
 8017a88:	4b16      	ldr	r3, [pc, #88]	; (8017ae4 <EwBmpLoadMappingTable+0x90>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	428b      	cmp	r3, r1
 8017a8e:	d80e      	bhi.n	8017aae <EwBmpLoadMappingTable+0x5a>
 8017a90:	4b15      	ldr	r3, [pc, #84]	; (8017ae8 <EwBmpLoadMappingTable+0x94>)
 8017a92:	681c      	ldr	r4, [r3, #0]
 8017a94:	428c      	cmp	r4, r1
 8017a96:	bf34      	ite	cc
 8017a98:	2400      	movcc	r4, #0
 8017a9a:	2401      	movcs	r4, #1
 8017a9c:	f04f 0a00 	mov.w	sl, #0
 8017aa0:	45ba      	cmp	sl, r7
 8017aa2:	dd06      	ble.n	8017ab2 <EwBmpLoadMappingTable+0x5e>
 8017aa4:	f04f 0900 	mov.w	r9, #0
 8017aa8:	4648      	mov	r0, r9
 8017aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aae:	2400      	movs	r4, #0
 8017ab0:	e7f4      	b.n	8017a9c <EwBmpLoadMappingTable+0x48>
 8017ab2:	eb0a 0607 	add.w	r6, sl, r7
 8017ab6:	1076      	asrs	r6, r6, #1
 8017ab8:	0133      	lsls	r3, r6, #4
 8017aba:	eb05 1906 	add.w	r9, r5, r6, lsl #4
 8017abe:	b174      	cbz	r4, 8017ade <EwBmpLoadMappingTable+0x8a>
 8017ac0:	f8db 3000 	ldr.w	r3, [fp]
 8017ac4:	4648      	mov	r0, r9
 8017ac6:	4798      	blx	r3
 8017ac8:	8803      	ldrh	r3, [r0, #0]
 8017aca:	eba8 0303 	sub.w	r3, r8, r3
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d0ea      	beq.n	8017aa8 <EwBmpLoadMappingTable+0x54>
 8017ad2:	bfcc      	ite	gt
 8017ad4:	f106 0a01 	addgt.w	sl, r6, #1
 8017ad8:	f106 37ff 	addle.w	r7, r6, #4294967295
 8017adc:	e7e0      	b.n	8017aa0 <EwBmpLoadMappingTable+0x4c>
 8017ade:	5aeb      	ldrh	r3, [r5, r3]
 8017ae0:	e7f3      	b.n	8017aca <EwBmpLoadMappingTable+0x76>
 8017ae2:	bf00      	nop
 8017ae4:	2000032c 	.word	0x2000032c
 8017ae8:	20000330 	.word	0x20000330
 8017aec:	20000328 	.word	0x20000328

08017af0 <EwFntInit>:
 8017af0:	2001      	movs	r0, #1
 8017af2:	4770      	bx	lr

08017af4 <EwFntDone>:
 8017af4:	4770      	bx	lr

08017af6 <EwFntGetResource>:
 8017af6:	2000      	movs	r0, #0
 8017af8:	4770      	bx	lr

08017afa <EwFntOpen>:
 8017afa:	b508      	push	{r3, lr}
 8017afc:	b158      	cbz	r0, 8017b16 <EwFntOpen+0x1c>
 8017afe:	6802      	ldr	r2, [r0, #0]
 8017b00:	4b05      	ldr	r3, [pc, #20]	; (8017b18 <EwFntOpen+0x1e>)
 8017b02:	429a      	cmp	r2, r3
 8017b04:	d007      	beq.n	8017b16 <EwFntOpen+0x1c>
 8017b06:	4601      	mov	r1, r0
 8017b08:	2200      	movs	r2, #0
 8017b0a:	20cf      	movs	r0, #207	; 0xcf
 8017b0c:	f001 f8e2 	bl	8018cd4 <EwErrorPD>
 8017b10:	f011 fe32 	bl	8029778 <EwPanic>
 8017b14:	2000      	movs	r0, #0
 8017b16:	bd08      	pop	{r3, pc}
 8017b18:	666e7464 	.word	0x666e7464

08017b1c <EwFntClose>:
 8017b1c:	4770      	bx	lr

08017b1e <EwFntGetResourceName>:
 8017b1e:	b100      	cbz	r0, 8017b22 <EwFntGetResourceName+0x4>
 8017b20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017b22:	4770      	bx	lr

08017b24 <EwFntGetMetrics>:
 8017b24:	b510      	push	{r4, lr}
 8017b26:	6844      	ldr	r4, [r0, #4]
 8017b28:	600c      	str	r4, [r1, #0]
 8017b2a:	6881      	ldr	r1, [r0, #8]
 8017b2c:	6011      	str	r1, [r2, #0]
 8017b2e:	68c2      	ldr	r2, [r0, #12]
 8017b30:	601a      	str	r2, [r3, #0]
 8017b32:	9b02      	ldr	r3, [sp, #8]
 8017b34:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8017b36:	801a      	strh	r2, [r3, #0]
 8017b38:	2001      	movs	r0, #1
 8017b3a:	bd10      	pop	{r4, pc}

08017b3c <EwFntGetGlyphMetrics>:
 8017b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b40:	4604      	mov	r4, r0
 8017b42:	4617      	mov	r7, r2
 8017b44:	4608      	mov	r0, r1
 8017b46:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8017b4a:	e9dd a908 	ldrd	sl, r9, [sp, #32]
 8017b4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8017b52:	461e      	mov	r6, r3
 8017b54:	f7ff ff8e 	bl	8017a74 <EwBmpLoadMappingTable+0x20>
 8017b58:	4604      	mov	r4, r0
 8017b5a:	b368      	cbz	r0, 8017bb8 <EwFntGetGlyphMetrics+0x7c>
 8017b5c:	4d20      	ldr	r5, [pc, #128]	; (8017be0 <EwFntGetGlyphMetrics+0xa4>)
 8017b5e:	682b      	ldr	r3, [r5, #0]
 8017b60:	b363      	cbz	r3, 8017bbc <EwFntGetGlyphMetrics+0x80>
 8017b62:	4a20      	ldr	r2, [pc, #128]	; (8017be4 <EwFntGetGlyphMetrics+0xa8>)
 8017b64:	6812      	ldr	r2, [r2, #0]
 8017b66:	4282      	cmp	r2, r0
 8017b68:	d828      	bhi.n	8017bbc <EwFntGetGlyphMetrics+0x80>
 8017b6a:	4a1f      	ldr	r2, [pc, #124]	; (8017be8 <EwFntGetGlyphMetrics+0xac>)
 8017b6c:	6812      	ldr	r2, [r2, #0]
 8017b6e:	4282      	cmp	r2, r0
 8017b70:	d324      	bcc.n	8017bbc <EwFntGetGlyphMetrics+0x80>
 8017b72:	3002      	adds	r0, #2
 8017b74:	4798      	blx	r3
 8017b76:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017b7a:	603b      	str	r3, [r7, #0]
 8017b7c:	1d20      	adds	r0, r4, #4
 8017b7e:	682b      	ldr	r3, [r5, #0]
 8017b80:	4798      	blx	r3
 8017b82:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017b86:	6033      	str	r3, [r6, #0]
 8017b88:	1da0      	adds	r0, r4, #6
 8017b8a:	682b      	ldr	r3, [r5, #0]
 8017b8c:	4798      	blx	r3
 8017b8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017b92:	f8ca 3000 	str.w	r3, [sl]
 8017b96:	f104 0008 	add.w	r0, r4, #8
 8017b9a:	682b      	ldr	r3, [r5, #0]
 8017b9c:	4798      	blx	r3
 8017b9e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017ba2:	f8c9 3000 	str.w	r3, [r9]
 8017ba6:	f104 000a 	add.w	r0, r4, #10
 8017baa:	682b      	ldr	r3, [r5, #0]
 8017bac:	4798      	blx	r3
 8017bae:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017bb2:	f8c8 3000 	str.w	r3, [r8]
 8017bb6:	2001      	movs	r0, #1
 8017bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bbc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017bc0:	603b      	str	r3, [r7, #0]
 8017bc2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017bc6:	6033      	str	r3, [r6, #0]
 8017bc8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017bcc:	f8ca 3000 	str.w	r3, [sl]
 8017bd0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017bd4:	f8c9 3000 	str.w	r3, [r9]
 8017bd8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017bdc:	e7e9      	b.n	8017bb2 <EwFntGetGlyphMetrics+0x76>
 8017bde:	bf00      	nop
 8017be0:	20000328 	.word	0x20000328
 8017be4:	2000032c 	.word	0x2000032c
 8017be8:	20000330 	.word	0x20000330

08017bec <EwFntGetKerning>:
 8017bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8017ca8 <EwFntGetKerning+0xbc>
 8017bf4:	6a06      	ldr	r6, [r0, #32]
 8017bf6:	f8da 3000 	ldr.w	r3, [sl]
 8017bfa:	4681      	mov	r9, r0
 8017bfc:	4688      	mov	r8, r1
 8017bfe:	4614      	mov	r4, r2
 8017c00:	b183      	cbz	r3, 8017c24 <EwFntGetKerning+0x38>
 8017c02:	4a27      	ldr	r2, [pc, #156]	; (8017ca0 <EwFntGetKerning+0xb4>)
 8017c04:	6812      	ldr	r2, [r2, #0]
 8017c06:	42b2      	cmp	r2, r6
 8017c08:	d80c      	bhi.n	8017c24 <EwFntGetKerning+0x38>
 8017c0a:	4a26      	ldr	r2, [pc, #152]	; (8017ca4 <EwFntGetKerning+0xb8>)
 8017c0c:	6817      	ldr	r7, [r2, #0]
 8017c0e:	42b7      	cmp	r7, r6
 8017c10:	bf34      	ite	cc
 8017c12:	2700      	movcc	r7, #0
 8017c14:	2701      	movcs	r7, #1
 8017c16:	f1b8 0f00 	cmp.w	r8, #0
 8017c1a:	d105      	bne.n	8017c28 <EwFntGetKerning+0x3c>
 8017c1c:	2000      	movs	r0, #0
 8017c1e:	b003      	add	sp, #12
 8017c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c24:	2700      	movs	r7, #0
 8017c26:	e7f6      	b.n	8017c16 <EwFntGetKerning+0x2a>
 8017c28:	2c00      	cmp	r4, #0
 8017c2a:	d0f7      	beq.n	8017c1c <EwFntGetKerning+0x30>
 8017c2c:	2e00      	cmp	r6, #0
 8017c2e:	d0f5      	beq.n	8017c1c <EwFntGetKerning+0x30>
 8017c30:	b3a7      	cbz	r7, 8017c9c <EwFntGetKerning+0xb0>
 8017c32:	4630      	mov	r0, r6
 8017c34:	4798      	blx	r3
 8017c36:	6805      	ldr	r5, [r0, #0]
 8017c38:	2d00      	cmp	r5, #0
 8017c3a:	ddef      	ble.n	8017c1c <EwFntGetKerning+0x30>
 8017c3c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8017c40:	3d02      	subs	r5, #2
 8017c42:	f04f 0b00 	mov.w	fp, #0
 8017c46:	45ab      	cmp	fp, r5
 8017c48:	dce8      	bgt.n	8017c1c <EwFntGetKerning+0x30>
 8017c4a:	eb0b 0805 	add.w	r8, fp, r5
 8017c4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017c52:	f108 0201 	add.w	r2, r8, #1
 8017c56:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 8017c5a:	b187      	cbz	r7, 8017c7e <EwFntGetKerning+0x92>
 8017c5c:	f8da 3000 	ldr.w	r3, [sl]
 8017c60:	9201      	str	r2, [sp, #4]
 8017c62:	4798      	blx	r3
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	9a01      	ldr	r2, [sp, #4]
 8017c68:	1ae3      	subs	r3, r4, r3
 8017c6a:	d111      	bne.n	8017c90 <EwFntGetKerning+0xa4>
 8017c6c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8017c70:	f8da 3000 	ldr.w	r3, [sl]
 8017c74:	4440      	add	r0, r8
 8017c76:	4798      	blx	r3
 8017c78:	7800      	ldrb	r0, [r0, #0]
 8017c7a:	3880      	subs	r0, #128	; 0x80
 8017c7c:	e7cf      	b.n	8017c1e <EwFntGetKerning+0x32>
 8017c7e:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8017c82:	1ae3      	subs	r3, r4, r3
 8017c84:	d104      	bne.n	8017c90 <EwFntGetKerning+0xa4>
 8017c86:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8017c8a:	f813 0008 	ldrb.w	r0, [r3, r8]
 8017c8e:	e7f4      	b.n	8017c7a <EwFntGetKerning+0x8e>
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	bfb4      	ite	lt
 8017c94:	f108 35ff 	addlt.w	r5, r8, #4294967295
 8017c98:	4693      	movge	fp, r2
 8017c9a:	e7d4      	b.n	8017c46 <EwFntGetKerning+0x5a>
 8017c9c:	6835      	ldr	r5, [r6, #0]
 8017c9e:	e7cb      	b.n	8017c38 <EwFntGetKerning+0x4c>
 8017ca0:	2000032c 	.word	0x2000032c
 8017ca4:	20000330 	.word	0x20000330
 8017ca8:	20000328 	.word	0x20000328

08017cac <EwFntIsGlyphAvailable>:
 8017cac:	b508      	push	{r3, lr}
 8017cae:	4603      	mov	r3, r0
 8017cb0:	4608      	mov	r0, r1
 8017cb2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 8017cb6:	f7ff fedd 	bl	8017a74 <EwBmpLoadMappingTable+0x20>
 8017cba:	3800      	subs	r0, #0
 8017cbc:	bf18      	it	ne
 8017cbe:	2001      	movne	r0, #1
 8017cc0:	bd08      	pop	{r3, pc}

08017cc2 <EwFntLoadGlyph>:
 8017cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc6:	b087      	sub	sp, #28
 8017cc8:	4681      	mov	r9, r0
 8017cca:	9203      	str	r2, [sp, #12]
 8017ccc:	4608      	mov	r0, r1
 8017cce:	e9d9 2105 	ldrd	r2, r1, [r9, #20]
 8017cd2:	f7ff fecf 	bl	8017a74 <EwBmpLoadMappingTable+0x20>
 8017cd6:	4606      	mov	r6, r0
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	f000 818a 	beq.w	8017ff2 <EwFntLoadGlyph+0x330>
 8017cde:	4fb2      	ldr	r7, [pc, #712]	; (8017fa8 <EwFntLoadGlyph+0x2e6>)
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d039      	beq.n	8017d5a <EwFntLoadGlyph+0x98>
 8017ce6:	4ab1      	ldr	r2, [pc, #708]	; (8017fac <EwFntLoadGlyph+0x2ea>)
 8017ce8:	6812      	ldr	r2, [r2, #0]
 8017cea:	4282      	cmp	r2, r0
 8017cec:	d835      	bhi.n	8017d5a <EwFntLoadGlyph+0x98>
 8017cee:	4ab0      	ldr	r2, [pc, #704]	; (8017fb0 <EwFntLoadGlyph+0x2ee>)
 8017cf0:	6812      	ldr	r2, [r2, #0]
 8017cf2:	4282      	cmp	r2, r0
 8017cf4:	d331      	bcc.n	8017d5a <EwFntLoadGlyph+0x98>
 8017cf6:	3006      	adds	r0, #6
 8017cf8:	4798      	blx	r3
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017d00:	f106 0008 	add.w	r0, r6, #8
 8017d04:	4798      	blx	r3
 8017d06:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017d0a:	9302      	str	r3, [sp, #8]
 8017d0c:	f106 000c 	add.w	r0, r6, #12
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	4798      	blx	r3
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	6804      	ldr	r4, [r0, #0]
 8017d18:	f106 001c 	add.w	r0, r6, #28
 8017d1c:	4798      	blx	r3
 8017d1e:	6805      	ldr	r5, [r0, #0]
 8017d20:	f1b8 0f00 	cmp.w	r8, #0
 8017d24:	f000 8164 	beq.w	8017ff0 <EwFntLoadGlyph+0x32e>
 8017d28:	9b02      	ldr	r3, [sp, #8]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	f000 8160 	beq.w	8017ff0 <EwFntLoadGlyph+0x32e>
 8017d30:	fb03 f308 	mul.w	r3, r3, r8
 8017d34:	9301      	str	r3, [sp, #4]
 8017d36:	1b2d      	subs	r5, r5, r4
 8017d38:	9801      	ldr	r0, [sp, #4]
 8017d3a:	f011 fd19 	bl	8029770 <EwAlloc>
 8017d3e:	4606      	mov	r6, r0
 8017d40:	2800      	cmp	r0, #0
 8017d42:	f040 815a 	bne.w	8017ffa <EwFntLoadGlyph+0x338>
 8017d46:	2023      	movs	r0, #35	; 0x23
 8017d48:	f001 ff5e 	bl	8019c08 <EwImmediateReclaimMemory>
 8017d4c:	4606      	mov	r6, r0
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d1f2      	bne.n	8017d38 <EwFntLoadGlyph+0x76>
 8017d52:	2023      	movs	r0, #35	; 0x23
 8017d54:	f000 ffa8 	bl	8018ca8 <EwError>
 8017d58:	e14b      	b.n	8017ff2 <EwFntLoadGlyph+0x330>
 8017d5a:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8017d5e:	f9b6 8006 	ldrsh.w	r8, [r6, #6]
 8017d62:	68f4      	ldr	r4, [r6, #12]
 8017d64:	69f5      	ldr	r5, [r6, #28]
 8017d66:	9302      	str	r3, [sp, #8]
 8017d68:	e7da      	b.n	8017d20 <EwFntLoadGlyph+0x5e>
 8017d6a:	f04f 0a00 	mov.w	sl, #0
 8017d6e:	e179      	b.n	8018064 <EwFntLoadGlyph+0x3a2>
 8017d70:	4a90      	ldr	r2, [pc, #576]	; (8017fb4 <EwFntLoadGlyph+0x2f2>)
 8017d72:	f011 0f01 	tst.w	r1, #1
 8017d76:	bf16      	itet	ne
 8017d78:	eb02 0545 	addne.w	r5, r2, r5, lsl #1
 8017d7c:	f812 5015 	ldrbeq.w	r5, [r2, r5, lsl #1]
 8017d80:	786d      	ldrbne	r5, [r5, #1]
 8017d82:	2d0f      	cmp	r5, #15
 8017d84:	dd1e      	ble.n	8017dc4 <EwFntLoadGlyph+0x102>
 8017d86:	4699      	mov	r9, r3
 8017d88:	f1a5 0c10 	sub.w	ip, r5, #16
 8017d8c:	f345 0500 	sbfx	r5, r5, #0, #1
 8017d90:	f809 5b01 	strb.w	r5, [r9], #1
 8017d94:	45cb      	cmp	fp, r9
 8017d96:	d013      	beq.n	8017dc0 <EwFntLoadGlyph+0xfe>
 8017d98:	f103 0902 	add.w	r9, r3, #2
 8017d9c:	f34c 0540 	sbfx	r5, ip, #1, #1
 8017da0:	45cb      	cmp	fp, r9
 8017da2:	705d      	strb	r5, [r3, #1]
 8017da4:	d00c      	beq.n	8017dc0 <EwFntLoadGlyph+0xfe>
 8017da6:	f103 0903 	add.w	r9, r3, #3
 8017daa:	f34c 0580 	sbfx	r5, ip, #2, #1
 8017dae:	45cb      	cmp	fp, r9
 8017db0:	709d      	strb	r5, [r3, #2]
 8017db2:	d005      	beq.n	8017dc0 <EwFntLoadGlyph+0xfe>
 8017db4:	f34c 0cc0 	sbfx	ip, ip, #3, #1
 8017db8:	f103 0904 	add.w	r9, r3, #4
 8017dbc:	f883 c003 	strb.w	ip, [r3, #3]
 8017dc0:	2500      	movs	r5, #0
 8017dc2:	e000      	b.n	8017dc6 <EwFntLoadGlyph+0x104>
 8017dc4:	4699      	mov	r9, r3
 8017dc6:	3401      	adds	r4, #1
 8017dc8:	06e3      	lsls	r3, r4, #27
 8017dca:	d002      	beq.n	8017dd2 <EwFntLoadGlyph+0x110>
 8017dcc:	0849      	lsrs	r1, r1, #1
 8017dce:	464b      	mov	r3, r9
 8017dd0:	e166      	b.n	80180a0 <EwFntLoadGlyph+0x3de>
 8017dd2:	f1ba 0f00 	cmp.w	sl, #0
 8017dd6:	d00a      	beq.n	8017dee <EwFntLoadGlyph+0x12c>
 8017dd8:	4b77      	ldr	r3, [pc, #476]	; (8017fb8 <EwFntLoadGlyph+0x2f6>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	3b01      	subs	r3, #1
 8017dde:	421f      	tst	r7, r3
 8017de0:	d105      	bne.n	8017dee <EwFntLoadGlyph+0x12c>
 8017de2:	f8de 3000 	ldr.w	r3, [lr]
 8017de6:	4638      	mov	r0, r7
 8017de8:	4798      	blx	r3
 8017dea:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8017fa8 <EwFntLoadGlyph+0x2e6>
 8017dee:	f850 1b04 	ldr.w	r1, [r0], #4
 8017df2:	3704      	adds	r7, #4
 8017df4:	e7eb      	b.n	8017dce <EwFntLoadGlyph+0x10c>
 8017df6:	9b01      	ldr	r3, [sp, #4]
 8017df8:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8017dfc:	18f3      	adds	r3, r6, r3
 8017dfe:	9304      	str	r3, [sp, #16]
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d04d      	beq.n	8017ea2 <EwFntLoadGlyph+0x1e0>
 8017e06:	4a69      	ldr	r2, [pc, #420]	; (8017fac <EwFntLoadGlyph+0x2ea>)
 8017e08:	6812      	ldr	r2, [r2, #0]
 8017e0a:	4291      	cmp	r1, r2
 8017e0c:	d349      	bcc.n	8017ea2 <EwFntLoadGlyph+0x1e0>
 8017e0e:	4a68      	ldr	r2, [pc, #416]	; (8017fb0 <EwFntLoadGlyph+0x2ee>)
 8017e10:	6812      	ldr	r2, [r2, #0]
 8017e12:	4291      	cmp	r1, r2
 8017e14:	bf8c      	ite	hi
 8017e16:	f04f 0900 	movhi.w	r9, #0
 8017e1a:	f04f 0901 	movls.w	r9, #1
 8017e1e:	2c00      	cmp	r4, #0
 8017e20:	4622      	mov	r2, r4
 8017e22:	bfb8      	it	lt
 8017e24:	f104 021f 	addlt.w	r2, r4, #31
 8017e28:	1152      	asrs	r2, r2, #5
 8017e2a:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8017e2e:	4262      	negs	r2, r4
 8017e30:	f002 021f 	and.w	r2, r2, #31
 8017e34:	f004 041f 	and.w	r4, r4, #31
 8017e38:	4638      	mov	r0, r7
 8017e3a:	bf58      	it	pl
 8017e3c:	4254      	negpl	r4, r2
 8017e3e:	f1b9 0f00 	cmp.w	r9, #0
 8017e42:	d000      	beq.n	8017e46 <EwFntLoadGlyph+0x184>
 8017e44:	4798      	blx	r3
 8017e46:	f850 3b04 	ldr.w	r3, [r0], #4
 8017e4a:	f8df b168 	ldr.w	fp, [pc, #360]	; 8017fb4 <EwFntLoadGlyph+0x2f2>
 8017e4e:	4956      	ldr	r1, [pc, #344]	; (8017fa8 <EwFntLoadGlyph+0x2e6>)
 8017e50:	192a      	adds	r2, r5, r4
 8017e52:	40e3      	lsrs	r3, r4
 8017e54:	3704      	adds	r7, #4
 8017e56:	9205      	str	r2, [sp, #20]
 8017e58:	46b4      	mov	ip, r6
 8017e5a:	2500      	movs	r5, #0
 8017e5c:	9a05      	ldr	r2, [sp, #20]
 8017e5e:	4294      	cmp	r4, r2
 8017e60:	f000 8122 	beq.w	80180a8 <EwFntLoadGlyph+0x3e6>
 8017e64:	07da      	lsls	r2, r3, #31
 8017e66:	bf4a      	itet	mi
 8017e68:	eb0b 0545 	addmi.w	r5, fp, r5, lsl #1
 8017e6c:	f81b 5015 	ldrbpl.w	r5, [fp, r5, lsl #1]
 8017e70:	786d      	ldrbmi	r5, [r5, #1]
 8017e72:	2d0f      	cmp	r5, #15
 8017e74:	dd18      	ble.n	8017ea8 <EwFntLoadGlyph+0x1e6>
 8017e76:	f1a5 0e10 	sub.w	lr, r5, #16
 8017e7a:	f005 0503 	and.w	r5, r5, #3
 8017e7e:	445d      	add	r5, fp
 8017e80:	46e2      	mov	sl, ip
 8017e82:	7fad      	ldrb	r5, [r5, #30]
 8017e84:	f80a 5b01 	strb.w	r5, [sl], #1
 8017e88:	9d04      	ldr	r5, [sp, #16]
 8017e8a:	4555      	cmp	r5, sl
 8017e8c:	d007      	beq.n	8017e9e <EwFntLoadGlyph+0x1dc>
 8017e8e:	eb0b 0eae 	add.w	lr, fp, lr, asr #2
 8017e92:	f10c 0a02 	add.w	sl, ip, #2
 8017e96:	f89e 501e 	ldrb.w	r5, [lr, #30]
 8017e9a:	f88c 5001 	strb.w	r5, [ip, #1]
 8017e9e:	2500      	movs	r5, #0
 8017ea0:	e003      	b.n	8017eaa <EwFntLoadGlyph+0x1e8>
 8017ea2:	f04f 0900 	mov.w	r9, #0
 8017ea6:	e7ba      	b.n	8017e1e <EwFntLoadGlyph+0x15c>
 8017ea8:	46e2      	mov	sl, ip
 8017eaa:	3401      	adds	r4, #1
 8017eac:	06e2      	lsls	r2, r4, #27
 8017eae:	d002      	beq.n	8017eb6 <EwFntLoadGlyph+0x1f4>
 8017eb0:	085b      	lsrs	r3, r3, #1
 8017eb2:	46d4      	mov	ip, sl
 8017eb4:	e7d2      	b.n	8017e5c <EwFntLoadGlyph+0x19a>
 8017eb6:	f1b9 0f00 	cmp.w	r9, #0
 8017eba:	d008      	beq.n	8017ece <EwFntLoadGlyph+0x20c>
 8017ebc:	4b3e      	ldr	r3, [pc, #248]	; (8017fb8 <EwFntLoadGlyph+0x2f6>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	421f      	tst	r7, r3
 8017ec4:	d103      	bne.n	8017ece <EwFntLoadGlyph+0x20c>
 8017ec6:	680b      	ldr	r3, [r1, #0]
 8017ec8:	4638      	mov	r0, r7
 8017eca:	4798      	blx	r3
 8017ecc:	4936      	ldr	r1, [pc, #216]	; (8017fa8 <EwFntLoadGlyph+0x2e6>)
 8017ece:	f850 3b04 	ldr.w	r3, [r0], #4
 8017ed2:	3704      	adds	r7, #4
 8017ed4:	e7ed      	b.n	8017eb2 <EwFntLoadGlyph+0x1f0>
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d046      	beq.n	8017f6e <EwFntLoadGlyph+0x2ac>
 8017ee0:	4a32      	ldr	r2, [pc, #200]	; (8017fac <EwFntLoadGlyph+0x2ea>)
 8017ee2:	6812      	ldr	r2, [r2, #0]
 8017ee4:	4291      	cmp	r1, r2
 8017ee6:	d342      	bcc.n	8017f6e <EwFntLoadGlyph+0x2ac>
 8017ee8:	4a31      	ldr	r2, [pc, #196]	; (8017fb0 <EwFntLoadGlyph+0x2ee>)
 8017eea:	6812      	ldr	r2, [r2, #0]
 8017eec:	4291      	cmp	r1, r2
 8017eee:	bf8c      	ite	hi
 8017ef0:	f04f 0900 	movhi.w	r9, #0
 8017ef4:	f04f 0901 	movls.w	r9, #1
 8017ef8:	2c00      	cmp	r4, #0
 8017efa:	4622      	mov	r2, r4
 8017efc:	bfb8      	it	lt
 8017efe:	f104 021f 	addlt.w	r2, r4, #31
 8017f02:	1152      	asrs	r2, r2, #5
 8017f04:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8017f08:	4262      	negs	r2, r4
 8017f0a:	f002 021f 	and.w	r2, r2, #31
 8017f0e:	f004 041f 	and.w	r4, r4, #31
 8017f12:	4638      	mov	r0, r7
 8017f14:	bf58      	it	pl
 8017f16:	4254      	negpl	r4, r2
 8017f18:	f1b9 0f00 	cmp.w	r9, #0
 8017f1c:	d000      	beq.n	8017f20 <EwFntLoadGlyph+0x25e>
 8017f1e:	4798      	blx	r3
 8017f20:	f850 3b04 	ldr.w	r3, [r0], #4
 8017f24:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8017fb4 <EwFntLoadGlyph+0x2f2>
 8017f28:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8017fb8 <EwFntLoadGlyph+0x2f6>
 8017f2c:	491e      	ldr	r1, [pc, #120]	; (8017fa8 <EwFntLoadGlyph+0x2e6>)
 8017f2e:	192a      	adds	r2, r5, r4
 8017f30:	40e3      	lsrs	r3, r4
 8017f32:	3704      	adds	r7, #4
 8017f34:	9204      	str	r2, [sp, #16]
 8017f36:	46b2      	mov	sl, r6
 8017f38:	2500      	movs	r5, #0
 8017f3a:	9a04      	ldr	r2, [sp, #16]
 8017f3c:	4294      	cmp	r4, r2
 8017f3e:	f000 80b3 	beq.w	80180a8 <EwFntLoadGlyph+0x3e6>
 8017f42:	07da      	lsls	r2, r3, #31
 8017f44:	bf4a      	itet	mi
 8017f46:	eb0b 0545 	addmi.w	r5, fp, r5, lsl #1
 8017f4a:	f81b 5015 	ldrbpl.w	r5, [fp, r5, lsl #1]
 8017f4e:	786d      	ldrbmi	r5, [r5, #1]
 8017f50:	2d0f      	cmp	r5, #15
 8017f52:	bfc4      	itt	gt
 8017f54:	3d10      	subgt	r5, #16
 8017f56:	ea45 1505 	orrgt.w	r5, r5, r5, lsl #4
 8017f5a:	f104 0401 	add.w	r4, r4, #1
 8017f5e:	bfc4      	itt	gt
 8017f60:	f80a 5b01 	strbgt.w	r5, [sl], #1
 8017f64:	2500      	movgt	r5, #0
 8017f66:	06e2      	lsls	r2, r4, #27
 8017f68:	d004      	beq.n	8017f74 <EwFntLoadGlyph+0x2b2>
 8017f6a:	085b      	lsrs	r3, r3, #1
 8017f6c:	e7e5      	b.n	8017f3a <EwFntLoadGlyph+0x278>
 8017f6e:	f04f 0900 	mov.w	r9, #0
 8017f72:	e7c1      	b.n	8017ef8 <EwFntLoadGlyph+0x236>
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	d00a      	beq.n	8017f90 <EwFntLoadGlyph+0x2ce>
 8017f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8017f7e:	3b01      	subs	r3, #1
 8017f80:	421f      	tst	r7, r3
 8017f82:	d105      	bne.n	8017f90 <EwFntLoadGlyph+0x2ce>
 8017f84:	680b      	ldr	r3, [r1, #0]
 8017f86:	4638      	mov	r0, r7
 8017f88:	4798      	blx	r3
 8017f8a:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8017fb8 <EwFntLoadGlyph+0x2f6>
 8017f8e:	4906      	ldr	r1, [pc, #24]	; (8017fa8 <EwFntLoadGlyph+0x2e6>)
 8017f90:	f850 3b04 	ldr.w	r3, [r0], #4
 8017f94:	3704      	adds	r7, #4
 8017f96:	e7d0      	b.n	8017f3a <EwFntLoadGlyph+0x278>
 8017f98:	f812 0b01 	ldrb.w	r0, [r2], #1
 8017f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017fa0:	4060      	eors	r0, r4
 8017fa2:	f801 0c01 	strb.w	r0, [r1, #-1]
 8017fa6:	e086      	b.n	80180b6 <EwFntLoadGlyph+0x3f4>
 8017fa8:	20000328 	.word	0x20000328
 8017fac:	2000032c 	.word	0x2000032c
 8017fb0:	20000330 	.word	0x20000330
 8017fb4:	08036ad8 	.word	0x08036ad8
 8017fb8:	20000344 	.word	0x20000344
 8017fbc:	f813 cb01 	ldrb.w	ip, [r3], #1
 8017fc0:	f804 cf01 	strb.w	ip, [r4, #1]!
 8017fc4:	eba7 0c03 	sub.w	ip, r7, r3
 8017fc8:	f1bc 0f00 	cmp.w	ip, #0
 8017fcc:	dcf6      	bgt.n	8017fbc <EwFntLoadGlyph+0x2fa>
 8017fce:	9b03      	ldr	r3, [sp, #12]
 8017fd0:	689b      	ldr	r3, [r3, #8]
 8017fd2:	eba3 0308 	sub.w	r3, r3, r8
 8017fd6:	442b      	add	r3, r5
 8017fd8:	442a      	add	r2, r5
 8017fda:	4419      	add	r1, r3
 8017fdc:	3801      	subs	r0, #1
 8017fde:	e073      	b.n	80180c8 <EwFntLoadGlyph+0x406>
 8017fe0:	4630      	mov	r0, r6
 8017fe2:	f011 fbc7 	bl	8029774 <EwFree>
 8017fe6:	4a3c      	ldr	r2, [pc, #240]	; (80180d8 <EwFntLoadGlyph+0x416>)
 8017fe8:	9901      	ldr	r1, [sp, #4]
 8017fea:	6813      	ldr	r3, [r2, #0]
 8017fec:	1a5b      	subs	r3, r3, r1
 8017fee:	6013      	str	r3, [r2, #0]
 8017ff0:	2601      	movs	r6, #1
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	b007      	add	sp, #28
 8017ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffa:	4a37      	ldr	r2, [pc, #220]	; (80180d8 <EwFntLoadGlyph+0x416>)
 8017ffc:	9901      	ldr	r1, [sp, #4]
 8017ffe:	6813      	ldr	r3, [r2, #0]
 8018000:	440b      	add	r3, r1
 8018002:	4936      	ldr	r1, [pc, #216]	; (80180dc <EwFntLoadGlyph+0x41a>)
 8018004:	6013      	str	r3, [r2, #0]
 8018006:	680a      	ldr	r2, [r1, #0]
 8018008:	4293      	cmp	r3, r2
 801800a:	dd00      	ble.n	801800e <EwFntLoadGlyph+0x34c>
 801800c:	600b      	str	r3, [r1, #0]
 801800e:	4a34      	ldr	r2, [pc, #208]	; (80180e0 <EwFntLoadGlyph+0x41e>)
 8018010:	4934      	ldr	r1, [pc, #208]	; (80180e4 <EwFntLoadGlyph+0x422>)
 8018012:	6812      	ldr	r2, [r2, #0]
 8018014:	6809      	ldr	r1, [r1, #0]
 8018016:	440a      	add	r2, r1
 8018018:	4933      	ldr	r1, [pc, #204]	; (80180e8 <EwFntLoadGlyph+0x426>)
 801801a:	4413      	add	r3, r2
 801801c:	680a      	ldr	r2, [r1, #0]
 801801e:	4293      	cmp	r3, r2
 8018020:	bfc8      	it	gt
 8018022:	600b      	strgt	r3, [r1, #0]
 8018024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018028:	2b04      	cmp	r3, #4
 801802a:	f43f aee4 	beq.w	8017df6 <EwFntLoadGlyph+0x134>
 801802e:	2b10      	cmp	r3, #16
 8018030:	f43f af51 	beq.w	8017ed6 <EwFntLoadGlyph+0x214>
 8018034:	2b02      	cmp	r3, #2
 8018036:	d137      	bne.n	80180a8 <EwFntLoadGlyph+0x3e6>
 8018038:	9b01      	ldr	r3, [sp, #4]
 801803a:	f8d9 101c 	ldr.w	r1, [r9, #28]
 801803e:	eb06 0b03 	add.w	fp, r6, r3
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	2b00      	cmp	r3, #0
 8018046:	f43f ae90 	beq.w	8017d6a <EwFntLoadGlyph+0xa8>
 801804a:	4a28      	ldr	r2, [pc, #160]	; (80180ec <EwFntLoadGlyph+0x42a>)
 801804c:	6812      	ldr	r2, [r2, #0]
 801804e:	4291      	cmp	r1, r2
 8018050:	f4ff ae8b 	bcc.w	8017d6a <EwFntLoadGlyph+0xa8>
 8018054:	4a26      	ldr	r2, [pc, #152]	; (80180f0 <EwFntLoadGlyph+0x42e>)
 8018056:	6812      	ldr	r2, [r2, #0]
 8018058:	4291      	cmp	r1, r2
 801805a:	bf8c      	ite	hi
 801805c:	f04f 0a00 	movhi.w	sl, #0
 8018060:	f04f 0a01 	movls.w	sl, #1
 8018064:	2c00      	cmp	r4, #0
 8018066:	4622      	mov	r2, r4
 8018068:	bfb8      	it	lt
 801806a:	f104 021f 	addlt.w	r2, r4, #31
 801806e:	1152      	asrs	r2, r2, #5
 8018070:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8018074:	4262      	negs	r2, r4
 8018076:	f002 021f 	and.w	r2, r2, #31
 801807a:	f004 041f 	and.w	r4, r4, #31
 801807e:	4638      	mov	r0, r7
 8018080:	bf58      	it	pl
 8018082:	4254      	negpl	r4, r2
 8018084:	f1ba 0f00 	cmp.w	sl, #0
 8018088:	d000      	beq.n	801808c <EwFntLoadGlyph+0x3ca>
 801808a:	4798      	blx	r3
 801808c:	f850 1b04 	ldr.w	r1, [r0], #4
 8018090:	f8df e060 	ldr.w	lr, [pc, #96]	; 80180f4 <EwFntLoadGlyph+0x432>
 8018094:	192b      	adds	r3, r5, r4
 8018096:	9304      	str	r3, [sp, #16]
 8018098:	40e1      	lsrs	r1, r4
 801809a:	3704      	adds	r7, #4
 801809c:	4633      	mov	r3, r6
 801809e:	2500      	movs	r5, #0
 80180a0:	9a04      	ldr	r2, [sp, #16]
 80180a2:	4294      	cmp	r4, r2
 80180a4:	f47f ae64 	bne.w	8017d70 <EwFntLoadGlyph+0xae>
 80180a8:	9b01      	ldr	r3, [sp, #4]
 80180aa:	eba3 0308 	sub.w	r3, r3, r8
 80180ae:	eb06 0108 	add.w	r1, r6, r8
 80180b2:	4433      	add	r3, r6
 80180b4:	4632      	mov	r2, r6
 80180b6:	429a      	cmp	r2, r3
 80180b8:	f47f af6e 	bne.w	8017f98 <EwFntLoadGlyph+0x2d6>
 80180bc:	9b03      	ldr	r3, [sp, #12]
 80180be:	9802      	ldr	r0, [sp, #8]
 80180c0:	6819      	ldr	r1, [r3, #0]
 80180c2:	4632      	mov	r2, r6
 80180c4:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
 80180c8:	2800      	cmp	r0, #0
 80180ca:	dd89      	ble.n	8017fe0 <EwFntLoadGlyph+0x31e>
 80180cc:	1e4c      	subs	r4, r1, #1
 80180ce:	4613      	mov	r3, r2
 80180d0:	eb02 0708 	add.w	r7, r2, r8
 80180d4:	e776      	b.n	8017fc4 <EwFntLoadGlyph+0x302>
 80180d6:	bf00      	nop
 80180d8:	200002e8 	.word	0x200002e8
 80180dc:	20000304 	.word	0x20000304
 80180e0:	200002d8 	.word	0x200002d8
 80180e4:	200002e4 	.word	0x200002e4
 80180e8:	200002ec 	.word	0x200002ec
 80180ec:	2000032c 	.word	0x2000032c
 80180f0:	20000330 	.word	0x20000330
 80180f4:	20000328 	.word	0x20000328

080180f8 <EwNewColor>:
 80180f8:	b513      	push	{r0, r1, r4, lr}
 80180fa:	2400      	movs	r4, #0
 80180fc:	f360 0407 	bfi	r4, r0, #0, #8
 8018100:	f361 240f 	bfi	r4, r1, #8, #8
 8018104:	f362 4417 	bfi	r4, r2, #16, #8
 8018108:	f363 641f 	bfi	r4, r3, #24, #8
 801810c:	4620      	mov	r0, r4
 801810e:	b002      	add	sp, #8
 8018110:	bd10      	pop	{r4, pc}

08018112 <EwMinusColor>:
 8018112:	460b      	mov	r3, r1
 8018114:	b2c2      	uxtb	r2, r0
 8018116:	b2c9      	uxtb	r1, r1
 8018118:	b530      	push	{r4, r5, lr}
 801811a:	1a52      	subs	r2, r2, r1
 801811c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018120:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018124:	f3c3 4507 	ubfx	r5, r3, #16, #8
 8018128:	1a64      	subs	r4, r4, r1
 801812a:	0e1b      	lsrs	r3, r3, #24
 801812c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018130:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018134:	1b49      	subs	r1, r1, r5
 8018136:	ebc3 6310 	rsb	r3, r3, r0, lsr #24
 801813a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801813e:	b2d2      	uxtb	r2, r2
 8018140:	2000      	movs	r0, #0
 8018142:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018146:	f362 0007 	bfi	r0, r2, #0, #8
 801814a:	b2e2      	uxtb	r2, r4
 801814c:	f362 200f 	bfi	r0, r2, #8, #8
 8018150:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018154:	b2ca      	uxtb	r2, r1
 8018156:	f362 4017 	bfi	r0, r2, #16, #8
 801815a:	b2db      	uxtb	r3, r3
 801815c:	b085      	sub	sp, #20
 801815e:	f363 601f 	bfi	r0, r3, #24, #8
 8018162:	b005      	add	sp, #20
 8018164:	bd30      	pop	{r4, r5, pc}

08018166 <EwPlusColor>:
 8018166:	b530      	push	{r4, r5, lr}
 8018168:	460b      	mov	r3, r1
 801816a:	b2cc      	uxtb	r4, r1
 801816c:	fa54 f480 	uxtab	r4, r4, r0
 8018170:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018174:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018178:	4411      	add	r1, r2
 801817a:	f3c3 4507 	ubfx	r5, r3, #16, #8
 801817e:	2cff      	cmp	r4, #255	; 0xff
 8018180:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8018184:	442a      	add	r2, r5
 8018186:	bfa8      	it	ge
 8018188:	24ff      	movge	r4, #255	; 0xff
 801818a:	0e1b      	lsrs	r3, r3, #24
 801818c:	29ff      	cmp	r1, #255	; 0xff
 801818e:	eb03 6310 	add.w	r3, r3, r0, lsr #24
 8018192:	bfa8      	it	ge
 8018194:	21ff      	movge	r1, #255	; 0xff
 8018196:	b2e4      	uxtb	r4, r4
 8018198:	2aff      	cmp	r2, #255	; 0xff
 801819a:	f04f 0000 	mov.w	r0, #0
 801819e:	bfa8      	it	ge
 80181a0:	22ff      	movge	r2, #255	; 0xff
 80181a2:	f364 0007 	bfi	r0, r4, #0, #8
 80181a6:	2bff      	cmp	r3, #255	; 0xff
 80181a8:	b2c9      	uxtb	r1, r1
 80181aa:	bfa8      	it	ge
 80181ac:	23ff      	movge	r3, #255	; 0xff
 80181ae:	f361 200f 	bfi	r0, r1, #8, #8
 80181b2:	b2d2      	uxtb	r2, r2
 80181b4:	f362 4017 	bfi	r0, r2, #16, #8
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	b085      	sub	sp, #20
 80181bc:	f363 601f 	bfi	r0, r3, #24, #8
 80181c0:	b005      	add	sp, #20
 80181c2:	bd30      	pop	{r4, r5, pc}

080181c4 <EwBlendColor>:
 80181c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181c6:	0e0f      	lsrs	r7, r1, #24
 80181c8:	4604      	mov	r4, r0
 80181ca:	4603      	mov	r3, r0
 80181cc:	460a      	mov	r2, r1
 80181ce:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
 80181d2:	b2cd      	uxtb	r5, r1
 80181d4:	b2e1      	uxtb	r1, r4
 80181d6:	4341      	muls	r1, r0
 80181d8:	fb05 1107 	mla	r1, r5, r7, r1
 80181dc:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80181e0:	f3c3 4507 	ubfx	r5, r3, #16, #8
 80181e4:	0e1b      	lsrs	r3, r3, #24
 80181e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80181ea:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 80181ee:	fb00 f404 	mul.w	r4, r0, r4
 80181f2:	fb00 f505 	mul.w	r5, r0, r5
 80181f6:	fb00 f303 	mul.w	r3, r0, r3
 80181fa:	f04f 00ff 	mov.w	r0, #255	; 0xff
 80181fe:	bfa8      	it	ge
 8018200:	4601      	movge	r1, r0
 8018202:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8018206:	fb06 4607 	mla	r6, r6, r7, r4
 801820a:	bfb8      	it	lt
 801820c:	fbb1 f1f0 	udivlt	r1, r1, r0
 8018210:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8018214:	24ff      	movs	r4, #255	; 0xff
 8018216:	b2c9      	uxtb	r1, r1
 8018218:	2000      	movs	r0, #0
 801821a:	fb02 5507 	mla	r5, r2, r7, r5
 801821e:	f5b6 4f7f 	cmp.w	r6, #65280	; 0xff00
 8018222:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
 8018226:	bfb8      	it	lt
 8018228:	fbb6 f4f4 	udivlt	r4, r6, r4
 801822c:	f361 0007 	bfi	r0, r1, #0, #8
 8018230:	b2e4      	uxtb	r4, r4
 8018232:	fb93 f3f2 	sdiv	r3, r3, r2
 8018236:	22ff      	movs	r2, #255	; 0xff
 8018238:	f5b5 4f7f 	cmp.w	r5, #65280	; 0xff00
 801823c:	f364 200f 	bfi	r0, r4, #8, #8
 8018240:	bfb8      	it	lt
 8018242:	fbb5 f2f2 	udivlt	r2, r5, r2
 8018246:	33ff      	adds	r3, #255	; 0xff
 8018248:	b2d2      	uxtb	r2, r2
 801824a:	f362 4017 	bfi	r0, r2, #16, #8
 801824e:	b2db      	uxtb	r3, r3
 8018250:	b085      	sub	sp, #20
 8018252:	f363 601f 	bfi	r0, r3, #24, #8
 8018256:	b005      	add	sp, #20
 8018258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801825a <EwBlendColorInt>:
 801825a:	b530      	push	{r4, r5, lr}
 801825c:	4602      	mov	r2, r0
 801825e:	4603      	mov	r3, r0
 8018260:	4605      	mov	r5, r0
 8018262:	f381 0108 	usat	r1, #8, r1
 8018266:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801826a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 801826e:	0e1b      	lsrs	r3, r3, #24
 8018270:	b2ed      	uxtb	r5, r5
 8018272:	20ff      	movs	r0, #255	; 0xff
 8018274:	434c      	muls	r4, r1
 8018276:	434a      	muls	r2, r1
 8018278:	434b      	muls	r3, r1
 801827a:	434d      	muls	r5, r1
 801827c:	fbb4 f4f0 	udiv	r4, r4, r0
 8018280:	fbb5 f5f0 	udiv	r5, r5, r0
 8018284:	fbb2 f2f0 	udiv	r2, r2, r0
 8018288:	b2ed      	uxtb	r5, r5
 801828a:	fbb3 f3f0 	udiv	r3, r3, r0
 801828e:	2000      	movs	r0, #0
 8018290:	f365 0007 	bfi	r0, r5, #0, #8
 8018294:	b2e4      	uxtb	r4, r4
 8018296:	f364 200f 	bfi	r0, r4, #8, #8
 801829a:	b2d2      	uxtb	r2, r2
 801829c:	f362 4017 	bfi	r0, r2, #16, #8
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	b085      	sub	sp, #20
 80182a4:	f363 601f 	bfi	r0, r3, #24, #8
 80182a8:	b005      	add	sp, #20
 80182aa:	bd30      	pop	{r4, r5, pc}

080182ac <EwBlendColorUInt>:
 80182ac:	29ff      	cmp	r1, #255	; 0xff
 80182ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80182b0:	bf28      	it	cs
 80182b2:	21ff      	movcs	r1, #255	; 0xff
 80182b4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80182b8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80182bc:	0e03      	lsrs	r3, r0, #24
 80182be:	b2c0      	uxtb	r0, r0
 80182c0:	26ff      	movs	r6, #255	; 0xff
 80182c2:	fb01 f500 	mul.w	r5, r1, r0
 80182c6:	2000      	movs	r0, #0
 80182c8:	fbb5 f5f6 	udiv	r5, r5, r6
 80182cc:	b2ed      	uxtb	r5, r5
 80182ce:	434c      	muls	r4, r1
 80182d0:	f365 0007 	bfi	r0, r5, #0, #8
 80182d4:	fbb4 f4f6 	udiv	r4, r4, r6
 80182d8:	b2e4      	uxtb	r4, r4
 80182da:	434a      	muls	r2, r1
 80182dc:	f364 200f 	bfi	r0, r4, #8, #8
 80182e0:	fbb2 f2f6 	udiv	r2, r2, r6
 80182e4:	b2d2      	uxtb	r2, r2
 80182e6:	434b      	muls	r3, r1
 80182e8:	f362 4017 	bfi	r0, r2, #16, #8
 80182ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	f363 601f 	bfi	r0, r3, #24, #8
 80182f6:	b004      	add	sp, #16
 80182f8:	bd70      	pop	{r4, r5, r6, pc}

080182fa <EwSetColorRed>:
 80182fa:	b084      	sub	sp, #16
 80182fc:	9001      	str	r0, [sp, #4]
 80182fe:	f88d 1004 	strb.w	r1, [sp, #4]
 8018302:	9b01      	ldr	r3, [sp, #4]
 8018304:	2000      	movs	r0, #0
 8018306:	b2da      	uxtb	r2, r3
 8018308:	f362 0007 	bfi	r0, r2, #0, #8
 801830c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018310:	f362 200f 	bfi	r0, r2, #8, #8
 8018314:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018318:	f362 4017 	bfi	r0, r2, #16, #8
 801831c:	0e1b      	lsrs	r3, r3, #24
 801831e:	f363 601f 	bfi	r0, r3, #24, #8
 8018322:	b004      	add	sp, #16
 8018324:	4770      	bx	lr

08018326 <EwSetColorGreen>:
 8018326:	b084      	sub	sp, #16
 8018328:	9001      	str	r0, [sp, #4]
 801832a:	f88d 1005 	strb.w	r1, [sp, #5]
 801832e:	9b01      	ldr	r3, [sp, #4]
 8018330:	2000      	movs	r0, #0
 8018332:	b2da      	uxtb	r2, r3
 8018334:	f362 0007 	bfi	r0, r2, #0, #8
 8018338:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801833c:	f362 200f 	bfi	r0, r2, #8, #8
 8018340:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018344:	f362 4017 	bfi	r0, r2, #16, #8
 8018348:	0e1b      	lsrs	r3, r3, #24
 801834a:	f363 601f 	bfi	r0, r3, #24, #8
 801834e:	b004      	add	sp, #16
 8018350:	4770      	bx	lr

08018352 <EwSetColorBlue>:
 8018352:	b084      	sub	sp, #16
 8018354:	9001      	str	r0, [sp, #4]
 8018356:	f88d 1006 	strb.w	r1, [sp, #6]
 801835a:	9b01      	ldr	r3, [sp, #4]
 801835c:	2000      	movs	r0, #0
 801835e:	b2da      	uxtb	r2, r3
 8018360:	f362 0007 	bfi	r0, r2, #0, #8
 8018364:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018368:	f362 200f 	bfi	r0, r2, #8, #8
 801836c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018370:	f362 4017 	bfi	r0, r2, #16, #8
 8018374:	0e1b      	lsrs	r3, r3, #24
 8018376:	f363 601f 	bfi	r0, r3, #24, #8
 801837a:	b004      	add	sp, #16
 801837c:	4770      	bx	lr

0801837e <EwSetColorAlpha>:
 801837e:	b084      	sub	sp, #16
 8018380:	9001      	str	r0, [sp, #4]
 8018382:	f88d 1007 	strb.w	r1, [sp, #7]
 8018386:	9b01      	ldr	r3, [sp, #4]
 8018388:	2000      	movs	r0, #0
 801838a:	b2da      	uxtb	r2, r3
 801838c:	f362 0007 	bfi	r0, r2, #0, #8
 8018390:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018394:	f362 200f 	bfi	r0, r2, #8, #8
 8018398:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801839c:	f362 4017 	bfi	r0, r2, #16, #8
 80183a0:	0e1b      	lsrs	r3, r3, #24
 80183a2:	f363 601f 	bfi	r0, r3, #24, #8
 80183a6:	b004      	add	sp, #16
 80183a8:	4770      	bx	lr

080183aa <EwCompColor>:
 80183aa:	b082      	sub	sp, #8
 80183ac:	e9cd 1000 	strd	r1, r0, [sp]
 80183b0:	b2c0      	uxtb	r0, r0
 80183b2:	b2c9      	uxtb	r1, r1
 80183b4:	4288      	cmp	r0, r1
 80183b6:	d114      	bne.n	80183e2 <EwCompColor+0x38>
 80183b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80183bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d10e      	bne.n	80183e2 <EwCompColor+0x38>
 80183c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80183c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d108      	bne.n	80183e2 <EwCompColor+0x38>
 80183d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80183d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80183d8:	1ac0      	subs	r0, r0, r3
 80183da:	bf18      	it	ne
 80183dc:	2001      	movne	r0, #1
 80183de:	b002      	add	sp, #8
 80183e0:	4770      	bx	lr
 80183e2:	2001      	movs	r0, #1
 80183e4:	e7fb      	b.n	80183de <EwCompColor+0x34>

080183e6 <EwIsColorNull>:
 80183e6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80183ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80183ee:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80183f2:	b2c2      	uxtb	r2, r0
 80183f4:	430b      	orrs	r3, r1
 80183f6:	4313      	orrs	r3, r2
 80183f8:	b082      	sub	sp, #8
 80183fa:	bf0c      	ite	eq
 80183fc:	2001      	moveq	r0, #1
 80183fe:	2000      	movne	r0, #0
 8018400:	b002      	add	sp, #8
 8018402:	4770      	bx	lr

08018404 <EwGetVariantOfColor>:
 8018404:	b507      	push	{r0, r1, r2, lr}
 8018406:	2108      	movs	r1, #8
 8018408:	f002 f8b5 	bl	801a576 <EwGetVariantOf>
 801840c:	6843      	ldr	r3, [r0, #4]
 801840e:	2000      	movs	r0, #0
 8018410:	b2da      	uxtb	r2, r3
 8018412:	f362 0007 	bfi	r0, r2, #0, #8
 8018416:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801841a:	f362 200f 	bfi	r0, r2, #8, #8
 801841e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018422:	f362 4017 	bfi	r0, r2, #16, #8
 8018426:	0e1b      	lsrs	r3, r3, #24
 8018428:	f363 601f 	bfi	r0, r3, #24, #8
 801842c:	b003      	add	sp, #12
 801842e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018434 <EwPrint>:
 8018434:	b40f      	push	{r0, r1, r2, r3}
 8018436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801843a:	b097      	sub	sp, #92	; 0x5c
 801843c:	ab20      	add	r3, sp, #128	; 0x80
 801843e:	f853 6b04 	ldr.w	r6, [r3], #4
 8018442:	9305      	str	r3, [sp, #20]
 8018444:	7833      	ldrb	r3, [r6, #0]
 8018446:	2b00      	cmp	r3, #0
 8018448:	f000 8226 	beq.w	8018898 <EwPrint+0x464>
 801844c:	ab06      	add	r3, sp, #24
 801844e:	2240      	movs	r2, #64	; 0x40
 8018450:	461f      	mov	r7, r3
 8018452:	e004      	b.n	801845e <EwPrint+0x2a>
 8018454:	2925      	cmp	r1, #37	; 0x25
 8018456:	d051      	beq.n	80184fc <EwPrint+0xc8>
 8018458:	3601      	adds	r6, #1
 801845a:	7019      	strb	r1, [r3, #0]
 801845c:	3301      	adds	r3, #1
 801845e:	7831      	ldrb	r1, [r6, #0]
 8018460:	461c      	mov	r4, r3
 8018462:	2900      	cmp	r1, #0
 8018464:	f000 8208 	beq.w	8018878 <EwPrint+0x444>
 8018468:	3a01      	subs	r2, #1
 801846a:	d1f3      	bne.n	8018454 <EwPrint+0x20>
 801846c:	42bb      	cmp	r3, r7
 801846e:	d905      	bls.n	801847c <EwPrint+0x48>
 8018470:	2200      	movs	r2, #0
 8018472:	701a      	strb	r2, [r3, #0]
 8018474:	4638      	mov	r0, r7
 8018476:	f011 f987 	bl	8029788 <EwConsoleOutput>
 801847a:	463c      	mov	r4, r7
 801847c:	7833      	ldrb	r3, [r6, #0]
 801847e:	2b25      	cmp	r3, #37	; 0x25
 8018480:	d1e0      	bne.n	8018444 <EwPrint+0x10>
 8018482:	7873      	ldrb	r3, [r6, #1]
 8018484:	2b25      	cmp	r3, #37	; 0x25
 8018486:	d0dd      	beq.n	8018444 <EwPrint+0x10>
 8018488:	2b2b      	cmp	r3, #43	; 0x2b
 801848a:	bf0a      	itet	eq
 801848c:	3602      	addeq	r6, #2
 801848e:	3601      	addne	r6, #1
 8018490:	f04f 0a01 	moveq.w	sl, #1
 8018494:	7833      	ldrb	r3, [r6, #0]
 8018496:	bf18      	it	ne
 8018498:	f04f 0a00 	movne.w	sl, #0
 801849c:	2b2d      	cmp	r3, #45	; 0x2d
 801849e:	bf04      	itt	eq
 80184a0:	3601      	addeq	r6, #1
 80184a2:	f04f 3aff 	moveq.w	sl, #4294967295
 80184a6:	7833      	ldrb	r3, [r6, #0]
 80184a8:	2b30      	cmp	r3, #48	; 0x30
 80184aa:	bf04      	itt	eq
 80184ac:	3601      	addeq	r6, #1
 80184ae:	f04f 31ff 	moveq.w	r1, #4294967295
 80184b2:	7833      	ldrb	r3, [r6, #0]
 80184b4:	bf18      	it	ne
 80184b6:	2100      	movne	r1, #0
 80184b8:	2b2a      	cmp	r3, #42	; 0x2a
 80184ba:	d126      	bne.n	801850a <EwPrint+0xd6>
 80184bc:	9b05      	ldr	r3, [sp, #20]
 80184be:	681d      	ldr	r5, [r3, #0]
 80184c0:	2d2d      	cmp	r5, #45	; 0x2d
 80184c2:	f103 0204 	add.w	r2, r3, #4
 80184c6:	bfa8      	it	ge
 80184c8:	252d      	movge	r5, #45	; 0x2d
 80184ca:	3601      	adds	r6, #1
 80184cc:	9205      	str	r2, [sp, #20]
 80184ce:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80184d2:	7833      	ldrb	r3, [r6, #0]
 80184d4:	2b2e      	cmp	r3, #46	; 0x2e
 80184d6:	d164      	bne.n	80185a2 <EwPrint+0x16e>
 80184d8:	7873      	ldrb	r3, [r6, #1]
 80184da:	2b2a      	cmp	r3, #42	; 0x2a
 80184dc:	d02f      	beq.n	801853e <EwPrint+0x10a>
 80184de:	1c73      	adds	r3, r6, #1
 80184e0:	2200      	movs	r2, #0
 80184e2:	f04f 0c0a 	mov.w	ip, #10
 80184e6:	461e      	mov	r6, r3
 80184e8:	f813 9b01 	ldrb.w	r9, [r3], #1
 80184ec:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
 80184f0:	2809      	cmp	r0, #9
 80184f2:	d829      	bhi.n	8018548 <EwPrint+0x114>
 80184f4:	fb0c 9202 	mla	r2, ip, r2, r9
 80184f8:	3a30      	subs	r2, #48	; 0x30
 80184fa:	e7f4      	b.n	80184e6 <EwPrint+0xb2>
 80184fc:	7871      	ldrb	r1, [r6, #1]
 80184fe:	2925      	cmp	r1, #37	; 0x25
 8018500:	f040 81c6 	bne.w	8018890 <EwPrint+0x45c>
 8018504:	7019      	strb	r1, [r3, #0]
 8018506:	3602      	adds	r6, #2
 8018508:	e7a8      	b.n	801845c <EwPrint+0x28>
 801850a:	3b30      	subs	r3, #48	; 0x30
 801850c:	2b09      	cmp	r3, #9
 801850e:	d813      	bhi.n	8018538 <EwPrint+0x104>
 8018510:	4633      	mov	r3, r6
 8018512:	2500      	movs	r5, #0
 8018514:	f04f 0c0a 	mov.w	ip, #10
 8018518:	7818      	ldrb	r0, [r3, #0]
 801851a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 801851e:	2a09      	cmp	r2, #9
 8018520:	461e      	mov	r6, r3
 8018522:	f103 0301 	add.w	r3, r3, #1
 8018526:	d903      	bls.n	8018530 <EwPrint+0xfc>
 8018528:	2d2d      	cmp	r5, #45	; 0x2d
 801852a:	bfa8      	it	ge
 801852c:	252d      	movge	r5, #45	; 0x2d
 801852e:	e7d0      	b.n	80184d2 <EwPrint+0x9e>
 8018530:	fb0c 0505 	mla	r5, ip, r5, r0
 8018534:	3d30      	subs	r5, #48	; 0x30
 8018536:	e7ef      	b.n	8018518 <EwPrint+0xe4>
 8018538:	f04f 35ff 	mov.w	r5, #4294967295
 801853c:	e7c9      	b.n	80184d2 <EwPrint+0x9e>
 801853e:	9b05      	ldr	r3, [sp, #20]
 8018540:	1d1a      	adds	r2, r3, #4
 8018542:	9205      	str	r2, [sp, #20]
 8018544:	681a      	ldr	r2, [r3, #0]
 8018546:	3602      	adds	r6, #2
 8018548:	2a20      	cmp	r2, #32
 801854a:	bfa8      	it	ge
 801854c:	2220      	movge	r2, #32
 801854e:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
 8018552:	7833      	ldrb	r3, [r6, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 819f 	beq.w	8018898 <EwPrint+0x464>
 801855a:	2000      	movs	r0, #0
 801855c:	2201      	movs	r2, #1
 801855e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8018562:	2b6c      	cmp	r3, #108	; 0x6c
 8018564:	d020      	beq.n	80185a8 <EwPrint+0x174>
 8018566:	2b66      	cmp	r3, #102	; 0x66
 8018568:	f000 80b0 	beq.w	80186cc <EwPrint+0x298>
 801856c:	d83b      	bhi.n	80185e6 <EwPrint+0x1b2>
 801856e:	2b58      	cmp	r3, #88	; 0x58
 8018570:	d07f      	beq.n	8018672 <EwPrint+0x23e>
 8018572:	d81b      	bhi.n	80185ac <EwPrint+0x178>
 8018574:	2b43      	cmp	r3, #67	; 0x43
 8018576:	f000 80dc 	beq.w	8018732 <EwPrint+0x2fe>
 801857a:	2b53      	cmp	r3, #83	; 0x53
 801857c:	f000 813e 	beq.w	80187fc <EwPrint+0x3c8>
 8018580:	42bc      	cmp	r4, r7
 8018582:	f67f af5f 	bls.w	8018444 <EwPrint+0x10>
 8018586:	1be0      	subs	r0, r4, r7
 8018588:	42a8      	cmp	r0, r5
 801858a:	da04      	bge.n	8018596 <EwPrint+0x162>
 801858c:	4bbc      	ldr	r3, [pc, #752]	; (8018880 <EwPrint+0x44c>)
 801858e:	1b40      	subs	r0, r0, r5
 8018590:	4418      	add	r0, r3
 8018592:	f011 f8f9 	bl	8029788 <EwConsoleOutput>
 8018596:	2300      	movs	r3, #0
 8018598:	7023      	strb	r3, [r4, #0]
 801859a:	4638      	mov	r0, r7
 801859c:	f011 f8f4 	bl	8029788 <EwConsoleOutput>
 80185a0:	e750      	b.n	8018444 <EwPrint+0x10>
 80185a2:	f06f 0905 	mvn.w	r9, #5
 80185a6:	e7d4      	b.n	8018552 <EwPrint+0x11e>
 80185a8:	2001      	movs	r0, #1
 80185aa:	e7d8      	b.n	801855e <EwPrint+0x12a>
 80185ac:	2b63      	cmp	r3, #99	; 0x63
 80185ae:	f000 80b3 	beq.w	8018718 <EwPrint+0x2e4>
 80185b2:	2b64      	cmp	r3, #100	; 0x64
 80185b4:	d1e4      	bne.n	8018580 <EwPrint+0x14c>
 80185b6:	ea05 0201 	and.w	r2, r5, r1
 80185ba:	9905      	ldr	r1, [sp, #20]
 80185bc:	b370      	cbz	r0, 801861c <EwPrint+0x1e8>
 80185be:	1dcb      	adds	r3, r1, #7
 80185c0:	f023 0307 	bic.w	r3, r3, #7
 80185c4:	f103 0108 	add.w	r1, r3, #8
 80185c8:	2000      	movs	r0, #0
 80185ca:	9105      	str	r1, [sp, #20]
 80185cc:	210a      	movs	r1, #10
 80185ce:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80185d2:	f8cd a00c 	str.w	sl, [sp, #12]
 80185d6:	9200      	str	r2, [sp, #0]
 80185d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185dc:	4620      	mov	r0, r4
 80185de:	f003 fc6c 	bl	801beba <EwFormatInt64ToAnsiString>
 80185e2:	4404      	add	r4, r0
 80185e4:	e7cc      	b.n	8018580 <EwPrint+0x14c>
 80185e6:	3b70      	subs	r3, #112	; 0x70
 80185e8:	b2da      	uxtb	r2, r3
 80185ea:	2a08      	cmp	r2, #8
 80185ec:	d8c8      	bhi.n	8018580 <EwPrint+0x14c>
 80185ee:	2b08      	cmp	r3, #8
 80185f0:	d8c6      	bhi.n	8018580 <EwPrint+0x14c>
 80185f2:	a201      	add	r2, pc, #4	; (adr r2, 80185f8 <EwPrint+0x1c4>)
 80185f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185f8:	08018705 	.word	0x08018705
 80185fc:	08018581 	.word	0x08018581
 8018600:	08018581 	.word	0x08018581
 8018604:	0801876f 	.word	0x0801876f
 8018608:	08018581 	.word	0x08018581
 801860c:	08018631 	.word	0x08018631
 8018610:	08018581 	.word	0x08018581
 8018614:	08018581 	.word	0x08018581
 8018618:	080186a1 	.word	0x080186a1
 801861c:	e9cd 0a00 	strd	r0, sl, [sp]
 8018620:	1d0b      	adds	r3, r1, #4
 8018622:	9305      	str	r3, [sp, #20]
 8018624:	6809      	ldr	r1, [r1, #0]
 8018626:	230a      	movs	r3, #10
 8018628:	4620      	mov	r0, r4
 801862a:	f003 fb50 	bl	801bcce <EwFormatIntToAnsiString>
 801862e:	e7d8      	b.n	80185e2 <EwPrint+0x1ae>
 8018630:	ea05 0201 	and.w	r2, r5, r1
 8018634:	9905      	ldr	r1, [sp, #20]
 8018636:	b190      	cbz	r0, 801865e <EwPrint+0x22a>
 8018638:	1dcb      	adds	r3, r1, #7
 801863a:	f023 0307 	bic.w	r3, r3, #7
 801863e:	f103 0108 	add.w	r1, r3, #8
 8018642:	9105      	str	r1, [sp, #20]
 8018644:	2100      	movs	r1, #0
 8018646:	9102      	str	r1, [sp, #8]
 8018648:	f8cd a00c 	str.w	sl, [sp, #12]
 801864c:	210a      	movs	r1, #10
 801864e:	e9cd 2100 	strd	r2, r1, [sp]
 8018652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018656:	4620      	mov	r0, r4
 8018658:	f003 fba7 	bl	801bdaa <EwFormatUInt64ToAnsiString>
 801865c:	e7c1      	b.n	80185e2 <EwPrint+0x1ae>
 801865e:	e9cd 0a00 	strd	r0, sl, [sp]
 8018662:	1d0b      	adds	r3, r1, #4
 8018664:	9305      	str	r3, [sp, #20]
 8018666:	230a      	movs	r3, #10
 8018668:	6809      	ldr	r1, [r1, #0]
 801866a:	4620      	mov	r0, r4
 801866c:	f003 face 	bl	801bc0c <EwFormatUIntToAnsiString>
 8018670:	e7b7      	b.n	80185e2 <EwPrint+0x1ae>
 8018672:	ea05 0c01 	and.w	ip, r5, r1
 8018676:	9905      	ldr	r1, [sp, #20]
 8018678:	b158      	cbz	r0, 8018692 <EwPrint+0x25e>
 801867a:	1dcb      	adds	r3, r1, #7
 801867c:	f023 0307 	bic.w	r3, r3, #7
 8018680:	e9cd 2a02 	strd	r2, sl, [sp, #8]
 8018684:	f103 0108 	add.w	r1, r3, #8
 8018688:	2210      	movs	r2, #16
 801868a:	e9cd c200 	strd	ip, r2, [sp]
 801868e:	9105      	str	r1, [sp, #20]
 8018690:	e7df      	b.n	8018652 <EwPrint+0x21e>
 8018692:	1d0b      	adds	r3, r1, #4
 8018694:	e9cd 2a00 	strd	r2, sl, [sp]
 8018698:	9305      	str	r3, [sp, #20]
 801869a:	4662      	mov	r2, ip
 801869c:	2310      	movs	r3, #16
 801869e:	e7e3      	b.n	8018668 <EwPrint+0x234>
 80186a0:	ea05 0201 	and.w	r2, r5, r1
 80186a4:	9905      	ldr	r1, [sp, #20]
 80186a6:	b158      	cbz	r0, 80186c0 <EwPrint+0x28c>
 80186a8:	1dcb      	adds	r3, r1, #7
 80186aa:	f023 0307 	bic.w	r3, r3, #7
 80186ae:	f103 0108 	add.w	r1, r3, #8
 80186b2:	9105      	str	r1, [sp, #20]
 80186b4:	2100      	movs	r1, #0
 80186b6:	9102      	str	r1, [sp, #8]
 80186b8:	f8cd a00c 	str.w	sl, [sp, #12]
 80186bc:	2110      	movs	r1, #16
 80186be:	e7c6      	b.n	801864e <EwPrint+0x21a>
 80186c0:	1d0b      	adds	r3, r1, #4
 80186c2:	9305      	str	r3, [sp, #20]
 80186c4:	e9cd 0a00 	strd	r0, sl, [sp]
 80186c8:	2310      	movs	r3, #16
 80186ca:	e7cd      	b.n	8018668 <EwPrint+0x234>
 80186cc:	9b05      	ldr	r3, [sp, #20]
 80186ce:	3307      	adds	r3, #7
 80186d0:	f023 0307 	bic.w	r3, r3, #7
 80186d4:	f103 0208 	add.w	r2, r3, #8
 80186d8:	ea05 0801 	and.w	r8, r5, r1
 80186dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80186e0:	9205      	str	r2, [sp, #20]
 80186e2:	f004 ffd9 	bl	801d698 <__aeabi_d2f>
 80186e6:	4641      	mov	r1, r8
 80186e8:	ee00 0a10 	vmov	s0, r0
 80186ec:	4653      	mov	r3, sl
 80186ee:	464a      	mov	r2, r9
 80186f0:	4620      	mov	r0, r4
 80186f2:	f003 fc79 	bl	801bfe8 <EwFormatFloatToAnsiString>
 80186f6:	4680      	mov	r8, r0
 80186f8:	b910      	cbnz	r0, 8018700 <EwPrint+0x2cc>
 80186fa:	4862      	ldr	r0, [pc, #392]	; (8018884 <EwPrint+0x450>)
 80186fc:	f011 f844 	bl	8029788 <EwConsoleOutput>
 8018700:	4444      	add	r4, r8
 8018702:	e73d      	b.n	8018580 <EwPrint+0x14c>
 8018704:	9905      	ldr	r1, [sp, #20]
 8018706:	1d0b      	adds	r3, r1, #4
 8018708:	9305      	str	r3, [sp, #20]
 801870a:	2500      	movs	r5, #0
 801870c:	2301      	movs	r3, #1
 801870e:	e9cd 3500 	strd	r3, r5, [sp]
 8018712:	2208      	movs	r2, #8
 8018714:	2310      	movs	r3, #16
 8018716:	e7a7      	b.n	8018668 <EwPrint+0x234>
 8018718:	9b05      	ldr	r3, [sp, #20]
 801871a:	781d      	ldrb	r5, [r3, #0]
 801871c:	1d1a      	adds	r2, r3, #4
 801871e:	9205      	str	r2, [sp, #20]
 8018720:	b11d      	cbz	r5, 801872a <EwPrint+0x2f6>
 8018722:	f804 5b01 	strb.w	r5, [r4], #1
 8018726:	2500      	movs	r5, #0
 8018728:	e72a      	b.n	8018580 <EwPrint+0x14c>
 801872a:	4857      	ldr	r0, [pc, #348]	; (8018888 <EwPrint+0x454>)
 801872c:	f011 f82c 	bl	8029788 <EwConsoleOutput>
 8018730:	e726      	b.n	8018580 <EwPrint+0x14c>
 8018732:	9b05      	ldr	r3, [sp, #20]
 8018734:	1d19      	adds	r1, r3, #4
 8018736:	9105      	str	r1, [sp, #20]
 8018738:	6819      	ldr	r1, [r3, #0]
 801873a:	f1a1 0320 	sub.w	r3, r1, #32
 801873e:	b29b      	uxth	r3, r3
 8018740:	2b5f      	cmp	r3, #95	; 0x5f
 8018742:	d802      	bhi.n	801874a <EwPrint+0x316>
 8018744:	f804 1b01 	strb.w	r1, [r4], #1
 8018748:	e7ed      	b.n	8018726 <EwPrint+0x2f2>
 801874a:	46a0      	mov	r8, r4
 801874c:	235c      	movs	r3, #92	; 0x5c
 801874e:	f808 3b02 	strb.w	r3, [r8], #2
 8018752:	2500      	movs	r5, #0
 8018754:	2378      	movs	r3, #120	; 0x78
 8018756:	7063      	strb	r3, [r4, #1]
 8018758:	b289      	uxth	r1, r1
 801875a:	e9cd 2500 	strd	r2, r5, [sp]
 801875e:	2310      	movs	r3, #16
 8018760:	2204      	movs	r2, #4
 8018762:	4640      	mov	r0, r8
 8018764:	f003 fa52 	bl	801bc0c <EwFormatUIntToAnsiString>
 8018768:	eb08 0400 	add.w	r4, r8, r0
 801876c:	e708      	b.n	8018580 <EwPrint+0x14c>
 801876e:	9b05      	ldr	r3, [sp, #20]
 8018770:	2d00      	cmp	r5, #0
 8018772:	f103 0204 	add.w	r2, r3, #4
 8018776:	f8d3 8000 	ldr.w	r8, [r3]
 801877a:	9205      	str	r2, [sp, #20]
 801877c:	dd14      	ble.n	80187a8 <EwPrint+0x374>
 801877e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8018782:	d011      	beq.n	80187a8 <EwPrint+0x374>
 8018784:	4643      	mov	r3, r8
 8018786:	4618      	mov	r0, r3
 8018788:	b11b      	cbz	r3, 8018792 <EwPrint+0x35e>
 801878a:	7802      	ldrb	r2, [r0, #0]
 801878c:	3301      	adds	r3, #1
 801878e:	2a00      	cmp	r2, #0
 8018790:	d1f9      	bne.n	8018786 <EwPrint+0x352>
 8018792:	eba0 0008 	sub.w	r0, r0, r8
 8018796:	42a8      	cmp	r0, r5
 8018798:	da06      	bge.n	80187a8 <EwPrint+0x374>
 801879a:	f1c5 032f 	rsb	r3, r5, #47	; 0x2f
 801879e:	4418      	add	r0, r3
 80187a0:	4b3a      	ldr	r3, [pc, #232]	; (801888c <EwPrint+0x458>)
 80187a2:	4418      	add	r0, r3
 80187a4:	f010 fff0 	bl	8029788 <EwConsoleOutput>
 80187a8:	f1b9 0f00 	cmp.w	r9, #0
 80187ac:	dd0a      	ble.n	80187c4 <EwPrint+0x390>
 80187ae:	464a      	mov	r2, r9
 80187b0:	4641      	mov	r1, r8
 80187b2:	4638      	mov	r0, r7
 80187b4:	f011 f80c 	bl	80297d0 <EwCopy>
 80187b8:	ab16      	add	r3, sp, #88	; 0x58
 80187ba:	4499      	add	r9, r3
 80187bc:	2300      	movs	r3, #0
 80187be:	f809 3c40 	strb.w	r3, [r9, #-64]
 80187c2:	46b8      	mov	r8, r7
 80187c4:	4640      	mov	r0, r8
 80187c6:	f010 ffdf 	bl	8029788 <EwConsoleOutput>
 80187ca:	2d00      	cmp	r5, #0
 80187cc:	f77f aed8 	ble.w	8018580 <EwPrint+0x14c>
 80187d0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80187d4:	f47f aed4 	bne.w	8018580 <EwPrint+0x14c>
 80187d8:	4643      	mov	r3, r8
 80187da:	4618      	mov	r0, r3
 80187dc:	b11b      	cbz	r3, 80187e6 <EwPrint+0x3b2>
 80187de:	7802      	ldrb	r2, [r0, #0]
 80187e0:	3301      	adds	r3, #1
 80187e2:	2a00      	cmp	r2, #0
 80187e4:	d1f9      	bne.n	80187da <EwPrint+0x3a6>
 80187e6:	eba0 0008 	sub.w	r0, r0, r8
 80187ea:	42a8      	cmp	r0, r5
 80187ec:	f6bf aec8 	bge.w	8018580 <EwPrint+0x14c>
 80187f0:	4b26      	ldr	r3, [pc, #152]	; (801888c <EwPrint+0x458>)
 80187f2:	f1c5 082f 	rsb	r8, r5, #47	; 0x2f
 80187f6:	4440      	add	r0, r8
 80187f8:	4418      	add	r0, r3
 80187fa:	e797      	b.n	801872c <EwPrint+0x2f8>
 80187fc:	9b05      	ldr	r3, [sp, #20]
 80187fe:	1d1a      	adds	r2, r3, #4
 8018800:	f8d3 9000 	ldr.w	r9, [r3]
 8018804:	9205      	str	r2, [sp, #20]
 8018806:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
 801880a:	f1b9 0f00 	cmp.w	r9, #0
 801880e:	f43f aeb7 	beq.w	8018580 <EwPrint+0x14c>
 8018812:	f8b9 3000 	ldrh.w	r3, [r9]
 8018816:	2b00      	cmp	r3, #0
 8018818:	f43f aeb2 	beq.w	8018580 <EwPrint+0x14c>
 801881c:	46c8      	mov	r8, r9
 801881e:	f04f 0a78 	mov.w	sl, #120	; 0x78
 8018822:	e005      	b.n	8018830 <EwPrint+0x3fc>
 8018824:	f1a3 0220 	sub.w	r2, r3, #32
 8018828:	2a5f      	cmp	r2, #95	; 0x5f
 801882a:	d812      	bhi.n	8018852 <EwPrint+0x41e>
 801882c:	f804 3b01 	strb.w	r3, [r4], #1
 8018830:	46c1      	mov	r9, r8
 8018832:	f838 3b02 	ldrh.w	r3, [r8], #2
 8018836:	b11b      	cbz	r3, 8018840 <EwPrint+0x40c>
 8018838:	f10d 0251 	add.w	r2, sp, #81	; 0x51
 801883c:	4294      	cmp	r4, r2
 801883e:	d3f1      	bcc.n	8018824 <EwPrint+0x3f0>
 8018840:	42bc      	cmp	r4, r7
 8018842:	d9e2      	bls.n	801880a <EwPrint+0x3d6>
 8018844:	2300      	movs	r3, #0
 8018846:	7023      	strb	r3, [r4, #0]
 8018848:	4638      	mov	r0, r7
 801884a:	f010 ff9d 	bl	8029788 <EwConsoleOutput>
 801884e:	463c      	mov	r4, r7
 8018850:	e7db      	b.n	801880a <EwPrint+0x3d6>
 8018852:	46a1      	mov	r9, r4
 8018854:	2301      	movs	r3, #1
 8018856:	f809 bb02 	strb.w	fp, [r9], #2
 801885a:	2200      	movs	r2, #0
 801885c:	f884 a001 	strb.w	sl, [r4, #1]
 8018860:	f838 1c02 	ldrh.w	r1, [r8, #-2]
 8018864:	4648      	mov	r0, r9
 8018866:	e9cd 3200 	strd	r3, r2, [sp]
 801886a:	2310      	movs	r3, #16
 801886c:	2204      	movs	r2, #4
 801886e:	f003 f9cd 	bl	801bc0c <EwFormatUIntToAnsiString>
 8018872:	eb09 0400 	add.w	r4, r9, r0
 8018876:	e7db      	b.n	8018830 <EwPrint+0x3fc>
 8018878:	42bb      	cmp	r3, r7
 801887a:	f67f ade3 	bls.w	8018444 <EwPrint+0x10>
 801887e:	e5f7      	b.n	8018470 <EwPrint+0x3c>
 8018880:	08036b29 	.word	0x08036b29
 8018884:	08039b95 	.word	0x08039b95
 8018888:	08039b99 	.word	0x08039b99
 801888c:	08036afa 	.word	0x08036afa
 8018890:	42bb      	cmp	r3, r7
 8018892:	f67f adf6 	bls.w	8018482 <EwPrint+0x4e>
 8018896:	e5eb      	b.n	8018470 <EwPrint+0x3c>
 8018898:	b017      	add	sp, #92	; 0x5c
 801889a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889e:	b004      	add	sp, #16
 80188a0:	4770      	bx	lr

080188a2 <EwTrace>:
 80188a2:	b40f      	push	{r0, r1, r2, r3}
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	ed2d 8b02 	vpush	{d8}
 80188aa:	b084      	sub	sp, #16
 80188ac:	ab0a      	add	r3, sp, #40	; 0x28
 80188ae:	48b6      	ldr	r0, [pc, #728]	; (8018b88 <EwTrace+0x2e6>)
 80188b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80188b4:	4eb5      	ldr	r6, [pc, #724]	; (8018b8c <EwTrace+0x2ea>)
 80188b6:	eddf 8ab6 	vldr	s17, [pc, #728]	; 8018b90 <EwTrace+0x2ee>
 80188ba:	9303      	str	r3, [sp, #12]
 80188bc:	f7ff fdba 	bl	8018434 <EwPrint>
 80188c0:	2200      	movs	r2, #0
 80188c2:	462c      	mov	r4, r5
 80188c4:	4625      	mov	r5, r4
 80188c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80188ca:	b94b      	cbnz	r3, 80188e0 <EwTrace+0x3e>
 80188cc:	48b1      	ldr	r0, [pc, #708]	; (8018b94 <EwTrace+0x2f2>)
 80188ce:	f7ff fdb1 	bl	8018434 <EwPrint>
 80188d2:	b004      	add	sp, #16
 80188d4:	ecbd 8b02 	vpop	{d8}
 80188d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188dc:	b004      	add	sp, #16
 80188de:	4770      	bx	lr
 80188e0:	2b25      	cmp	r3, #37	; 0x25
 80188e2:	d1ef      	bne.n	80188c4 <EwTrace+0x22>
 80188e4:	b112      	cbz	r2, 80188ec <EwTrace+0x4a>
 80188e6:	4630      	mov	r0, r6
 80188e8:	f7ff fda4 	bl	8018434 <EwPrint>
 80188ec:	7823      	ldrb	r3, [r4, #0]
 80188ee:	2b75      	cmp	r3, #117	; 0x75
 80188f0:	f105 0502 	add.w	r5, r5, #2
 80188f4:	d80b      	bhi.n	801890e <EwTrace+0x6c>
 80188f6:	2b48      	cmp	r3, #72	; 0x48
 80188f8:	d80b      	bhi.n	8018912 <EwTrace+0x70>
 80188fa:	2b2a      	cmp	r3, #42	; 0x2a
 80188fc:	f000 8189 	beq.w	8018c12 <EwTrace+0x370>
 8018900:	d868      	bhi.n	80189d4 <EwTrace+0x132>
 8018902:	2b24      	cmp	r3, #36	; 0x24
 8018904:	f000 8190 	beq.w	8018c28 <EwTrace+0x386>
 8018908:	2b26      	cmp	r3, #38	; 0x26
 801890a:	f000 8197 	beq.w	8018c3c <EwTrace+0x39a>
 801890e:	2201      	movs	r2, #1
 8018910:	e7d7      	b.n	80188c2 <EwTrace+0x20>
 8018912:	3b49      	subs	r3, #73	; 0x49
 8018914:	2b2c      	cmp	r3, #44	; 0x2c
 8018916:	d8fa      	bhi.n	801890e <EwTrace+0x6c>
 8018918:	a201      	add	r2, pc, #4	; (adr r2, 8018920 <EwTrace+0x7e>)
 801891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801891e:	bf00      	nop
 8018920:	080189f9 	.word	0x080189f9
 8018924:	0801890f 	.word	0x0801890f
 8018928:	0801890f 	.word	0x0801890f
 801892c:	0801890f 	.word	0x0801890f
 8018930:	0801890f 	.word	0x0801890f
 8018934:	0801890f 	.word	0x0801890f
 8018938:	0801890f 	.word	0x0801890f
 801893c:	0801890f 	.word	0x0801890f
 8018940:	0801890f 	.word	0x0801890f
 8018944:	0801890f 	.word	0x0801890f
 8018948:	0801890f 	.word	0x0801890f
 801894c:	0801890f 	.word	0x0801890f
 8018950:	08018a13 	.word	0x08018a13
 8018954:	0801890f 	.word	0x0801890f
 8018958:	0801890f 	.word	0x0801890f
 801895c:	0801890f 	.word	0x0801890f
 8018960:	0801890f 	.word	0x0801890f
 8018964:	0801890f 	.word	0x0801890f
 8018968:	0801890f 	.word	0x0801890f
 801896c:	0801890f 	.word	0x0801890f
 8018970:	0801890f 	.word	0x0801890f
 8018974:	08018bf5 	.word	0x08018bf5
 8018978:	0801890f 	.word	0x0801890f
 801897c:	0801890f 	.word	0x0801890f
 8018980:	0801890f 	.word	0x0801890f
 8018984:	08018b0b 	.word	0x08018b0b
 8018988:	08018b21 	.word	0x08018b21
 801898c:	0801890f 	.word	0x0801890f
 8018990:	08018a29 	.word	0x08018a29
 8018994:	08018a41 	.word	0x08018a41
 8018998:	08018be9 	.word	0x08018be9
 801899c:	08018c67 	.word	0x08018c67
 80189a0:	080189dd 	.word	0x080189dd
 80189a4:	0801890f 	.word	0x0801890f
 80189a8:	0801890f 	.word	0x0801890f
 80189ac:	08018b7b 	.word	0x08018b7b
 80189b0:	0801890f 	.word	0x0801890f
 80189b4:	0801890f 	.word	0x0801890f
 80189b8:	08018b39 	.word	0x08018b39
 80189bc:	08018b51 	.word	0x08018b51
 80189c0:	0801890f 	.word	0x0801890f
 80189c4:	08018b65 	.word	0x08018b65
 80189c8:	08018c5b 	.word	0x08018c5b
 80189cc:	08018a35 	.word	0x08018a35
 80189d0:	080189ed 	.word	0x080189ed
 80189d4:	2b30      	cmp	r3, #48	; 0x30
 80189d6:	d19a      	bne.n	801890e <EwTrace+0x6c>
 80189d8:	486f      	ldr	r0, [pc, #444]	; (8018b98 <EwTrace+0x2f6>)
 80189da:	e09c      	b.n	8018b16 <EwTrace+0x274>
 80189dc:	9b03      	ldr	r3, [sp, #12]
 80189de:	486f      	ldr	r0, [pc, #444]	; (8018b9c <EwTrace+0x2fa>)
 80189e0:	6819      	ldr	r1, [r3, #0]
 80189e2:	1d1a      	adds	r2, r3, #4
 80189e4:	9203      	str	r2, [sp, #12]
 80189e6:	f7ff fd25 	bl	8018434 <EwPrint>
 80189ea:	e790      	b.n	801890e <EwTrace+0x6c>
 80189ec:	9b03      	ldr	r3, [sp, #12]
 80189ee:	486c      	ldr	r0, [pc, #432]	; (8018ba0 <EwTrace+0x2fe>)
 80189f0:	6819      	ldr	r1, [r3, #0]
 80189f2:	1d1a      	adds	r2, r3, #4
 80189f4:	9203      	str	r2, [sp, #12]
 80189f6:	e7f6      	b.n	80189e6 <EwTrace+0x144>
 80189f8:	9b03      	ldr	r3, [sp, #12]
 80189fa:	486a      	ldr	r0, [pc, #424]	; (8018ba4 <EwTrace+0x302>)
 80189fc:	3307      	adds	r3, #7
 80189fe:	f023 0307 	bic.w	r3, r3, #7
 8018a02:	f103 0208 	add.w	r2, r3, #8
 8018a06:	9203      	str	r2, [sp, #12]
 8018a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a0c:	f7ff fd12 	bl	8018434 <EwPrint>
 8018a10:	e77d      	b.n	801890e <EwTrace+0x6c>
 8018a12:	9b03      	ldr	r3, [sp, #12]
 8018a14:	4864      	ldr	r0, [pc, #400]	; (8018ba8 <EwTrace+0x306>)
 8018a16:	3307      	adds	r3, #7
 8018a18:	f023 0307 	bic.w	r3, r3, #7
 8018a1c:	f103 0208 	add.w	r2, r3, #8
 8018a20:	9203      	str	r2, [sp, #12]
 8018a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a26:	e7f1      	b.n	8018a0c <EwTrace+0x16a>
 8018a28:	9b03      	ldr	r3, [sp, #12]
 8018a2a:	4860      	ldr	r0, [pc, #384]	; (8018bac <EwTrace+0x30a>)
 8018a2c:	6819      	ldr	r1, [r3, #0]
 8018a2e:	1d1a      	adds	r2, r3, #4
 8018a30:	9203      	str	r2, [sp, #12]
 8018a32:	e7d8      	b.n	80189e6 <EwTrace+0x144>
 8018a34:	9b03      	ldr	r3, [sp, #12]
 8018a36:	485e      	ldr	r0, [pc, #376]	; (8018bb0 <EwTrace+0x30e>)
 8018a38:	6819      	ldr	r1, [r3, #0]
 8018a3a:	1d1a      	adds	r2, r3, #4
 8018a3c:	9203      	str	r2, [sp, #12]
 8018a3e:	e7d2      	b.n	80189e6 <EwTrace+0x144>
 8018a40:	9b03      	ldr	r3, [sp, #12]
 8018a42:	3307      	adds	r3, #7
 8018a44:	f023 0307 	bic.w	r3, r3, #7
 8018a48:	f103 0208 	add.w	r2, r3, #8
 8018a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018a50:	9203      	str	r2, [sp, #12]
 8018a52:	f004 fe21 	bl	801d698 <__aeabi_d2f>
 8018a56:	ee00 0a10 	vmov	s0, r0
 8018a5a:	ee08 0a10 	vmov	s16, r0
 8018a5e:	f002 f813 	bl	801aa88 <EwIsFloatInf>
 8018a62:	2800      	cmp	r0, #0
 8018a64:	d147      	bne.n	8018af6 <EwTrace+0x254>
 8018a66:	eeb0 0a48 	vmov.f32	s0, s16
 8018a6a:	f001 fff7 	bl	801aa5c <EwIsFloatNaN>
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	d141      	bne.n	8018af6 <EwTrace+0x254>
 8018a72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a7a:	d03c      	beq.n	8018af6 <EwTrace+0x254>
 8018a7c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8018bb4 <EwTrace+0x312>
 8018a80:	4604      	mov	r4, r0
 8018a82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018a86:	e002      	b.n	8018a8e <EwTrace+0x1ec>
 8018a88:	ee88 8a07 	vdiv.f32	s16, s16, s14
 8018a8c:	3401      	adds	r4, #1
 8018a8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a96:	daf7      	bge.n	8018a88 <EwTrace+0x1e6>
 8018a98:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa0:	d9f2      	bls.n	8018a88 <EwTrace+0x1e6>
 8018aa2:	eddf 7a45 	vldr	s15, [pc, #276]	; 8018bb8 <EwTrace+0x316>
 8018aa6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8018bbc <EwTrace+0x31a>
 8018aaa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8018aae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ab6:	dd04      	ble.n	8018ac2 <EwTrace+0x220>
 8018ab8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac0:	d415      	bmi.n	8018aee <EwTrace+0x24c>
 8018ac2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aca:	d504      	bpl.n	8018ad6 <EwTrace+0x234>
 8018acc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ad4:	dc0b      	bgt.n	8018aee <EwTrace+0x24c>
 8018ad6:	b174      	cbz	r4, 8018af6 <EwTrace+0x254>
 8018ad8:	ee18 0a10 	vmov	r0, s16
 8018adc:	f004 fd84 	bl	801d5e8 <__aeabi_f2d>
 8018ae0:	9400      	str	r4, [sp, #0]
 8018ae2:	4602      	mov	r2, r0
 8018ae4:	460b      	mov	r3, r1
 8018ae6:	4836      	ldr	r0, [pc, #216]	; (8018bc0 <EwTrace+0x31e>)
 8018ae8:	f7ff fca4 	bl	8018434 <EwPrint>
 8018aec:	e70f      	b.n	801890e <EwTrace+0x6c>
 8018aee:	ee28 8a26 	vmul.f32	s16, s16, s13
 8018af2:	3c01      	subs	r4, #1
 8018af4:	e7db      	b.n	8018aae <EwTrace+0x20c>
 8018af6:	ee18 0a10 	vmov	r0, s16
 8018afa:	f004 fd75 	bl	801d5e8 <__aeabi_f2d>
 8018afe:	4602      	mov	r2, r0
 8018b00:	460b      	mov	r3, r1
 8018b02:	4830      	ldr	r0, [pc, #192]	; (8018bc4 <EwTrace+0x322>)
 8018b04:	f7ff fc96 	bl	8018434 <EwPrint>
 8018b08:	e701      	b.n	801890e <EwTrace+0x6c>
 8018b0a:	9b03      	ldr	r3, [sp, #12]
 8018b0c:	1d1a      	adds	r2, r3, #4
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	9203      	str	r2, [sp, #12]
 8018b12:	b11b      	cbz	r3, 8018b1c <EwTrace+0x27a>
 8018b14:	482c      	ldr	r0, [pc, #176]	; (8018bc8 <EwTrace+0x326>)
 8018b16:	f7ff fc8d 	bl	8018434 <EwPrint>
 8018b1a:	e6f8      	b.n	801890e <EwTrace+0x6c>
 8018b1c:	482b      	ldr	r0, [pc, #172]	; (8018bcc <EwTrace+0x32a>)
 8018b1e:	e7fa      	b.n	8018b16 <EwTrace+0x274>
 8018b20:	9b03      	ldr	r3, [sp, #12]
 8018b22:	1d1a      	adds	r2, r3, #4
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	9203      	str	r2, [sp, #12]
 8018b28:	b299      	uxth	r1, r3
 8018b2a:	3b20      	subs	r3, #32
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	2b5f      	cmp	r3, #95	; 0x5f
 8018b30:	bf94      	ite	ls
 8018b32:	4827      	ldrls	r0, [pc, #156]	; (8018bd0 <EwTrace+0x32e>)
 8018b34:	4827      	ldrhi	r0, [pc, #156]	; (8018bd4 <EwTrace+0x332>)
 8018b36:	e756      	b.n	80189e6 <EwTrace+0x144>
 8018b38:	9803      	ldr	r0, [sp, #12]
 8018b3a:	1d03      	adds	r3, r0, #4
 8018b3c:	7842      	ldrb	r2, [r0, #1]
 8018b3e:	7801      	ldrb	r1, [r0, #0]
 8018b40:	9303      	str	r3, [sp, #12]
 8018b42:	7883      	ldrb	r3, [r0, #2]
 8018b44:	78c0      	ldrb	r0, [r0, #3]
 8018b46:	9000      	str	r0, [sp, #0]
 8018b48:	4823      	ldr	r0, [pc, #140]	; (8018bd8 <EwTrace+0x336>)
 8018b4a:	f7ff fc73 	bl	8018434 <EwPrint>
 8018b4e:	e6de      	b.n	801890e <EwTrace+0x6c>
 8018b50:	9b03      	ldr	r3, [sp, #12]
 8018b52:	4822      	ldr	r0, [pc, #136]	; (8018bdc <EwTrace+0x33a>)
 8018b54:	f103 0208 	add.w	r2, r3, #8
 8018b58:	9203      	str	r2, [sp, #12]
 8018b5a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8018b5e:	f7ff fc69 	bl	8018434 <EwPrint>
 8018b62:	e6d4      	b.n	801890e <EwTrace+0x6c>
 8018b64:	9903      	ldr	r1, [sp, #12]
 8018b66:	481e      	ldr	r0, [pc, #120]	; (8018be0 <EwTrace+0x33e>)
 8018b68:	f101 0310 	add.w	r3, r1, #16
 8018b6c:	9303      	str	r3, [sp, #12]
 8018b6e:	68cb      	ldr	r3, [r1, #12]
 8018b70:	9300      	str	r3, [sp, #0]
 8018b72:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8018b76:	6809      	ldr	r1, [r1, #0]
 8018b78:	e7e7      	b.n	8018b4a <EwTrace+0x2a8>
 8018b7a:	9b03      	ldr	r3, [sp, #12]
 8018b7c:	4819      	ldr	r0, [pc, #100]	; (8018be4 <EwTrace+0x342>)
 8018b7e:	6819      	ldr	r1, [r3, #0]
 8018b80:	1d1a      	adds	r2, r3, #4
 8018b82:	9203      	str	r2, [sp, #12]
 8018b84:	e72f      	b.n	80189e6 <EwTrace+0x144>
 8018b86:	bf00      	nop
 8018b88:	08039ba0 	.word	0x08039ba0
 8018b8c:	08039ba8 	.word	0x08039ba8
 8018b90:	d01502f9 	.word	0xd01502f9
 8018b94:	0803a269 	.word	0x0803a269
 8018b98:	08039bcf 	.word	0x08039bcf
 8018b9c:	08039bd7 	.word	0x08039bd7
 8018ba0:	08039bab 	.word	0x08039bab
 8018ba4:	08039bae 	.word	0x08039bae
 8018ba8:	08039bb3 	.word	0x08039bb3
 8018bac:	08039bb8 	.word	0x08039bb8
 8018bb0:	08039bc4 	.word	0x08039bc4
 8018bb4:	501502f9 	.word	0x501502f9
 8018bb8:	bdcccccd 	.word	0xbdcccccd
 8018bbc:	3dcccccd 	.word	0x3dcccccd
 8018bc0:	08039bd4 	.word	0x08039bd4
 8018bc4:	08039bda 	.word	0x08039bda
 8018bc8:	08039bdd 	.word	0x08039bdd
 8018bcc:	08039be2 	.word	0x08039be2
 8018bd0:	08039be8 	.word	0x08039be8
 8018bd4:	08039bed 	.word	0x08039bed
 8018bd8:	08039bf6 	.word	0x08039bf6
 8018bdc:	08039c08 	.word	0x08039c08
 8018be0:	08039c10 	.word	0x08039c10
 8018be4:	08039c1e 	.word	0x08039c1e
 8018be8:	9b03      	ldr	r3, [sp, #12]
 8018bea:	4822      	ldr	r0, [pc, #136]	; (8018c74 <EwTrace+0x3d2>)
 8018bec:	6819      	ldr	r1, [r3, #0]
 8018bee:	1d1a      	adds	r2, r3, #4
 8018bf0:	9203      	str	r2, [sp, #12]
 8018bf2:	e6f8      	b.n	80189e6 <EwTrace+0x144>
 8018bf4:	9b03      	ldr	r3, [sp, #12]
 8018bf6:	f103 020c 	add.w	r2, r3, #12
 8018bfa:	9203      	str	r2, [sp, #12]
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	2a00      	cmp	r2, #0
 8018c00:	f43f aeea 	beq.w	80189d8 <EwTrace+0x136>
 8018c04:	6898      	ldr	r0, [r3, #8]
 8018c06:	6811      	ldr	r1, [r2, #0]
 8018c08:	9000      	str	r0, [sp, #0]
 8018c0a:	685b      	ldr	r3, [r3, #4]
 8018c0c:	6849      	ldr	r1, [r1, #4]
 8018c0e:	481a      	ldr	r0, [pc, #104]	; (8018c78 <EwTrace+0x3d6>)
 8018c10:	e79b      	b.n	8018b4a <EwTrace+0x2a8>
 8018c12:	9b03      	ldr	r3, [sp, #12]
 8018c14:	1d1a      	adds	r2, r3, #4
 8018c16:	9203      	str	r2, [sp, #12]
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	2a00      	cmp	r2, #0
 8018c1c:	f43f aedc 	beq.w	80189d8 <EwTrace+0x136>
 8018c20:	6813      	ldr	r3, [r2, #0]
 8018c22:	4816      	ldr	r0, [pc, #88]	; (8018c7c <EwTrace+0x3da>)
 8018c24:	6859      	ldr	r1, [r3, #4]
 8018c26:	e79a      	b.n	8018b5e <EwTrace+0x2bc>
 8018c28:	9b03      	ldr	r3, [sp, #12]
 8018c2a:	1d1a      	adds	r2, r3, #4
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	9203      	str	r2, [sp, #12]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f43f aed1 	beq.w	80189d8 <EwTrace+0x136>
 8018c36:	6859      	ldr	r1, [r3, #4]
 8018c38:	4811      	ldr	r0, [pc, #68]	; (8018c80 <EwTrace+0x3de>)
 8018c3a:	e6d4      	b.n	80189e6 <EwTrace+0x144>
 8018c3c:	9b03      	ldr	r3, [sp, #12]
 8018c3e:	f103 0208 	add.w	r2, r3, #8
 8018c42:	9203      	str	r2, [sp, #12]
 8018c44:	681a      	ldr	r2, [r3, #0]
 8018c46:	2a00      	cmp	r2, #0
 8018c48:	f43f aec6 	beq.w	80189d8 <EwTrace+0x136>
 8018c4c:	6811      	ldr	r1, [r2, #0]
 8018c4e:	685b      	ldr	r3, [r3, #4]
 8018c50:	6849      	ldr	r1, [r1, #4]
 8018c52:	480c      	ldr	r0, [pc, #48]	; (8018c84 <EwTrace+0x3e2>)
 8018c54:	f7ff fbee 	bl	8018434 <EwPrint>
 8018c58:	e659      	b.n	801890e <EwTrace+0x6c>
 8018c5a:	9b03      	ldr	r3, [sp, #12]
 8018c5c:	480a      	ldr	r0, [pc, #40]	; (8018c88 <EwTrace+0x3e6>)
 8018c5e:	6819      	ldr	r1, [r3, #0]
 8018c60:	1d1a      	adds	r2, r3, #4
 8018c62:	9203      	str	r2, [sp, #12]
 8018c64:	e6bf      	b.n	80189e6 <EwTrace+0x144>
 8018c66:	9b03      	ldr	r3, [sp, #12]
 8018c68:	4808      	ldr	r0, [pc, #32]	; (8018c8c <EwTrace+0x3ea>)
 8018c6a:	6819      	ldr	r1, [r3, #0]
 8018c6c:	1d1a      	adds	r2, r3, #4
 8018c6e:	9203      	str	r2, [sp, #12]
 8018c70:	e6b9      	b.n	80189e6 <EwTrace+0x144>
 8018c72:	bf00      	nop
 8018c74:	08039c2e 	.word	0x08039c2e
 8018c78:	08039c3c 	.word	0x08039c3c
 8018c7c:	08039c68 	.word	0x08039c68
 8018c80:	0803a0c9 	.word	0x0803a0c9
 8018c84:	08039c71 	.word	0x08039c71
 8018c88:	08039c96 	.word	0x08039c96
 8018c8c:	08039c9b 	.word	0x08039c9b

08018c90 <EwThrow>:
 8018c90:	b508      	push	{r3, lr}
 8018c92:	4601      	mov	r1, r0
 8018c94:	4803      	ldr	r0, [pc, #12]	; (8018ca4 <EwThrow+0x14>)
 8018c96:	f7ff fbcd 	bl	8018434 <EwPrint>
 8018c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c9e:	f010 bd6b 	b.w	8029778 <EwPanic>
 8018ca2:	bf00      	nop
 8018ca4:	08039ca7 	.word	0x08039ca7

08018ca8 <EwError>:
 8018ca8:	4601      	mov	r1, r0
 8018caa:	4801      	ldr	r0, [pc, #4]	; (8018cb0 <EwError+0x8>)
 8018cac:	f7ff bbc2 	b.w	8018434 <EwPrint>
 8018cb0:	08039cab 	.word	0x08039cab

08018cb4 <EwErrorS>:
 8018cb4:	460a      	mov	r2, r1
 8018cb6:	4601      	mov	r1, r0
 8018cb8:	4801      	ldr	r0, [pc, #4]	; (8018cc0 <EwErrorS+0xc>)
 8018cba:	f7ff bbbb 	b.w	8018434 <EwPrint>
 8018cbe:	bf00      	nop
 8018cc0:	08039d00 	.word	0x08039d00

08018cc4 <EwErrorSD>:
 8018cc4:	4613      	mov	r3, r2
 8018cc6:	460a      	mov	r2, r1
 8018cc8:	4601      	mov	r1, r0
 8018cca:	4801      	ldr	r0, [pc, #4]	; (8018cd0 <EwErrorSD+0xc>)
 8018ccc:	f7ff bbb2 	b.w	8018434 <EwPrint>
 8018cd0:	08039d61 	.word	0x08039d61

08018cd4 <EwErrorPD>:
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	460a      	mov	r2, r1
 8018cd8:	4601      	mov	r1, r0
 8018cda:	4801      	ldr	r0, [pc, #4]	; (8018ce0 <EwErrorPD+0xc>)
 8018cdc:	f7ff bbaa 	b.w	8018434 <EwPrint>
 8018ce0:	08039dce 	.word	0x08039dce

08018ce4 <EwErrorDD>:
 8018ce4:	4613      	mov	r3, r2
 8018ce6:	460a      	mov	r2, r1
 8018ce8:	4601      	mov	r1, r0
 8018cea:	4801      	ldr	r0, [pc, #4]	; (8018cf0 <EwErrorDD+0xc>)
 8018cec:	f7ff bba2 	b.w	8018434 <EwPrint>
 8018cf0:	08039e39 	.word	0x08039e39

08018cf4 <EwErrorPDS>:
 8018cf4:	b507      	push	{r0, r1, r2, lr}
 8018cf6:	9300      	str	r3, [sp, #0]
 8018cf8:	4613      	mov	r3, r2
 8018cfa:	460a      	mov	r2, r1
 8018cfc:	4601      	mov	r1, r0
 8018cfe:	4803      	ldr	r0, [pc, #12]	; (8018d0c <EwErrorPDS+0x18>)
 8018d00:	f7ff fb98 	bl	8018434 <EwPrint>
 8018d04:	b003      	add	sp, #12
 8018d06:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d0a:	bf00      	nop
 8018d0c:	08039ea4 	.word	0x08039ea4

08018d10 <EwInitHeap>:
 8018d10:	2800      	cmp	r0, #0
 8018d12:	4b05      	ldr	r3, [pc, #20]	; (8018d28 <EwInitHeap+0x18>)
 8018d14:	bfd8      	it	le
 8018d16:	2080      	movle	r0, #128	; 0x80
 8018d18:	6018      	str	r0, [r3, #0]
 8018d1a:	4b04      	ldr	r3, [pc, #16]	; (8018d2c <EwInitHeap+0x1c>)
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	e9c3 2200 	strd	r2, r2, [r3]
 8018d22:	2001      	movs	r0, #1
 8018d24:	4770      	bx	lr
 8018d26:	bf00      	nop
 8018d28:	20000024 	.word	0x20000024
 8018d2c:	200002cc 	.word	0x200002cc

08018d30 <EwDoneHeap>:
 8018d30:	4b03      	ldr	r3, [pc, #12]	; (8018d40 <EwDoneHeap+0x10>)
 8018d32:	2280      	movs	r2, #128	; 0x80
 8018d34:	601a      	str	r2, [r3, #0]
 8018d36:	4b03      	ldr	r3, [pc, #12]	; (8018d44 <EwDoneHeap+0x14>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	e9c3 2200 	strd	r2, r2, [r3]
 8018d3e:	4770      	bx	lr
 8018d40:	20000024 	.word	0x20000024
 8018d44:	200002cc 	.word	0x200002cc

08018d48 <EwAddHeapMemoryPool>:
 8018d48:	f010 0303 	ands.w	r3, r0, #3
 8018d4c:	bf1c      	itt	ne
 8018d4e:	f1c3 0304 	rsbne	r3, r3, #4
 8018d52:	1ac9      	subne	r1, r1, r3
 8018d54:	f021 0103 	bic.w	r1, r1, #3
 8018d58:	b470      	push	{r4, r5, r6}
 8018d5a:	f1a1 0438 	sub.w	r4, r1, #56	; 0x38
 8018d5e:	bf18      	it	ne
 8018d60:	18c0      	addne	r0, r0, r3
 8018d62:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018d66:	da04      	bge.n	8018d72 <EwAddHeapMemoryPool+0x2a>
 8018d68:	bc70      	pop	{r4, r5, r6}
 8018d6a:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 8018d6e:	f7ff bf9b 	b.w	8018ca8 <EwError>
 8018d72:	f1a1 033c 	sub.w	r3, r1, #60	; 0x3c
 8018d76:	2200      	movs	r2, #0
 8018d78:	60c3      	str	r3, [r0, #12]
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8018d80:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8018d84:	6342      	str	r2, [r0, #52]	; 0x34
 8018d86:	6002      	str	r2, [r0, #0]
 8018d88:	4a0c      	ldr	r2, [pc, #48]	; (8018dbc <EwAddHeapMemoryPool+0x74>)
 8018d8a:	6084      	str	r4, [r0, #8]
 8018d8c:	6816      	ldr	r6, [r2, #0]
 8018d8e:	6855      	ldr	r5, [r2, #4]
 8018d90:	6045      	str	r5, [r0, #4]
 8018d92:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8018d96:	4401      	add	r1, r0
 8018d98:	e9c0 1307 	strd	r1, r3, [r0, #28]
 8018d9c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8018da0:	6183      	str	r3, [r0, #24]
 8018da2:	6050      	str	r0, [r2, #4]
 8018da4:	b906      	cbnz	r6, 8018da8 <EwAddHeapMemoryPool+0x60>
 8018da6:	6010      	str	r0, [r2, #0]
 8018da8:	b105      	cbz	r5, 8018dac <EwAddHeapMemoryPool+0x64>
 8018daa:	6028      	str	r0, [r5, #0]
 8018dac:	2200      	movs	r2, #0
 8018dae:	6384      	str	r4, [r0, #56]	; 0x38
 8018db0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8018db4:	bc70      	pop	{r4, r5, r6}
 8018db6:	f841 3c04 	str.w	r3, [r1, #-4]
 8018dba:	4770      	bx	lr
 8018dbc:	200002cc 	.word	0x200002cc

08018dc0 <EwGetHeapInfo>:
 8018dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc4:	469b      	mov	fp, r3
 8018dc6:	4b33      	ldr	r3, [pc, #204]	; (8018e94 <EwGetHeapInfo+0xd4>)
 8018dc8:	b085      	sub	sp, #20
 8018dca:	f04f 0c00 	mov.w	ip, #0
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	f8cd c004 	str.w	ip, [sp, #4]
 8018dd4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018dd8:	4682      	mov	sl, r0
 8018dda:	46e0      	mov	r8, ip
 8018ddc:	46e1      	mov	r9, ip
 8018dde:	46e6      	mov	lr, ip
 8018de0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018de4:	4660      	mov	r0, ip
 8018de6:	4664      	mov	r4, ip
 8018de8:	4665      	mov	r5, ip
 8018dea:	4666      	mov	r6, ip
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d12f      	bne.n	8018e50 <EwGetHeapInfo+0x90>
 8018df0:	4572      	cmp	r2, lr
 8018df2:	bfc8      	it	gt
 8018df4:	2200      	movgt	r2, #0
 8018df6:	f1ba 0f00 	cmp.w	sl, #0
 8018dfa:	d001      	beq.n	8018e00 <EwGetHeapInfo+0x40>
 8018dfc:	f8ca 6000 	str.w	r6, [sl]
 8018e00:	9b02      	ldr	r3, [sp, #8]
 8018e02:	b103      	cbz	r3, 8018e06 <EwGetHeapInfo+0x46>
 8018e04:	601d      	str	r5, [r3, #0]
 8018e06:	9b03      	ldr	r3, [sp, #12]
 8018e08:	b103      	cbz	r3, 8018e0c <EwGetHeapInfo+0x4c>
 8018e0a:	601c      	str	r4, [r3, #0]
 8018e0c:	f1bb 0f00 	cmp.w	fp, #0
 8018e10:	d001      	beq.n	8018e16 <EwGetHeapInfo+0x56>
 8018e12:	f8cb 0000 	str.w	r0, [fp]
 8018e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e18:	b10b      	cbz	r3, 8018e1e <EwGetHeapInfo+0x5e>
 8018e1a:	9901      	ldr	r1, [sp, #4]
 8018e1c:	6019      	str	r1, [r3, #0]
 8018e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e20:	b10b      	cbz	r3, 8018e26 <EwGetHeapInfo+0x66>
 8018e22:	3a04      	subs	r2, #4
 8018e24:	601a      	str	r2, [r3, #0]
 8018e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018e28:	b11b      	cbz	r3, 8018e32 <EwGetHeapInfo+0x72>
 8018e2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e2c:	f1ae 0304 	sub.w	r3, lr, #4
 8018e30:	6013      	str	r3, [r2, #0]
 8018e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018e34:	b10b      	cbz	r3, 8018e3a <EwGetHeapInfo+0x7a>
 8018e36:	f8c3 9000 	str.w	r9, [r3]
 8018e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e3c:	b10b      	cbz	r3, 8018e42 <EwGetHeapInfo+0x82>
 8018e3e:	f8c3 8000 	str.w	r8, [r3]
 8018e42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018e44:	b10b      	cbz	r3, 8018e4a <EwGetHeapInfo+0x8a>
 8018e46:	f8c3 c000 	str.w	ip, [r3]
 8018e4a:	b005      	add	sp, #20
 8018e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e50:	689f      	ldr	r7, [r3, #8]
 8018e52:	9901      	ldr	r1, [sp, #4]
 8018e54:	443d      	add	r5, r7
 8018e56:	68df      	ldr	r7, [r3, #12]
 8018e58:	443c      	add	r4, r7
 8018e5a:	691f      	ldr	r7, [r3, #16]
 8018e5c:	4439      	add	r1, r7
 8018e5e:	695f      	ldr	r7, [r3, #20]
 8018e60:	9101      	str	r1, [sp, #4]
 8018e62:	4438      	add	r0, r7
 8018e64:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8018e66:	44b9      	add	r9, r7
 8018e68:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8018e6a:	44b8      	add	r8, r7
 8018e6c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8018e6e:	44bc      	add	ip, r7
 8018e70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018e72:	3601      	adds	r6, #1
 8018e74:	b90f      	cbnz	r7, 8018e7a <EwGetHeapInfo+0xba>
 8018e76:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018e78:	b10f      	cbz	r7, 8018e7e <EwGetHeapInfo+0xbe>
 8018e7a:	6a1f      	ldr	r7, [r3, #32]
 8018e7c:	b90f      	cbnz	r7, 8018e82 <EwGetHeapInfo+0xc2>
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	e7b4      	b.n	8018dec <EwGetHeapInfo+0x2c>
 8018e82:	6839      	ldr	r1, [r7, #0]
 8018e84:	687f      	ldr	r7, [r7, #4]
 8018e86:	428a      	cmp	r2, r1
 8018e88:	bfa8      	it	ge
 8018e8a:	460a      	movge	r2, r1
 8018e8c:	458e      	cmp	lr, r1
 8018e8e:	bfb8      	it	lt
 8018e90:	468e      	movlt	lr, r1
 8018e92:	e7f3      	b.n	8018e7c <EwGetHeapInfo+0xbc>
 8018e94:	200002cc 	.word	0x200002cc

08018e98 <EwDumpHeap>:
 8018e98:	4b36      	ldr	r3, [pc, #216]	; (8018f74 <EwDumpHeap+0xdc>)
 8018e9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9e:	681c      	ldr	r4, [r3, #0]
 8018ea0:	4b35      	ldr	r3, [pc, #212]	; (8018f78 <EwDumpHeap+0xe0>)
 8018ea2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8018fbc <EwDumpHeap+0x124>
 8018ea6:	6819      	ldr	r1, [r3, #0]
 8018ea8:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8018fc0 <EwDumpHeap+0x128>
 8018eac:	4607      	mov	r7, r0
 8018eae:	4833      	ldr	r0, [pc, #204]	; (8018f7c <EwDumpHeap+0xe4>)
 8018eb0:	f7ff fac0 	bl	8018434 <EwPrint>
 8018eb4:	2600      	movs	r6, #0
 8018eb6:	b92c      	cbnz	r4, 8018ec4 <EwDumpHeap+0x2c>
 8018eb8:	4831      	ldr	r0, [pc, #196]	; (8018f80 <EwDumpHeap+0xe8>)
 8018eba:	b003      	add	sp, #12
 8018ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec0:	f7ff bab8 	b.w	8018434 <EwPrint>
 8018ec4:	4631      	mov	r1, r6
 8018ec6:	4640      	mov	r0, r8
 8018ec8:	69a5      	ldr	r5, [r4, #24]
 8018eca:	f7ff fab3 	bl	8018434 <EwPrint>
 8018ece:	68a1      	ldr	r1, [r4, #8]
 8018ed0:	482c      	ldr	r0, [pc, #176]	; (8018f84 <EwDumpHeap+0xec>)
 8018ed2:	f7ff faaf 	bl	8018434 <EwPrint>
 8018ed6:	68e1      	ldr	r1, [r4, #12]
 8018ed8:	482b      	ldr	r0, [pc, #172]	; (8018f88 <EwDumpHeap+0xf0>)
 8018eda:	f7ff faab 	bl	8018434 <EwPrint>
 8018ede:	6921      	ldr	r1, [r4, #16]
 8018ee0:	482a      	ldr	r0, [pc, #168]	; (8018f8c <EwDumpHeap+0xf4>)
 8018ee2:	f7ff faa7 	bl	8018434 <EwPrint>
 8018ee6:	6961      	ldr	r1, [r4, #20]
 8018ee8:	4829      	ldr	r0, [pc, #164]	; (8018f90 <EwDumpHeap+0xf8>)
 8018eea:	f7ff faa3 	bl	8018434 <EwPrint>
 8018eee:	69a1      	ldr	r1, [r4, #24]
 8018ef0:	4828      	ldr	r0, [pc, #160]	; (8018f94 <EwDumpHeap+0xfc>)
 8018ef2:	f7ff fa9f 	bl	8018434 <EwPrint>
 8018ef6:	69e1      	ldr	r1, [r4, #28]
 8018ef8:	4827      	ldr	r0, [pc, #156]	; (8018f98 <EwDumpHeap+0x100>)
 8018efa:	f7ff fa9b 	bl	8018434 <EwPrint>
 8018efe:	6a21      	ldr	r1, [r4, #32]
 8018f00:	4826      	ldr	r0, [pc, #152]	; (8018f9c <EwDumpHeap+0x104>)
 8018f02:	f7ff fa97 	bl	8018434 <EwPrint>
 8018f06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018f08:	4825      	ldr	r0, [pc, #148]	; (8018fa0 <EwDumpHeap+0x108>)
 8018f0a:	f7ff fa93 	bl	8018434 <EwPrint>
 8018f0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018f10:	4824      	ldr	r0, [pc, #144]	; (8018fa4 <EwDumpHeap+0x10c>)
 8018f12:	f7ff fa8f 	bl	8018434 <EwPrint>
 8018f16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018f18:	4823      	ldr	r0, [pc, #140]	; (8018fa8 <EwDumpHeap+0x110>)
 8018f1a:	f7ff fa8b 	bl	8018434 <EwPrint>
 8018f1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018f20:	4822      	ldr	r0, [pc, #136]	; (8018fac <EwDumpHeap+0x114>)
 8018f22:	f7ff fa87 	bl	8018434 <EwPrint>
 8018f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018f28:	4821      	ldr	r0, [pc, #132]	; (8018fb0 <EwDumpHeap+0x118>)
 8018f2a:	f7ff fa83 	bl	8018434 <EwPrint>
 8018f2e:	b137      	cbz	r7, 8018f3e <EwDumpHeap+0xa6>
 8018f30:	f8df a090 	ldr.w	sl, [pc, #144]	; 8018fc4 <EwDumpHeap+0x12c>
 8018f34:	f8df b090 	ldr.w	fp, [pc, #144]	; 8018fc8 <EwDumpHeap+0x130>
 8018f38:	69e3      	ldr	r3, [r4, #28]
 8018f3a:	42ab      	cmp	r3, r5
 8018f3c:	d802      	bhi.n	8018f44 <EwDumpHeap+0xac>
 8018f3e:	6824      	ldr	r4, [r4, #0]
 8018f40:	3601      	adds	r6, #1
 8018f42:	e7b8      	b.n	8018eb6 <EwDumpHeap+0x1e>
 8018f44:	682b      	ldr	r3, [r5, #0]
 8018f46:	491b      	ldr	r1, [pc, #108]	; (8018fb4 <EwDumpHeap+0x11c>)
 8018f48:	481b      	ldr	r0, [pc, #108]	; (8018fb8 <EwDumpHeap+0x120>)
 8018f4a:	f013 0f01 	tst.w	r3, #1
 8018f4e:	bf14      	ite	ne
 8018f50:	464a      	movne	r2, r9
 8018f52:	4652      	moveq	r2, sl
 8018f54:	f013 0f02 	tst.w	r3, #2
 8018f58:	bf18      	it	ne
 8018f5a:	4659      	movne	r1, fp
 8018f5c:	9100      	str	r1, [sp, #0]
 8018f5e:	f023 0303 	bic.w	r3, r3, #3
 8018f62:	4629      	mov	r1, r5
 8018f64:	f7ff fa66 	bl	8018434 <EwPrint>
 8018f68:	682b      	ldr	r3, [r5, #0]
 8018f6a:	f023 0303 	bic.w	r3, r3, #3
 8018f6e:	441d      	add	r5, r3
 8018f70:	e7e2      	b.n	8018f38 <EwDumpHeap+0xa0>
 8018f72:	bf00      	nop
 8018f74:	200002cc 	.word	0x200002cc
 8018f78:	20000024 	.word	0x20000024
 8018f7c:	08039f32 	.word	0x08039f32
 8018f80:	0803a0cc 	.word	0x0803a0cc
 8018f84:	08039f7f 	.word	0x08039f7f
 8018f88:	08039f99 	.word	0x08039f99
 8018f8c:	08039fb3 	.word	0x08039fb3
 8018f90:	08039fcd 	.word	0x08039fcd
 8018f94:	08039fe7 	.word	0x08039fe7
 8018f98:	0803a001 	.word	0x0803a001
 8018f9c:	0803a01b 	.word	0x0803a01b
 8018fa0:	0803a035 	.word	0x0803a035
 8018fa4:	0803a04f 	.word	0x0803a04f
 8018fa8:	0803a069 	.word	0x0803a069
 8018fac:	0803a083 	.word	0x0803a083
 8018fb0:	0803a09d 	.word	0x0803a09d
 8018fb4:	0803a26a 	.word	0x0803a26a
 8018fb8:	0803a0b7 	.word	0x0803a0b7
 8018fbc:	08039f71 	.word	0x08039f71
 8018fc0:	08039f1c 	.word	0x08039f1c
 8018fc4:	08039f21 	.word	0x08039f21
 8018fc8:	08039f26 	.word	0x08039f26

08018fcc <EwVerifyHeap>:
 8018fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd0:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80191c8 <EwVerifyHeap+0x1fc>
 8018fd4:	f8d8 5000 	ldr.w	r5, [r8]
 8018fd8:	b085      	sub	sp, #20
 8018fda:	f04f 0901 	mov.w	r9, #1
 8018fde:	b91d      	cbnz	r5, 8018fe8 <EwVerifyHeap+0x1c>
 8018fe0:	4648      	mov	r0, r9
 8018fe2:	b005      	add	sp, #20
 8018fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe8:	6a2b      	ldr	r3, [r5, #32]
 8018fea:	9302      	str	r3, [sp, #8]
 8018fec:	686b      	ldr	r3, [r5, #4]
 8018fee:	69ae      	ldr	r6, [r5, #24]
 8018ff0:	69ea      	ldr	r2, [r5, #28]
 8018ff2:	b91b      	cbnz	r3, 8018ffc <EwVerifyHeap+0x30>
 8018ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8018ff8:	42ab      	cmp	r3, r5
 8018ffa:	d135      	bne.n	8019068 <EwVerifyHeap+0x9c>
 8018ffc:	682b      	ldr	r3, [r5, #0]
 8018ffe:	bb73      	cbnz	r3, 801905e <EwVerifyHeap+0x92>
 8019000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019004:	42ab      	cmp	r3, r5
 8019006:	d131      	bne.n	801906c <EwVerifyHeap+0xa0>
 8019008:	68ac      	ldr	r4, [r5, #8]
 801900a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801900e:	dd2f      	ble.n	8019070 <EwVerifyHeap+0xa4>
 8019010:	07a3      	lsls	r3, r4, #30
 8019012:	d12d      	bne.n	8019070 <EwVerifyHeap+0xa4>
 8019014:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8019018:	429e      	cmp	r6, r3
 801901a:	d12b      	bne.n	8019074 <EwVerifyHeap+0xa8>
 801901c:	4434      	add	r4, r6
 801901e:	42a2      	cmp	r2, r4
 8019020:	bf14      	ite	ne
 8019022:	2406      	movne	r4, #6
 8019024:	2400      	moveq	r4, #0
 8019026:	f1a2 030c 	sub.w	r3, r2, #12
 801902a:	2100      	movs	r1, #0
 801902c:	9303      	str	r3, [sp, #12]
 801902e:	9b02      	ldr	r3, [sp, #8]
 8019030:	9300      	str	r3, [sp, #0]
 8019032:	9101      	str	r1, [sp, #4]
 8019034:	4633      	mov	r3, r6
 8019036:	468a      	mov	sl, r1
 8019038:	468b      	mov	fp, r1
 801903a:	429a      	cmp	r2, r3
 801903c:	f000 80aa 	beq.w	8019194 <EwVerifyHeap+0x1c8>
 8019040:	b1d4      	cbz	r4, 8019078 <EwVerifyHeap+0xac>
 8019042:	4622      	mov	r2, r4
 8019044:	4629      	mov	r1, r5
 8019046:	f240 104f 	movw	r0, #335	; 0x14f
 801904a:	f7ff fe43 	bl	8018cd4 <EwErrorPD>
 801904e:	682d      	ldr	r5, [r5, #0]
 8019050:	2c00      	cmp	r4, #0
 8019052:	bf14      	ite	ne
 8019054:	f04f 0900 	movne.w	r9, #0
 8019058:	f009 0901 	andeq.w	r9, r9, #1
 801905c:	e7bf      	b.n	8018fde <EwVerifyHeap+0x12>
 801905e:	685b      	ldr	r3, [r3, #4]
 8019060:	42ab      	cmp	r3, r5
 8019062:	d0d1      	beq.n	8019008 <EwVerifyHeap+0x3c>
 8019064:	2403      	movs	r4, #3
 8019066:	e7de      	b.n	8019026 <EwVerifyHeap+0x5a>
 8019068:	2401      	movs	r4, #1
 801906a:	e7dc      	b.n	8019026 <EwVerifyHeap+0x5a>
 801906c:	2402      	movs	r4, #2
 801906e:	e7da      	b.n	8019026 <EwVerifyHeap+0x5a>
 8019070:	2404      	movs	r4, #4
 8019072:	e7d8      	b.n	8019026 <EwVerifyHeap+0x5a>
 8019074:	2405      	movs	r4, #5
 8019076:	e7d6      	b.n	8019026 <EwVerifyHeap+0x5a>
 8019078:	6818      	ldr	r0, [r3, #0]
 801907a:	42b3      	cmp	r3, r6
 801907c:	f020 0e03 	bic.w	lr, r0, #3
 8019080:	eb03 0c0e 	add.w	ip, r3, lr
 8019084:	d36a      	bcc.n	801915c <EwVerifyHeap+0x190>
 8019086:	429a      	cmp	r2, r3
 8019088:	d968      	bls.n	801915c <EwVerifyHeap+0x190>
 801908a:	079f      	lsls	r7, r3, #30
 801908c:	d166      	bne.n	801915c <EwVerifyHeap+0x190>
 801908e:	f1be 0f00 	cmp.w	lr, #0
 8019092:	dd65      	ble.n	8019160 <EwVerifyHeap+0x194>
 8019094:	4562      	cmp	r2, ip
 8019096:	d365      	bcc.n	8019164 <EwVerifyHeap+0x198>
 8019098:	f000 0703 	and.w	r7, r0, #3
 801909c:	2f02      	cmp	r7, #2
 801909e:	d063      	beq.n	8019168 <EwVerifyHeap+0x19c>
 80190a0:	0787      	lsls	r7, r0, #30
 80190a2:	d506      	bpl.n	80190b2 <EwVerifyHeap+0xe6>
 80190a4:	f1bb 0f00 	cmp.w	fp, #0
 80190a8:	d060      	beq.n	801916c <EwVerifyHeap+0x1a0>
 80190aa:	f8db 7000 	ldr.w	r7, [fp]
 80190ae:	07ff      	lsls	r7, r7, #31
 80190b0:	d45c      	bmi.n	801916c <EwVerifyHeap+0x1a0>
 80190b2:	f000 0703 	and.w	r7, r0, #3
 80190b6:	2f01      	cmp	r7, #1
 80190b8:	d106      	bne.n	80190c8 <EwVerifyHeap+0xfc>
 80190ba:	f1bb 0f00 	cmp.w	fp, #0
 80190be:	d003      	beq.n	80190c8 <EwVerifyHeap+0xfc>
 80190c0:	f8db 7000 	ldr.w	r7, [fp]
 80190c4:	07ff      	lsls	r7, r7, #31
 80190c6:	d553      	bpl.n	8019170 <EwVerifyHeap+0x1a4>
 80190c8:	07c7      	lsls	r7, r0, #31
 80190ca:	d461      	bmi.n	8019190 <EwVerifyHeap+0x1c4>
 80190cc:	9c00      	ldr	r4, [sp, #0]
 80190ce:	42a3      	cmp	r3, r4
 80190d0:	d150      	bne.n	8019174 <EwVerifyHeap+0x1a8>
 80190d2:	f103 040c 	add.w	r4, r3, #12
 80190d6:	4294      	cmp	r4, r2
 80190d8:	d24e      	bcs.n	8019178 <EwVerifyHeap+0x1ac>
 80190da:	685f      	ldr	r7, [r3, #4]
 80190dc:	b177      	cbz	r7, 80190fc <EwVerifyHeap+0x130>
 80190de:	42bc      	cmp	r4, r7
 80190e0:	d24c      	bcs.n	801917c <EwVerifyHeap+0x1b0>
 80190e2:	9c03      	ldr	r4, [sp, #12]
 80190e4:	42a7      	cmp	r7, r4
 80190e6:	d249      	bcs.n	801917c <EwVerifyHeap+0x1b0>
 80190e8:	07bc      	lsls	r4, r7, #30
 80190ea:	d147      	bne.n	801917c <EwVerifyHeap+0x1b0>
 80190ec:	683c      	ldr	r4, [r7, #0]
 80190ee:	07e4      	lsls	r4, r4, #31
 80190f0:	d448      	bmi.n	8019184 <EwVerifyHeap+0x1b8>
 80190f2:	68bc      	ldr	r4, [r7, #8]
 80190f4:	429c      	cmp	r4, r3
 80190f6:	d004      	beq.n	8019102 <EwVerifyHeap+0x136>
 80190f8:	2412      	movs	r4, #18
 80190fa:	e01e      	b.n	801913a <EwVerifyHeap+0x16e>
 80190fc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80190fe:	429c      	cmp	r4, r3
 8019100:	d13e      	bne.n	8019180 <EwVerifyHeap+0x1b4>
 8019102:	9f02      	ldr	r7, [sp, #8]
 8019104:	689c      	ldr	r4, [r3, #8]
 8019106:	eba3 0b07 	sub.w	fp, r3, r7
 801910a:	f1db 0700 	rsbs	r7, fp, #0
 801910e:	fab4 f484 	clz	r4, r4
 8019112:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019116:	eb47 070b 	adc.w	r7, r7, fp
 801911a:	42bc      	cmp	r4, r7
 801911c:	d134      	bne.n	8019188 <EwVerifyHeap+0x1bc>
 801911e:	4562      	cmp	r2, ip
 8019120:	d003      	beq.n	801912a <EwVerifyHeap+0x15e>
 8019122:	f8dc 4000 	ldr.w	r4, [ip]
 8019126:	07e4      	lsls	r4, r4, #31
 8019128:	d530      	bpl.n	801918c <EwVerifyHeap+0x1c0>
 801912a:	eb03 040e 	add.w	r4, r3, lr
 801912e:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8019132:	429c      	cmp	r4, r3
 8019134:	bf14      	ite	ne
 8019136:	2415      	movne	r4, #21
 8019138:	2400      	moveq	r4, #0
 801913a:	07c0      	lsls	r0, r0, #31
 801913c:	d428      	bmi.n	8019190 <EwVerifyHeap+0x1c4>
 801913e:	9801      	ldr	r0, [sp, #4]
 8019140:	f1aa 0a04 	sub.w	sl, sl, #4
 8019144:	3001      	adds	r0, #1
 8019146:	44f2      	add	sl, lr
 8019148:	9001      	str	r0, [sp, #4]
 801914a:	b924      	cbnz	r4, 8019156 <EwVerifyHeap+0x18a>
 801914c:	9800      	ldr	r0, [sp, #0]
 801914e:	4283      	cmp	r3, r0
 8019150:	bf04      	itt	eq
 8019152:	6858      	ldreq	r0, [r3, #4]
 8019154:	9000      	streq	r0, [sp, #0]
 8019156:	469b      	mov	fp, r3
 8019158:	4663      	mov	r3, ip
 801915a:	e76e      	b.n	801903a <EwVerifyHeap+0x6e>
 801915c:	2407      	movs	r4, #7
 801915e:	e7ec      	b.n	801913a <EwVerifyHeap+0x16e>
 8019160:	2408      	movs	r4, #8
 8019162:	e7ea      	b.n	801913a <EwVerifyHeap+0x16e>
 8019164:	2409      	movs	r4, #9
 8019166:	e7e8      	b.n	801913a <EwVerifyHeap+0x16e>
 8019168:	240a      	movs	r4, #10
 801916a:	e7e6      	b.n	801913a <EwVerifyHeap+0x16e>
 801916c:	240b      	movs	r4, #11
 801916e:	e7e4      	b.n	801913a <EwVerifyHeap+0x16e>
 8019170:	240c      	movs	r4, #12
 8019172:	e7e2      	b.n	801913a <EwVerifyHeap+0x16e>
 8019174:	240d      	movs	r4, #13
 8019176:	e7e0      	b.n	801913a <EwVerifyHeap+0x16e>
 8019178:	240e      	movs	r4, #14
 801917a:	e7de      	b.n	801913a <EwVerifyHeap+0x16e>
 801917c:	240f      	movs	r4, #15
 801917e:	e7dc      	b.n	801913a <EwVerifyHeap+0x16e>
 8019180:	2410      	movs	r4, #16
 8019182:	e7da      	b.n	801913a <EwVerifyHeap+0x16e>
 8019184:	2411      	movs	r4, #17
 8019186:	e7d8      	b.n	801913a <EwVerifyHeap+0x16e>
 8019188:	2413      	movs	r4, #19
 801918a:	e7d6      	b.n	801913a <EwVerifyHeap+0x16e>
 801918c:	2414      	movs	r4, #20
 801918e:	e7d4      	b.n	801913a <EwVerifyHeap+0x16e>
 8019190:	3101      	adds	r1, #1
 8019192:	e7da      	b.n	801914a <EwVerifyHeap+0x17e>
 8019194:	2c00      	cmp	r4, #0
 8019196:	f47f af54 	bne.w	8019042 <EwVerifyHeap+0x76>
 801919a:	692b      	ldr	r3, [r5, #16]
 801919c:	9801      	ldr	r0, [sp, #4]
 801919e:	4283      	cmp	r3, r0
 80191a0:	d10d      	bne.n	80191be <EwVerifyHeap+0x1f2>
 80191a2:	696b      	ldr	r3, [r5, #20]
 80191a4:	428b      	cmp	r3, r1
 80191a6:	d10a      	bne.n	80191be <EwVerifyHeap+0x1f2>
 80191a8:	68eb      	ldr	r3, [r5, #12]
 80191aa:	4553      	cmp	r3, sl
 80191ac:	d109      	bne.n	80191c2 <EwVerifyHeap+0x1f6>
 80191ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80191b0:	42b3      	cmp	r3, r6
 80191b2:	d302      	bcc.n	80191ba <EwVerifyHeap+0x1ee>
 80191b4:	4293      	cmp	r3, r2
 80191b6:	f4ff af4a 	bcc.w	801904e <EwVerifyHeap+0x82>
 80191ba:	2418      	movs	r4, #24
 80191bc:	e741      	b.n	8019042 <EwVerifyHeap+0x76>
 80191be:	2416      	movs	r4, #22
 80191c0:	e73f      	b.n	8019042 <EwVerifyHeap+0x76>
 80191c2:	2417      	movs	r4, #23
 80191c4:	e73d      	b.n	8019042 <EwVerifyHeap+0x76>
 80191c6:	bf00      	nop
 80191c8:	200002cc 	.word	0x200002cc

080191cc <EwAllocHeapBlock>:
 80191cc:	1e42      	subs	r2, r0, #1
 80191ce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80191d2:	429a      	cmp	r2, r3
 80191d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d8:	f080 80ba 	bcs.w	8019350 <EwAllocHeapBlock+0x184>
 80191dc:	4b6a      	ldr	r3, [pc, #424]	; (8019388 <EwAllocHeapBlock+0x1bc>)
 80191de:	681c      	ldr	r4, [r3, #0]
 80191e0:	b934      	cbnz	r4, 80191f0 <EwAllocHeapBlock+0x24>
 80191e2:	f44f 70a1 	mov.w	r0, #322	; 0x142
 80191e6:	f7ff fd5f 	bl	8018ca8 <EwError>
 80191ea:	4620      	mov	r0, r4
 80191ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191f0:	0782      	lsls	r2, r0, #30
 80191f2:	bf1c      	itt	ne
 80191f4:	f020 0003 	bicne.w	r0, r0, #3
 80191f8:	3004      	addne	r0, #4
 80191fa:	4a64      	ldr	r2, [pc, #400]	; (801938c <EwAllocHeapBlock+0x1c0>)
 80191fc:	3004      	adds	r0, #4
 80191fe:	2810      	cmp	r0, #16
 8019200:	6816      	ldr	r6, [r2, #0]
 8019202:	bf38      	it	cc
 8019204:	2010      	movcc	r0, #16
 8019206:	4286      	cmp	r6, r0
 8019208:	f300 80b4 	bgt.w	8019374 <EwAllocHeapBlock+0x1a8>
 801920c:	685c      	ldr	r4, [r3, #4]
 801920e:	2c00      	cmp	r4, #0
 8019210:	d0eb      	beq.n	80191ea <EwAllocHeapBlock+0x1e>
 8019212:	e9d4 2509 	ldrd	r2, r5, [r4, #36]	; 0x24
 8019216:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801921a:	2300      	movs	r3, #0
 801921c:	4295      	cmp	r5, r2
 801921e:	d304      	bcc.n	801922a <EwAllocHeapBlock+0x5e>
 8019220:	b963      	cbnz	r3, 801923c <EwAllocHeapBlock+0x70>
 8019222:	2a00      	cmp	r2, #0
 8019224:	d067      	beq.n	80192f6 <EwAllocHeapBlock+0x12a>
 8019226:	4613      	mov	r3, r2
 8019228:	e00a      	b.n	8019240 <EwAllocHeapBlock+0x74>
 801922a:	6811      	ldr	r1, [r2, #0]
 801922c:	4288      	cmp	r0, r1
 801922e:	dc03      	bgt.n	8019238 <EwAllocHeapBlock+0x6c>
 8019230:	42b9      	cmp	r1, r7
 8019232:	bfbc      	itt	lt
 8019234:	460f      	movlt	r7, r1
 8019236:	4613      	movlt	r3, r2
 8019238:	6892      	ldr	r2, [r2, #8]
 801923a:	e7ef      	b.n	801921c <EwAllocHeapBlock+0x50>
 801923c:	429d      	cmp	r5, r3
 801923e:	d302      	bcc.n	8019246 <EwAllocHeapBlock+0x7a>
 8019240:	681a      	ldr	r2, [r3, #0]
 8019242:	4290      	cmp	r0, r2
 8019244:	dc54      	bgt.n	80192f0 <EwAllocHeapBlock+0x124>
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	f8d4 801c 	ldr.w	r8, [r4, #28]
 801924c:	f022 0203 	bic.w	r2, r2, #3
 8019250:	1899      	adds	r1, r3, r2
 8019252:	4588      	cmp	r8, r1
 8019254:	bf82      	ittt	hi
 8019256:	5899      	ldrhi	r1, [r3, r2]
 8019258:	f021 0102 	bichi.w	r1, r1, #2
 801925c:	5099      	strhi	r1, [r3, r2]
 801925e:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
 8019262:	2d00      	cmp	r5, #0
 8019264:	d049      	beq.n	80192fa <EwAllocHeapBlock+0x12e>
 8019266:	60aa      	str	r2, [r5, #8]
 8019268:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801926c:	f1bc 0f00 	cmp.w	ip, #0
 8019270:	d045      	beq.n	80192fe <EwAllocHeapBlock+0x132>
 8019272:	f8cc 5004 	str.w	r5, [ip, #4]
 8019276:	68e1      	ldr	r1, [r4, #12]
 8019278:	681f      	ldr	r7, [r3, #0]
 801927a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801927e:	3104      	adds	r1, #4
 8019280:	1bc9      	subs	r1, r1, r7
 8019282:	1a3f      	subs	r7, r7, r0
 8019284:	f10e 32ff 	add.w	r2, lr, #4294967295
 8019288:	2f0f      	cmp	r7, #15
 801928a:	60e1      	str	r1, [r4, #12]
 801928c:	6122      	str	r2, [r4, #16]
 801928e:	d938      	bls.n	8019302 <EwAllocHeapBlock+0x136>
 8019290:	4286      	cmp	r6, r0
 8019292:	dd36      	ble.n	8019302 <EwAllocHeapBlock+0x136>
 8019294:	501f      	str	r7, [r3, r0]
 8019296:	2700      	movs	r7, #0
 8019298:	e9c3 7701 	strd	r7, r7, [r3, #4]
 801929c:	181a      	adds	r2, r3, r0
 801929e:	6018      	str	r0, [r3, #0]
 80192a0:	681f      	ldr	r7, [r3, #0]
 80192a2:	1a3f      	subs	r7, r7, r0
 80192a4:	2f0f      	cmp	r7, #15
 80192a6:	d92e      	bls.n	8019306 <EwAllocHeapBlock+0x13a>
 80192a8:	4286      	cmp	r6, r0
 80192aa:	dc2c      	bgt.n	8019306 <EwAllocHeapBlock+0x13a>
 80192ac:	51d8      	str	r0, [r3, r7]
 80192ae:	681a      	ldr	r2, [r3, #0]
 80192b0:	1a12      	subs	r2, r2, r0
 80192b2:	601a      	str	r2, [r3, #0]
 80192b4:	461a      	mov	r2, r3
 80192b6:	443b      	add	r3, r7
 80192b8:	e9c2 5c01 	strd	r5, ip, [r2, #4]
 80192bc:	f1bc 0f00 	cmp.w	ip, #0
 80192c0:	d042      	beq.n	8019348 <EwAllocHeapBlock+0x17c>
 80192c2:	f8cc 2004 	str.w	r2, [ip, #4]
 80192c6:	2d00      	cmp	r5, #0
 80192c8:	d040      	beq.n	801934c <EwAllocHeapBlock+0x180>
 80192ca:	60aa      	str	r2, [r5, #8]
 80192cc:	6815      	ldr	r5, [r2, #0]
 80192ce:	f025 0503 	bic.w	r5, r5, #3
 80192d2:	1957      	adds	r7, r2, r5
 80192d4:	45b8      	cmp	r8, r7
 80192d6:	f847 2c04 	str.w	r2, [r7, #-4]
 80192da:	bf82      	ittt	hi
 80192dc:	5957      	ldrhi	r7, [r2, r5]
 80192de:	f047 0702 	orrhi.w	r7, r7, #2
 80192e2:	5157      	strhi	r7, [r2, r5]
 80192e4:	6815      	ldr	r5, [r2, #0]
 80192e6:	3904      	subs	r1, #4
 80192e8:	4429      	add	r1, r5
 80192ea:	e9c4 1e03 	strd	r1, lr, [r4, #12]
 80192ee:	e00c      	b.n	801930a <EwAllocHeapBlock+0x13e>
 80192f0:	689b      	ldr	r3, [r3, #8]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d1a4      	bne.n	8019240 <EwAllocHeapBlock+0x74>
 80192f6:	6864      	ldr	r4, [r4, #4]
 80192f8:	e789      	b.n	801920e <EwAllocHeapBlock+0x42>
 80192fa:	6262      	str	r2, [r4, #36]	; 0x24
 80192fc:	e7b4      	b.n	8019268 <EwAllocHeapBlock+0x9c>
 80192fe:	6225      	str	r5, [r4, #32]
 8019300:	e7b9      	b.n	8019276 <EwAllocHeapBlock+0xaa>
 8019302:	2200      	movs	r2, #0
 8019304:	e7cc      	b.n	80192a0 <EwAllocHeapBlock+0xd4>
 8019306:	2a00      	cmp	r2, #0
 8019308:	d1d6      	bne.n	80192b8 <EwAllocHeapBlock+0xec>
 801930a:	6819      	ldr	r1, [r3, #0]
 801930c:	f041 0501 	orr.w	r5, r1, #1
 8019310:	601d      	str	r5, [r3, #0]
 8019312:	b122      	cbz	r2, 801931e <EwAllocHeapBlock+0x152>
 8019314:	4293      	cmp	r3, r2
 8019316:	bf84      	itt	hi
 8019318:	f041 0103 	orrhi.w	r1, r1, #3
 801931c:	6019      	strhi	r1, [r3, #0]
 801931e:	4286      	cmp	r6, r0
 8019320:	bfd5      	itete	le
 8019322:	6b22      	ldrle	r2, [r4, #48]	; 0x30
 8019324:	6ae2      	ldrgt	r2, [r4, #44]	; 0x2c
 8019326:	3201      	addle	r2, #1
 8019328:	3201      	addgt	r2, #1
 801932a:	bfd4      	ite	le
 801932c:	6322      	strle	r2, [r4, #48]	; 0x30
 801932e:	62e2      	strgt	r2, [r4, #44]	; 0x2c
 8019330:	6962      	ldr	r2, [r4, #20]
 8019332:	4286      	cmp	r6, r0
 8019334:	f102 0201 	add.w	r2, r2, #1
 8019338:	6162      	str	r2, [r4, #20]
 801933a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801933c:	dd0a      	ble.n	8019354 <EwAllocHeapBlock+0x188>
 801933e:	429a      	cmp	r2, r3
 8019340:	d200      	bcs.n	8019344 <EwAllocHeapBlock+0x178>
 8019342:	62a3      	str	r3, [r4, #40]	; 0x28
 8019344:	1d1c      	adds	r4, r3, #4
 8019346:	e750      	b.n	80191ea <EwAllocHeapBlock+0x1e>
 8019348:	6222      	str	r2, [r4, #32]
 801934a:	e7bc      	b.n	80192c6 <EwAllocHeapBlock+0xfa>
 801934c:	6262      	str	r2, [r4, #36]	; 0x24
 801934e:	e7bd      	b.n	80192cc <EwAllocHeapBlock+0x100>
 8019350:	2400      	movs	r4, #0
 8019352:	e74a      	b.n	80191ea <EwAllocHeapBlock+0x1e>
 8019354:	429a      	cmp	r2, r3
 8019356:	d9f5      	bls.n	8019344 <EwAllocHeapBlock+0x178>
 8019358:	490d      	ldr	r1, [pc, #52]	; (8019390 <EwAllocHeapBlock+0x1c4>)
 801935a:	1ad2      	subs	r2, r2, r3
 801935c:	1092      	asrs	r2, r2, #2
 801935e:	434a      	muls	r2, r1
 8019360:	1052      	asrs	r2, r2, #1
 8019362:	210c      	movs	r1, #12
 8019364:	fb01 3202 	mla	r2, r1, r2, r3
 8019368:	62a2      	str	r2, [r4, #40]	; 0x28
 801936a:	e7eb      	b.n	8019344 <EwAllocHeapBlock+0x178>
 801936c:	6824      	ldr	r4, [r4, #0]
 801936e:	2c00      	cmp	r4, #0
 8019370:	f43f af3b 	beq.w	80191ea <EwAllocHeapBlock+0x1e>
 8019374:	6a23      	ldr	r3, [r4, #32]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d0f8      	beq.n	801936c <EwAllocHeapBlock+0x1a0>
 801937a:	e9d3 2100 	ldrd	r2, r1, [r3]
 801937e:	4290      	cmp	r0, r2
 8019380:	f77f af61 	ble.w	8019246 <EwAllocHeapBlock+0x7a>
 8019384:	460b      	mov	r3, r1
 8019386:	e7f6      	b.n	8019376 <EwAllocHeapBlock+0x1aa>
 8019388:	200002cc 	.word	0x200002cc
 801938c:	20000024 	.word	0x20000024
 8019390:	aaaaaaab 	.word	0xaaaaaaab

08019394 <EwFreeHeapBlock>:
 8019394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019398:	4601      	mov	r1, r0
 801939a:	b130      	cbz	r0, 80193aa <EwFreeHeapBlock+0x16>
 801939c:	f010 0503 	ands.w	r5, r0, #3
 80193a0:	d105      	bne.n	80193ae <EwFreeHeapBlock+0x1a>
 80193a2:	4b9d      	ldr	r3, [pc, #628]	; (8019618 <EwFreeHeapBlock+0x284>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	3804      	subs	r0, #4
 80193a8:	b943      	cbnz	r3, 80193bc <EwFreeHeapBlock+0x28>
 80193aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ae:	2200      	movs	r2, #0
 80193b0:	f240 1043 	movw	r0, #323	; 0x143
 80193b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193b8:	f7ff bc8c 	b.w	8018cd4 <EwErrorPD>
 80193bc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80193c0:	4580      	cmp	r8, r0
 80193c2:	d86e      	bhi.n	80194a2 <EwFreeHeapBlock+0x10e>
 80193c4:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 80193c8:	4586      	cmp	lr, r0
 80193ca:	d96a      	bls.n	80194a2 <EwFreeHeapBlock+0x10e>
 80193cc:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80193d0:	f01c 0201 	ands.w	r2, ip, #1
 80193d4:	d102      	bne.n	80193dc <EwFreeHeapBlock+0x48>
 80193d6:	f44f 70a2 	mov.w	r0, #324	; 0x144
 80193da:	e7eb      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 80193dc:	f02c 0603 	bic.w	r6, ip, #3
 80193e0:	f01c 0202 	ands.w	r2, ip, #2
 80193e4:	eb00 0406 	add.w	r4, r0, r6
 80193e8:	f000 8112 	beq.w	8019610 <EwFreeHeapBlock+0x27c>
 80193ec:	45a6      	cmp	lr, r4
 80193ee:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80193f2:	f000 8101 	beq.w	80195f8 <EwFreeHeapBlock+0x264>
 80193f6:	42a0      	cmp	r0, r4
 80193f8:	d201      	bcs.n	80193fe <EwFreeHeapBlock+0x6a>
 80193fa:	45a6      	cmp	lr, r4
 80193fc:	d203      	bcs.n	8019406 <EwFreeHeapBlock+0x72>
 80193fe:	2200      	movs	r2, #0
 8019400:	f240 1045 	movw	r0, #325	; 0x145
 8019404:	e7d6      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019406:	5987      	ldr	r7, [r0, r6]
 8019408:	f017 0f02 	tst.w	r7, #2
 801940c:	f000 80cf 	beq.w	80195ae <EwFreeHeapBlock+0x21a>
 8019410:	2200      	movs	r2, #0
 8019412:	f44f 70a3 	mov.w	r0, #326	; 0x146
 8019416:	e7cd      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019418:	2400      	movs	r4, #0
 801941a:	4282      	cmp	r2, r0
 801941c:	d203      	bcs.n	8019426 <EwFreeHeapBlock+0x92>
 801941e:	4590      	cmp	r8, r2
 8019420:	d801      	bhi.n	8019426 <EwFreeHeapBlock+0x92>
 8019422:	0797      	lsls	r7, r2, #30
 8019424:	d003      	beq.n	801942e <EwFreeHeapBlock+0x9a>
 8019426:	2200      	movs	r2, #0
 8019428:	f240 1047 	movw	r0, #327	; 0x147
 801942c:	e7c2      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 801942e:	f8d2 c000 	ldr.w	ip, [r2]
 8019432:	f01c 0f03 	tst.w	ip, #3
 8019436:	d104      	bne.n	8019442 <EwFreeHeapBlock+0xae>
 8019438:	f02c 0703 	bic.w	r7, ip, #3
 801943c:	4417      	add	r7, r2
 801943e:	42b8      	cmp	r0, r7
 8019440:	d003      	beq.n	801944a <EwFreeHeapBlock+0xb6>
 8019442:	2200      	movs	r2, #0
 8019444:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8019448:	e7b4      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 801944a:	695f      	ldr	r7, [r3, #20]
 801944c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019450:	f107 39ff 	add.w	r9, r7, #4294967295
 8019454:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8019456:	f107 0a01 	add.w	sl, r7, #1
 801945a:	b334      	cbz	r4, 80194aa <EwFreeHeapBlock+0x116>
 801945c:	f8d4 e000 	ldr.w	lr, [r4]
 8019460:	f01e 0f01 	tst.w	lr, #1
 8019464:	d121      	bne.n	80194aa <EwFreeHeapBlock+0x116>
 8019466:	1d37      	adds	r7, r6, #4
 8019468:	4447      	add	r7, r8
 801946a:	60df      	str	r7, [r3, #12]
 801946c:	691f      	ldr	r7, [r3, #16]
 801946e:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
 8019472:	3f01      	subs	r7, #1
 8019474:	e9c3 7904 	strd	r7, r9, [r3, #16]
 8019478:	6867      	ldr	r7, [r4, #4]
 801947a:	6057      	str	r7, [r2, #4]
 801947c:	6867      	ldr	r7, [r4, #4]
 801947e:	b197      	cbz	r7, 80194a6 <EwFreeHeapBlock+0x112>
 8019480:	60ba      	str	r2, [r7, #8]
 8019482:	4476      	add	r6, lr
 8019484:	4466      	add	r6, ip
 8019486:	f026 0c03 	bic.w	ip, r6, #3
 801948a:	4494      	add	ip, r2
 801948c:	6016      	str	r6, [r2, #0]
 801948e:	f84c 2c04 	str.w	r2, [ip, #-4]
 8019492:	e9c4 5500 	strd	r5, r5, [r4]
 8019496:	60a5      	str	r5, [r4, #8]
 8019498:	e941 5501 	strd	r5, r5, [r1, #-4]
 801949c:	604d      	str	r5, [r1, #4]
 801949e:	f841 5c08 	str.w	r5, [r1, #-8]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	e780      	b.n	80193a8 <EwFreeHeapBlock+0x14>
 80194a6:	625a      	str	r2, [r3, #36]	; 0x24
 80194a8:	e7eb      	b.n	8019482 <EwFreeHeapBlock+0xee>
 80194aa:	eb06 0708 	add.w	r7, r6, r8
 80194ae:	4466      	add	r6, ip
 80194b0:	60df      	str	r7, [r3, #12]
 80194b2:	f8c3 9014 	str.w	r9, [r3, #20]
 80194b6:	f8c3 a034 	str.w	sl, [r3, #52]	; 0x34
 80194ba:	6016      	str	r6, [r2, #0]
 80194bc:	f026 0603 	bic.w	r6, r6, #3
 80194c0:	4416      	add	r6, r2
 80194c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80194c6:	e941 5501 	strd	r5, r5, [r1, #-4]
 80194ca:	604d      	str	r5, [r1, #4]
 80194cc:	f841 5c08 	str.w	r5, [r1, #-8]
 80194d0:	2c00      	cmp	r4, #0
 80194d2:	d0e6      	beq.n	80194a2 <EwFreeHeapBlock+0x10e>
 80194d4:	6822      	ldr	r2, [r4, #0]
 80194d6:	f042 0202 	orr.w	r2, r2, #2
 80194da:	6022      	str	r2, [r4, #0]
 80194dc:	e7e1      	b.n	80194a2 <EwFreeHeapBlock+0x10e>
 80194de:	6218      	str	r0, [r3, #32]
 80194e0:	e077      	b.n	80195d2 <EwFreeHeapBlock+0x23e>
 80194e2:	6258      	str	r0, [r3, #36]	; 0x24
 80194e4:	e079      	b.n	80195da <EwFreeHeapBlock+0x246>
 80194e6:	f022 0203 	bic.w	r2, r2, #3
 80194ea:	4422      	add	r2, r4
 80194ec:	4596      	cmp	lr, r2
 80194ee:	f000 8086 	beq.w	80195fe <EwFreeHeapBlock+0x26a>
 80194f2:	4294      	cmp	r4, r2
 80194f4:	d201      	bcs.n	80194fa <EwFreeHeapBlock+0x166>
 80194f6:	4596      	cmp	lr, r2
 80194f8:	d203      	bcs.n	8019502 <EwFreeHeapBlock+0x16e>
 80194fa:	2200      	movs	r2, #0
 80194fc:	f240 1049 	movw	r0, #329	; 0x149
 8019500:	e758      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019502:	6814      	ldr	r4, [r2, #0]
 8019504:	07a4      	lsls	r4, r4, #30
 8019506:	d503      	bpl.n	8019510 <EwFreeHeapBlock+0x17c>
 8019508:	2200      	movs	r2, #0
 801950a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 801950e:	e751      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019510:	4614      	mov	r4, r2
 8019512:	6822      	ldr	r2, [r4, #0]
 8019514:	07d7      	lsls	r7, r2, #31
 8019516:	d4e6      	bmi.n	80194e6 <EwFreeHeapBlock+0x152>
 8019518:	68a2      	ldr	r2, [r4, #8]
 801951a:	b93a      	cbnz	r2, 801952c <EwFreeHeapBlock+0x198>
 801951c:	e9c1 4200 	strd	r4, r2, [r1]
 8019520:	60a0      	str	r0, [r4, #8]
 8019522:	684a      	ldr	r2, [r1, #4]
 8019524:	2a00      	cmp	r2, #0
 8019526:	d03b      	beq.n	80195a0 <EwFreeHeapBlock+0x20c>
 8019528:	6050      	str	r0, [r2, #4]
 801952a:	e01c      	b.n	8019566 <EwFreeHeapBlock+0x1d2>
 801952c:	4290      	cmp	r0, r2
 801952e:	d903      	bls.n	8019538 <EwFreeHeapBlock+0x1a4>
 8019530:	4590      	cmp	r8, r2
 8019532:	d801      	bhi.n	8019538 <EwFreeHeapBlock+0x1a4>
 8019534:	0794      	lsls	r4, r2, #30
 8019536:	d003      	beq.n	8019540 <EwFreeHeapBlock+0x1ac>
 8019538:	2200      	movs	r2, #0
 801953a:	f240 104b 	movw	r0, #331	; 0x14b
 801953e:	e739      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019540:	6814      	ldr	r4, [r2, #0]
 8019542:	07a7      	lsls	r7, r4, #30
 8019544:	d104      	bne.n	8019550 <EwFreeHeapBlock+0x1bc>
 8019546:	f024 0403 	bic.w	r4, r4, #3
 801954a:	4414      	add	r4, r2
 801954c:	42a0      	cmp	r0, r4
 801954e:	d803      	bhi.n	8019558 <EwFreeHeapBlock+0x1c4>
 8019550:	2200      	movs	r2, #0
 8019552:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 8019556:	e72d      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019558:	6854      	ldr	r4, [r2, #4]
 801955a:	e9c1 4200 	strd	r4, r2, [r1]
 801955e:	6050      	str	r0, [r2, #4]
 8019560:	680a      	ldr	r2, [r1, #0]
 8019562:	b312      	cbz	r2, 80195aa <EwFreeHeapBlock+0x216>
 8019564:	6090      	str	r0, [r2, #8]
 8019566:	f02c 0201 	bic.w	r2, ip, #1
 801956a:	f841 2c04 	str.w	r2, [r1, #-4]
 801956e:	1982      	adds	r2, r0, r6
 8019570:	4596      	cmp	lr, r2
 8019572:	f842 0c04 	str.w	r0, [r2, #-4]
 8019576:	bf82      	ittt	hi
 8019578:	5982      	ldrhi	r2, [r0, r6]
 801957a:	f042 0202 	orrhi.w	r2, r2, #2
 801957e:	5182      	strhi	r2, [r0, r6]
 8019580:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019584:	1f14      	subs	r4, r2, #4
 8019586:	68da      	ldr	r2, [r3, #12]
 8019588:	4422      	add	r2, r4
 801958a:	60da      	str	r2, [r3, #12]
 801958c:	695a      	ldr	r2, [r3, #20]
 801958e:	3a01      	subs	r2, #1
 8019590:	615a      	str	r2, [r3, #20]
 8019592:	691a      	ldr	r2, [r3, #16]
 8019594:	3201      	adds	r2, #1
 8019596:	611a      	str	r2, [r3, #16]
 8019598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801959a:	3201      	adds	r2, #1
 801959c:	635a      	str	r2, [r3, #52]	; 0x34
 801959e:	e780      	b.n	80194a2 <EwFreeHeapBlock+0x10e>
 80195a0:	6218      	str	r0, [r3, #32]
 80195a2:	e7e0      	b.n	8019566 <EwFreeHeapBlock+0x1d2>
 80195a4:	e9c1 4400 	strd	r4, r4, [r1]
 80195a8:	6218      	str	r0, [r3, #32]
 80195aa:	6258      	str	r0, [r3, #36]	; 0x24
 80195ac:	e7db      	b.n	8019566 <EwFreeHeapBlock+0x1d2>
 80195ae:	2a00      	cmp	r2, #0
 80195b0:	f47f af33 	bne.w	801941a <EwFreeHeapBlock+0x86>
 80195b4:	07fa      	lsls	r2, r7, #31
 80195b6:	d4ac      	bmi.n	8019512 <EwFreeHeapBlock+0x17e>
 80195b8:	68da      	ldr	r2, [r3, #12]
 80195ba:	4432      	add	r2, r6
 80195bc:	60da      	str	r2, [r3, #12]
 80195be:	695a      	ldr	r2, [r3, #20]
 80195c0:	3a01      	subs	r2, #1
 80195c2:	615a      	str	r2, [r3, #20]
 80195c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80195c6:	3201      	adds	r2, #1
 80195c8:	635a      	str	r2, [r3, #52]	; 0x34
 80195ca:	68a2      	ldr	r2, [r4, #8]
 80195cc:	2a00      	cmp	r2, #0
 80195ce:	d086      	beq.n	80194de <EwFreeHeapBlock+0x14a>
 80195d0:	6050      	str	r0, [r2, #4]
 80195d2:	6862      	ldr	r2, [r4, #4]
 80195d4:	2a00      	cmp	r2, #0
 80195d6:	d084      	beq.n	80194e2 <EwFreeHeapBlock+0x14e>
 80195d8:	6090      	str	r0, [r2, #8]
 80195da:	4437      	add	r7, r6
 80195dc:	600a      	str	r2, [r1, #0]
 80195de:	68a2      	ldr	r2, [r4, #8]
 80195e0:	f841 7c04 	str.w	r7, [r1, #-4]
 80195e4:	f027 0703 	bic.w	r7, r7, #3
 80195e8:	4407      	add	r7, r0
 80195ea:	604a      	str	r2, [r1, #4]
 80195ec:	f847 0c04 	str.w	r0, [r7, #-4]
 80195f0:	5185      	str	r5, [r0, r6]
 80195f2:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80195f6:	e754      	b.n	80194a2 <EwFreeHeapBlock+0x10e>
 80195f8:	2a00      	cmp	r2, #0
 80195fa:	f47f af0d 	bne.w	8019418 <EwFreeHeapBlock+0x84>
 80195fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019600:	2a00      	cmp	r2, #0
 8019602:	d193      	bne.n	801952c <EwFreeHeapBlock+0x198>
 8019604:	6a1c      	ldr	r4, [r3, #32]
 8019606:	2c00      	cmp	r4, #0
 8019608:	d0cc      	beq.n	80195a4 <EwFreeHeapBlock+0x210>
 801960a:	f240 104d 	movw	r0, #333	; 0x14d
 801960e:	e6d1      	b.n	80193b4 <EwFreeHeapBlock+0x20>
 8019610:	45a6      	cmp	lr, r4
 8019612:	f47f aef0 	bne.w	80193f6 <EwFreeHeapBlock+0x62>
 8019616:	e7f2      	b.n	80195fe <EwFreeHeapBlock+0x26a>
 8019618:	200002cc 	.word	0x200002cc

0801961c <EwIsHeapPtr>:
 801961c:	4b06      	ldr	r3, [pc, #24]	; (8019638 <EwIsHeapPtr+0x1c>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	b90b      	cbnz	r3, 8019626 <EwIsHeapPtr+0xa>
 8019622:	4618      	mov	r0, r3
 8019624:	4770      	bx	lr
 8019626:	699a      	ldr	r2, [r3, #24]
 8019628:	4282      	cmp	r2, r0
 801962a:	d8f8      	bhi.n	801961e <EwIsHeapPtr+0x2>
 801962c:	69da      	ldr	r2, [r3, #28]
 801962e:	4282      	cmp	r2, r0
 8019630:	d9f5      	bls.n	801961e <EwIsHeapPtr+0x2>
 8019632:	2001      	movs	r0, #1
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop
 8019638:	200002cc 	.word	0x200002cc

0801963c <XObject__Init>:
 801963c:	4b01      	ldr	r3, [pc, #4]	; (8019644 <XObject__Init+0x8>)
 801963e:	6003      	str	r3, [r0, #0]
 8019640:	6081      	str	r1, [r0, #8]
 8019642:	4770      	bx	lr
 8019644:	08036b2c 	.word	0x08036b2c

08019648 <XObject__ReInit>:
 8019648:	4770      	bx	lr

0801964a <XObject__Done>:
 801964a:	4770      	bx	lr

0801964c <EwSetStackBaseAddress>:
 801964c:	f44f 709d 	mov.w	r0, #314	; 0x13a
 8019650:	f7ff bb2a 	b.w	8018ca8 <EwError>

08019654 <EwNewObjectIndirect>:
 8019654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019658:	4688      	mov	r8, r1
 801965a:	4605      	mov	r5, r0
 801965c:	b948      	cbnz	r0, 8019672 <EwNewObjectIndirect+0x1e>
 801965e:	f240 1035 	movw	r0, #309	; 0x135
 8019662:	f7ff fb21 	bl	8018ca8 <EwError>
 8019666:	f010 f887 	bl	8029778 <EwPanic>
 801966a:	2700      	movs	r7, #0
 801966c:	4638      	mov	r0, r7
 801966e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019672:	6802      	ldr	r2, [r0, #0]
 8019674:	4b18      	ldr	r3, [pc, #96]	; (80196d8 <EwNewObjectIndirect+0x84>)
 8019676:	429a      	cmp	r2, r3
 8019678:	d002      	beq.n	8019680 <EwNewObjectIndirect+0x2c>
 801967a:	f44f 709c 	mov.w	r0, #312	; 0x138
 801967e:	e7f0      	b.n	8019662 <EwNewObjectIndirect+0xe>
 8019680:	6900      	ldr	r0, [r0, #16]
 8019682:	3004      	adds	r0, #4
 8019684:	f010 f874 	bl	8029770 <EwAlloc>
 8019688:	4606      	mov	r6, r0
 801968a:	1d07      	adds	r7, r0, #4
 801968c:	b908      	cbnz	r0, 8019692 <EwNewObjectIndirect+0x3e>
 801968e:	200a      	movs	r0, #10
 8019690:	e7e7      	b.n	8019662 <EwNewObjectIndirect+0xe>
 8019692:	4c12      	ldr	r4, [pc, #72]	; (80196dc <EwNewObjectIndirect+0x88>)
 8019694:	6929      	ldr	r1, [r5, #16]
 8019696:	4638      	mov	r0, r7
 8019698:	f010 f892 	bl	80297c0 <EwZero>
 801969c:	6823      	ldr	r3, [r4, #0]
 801969e:	6033      	str	r3, [r6, #0]
 80196a0:	4642      	mov	r2, r8
 80196a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80196a4:	6026      	str	r6, [r4, #0]
 80196a6:	2100      	movs	r1, #0
 80196a8:	4638      	mov	r0, r7
 80196aa:	4798      	blx	r3
 80196ac:	6863      	ldr	r3, [r4, #4]
 80196ae:	692a      	ldr	r2, [r5, #16]
 80196b0:	3304      	adds	r3, #4
 80196b2:	4413      	add	r3, r2
 80196b4:	68a2      	ldr	r2, [r4, #8]
 80196b6:	6063      	str	r3, [r4, #4]
 80196b8:	3201      	adds	r2, #1
 80196ba:	60a2      	str	r2, [r4, #8]
 80196bc:	68e2      	ldr	r2, [r4, #12]
 80196be:	4293      	cmp	r3, r2
 80196c0:	6922      	ldr	r2, [r4, #16]
 80196c2:	bfc8      	it	gt
 80196c4:	60e3      	strgt	r3, [r4, #12]
 80196c6:	4413      	add	r3, r2
 80196c8:	6962      	ldr	r2, [r4, #20]
 80196ca:	4413      	add	r3, r2
 80196cc:	69a2      	ldr	r2, [r4, #24]
 80196ce:	4293      	cmp	r3, r2
 80196d0:	bfc8      	it	gt
 80196d2:	61a3      	strgt	r3, [r4, #24]
 80196d4:	e7ca      	b.n	801966c <EwNewObjectIndirect+0x18>
 80196d6:	bf00      	nop
 80196d8:	434c4153 	.word	0x434c4153
 80196dc:	200002d4 	.word	0x200002d4

080196e0 <EwAttachObjectVariant>:
 80196e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196e4:	460f      	mov	r7, r1
 80196e6:	4690      	mov	r8, r2
 80196e8:	6801      	ldr	r1, [r0, #0]
 80196ea:	4a21      	ldr	r2, [pc, #132]	; (8019770 <EwAttachObjectVariant+0x90>)
 80196ec:	68cb      	ldr	r3, [r1, #12]
 80196ee:	4605      	mov	r5, r0
 80196f0:	6810      	ldr	r0, [r2, #0]
 80196f2:	2400      	movs	r4, #0
 80196f4:	b10b      	cbz	r3, 80196fa <EwAttachObjectVariant+0x1a>
 80196f6:	685a      	ldr	r2, [r3, #4]
 80196f8:	b99a      	cbnz	r2, 8019722 <EwAttachObjectVariant+0x42>
 80196fa:	2c00      	cmp	r4, #0
 80196fc:	d035      	beq.n	801976a <EwAttachObjectVariant+0x8a>
 80196fe:	688b      	ldr	r3, [r1, #8]
 8019700:	6920      	ldr	r0, [r4, #16]
 8019702:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8019706:	f010 f833 	bl	8029770 <EwAlloc>
 801970a:	4606      	mov	r6, r0
 801970c:	b990      	cbnz	r0, 8019734 <EwAttachObjectVariant+0x54>
 801970e:	200b      	movs	r0, #11
 8019710:	f7ff faca 	bl	8018ca8 <EwError>
 8019714:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019718:	f010 b82e 	b.w	8029778 <EwPanic>
 801971c:	4202      	tst	r2, r0
 801971e:	d103      	bne.n	8019728 <EwAttachObjectVariant+0x48>
 8019720:	3308      	adds	r3, #8
 8019722:	681a      	ldr	r2, [r3, #0]
 8019724:	2a00      	cmp	r2, #0
 8019726:	d1f9      	bne.n	801971c <EwAttachObjectVariant+0x3c>
 8019728:	685a      	ldr	r2, [r3, #4]
 801972a:	2a00      	cmp	r2, #0
 801972c:	d0e2      	beq.n	80196f4 <EwAttachObjectVariant+0x14>
 801972e:	68d3      	ldr	r3, [r2, #12]
 8019730:	4614      	mov	r4, r2
 8019732:	e7df      	b.n	80196f4 <EwAttachObjectVariant+0x14>
 8019734:	6921      	ldr	r1, [r4, #16]
 8019736:	f010 f843 	bl	80297c0 <EwZero>
 801973a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801973c:	f845 6009 	str.w	r6, [r5, r9]
 8019740:	4642      	mov	r2, r8
 8019742:	4639      	mov	r1, r7
 8019744:	4628      	mov	r0, r5
 8019746:	4798      	blx	r3
 8019748:	4a0a      	ldr	r2, [pc, #40]	; (8019774 <EwAttachObjectVariant+0x94>)
 801974a:	6923      	ldr	r3, [r4, #16]
 801974c:	6851      	ldr	r1, [r2, #4]
 801974e:	440b      	add	r3, r1
 8019750:	68d1      	ldr	r1, [r2, #12]
 8019752:	6053      	str	r3, [r2, #4]
 8019754:	428b      	cmp	r3, r1
 8019756:	6911      	ldr	r1, [r2, #16]
 8019758:	bfc8      	it	gt
 801975a:	60d3      	strgt	r3, [r2, #12]
 801975c:	440b      	add	r3, r1
 801975e:	6951      	ldr	r1, [r2, #20]
 8019760:	440b      	add	r3, r1
 8019762:	6991      	ldr	r1, [r2, #24]
 8019764:	428b      	cmp	r3, r1
 8019766:	bfc8      	it	gt
 8019768:	6193      	strgt	r3, [r2, #24]
 801976a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801976e:	bf00      	nop
 8019770:	20000324 	.word	0x20000324
 8019774:	200002d4 	.word	0x200002d4

08019778 <EwDetachObjectVariant>:
 8019778:	6803      	ldr	r3, [r0, #0]
 801977a:	689b      	ldr	r3, [r3, #8]
 801977c:	b570      	push	{r4, r5, r6, lr}
 801977e:	691d      	ldr	r5, [r3, #16]
 8019780:	5943      	ldr	r3, [r0, r5]
 8019782:	4604      	mov	r4, r0
 8019784:	b163      	cbz	r3, 80197a0 <EwDetachObjectVariant+0x28>
 8019786:	681a      	ldr	r2, [r3, #0]
 8019788:	4906      	ldr	r1, [pc, #24]	; (80197a4 <EwDetachObjectVariant+0x2c>)
 801978a:	6916      	ldr	r6, [r2, #16]
 801978c:	684b      	ldr	r3, [r1, #4]
 801978e:	1b9b      	subs	r3, r3, r6
 8019790:	604b      	str	r3, [r1, #4]
 8019792:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019794:	4798      	blx	r3
 8019796:	5960      	ldr	r0, [r4, r5]
 8019798:	f00f ffec 	bl	8029774 <EwFree>
 801979c:	2300      	movs	r3, #0
 801979e:	5163      	str	r3, [r4, r5]
 80197a0:	bd70      	pop	{r4, r5, r6, pc}
 80197a2:	bf00      	nop
 80197a4:	200002d4 	.word	0x200002d4

080197a8 <EwGetAutoObject>:
 80197a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ac:	460f      	mov	r7, r1
 80197ae:	4604      	mov	r4, r0
 80197b0:	b388      	cbz	r0, 8019816 <EwGetAutoObject+0x6e>
 80197b2:	4b2c      	ldr	r3, [pc, #176]	; (8019864 <EwGetAutoObject+0xbc>)
 80197b4:	6819      	ldr	r1, [r3, #0]
 80197b6:	68a3      	ldr	r3, [r4, #8]
 80197b8:	b12b      	cbz	r3, 80197c6 <EwGetAutoObject+0x1e>
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	b10a      	cbz	r2, 80197c2 <EwGetAutoObject+0x1a>
 80197be:	420a      	tst	r2, r1
 80197c0:	d014      	beq.n	80197ec <EwGetAutoObject+0x44>
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	b983      	cbnz	r3, 80197e8 <EwGetAutoObject+0x40>
 80197c6:	4d28      	ldr	r5, [pc, #160]	; (8019868 <EwGetAutoObject+0xc0>)
 80197c8:	6826      	ldr	r6, [r4, #0]
 80197ca:	462b      	mov	r3, r5
 80197cc:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 80197d0:	b974      	cbnz	r4, 80197f0 <EwGetAutoObject+0x48>
 80197d2:	200c      	movs	r0, #12
 80197d4:	f00f ffcc 	bl	8029770 <EwAlloc>
 80197d8:	4604      	mov	r4, r0
 80197da:	bb10      	cbnz	r0, 8019822 <EwGetAutoObject+0x7a>
 80197dc:	200e      	movs	r0, #14
 80197de:	f7ff fa63 	bl	8018ca8 <EwError>
 80197e2:	f00f ffc9 	bl	8029778 <EwPanic>
 80197e6:	e016      	b.n	8019816 <EwGetAutoObject+0x6e>
 80197e8:	461c      	mov	r4, r3
 80197ea:	e7e4      	b.n	80197b6 <EwGetAutoObject+0xe>
 80197ec:	3308      	adds	r3, #8
 80197ee:	e7e4      	b.n	80197ba <EwGetAutoObject+0x12>
 80197f0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80197f4:	428e      	cmp	r6, r1
 80197f6:	d111      	bne.n	801981c <EwGetAutoObject+0x74>
 80197f8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80197fc:	601a      	str	r2, [r3, #0]
 80197fe:	f1b8 0f00 	cmp.w	r8, #0
 8019802:	d121      	bne.n	8019848 <EwGetAutoObject+0xa0>
 8019804:	4642      	mov	r2, r8
 8019806:	4631      	mov	r1, r6
 8019808:	f240 1039 	movw	r0, #313	; 0x139
 801980c:	f7ff fa62 	bl	8018cd4 <EwErrorPD>
 8019810:	f00f ffb2 	bl	8029778 <EwPanic>
 8019814:	4644      	mov	r4, r8
 8019816:	4620      	mov	r0, r4
 8019818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801981c:	4623      	mov	r3, r4
 801981e:	4614      	mov	r4, r2
 8019820:	e7d6      	b.n	80197d0 <EwGetAutoObject+0x28>
 8019822:	2300      	movs	r3, #0
 8019824:	6023      	str	r3, [r4, #0]
 8019826:	e9c4 6301 	strd	r6, r3, [r4, #4]
 801982a:	686b      	ldr	r3, [r5, #4]
 801982c:	68ea      	ldr	r2, [r5, #12]
 801982e:	330c      	adds	r3, #12
 8019830:	4293      	cmp	r3, r2
 8019832:	692a      	ldr	r2, [r5, #16]
 8019834:	bfc8      	it	gt
 8019836:	60eb      	strgt	r3, [r5, #12]
 8019838:	606b      	str	r3, [r5, #4]
 801983a:	4413      	add	r3, r2
 801983c:	696a      	ldr	r2, [r5, #20]
 801983e:	4413      	add	r3, r2
 8019840:	69aa      	ldr	r2, [r5, #24]
 8019842:	4293      	cmp	r3, r2
 8019844:	bfc8      	it	gt
 8019846:	61ab      	strgt	r3, [r5, #24]
 8019848:	68a1      	ldr	r1, [r4, #8]
 801984a:	69eb      	ldr	r3, [r5, #28]
 801984c:	6023      	str	r3, [r4, #0]
 801984e:	61ec      	str	r4, [r5, #28]
 8019850:	b931      	cbnz	r1, 8019860 <EwGetAutoObject+0xb8>
 8019852:	4638      	mov	r0, r7
 8019854:	f7ff fefe 	bl	8019654 <EwNewObjectIndirect>
 8019858:	6833      	ldr	r3, [r6, #0]
 801985a:	4605      	mov	r5, r0
 801985c:	4798      	blx	r3
 801985e:	60a5      	str	r5, [r4, #8]
 8019860:	68a4      	ldr	r4, [r4, #8]
 8019862:	e7d8      	b.n	8019816 <EwGetAutoObject+0x6e>
 8019864:	20000324 	.word	0x20000324
 8019868:	200002d4 	.word	0x200002d4

0801986c <EwCastObject>:
 801986c:	b510      	push	{r4, lr}
 801986e:	460c      	mov	r4, r1
 8019870:	b939      	cbnz	r1, 8019882 <EwCastObject+0x16>
 8019872:	f44f 709b 	mov.w	r0, #310	; 0x136
 8019876:	f7ff fa17 	bl	8018ca8 <EwError>
 801987a:	f00f ff7d 	bl	8029778 <EwPanic>
 801987e:	4620      	mov	r0, r4
 8019880:	bd10      	pop	{r4, pc}
 8019882:	2800      	cmp	r0, #0
 8019884:	d0fc      	beq.n	8019880 <EwCastObject+0x14>
 8019886:	6803      	ldr	r3, [r0, #0]
 8019888:	b11b      	cbz	r3, 8019892 <EwCastObject+0x26>
 801988a:	42a3      	cmp	r3, r4
 801988c:	d0f8      	beq.n	8019880 <EwCastObject+0x14>
 801988e:	689b      	ldr	r3, [r3, #8]
 8019890:	e7fa      	b.n	8019888 <EwCastObject+0x1c>
 8019892:	4618      	mov	r0, r3
 8019894:	e7f4      	b.n	8019880 <EwCastObject+0x14>

08019896 <EwCastClass>:
 8019896:	b141      	cbz	r1, 80198aa <EwCastClass+0x14>
 8019898:	b138      	cbz	r0, 80198aa <EwCastClass+0x14>
 801989a:	4603      	mov	r3, r0
 801989c:	4299      	cmp	r1, r3
 801989e:	d100      	bne.n	80198a2 <EwCastClass+0xc>
 80198a0:	4770      	bx	lr
 80198a2:	689b      	ldr	r3, [r3, #8]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1f9      	bne.n	801989c <EwCastClass+0x6>
 80198a8:	4618      	mov	r0, r3
 80198aa:	4770      	bx	lr

080198ac <EwClassOf>:
 80198ac:	b100      	cbz	r0, 80198b0 <EwClassOf+0x4>
 80198ae:	6800      	ldr	r0, [r0, #0]
 80198b0:	4770      	bx	lr

080198b2 <EwLockObject>:
 80198b2:	b510      	push	{r4, lr}
 80198b4:	4604      	mov	r4, r0
 80198b6:	b310      	cbz	r0, 80198fe <EwLockObject+0x4c>
 80198b8:	200c      	movs	r0, #12
 80198ba:	f00f ff59 	bl	8029770 <EwAlloc>
 80198be:	b930      	cbnz	r0, 80198ce <EwLockObject+0x1c>
 80198c0:	200c      	movs	r0, #12
 80198c2:	f7ff f9f1 	bl	8018ca8 <EwError>
 80198c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198ca:	f00f bf55 	b.w	8029778 <EwPanic>
 80198ce:	4a0c      	ldr	r2, [pc, #48]	; (8019900 <EwLockObject+0x4e>)
 80198d0:	6084      	str	r4, [r0, #8]
 80198d2:	6a13      	ldr	r3, [r2, #32]
 80198d4:	6003      	str	r3, [r0, #0]
 80198d6:	2100      	movs	r1, #0
 80198d8:	6041      	str	r1, [r0, #4]
 80198da:	b103      	cbz	r3, 80198de <EwLockObject+0x2c>
 80198dc:	6058      	str	r0, [r3, #4]
 80198de:	6853      	ldr	r3, [r2, #4]
 80198e0:	68d1      	ldr	r1, [r2, #12]
 80198e2:	6210      	str	r0, [r2, #32]
 80198e4:	330c      	adds	r3, #12
 80198e6:	428b      	cmp	r3, r1
 80198e8:	6911      	ldr	r1, [r2, #16]
 80198ea:	bfc8      	it	gt
 80198ec:	60d3      	strgt	r3, [r2, #12]
 80198ee:	6053      	str	r3, [r2, #4]
 80198f0:	440b      	add	r3, r1
 80198f2:	6951      	ldr	r1, [r2, #20]
 80198f4:	440b      	add	r3, r1
 80198f6:	6991      	ldr	r1, [r2, #24]
 80198f8:	428b      	cmp	r3, r1
 80198fa:	bfc8      	it	gt
 80198fc:	6193      	strgt	r3, [r2, #24]
 80198fe:	bd10      	pop	{r4, pc}
 8019900:	200002d4 	.word	0x200002d4

08019904 <EwUnlockObject>:
 8019904:	b510      	push	{r4, lr}
 8019906:	4601      	mov	r1, r0
 8019908:	b1b0      	cbz	r0, 8019938 <EwUnlockObject+0x34>
 801990a:	4c12      	ldr	r4, [pc, #72]	; (8019954 <EwUnlockObject+0x50>)
 801990c:	6a22      	ldr	r2, [r4, #32]
 801990e:	b1c2      	cbz	r2, 8019942 <EwUnlockObject+0x3e>
 8019910:	6890      	ldr	r0, [r2, #8]
 8019912:	6813      	ldr	r3, [r2, #0]
 8019914:	4288      	cmp	r0, r1
 8019916:	d110      	bne.n	801993a <EwUnlockObject+0x36>
 8019918:	b10b      	cbz	r3, 801991e <EwUnlockObject+0x1a>
 801991a:	6851      	ldr	r1, [r2, #4]
 801991c:	6059      	str	r1, [r3, #4]
 801991e:	6851      	ldr	r1, [r2, #4]
 8019920:	b169      	cbz	r1, 801993e <EwUnlockObject+0x3a>
 8019922:	600b      	str	r3, [r1, #0]
 8019924:	2300      	movs	r3, #0
 8019926:	e9c2 3300 	strd	r3, r3, [r2]
 801992a:	6093      	str	r3, [r2, #8]
 801992c:	4610      	mov	r0, r2
 801992e:	f00f ff21 	bl	8029774 <EwFree>
 8019932:	6863      	ldr	r3, [r4, #4]
 8019934:	3b0c      	subs	r3, #12
 8019936:	6063      	str	r3, [r4, #4]
 8019938:	bd10      	pop	{r4, pc}
 801993a:	461a      	mov	r2, r3
 801993c:	e7e7      	b.n	801990e <EwUnlockObject+0xa>
 801993e:	6223      	str	r3, [r4, #32]
 8019940:	e7f0      	b.n	8019924 <EwUnlockObject+0x20>
 8019942:	f240 1037 	movw	r0, #311	; 0x137
 8019946:	f7ff f9c5 	bl	8018cd4 <EwErrorPD>
 801994a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801994e:	f00f bf13 	b.w	8029778 <EwPanic>
 8019952:	bf00      	nop
 8019954:	200002d4 	.word	0x200002d4

08019958 <EwReclaimMemory>:
 8019958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801995c:	4d98      	ldr	r5, [pc, #608]	; (8019bc0 <EwReclaimMemory+0x268>)
 801995e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8019962:	f1b8 0f00 	cmp.w	r8, #0
 8019966:	d009      	beq.n	801997c <EwReclaimMemory+0x24>
 8019968:	f44f 709e 	mov.w	r0, #316	; 0x13c
 801996c:	f7ff f99c 	bl	8018ca8 <EwError>
 8019970:	f04f 0800 	mov.w	r8, #0
 8019974:	4640      	mov	r0, r8
 8019976:	b003      	add	sp, #12
 8019978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801997c:	2601      	movs	r6, #1
 801997e:	6a2a      	ldr	r2, [r5, #32]
 8019980:	626e      	str	r6, [r5, #36]	; 0x24
 8019982:	46c1      	mov	r9, r8
 8019984:	4637      	mov	r7, r6
 8019986:	4631      	mov	r1, r6
 8019988:	b942      	cbnz	r2, 801999c <EwReclaimMemory+0x44>
 801998a:	b10e      	cbz	r6, 8019990 <EwReclaimMemory+0x38>
 801998c:	f001 fbf8 	bl	801b180 <EwDiscardSignals>
 8019990:	463c      	mov	r4, r7
 8019992:	2c01      	cmp	r4, #1
 8019994:	f000 8092 	beq.w	8019abc <EwReclaimMemory+0x164>
 8019998:	4622      	mov	r2, r4
 801999a:	e013      	b.n	80199c4 <EwReclaimMemory+0x6c>
 801999c:	6893      	ldr	r3, [r2, #8]
 801999e:	6858      	ldr	r0, [r3, #4]
 80199a0:	b968      	cbnz	r0, 80199be <EwReclaimMemory+0x66>
 80199a2:	f1b9 0f00 	cmp.w	r9, #0
 80199a6:	d006      	beq.n	80199b6 <EwReclaimMemory+0x5e>
 80199a8:	f8c9 3004 	str.w	r3, [r9, #4]
 80199ac:	4606      	mov	r6, r0
 80199ae:	6059      	str	r1, [r3, #4]
 80199b0:	6812      	ldr	r2, [r2, #0]
 80199b2:	4699      	mov	r9, r3
 80199b4:	e7e8      	b.n	8019988 <EwReclaimMemory+0x30>
 80199b6:	6059      	str	r1, [r3, #4]
 80199b8:	464e      	mov	r6, r9
 80199ba:	461f      	mov	r7, r3
 80199bc:	e7f8      	b.n	80199b0 <EwReclaimMemory+0x58>
 80199be:	464b      	mov	r3, r9
 80199c0:	e7f6      	b.n	80199b0 <EwReclaimMemory+0x58>
 80199c2:	46a1      	mov	r9, r4
 80199c4:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
 80199c8:	b15b      	cbz	r3, 80199e2 <EwReclaimMemory+0x8a>
 80199ca:	681c      	ldr	r4, [r3, #0]
 80199cc:	9401      	str	r4, [sp, #4]
 80199ce:	b130      	cbz	r0, 80199de <EwReclaimMemory+0x86>
 80199d0:	6844      	ldr	r4, [r0, #4]
 80199d2:	b924      	cbnz	r4, 80199de <EwReclaimMemory+0x86>
 80199d4:	2101      	movs	r1, #1
 80199d6:	f8c9 0004 	str.w	r0, [r9, #4]
 80199da:	6041      	str	r1, [r0, #4]
 80199dc:	4681      	mov	r9, r0
 80199de:	464c      	mov	r4, r9
 80199e0:	e05d      	b.n	8019a9e <EwReclaimMemory+0x146>
 80199e2:	9301      	str	r3, [sp, #4]
 80199e4:	e7f3      	b.n	80199ce <EwReclaimMemory+0x76>
 80199e6:	9801      	ldr	r0, [sp, #4]
 80199e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80199ec:	4601      	mov	r1, r0
 80199ee:	4875      	ldr	r0, [pc, #468]	; (8019bc4 <EwReclaimMemory+0x26c>)
 80199f0:	4281      	cmp	r1, r0
 80199f2:	d10d      	bne.n	8019a10 <EwReclaimMemory+0xb8>
 80199f4:	68d8      	ldr	r0, [r3, #12]
 80199f6:	b158      	cbz	r0, 8019a10 <EwReclaimMemory+0xb8>
 80199f8:	6840      	ldr	r0, [r0, #4]
 80199fa:	b148      	cbz	r0, 8019a10 <EwReclaimMemory+0xb8>
 80199fc:	f8db 0010 	ldr.w	r0, [fp, #16]
 8019a00:	5810      	ldr	r0, [r2, r0]
 8019a02:	b128      	cbz	r0, 8019a10 <EwReclaimMemory+0xb8>
 8019a04:	6841      	ldr	r1, [r0, #4]
 8019a06:	b919      	cbnz	r1, 8019a10 <EwReclaimMemory+0xb8>
 8019a08:	2101      	movs	r1, #1
 8019a0a:	6060      	str	r0, [r4, #4]
 8019a0c:	6041      	str	r1, [r0, #4]
 8019a0e:	4604      	mov	r4, r0
 8019a10:	e9d3 0c05 	ldrd	r0, ip, [r3, #20]
 8019a14:	b158      	cbz	r0, 8019a2e <EwReclaimMemory+0xd6>
 8019a16:	4560      	cmp	r0, ip
 8019a18:	d009      	beq.n	8019a2e <EwReclaimMemory+0xd6>
 8019a1a:	f1bc 0f00 	cmp.w	ip, #0
 8019a1e:	d169      	bne.n	8019af4 <EwReclaimMemory+0x19c>
 8019a20:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8019a24:	4492      	add	sl, r2
 8019a26:	eb02 0e00 	add.w	lr, r2, r0
 8019a2a:	45f2      	cmp	sl, lr
 8019a2c:	d864      	bhi.n	8019af8 <EwReclaimMemory+0x1a0>
 8019a2e:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 8019a32:	f1bc 0f00 	cmp.w	ip, #0
 8019a36:	d00a      	beq.n	8019a4e <EwReclaimMemory+0xf6>
 8019a38:	45f4      	cmp	ip, lr
 8019a3a:	d008      	beq.n	8019a4e <EwReclaimMemory+0xf6>
 8019a3c:	f1be 0f00 	cmp.w	lr, #0
 8019a40:	d166      	bne.n	8019b10 <EwReclaimMemory+0x1b8>
 8019a42:	6918      	ldr	r0, [r3, #16]
 8019a44:	4494      	add	ip, r2
 8019a46:	eb02 0a00 	add.w	sl, r2, r0
 8019a4a:	45e2      	cmp	sl, ip
 8019a4c:	d862      	bhi.n	8019b14 <EwReclaimMemory+0x1bc>
 8019a4e:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8019a52:	f1be 0f00 	cmp.w	lr, #0
 8019a56:	d00a      	beq.n	8019a6e <EwReclaimMemory+0x116>
 8019a58:	45f4      	cmp	ip, lr
 8019a5a:	d008      	beq.n	8019a6e <EwReclaimMemory+0x116>
 8019a5c:	f1bc 0f00 	cmp.w	ip, #0
 8019a60:	d164      	bne.n	8019b2c <EwReclaimMemory+0x1d4>
 8019a62:	6918      	ldr	r0, [r3, #16]
 8019a64:	4496      	add	lr, r2
 8019a66:	eb02 0a00 	add.w	sl, r2, r0
 8019a6a:	45f2      	cmp	sl, lr
 8019a6c:	d860      	bhi.n	8019b30 <EwReclaimMemory+0x1d8>
 8019a6e:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
 8019a72:	f1bc 0f00 	cmp.w	ip, #0
 8019a76:	d00e      	beq.n	8019a96 <EwReclaimMemory+0x13e>
 8019a78:	45e6      	cmp	lr, ip
 8019a7a:	d077      	beq.n	8019b6c <EwReclaimMemory+0x214>
 8019a7c:	f1be 0f00 	cmp.w	lr, #0
 8019a80:	d162      	bne.n	8019b48 <EwReclaimMemory+0x1f0>
 8019a82:	6918      	ldr	r0, [r3, #16]
 8019a84:	4494      	add	ip, r2
 8019a86:	eb02 0900 	add.w	r9, r2, r0
 8019a8a:	45e1      	cmp	r9, ip
 8019a8c:	d903      	bls.n	8019a96 <EwReclaimMemory+0x13e>
 8019a8e:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d15a      	bne.n	8019b4c <EwReclaimMemory+0x1f4>
 8019a96:	f1be 0f00 	cmp.w	lr, #0
 8019a9a:	d167      	bne.n	8019b6c <EwReclaimMemory+0x214>
 8019a9c:	465b      	mov	r3, fp
 8019a9e:	b11b      	cbz	r3, 8019aa8 <EwReclaimMemory+0x150>
 8019aa0:	6818      	ldr	r0, [r3, #0]
 8019aa2:	9901      	ldr	r1, [sp, #4]
 8019aa4:	4288      	cmp	r0, r1
 8019aa6:	d09e      	beq.n	80199e6 <EwReclaimMemory+0x8e>
 8019aa8:	6852      	ldr	r2, [r2, #4]
 8019aaa:	2a01      	cmp	r2, #1
 8019aac:	d189      	bne.n	80199c2 <EwReclaimMemory+0x6a>
 8019aae:	4620      	mov	r0, r4
 8019ab0:	f001 fb3c 	bl	801b12c <EwMarkSignals>
 8019ab4:	4284      	cmp	r4, r0
 8019ab6:	4681      	mov	r9, r0
 8019ab8:	f47f af6b 	bne.w	8019992 <EwReclaimMemory+0x3a>
 8019abc:	f001 fb6c 	bl	801b198 <EwDisposeObservers>
 8019ac0:	f001 fb7c 	bl	801b1bc <EwDisposeSignals>
 8019ac4:	4c40      	ldr	r4, [pc, #256]	; (8019bc8 <EwReclaimMemory+0x270>)
 8019ac6:	6820      	ldr	r0, [r4, #0]
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	d16a      	bne.n	8019ba2 <EwReclaimMemory+0x24a>
 8019acc:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8019bc0 <EwReclaimMemory+0x268>
 8019ad0:	f8d9 4000 	ldr.w	r4, [r9]
 8019ad4:	2c00      	cmp	r4, #0
 8019ad6:	d179      	bne.n	8019bcc <EwReclaimMemory+0x274>
 8019ad8:	2f01      	cmp	r7, #1
 8019ada:	f200 8091 	bhi.w	8019c00 <EwReclaimMemory+0x2a8>
 8019ade:	4630      	mov	r0, r6
 8019ae0:	f001 fffe 	bl	801bae0 <EwDisposeStrings>
 8019ae4:	4480      	add	r8, r0
 8019ae6:	b10e      	cbz	r6, 8019aec <EwReclaimMemory+0x194>
 8019ae8:	f000 feca 	bl	801a880 <EwReleaseDecompressBuffers>
 8019aec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019aee:	3b01      	subs	r3, #1
 8019af0:	626b      	str	r3, [r5, #36]	; 0x24
 8019af2:	e73f      	b.n	8019974 <EwReclaimMemory+0x1c>
 8019af4:	46e2      	mov	sl, ip
 8019af6:	e795      	b.n	8019a24 <EwReclaimMemory+0xcc>
 8019af8:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019afc:	2800      	cmp	r0, #0
 8019afe:	d094      	beq.n	8019a2a <EwReclaimMemory+0xd2>
 8019b00:	6841      	ldr	r1, [r0, #4]
 8019b02:	2900      	cmp	r1, #0
 8019b04:	d191      	bne.n	8019a2a <EwReclaimMemory+0xd2>
 8019b06:	2101      	movs	r1, #1
 8019b08:	6060      	str	r0, [r4, #4]
 8019b0a:	6041      	str	r1, [r0, #4]
 8019b0c:	4604      	mov	r4, r0
 8019b0e:	e78c      	b.n	8019a2a <EwReclaimMemory+0xd2>
 8019b10:	4670      	mov	r0, lr
 8019b12:	e797      	b.n	8019a44 <EwReclaimMemory+0xec>
 8019b14:	f8dc 0000 	ldr.w	r0, [ip]
 8019b18:	b128      	cbz	r0, 8019b26 <EwReclaimMemory+0x1ce>
 8019b1a:	6841      	ldr	r1, [r0, #4]
 8019b1c:	b919      	cbnz	r1, 8019b26 <EwReclaimMemory+0x1ce>
 8019b1e:	2101      	movs	r1, #1
 8019b20:	6060      	str	r0, [r4, #4]
 8019b22:	6041      	str	r1, [r0, #4]
 8019b24:	4604      	mov	r4, r0
 8019b26:	f10c 0c08 	add.w	ip, ip, #8
 8019b2a:	e78e      	b.n	8019a4a <EwReclaimMemory+0xf2>
 8019b2c:	4660      	mov	r0, ip
 8019b2e:	e799      	b.n	8019a64 <EwReclaimMemory+0x10c>
 8019b30:	f8de 0000 	ldr.w	r0, [lr]
 8019b34:	b128      	cbz	r0, 8019b42 <EwReclaimMemory+0x1ea>
 8019b36:	6841      	ldr	r1, [r0, #4]
 8019b38:	b919      	cbnz	r1, 8019b42 <EwReclaimMemory+0x1ea>
 8019b3a:	2101      	movs	r1, #1
 8019b3c:	6060      	str	r0, [r4, #4]
 8019b3e:	6041      	str	r1, [r0, #4]
 8019b40:	4604      	mov	r4, r0
 8019b42:	f10e 0e0c 	add.w	lr, lr, #12
 8019b46:	e790      	b.n	8019a6a <EwReclaimMemory+0x112>
 8019b48:	4670      	mov	r0, lr
 8019b4a:	e79b      	b.n	8019a84 <EwReclaimMemory+0x12c>
 8019b4c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8019b50:	b929      	cbnz	r1, 8019b5e <EwReclaimMemory+0x206>
 8019b52:	2101      	movs	r1, #1
 8019b54:	f8c4 c004 	str.w	ip, [r4, #4]
 8019b58:	f8cc 1004 	str.w	r1, [ip, #4]
 8019b5c:	4664      	mov	r4, ip
 8019b5e:	f8dc 1000 	ldr.w	r1, [ip]
 8019b62:	4281      	cmp	r1, r0
 8019b64:	d197      	bne.n	8019a96 <EwReclaimMemory+0x13e>
 8019b66:	6900      	ldr	r0, [r0, #16]
 8019b68:	4484      	add	ip, r0
 8019b6a:	e78e      	b.n	8019a8a <EwReclaimMemory+0x132>
 8019b6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8019b6e:	4586      	cmp	lr, r0
 8019b70:	d094      	beq.n	8019a9c <EwReclaimMemory+0x144>
 8019b72:	b900      	cbnz	r0, 8019b76 <EwReclaimMemory+0x21e>
 8019b74:	6918      	ldr	r0, [r3, #16]
 8019b76:	1813      	adds	r3, r2, r0
 8019b78:	4496      	add	lr, r2
 8019b7a:	459e      	cmp	lr, r3
 8019b7c:	d28e      	bcs.n	8019a9c <EwReclaimMemory+0x144>
 8019b7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019b82:	2800      	cmp	r0, #0
 8019b84:	d0f9      	beq.n	8019b7a <EwReclaimMemory+0x222>
 8019b86:	f930 9c02 	ldrsh.w	r9, [r0, #-2]
 8019b8a:	f830 cc02 	ldrh.w	ip, [r0, #-2]
 8019b8e:	f1b9 0f00 	cmp.w	r9, #0
 8019b92:	bfa2      	ittt	ge
 8019b94:	ea6f 4c4c 	mvnge.w	ip, ip, lsl #17
 8019b98:	ea6f 4c5c 	mvnge.w	ip, ip, lsr #17
 8019b9c:	f820 cc02 	strhge.w	ip, [r0, #-2]
 8019ba0:	e7eb      	b.n	8019b7a <EwReclaimMemory+0x222>
 8019ba2:	6883      	ldr	r3, [r0, #8]
 8019ba4:	b14b      	cbz	r3, 8019bba <EwReclaimMemory+0x262>
 8019ba6:	685b      	ldr	r3, [r3, #4]
 8019ba8:	b93b      	cbnz	r3, 8019bba <EwReclaimMemory+0x262>
 8019baa:	6803      	ldr	r3, [r0, #0]
 8019bac:	6023      	str	r3, [r4, #0]
 8019bae:	f00f fde1 	bl	8029774 <EwFree>
 8019bb2:	686b      	ldr	r3, [r5, #4]
 8019bb4:	3b0c      	subs	r3, #12
 8019bb6:	606b      	str	r3, [r5, #4]
 8019bb8:	e785      	b.n	8019ac6 <EwReclaimMemory+0x16e>
 8019bba:	4604      	mov	r4, r0
 8019bbc:	e783      	b.n	8019ac6 <EwReclaimMemory+0x16e>
 8019bbe:	bf00      	nop
 8019bc0:	200002d4 	.word	0x200002d4
 8019bc4:	434c4153 	.word	0x434c4153
 8019bc8:	200002f0 	.word	0x200002f0
 8019bcc:	68a3      	ldr	r3, [r4, #8]
 8019bce:	b9ab      	cbnz	r3, 8019bfc <EwReclaimMemory+0x2a4>
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	6823      	ldr	r3, [r4, #0]
 8019bd4:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8019bd8:	f8c9 3000 	str.w	r3, [r9]
 8019bdc:	686b      	ldr	r3, [r5, #4]
 8019bde:	690a      	ldr	r2, [r1, #16]
 8019be0:	3b04      	subs	r3, #4
 8019be2:	1a9b      	subs	r3, r3, r2
 8019be4:	606b      	str	r3, [r5, #4]
 8019be6:	68ab      	ldr	r3, [r5, #8]
 8019be8:	3b01      	subs	r3, #1
 8019bea:	60ab      	str	r3, [r5, #8]
 8019bec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8019bee:	4798      	blx	r3
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f00f fdbf 	bl	8029774 <EwFree>
 8019bf6:	f108 0801 	add.w	r8, r8, #1
 8019bfa:	e769      	b.n	8019ad0 <EwReclaimMemory+0x178>
 8019bfc:	46a1      	mov	r9, r4
 8019bfe:	e767      	b.n	8019ad0 <EwReclaimMemory+0x178>
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	607c      	str	r4, [r7, #4]
 8019c04:	461f      	mov	r7, r3
 8019c06:	e767      	b.n	8019ad8 <EwReclaimMemory+0x180>

08019c08 <EwImmediateReclaimMemory>:
 8019c08:	2000      	movs	r0, #0
 8019c0a:	4770      	bx	lr

08019c0c <EwTestImmediateReclaimMemory>:
 8019c0c:	2000      	movs	r0, #0
 8019c0e:	4770      	bx	lr

08019c10 <EwReconstructObjects>:
 8019c10:	4b05      	ldr	r3, [pc, #20]	; (8019c28 <EwReconstructObjects+0x18>)
 8019c12:	b510      	push	{r4, lr}
 8019c14:	681c      	ldr	r4, [r3, #0]
 8019c16:	b904      	cbnz	r4, 8019c1a <EwReconstructObjects+0xa>
 8019c18:	bd10      	pop	{r4, pc}
 8019c1a:	6863      	ldr	r3, [r4, #4]
 8019c1c:	1d20      	adds	r0, r4, #4
 8019c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c20:	4798      	blx	r3
 8019c22:	6824      	ldr	r4, [r4, #0]
 8019c24:	e7f7      	b.n	8019c16 <EwReconstructObjects+0x6>
 8019c26:	bf00      	nop
 8019c28:	200002d4 	.word	0x200002d4

08019c2c <EwPrintProfilerStatistic>:
 8019c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c2e:	4c5f      	ldr	r4, [pc, #380]	; (8019dac <EwPrintProfilerStatistic+0x180>)
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d14e      	bne.n	8019cd2 <EwPrintProfilerStatistic+0xa6>
 8019c34:	485e      	ldr	r0, [pc, #376]	; (8019db0 <EwPrintProfilerStatistic+0x184>)
 8019c36:	4e5f      	ldr	r6, [pc, #380]	; (8019db4 <EwPrintProfilerStatistic+0x188>)
 8019c38:	f7fe fbfc 	bl	8018434 <EwPrint>
 8019c3c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8019c40:	6861      	ldr	r1, [r4, #4]
 8019c42:	485d      	ldr	r0, [pc, #372]	; (8019db8 <EwPrintProfilerStatistic+0x18c>)
 8019c44:	f7fe fbf6 	bl	8018434 <EwPrint>
 8019c48:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8019c4c:	6921      	ldr	r1, [r4, #16]
 8019c4e:	485b      	ldr	r0, [pc, #364]	; (8019dbc <EwPrintProfilerStatistic+0x190>)
 8019c50:	f7fe fbf0 	bl	8018434 <EwPrint>
 8019c54:	e9d4 020c 	ldrd	r0, r2, [r4, #48]	; 0x30
 8019c58:	6961      	ldr	r1, [r4, #20]
 8019c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019c5c:	1a82      	subs	r2, r0, r2
 8019c5e:	1ac9      	subs	r1, r1, r3
 8019c60:	4857      	ldr	r0, [pc, #348]	; (8019dc0 <EwPrintProfilerStatistic+0x194>)
 8019c62:	f7fe fbe7 	bl	8018434 <EwPrint>
 8019c66:	6831      	ldr	r1, [r6, #0]
 8019c68:	2900      	cmp	r1, #0
 8019c6a:	dd09      	ble.n	8019c80 <EwPrintProfilerStatistic+0x54>
 8019c6c:	4d55      	ldr	r5, [pc, #340]	; (8019dc4 <EwPrintProfilerStatistic+0x198>)
 8019c6e:	4b56      	ldr	r3, [pc, #344]	; (8019dc8 <EwPrintProfilerStatistic+0x19c>)
 8019c70:	682a      	ldr	r2, [r5, #0]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	4855      	ldr	r0, [pc, #340]	; (8019dcc <EwPrintProfilerStatistic+0x1a0>)
 8019c76:	f7fe fbdd 	bl	8018434 <EwPrint>
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	6033      	str	r3, [r6, #0]
 8019c7e:	602b      	str	r3, [r5, #0]
 8019c80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019c82:	2900      	cmp	r1, #0
 8019c84:	dd02      	ble.n	8019c8c <EwPrintProfilerStatistic+0x60>
 8019c86:	4852      	ldr	r0, [pc, #328]	; (8019dd0 <EwPrintProfilerStatistic+0x1a4>)
 8019c88:	f7fe fbd4 	bl	8018434 <EwPrint>
 8019c8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019c8e:	2900      	cmp	r1, #0
 8019c90:	dd02      	ble.n	8019c98 <EwPrintProfilerStatistic+0x6c>
 8019c92:	4850      	ldr	r0, [pc, #320]	; (8019dd4 <EwPrintProfilerStatistic+0x1a8>)
 8019c94:	f7fe fbce 	bl	8018434 <EwPrint>
 8019c98:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019c9a:	2900      	cmp	r1, #0
 8019c9c:	dd02      	ble.n	8019ca4 <EwPrintProfilerStatistic+0x78>
 8019c9e:	484e      	ldr	r0, [pc, #312]	; (8019dd8 <EwPrintProfilerStatistic+0x1ac>)
 8019ca0:	f7fe fbc8 	bl	8018434 <EwPrint>
 8019ca4:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 8019ca8:	6860      	ldr	r0, [r4, #4]
 8019caa:	69a2      	ldr	r2, [r4, #24]
 8019cac:	441a      	add	r2, r3
 8019cae:	4403      	add	r3, r0
 8019cb0:	6920      	ldr	r0, [r4, #16]
 8019cb2:	4403      	add	r3, r0
 8019cb4:	6960      	ldr	r0, [r4, #20]
 8019cb6:	4403      	add	r3, r0
 8019cb8:	440a      	add	r2, r1
 8019cba:	4848      	ldr	r0, [pc, #288]	; (8019ddc <EwPrintProfilerStatistic+0x1b0>)
 8019cbc:	4419      	add	r1, r3
 8019cbe:	f7fe fbb9 	bl	8018434 <EwPrint>
 8019cc2:	483b      	ldr	r0, [pc, #236]	; (8019db0 <EwPrintProfilerStatistic+0x184>)
 8019cc4:	f7fe fbb6 	bl	8018434 <EwPrint>
 8019cc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	d143      	bne.n	8019d56 <EwPrintProfilerStatistic+0x12a>
 8019cce:	63e0      	str	r0, [r4, #60]	; 0x3c
 8019cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cd2:	6825      	ldr	r5, [r4, #0]
 8019cd4:	2600      	movs	r6, #0
 8019cd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019cd8:	2d00      	cmp	r5, #0
 8019cda:	d04e      	beq.n	8019d7a <EwPrintProfilerStatistic+0x14e>
 8019cdc:	6869      	ldr	r1, [r5, #4]
 8019cde:	4610      	mov	r0, r2
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	d040      	beq.n	8019d66 <EwPrintProfilerStatistic+0x13a>
 8019ce4:	6883      	ldr	r3, [r0, #8]
 8019ce6:	4299      	cmp	r1, r3
 8019ce8:	d10e      	bne.n	8019d08 <EwPrintProfilerStatistic+0xdc>
 8019cea:	6843      	ldr	r3, [r0, #4]
 8019cec:	b13b      	cbz	r3, 8019cfe <EwPrintProfilerStatistic+0xd2>
 8019cee:	6801      	ldr	r1, [r0, #0]
 8019cf0:	6019      	str	r1, [r3, #0]
 8019cf2:	b101      	cbz	r1, 8019cf6 <EwPrintProfilerStatistic+0xca>
 8019cf4:	604b      	str	r3, [r1, #4]
 8019cf6:	e9c0 2600 	strd	r2, r6, [r0]
 8019cfa:	63e0      	str	r0, [r4, #60]	; 0x3c
 8019cfc:	6050      	str	r0, [r2, #4]
 8019cfe:	68c3      	ldr	r3, [r0, #12]
 8019d00:	682d      	ldr	r5, [r5, #0]
 8019d02:	3301      	adds	r3, #1
 8019d04:	60c3      	str	r3, [r0, #12]
 8019d06:	e7e6      	b.n	8019cd6 <EwPrintProfilerStatistic+0xaa>
 8019d08:	6800      	ldr	r0, [r0, #0]
 8019d0a:	e7e9      	b.n	8019ce0 <EwPrintProfilerStatistic+0xb4>
 8019d0c:	686b      	ldr	r3, [r5, #4]
 8019d0e:	e9c0 3602 	strd	r3, r6, [r0, #8]
 8019d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d14:	e9c0 3600 	strd	r3, r6, [r0]
 8019d18:	b103      	cbz	r3, 8019d1c <EwPrintProfilerStatistic+0xf0>
 8019d1a:	6058      	str	r0, [r3, #4]
 8019d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d1e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8019d20:	3310      	adds	r3, #16
 8019d22:	6423      	str	r3, [r4, #64]	; 0x40
 8019d24:	e7eb      	b.n	8019cfe <EwPrintProfilerStatistic+0xd2>
 8019d26:	6859      	ldr	r1, [r3, #4]
 8019d28:	b181      	cbz	r1, 8019d4c <EwPrintProfilerStatistic+0x120>
 8019d2a:	68cf      	ldr	r7, [r1, #12]
 8019d2c:	68de      	ldr	r6, [r3, #12]
 8019d2e:	42b7      	cmp	r7, r6
 8019d30:	da0c      	bge.n	8019d4c <EwPrintProfilerStatistic+0x120>
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	600a      	str	r2, [r1, #0]
 8019d36:	b102      	cbz	r2, 8019d3a <EwPrintProfilerStatistic+0x10e>
 8019d38:	6051      	str	r1, [r2, #4]
 8019d3a:	685a      	ldr	r2, [r3, #4]
 8019d3c:	601a      	str	r2, [r3, #0]
 8019d3e:	6851      	ldr	r1, [r2, #4]
 8019d40:	6059      	str	r1, [r3, #4]
 8019d42:	6053      	str	r3, [r2, #4]
 8019d44:	685a      	ldr	r2, [r3, #4]
 8019d46:	b11a      	cbz	r2, 8019d50 <EwPrintProfilerStatistic+0x124>
 8019d48:	6013      	str	r3, [r2, #0]
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	e018      	b.n	8019d82 <EwPrintProfilerStatistic+0x156>
 8019d50:	4618      	mov	r0, r3
 8019d52:	2501      	movs	r5, #1
 8019d54:	e7fa      	b.n	8019d4c <EwPrintProfilerStatistic+0x120>
 8019d56:	6805      	ldr	r5, [r0, #0]
 8019d58:	f00f fd0c 	bl	8029774 <EwFree>
 8019d5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d5e:	3b10      	subs	r3, #16
 8019d60:	6423      	str	r3, [r4, #64]	; 0x40
 8019d62:	4628      	mov	r0, r5
 8019d64:	e7b1      	b.n	8019cca <EwPrintProfilerStatistic+0x9e>
 8019d66:	2010      	movs	r0, #16
 8019d68:	f00f fd02 	bl	8029770 <EwAlloc>
 8019d6c:	2800      	cmp	r0, #0
 8019d6e:	d1cd      	bne.n	8019d0c <EwPrintProfilerStatistic+0xe0>
 8019d70:	200d      	movs	r0, #13
 8019d72:	f7fe ff99 	bl	8018ca8 <EwError>
 8019d76:	f00f fcff 	bl	8029778 <EwPanic>
 8019d7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019d7c:	2500      	movs	r5, #0
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2201      	movs	r2, #1
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d1cf      	bne.n	8019d26 <EwPrintProfilerStatistic+0xfa>
 8019d86:	2a00      	cmp	r2, #0
 8019d88:	d0f9      	beq.n	8019d7e <EwPrintProfilerStatistic+0x152>
 8019d8a:	b105      	cbz	r5, 8019d8e <EwPrintProfilerStatistic+0x162>
 8019d8c:	63e0      	str	r0, [r4, #60]	; 0x3c
 8019d8e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8019d90:	4e13      	ldr	r6, [pc, #76]	; (8019de0 <EwPrintProfilerStatistic+0x1b4>)
 8019d92:	2d00      	cmp	r5, #0
 8019d94:	f43f af4e 	beq.w	8019c34 <EwPrintProfilerStatistic+0x8>
 8019d98:	68aa      	ldr	r2, [r5, #8]
 8019d9a:	68e9      	ldr	r1, [r5, #12]
 8019d9c:	6913      	ldr	r3, [r2, #16]
 8019d9e:	6852      	ldr	r2, [r2, #4]
 8019da0:	4630      	mov	r0, r6
 8019da2:	f7fe fb47 	bl	8018434 <EwPrint>
 8019da6:	682d      	ldr	r5, [r5, #0]
 8019da8:	e7f3      	b.n	8019d92 <EwPrintProfilerStatistic+0x166>
 8019daa:	bf00      	nop
 8019dac:	200002d4 	.word	0x200002d4
 8019db0:	0803a269 	.word	0x0803a269
 8019db4:	200001dc 	.word	0x200001dc
 8019db8:	0803a0dd 	.word	0x0803a0dd
 8019dbc:	0803a115 	.word	0x0803a115
 8019dc0:	0803a147 	.word	0x0803a147
 8019dc4:	200001e0 	.word	0x200001e0
 8019dc8:	20000014 	.word	0x20000014
 8019dcc:	0803a1d4 	.word	0x0803a1d4
 8019dd0:	0803a26b 	.word	0x0803a26b
 8019dd4:	0803a2b7 	.word	0x0803a2b7
 8019dd8:	0803a305 	.word	0x0803a305
 8019ddc:	0803a330 	.word	0x0803a330
 8019de0:	0803a1a1 	.word	0x0803a1a1

08019de4 <EwNewPoint>:
 8019de4:	e9c0 1200 	strd	r1, r2, [r0]
 8019de8:	4770      	bx	lr

08019dea <EwCompPoint>:
 8019dea:	b084      	sub	sp, #16
 8019dec:	f10d 0c10 	add.w	ip, sp, #16
 8019df0:	e90c 0003 	stmdb	ip, {r0, r1}
 8019df4:	4669      	mov	r1, sp
 8019df6:	e881 000c 	stmia.w	r1, {r2, r3}
 8019dfa:	9b00      	ldr	r3, [sp, #0]
 8019dfc:	4298      	cmp	r0, r3
 8019dfe:	d106      	bne.n	8019e0e <EwCompPoint+0x24>
 8019e00:	9803      	ldr	r0, [sp, #12]
 8019e02:	9b01      	ldr	r3, [sp, #4]
 8019e04:	1ac0      	subs	r0, r0, r3
 8019e06:	bf18      	it	ne
 8019e08:	2001      	movne	r0, #1
 8019e0a:	b004      	add	sp, #16
 8019e0c:	4770      	bx	lr
 8019e0e:	2001      	movs	r0, #1
 8019e10:	e7fb      	b.n	8019e0a <EwCompPoint+0x20>

08019e12 <EwIsPointNull>:
 8019e12:	b082      	sub	sp, #8
 8019e14:	ab02      	add	r3, sp, #8
 8019e16:	e903 0003 	stmdb	r3, {r0, r1}
 8019e1a:	460b      	mov	r3, r1
 8019e1c:	4303      	orrs	r3, r0
 8019e1e:	bf0c      	ite	eq
 8019e20:	2001      	moveq	r0, #1
 8019e22:	2000      	movne	r0, #0
 8019e24:	b002      	add	sp, #8
 8019e26:	4770      	bx	lr

08019e28 <EwMovePointNeg>:
 8019e28:	b082      	sub	sp, #8
 8019e2a:	b513      	push	{r0, r1, r4, lr}
 8019e2c:	f10d 0c08 	add.w	ip, sp, #8
 8019e30:	e90c 0006 	stmdb	ip, {r1, r2}
 8019e34:	9906      	ldr	r1, [sp, #24]
 8019e36:	9305      	str	r3, [sp, #20]
 8019e38:	1a52      	subs	r2, r2, r1
 8019e3a:	9900      	ldr	r1, [sp, #0]
 8019e3c:	1acb      	subs	r3, r1, r3
 8019e3e:	e9c0 3200 	strd	r3, r2, [r0]
 8019e42:	b002      	add	sp, #8
 8019e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e48:	b002      	add	sp, #8
 8019e4a:	4770      	bx	lr

08019e4c <EwMovePointPos>:
 8019e4c:	b082      	sub	sp, #8
 8019e4e:	b513      	push	{r0, r1, r4, lr}
 8019e50:	f10d 0c08 	add.w	ip, sp, #8
 8019e54:	e90c 0006 	stmdb	ip, {r1, r2}
 8019e58:	9a06      	ldr	r2, [sp, #24]
 8019e5a:	9901      	ldr	r1, [sp, #4]
 8019e5c:	9305      	str	r3, [sp, #20]
 8019e5e:	440a      	add	r2, r1
 8019e60:	9900      	ldr	r1, [sp, #0]
 8019e62:	440b      	add	r3, r1
 8019e64:	e9c0 3200 	strd	r3, r2, [r0]
 8019e68:	b002      	add	sp, #8
 8019e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e6e:	b002      	add	sp, #8
 8019e70:	4770      	bx	lr

08019e72 <EwNegPoint>:
 8019e72:	b082      	sub	sp, #8
 8019e74:	f10d 0c08 	add.w	ip, sp, #8
 8019e78:	e90c 0006 	stmdb	ip, {r1, r2}
 8019e7c:	4252      	negs	r2, r2
 8019e7e:	4249      	negs	r1, r1
 8019e80:	e9c0 1200 	strd	r1, r2, [r0]
 8019e84:	b002      	add	sp, #8
 8019e86:	4770      	bx	lr

08019e88 <EwSetPointX>:
 8019e88:	b513      	push	{r0, r1, r4, lr}
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	4668      	mov	r0, sp
 8019e8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8019e92:	9300      	str	r3, [sp, #0]
 8019e94:	c803      	ldmia	r0, {r0, r1}
 8019e96:	e884 0005 	stmia.w	r4, {r0, r2}
 8019e9a:	4620      	mov	r0, r4
 8019e9c:	b002      	add	sp, #8
 8019e9e:	bd10      	pop	{r4, pc}

08019ea0 <EwSetPointY>:
 8019ea0:	b513      	push	{r0, r1, r4, lr}
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	4668      	mov	r0, sp
 8019ea6:	e880 0006 	stmia.w	r0, {r1, r2}
 8019eaa:	9301      	str	r3, [sp, #4]
 8019eac:	c803      	ldmia	r0, {r0, r1}
 8019eae:	e884 0003 	stmia.w	r4, {r0, r1}
 8019eb2:	4620      	mov	r0, r4
 8019eb4:	b002      	add	sp, #8
 8019eb6:	bd10      	pop	{r4, pc}

08019eb8 <EwGetVariantOfPoint>:
 8019eb8:	b510      	push	{r4, lr}
 8019eba:	4604      	mov	r4, r0
 8019ebc:	4608      	mov	r0, r1
 8019ebe:	210c      	movs	r1, #12
 8019ec0:	f000 fb59 	bl	801a576 <EwGetVariantOf>
 8019ec4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8019ec8:	e884 0003 	stmia.w	r4, {r0, r1}
 8019ecc:	4620      	mov	r0, r4
 8019ece:	bd10      	pop	{r4, pc}

08019ed0 <EwNewRect>:
 8019ed0:	b510      	push	{r4, lr}
 8019ed2:	6083      	str	r3, [r0, #8]
 8019ed4:	9b02      	ldr	r3, [sp, #8]
 8019ed6:	60c3      	str	r3, [r0, #12]
 8019ed8:	e9c0 1200 	strd	r1, r2, [r0]
 8019edc:	bd10      	pop	{r4, pc}

08019ede <EwNewRect2Point>:
 8019ede:	b082      	sub	sp, #8
 8019ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	4668      	mov	r0, sp
 8019ee6:	e880 0006 	stmia.w	r0, {r1, r2}
 8019eea:	ad06      	add	r5, sp, #24
 8019eec:	c803      	ldmia	r0, {r0, r1}
 8019eee:	f845 3f04 	str.w	r3, [r5, #4]!
 8019ef2:	e884 0005 	stmia.w	r4, {r0, r2}
 8019ef6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019efa:	f104 0308 	add.w	r3, r4, #8
 8019efe:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f02:	4620      	mov	r0, r4
 8019f04:	b003      	add	sp, #12
 8019f06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f0a:	b002      	add	sp, #8
 8019f0c:	4770      	bx	lr

08019f0e <EwCompRect>:
 8019f0e:	b084      	sub	sp, #16
 8019f10:	f10d 0c10 	add.w	ip, sp, #16
 8019f14:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8019f18:	9b04      	ldr	r3, [sp, #16]
 8019f1a:	4298      	cmp	r0, r3
 8019f1c:	d10d      	bne.n	8019f3a <EwCompRect+0x2c>
 8019f1e:	9b05      	ldr	r3, [sp, #20]
 8019f20:	4299      	cmp	r1, r3
 8019f22:	d10a      	bne.n	8019f3a <EwCompRect+0x2c>
 8019f24:	9a02      	ldr	r2, [sp, #8]
 8019f26:	9b06      	ldr	r3, [sp, #24]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d106      	bne.n	8019f3a <EwCompRect+0x2c>
 8019f2c:	9803      	ldr	r0, [sp, #12]
 8019f2e:	9b07      	ldr	r3, [sp, #28]
 8019f30:	1ac0      	subs	r0, r0, r3
 8019f32:	bf18      	it	ne
 8019f34:	2001      	movne	r0, #1
 8019f36:	b004      	add	sp, #16
 8019f38:	4770      	bx	lr
 8019f3a:	2001      	movs	r0, #1
 8019f3c:	e7fb      	b.n	8019f36 <EwCompRect+0x28>

08019f3e <EwIsRectNull>:
 8019f3e:	b084      	sub	sp, #16
 8019f40:	f10d 0c10 	add.w	ip, sp, #16
 8019f44:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8019f48:	4603      	mov	r3, r0
 8019f4a:	9a02      	ldr	r2, [sp, #8]
 8019f4c:	430b      	orrs	r3, r1
 8019f4e:	4313      	orrs	r3, r2
 8019f50:	9a03      	ldr	r2, [sp, #12]
 8019f52:	4313      	orrs	r3, r2
 8019f54:	bf0c      	ite	eq
 8019f56:	2001      	moveq	r0, #1
 8019f58:	2000      	movne	r0, #0
 8019f5a:	b004      	add	sp, #16
 8019f5c:	4770      	bx	lr

08019f5e <EwIsPointInRect>:
 8019f5e:	b084      	sub	sp, #16
 8019f60:	f10d 0c10 	add.w	ip, sp, #16
 8019f64:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8019f68:	9b04      	ldr	r3, [sp, #16]
 8019f6a:	4298      	cmp	r0, r3
 8019f6c:	dc0c      	bgt.n	8019f88 <EwIsPointInRect+0x2a>
 8019f6e:	9a02      	ldr	r2, [sp, #8]
 8019f70:	429a      	cmp	r2, r3
 8019f72:	dd09      	ble.n	8019f88 <EwIsPointInRect+0x2a>
 8019f74:	9b05      	ldr	r3, [sp, #20]
 8019f76:	4299      	cmp	r1, r3
 8019f78:	dc06      	bgt.n	8019f88 <EwIsPointInRect+0x2a>
 8019f7a:	9803      	ldr	r0, [sp, #12]
 8019f7c:	4298      	cmp	r0, r3
 8019f7e:	bfd4      	ite	le
 8019f80:	2000      	movle	r0, #0
 8019f82:	2001      	movgt	r0, #1
 8019f84:	b004      	add	sp, #16
 8019f86:	4770      	bx	lr
 8019f88:	2000      	movs	r0, #0
 8019f8a:	e7fb      	b.n	8019f84 <EwIsPointInRect+0x26>

08019f8c <EwIsRectEmpty>:
 8019f8c:	b084      	sub	sp, #16
 8019f8e:	f10d 0c10 	add.w	ip, sp, #16
 8019f92:	4282      	cmp	r2, r0
 8019f94:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8019f98:	dd06      	ble.n	8019fa8 <EwIsRectEmpty+0x1c>
 8019f9a:	9803      	ldr	r0, [sp, #12]
 8019f9c:	4288      	cmp	r0, r1
 8019f9e:	bfcc      	ite	gt
 8019fa0:	2000      	movgt	r0, #0
 8019fa2:	2001      	movle	r0, #1
 8019fa4:	b004      	add	sp, #16
 8019fa6:	4770      	bx	lr
 8019fa8:	2001      	movs	r0, #1
 8019faa:	e7fb      	b.n	8019fa4 <EwIsRectEmpty+0x18>

08019fac <EwInflateRect>:
 8019fac:	b084      	sub	sp, #16
 8019fae:	b570      	push	{r4, r5, r6, lr}
 8019fb0:	ad05      	add	r5, sp, #20
 8019fb2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8019fb6:	e9dd 6309 	ldrd	r6, r3, [sp, #36]	; 0x24
 8019fba:	9d08      	ldr	r5, [sp, #32]
 8019fbc:	1ad1      	subs	r1, r2, r3
 8019fbe:	442b      	add	r3, r5
 8019fc0:	9d05      	ldr	r5, [sp, #20]
 8019fc2:	9a07      	ldr	r2, [sp, #28]
 8019fc4:	1bad      	subs	r5, r5, r6
 8019fc6:	4432      	add	r2, r6
 8019fc8:	e9c0 5100 	strd	r5, r1, [r0]
 8019fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019fd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019fd4:	b004      	add	sp, #16
 8019fd6:	4770      	bx	lr

08019fd8 <EwIntersectRect>:
 8019fd8:	b084      	sub	sp, #16
 8019fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fdc:	ac06      	add	r4, sp, #24
 8019fde:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019fe2:	460c      	mov	r4, r1
 8019fe4:	4611      	mov	r1, r2
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	e9dd 3c09 	ldrd	r3, ip, [sp, #36]	; 0x24
 8019fec:	4294      	cmp	r4, r2
 8019fee:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
 8019ff2:	bfa4      	itt	ge
 8019ff4:	2200      	movge	r2, #0
 8019ff6:	4614      	movge	r4, r2
 8019ff8:	4299      	cmp	r1, r3
 8019ffa:	bfa4      	itt	ge
 8019ffc:	2300      	movge	r3, #0
 8019ffe:	4619      	movge	r1, r3
 801a000:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a002:	45b4      	cmp	ip, r6
 801a004:	bfa4      	itt	ge
 801a006:	2600      	movge	r6, #0
 801a008:	46b4      	movge	ip, r6
 801a00a:	42af      	cmp	r7, r5
 801a00c:	bfa4      	itt	ge
 801a00e:	2500      	movge	r5, #0
 801a010:	462f      	movge	r7, r5
 801a012:	4564      	cmp	r4, ip
 801a014:	bfb8      	it	lt
 801a016:	4664      	movlt	r4, ip
 801a018:	42b2      	cmp	r2, r6
 801a01a:	bfa8      	it	ge
 801a01c:	4632      	movge	r2, r6
 801a01e:	42b9      	cmp	r1, r7
 801a020:	bfb8      	it	lt
 801a022:	4639      	movlt	r1, r7
 801a024:	42ab      	cmp	r3, r5
 801a026:	bfa8      	it	ge
 801a028:	462b      	movge	r3, r5
 801a02a:	42a2      	cmp	r2, r4
 801a02c:	bfdc      	itt	le
 801a02e:	2200      	movle	r2, #0
 801a030:	4614      	movle	r4, r2
 801a032:	428b      	cmp	r3, r1
 801a034:	bfdc      	itt	le
 801a036:	2300      	movle	r3, #0
 801a038:	4619      	movle	r1, r3
 801a03a:	e9c0 4100 	strd	r4, r1, [r0]
 801a03e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a042:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a046:	b004      	add	sp, #16
 801a048:	4770      	bx	lr

0801a04a <EwUnionRect>:
 801a04a:	b084      	sub	sp, #16
 801a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a04e:	ac06      	add	r4, sp, #24
 801a050:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801a054:	460c      	mov	r4, r1
 801a056:	4611      	mov	r1, r2
 801a058:	461a      	mov	r2, r3
 801a05a:	e9dd 3c09 	ldrd	r3, ip, [sp, #36]	; 0x24
 801a05e:	4294      	cmp	r4, r2
 801a060:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
 801a064:	bfa4      	itt	ge
 801a066:	2200      	movge	r2, #0
 801a068:	4614      	movge	r4, r2
 801a06a:	4299      	cmp	r1, r3
 801a06c:	bfa8      	it	ge
 801a06e:	2300      	movge	r3, #0
 801a070:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a072:	bfa8      	it	ge
 801a074:	4619      	movge	r1, r3
 801a076:	45b4      	cmp	ip, r6
 801a078:	bfa4      	itt	ge
 801a07a:	2600      	movge	r6, #0
 801a07c:	46b4      	movge	ip, r6
 801a07e:	42af      	cmp	r7, r5
 801a080:	bfa4      	itt	ge
 801a082:	2500      	movge	r5, #0
 801a084:	462f      	movge	r7, r5
 801a086:	4294      	cmp	r4, r2
 801a088:	d001      	beq.n	801a08e <EwUnionRect+0x44>
 801a08a:	4299      	cmp	r1, r3
 801a08c:	d107      	bne.n	801a09e <EwUnionRect+0x54>
 801a08e:	e9c0 c700 	strd	ip, r7, [r0]
 801a092:	e9c0 6502 	strd	r6, r5, [r0, #8]
 801a096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a09a:	b004      	add	sp, #16
 801a09c:	4770      	bx	lr
 801a09e:	45b4      	cmp	ip, r6
 801a0a0:	d001      	beq.n	801a0a6 <EwUnionRect+0x5c>
 801a0a2:	42af      	cmp	r7, r5
 801a0a4:	d104      	bne.n	801a0b0 <EwUnionRect+0x66>
 801a0a6:	e9c0 4100 	strd	r4, r1, [r0]
 801a0aa:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a0ae:	e7f2      	b.n	801a096 <EwUnionRect+0x4c>
 801a0b0:	4564      	cmp	r4, ip
 801a0b2:	bfa8      	it	ge
 801a0b4:	4664      	movge	r4, ip
 801a0b6:	42b2      	cmp	r2, r6
 801a0b8:	bfb8      	it	lt
 801a0ba:	4632      	movlt	r2, r6
 801a0bc:	42b9      	cmp	r1, r7
 801a0be:	bfa8      	it	ge
 801a0c0:	4639      	movge	r1, r7
 801a0c2:	42ab      	cmp	r3, r5
 801a0c4:	bfb8      	it	lt
 801a0c6:	462b      	movlt	r3, r5
 801a0c8:	42a2      	cmp	r2, r4
 801a0ca:	bfdc      	itt	le
 801a0cc:	2200      	movle	r2, #0
 801a0ce:	4614      	movle	r4, r2
 801a0d0:	428b      	cmp	r3, r1
 801a0d2:	bfdc      	itt	le
 801a0d4:	2300      	movle	r3, #0
 801a0d6:	4619      	movle	r1, r3
 801a0d8:	e7e5      	b.n	801a0a6 <EwUnionRect+0x5c>

0801a0da <EwIntersectRect2>:
 801a0da:	b084      	sub	sp, #16
 801a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0de:	ac06      	add	r4, sp, #24
 801a0e0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801a0e4:	460c      	mov	r4, r1
 801a0e6:	4611      	mov	r1, r2
 801a0e8:	461a      	mov	r2, r3
 801a0ea:	e9dd 3c09 	ldrd	r3, ip, [sp, #36]	; 0x24
 801a0ee:	4294      	cmp	r4, r2
 801a0f0:	e9dd 760b 	ldrd	r7, r6, [sp, #44]	; 0x2c
 801a0f4:	bfa4      	itt	ge
 801a0f6:	2200      	movge	r2, #0
 801a0f8:	4614      	movge	r4, r2
 801a0fa:	4299      	cmp	r1, r3
 801a0fc:	bfa8      	it	ge
 801a0fe:	2300      	movge	r3, #0
 801a100:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a102:	bfa8      	it	ge
 801a104:	4619      	movge	r1, r3
 801a106:	45b4      	cmp	ip, r6
 801a108:	bfa4      	itt	ge
 801a10a:	2600      	movge	r6, #0
 801a10c:	46b4      	movge	ip, r6
 801a10e:	42af      	cmp	r7, r5
 801a110:	bfa4      	itt	ge
 801a112:	2500      	movge	r5, #0
 801a114:	462f      	movge	r7, r5
 801a116:	4294      	cmp	r4, r2
 801a118:	d001      	beq.n	801a11e <EwIntersectRect2+0x44>
 801a11a:	4299      	cmp	r1, r3
 801a11c:	d107      	bne.n	801a12e <EwIntersectRect2+0x54>
 801a11e:	e9c0 c700 	strd	ip, r7, [r0]
 801a122:	e9c0 6502 	strd	r6, r5, [r0, #8]
 801a126:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a12a:	b004      	add	sp, #16
 801a12c:	4770      	bx	lr
 801a12e:	45b4      	cmp	ip, r6
 801a130:	d001      	beq.n	801a136 <EwIntersectRect2+0x5c>
 801a132:	42af      	cmp	r7, r5
 801a134:	d104      	bne.n	801a140 <EwIntersectRect2+0x66>
 801a136:	e9c0 4100 	strd	r4, r1, [r0]
 801a13a:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a13e:	e7f2      	b.n	801a126 <EwIntersectRect2+0x4c>
 801a140:	4564      	cmp	r4, ip
 801a142:	bfb8      	it	lt
 801a144:	4664      	movlt	r4, ip
 801a146:	42b2      	cmp	r2, r6
 801a148:	bfa8      	it	ge
 801a14a:	4632      	movge	r2, r6
 801a14c:	42b9      	cmp	r1, r7
 801a14e:	bfb8      	it	lt
 801a150:	4639      	movlt	r1, r7
 801a152:	42ab      	cmp	r3, r5
 801a154:	bfa8      	it	ge
 801a156:	462b      	movge	r3, r5
 801a158:	42a2      	cmp	r2, r4
 801a15a:	bfdc      	itt	le
 801a15c:	2200      	movle	r2, #0
 801a15e:	4614      	movle	r4, r2
 801a160:	428b      	cmp	r3, r1
 801a162:	bfdc      	itt	le
 801a164:	2300      	movle	r3, #0
 801a166:	4619      	movle	r1, r3
 801a168:	e7e5      	b.n	801a136 <EwIntersectRect2+0x5c>

0801a16a <EwMoveRectNeg>:
 801a16a:	b084      	sub	sp, #16
 801a16c:	b570      	push	{r4, r5, r6, lr}
 801a16e:	ad05      	add	r5, sp, #20
 801a170:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a174:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	; 0x24
 801a178:	9906      	ldr	r1, [sp, #24]
 801a17a:	1b9a      	subs	r2, r3, r6
 801a17c:	9b08      	ldr	r3, [sp, #32]
 801a17e:	1b49      	subs	r1, r1, r5
 801a180:	1b5b      	subs	r3, r3, r5
 801a182:	9d05      	ldr	r5, [sp, #20]
 801a184:	1bad      	subs	r5, r5, r6
 801a186:	e9c0 5100 	strd	r5, r1, [r0]
 801a18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a18e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a192:	b004      	add	sp, #16
 801a194:	4770      	bx	lr

0801a196 <EwMoveRectPos>:
 801a196:	b084      	sub	sp, #16
 801a198:	b570      	push	{r4, r5, r6, lr}
 801a19a:	ad05      	add	r5, sp, #20
 801a19c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a1a0:	e9dd 6309 	ldrd	r6, r3, [sp, #36]	; 0x24
 801a1a4:	9d08      	ldr	r5, [sp, #32]
 801a1a6:	9906      	ldr	r1, [sp, #24]
 801a1a8:	9a07      	ldr	r2, [sp, #28]
 801a1aa:	4419      	add	r1, r3
 801a1ac:	442b      	add	r3, r5
 801a1ae:	9d05      	ldr	r5, [sp, #20]
 801a1b0:	4435      	add	r5, r6
 801a1b2:	4432      	add	r2, r6
 801a1b4:	e9c0 5100 	strd	r5, r1, [r0]
 801a1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a1c0:	b004      	add	sp, #16
 801a1c2:	4770      	bx	lr

0801a1c4 <EwGetRectH>:
 801a1c4:	b084      	sub	sp, #16
 801a1c6:	f10d 0c10 	add.w	ip, sp, #16
 801a1ca:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801a1ce:	1a58      	subs	r0, r3, r1
 801a1d0:	b004      	add	sp, #16
 801a1d2:	4770      	bx	lr

0801a1d4 <EwGetRectW>:
 801a1d4:	b084      	sub	sp, #16
 801a1d6:	f10d 0c10 	add.w	ip, sp, #16
 801a1da:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801a1de:	9b00      	ldr	r3, [sp, #0]
 801a1e0:	1ad0      	subs	r0, r2, r3
 801a1e2:	b004      	add	sp, #16
 801a1e4:	4770      	bx	lr

0801a1e6 <EwGetRectArea>:
 801a1e6:	b084      	sub	sp, #16
 801a1e8:	f10d 0c10 	add.w	ip, sp, #16
 801a1ec:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801a1f0:	9b00      	ldr	r3, [sp, #0]
 801a1f2:	1ad0      	subs	r0, r2, r3
 801a1f4:	9b03      	ldr	r3, [sp, #12]
 801a1f6:	1a5b      	subs	r3, r3, r1
 801a1f8:	4358      	muls	r0, r3
 801a1fa:	b004      	add	sp, #16
 801a1fc:	4770      	bx	lr

0801a1fe <EwGetRectSize>:
 801a1fe:	b084      	sub	sp, #16
 801a200:	b530      	push	{r4, r5, lr}
 801a202:	ad04      	add	r5, sp, #16
 801a204:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a208:	9b07      	ldr	r3, [sp, #28]
 801a20a:	1a9b      	subs	r3, r3, r2
 801a20c:	9a06      	ldr	r2, [sp, #24]
 801a20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a212:	1a52      	subs	r2, r2, r1
 801a214:	e9c0 2300 	strd	r2, r3, [r0]
 801a218:	b004      	add	sp, #16
 801a21a:	4770      	bx	lr

0801a21c <EwGetRectORect>:
 801a21c:	b084      	sub	sp, #16
 801a21e:	b530      	push	{r4, r5, lr}
 801a220:	ad04      	add	r5, sp, #16
 801a222:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a226:	1a5a      	subs	r2, r3, r1
 801a228:	9905      	ldr	r1, [sp, #20]
 801a22a:	9b07      	ldr	r3, [sp, #28]
 801a22c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a230:	1a5b      	subs	r3, r3, r1
 801a232:	2100      	movs	r1, #0
 801a234:	e9c0 1100 	strd	r1, r1, [r0]
 801a238:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a23c:	b004      	add	sp, #16
 801a23e:	4770      	bx	lr

0801a240 <EwGetRectCenter>:
 801a240:	b084      	sub	sp, #16
 801a242:	b530      	push	{r4, r5, lr}
 801a244:	ad04      	add	r5, sp, #16
 801a246:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a24a:	460d      	mov	r5, r1
 801a24c:	1b5b      	subs	r3, r3, r5
 801a24e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a252:	4611      	mov	r1, r2
 801a254:	eb05 0363 	add.w	r3, r5, r3, asr #1
 801a258:	9a07      	ldr	r2, [sp, #28]
 801a25a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a25e:	1a52      	subs	r2, r2, r1
 801a260:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801a264:	eb01 0262 	add.w	r2, r1, r2, asr #1
 801a268:	e9c0 3200 	strd	r3, r2, [r0]
 801a26c:	b004      	add	sp, #16
 801a26e:	4770      	bx	lr

0801a270 <EwSetRectSize>:
 801a270:	b084      	sub	sp, #16
 801a272:	b510      	push	{r4, lr}
 801a274:	4604      	mov	r4, r0
 801a276:	a803      	add	r0, sp, #12
 801a278:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a27c:	4613      	mov	r3, r2
 801a27e:	9a08      	ldr	r2, [sp, #32]
 801a280:	4413      	add	r3, r2
 801a282:	460a      	mov	r2, r1
 801a284:	9907      	ldr	r1, [sp, #28]
 801a286:	440a      	add	r2, r1
 801a288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a28c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a28e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a292:	4620      	mov	r0, r4
 801a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a298:	b004      	add	sp, #16
 801a29a:	4770      	bx	lr

0801a29c <EwSetRectOrigin>:
 801a29c:	b084      	sub	sp, #16
 801a29e:	b570      	push	{r4, r5, r6, lr}
 801a2a0:	ad05      	add	r5, sp, #20
 801a2a2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a2a6:	e9dd 5109 	ldrd	r5, r1, [sp, #36]	; 0x24
 801a2aa:	9b05      	ldr	r3, [sp, #20]
 801a2ac:	9a07      	ldr	r2, [sp, #28]
 801a2ae:	9e08      	ldr	r6, [sp, #32]
 801a2b0:	1aeb      	subs	r3, r5, r3
 801a2b2:	441a      	add	r2, r3
 801a2b4:	9b06      	ldr	r3, [sp, #24]
 801a2b6:	1acb      	subs	r3, r1, r3
 801a2b8:	4433      	add	r3, r6
 801a2ba:	e9c0 5100 	strd	r5, r1, [r0]
 801a2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2c2:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a2c6:	b004      	add	sp, #16
 801a2c8:	4770      	bx	lr

0801a2ca <EwSetRectX1>:
 801a2ca:	b084      	sub	sp, #16
 801a2cc:	b510      	push	{r4, lr}
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	a803      	add	r0, sp, #12
 801a2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a2d6:	9b07      	ldr	r3, [sp, #28]
 801a2d8:	9303      	str	r3, [sp, #12]
 801a2da:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a2dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2e6:	b004      	add	sp, #16
 801a2e8:	4770      	bx	lr

0801a2ea <EwSetRectY1>:
 801a2ea:	b084      	sub	sp, #16
 801a2ec:	b510      	push	{r4, lr}
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	a803      	add	r0, sp, #12
 801a2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a2f6:	9b07      	ldr	r3, [sp, #28]
 801a2f8:	9304      	str	r3, [sp, #16]
 801a2fa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a2fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a300:	4620      	mov	r0, r4
 801a302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a306:	b004      	add	sp, #16
 801a308:	4770      	bx	lr

0801a30a <EwSetRectX2>:
 801a30a:	b084      	sub	sp, #16
 801a30c:	b510      	push	{r4, lr}
 801a30e:	4604      	mov	r4, r0
 801a310:	a803      	add	r0, sp, #12
 801a312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a316:	9b07      	ldr	r3, [sp, #28]
 801a318:	9305      	str	r3, [sp, #20]
 801a31a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a31c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a320:	4620      	mov	r0, r4
 801a322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a326:	b004      	add	sp, #16
 801a328:	4770      	bx	lr

0801a32a <EwSetRectY2>:
 801a32a:	b084      	sub	sp, #16
 801a32c:	b510      	push	{r4, lr}
 801a32e:	4604      	mov	r4, r0
 801a330:	a803      	add	r0, sp, #12
 801a332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a336:	9b07      	ldr	r3, [sp, #28]
 801a338:	9306      	str	r3, [sp, #24]
 801a33a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a33c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a340:	4620      	mov	r0, r4
 801a342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a346:	b004      	add	sp, #16
 801a348:	4770      	bx	lr

0801a34a <EwSetRectX>:
 801a34a:	b084      	sub	sp, #16
 801a34c:	b510      	push	{r4, lr}
 801a34e:	4604      	mov	r4, r0
 801a350:	a803      	add	r0, sp, #12
 801a352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a356:	9a07      	ldr	r2, [sp, #28]
 801a358:	9203      	str	r2, [sp, #12]
 801a35a:	1a53      	subs	r3, r2, r1
 801a35c:	9905      	ldr	r1, [sp, #20]
 801a35e:	440b      	add	r3, r1
 801a360:	9305      	str	r3, [sp, #20]
 801a362:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a368:	4620      	mov	r0, r4
 801a36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a36e:	b004      	add	sp, #16
 801a370:	4770      	bx	lr

0801a372 <EwSetRectY>:
 801a372:	b084      	sub	sp, #16
 801a374:	b510      	push	{r4, lr}
 801a376:	4604      	mov	r4, r0
 801a378:	a803      	add	r0, sp, #12
 801a37a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a37e:	9a07      	ldr	r2, [sp, #28]
 801a380:	9b04      	ldr	r3, [sp, #16]
 801a382:	9906      	ldr	r1, [sp, #24]
 801a384:	9204      	str	r2, [sp, #16]
 801a386:	1ad3      	subs	r3, r2, r3
 801a388:	440b      	add	r3, r1
 801a38a:	9306      	str	r3, [sp, #24]
 801a38c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a38e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a392:	4620      	mov	r0, r4
 801a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a398:	b004      	add	sp, #16
 801a39a:	4770      	bx	lr

0801a39c <EwSetRectW>:
 801a39c:	b084      	sub	sp, #16
 801a39e:	b510      	push	{r4, lr}
 801a3a0:	4604      	mov	r4, r0
 801a3a2:	a803      	add	r0, sp, #12
 801a3a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a3a8:	9a07      	ldr	r2, [sp, #28]
 801a3aa:	460b      	mov	r3, r1
 801a3ac:	4413      	add	r3, r2
 801a3ae:	9305      	str	r3, [sp, #20]
 801a3b0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a3b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3bc:	b004      	add	sp, #16
 801a3be:	4770      	bx	lr

0801a3c0 <EwSetRectH>:
 801a3c0:	b084      	sub	sp, #16
 801a3c2:	b510      	push	{r4, lr}
 801a3c4:	4604      	mov	r4, r0
 801a3c6:	a803      	add	r0, sp, #12
 801a3c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a3cc:	9a07      	ldr	r2, [sp, #28]
 801a3ce:	9b04      	ldr	r3, [sp, #16]
 801a3d0:	4413      	add	r3, r2
 801a3d2:	9306      	str	r3, [sp, #24]
 801a3d4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a3d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a3da:	4620      	mov	r0, r4
 801a3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3e0:	b004      	add	sp, #16
 801a3e2:	4770      	bx	lr

0801a3e4 <EwSetRectPoint1>:
 801a3e4:	b084      	sub	sp, #16
 801a3e6:	b530      	push	{r4, r5, lr}
 801a3e8:	ac04      	add	r4, sp, #16
 801a3ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801a3ee:	4605      	mov	r5, r0
 801a3f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a3f4:	e884 0003 	stmia.w	r4, {r0, r1}
 801a3f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a3fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a400:	4628      	mov	r0, r5
 801a402:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a406:	b004      	add	sp, #16
 801a408:	4770      	bx	lr

0801a40a <EwSetRectPoint2>:
 801a40a:	b084      	sub	sp, #16
 801a40c:	b530      	push	{r4, r5, lr}
 801a40e:	ad04      	add	r5, sp, #16
 801a410:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a414:	4604      	mov	r4, r0
 801a416:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a41a:	ab06      	add	r3, sp, #24
 801a41c:	e883 0003 	stmia.w	r3, {r0, r1}
 801a420:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a428:	4620      	mov	r0, r4
 801a42a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a42e:	b004      	add	sp, #16
 801a430:	4770      	bx	lr

0801a432 <EwGetVariantOfRect>:
 801a432:	b510      	push	{r4, lr}
 801a434:	4604      	mov	r4, r0
 801a436:	4608      	mov	r0, r1
 801a438:	2114      	movs	r1, #20
 801a43a:	f000 f89c 	bl	801a576 <EwGetVariantOf>
 801a43e:	3004      	adds	r0, #4
 801a440:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a446:	4620      	mov	r0, r4
 801a448:	bd10      	pop	{r4, pc}
 801a44a:	0000      	movs	r0, r0
 801a44c:	6803      	ldr	r3, [r0, #0]
 801a44e:	b10b      	cbz	r3, 801a454 <EwGetVariantOfRect+0x22>
 801a450:	6842      	ldr	r2, [r0, #4]
 801a452:	605a      	str	r2, [r3, #4]
 801a454:	6842      	ldr	r2, [r0, #4]
 801a456:	b122      	cbz	r2, 801a462 <EwGetVariantOfRect+0x30>
 801a458:	6013      	str	r3, [r2, #0]
 801a45a:	2300      	movs	r3, #0
 801a45c:	e9c0 3300 	strd	r3, r3, [r0]
 801a460:	4770      	bx	lr
 801a462:	4a01      	ldr	r2, [pc, #4]	; (801a468 <EwGetVariantOfRect+0x36>)
 801a464:	e7f8      	b.n	801a458 <EwGetVariantOfRect+0x26>
 801a466:	bf00      	nop
 801a468:	2000031c 	.word	0x2000031c

0801a46c <EwRegisterResource>:
 801a46c:	b538      	push	{r3, r4, r5, lr}
 801a46e:	460c      	mov	r4, r1
 801a470:	4605      	mov	r5, r0
 801a472:	2800      	cmp	r0, #0
 801a474:	d030      	beq.n	801a4d8 <EwRegisterResource+0x6c>
 801a476:	2900      	cmp	r1, #0
 801a478:	d02e      	beq.n	801a4d8 <EwRegisterResource+0x6c>
 801a47a:	2010      	movs	r0, #16
 801a47c:	f00f f978 	bl	8029770 <EwAlloc>
 801a480:	b958      	cbnz	r0, 801a49a <EwRegisterResource+0x2e>
 801a482:	2008      	movs	r0, #8
 801a484:	f7ff fbc0 	bl	8019c08 <EwImmediateReclaimMemory>
 801a488:	2800      	cmp	r0, #0
 801a48a:	d1f6      	bne.n	801a47a <EwRegisterResource+0xe>
 801a48c:	2008      	movs	r0, #8
 801a48e:	f7fe fc0b 	bl	8018ca8 <EwError>
 801a492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a496:	f00f b96f 	b.w	8029778 <EwPanic>
 801a49a:	4a10      	ldr	r2, [pc, #64]	; (801a4dc <EwRegisterResource+0x70>)
 801a49c:	6813      	ldr	r3, [r2, #0]
 801a49e:	6003      	str	r3, [r0, #0]
 801a4a0:	2100      	movs	r1, #0
 801a4a2:	e9c0 4502 	strd	r4, r5, [r0, #8]
 801a4a6:	6041      	str	r1, [r0, #4]
 801a4a8:	b103      	cbz	r3, 801a4ac <EwRegisterResource+0x40>
 801a4aa:	6058      	str	r0, [r3, #4]
 801a4ac:	490c      	ldr	r1, [pc, #48]	; (801a4e0 <EwRegisterResource+0x74>)
 801a4ae:	6010      	str	r0, [r2, #0]
 801a4b0:	680b      	ldr	r3, [r1, #0]
 801a4b2:	f103 0210 	add.w	r2, r3, #16
 801a4b6:	4b0b      	ldr	r3, [pc, #44]	; (801a4e4 <EwRegisterResource+0x78>)
 801a4b8:	600a      	str	r2, [r1, #0]
 801a4ba:	6819      	ldr	r1, [r3, #0]
 801a4bc:	428a      	cmp	r2, r1
 801a4be:	bfc8      	it	gt
 801a4c0:	601a      	strgt	r2, [r3, #0]
 801a4c2:	4909      	ldr	r1, [pc, #36]	; (801a4e8 <EwRegisterResource+0x7c>)
 801a4c4:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <EwRegisterResource+0x80>)
 801a4c6:	6809      	ldr	r1, [r1, #0]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	440b      	add	r3, r1
 801a4cc:	4413      	add	r3, r2
 801a4ce:	4a08      	ldr	r2, [pc, #32]	; (801a4f0 <EwRegisterResource+0x84>)
 801a4d0:	6811      	ldr	r1, [r2, #0]
 801a4d2:	428b      	cmp	r3, r1
 801a4d4:	dd00      	ble.n	801a4d8 <EwRegisterResource+0x6c>
 801a4d6:	6013      	str	r3, [r2, #0]
 801a4d8:	bd38      	pop	{r3, r4, r5, pc}
 801a4da:	bf00      	nop
 801a4dc:	2000031c 	.word	0x2000031c
 801a4e0:	200002e8 	.word	0x200002e8
 801a4e4:	20000304 	.word	0x20000304
 801a4e8:	200002e4 	.word	0x200002e4
 801a4ec:	200002d8 	.word	0x200002d8
 801a4f0:	200002ec 	.word	0x200002ec

0801a4f4 <EwDeregisterResource>:
 801a4f4:	b508      	push	{r3, lr}
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	b168      	cbz	r0, 801a516 <EwDeregisterResource+0x22>
 801a4fa:	4a08      	ldr	r2, [pc, #32]	; (801a51c <EwDeregisterResource+0x28>)
 801a4fc:	6810      	ldr	r0, [r2, #0]
 801a4fe:	b150      	cbz	r0, 801a516 <EwDeregisterResource+0x22>
 801a500:	68c2      	ldr	r2, [r0, #12]
 801a502:	429a      	cmp	r2, r3
 801a504:	d108      	bne.n	801a518 <EwDeregisterResource+0x24>
 801a506:	f7ff ffa1 	bl	801a44c <EwGetVariantOfRect+0x1a>
 801a50a:	f00f f933 	bl	8029774 <EwFree>
 801a50e:	4a04      	ldr	r2, [pc, #16]	; (801a520 <EwDeregisterResource+0x2c>)
 801a510:	6813      	ldr	r3, [r2, #0]
 801a512:	3b10      	subs	r3, #16
 801a514:	6013      	str	r3, [r2, #0]
 801a516:	bd08      	pop	{r3, pc}
 801a518:	6800      	ldr	r0, [r0, #0]
 801a51a:	e7f0      	b.n	801a4fe <EwDeregisterResource+0xa>
 801a51c:	2000031c 	.word	0x2000031c
 801a520:	200002e8 	.word	0x200002e8

0801a524 <EwGetLanguage>:
 801a524:	4b01      	ldr	r3, [pc, #4]	; (801a52c <EwGetLanguage+0x8>)
 801a526:	6858      	ldr	r0, [r3, #4]
 801a528:	4770      	bx	lr
 801a52a:	bf00      	nop
 801a52c:	2000031c 	.word	0x2000031c

0801a530 <EwSetLanguage>:
 801a530:	4b05      	ldr	r3, [pc, #20]	; (801a548 <EwSetLanguage+0x18>)
 801a532:	685a      	ldr	r2, [r3, #4]
 801a534:	4282      	cmp	r2, r0
 801a536:	b510      	push	{r4, lr}
 801a538:	4604      	mov	r4, r0
 801a53a:	d002      	beq.n	801a542 <EwSetLanguage+0x12>
 801a53c:	6058      	str	r0, [r3, #4]
 801a53e:	f7ff fb67 	bl	8019c10 <EwReconstructObjects>
 801a542:	4620      	mov	r0, r4
 801a544:	bd10      	pop	{r4, pc}
 801a546:	bf00      	nop
 801a548:	2000031c 	.word	0x2000031c

0801a54c <EwGetStyles>:
 801a54c:	4b01      	ldr	r3, [pc, #4]	; (801a554 <EwGetStyles+0x8>)
 801a54e:	6898      	ldr	r0, [r3, #8]
 801a550:	4770      	bx	lr
 801a552:	bf00      	nop
 801a554:	2000031c 	.word	0x2000031c

0801a558 <EwSetStyles>:
 801a558:	4b01      	ldr	r3, [pc, #4]	; (801a560 <EwSetStyles+0x8>)
 801a55a:	6098      	str	r0, [r3, #8]
 801a55c:	4770      	bx	lr
 801a55e:	bf00      	nop
 801a560:	2000031c 	.word	0x2000031c

0801a564 <EwStylesContains>:
 801a564:	b129      	cbz	r1, 801a572 <EwStylesContains+0xe>
 801a566:	ea31 0300 	bics.w	r3, r1, r0
 801a56a:	bf0c      	ite	eq
 801a56c:	2001      	moveq	r0, #1
 801a56e:	2000      	movne	r0, #0
 801a570:	4770      	bx	lr
 801a572:	4608      	mov	r0, r1
 801a574:	4770      	bx	lr

0801a576 <EwGetVariantOf>:
 801a576:	4b13      	ldr	r3, [pc, #76]	; (801a5c4 <EwGetVariantOf+0x4e>)
 801a578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a57a:	e9d3 7c01 	ldrd	r7, ip, [r3, #4]
 801a57e:	2200      	movs	r2, #0
 801a580:	4614      	mov	r4, r2
 801a582:	b920      	cbnz	r0, 801a58e <EwGetVariantOf+0x18>
 801a584:	2c00      	cmp	r4, #0
 801a586:	bf14      	ite	ne
 801a588:	4620      	movne	r0, r4
 801a58a:	4610      	moveq	r0, r2
 801a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a58e:	e9d0 3500 	ldrd	r3, r5, [r0]
 801a592:	6880      	ldr	r0, [r0, #8]
 801a594:	2d00      	cmp	r5, #0
 801a596:	dc05      	bgt.n	801a5a4 <EwGetVariantOf+0x2e>
 801a598:	2800      	cmp	r0, #0
 801a59a:	d0f3      	beq.n	801a584 <EwGetVariantOf+0xe>
 801a59c:	6803      	ldr	r3, [r0, #0]
 801a59e:	b95b      	cbnz	r3, 801a5b8 <EwGetVariantOf+0x42>
 801a5a0:	6840      	ldr	r0, [r0, #4]
 801a5a2:	e7ee      	b.n	801a582 <EwGetVariantOf+0xc>
 801a5a4:	681e      	ldr	r6, [r3, #0]
 801a5a6:	3d01      	subs	r5, #1
 801a5a8:	42be      	cmp	r6, r7
 801a5aa:	bf08      	it	eq
 801a5ac:	461c      	moveq	r4, r3
 801a5ae:	2e00      	cmp	r6, #0
 801a5b0:	bf08      	it	eq
 801a5b2:	461a      	moveq	r2, r3
 801a5b4:	440b      	add	r3, r1
 801a5b6:	e7ed      	b.n	801a594 <EwGetVariantOf+0x1e>
 801a5b8:	ea13 0f0c 	tst.w	r3, ip
 801a5bc:	d1f0      	bne.n	801a5a0 <EwGetVariantOf+0x2a>
 801a5be:	3008      	adds	r0, #8
 801a5c0:	e7ec      	b.n	801a59c <EwGetVariantOf+0x26>
 801a5c2:	bf00      	nop
 801a5c4:	2000031c 	.word	0x2000031c

0801a5c8 <EwLoadResource>:
 801a5c8:	b570      	push	{r4, r5, r6, lr}
 801a5ca:	4e10      	ldr	r6, [pc, #64]	; (801a60c <EwLoadResource+0x44>)
 801a5cc:	460d      	mov	r5, r1
 801a5ce:	6834      	ldr	r4, [r6, #0]
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	b190      	cbz	r0, 801a5fa <EwLoadResource+0x32>
 801a5d4:	2108      	movs	r1, #8
 801a5d6:	f7ff ffce 	bl	801a576 <EwGetVariantOf>
 801a5da:	6841      	ldr	r1, [r0, #4]
 801a5dc:	b18c      	cbz	r4, 801a602 <EwLoadResource+0x3a>
 801a5de:	68a3      	ldr	r3, [r4, #8]
 801a5e0:	428b      	cmp	r3, r1
 801a5e2:	d10c      	bne.n	801a5fe <EwLoadResource+0x36>
 801a5e4:	4620      	mov	r0, r4
 801a5e6:	f7ff ff31 	bl	801a44c <EwGetVariantOfRect+0x1a>
 801a5ea:	6833      	ldr	r3, [r6, #0]
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	6062      	str	r2, [r4, #4]
 801a5f2:	b103      	cbz	r3, 801a5f6 <EwLoadResource+0x2e>
 801a5f4:	605c      	str	r4, [r3, #4]
 801a5f6:	68e3      	ldr	r3, [r4, #12]
 801a5f8:	6034      	str	r4, [r6, #0]
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	bd70      	pop	{r4, r5, r6, pc}
 801a5fe:	6824      	ldr	r4, [r4, #0]
 801a600:	e7ec      	b.n	801a5dc <EwLoadResource+0x14>
 801a602:	4628      	mov	r0, r5
 801a604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a608:	f7ff b824 	b.w	8019654 <EwNewObjectIndirect>
 801a60c:	2000031c 	.word	0x2000031c

0801a610 <EwGetVariantOfLangId>:
 801a610:	b508      	push	{r3, lr}
 801a612:	2108      	movs	r1, #8
 801a614:	f7ff ffaf 	bl	801a576 <EwGetVariantOf>
 801a618:	6840      	ldr	r0, [r0, #4]
 801a61a:	bd08      	pop	{r3, pc}

0801a61c <EwGetVariantOfStylesSet>:
 801a61c:	b508      	push	{r3, lr}
 801a61e:	2108      	movs	r1, #8
 801a620:	f7ff ffa9 	bl	801a576 <EwGetVariantOf>
 801a624:	6840      	ldr	r0, [r0, #4]
 801a626:	bd08      	pop	{r3, pc}

0801a628 <EwDecompress>:
 801a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a62c:	4c8d      	ldr	r4, [pc, #564]	; (801a864 <EwDecompress+0x23c>)
 801a62e:	b08d      	sub	sp, #52	; 0x34
 801a630:	4682      	mov	sl, r0
 801a632:	9309      	str	r3, [sp, #36]	; 0x24
 801a634:	68e3      	ldr	r3, [r4, #12]
 801a636:	9205      	str	r2, [sp, #20]
 801a638:	468b      	mov	fp, r1
 801a63a:	b13b      	cbz	r3, 801a64c <EwDecompress+0x24>
 801a63c:	6923      	ldr	r3, [r4, #16]
 801a63e:	4283      	cmp	r3, r0
 801a640:	d81c      	bhi.n	801a67c <EwDecompress+0x54>
 801a642:	6963      	ldr	r3, [r4, #20]
 801a644:	4283      	cmp	r3, r0
 801a646:	bf34      	ite	cc
 801a648:	2300      	movcc	r3, #0
 801a64a:	2301      	movcs	r3, #1
 801a64c:	9304      	str	r3, [sp, #16]
 801a64e:	69a3      	ldr	r3, [r4, #24]
 801a650:	bb63      	cbnz	r3, 801a6ac <EwDecompress+0x84>
 801a652:	f643 40fa 	movw	r0, #15610	; 0x3cfa
 801a656:	f00f f88b 	bl	8029770 <EwAlloc>
 801a65a:	61a0      	str	r0, [r4, #24]
 801a65c:	b980      	cbnz	r0, 801a680 <EwDecompress+0x58>
 801a65e:	2009      	movs	r0, #9
 801a660:	f7ff fad2 	bl	8019c08 <EwImmediateReclaimMemory>
 801a664:	2800      	cmp	r0, #0
 801a666:	d1f4      	bne.n	801a652 <EwDecompress+0x2a>
 801a668:	69a3      	ldr	r3, [r4, #24]
 801a66a:	b94b      	cbnz	r3, 801a680 <EwDecompress+0x58>
 801a66c:	2009      	movs	r0, #9
 801a66e:	f7fe fb1b 	bl	8018ca8 <EwError>
 801a672:	b00d      	add	sp, #52	; 0x34
 801a674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a678:	f00f b87e 	b.w	8029778 <EwPanic>
 801a67c:	2300      	movs	r3, #0
 801a67e:	e7e5      	b.n	801a64c <EwDecompress+0x24>
 801a680:	4a79      	ldr	r2, [pc, #484]	; (801a868 <EwDecompress+0x240>)
 801a682:	6813      	ldr	r3, [r2, #0]
 801a684:	f503 5373 	add.w	r3, r3, #15552	; 0x3cc0
 801a688:	333a      	adds	r3, #58	; 0x3a
 801a68a:	6013      	str	r3, [r2, #0]
 801a68c:	4a77      	ldr	r2, [pc, #476]	; (801a86c <EwDecompress+0x244>)
 801a68e:	6811      	ldr	r1, [r2, #0]
 801a690:	428b      	cmp	r3, r1
 801a692:	bfc8      	it	gt
 801a694:	6013      	strgt	r3, [r2, #0]
 801a696:	4976      	ldr	r1, [pc, #472]	; (801a870 <EwDecompress+0x248>)
 801a698:	4a76      	ldr	r2, [pc, #472]	; (801a874 <EwDecompress+0x24c>)
 801a69a:	6809      	ldr	r1, [r1, #0]
 801a69c:	6812      	ldr	r2, [r2, #0]
 801a69e:	440a      	add	r2, r1
 801a6a0:	4413      	add	r3, r2
 801a6a2:	4a75      	ldr	r2, [pc, #468]	; (801a878 <EwDecompress+0x250>)
 801a6a4:	6811      	ldr	r1, [r2, #0]
 801a6a6:	428b      	cmp	r3, r1
 801a6a8:	bfc8      	it	gt
 801a6aa:	6013      	strgt	r3, [r2, #0]
 801a6ac:	69a3      	ldr	r3, [r4, #24]
 801a6ae:	61e3      	str	r3, [r4, #28]
 801a6b0:	f503 52ef 	add.w	r2, r3, #7648	; 0x1de0
 801a6b4:	f503 5333 	add.w	r3, r3, #11456	; 0x2cc0
 801a6b8:	333a      	adds	r3, #58	; 0x3a
 801a6ba:	6263      	str	r3, [r4, #36]	; 0x24
 801a6bc:	9b04      	ldr	r3, [sp, #16]
 801a6be:	321c      	adds	r2, #28
 801a6c0:	6222      	str	r2, [r4, #32]
 801a6c2:	b333      	cbz	r3, 801a712 <EwDecompress+0xea>
 801a6c4:	68e3      	ldr	r3, [r4, #12]
 801a6c6:	4650      	mov	r0, sl
 801a6c8:	4798      	blx	r3
 801a6ca:	4602      	mov	r2, r0
 801a6cc:	f8df 8194 	ldr.w	r8, [pc, #404]	; 801a864 <EwDecompress+0x23c>
 801a6d0:	f852 3b04 	ldr.w	r3, [r2], #4
 801a6d4:	9201      	str	r2, [sp, #4]
 801a6d6:	f3c3 0508 	ubfx	r5, r3, #0, #9
 801a6da:	ea4f 2953 	mov.w	r9, r3, lsr #9
 801a6de:	9b05      	ldr	r3, [sp, #20]
 801a6e0:	9306      	str	r3, [sp, #24]
 801a6e2:	f240 13ff 	movw	r3, #511	; 0x1ff
 801a6e6:	9303      	str	r3, [sp, #12]
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	9a05      	ldr	r2, [sp, #20]
 801a6ec:	9302      	str	r3, [sp, #8]
 801a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6f0:	1a9b      	subs	r3, r3, r2
 801a6f2:	f10a 0a04 	add.w	sl, sl, #4
 801a6f6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801a6fa:	f44f 7481 	mov.w	r4, #258	; 0x102
 801a6fe:	2717      	movs	r7, #23
 801a700:	2609      	movs	r6, #9
 801a702:	930b      	str	r3, [sp, #44]	; 0x2c
 801a704:	f240 1301 	movw	r3, #257	; 0x101
 801a708:	429d      	cmp	r5, r3
 801a70a:	d104      	bne.n	801a716 <EwDecompress+0xee>
 801a70c:	b00d      	add	sp, #52	; 0x34
 801a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a712:	4650      	mov	r0, sl
 801a714:	e7d9      	b.n	801a6ca <EwDecompress+0xa2>
 801a716:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a71a:	f000 809a 	beq.w	801a852 <EwDecompress+0x22a>
 801a71e:	42ac      	cmp	r4, r5
 801a720:	d07e      	beq.n	801a820 <EwDecompress+0x1f8>
 801a722:	462b      	mov	r3, r5
 801a724:	2200      	movs	r2, #0
 801a726:	e9d8 c108 	ldrd	ip, r1, [r8, #32]
 801a72a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a72e:	9007      	str	r0, [sp, #28]
 801a730:	f1c1 0001 	rsb	r0, r1, #1
 801a734:	440a      	add	r2, r1
 801a736:	900a      	str	r0, [sp, #40]	; 0x28
 801a738:	e009      	b.n	801a74e <EwDecompress+0x126>
 801a73a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 801a73e:	b29b      	uxth	r3, r3
 801a740:	f81c 0003 	ldrb.w	r0, [ip, r3]
 801a744:	f802 0b01 	strb.w	r0, [r2], #1
 801a748:	9807      	ldr	r0, [sp, #28]
 801a74a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801a74e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a750:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 801a754:	4410      	add	r0, r2
 801a756:	9008      	str	r0, [sp, #32]
 801a758:	d2ef      	bcs.n	801a73a <EwDecompress+0x112>
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	42ac      	cmp	r4, r5
 801a75e:	7013      	strb	r3, [r2, #0]
 801a760:	bf08      	it	eq
 801a762:	700b      	strbeq	r3, [r1, #0]
 801a764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a768:	459e      	cmp	lr, r3
 801a76a:	d01b      	beq.n	801a7a4 <EwDecompress+0x17c>
 801a76c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 801a770:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 801a774:	9807      	ldr	r0, [sp, #28]
 801a776:	44a4      	add	ip, r4
 801a778:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
 801a77c:	f5ac 7c81 	sub.w	ip, ip, #258	; 0x102
 801a780:	7813      	ldrb	r3, [r2, #0]
 801a782:	f88c 3000 	strb.w	r3, [ip]
 801a786:	1c63      	adds	r3, r4, #1
 801a788:	4063      	eors	r3, r4
 801a78a:	429c      	cmp	r4, r3
 801a78c:	da08      	bge.n	801a7a0 <EwDecompress+0x178>
 801a78e:	2e0b      	cmp	r6, #11
 801a790:	dc06      	bgt.n	801a7a0 <EwDecompress+0x178>
 801a792:	9b03      	ldr	r3, [sp, #12]
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	f043 0301 	orr.w	r3, r3, #1
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	3601      	adds	r6, #1
 801a79e:	9303      	str	r3, [sp, #12]
 801a7a0:	3401      	adds	r4, #1
 801a7a2:	b2a4      	uxth	r4, r4
 801a7a4:	9b08      	ldr	r3, [sp, #32]
 801a7a6:	9a05      	ldr	r2, [sp, #20]
 801a7a8:	18cb      	adds	r3, r1, r3
 801a7aa:	b112      	cbz	r2, 801a7b2 <EwDecompress+0x18a>
 801a7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7ae:	2a00      	cmp	r2, #0
 801a7b0:	d14c      	bne.n	801a84c <EwDecompress+0x224>
 801a7b2:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a7b6:	4299      	cmp	r1, r3
 801a7b8:	d135      	bne.n	801a826 <EwDecompress+0x1fe>
 801a7ba:	9b08      	ldr	r3, [sp, #32]
 801a7bc:	449b      	add	fp, r3
 801a7be:	2f10      	cmp	r7, #16
 801a7c0:	dc1b      	bgt.n	801a7fa <EwDecompress+0x1d2>
 801a7c2:	9b04      	ldr	r3, [sp, #16]
 801a7c4:	b153      	cbz	r3, 801a7dc <EwDecompress+0x1b4>
 801a7c6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801a7ca:	3b01      	subs	r3, #1
 801a7cc:	ea1a 0f03 	tst.w	sl, r3
 801a7d0:	d104      	bne.n	801a7dc <EwDecompress+0x1b4>
 801a7d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a7d6:	4650      	mov	r0, sl
 801a7d8:	4798      	blx	r3
 801a7da:	9001      	str	r0, [sp, #4]
 801a7dc:	9801      	ldr	r0, [sp, #4]
 801a7de:	f850 3b04 	ldr.w	r3, [r0], #4
 801a7e2:	9001      	str	r0, [sp, #4]
 801a7e4:	fa03 f207 	lsl.w	r2, r3, r7
 801a7e8:	ea49 0902 	orr.w	r9, r9, r2
 801a7ec:	f1c7 0220 	rsb	r2, r7, #32
 801a7f0:	40d3      	lsrs	r3, r2
 801a7f2:	9302      	str	r3, [sp, #8]
 801a7f4:	3720      	adds	r7, #32
 801a7f6:	f10a 0a04 	add.w	sl, sl, #4
 801a7fa:	9802      	ldr	r0, [sp, #8]
 801a7fc:	9b03      	ldr	r3, [sp, #12]
 801a7fe:	f1c6 0220 	rsb	r2, r6, #32
 801a802:	fa00 f202 	lsl.w	r2, r0, r2
 801a806:	fa29 f106 	lsr.w	r1, r9, r6
 801a80a:	ea03 0309 	and.w	r3, r3, r9
 801a80e:	ea42 0901 	orr.w	r9, r2, r1
 801a812:	4602      	mov	r2, r0
 801a814:	40f2      	lsrs	r2, r6
 801a816:	46ae      	mov	lr, r5
 801a818:	9202      	str	r2, [sp, #8]
 801a81a:	1bbf      	subs	r7, r7, r6
 801a81c:	461d      	mov	r5, r3
 801a81e:	e771      	b.n	801a704 <EwDecompress+0xdc>
 801a820:	4673      	mov	r3, lr
 801a822:	2201      	movs	r2, #1
 801a824:	e77f      	b.n	801a726 <EwDecompress+0xfe>
 801a826:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 801a82a:	f802 cf01 	strb.w	ip, [r2, #1]!
 801a82e:	e7c2      	b.n	801a7b6 <EwDecompress+0x18e>
 801a830:	9806      	ldr	r0, [sp, #24]
 801a832:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 801a836:	465a      	mov	r2, fp
 801a838:	3801      	subs	r0, #1
 801a83a:	9006      	str	r0, [sp, #24]
 801a83c:	f802 cb01 	strb.w	ip, [r2], #1
 801a840:	bf01      	itttt	eq
 801a842:	980b      	ldreq	r0, [sp, #44]	; 0x2c
 801a844:	1812      	addeq	r2, r2, r0
 801a846:	9805      	ldreq	r0, [sp, #20]
 801a848:	9006      	streq	r0, [sp, #24]
 801a84a:	4693      	mov	fp, r2
 801a84c:	4299      	cmp	r1, r3
 801a84e:	d1ef      	bne.n	801a830 <EwDecompress+0x208>
 801a850:	e7b5      	b.n	801a7be <EwDecompress+0x196>
 801a852:	f240 13ff 	movw	r3, #511	; 0x1ff
 801a856:	f64f 75ff 	movw	r5, #65535	; 0xffff
 801a85a:	f44f 7481 	mov.w	r4, #258	; 0x102
 801a85e:	9303      	str	r3, [sp, #12]
 801a860:	2609      	movs	r6, #9
 801a862:	e7ac      	b.n	801a7be <EwDecompress+0x196>
 801a864:	2000031c 	.word	0x2000031c
 801a868:	200002e8 	.word	0x200002e8
 801a86c:	20000304 	.word	0x20000304
 801a870:	200002e4 	.word	0x200002e4
 801a874:	200002d8 	.word	0x200002d8
 801a878:	200002ec 	.word	0x200002ec

0801a87c <EwAdaptByteOrder2>:
 801a87c:	4770      	bx	lr

0801a87e <EwAdaptByteOrder4>:
 801a87e:	4770      	bx	lr

0801a880 <EwReleaseDecompressBuffers>:
 801a880:	b510      	push	{r4, lr}
 801a882:	4c07      	ldr	r4, [pc, #28]	; (801a8a0 <EwReleaseDecompressBuffers+0x20>)
 801a884:	69a0      	ldr	r0, [r4, #24]
 801a886:	b148      	cbz	r0, 801a89c <EwReleaseDecompressBuffers+0x1c>
 801a888:	f00e ff74 	bl	8029774 <EwFree>
 801a88c:	4a05      	ldr	r2, [pc, #20]	; (801a8a4 <EwReleaseDecompressBuffers+0x24>)
 801a88e:	2300      	movs	r3, #0
 801a890:	61a3      	str	r3, [r4, #24]
 801a892:	6813      	ldr	r3, [r2, #0]
 801a894:	f5a3 5373 	sub.w	r3, r3, #15552	; 0x3cc0
 801a898:	3b3a      	subs	r3, #58	; 0x3a
 801a89a:	6013      	str	r3, [r2, #0]
 801a89c:	bd10      	pop	{r4, pc}
 801a89e:	bf00      	nop
 801a8a0:	2000031c 	.word	0x2000031c
 801a8a4:	200002e8 	.word	0x200002e8

0801a8a8 <EwRegisterFlashAreaReader>:
 801a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ac:	4c0f      	ldr	r4, [pc, #60]	; (801a8ec <EwRegisterFlashAreaReader+0x44>)
 801a8ae:	460f      	mov	r7, r1
 801a8b0:	4616      	mov	r6, r2
 801a8b2:	4698      	mov	r8, r3
 801a8b4:	4605      	mov	r5, r0
 801a8b6:	b1a0      	cbz	r0, 801a8e2 <EwRegisterFlashAreaReader+0x3a>
 801a8b8:	68e3      	ldr	r3, [r4, #12]
 801a8ba:	b15b      	cbz	r3, 801a8d4 <EwRegisterFlashAreaReader+0x2c>
 801a8bc:	6923      	ldr	r3, [r4, #16]
 801a8be:	428b      	cmp	r3, r1
 801a8c0:	d102      	bne.n	801a8c8 <EwRegisterFlashAreaReader+0x20>
 801a8c2:	6963      	ldr	r3, [r4, #20]
 801a8c4:	4293      	cmp	r3, r2
 801a8c6:	d005      	beq.n	801a8d4 <EwRegisterFlashAreaReader+0x2c>
 801a8c8:	f240 100f 	movw	r0, #271	; 0x10f
 801a8cc:	f7fe f9ec 	bl	8018ca8 <EwError>
 801a8d0:	f00e ff52 	bl	8029778 <EwPanic>
 801a8d4:	e9c4 7604 	strd	r7, r6, [r4, #16]
 801a8d8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 801a8dc:	60e5      	str	r5, [r4, #12]
 801a8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8e2:	e9c4 0004 	strd	r0, r0, [r4, #16]
 801a8e6:	62a0      	str	r0, [r4, #40]	; 0x28
 801a8e8:	e7f8      	b.n	801a8dc <EwRegisterFlashAreaReader+0x34>
 801a8ea:	bf00      	nop
 801a8ec:	2000031c 	.word	0x2000031c

0801a8f0 <EwSetContains>:
 801a8f0:	b129      	cbz	r1, 801a8fe <EwSetContains+0xe>
 801a8f2:	ea31 0300 	bics.w	r3, r1, r0
 801a8f6:	bf0c      	ite	eq
 801a8f8:	2001      	moveq	r0, #1
 801a8fa:	2000      	movne	r0, #0
 801a8fc:	4770      	bx	lr
 801a8fe:	4608      	mov	r0, r1
 801a900:	4770      	bx	lr

0801a902 <EwGetVariantOfInt8>:
 801a902:	b508      	push	{r3, lr}
 801a904:	2108      	movs	r1, #8
 801a906:	f7ff fe36 	bl	801a576 <EwGetVariantOf>
 801a90a:	f990 0004 	ldrsb.w	r0, [r0, #4]
 801a90e:	bd08      	pop	{r3, pc}

0801a910 <EwGetVariantOfInt16>:
 801a910:	b508      	push	{r3, lr}
 801a912:	2108      	movs	r1, #8
 801a914:	f7ff fe2f 	bl	801a576 <EwGetVariantOf>
 801a918:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801a91c:	bd08      	pop	{r3, pc}

0801a91e <EwGetVariantOfInt32>:
 801a91e:	b508      	push	{r3, lr}
 801a920:	2108      	movs	r1, #8
 801a922:	f7ff fe28 	bl	801a576 <EwGetVariantOf>
 801a926:	6840      	ldr	r0, [r0, #4]
 801a928:	bd08      	pop	{r3, pc}

0801a92a <EwGetVariantOfInt64>:
 801a92a:	b508      	push	{r3, lr}
 801a92c:	2110      	movs	r1, #16
 801a92e:	f7ff fe22 	bl	801a576 <EwGetVariantOf>
 801a932:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 801a936:	bd08      	pop	{r3, pc}

0801a938 <EwGetVariantOfUInt8>:
 801a938:	b508      	push	{r3, lr}
 801a93a:	2108      	movs	r1, #8
 801a93c:	f7ff fe1b 	bl	801a576 <EwGetVariantOf>
 801a940:	7900      	ldrb	r0, [r0, #4]
 801a942:	bd08      	pop	{r3, pc}

0801a944 <EwGetVariantOfUInt16>:
 801a944:	b508      	push	{r3, lr}
 801a946:	2108      	movs	r1, #8
 801a948:	f7ff fe15 	bl	801a576 <EwGetVariantOf>
 801a94c:	8880      	ldrh	r0, [r0, #4]
 801a94e:	bd08      	pop	{r3, pc}

0801a950 <EwGetVariantOfUInt32>:
 801a950:	b508      	push	{r3, lr}
 801a952:	2108      	movs	r1, #8
 801a954:	f7ff fe0f 	bl	801a576 <EwGetVariantOf>
 801a958:	6840      	ldr	r0, [r0, #4]
 801a95a:	bd08      	pop	{r3, pc}

0801a95c <EwGetVariantOfUInt64>:
 801a95c:	b508      	push	{r3, lr}
 801a95e:	2110      	movs	r1, #16
 801a960:	f7ff fe09 	bl	801a576 <EwGetVariantOf>
 801a964:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 801a968:	bd08      	pop	{r3, pc}

0801a96a <EwGetVariantOfBool>:
 801a96a:	b508      	push	{r3, lr}
 801a96c:	2108      	movs	r1, #8
 801a96e:	f7ff fe02 	bl	801a576 <EwGetVariantOf>
 801a972:	7900      	ldrb	r0, [r0, #4]
 801a974:	bd08      	pop	{r3, pc}

0801a976 <EwGetVariantOfFloat>:
 801a976:	b508      	push	{r3, lr}
 801a978:	2108      	movs	r1, #8
 801a97a:	f7ff fdfc 	bl	801a576 <EwGetVariantOf>
 801a97e:	ed90 0a01 	vldr	s0, [r0, #4]
 801a982:	bd08      	pop	{r3, pc}

0801a984 <EwGetVariantOfEnum>:
 801a984:	b508      	push	{r3, lr}
 801a986:	2108      	movs	r1, #8
 801a988:	f7ff fdf5 	bl	801a576 <EwGetVariantOf>
 801a98c:	6840      	ldr	r0, [r0, #4]
 801a98e:	bd08      	pop	{r3, pc}

0801a990 <EwGetVariantOfSet>:
 801a990:	b508      	push	{r3, lr}
 801a992:	2108      	movs	r1, #8
 801a994:	f7ff fdef 	bl	801a576 <EwGetVariantOf>
 801a998:	6840      	ldr	r0, [r0, #4]
 801a99a:	bd08      	pop	{r3, pc}

0801a99c <EwGetInt32Abs>:
 801a99c:	2800      	cmp	r0, #0
 801a99e:	bfb8      	it	lt
 801a9a0:	4240      	neglt	r0, r0
 801a9a2:	4770      	bx	lr

0801a9a4 <EwGetInt64Abs>:
 801a9a4:	2900      	cmp	r1, #0
 801a9a6:	460b      	mov	r3, r1
 801a9a8:	da02      	bge.n	801a9b0 <EwGetInt64Abs+0xc>
 801a9aa:	4240      	negs	r0, r0
 801a9ac:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	4770      	bx	lr

0801a9b4 <EwGetFloatAbs>:
 801a9b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9bc:	bf48      	it	mi
 801a9be:	eeb1 0a40 	vnegmi.f32	s0, s0
 801a9c2:	4770      	bx	lr

0801a9c4 <EwGetPointAbs>:
 801a9c4:	b082      	sub	sp, #8
 801a9c6:	f10d 0c08 	add.w	ip, sp, #8
 801a9ca:	e90c 0006 	stmdb	ip, {r1, r2}
 801a9ce:	2900      	cmp	r1, #0
 801a9d0:	460a      	mov	r2, r1
 801a9d2:	bfb8      	it	lt
 801a9d4:	424a      	neglt	r2, r1
 801a9d6:	6002      	str	r2, [r0, #0]
 801a9d8:	9a01      	ldr	r2, [sp, #4]
 801a9da:	2a00      	cmp	r2, #0
 801a9dc:	bfb8      	it	lt
 801a9de:	4252      	neglt	r2, r2
 801a9e0:	6042      	str	r2, [r0, #4]
 801a9e2:	b002      	add	sp, #8
 801a9e4:	4770      	bx	lr

0801a9e6 <EwGetRectAbs>:
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	b530      	push	{r4, r5, lr}
 801a9ea:	ad04      	add	r5, sp, #16
 801a9ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801a9f0:	2900      	cmp	r1, #0
 801a9f2:	460b      	mov	r3, r1
 801a9f4:	bfb8      	it	lt
 801a9f6:	424b      	neglt	r3, r1
 801a9f8:	2a00      	cmp	r2, #0
 801a9fa:	6003      	str	r3, [r0, #0]
 801a9fc:	4613      	mov	r3, r2
 801a9fe:	bfb8      	it	lt
 801aa00:	4253      	neglt	r3, r2
 801aa02:	6043      	str	r3, [r0, #4]
 801aa04:	9b06      	ldr	r3, [sp, #24]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	bfb8      	it	lt
 801aa0a:	425b      	neglt	r3, r3
 801aa0c:	6083      	str	r3, [r0, #8]
 801aa0e:	9b07      	ldr	r3, [sp, #28]
 801aa10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	bfb8      	it	lt
 801aa18:	425b      	neglt	r3, r3
 801aa1a:	60c3      	str	r3, [r0, #12]
 801aa1c:	b004      	add	sp, #16
 801aa1e:	4770      	bx	lr

0801aa20 <EwGetInt32UAbs>:
 801aa20:	2800      	cmp	r0, #0
 801aa22:	bfb8      	it	lt
 801aa24:	4240      	neglt	r0, r0
 801aa26:	4770      	bx	lr

0801aa28 <EwGetInt64UAbs>:
 801aa28:	2900      	cmp	r1, #0
 801aa2a:	460b      	mov	r3, r1
 801aa2c:	da02      	bge.n	801aa34 <EwGetInt64UAbs+0xc>
 801aa2e:	4240      	negs	r0, r0
 801aa30:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
 801aa34:	4619      	mov	r1, r3
 801aa36:	4770      	bx	lr

0801aa38 <EwNewFloatNaN>:
 801aa38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aa40 <EwNewFloatNaN+0x8>
 801aa3c:	4770      	bx	lr
 801aa3e:	bf00      	nop
 801aa40:	7f800001 	.word	0x7f800001

0801aa44 <EwNewFloatInfP>:
 801aa44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aa4c <EwNewFloatInfP+0x8>
 801aa48:	4770      	bx	lr
 801aa4a:	bf00      	nop
 801aa4c:	7f800000 	.word	0x7f800000

0801aa50 <EwNewFloatInfN>:
 801aa50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aa58 <EwNewFloatInfN+0x8>
 801aa54:	4770      	bx	lr
 801aa56:	bf00      	nop
 801aa58:	ff800000 	.word	0xff800000

0801aa5c <EwIsFloatNaN>:
 801aa5c:	b082      	sub	sp, #8
 801aa5e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aa62:	9801      	ldr	r0, [sp, #4]
 801aa64:	4a07      	ldr	r2, [pc, #28]	; (801aa84 <EwIsFloatNaN+0x28>)
 801aa66:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801aa6a:	3b01      	subs	r3, #1
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	d906      	bls.n	801aa7e <EwIsFloatNaN+0x22>
 801aa70:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 801aa74:	bf94      	ite	ls
 801aa76:	2000      	movls	r0, #0
 801aa78:	2001      	movhi	r0, #1
 801aa7a:	b002      	add	sp, #8
 801aa7c:	4770      	bx	lr
 801aa7e:	2001      	movs	r0, #1
 801aa80:	e7fb      	b.n	801aa7a <EwIsFloatNaN+0x1e>
 801aa82:	bf00      	nop
 801aa84:	007ffffe 	.word	0x007ffffe

0801aa88 <EwIsFloatInf>:
 801aa88:	ee10 3a10 	vmov	r3, s0
 801aa8c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801aa90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801aa94:	4258      	negs	r0, r3
 801aa96:	4158      	adcs	r0, r3
 801aa98:	4770      	bx	lr

0801aa9a <EwIsFloatInfP>:
 801aa9a:	ee10 3a10 	vmov	r3, s0
 801aa9e:	f1a3 43ff 	sub.w	r3, r3, #2139095040	; 0x7f800000
 801aaa2:	4258      	negs	r0, r3
 801aaa4:	4158      	adcs	r0, r3
 801aaa6:	4770      	bx	lr

0801aaa8 <EwIsFloatInfN>:
 801aaa8:	ee10 3a10 	vmov	r3, s0
 801aaac:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801aab0:	bf14      	ite	ne
 801aab2:	2000      	movne	r0, #0
 801aab4:	2001      	moveq	r0, #1
 801aab6:	4770      	bx	lr

0801aab8 <EwGetInt32Min>:
 801aab8:	b40f      	push	{r0, r1, r2, r3}
 801aaba:	b513      	push	{r0, r1, r4, lr}
 801aabc:	aa04      	add	r2, sp, #16
 801aabe:	9805      	ldr	r0, [sp, #20]
 801aac0:	f852 1b04 	ldr.w	r1, [r2], #4
 801aac4:	9201      	str	r2, [sp, #4]
 801aac6:	2301      	movs	r3, #1
 801aac8:	428b      	cmp	r3, r1
 801aaca:	db04      	blt.n	801aad6 <EwGetInt32Min+0x1e>
 801aacc:	b002      	add	sp, #8
 801aace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aad2:	b004      	add	sp, #16
 801aad4:	4770      	bx	lr
 801aad6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801aada:	42a0      	cmp	r0, r4
 801aadc:	bfa8      	it	ge
 801aade:	4620      	movge	r0, r4
 801aae0:	3301      	adds	r3, #1
 801aae2:	e7f1      	b.n	801aac8 <EwGetInt32Min+0x10>

0801aae4 <EwGetUInt32Min>:
 801aae4:	b40f      	push	{r0, r1, r2, r3}
 801aae6:	b513      	push	{r0, r1, r4, lr}
 801aae8:	aa04      	add	r2, sp, #16
 801aaea:	9805      	ldr	r0, [sp, #20]
 801aaec:	f852 1b04 	ldr.w	r1, [r2], #4
 801aaf0:	9201      	str	r2, [sp, #4]
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	428b      	cmp	r3, r1
 801aaf6:	db04      	blt.n	801ab02 <EwGetUInt32Min+0x1e>
 801aaf8:	b002      	add	sp, #8
 801aafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aafe:	b004      	add	sp, #16
 801ab00:	4770      	bx	lr
 801ab02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ab06:	42a0      	cmp	r0, r4
 801ab08:	bf28      	it	cs
 801ab0a:	4620      	movcs	r0, r4
 801ab0c:	3301      	adds	r3, #1
 801ab0e:	e7f1      	b.n	801aaf4 <EwGetUInt32Min+0x10>

0801ab10 <EwGetInt64Min>:
 801ab10:	b40f      	push	{r0, r1, r2, r3}
 801ab12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab14:	ab06      	add	r3, sp, #24
 801ab16:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 801ab1a:	f022 0207 	bic.w	r2, r2, #7
 801ab1e:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab22:	9301      	str	r3, [sp, #4]
 801ab24:	4613      	mov	r3, r2
 801ab26:	6851      	ldr	r1, [r2, #4]
 801ab28:	f853 0b08 	ldr.w	r0, [r3], #8
 801ab2c:	2201      	movs	r2, #1
 801ab2e:	42b2      	cmp	r2, r6
 801ab30:	db04      	blt.n	801ab3c <EwGetInt64Min+0x2c>
 801ab32:	b002      	add	sp, #8
 801ab34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab38:	b004      	add	sp, #16
 801ab3a:	4770      	bx	lr
 801ab3c:	3307      	adds	r3, #7
 801ab3e:	f023 0407 	bic.w	r4, r3, #7
 801ab42:	4623      	mov	r3, r4
 801ab44:	6864      	ldr	r4, [r4, #4]
 801ab46:	f853 5b08 	ldr.w	r5, [r3], #8
 801ab4a:	4285      	cmp	r5, r0
 801ab4c:	eb74 0c01 	sbcs.w	ip, r4, r1
 801ab50:	bfbc      	itt	lt
 801ab52:	4628      	movlt	r0, r5
 801ab54:	4621      	movlt	r1, r4
 801ab56:	3201      	adds	r2, #1
 801ab58:	e7e9      	b.n	801ab2e <EwGetInt64Min+0x1e>

0801ab5a <EwGetUInt64Min>:
 801ab5a:	b40f      	push	{r0, r1, r2, r3}
 801ab5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab5e:	ab06      	add	r3, sp, #24
 801ab60:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 801ab64:	f022 0207 	bic.w	r2, r2, #7
 801ab68:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab6c:	9301      	str	r3, [sp, #4]
 801ab6e:	4613      	mov	r3, r2
 801ab70:	6851      	ldr	r1, [r2, #4]
 801ab72:	f853 0b08 	ldr.w	r0, [r3], #8
 801ab76:	2201      	movs	r2, #1
 801ab78:	42b2      	cmp	r2, r6
 801ab7a:	db04      	blt.n	801ab86 <EwGetUInt64Min+0x2c>
 801ab7c:	b002      	add	sp, #8
 801ab7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab82:	b004      	add	sp, #16
 801ab84:	4770      	bx	lr
 801ab86:	3307      	adds	r3, #7
 801ab88:	f023 0407 	bic.w	r4, r3, #7
 801ab8c:	4623      	mov	r3, r4
 801ab8e:	6864      	ldr	r4, [r4, #4]
 801ab90:	f853 5b08 	ldr.w	r5, [r3], #8
 801ab94:	4285      	cmp	r5, r0
 801ab96:	eb74 0c01 	sbcs.w	ip, r4, r1
 801ab9a:	bf3c      	itt	cc
 801ab9c:	4628      	movcc	r0, r5
 801ab9e:	4621      	movcc	r1, r4
 801aba0:	3201      	adds	r2, #1
 801aba2:	e7e9      	b.n	801ab78 <EwGetUInt64Min+0x1e>

0801aba4 <EwGetFloatMin>:
 801aba4:	b40f      	push	{r0, r1, r2, r3}
 801aba6:	b570      	push	{r4, r5, r6, lr}
 801aba8:	ed2d 8b02 	vpush	{d8}
 801abac:	b082      	sub	sp, #8
 801abae:	ab08      	add	r3, sp, #32
 801abb0:	f10d 042b 	add.w	r4, sp, #43	; 0x2b
 801abb4:	f024 0407 	bic.w	r4, r4, #7
 801abb8:	f853 6b04 	ldr.w	r6, [r3], #4
 801abbc:	9301      	str	r3, [sp, #4]
 801abbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801abc2:	f002 fd69 	bl	801d698 <__aeabi_d2f>
 801abc6:	ee08 0a10 	vmov	s16, r0
 801abca:	2501      	movs	r5, #1
 801abcc:	42b5      	cmp	r5, r6
 801abce:	db08      	blt.n	801abe2 <EwGetFloatMin+0x3e>
 801abd0:	ee18 0a10 	vmov	r0, s16
 801abd4:	b002      	add	sp, #8
 801abd6:	ecbd 8b02 	vpop	{d8}
 801abda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abde:	b004      	add	sp, #16
 801abe0:	4770      	bx	lr
 801abe2:	3407      	adds	r4, #7
 801abe4:	f024 0407 	bic.w	r4, r4, #7
 801abe8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801abec:	f002 fd54 	bl	801d698 <__aeabi_d2f>
 801abf0:	ee07 0a90 	vmov	s15, r0
 801abf4:	eeb4 8a67 	vcmp.f32	s16, s15
 801abf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abfc:	bfc8      	it	gt
 801abfe:	eeb0 8a67 	vmovgt.f32	s16, s15
 801ac02:	3501      	adds	r5, #1
 801ac04:	e7e2      	b.n	801abcc <EwGetFloatMin+0x28>

0801ac06 <EwGetColorMin>:
 801ac06:	b40f      	push	{r0, r1, r2, r3}
 801ac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac0a:	ab08      	add	r3, sp, #32
 801ac0c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 801ac10:	f853 6b04 	ldr.w	r6, [r3], #4
 801ac14:	9300      	str	r3, [sp, #0]
 801ac16:	785c      	ldrb	r4, [r3, #1]
 801ac18:	7899      	ldrb	r1, [r3, #2]
 801ac1a:	1d1a      	adds	r2, r3, #4
 801ac1c:	78db      	ldrb	r3, [r3, #3]
 801ac1e:	2001      	movs	r0, #1
 801ac20:	42b0      	cmp	r0, r6
 801ac22:	db15      	blt.n	801ac50 <EwGetColorMin+0x4a>
 801ac24:	2000      	movs	r0, #0
 801ac26:	f365 0007 	bfi	r0, r5, #0, #8
 801ac2a:	f364 200f 	bfi	r0, r4, #8, #8
 801ac2e:	f361 4017 	bfi	r0, r1, #16, #8
 801ac32:	f363 601f 	bfi	r0, r3, #24, #8
 801ac36:	f88d 5004 	strb.w	r5, [sp, #4]
 801ac3a:	f88d 4005 	strb.w	r4, [sp, #5]
 801ac3e:	f88d 1006 	strb.w	r1, [sp, #6]
 801ac42:	f88d 3007 	strb.w	r3, [sp, #7]
 801ac46:	b003      	add	sp, #12
 801ac48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ac4c:	b004      	add	sp, #16
 801ac4e:	4770      	bx	lr
 801ac50:	f812 7b04 	ldrb.w	r7, [r2], #4
 801ac54:	42bd      	cmp	r5, r7
 801ac56:	bf28      	it	cs
 801ac58:	463d      	movcs	r5, r7
 801ac5a:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 801ac5e:	42bc      	cmp	r4, r7
 801ac60:	bf28      	it	cs
 801ac62:	463c      	movcs	r4, r7
 801ac64:	f812 7c02 	ldrb.w	r7, [r2, #-2]
 801ac68:	42b9      	cmp	r1, r7
 801ac6a:	bf28      	it	cs
 801ac6c:	4639      	movcs	r1, r7
 801ac6e:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 801ac72:	42bb      	cmp	r3, r7
 801ac74:	bf28      	it	cs
 801ac76:	463b      	movcs	r3, r7
 801ac78:	3001      	adds	r0, #1
 801ac7a:	e7d1      	b.n	801ac20 <EwGetColorMin+0x1a>

0801ac7c <EwGetPointMin>:
 801ac7c:	b40e      	push	{r1, r2, r3}
 801ac7e:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801ac80:	aa07      	add	r2, sp, #28
 801ac82:	9c08      	ldr	r4, [sp, #32]
 801ac84:	f852 6b04 	ldr.w	r6, [r2], #4
 801ac88:	9201      	str	r2, [sp, #4]
 801ac8a:	4615      	mov	r5, r2
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ac92:	42b3      	cmp	r3, r6
 801ac94:	db06      	blt.n	801aca4 <EwGetPointMin+0x28>
 801ac96:	e9c0 4100 	strd	r4, r1, [r0]
 801ac9a:	b002      	add	sp, #8
 801ac9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aca0:	b003      	add	sp, #12
 801aca2:	4770      	bx	lr
 801aca4:	f852 7033 	ldr.w	r7, [r2, r3, lsl #3]
 801aca8:	42bc      	cmp	r4, r7
 801acaa:	bfa8      	it	ge
 801acac:	463c      	movge	r4, r7
 801acae:	f855 7033 	ldr.w	r7, [r5, r3, lsl #3]
 801acb2:	42b9      	cmp	r1, r7
 801acb4:	bfa8      	it	ge
 801acb6:	4639      	movge	r1, r7
 801acb8:	3301      	adds	r3, #1
 801acba:	e7ea      	b.n	801ac92 <EwGetPointMin+0x16>

0801acbc <EwGetRectMin>:
 801acbc:	b40e      	push	{r1, r2, r3}
 801acbe:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801acc0:	ab07      	add	r3, sp, #28
 801acc2:	9d08      	ldr	r5, [sp, #32]
 801acc4:	f853 cb04 	ldr.w	ip, [r3], #4
 801acc8:	9301      	str	r3, [sp, #4]
 801acca:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
 801acce:	68db      	ldr	r3, [r3, #12]
 801acd0:	aa0c      	add	r2, sp, #48	; 0x30
 801acd2:	2601      	movs	r6, #1
 801acd4:	4566      	cmp	r6, ip
 801acd6:	db08      	blt.n	801acea <EwGetRectMin+0x2e>
 801acd8:	e9c0 5400 	strd	r5, r4, [r0]
 801acdc:	e9c0 1302 	strd	r1, r3, [r0, #8]
 801ace0:	b002      	add	sp, #8
 801ace2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ace6:	b003      	add	sp, #12
 801ace8:	4770      	bx	lr
 801acea:	f852 7b10 	ldr.w	r7, [r2], #16
 801acee:	42bd      	cmp	r5, r7
 801acf0:	bfa8      	it	ge
 801acf2:	463d      	movge	r5, r7
 801acf4:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 801acf8:	42bc      	cmp	r4, r7
 801acfa:	bfa8      	it	ge
 801acfc:	463c      	movge	r4, r7
 801acfe:	f852 7c08 	ldr.w	r7, [r2, #-8]
 801ad02:	42b9      	cmp	r1, r7
 801ad04:	bfa8      	it	ge
 801ad06:	4639      	movge	r1, r7
 801ad08:	f852 7c04 	ldr.w	r7, [r2, #-4]
 801ad0c:	42bb      	cmp	r3, r7
 801ad0e:	bfa8      	it	ge
 801ad10:	463b      	movge	r3, r7
 801ad12:	3601      	adds	r6, #1
 801ad14:	e7de      	b.n	801acd4 <EwGetRectMin+0x18>

0801ad16 <EwGetInt32Max>:
 801ad16:	b40f      	push	{r0, r1, r2, r3}
 801ad18:	b513      	push	{r0, r1, r4, lr}
 801ad1a:	aa04      	add	r2, sp, #16
 801ad1c:	9805      	ldr	r0, [sp, #20]
 801ad1e:	f852 1b04 	ldr.w	r1, [r2], #4
 801ad22:	9201      	str	r2, [sp, #4]
 801ad24:	2301      	movs	r3, #1
 801ad26:	428b      	cmp	r3, r1
 801ad28:	db04      	blt.n	801ad34 <EwGetInt32Max+0x1e>
 801ad2a:	b002      	add	sp, #8
 801ad2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad30:	b004      	add	sp, #16
 801ad32:	4770      	bx	lr
 801ad34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ad38:	42a0      	cmp	r0, r4
 801ad3a:	bfb8      	it	lt
 801ad3c:	4620      	movlt	r0, r4
 801ad3e:	3301      	adds	r3, #1
 801ad40:	e7f1      	b.n	801ad26 <EwGetInt32Max+0x10>

0801ad42 <EwGetUInt32Max>:
 801ad42:	b40f      	push	{r0, r1, r2, r3}
 801ad44:	b513      	push	{r0, r1, r4, lr}
 801ad46:	aa04      	add	r2, sp, #16
 801ad48:	9805      	ldr	r0, [sp, #20]
 801ad4a:	f852 1b04 	ldr.w	r1, [r2], #4
 801ad4e:	9201      	str	r2, [sp, #4]
 801ad50:	2301      	movs	r3, #1
 801ad52:	428b      	cmp	r3, r1
 801ad54:	db04      	blt.n	801ad60 <EwGetUInt32Max+0x1e>
 801ad56:	b002      	add	sp, #8
 801ad58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5c:	b004      	add	sp, #16
 801ad5e:	4770      	bx	lr
 801ad60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ad64:	42a0      	cmp	r0, r4
 801ad66:	bf38      	it	cc
 801ad68:	4620      	movcc	r0, r4
 801ad6a:	3301      	adds	r3, #1
 801ad6c:	e7f1      	b.n	801ad52 <EwGetUInt32Max+0x10>

0801ad6e <EwGetInt64Max>:
 801ad6e:	b40f      	push	{r0, r1, r2, r3}
 801ad70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad72:	ab06      	add	r3, sp, #24
 801ad74:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 801ad78:	f022 0207 	bic.w	r2, r2, #7
 801ad7c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ad80:	9301      	str	r3, [sp, #4]
 801ad82:	4613      	mov	r3, r2
 801ad84:	6851      	ldr	r1, [r2, #4]
 801ad86:	f853 0b08 	ldr.w	r0, [r3], #8
 801ad8a:	2201      	movs	r2, #1
 801ad8c:	42b2      	cmp	r2, r6
 801ad8e:	db04      	blt.n	801ad9a <EwGetInt64Max+0x2c>
 801ad90:	b002      	add	sp, #8
 801ad92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad96:	b004      	add	sp, #16
 801ad98:	4770      	bx	lr
 801ad9a:	3307      	adds	r3, #7
 801ad9c:	f023 0407 	bic.w	r4, r3, #7
 801ada0:	4623      	mov	r3, r4
 801ada2:	6864      	ldr	r4, [r4, #4]
 801ada4:	f853 5b08 	ldr.w	r5, [r3], #8
 801ada8:	42a8      	cmp	r0, r5
 801adaa:	eb71 0c04 	sbcs.w	ip, r1, r4
 801adae:	bfbc      	itt	lt
 801adb0:	4628      	movlt	r0, r5
 801adb2:	4621      	movlt	r1, r4
 801adb4:	3201      	adds	r2, #1
 801adb6:	e7e9      	b.n	801ad8c <EwGetInt64Max+0x1e>

0801adb8 <EwGetUInt64Max>:
 801adb8:	b40f      	push	{r0, r1, r2, r3}
 801adba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801adbc:	ab06      	add	r3, sp, #24
 801adbe:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 801adc2:	f022 0207 	bic.w	r2, r2, #7
 801adc6:	f853 6b04 	ldr.w	r6, [r3], #4
 801adca:	9301      	str	r3, [sp, #4]
 801adcc:	4613      	mov	r3, r2
 801adce:	6851      	ldr	r1, [r2, #4]
 801add0:	f853 0b08 	ldr.w	r0, [r3], #8
 801add4:	2201      	movs	r2, #1
 801add6:	42b2      	cmp	r2, r6
 801add8:	db04      	blt.n	801ade4 <EwGetUInt64Max+0x2c>
 801adda:	b002      	add	sp, #8
 801addc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ade0:	b004      	add	sp, #16
 801ade2:	4770      	bx	lr
 801ade4:	3307      	adds	r3, #7
 801ade6:	f023 0407 	bic.w	r4, r3, #7
 801adea:	4623      	mov	r3, r4
 801adec:	6864      	ldr	r4, [r4, #4]
 801adee:	f853 5b08 	ldr.w	r5, [r3], #8
 801adf2:	42a8      	cmp	r0, r5
 801adf4:	eb71 0c04 	sbcs.w	ip, r1, r4
 801adf8:	bf3c      	itt	cc
 801adfa:	4628      	movcc	r0, r5
 801adfc:	4621      	movcc	r1, r4
 801adfe:	3201      	adds	r2, #1
 801ae00:	e7e9      	b.n	801add6 <EwGetUInt64Max+0x1e>

0801ae02 <EwGetFloatMax>:
 801ae02:	b40f      	push	{r0, r1, r2, r3}
 801ae04:	b570      	push	{r4, r5, r6, lr}
 801ae06:	ed2d 8b02 	vpush	{d8}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	ab08      	add	r3, sp, #32
 801ae0e:	f10d 042b 	add.w	r4, sp, #43	; 0x2b
 801ae12:	f024 0407 	bic.w	r4, r4, #7
 801ae16:	f853 6b04 	ldr.w	r6, [r3], #4
 801ae1a:	9301      	str	r3, [sp, #4]
 801ae1c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ae20:	f002 fc3a 	bl	801d698 <__aeabi_d2f>
 801ae24:	ee08 0a10 	vmov	s16, r0
 801ae28:	2501      	movs	r5, #1
 801ae2a:	42b5      	cmp	r5, r6
 801ae2c:	db08      	blt.n	801ae40 <EwGetFloatMax+0x3e>
 801ae2e:	ee18 0a10 	vmov	r0, s16
 801ae32:	b002      	add	sp, #8
 801ae34:	ecbd 8b02 	vpop	{d8}
 801ae38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae3c:	b004      	add	sp, #16
 801ae3e:	4770      	bx	lr
 801ae40:	3407      	adds	r4, #7
 801ae42:	f024 0407 	bic.w	r4, r4, #7
 801ae46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ae4a:	f002 fc25 	bl	801d698 <__aeabi_d2f>
 801ae4e:	ee07 0a90 	vmov	s15, r0
 801ae52:	eeb4 8a67 	vcmp.f32	s16, s15
 801ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae5a:	bf48      	it	mi
 801ae5c:	eeb0 8a67 	vmovmi.f32	s16, s15
 801ae60:	3501      	adds	r5, #1
 801ae62:	e7e2      	b.n	801ae2a <EwGetFloatMax+0x28>

0801ae64 <EwGetColorMax>:
 801ae64:	b40f      	push	{r0, r1, r2, r3}
 801ae66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae68:	ab08      	add	r3, sp, #32
 801ae6a:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 801ae6e:	f853 6b04 	ldr.w	r6, [r3], #4
 801ae72:	9300      	str	r3, [sp, #0]
 801ae74:	785c      	ldrb	r4, [r3, #1]
 801ae76:	7899      	ldrb	r1, [r3, #2]
 801ae78:	1d1a      	adds	r2, r3, #4
 801ae7a:	78db      	ldrb	r3, [r3, #3]
 801ae7c:	2001      	movs	r0, #1
 801ae7e:	42b0      	cmp	r0, r6
 801ae80:	db15      	blt.n	801aeae <EwGetColorMax+0x4a>
 801ae82:	2000      	movs	r0, #0
 801ae84:	f365 0007 	bfi	r0, r5, #0, #8
 801ae88:	f364 200f 	bfi	r0, r4, #8, #8
 801ae8c:	f361 4017 	bfi	r0, r1, #16, #8
 801ae90:	f363 601f 	bfi	r0, r3, #24, #8
 801ae94:	f88d 5004 	strb.w	r5, [sp, #4]
 801ae98:	f88d 4005 	strb.w	r4, [sp, #5]
 801ae9c:	f88d 1006 	strb.w	r1, [sp, #6]
 801aea0:	f88d 3007 	strb.w	r3, [sp, #7]
 801aea4:	b003      	add	sp, #12
 801aea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aeaa:	b004      	add	sp, #16
 801aeac:	4770      	bx	lr
 801aeae:	f812 7b04 	ldrb.w	r7, [r2], #4
 801aeb2:	42bd      	cmp	r5, r7
 801aeb4:	bf38      	it	cc
 801aeb6:	463d      	movcc	r5, r7
 801aeb8:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 801aebc:	42bc      	cmp	r4, r7
 801aebe:	bf38      	it	cc
 801aec0:	463c      	movcc	r4, r7
 801aec2:	f812 7c02 	ldrb.w	r7, [r2, #-2]
 801aec6:	42b9      	cmp	r1, r7
 801aec8:	bf38      	it	cc
 801aeca:	4639      	movcc	r1, r7
 801aecc:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 801aed0:	42bb      	cmp	r3, r7
 801aed2:	bf38      	it	cc
 801aed4:	463b      	movcc	r3, r7
 801aed6:	3001      	adds	r0, #1
 801aed8:	e7d1      	b.n	801ae7e <EwGetColorMax+0x1a>

0801aeda <EwGetPointMax>:
 801aeda:	b40e      	push	{r1, r2, r3}
 801aedc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801aede:	aa07      	add	r2, sp, #28
 801aee0:	9c08      	ldr	r4, [sp, #32]
 801aee2:	f852 6b04 	ldr.w	r6, [r2], #4
 801aee6:	9201      	str	r2, [sp, #4]
 801aee8:	4615      	mov	r5, r2
 801aeea:	2301      	movs	r3, #1
 801aeec:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801aef0:	42b3      	cmp	r3, r6
 801aef2:	db06      	blt.n	801af02 <EwGetPointMax+0x28>
 801aef4:	e9c0 4100 	strd	r4, r1, [r0]
 801aef8:	b002      	add	sp, #8
 801aefa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aefe:	b003      	add	sp, #12
 801af00:	4770      	bx	lr
 801af02:	f852 7033 	ldr.w	r7, [r2, r3, lsl #3]
 801af06:	42bc      	cmp	r4, r7
 801af08:	bfb8      	it	lt
 801af0a:	463c      	movlt	r4, r7
 801af0c:	f855 7033 	ldr.w	r7, [r5, r3, lsl #3]
 801af10:	42b9      	cmp	r1, r7
 801af12:	bfb8      	it	lt
 801af14:	4639      	movlt	r1, r7
 801af16:	3301      	adds	r3, #1
 801af18:	e7ea      	b.n	801aef0 <EwGetPointMax+0x16>

0801af1a <EwGetRectMax>:
 801af1a:	b40e      	push	{r1, r2, r3}
 801af1c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801af1e:	ab07      	add	r3, sp, #28
 801af20:	9d08      	ldr	r5, [sp, #32]
 801af22:	f853 cb04 	ldr.w	ip, [r3], #4
 801af26:	9301      	str	r3, [sp, #4]
 801af28:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
 801af2c:	68db      	ldr	r3, [r3, #12]
 801af2e:	aa0c      	add	r2, sp, #48	; 0x30
 801af30:	2601      	movs	r6, #1
 801af32:	4566      	cmp	r6, ip
 801af34:	db08      	blt.n	801af48 <EwGetRectMax+0x2e>
 801af36:	e9c0 5400 	strd	r5, r4, [r0]
 801af3a:	e9c0 1302 	strd	r1, r3, [r0, #8]
 801af3e:	b002      	add	sp, #8
 801af40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af44:	b003      	add	sp, #12
 801af46:	4770      	bx	lr
 801af48:	f852 7b10 	ldr.w	r7, [r2], #16
 801af4c:	42bd      	cmp	r5, r7
 801af4e:	bfb8      	it	lt
 801af50:	463d      	movlt	r5, r7
 801af52:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 801af56:	42bc      	cmp	r4, r7
 801af58:	bfb8      	it	lt
 801af5a:	463c      	movlt	r4, r7
 801af5c:	f852 7c08 	ldr.w	r7, [r2, #-8]
 801af60:	42b9      	cmp	r1, r7
 801af62:	bfb8      	it	lt
 801af64:	4639      	movlt	r1, r7
 801af66:	f852 7c04 	ldr.w	r7, [r2, #-4]
 801af6a:	42bb      	cmp	r3, r7
 801af6c:	bfb8      	it	lt
 801af6e:	463b      	movlt	r3, r7
 801af70:	3601      	adds	r6, #1
 801af72:	e7de      	b.n	801af32 <EwGetRectMax+0x18>

0801af74 <EwMathLength>:
 801af74:	ee60 0aa0 	vmul.f32	s1, s1, s1
 801af78:	eee0 0a00 	vfma.f32	s1, s0, s0
 801af7c:	eeb0 0a60 	vmov.f32	s0, s1
 801af80:	f00e bc42 	b.w	8029808 <EwMathSqrt>

0801af84 <EwMathLengthPoint>:
 801af84:	ee07 1a10 	vmov	s14, r1
 801af88:	ee07 0a90 	vmov	s15, r0
 801af8c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801af90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af94:	ee20 0a00 	vmul.f32	s0, s0, s0
 801af98:	b082      	sub	sp, #8
 801af9a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801af9e:	ab02      	add	r3, sp, #8
 801afa0:	e903 0003 	stmdb	r3, {r0, r1}
 801afa4:	b002      	add	sp, #8
 801afa6:	f00e bc2f 	b.w	8029808 <EwMathSqrt>

0801afaa <EwMathTrunc>:
 801afaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb2:	d501      	bpl.n	801afb8 <EwMathTrunc+0xe>
 801afb4:	f00e bc58 	b.w	8029868 <EwMathCeil>
 801afb8:	f00e bc54 	b.w	8029864 <EwMathFloor>

0801afbc <EwMathFract>:
 801afbc:	b508      	push	{r3, lr}
 801afbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801afc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc6:	ed2d 8b02 	vpush	{d8}
 801afca:	eeb0 8a40 	vmov.f32	s16, s0
 801afce:	d506      	bpl.n	801afde <EwMathFract+0x22>
 801afd0:	f00e fc4a 	bl	8029868 <EwMathCeil>
 801afd4:	ee38 0a40 	vsub.f32	s0, s16, s0
 801afd8:	ecbd 8b02 	vpop	{d8}
 801afdc:	bd08      	pop	{r3, pc}
 801afde:	f00e fc41 	bl	8029864 <EwMathFloor>
 801afe2:	e7f7      	b.n	801afd4 <EwMathFract+0x18>
 801afe4:	b538      	push	{r3, r4, r5, lr}
 801afe6:	4d06      	ldr	r5, [pc, #24]	; (801b000 <EwMathFract+0x44>)
 801afe8:	4604      	mov	r4, r0
 801afea:	6820      	ldr	r0, [r4, #0]
 801afec:	b900      	cbnz	r0, 801aff0 <EwMathFract+0x34>
 801afee:	bd38      	pop	{r3, r4, r5, pc}
 801aff0:	6803      	ldr	r3, [r0, #0]
 801aff2:	6023      	str	r3, [r4, #0]
 801aff4:	682b      	ldr	r3, [r5, #0]
 801aff6:	3b14      	subs	r3, #20
 801aff8:	602b      	str	r3, [r5, #0]
 801affa:	f00e fbbb 	bl	8029774 <EwFree>
 801affe:	e7f4      	b.n	801afea <EwMathFract+0x2e>
 801b000:	200002d8 	.word	0x200002d8
 801b004:	b538      	push	{r3, r4, r5, lr}
 801b006:	4d0b      	ldr	r5, [pc, #44]	; (801b034 <EwMathFract+0x78>)
 801b008:	4604      	mov	r4, r0
 801b00a:	6820      	ldr	r0, [r4, #0]
 801b00c:	b900      	cbnz	r0, 801b010 <EwMathFract+0x54>
 801b00e:	bd38      	pop	{r3, r4, r5, pc}
 801b010:	6843      	ldr	r3, [r0, #4]
 801b012:	685b      	ldr	r3, [r3, #4]
 801b014:	b11b      	cbz	r3, 801b01e <EwMathFract+0x62>
 801b016:	68c3      	ldr	r3, [r0, #12]
 801b018:	b14b      	cbz	r3, 801b02e <EwMathFract+0x72>
 801b01a:	685b      	ldr	r3, [r3, #4]
 801b01c:	b93b      	cbnz	r3, 801b02e <EwMathFract+0x72>
 801b01e:	682b      	ldr	r3, [r5, #0]
 801b020:	3b18      	subs	r3, #24
 801b022:	602b      	str	r3, [r5, #0]
 801b024:	6803      	ldr	r3, [r0, #0]
 801b026:	6023      	str	r3, [r4, #0]
 801b028:	f00e fba4 	bl	8029774 <EwFree>
 801b02c:	e7ed      	b.n	801b00a <EwMathFract+0x4e>
 801b02e:	4604      	mov	r4, r0
 801b030:	e7eb      	b.n	801b00a <EwMathFract+0x4e>
 801b032:	bf00      	nop
 801b034:	200002d8 	.word	0x200002d8
 801b038:	b538      	push	{r3, r4, r5, lr}
 801b03a:	4d0c      	ldr	r5, [pc, #48]	; (801b06c <EwMathFract+0xb0>)
 801b03c:	4604      	mov	r4, r0
 801b03e:	6820      	ldr	r0, [r4, #0]
 801b040:	b900      	cbnz	r0, 801b044 <EwMathFract+0x88>
 801b042:	bd38      	pop	{r3, r4, r5, pc}
 801b044:	6843      	ldr	r3, [r0, #4]
 801b046:	685b      	ldr	r3, [r3, #4]
 801b048:	b11b      	cbz	r3, 801b052 <EwMathFract+0x96>
 801b04a:	68c3      	ldr	r3, [r0, #12]
 801b04c:	b15b      	cbz	r3, 801b066 <EwMathFract+0xaa>
 801b04e:	685b      	ldr	r3, [r3, #4]
 801b050:	b94b      	cbnz	r3, 801b066 <EwMathFract+0xaa>
 801b052:	6903      	ldr	r3, [r0, #16]
 801b054:	b93b      	cbnz	r3, 801b066 <EwMathFract+0xaa>
 801b056:	682b      	ldr	r3, [r5, #0]
 801b058:	6802      	ldr	r2, [r0, #0]
 801b05a:	3b14      	subs	r3, #20
 801b05c:	602b      	str	r3, [r5, #0]
 801b05e:	6022      	str	r2, [r4, #0]
 801b060:	f00e fb88 	bl	8029774 <EwFree>
 801b064:	e7eb      	b.n	801b03e <EwMathFract+0x82>
 801b066:	4604      	mov	r4, r0
 801b068:	e7e9      	b.n	801b03e <EwMathFract+0x82>
 801b06a:	bf00      	nop
 801b06c:	200002d8 	.word	0x200002d8
 801b070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b072:	466e      	mov	r6, sp
 801b074:	e886 0006 	stmia.w	r6, {r1, r2}
 801b078:	4607      	mov	r7, r0
 801b07a:	461d      	mov	r5, r3
 801b07c:	4610      	mov	r0, r2
 801b07e:	460b      	mov	r3, r1
 801b080:	463c      	mov	r4, r7
 801b082:	6822      	ldr	r2, [r4, #0]
 801b084:	b1ba      	cbz	r2, 801b0b6 <EwMathFract+0xfa>
 801b086:	6891      	ldr	r1, [r2, #8]
 801b088:	4281      	cmp	r1, r0
 801b08a:	d106      	bne.n	801b09a <EwMathFract+0xde>
 801b08c:	6851      	ldr	r1, [r2, #4]
 801b08e:	4299      	cmp	r1, r3
 801b090:	d103      	bne.n	801b09a <EwMathFract+0xde>
 801b092:	6913      	ldr	r3, [r2, #16]
 801b094:	b11b      	cbz	r3, 801b09e <EwMathFract+0xe2>
 801b096:	2400      	movs	r4, #0
 801b098:	e009      	b.n	801b0ae <EwMathFract+0xf2>
 801b09a:	4614      	mov	r4, r2
 801b09c:	e7f1      	b.n	801b082 <EwMathFract+0xc6>
 801b09e:	6811      	ldr	r1, [r2, #0]
 801b0a0:	6021      	str	r1, [r4, #0]
 801b0a2:	6013      	str	r3, [r2, #0]
 801b0a4:	6823      	ldr	r3, [r4, #0]
 801b0a6:	b9bb      	cbnz	r3, 801b0d8 <EwMathFract+0x11c>
 801b0a8:	6022      	str	r2, [r4, #0]
 801b0aa:	60d5      	str	r5, [r2, #12]
 801b0ac:	2401      	movs	r4, #1
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	b003      	add	sp, #12
 801b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0b4:	463c      	mov	r4, r7
 801b0b6:	2014      	movs	r0, #20
 801b0b8:	f00e fb5a 	bl	8029770 <EwAlloc>
 801b0bc:	4602      	mov	r2, r0
 801b0be:	b968      	cbnz	r0, 801b0dc <EwMathFract+0x120>
 801b0c0:	2004      	movs	r0, #4
 801b0c2:	f7fe fda1 	bl	8019c08 <EwImmediateReclaimMemory>
 801b0c6:	4604      	mov	r4, r0
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	d1f3      	bne.n	801b0b4 <EwMathFract+0xf8>
 801b0cc:	2004      	movs	r0, #4
 801b0ce:	f7fd fdeb 	bl	8018ca8 <EwError>
 801b0d2:	f00e fb51 	bl	8029778 <EwPanic>
 801b0d6:	e7ea      	b.n	801b0ae <EwMathFract+0xf2>
 801b0d8:	461c      	mov	r4, r3
 801b0da:	e7e3      	b.n	801b0a4 <EwMathFract+0xe8>
 801b0dc:	2300      	movs	r3, #0
 801b0de:	6003      	str	r3, [r0, #0]
 801b0e0:	6103      	str	r3, [r0, #16]
 801b0e2:	1d03      	adds	r3, r0, #4
 801b0e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b0e8:	e883 0003 	stmia.w	r3, {r0, r1}
 801b0ec:	4b0a      	ldr	r3, [pc, #40]	; (801b118 <EwMathFract+0x15c>)
 801b0ee:	6819      	ldr	r1, [r3, #0]
 801b0f0:	3114      	adds	r1, #20
 801b0f2:	6019      	str	r1, [r3, #0]
 801b0f4:	4b09      	ldr	r3, [pc, #36]	; (801b11c <EwMathFract+0x160>)
 801b0f6:	6818      	ldr	r0, [r3, #0]
 801b0f8:	4281      	cmp	r1, r0
 801b0fa:	dd00      	ble.n	801b0fe <EwMathFract+0x142>
 801b0fc:	6019      	str	r1, [r3, #0]
 801b0fe:	4b08      	ldr	r3, [pc, #32]	; (801b120 <EwMathFract+0x164>)
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	4419      	add	r1, r3
 801b104:	4b07      	ldr	r3, [pc, #28]	; (801b124 <EwMathFract+0x168>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4419      	add	r1, r3
 801b10a:	4b07      	ldr	r3, [pc, #28]	; (801b128 <EwMathFract+0x16c>)
 801b10c:	6818      	ldr	r0, [r3, #0]
 801b10e:	4281      	cmp	r1, r0
 801b110:	ddc8      	ble.n	801b0a4 <EwMathFract+0xe8>
 801b112:	6019      	str	r1, [r3, #0]
 801b114:	e7c6      	b.n	801b0a4 <EwMathFract+0xe8>
 801b116:	bf00      	nop
 801b118:	200002d8 	.word	0x200002d8
 801b11c:	200002e0 	.word	0x200002e0
 801b120:	200002e4 	.word	0x200002e4
 801b124:	200002e8 	.word	0x200002e8
 801b128:	200002ec 	.word	0x200002ec

0801b12c <EwMarkSignals>:
 801b12c:	4912      	ldr	r1, [pc, #72]	; (801b178 <EwMarkSignals+0x4c>)
 801b12e:	b530      	push	{r4, r5, lr}
 801b130:	2401      	movs	r4, #1
 801b132:	680a      	ldr	r2, [r1, #0]
 801b134:	b922      	cbnz	r2, 801b140 <EwMarkSignals+0x14>
 801b136:	4911      	ldr	r1, [pc, #68]	; (801b17c <EwMarkSignals+0x50>)
 801b138:	2401      	movs	r4, #1
 801b13a:	680a      	ldr	r2, [r1, #0]
 801b13c:	b972      	cbnz	r2, 801b15c <EwMarkSignals+0x30>
 801b13e:	bd30      	pop	{r4, r5, pc}
 801b140:	68d3      	ldr	r3, [r2, #12]
 801b142:	b143      	cbz	r3, 801b156 <EwMarkSignals+0x2a>
 801b144:	685d      	ldr	r5, [r3, #4]
 801b146:	b935      	cbnz	r5, 801b156 <EwMarkSignals+0x2a>
 801b148:	6855      	ldr	r5, [r2, #4]
 801b14a:	686d      	ldr	r5, [r5, #4]
 801b14c:	b11d      	cbz	r5, 801b156 <EwMarkSignals+0x2a>
 801b14e:	6043      	str	r3, [r0, #4]
 801b150:	605c      	str	r4, [r3, #4]
 801b152:	4618      	mov	r0, r3
 801b154:	e7ed      	b.n	801b132 <EwMarkSignals+0x6>
 801b156:	4611      	mov	r1, r2
 801b158:	4603      	mov	r3, r0
 801b15a:	e7fa      	b.n	801b152 <EwMarkSignals+0x26>
 801b15c:	68d3      	ldr	r3, [r2, #12]
 801b15e:	b143      	cbz	r3, 801b172 <EwMarkSignals+0x46>
 801b160:	685d      	ldr	r5, [r3, #4]
 801b162:	b935      	cbnz	r5, 801b172 <EwMarkSignals+0x46>
 801b164:	6855      	ldr	r5, [r2, #4]
 801b166:	686d      	ldr	r5, [r5, #4]
 801b168:	b11d      	cbz	r5, 801b172 <EwMarkSignals+0x46>
 801b16a:	6043      	str	r3, [r0, #4]
 801b16c:	605c      	str	r4, [r3, #4]
 801b16e:	4618      	mov	r0, r3
 801b170:	e7e3      	b.n	801b13a <EwMarkSignals+0xe>
 801b172:	4611      	mov	r1, r2
 801b174:	4603      	mov	r3, r0
 801b176:	e7fa      	b.n	801b16e <EwMarkSignals+0x42>
 801b178:	20000348 	.word	0x20000348
 801b17c:	2000034c 	.word	0x2000034c

0801b180 <EwDiscardSignals>:
 801b180:	b510      	push	{r4, lr}
 801b182:	4c04      	ldr	r4, [pc, #16]	; (801b194 <EwDiscardSignals+0x14>)
 801b184:	4620      	mov	r0, r4
 801b186:	f7ff ff2d 	bl	801afe4 <EwMathFract+0x28>
 801b18a:	1d20      	adds	r0, r4, #4
 801b18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b190:	e728      	b.n	801afe4 <EwMathFract+0x28>
 801b192:	bf00      	nop
 801b194:	20000348 	.word	0x20000348

0801b198 <EwDisposeObservers>:
 801b198:	b510      	push	{r4, lr}
 801b19a:	4c07      	ldr	r4, [pc, #28]	; (801b1b8 <EwDisposeObservers+0x20>)
 801b19c:	f104 0008 	add.w	r0, r4, #8
 801b1a0:	f7ff ff30 	bl	801b004 <EwMathFract+0x48>
 801b1a4:	f104 000c 	add.w	r0, r4, #12
 801b1a8:	f7ff ff2c 	bl	801b004 <EwMathFract+0x48>
 801b1ac:	f104 0010 	add.w	r0, r4, #16
 801b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1b4:	e726      	b.n	801b004 <EwMathFract+0x48>
 801b1b6:	bf00      	nop
 801b1b8:	20000348 	.word	0x20000348

0801b1bc <EwDisposeSignals>:
 801b1bc:	b510      	push	{r4, lr}
 801b1be:	4c04      	ldr	r4, [pc, #16]	; (801b1d0 <EwDisposeSignals+0x14>)
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	f7ff ff39 	bl	801b038 <EwMathFract+0x7c>
 801b1c6:	1d20      	adds	r0, r4, #4
 801b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1cc:	e734      	b.n	801b038 <EwMathFract+0x7c>
 801b1ce:	bf00      	nop
 801b1d0:	20000348 	.word	0x20000348

0801b1d4 <EwNewSlot>:
 801b1d4:	e9c0 1200 	strd	r1, r2, [r0]
 801b1d8:	4770      	bx	lr

0801b1da <EwCompSlot>:
 801b1da:	b084      	sub	sp, #16
 801b1dc:	f10d 0c10 	add.w	ip, sp, #16
 801b1e0:	e90c 0003 	stmdb	ip, {r0, r1}
 801b1e4:	4669      	mov	r1, sp
 801b1e6:	e881 000c 	stmia.w	r1, {r2, r3}
 801b1ea:	9b00      	ldr	r3, [sp, #0]
 801b1ec:	4298      	cmp	r0, r3
 801b1ee:	d106      	bne.n	801b1fe <EwCompSlot+0x24>
 801b1f0:	9803      	ldr	r0, [sp, #12]
 801b1f2:	9b01      	ldr	r3, [sp, #4]
 801b1f4:	1ac0      	subs	r0, r0, r3
 801b1f6:	bf18      	it	ne
 801b1f8:	2001      	movne	r0, #1
 801b1fa:	b004      	add	sp, #16
 801b1fc:	4770      	bx	lr
 801b1fe:	2001      	movs	r0, #1
 801b200:	e7fb      	b.n	801b1fa <EwCompSlot+0x20>

0801b202 <EwIsSlotNull>:
 801b202:	b082      	sub	sp, #8
 801b204:	ab02      	add	r3, sp, #8
 801b206:	e903 0003 	stmdb	r3, {r0, r1}
 801b20a:	b920      	cbnz	r0, 801b216 <EwIsSlotNull+0x14>
 801b20c:	fab1 f081 	clz	r0, r1
 801b210:	0940      	lsrs	r0, r0, #5
 801b212:	b002      	add	sp, #8
 801b214:	4770      	bx	lr
 801b216:	2000      	movs	r0, #0
 801b218:	e7fb      	b.n	801b212 <EwIsSlotNull+0x10>

0801b21a <EwSignal>:
 801b21a:	b082      	sub	sp, #8
 801b21c:	ab02      	add	r3, sp, #8
 801b21e:	e903 0003 	stmdb	r3, {r0, r1}
 801b222:	4611      	mov	r1, r2
 801b224:	b110      	cbz	r0, 801b22c <EwSignal+0x12>
 801b226:	9b01      	ldr	r3, [sp, #4]
 801b228:	b002      	add	sp, #8
 801b22a:	4718      	bx	r3
 801b22c:	b002      	add	sp, #8
 801b22e:	4770      	bx	lr

0801b230 <EwPostSignal>:
 801b230:	b513      	push	{r0, r1, r4, lr}
 801b232:	466c      	mov	r4, sp
 801b234:	e884 0003 	stmia.w	r4, {r0, r1}
 801b238:	4613      	mov	r3, r2
 801b23a:	b160      	cbz	r0, 801b256 <EwPostSignal+0x26>
 801b23c:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b240:	4806      	ldr	r0, [pc, #24]	; (801b25c <EwPostSignal+0x2c>)
 801b242:	f7ff ff15 	bl	801b070 <EwMathFract+0xb4>
 801b246:	b930      	cbnz	r0, 801b256 <EwPostSignal+0x26>
 801b248:	f44f 709a 	mov.w	r0, #308	; 0x134
 801b24c:	b002      	add	sp, #8
 801b24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b252:	f7fd bd29 	b.w	8018ca8 <EwError>
 801b256:	b002      	add	sp, #8
 801b258:	bd10      	pop	{r4, pc}
 801b25a:	bf00      	nop
 801b25c:	20000348 	.word	0x20000348

0801b260 <EwIdleSignal>:
 801b260:	b417      	push	{r0, r1, r2, r4}
 801b262:	466c      	mov	r4, sp
 801b264:	e884 0003 	stmia.w	r4, {r0, r1}
 801b268:	4613      	mov	r3, r2
 801b26a:	b130      	cbz	r0, 801b27a <EwIdleSignal+0x1a>
 801b26c:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b270:	4804      	ldr	r0, [pc, #16]	; (801b284 <EwIdleSignal+0x24>)
 801b272:	b003      	add	sp, #12
 801b274:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b278:	e6fa      	b.n	801b070 <EwMathFract+0xb4>
 801b27a:	b003      	add	sp, #12
 801b27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b280:	4770      	bx	lr
 801b282:	bf00      	nop
 801b284:	2000034c 	.word	0x2000034c

0801b288 <EwProcessSignals>:
 801b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b28c:	4c11      	ldr	r4, [pc, #68]	; (801b2d4 <EwProcessSignals+0x4c>)
 801b28e:	4f12      	ldr	r7, [pc, #72]	; (801b2d8 <EwProcessSignals+0x50>)
 801b290:	6826      	ldr	r6, [r4, #0]
 801b292:	3e00      	subs	r6, #0
 801b294:	bf18      	it	ne
 801b296:	2601      	movne	r6, #1
 801b298:	f04f 0801 	mov.w	r8, #1
 801b29c:	6825      	ldr	r5, [r4, #0]
 801b29e:	b945      	cbnz	r5, 801b2b2 <EwProcessSignals+0x2a>
 801b2a0:	480c      	ldr	r0, [pc, #48]	; (801b2d4 <EwProcessSignals+0x4c>)
 801b2a2:	f7ff fe9f 	bl	801afe4 <EwMathFract+0x28>
 801b2a6:	6863      	ldr	r3, [r4, #4]
 801b2a8:	4630      	mov	r0, r6
 801b2aa:	e9c4 3500 	strd	r3, r5, [r4]
 801b2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b2:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 801b2b6:	6868      	ldr	r0, [r5, #4]
 801b2b8:	f8c5 8010 	str.w	r8, [r5, #16]
 801b2bc:	4798      	blx	r3
 801b2be:	6823      	ldr	r3, [r4, #0]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	6023      	str	r3, [r4, #0]
 801b2c4:	683b      	ldr	r3, [r7, #0]
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	3b14      	subs	r3, #20
 801b2ca:	603b      	str	r3, [r7, #0]
 801b2cc:	f00e fa52 	bl	8029774 <EwFree>
 801b2d0:	e7e4      	b.n	801b29c <EwProcessSignals+0x14>
 801b2d2:	bf00      	nop
 801b2d4:	20000348 	.word	0x20000348
 801b2d8:	200002d8 	.word	0x200002d8

0801b2dc <EwAnyPendingSignals>:
 801b2dc:	4b04      	ldr	r3, [pc, #16]	; (801b2f0 <EwAnyPendingSignals+0x14>)
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	b922      	cbnz	r2, 801b2ec <EwAnyPendingSignals+0x10>
 801b2e2:	6858      	ldr	r0, [r3, #4]
 801b2e4:	3800      	subs	r0, #0
 801b2e6:	bf18      	it	ne
 801b2e8:	2001      	movne	r0, #1
 801b2ea:	4770      	bx	lr
 801b2ec:	2001      	movs	r0, #1
 801b2ee:	4770      	bx	lr
 801b2f0:	20000348 	.word	0x20000348

0801b2f4 <EwAttachObjObserver>:
 801b2f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b2f8:	466e      	mov	r6, sp
 801b2fa:	e886 0003 	stmia.w	r6, {r0, r1}
 801b2fe:	4617      	mov	r7, r2
 801b300:	461d      	mov	r5, r3
 801b302:	4604      	mov	r4, r0
 801b304:	b1a8      	cbz	r0, 801b332 <EwAttachObjObserver+0x3e>
 801b306:	b35a      	cbz	r2, 801b360 <EwAttachObjObserver+0x6c>
 801b308:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801b3c0 <EwAttachObjObserver+0xcc>
 801b30c:	9a01      	ldr	r2, [sp, #4]
 801b30e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801b312:	b1a1      	cbz	r1, 801b33e <EwAttachObjObserver+0x4a>
 801b314:	684b      	ldr	r3, [r1, #4]
 801b316:	42a3      	cmp	r3, r4
 801b318:	d10f      	bne.n	801b33a <EwAttachObjObserver+0x46>
 801b31a:	688b      	ldr	r3, [r1, #8]
 801b31c:	4293      	cmp	r3, r2
 801b31e:	d10c      	bne.n	801b33a <EwAttachObjObserver+0x46>
 801b320:	68cb      	ldr	r3, [r1, #12]
 801b322:	42bb      	cmp	r3, r7
 801b324:	d109      	bne.n	801b33a <EwAttachObjObserver+0x46>
 801b326:	6908      	ldr	r0, [r1, #16]
 801b328:	b938      	cbnz	r0, 801b33a <EwAttachObjObserver+0x46>
 801b32a:	694b      	ldr	r3, [r1, #20]
 801b32c:	42ab      	cmp	r3, r5
 801b32e:	d104      	bne.n	801b33a <EwAttachObjObserver+0x46>
 801b330:	4604      	mov	r4, r0
 801b332:	4620      	mov	r0, r4
 801b334:	b002      	add	sp, #8
 801b336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b33a:	6809      	ldr	r1, [r1, #0]
 801b33c:	e7e9      	b.n	801b312 <EwAttachObjObserver+0x1e>
 801b33e:	2018      	movs	r0, #24
 801b340:	f00e fa16 	bl	8029770 <EwAlloc>
 801b344:	4604      	mov	r4, r0
 801b346:	b968      	cbnz	r0, 801b364 <EwAttachObjObserver+0x70>
 801b348:	2005      	movs	r0, #5
 801b34a:	f7fe fc5d 	bl	8019c08 <EwImmediateReclaimMemory>
 801b34e:	4604      	mov	r4, r0
 801b350:	2800      	cmp	r0, #0
 801b352:	d1f4      	bne.n	801b33e <EwAttachObjObserver+0x4a>
 801b354:	2005      	movs	r0, #5
 801b356:	f7fd fca7 	bl	8018ca8 <EwError>
 801b35a:	f00e fa0d 	bl	8029778 <EwPanic>
 801b35e:	e7e8      	b.n	801b332 <EwAttachObjObserver+0x3e>
 801b360:	4614      	mov	r4, r2
 801b362:	e7e6      	b.n	801b332 <EwAttachObjObserver+0x3e>
 801b364:	1d03      	adds	r3, r0, #4
 801b366:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b36a:	4a10      	ldr	r2, [pc, #64]	; (801b3ac <EwAttachObjObserver+0xb8>)
 801b36c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b370:	2300      	movs	r3, #0
 801b372:	e9c4 3504 	strd	r3, r5, [r4, #16]
 801b376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b37a:	6023      	str	r3, [r4, #0]
 801b37c:	6813      	ldr	r3, [r2, #0]
 801b37e:	60e7      	str	r7, [r4, #12]
 801b380:	3318      	adds	r3, #24
 801b382:	6013      	str	r3, [r2, #0]
 801b384:	4a0a      	ldr	r2, [pc, #40]	; (801b3b0 <EwAttachObjObserver+0xbc>)
 801b386:	f8c8 400c 	str.w	r4, [r8, #12]
 801b38a:	6811      	ldr	r1, [r2, #0]
 801b38c:	428b      	cmp	r3, r1
 801b38e:	dd00      	ble.n	801b392 <EwAttachObjObserver+0x9e>
 801b390:	6013      	str	r3, [r2, #0]
 801b392:	4a08      	ldr	r2, [pc, #32]	; (801b3b4 <EwAttachObjObserver+0xc0>)
 801b394:	6812      	ldr	r2, [r2, #0]
 801b396:	4413      	add	r3, r2
 801b398:	4a07      	ldr	r2, [pc, #28]	; (801b3b8 <EwAttachObjObserver+0xc4>)
 801b39a:	6812      	ldr	r2, [r2, #0]
 801b39c:	4413      	add	r3, r2
 801b39e:	4a07      	ldr	r2, [pc, #28]	; (801b3bc <EwAttachObjObserver+0xc8>)
 801b3a0:	6811      	ldr	r1, [r2, #0]
 801b3a2:	428b      	cmp	r3, r1
 801b3a4:	dd00      	ble.n	801b3a8 <EwAttachObjObserver+0xb4>
 801b3a6:	6013      	str	r3, [r2, #0]
 801b3a8:	2401      	movs	r4, #1
 801b3aa:	e7c2      	b.n	801b332 <EwAttachObjObserver+0x3e>
 801b3ac:	200002d8 	.word	0x200002d8
 801b3b0:	200002e0 	.word	0x200002e0
 801b3b4:	200002e4 	.word	0x200002e4
 801b3b8:	200002e8 	.word	0x200002e8
 801b3bc:	200002ec 	.word	0x200002ec
 801b3c0:	20000348 	.word	0x20000348

0801b3c4 <EwAttachRefObserver>:
 801b3c4:	b082      	sub	sp, #8
 801b3c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b3ca:	466d      	mov	r5, sp
 801b3cc:	e885 0003 	stmia.w	r5, {r0, r1}
 801b3d0:	a90a      	add	r1, sp, #40	; 0x28
 801b3d2:	e881 000c 	stmia.w	r1, {r2, r3}
 801b3d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801b3d8:	4604      	mov	r4, r0
 801b3da:	b1c0      	cbz	r0, 801b40e <EwAttachRefObserver+0x4a>
 801b3dc:	4690      	mov	r8, r2
 801b3de:	b1aa      	cbz	r2, 801b40c <EwAttachRefObserver+0x48>
 801b3e0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801b49c <EwAttachRefObserver+0xd8>
 801b3e4:	9901      	ldr	r1, [sp, #4]
 801b3e6:	461f      	mov	r7, r3
 801b3e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b3ec:	b1bb      	cbz	r3, 801b41e <EwAttachRefObserver+0x5a>
 801b3ee:	685a      	ldr	r2, [r3, #4]
 801b3f0:	42a2      	cmp	r2, r4
 801b3f2:	d112      	bne.n	801b41a <EwAttachRefObserver+0x56>
 801b3f4:	689a      	ldr	r2, [r3, #8]
 801b3f6:	428a      	cmp	r2, r1
 801b3f8:	d10f      	bne.n	801b41a <EwAttachRefObserver+0x56>
 801b3fa:	68da      	ldr	r2, [r3, #12]
 801b3fc:	4542      	cmp	r2, r8
 801b3fe:	d10c      	bne.n	801b41a <EwAttachRefObserver+0x56>
 801b400:	691a      	ldr	r2, [r3, #16]
 801b402:	42ba      	cmp	r2, r7
 801b404:	d109      	bne.n	801b41a <EwAttachRefObserver+0x56>
 801b406:	695a      	ldr	r2, [r3, #20]
 801b408:	42b2      	cmp	r2, r6
 801b40a:	d106      	bne.n	801b41a <EwAttachRefObserver+0x56>
 801b40c:	2400      	movs	r4, #0
 801b40e:	4620      	mov	r0, r4
 801b410:	b003      	add	sp, #12
 801b412:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b416:	b002      	add	sp, #8
 801b418:	4770      	bx	lr
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	e7e6      	b.n	801b3ec <EwAttachRefObserver+0x28>
 801b41e:	2018      	movs	r0, #24
 801b420:	f00e f9a6 	bl	8029770 <EwAlloc>
 801b424:	4603      	mov	r3, r0
 801b426:	b958      	cbnz	r0, 801b440 <EwAttachRefObserver+0x7c>
 801b428:	2006      	movs	r0, #6
 801b42a:	f7fe fbed 	bl	8019c08 <EwImmediateReclaimMemory>
 801b42e:	4604      	mov	r4, r0
 801b430:	2800      	cmp	r0, #0
 801b432:	d1f4      	bne.n	801b41e <EwAttachRefObserver+0x5a>
 801b434:	2006      	movs	r0, #6
 801b436:	f7fd fc37 	bl	8018ca8 <EwError>
 801b43a:	f00e f99d 	bl	8029778 <EwPanic>
 801b43e:	e7e6      	b.n	801b40e <EwAttachRefObserver+0x4a>
 801b440:	1d02      	adds	r2, r0, #4
 801b442:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b446:	e882 0003 	stmia.w	r2, {r0, r1}
 801b44a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b44e:	601a      	str	r2, [r3, #0]
 801b450:	4a0d      	ldr	r2, [pc, #52]	; (801b488 <EwAttachRefObserver+0xc4>)
 801b452:	615e      	str	r6, [r3, #20]
 801b454:	e9c3 8703 	strd	r8, r7, [r3, #12]
 801b458:	f8c9 3010 	str.w	r3, [r9, #16]
 801b45c:	6813      	ldr	r3, [r2, #0]
 801b45e:	3318      	adds	r3, #24
 801b460:	6013      	str	r3, [r2, #0]
 801b462:	4a0a      	ldr	r2, [pc, #40]	; (801b48c <EwAttachRefObserver+0xc8>)
 801b464:	6811      	ldr	r1, [r2, #0]
 801b466:	428b      	cmp	r3, r1
 801b468:	dd00      	ble.n	801b46c <EwAttachRefObserver+0xa8>
 801b46a:	6013      	str	r3, [r2, #0]
 801b46c:	4a08      	ldr	r2, [pc, #32]	; (801b490 <EwAttachRefObserver+0xcc>)
 801b46e:	6812      	ldr	r2, [r2, #0]
 801b470:	4413      	add	r3, r2
 801b472:	4a08      	ldr	r2, [pc, #32]	; (801b494 <EwAttachRefObserver+0xd0>)
 801b474:	6812      	ldr	r2, [r2, #0]
 801b476:	4413      	add	r3, r2
 801b478:	4a07      	ldr	r2, [pc, #28]	; (801b498 <EwAttachRefObserver+0xd4>)
 801b47a:	6811      	ldr	r1, [r2, #0]
 801b47c:	428b      	cmp	r3, r1
 801b47e:	bfc8      	it	gt
 801b480:	6013      	strgt	r3, [r2, #0]
 801b482:	2401      	movs	r4, #1
 801b484:	e7c3      	b.n	801b40e <EwAttachRefObserver+0x4a>
 801b486:	bf00      	nop
 801b488:	200002d8 	.word	0x200002d8
 801b48c:	200002e0 	.word	0x200002e0
 801b490:	200002e4 	.word	0x200002e4
 801b494:	200002e8 	.word	0x200002e8
 801b498:	200002ec 	.word	0x200002ec
 801b49c:	20000348 	.word	0x20000348

0801b4a0 <EwAttachObserver>:
 801b4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b4a2:	466e      	mov	r6, sp
 801b4a4:	e886 0003 	stmia.w	r6, {r0, r1}
 801b4a8:	4615      	mov	r5, r2
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	b180      	cbz	r0, 801b4d0 <EwAttachObserver+0x30>
 801b4ae:	4f24      	ldr	r7, [pc, #144]	; (801b540 <EwAttachObserver+0xa0>)
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	b193      	cbz	r3, 801b4da <EwAttachObserver+0x3a>
 801b4b4:	685a      	ldr	r2, [r3, #4]
 801b4b6:	42a2      	cmp	r2, r4
 801b4b8:	d10d      	bne.n	801b4d6 <EwAttachObserver+0x36>
 801b4ba:	689a      	ldr	r2, [r3, #8]
 801b4bc:	428a      	cmp	r2, r1
 801b4be:	d10a      	bne.n	801b4d6 <EwAttachObserver+0x36>
 801b4c0:	68da      	ldr	r2, [r3, #12]
 801b4c2:	b942      	cbnz	r2, 801b4d6 <EwAttachObserver+0x36>
 801b4c4:	6918      	ldr	r0, [r3, #16]
 801b4c6:	b930      	cbnz	r0, 801b4d6 <EwAttachObserver+0x36>
 801b4c8:	695a      	ldr	r2, [r3, #20]
 801b4ca:	42aa      	cmp	r2, r5
 801b4cc:	d103      	bne.n	801b4d6 <EwAttachObserver+0x36>
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	b003      	add	sp, #12
 801b4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	e7eb      	b.n	801b4b2 <EwAttachObserver+0x12>
 801b4da:	2018      	movs	r0, #24
 801b4dc:	f00e f948 	bl	8029770 <EwAlloc>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	b958      	cbnz	r0, 801b4fc <EwAttachObserver+0x5c>
 801b4e4:	2007      	movs	r0, #7
 801b4e6:	f7fe fb8f 	bl	8019c08 <EwImmediateReclaimMemory>
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	d1f4      	bne.n	801b4da <EwAttachObserver+0x3a>
 801b4f0:	2007      	movs	r0, #7
 801b4f2:	f7fd fbd9 	bl	8018ca8 <EwError>
 801b4f6:	f00e f93f 	bl	8029778 <EwPanic>
 801b4fa:	e7e9      	b.n	801b4d0 <EwAttachObserver+0x30>
 801b4fc:	1d02      	adds	r2, r0, #4
 801b4fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b502:	e882 0003 	stmia.w	r2, {r0, r1}
 801b506:	2200      	movs	r2, #0
 801b508:	e9c3 2203 	strd	r2, r2, [r3, #12]
 801b50c:	68ba      	ldr	r2, [r7, #8]
 801b50e:	601a      	str	r2, [r3, #0]
 801b510:	4a0c      	ldr	r2, [pc, #48]	; (801b544 <EwAttachObserver+0xa4>)
 801b512:	615d      	str	r5, [r3, #20]
 801b514:	60bb      	str	r3, [r7, #8]
 801b516:	6813      	ldr	r3, [r2, #0]
 801b518:	3318      	adds	r3, #24
 801b51a:	6013      	str	r3, [r2, #0]
 801b51c:	4a0a      	ldr	r2, [pc, #40]	; (801b548 <EwAttachObserver+0xa8>)
 801b51e:	6811      	ldr	r1, [r2, #0]
 801b520:	428b      	cmp	r3, r1
 801b522:	dd00      	ble.n	801b526 <EwAttachObserver+0x86>
 801b524:	6013      	str	r3, [r2, #0]
 801b526:	4a09      	ldr	r2, [pc, #36]	; (801b54c <EwAttachObserver+0xac>)
 801b528:	6812      	ldr	r2, [r2, #0]
 801b52a:	4413      	add	r3, r2
 801b52c:	4a08      	ldr	r2, [pc, #32]	; (801b550 <EwAttachObserver+0xb0>)
 801b52e:	6812      	ldr	r2, [r2, #0]
 801b530:	4413      	add	r3, r2
 801b532:	4a08      	ldr	r2, [pc, #32]	; (801b554 <EwAttachObserver+0xb4>)
 801b534:	6811      	ldr	r1, [r2, #0]
 801b536:	428b      	cmp	r3, r1
 801b538:	bfc8      	it	gt
 801b53a:	6013      	strgt	r3, [r2, #0]
 801b53c:	2401      	movs	r4, #1
 801b53e:	e7c7      	b.n	801b4d0 <EwAttachObserver+0x30>
 801b540:	20000348 	.word	0x20000348
 801b544:	200002d8 	.word	0x200002d8
 801b548:	200002e0 	.word	0x200002e0
 801b54c:	200002e4 	.word	0x200002e4
 801b550:	200002e8 	.word	0x200002e8
 801b554:	200002ec 	.word	0x200002ec

0801b558 <EwDetachObjObserver>:
 801b558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b55a:	ac02      	add	r4, sp, #8
 801b55c:	e904 0003 	stmdb	r4, {r0, r1}
 801b560:	4604      	mov	r4, r0
 801b562:	b308      	cbz	r0, 801b5a8 <EwDetachObjObserver+0x50>
 801b564:	b1fa      	cbz	r2, 801b5a6 <EwDetachObjObserver+0x4e>
 801b566:	4911      	ldr	r1, [pc, #68]	; (801b5ac <EwDetachObjObserver+0x54>)
 801b568:	9e01      	ldr	r6, [sp, #4]
 801b56a:	f851 0f0c 	ldr.w	r0, [r1, #12]!
 801b56e:	b1d8      	cbz	r0, 801b5a8 <EwDetachObjObserver+0x50>
 801b570:	6845      	ldr	r5, [r0, #4]
 801b572:	42a5      	cmp	r5, r4
 801b574:	d114      	bne.n	801b5a0 <EwDetachObjObserver+0x48>
 801b576:	6885      	ldr	r5, [r0, #8]
 801b578:	42b5      	cmp	r5, r6
 801b57a:	d111      	bne.n	801b5a0 <EwDetachObjObserver+0x48>
 801b57c:	68c5      	ldr	r5, [r0, #12]
 801b57e:	4295      	cmp	r5, r2
 801b580:	d10e      	bne.n	801b5a0 <EwDetachObjObserver+0x48>
 801b582:	6905      	ldr	r5, [r0, #16]
 801b584:	b965      	cbnz	r5, 801b5a0 <EwDetachObjObserver+0x48>
 801b586:	6945      	ldr	r5, [r0, #20]
 801b588:	429d      	cmp	r5, r3
 801b58a:	d109      	bne.n	801b5a0 <EwDetachObjObserver+0x48>
 801b58c:	4a08      	ldr	r2, [pc, #32]	; (801b5b0 <EwDetachObjObserver+0x58>)
 801b58e:	6803      	ldr	r3, [r0, #0]
 801b590:	600b      	str	r3, [r1, #0]
 801b592:	6813      	ldr	r3, [r2, #0]
 801b594:	3b18      	subs	r3, #24
 801b596:	6013      	str	r3, [r2, #0]
 801b598:	f00e f8ec 	bl	8029774 <EwFree>
 801b59c:	2001      	movs	r0, #1
 801b59e:	e003      	b.n	801b5a8 <EwDetachObjObserver+0x50>
 801b5a0:	4601      	mov	r1, r0
 801b5a2:	6800      	ldr	r0, [r0, #0]
 801b5a4:	e7e3      	b.n	801b56e <EwDetachObjObserver+0x16>
 801b5a6:	4610      	mov	r0, r2
 801b5a8:	b002      	add	sp, #8
 801b5aa:	bd70      	pop	{r4, r5, r6, pc}
 801b5ac:	20000348 	.word	0x20000348
 801b5b0:	200002d8 	.word	0x200002d8

0801b5b4 <EwDetachRefObserver>:
 801b5b4:	b082      	sub	sp, #8
 801b5b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b5b8:	ac02      	add	r4, sp, #8
 801b5ba:	e904 0003 	stmdb	r4, {r0, r1}
 801b5be:	a908      	add	r1, sp, #32
 801b5c0:	e881 000c 	stmia.w	r1, {r2, r3}
 801b5c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b5c6:	4601      	mov	r1, r0
 801b5c8:	b318      	cbz	r0, 801b612 <EwDetachRefObserver+0x5e>
 801b5ca:	b30a      	cbz	r2, 801b610 <EwDetachRefObserver+0x5c>
 801b5cc:	4b13      	ldr	r3, [pc, #76]	; (801b61c <EwDetachRefObserver+0x68>)
 801b5ce:	9e01      	ldr	r6, [sp, #4]
 801b5d0:	f853 0f10 	ldr.w	r0, [r3, #16]!
 801b5d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b5d6:	b1e0      	cbz	r0, 801b612 <EwDetachRefObserver+0x5e>
 801b5d8:	6845      	ldr	r5, [r0, #4]
 801b5da:	428d      	cmp	r5, r1
 801b5dc:	d115      	bne.n	801b60a <EwDetachRefObserver+0x56>
 801b5de:	6885      	ldr	r5, [r0, #8]
 801b5e0:	42b5      	cmp	r5, r6
 801b5e2:	d112      	bne.n	801b60a <EwDetachRefObserver+0x56>
 801b5e4:	68c5      	ldr	r5, [r0, #12]
 801b5e6:	4295      	cmp	r5, r2
 801b5e8:	d10f      	bne.n	801b60a <EwDetachRefObserver+0x56>
 801b5ea:	6905      	ldr	r5, [r0, #16]
 801b5ec:	42bd      	cmp	r5, r7
 801b5ee:	d10c      	bne.n	801b60a <EwDetachRefObserver+0x56>
 801b5f0:	6945      	ldr	r5, [r0, #20]
 801b5f2:	42a5      	cmp	r5, r4
 801b5f4:	d109      	bne.n	801b60a <EwDetachRefObserver+0x56>
 801b5f6:	6802      	ldr	r2, [r0, #0]
 801b5f8:	601a      	str	r2, [r3, #0]
 801b5fa:	4a09      	ldr	r2, [pc, #36]	; (801b620 <EwDetachRefObserver+0x6c>)
 801b5fc:	6813      	ldr	r3, [r2, #0]
 801b5fe:	3b18      	subs	r3, #24
 801b600:	6013      	str	r3, [r2, #0]
 801b602:	f00e f8b7 	bl	8029774 <EwFree>
 801b606:	2001      	movs	r0, #1
 801b608:	e003      	b.n	801b612 <EwDetachRefObserver+0x5e>
 801b60a:	4603      	mov	r3, r0
 801b60c:	6800      	ldr	r0, [r0, #0]
 801b60e:	e7e2      	b.n	801b5d6 <EwDetachRefObserver+0x22>
 801b610:	4610      	mov	r0, r2
 801b612:	b003      	add	sp, #12
 801b614:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b618:	b002      	add	sp, #8
 801b61a:	4770      	bx	lr
 801b61c:	20000348 	.word	0x20000348
 801b620:	200002d8 	.word	0x200002d8

0801b624 <EwDetachObserver>:
 801b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b626:	ab02      	add	r3, sp, #8
 801b628:	e903 0003 	stmdb	r3, {r0, r1}
 801b62c:	4601      	mov	r1, r0
 801b62e:	b1d0      	cbz	r0, 801b666 <EwDetachObserver+0x42>
 801b630:	4b0f      	ldr	r3, [pc, #60]	; (801b670 <EwDetachObserver+0x4c>)
 801b632:	9d01      	ldr	r5, [sp, #4]
 801b634:	f853 0f08 	ldr.w	r0, [r3, #8]!
 801b638:	b1a8      	cbz	r0, 801b666 <EwDetachObserver+0x42>
 801b63a:	6844      	ldr	r4, [r0, #4]
 801b63c:	428c      	cmp	r4, r1
 801b63e:	d114      	bne.n	801b66a <EwDetachObserver+0x46>
 801b640:	6884      	ldr	r4, [r0, #8]
 801b642:	42ac      	cmp	r4, r5
 801b644:	d111      	bne.n	801b66a <EwDetachObserver+0x46>
 801b646:	68c4      	ldr	r4, [r0, #12]
 801b648:	b97c      	cbnz	r4, 801b66a <EwDetachObserver+0x46>
 801b64a:	6904      	ldr	r4, [r0, #16]
 801b64c:	b96c      	cbnz	r4, 801b66a <EwDetachObserver+0x46>
 801b64e:	6944      	ldr	r4, [r0, #20]
 801b650:	4294      	cmp	r4, r2
 801b652:	d10a      	bne.n	801b66a <EwDetachObserver+0x46>
 801b654:	6802      	ldr	r2, [r0, #0]
 801b656:	601a      	str	r2, [r3, #0]
 801b658:	4a06      	ldr	r2, [pc, #24]	; (801b674 <EwDetachObserver+0x50>)
 801b65a:	6813      	ldr	r3, [r2, #0]
 801b65c:	3b18      	subs	r3, #24
 801b65e:	6013      	str	r3, [r2, #0]
 801b660:	f00e f888 	bl	8029774 <EwFree>
 801b664:	2001      	movs	r0, #1
 801b666:	b003      	add	sp, #12
 801b668:	bd30      	pop	{r4, r5, pc}
 801b66a:	4603      	mov	r3, r0
 801b66c:	6800      	ldr	r0, [r0, #0]
 801b66e:	e7e3      	b.n	801b638 <EwDetachObserver+0x14>
 801b670:	20000348 	.word	0x20000348
 801b674:	200002d8 	.word	0x200002d8

0801b678 <EwNotifyObjObservers>:
 801b678:	b570      	push	{r4, r5, r6, lr}
 801b67a:	460e      	mov	r6, r1
 801b67c:	4605      	mov	r5, r0
 801b67e:	b110      	cbz	r0, 801b686 <EwNotifyObjObservers+0xe>
 801b680:	4b08      	ldr	r3, [pc, #32]	; (801b6a4 <EwNotifyObjObservers+0x2c>)
 801b682:	68dc      	ldr	r4, [r3, #12]
 801b684:	b904      	cbnz	r4, 801b688 <EwNotifyObjObservers+0x10>
 801b686:	bd70      	pop	{r4, r5, r6, pc}
 801b688:	68e3      	ldr	r3, [r4, #12]
 801b68a:	42ab      	cmp	r3, r5
 801b68c:	d108      	bne.n	801b6a0 <EwNotifyObjObservers+0x28>
 801b68e:	6922      	ldr	r2, [r4, #16]
 801b690:	b932      	cbnz	r2, 801b6a0 <EwNotifyObjObservers+0x28>
 801b692:	6963      	ldr	r3, [r4, #20]
 801b694:	42b3      	cmp	r3, r6
 801b696:	d103      	bne.n	801b6a0 <EwNotifyObjObservers+0x28>
 801b698:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 801b69c:	f7ff fdc8 	bl	801b230 <EwPostSignal>
 801b6a0:	6824      	ldr	r4, [r4, #0]
 801b6a2:	e7ef      	b.n	801b684 <EwNotifyObjObservers+0xc>
 801b6a4:	20000348 	.word	0x20000348

0801b6a8 <EwNotifyRefObservers>:
 801b6a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b6aa:	ac04      	add	r4, sp, #16
 801b6ac:	e904 0007 	stmdb	r4, {r0, r1, r2}
 801b6b0:	461d      	mov	r5, r3
 801b6b2:	4606      	mov	r6, r0
 801b6b4:	b110      	cbz	r0, 801b6bc <EwNotifyRefObservers+0x14>
 801b6b6:	4b0b      	ldr	r3, [pc, #44]	; (801b6e4 <EwNotifyRefObservers+0x3c>)
 801b6b8:	691c      	ldr	r4, [r3, #16]
 801b6ba:	b90c      	cbnz	r4, 801b6c0 <EwNotifyRefObservers+0x18>
 801b6bc:	b004      	add	sp, #16
 801b6be:	bd70      	pop	{r4, r5, r6, pc}
 801b6c0:	68e3      	ldr	r3, [r4, #12]
 801b6c2:	42b3      	cmp	r3, r6
 801b6c4:	d10b      	bne.n	801b6de <EwNotifyRefObservers+0x36>
 801b6c6:	6922      	ldr	r2, [r4, #16]
 801b6c8:	9b02      	ldr	r3, [sp, #8]
 801b6ca:	429a      	cmp	r2, r3
 801b6cc:	d107      	bne.n	801b6de <EwNotifyRefObservers+0x36>
 801b6ce:	6963      	ldr	r3, [r4, #20]
 801b6d0:	42ab      	cmp	r3, r5
 801b6d2:	d104      	bne.n	801b6de <EwNotifyRefObservers+0x36>
 801b6d4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 801b6d8:	2200      	movs	r2, #0
 801b6da:	f7ff fda9 	bl	801b230 <EwPostSignal>
 801b6de:	6824      	ldr	r4, [r4, #0]
 801b6e0:	e7eb      	b.n	801b6ba <EwNotifyRefObservers+0x12>
 801b6e2:	bf00      	nop
 801b6e4:	20000348 	.word	0x20000348

0801b6e8 <EwNotifyObservers>:
 801b6e8:	b538      	push	{r3, r4, r5, lr}
 801b6ea:	4b09      	ldr	r3, [pc, #36]	; (801b710 <EwNotifyObservers+0x28>)
 801b6ec:	689c      	ldr	r4, [r3, #8]
 801b6ee:	4605      	mov	r5, r0
 801b6f0:	b904      	cbnz	r4, 801b6f4 <EwNotifyObservers+0xc>
 801b6f2:	bd38      	pop	{r3, r4, r5, pc}
 801b6f4:	68e3      	ldr	r3, [r4, #12]
 801b6f6:	b943      	cbnz	r3, 801b70a <EwNotifyObservers+0x22>
 801b6f8:	6922      	ldr	r2, [r4, #16]
 801b6fa:	b932      	cbnz	r2, 801b70a <EwNotifyObservers+0x22>
 801b6fc:	6963      	ldr	r3, [r4, #20]
 801b6fe:	42ab      	cmp	r3, r5
 801b700:	d103      	bne.n	801b70a <EwNotifyObservers+0x22>
 801b702:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 801b706:	f7ff fd93 	bl	801b230 <EwPostSignal>
 801b70a:	6824      	ldr	r4, [r4, #0]
 801b70c:	e7f0      	b.n	801b6f0 <EwNotifyObservers+0x8>
 801b70e:	bf00      	nop
 801b710:	20000348 	.word	0x20000348
 801b714:	f100 0310 	add.w	r3, r0, #16
 801b718:	2000      	movs	r0, #0
 801b71a:	881a      	ldrh	r2, [r3, #0]
 801b71c:	b902      	cbnz	r2, 801b720 <EwNotifyObservers+0x38>
 801b71e:	4770      	bx	lr
 801b720:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b724:	3001      	adds	r0, #1
 801b726:	e7f8      	b.n	801b71a <EwNotifyObservers+0x32>
 801b728:	b160      	cbz	r0, 801b744 <EwNotifyObservers+0x5c>
 801b72a:	2900      	cmp	r1, #0
 801b72c:	db09      	blt.n	801b742 <EwNotifyObservers+0x5a>
 801b72e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b732:	1e83      	subs	r3, r0, #2
 801b734:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 801b738:	4299      	cmp	r1, r3
 801b73a:	d903      	bls.n	801b744 <EwNotifyObservers+0x5c>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	d1f9      	bne.n	801b734 <EwNotifyObservers+0x4c>
 801b740:	4770      	bx	lr
 801b742:	2000      	movs	r0, #0
 801b744:	4770      	bx	lr
 801b746:	4603      	mov	r3, r0
 801b748:	4618      	mov	r0, r3
 801b74a:	b133      	cbz	r3, 801b75a <EwNotifyObservers+0x72>
 801b74c:	f833 2b02 	ldrh.w	r2, [r3], #2
 801b750:	2a20      	cmp	r2, #32
 801b752:	d0f9      	beq.n	801b748 <EwNotifyObservers+0x60>
 801b754:	3a09      	subs	r2, #9
 801b756:	2a04      	cmp	r2, #4
 801b758:	d9f6      	bls.n	801b748 <EwNotifyObservers+0x60>
 801b75a:	4770      	bx	lr
 801b75c:	e9d0 2100 	ldrd	r2, r1, [r0]
 801b760:	4b08      	ldr	r3, [pc, #32]	; (801b784 <EwNotifyObservers+0x9c>)
 801b762:	b15a      	cbz	r2, 801b77c <EwNotifyObservers+0x94>
 801b764:	6051      	str	r1, [r2, #4]
 801b766:	6841      	ldr	r1, [r0, #4]
 801b768:	b151      	cbz	r1, 801b780 <EwNotifyObservers+0x98>
 801b76a:	600a      	str	r2, [r1, #0]
 801b76c:	2200      	movs	r2, #0
 801b76e:	e9c0 2200 	strd	r2, r2, [r0]
 801b772:	6881      	ldr	r1, [r0, #8]
 801b774:	689a      	ldr	r2, [r3, #8]
 801b776:	1a52      	subs	r2, r2, r1
 801b778:	609a      	str	r2, [r3, #8]
 801b77a:	4770      	bx	lr
 801b77c:	6019      	str	r1, [r3, #0]
 801b77e:	e7f2      	b.n	801b766 <EwNotifyObservers+0x7e>
 801b780:	605a      	str	r2, [r3, #4]
 801b782:	e7f3      	b.n	801b76c <EwNotifyObservers+0x84>
 801b784:	2000035c 	.word	0x2000035c
 801b788:	b538      	push	{r3, r4, r5, lr}
 801b78a:	1e03      	subs	r3, r0, #0
 801b78c:	dd10      	ble.n	801b7b0 <EwNotifyObservers+0xc8>
 801b78e:	005b      	lsls	r3, r3, #1
 801b790:	f103 040c 	add.w	r4, r3, #12
 801b794:	4620      	mov	r0, r4
 801b796:	f00d ffeb 	bl	8029770 <EwAlloc>
 801b79a:	4605      	mov	r5, r0
 801b79c:	b950      	cbnz	r0, 801b7b4 <EwNotifyObservers+0xcc>
 801b79e:	2003      	movs	r0, #3
 801b7a0:	f7fe fa32 	bl	8019c08 <EwImmediateReclaimMemory>
 801b7a4:	2800      	cmp	r0, #0
 801b7a6:	d1f5      	bne.n	801b794 <EwNotifyObservers+0xac>
 801b7a8:	2003      	movs	r0, #3
 801b7aa:	f7fd fa7d 	bl	8018ca8 <EwError>
 801b7ae:	e022      	b.n	801b7f6 <EwNotifyObservers+0x10e>
 801b7b0:	2500      	movs	r5, #0
 801b7b2:	e020      	b.n	801b7f6 <EwNotifyObservers+0x10e>
 801b7b4:	4b11      	ldr	r3, [pc, #68]	; (801b7fc <EwNotifyObservers+0x114>)
 801b7b6:	4912      	ldr	r1, [pc, #72]	; (801b800 <EwNotifyObservers+0x118>)
 801b7b8:	68da      	ldr	r2, [r3, #12]
 801b7ba:	6002      	str	r2, [r0, #0]
 801b7bc:	4a11      	ldr	r2, [pc, #68]	; (801b804 <EwNotifyObservers+0x11c>)
 801b7be:	60d8      	str	r0, [r3, #12]
 801b7c0:	6813      	ldr	r3, [r2, #0]
 801b7c2:	6044      	str	r4, [r0, #4]
 801b7c4:	4423      	add	r3, r4
 801b7c6:	6013      	str	r3, [r2, #0]
 801b7c8:	680a      	ldr	r2, [r1, #0]
 801b7ca:	3201      	adds	r2, #1
 801b7cc:	600a      	str	r2, [r1, #0]
 801b7ce:	4a0e      	ldr	r2, [pc, #56]	; (801b808 <EwNotifyObservers+0x120>)
 801b7d0:	6811      	ldr	r1, [r2, #0]
 801b7d2:	428b      	cmp	r3, r1
 801b7d4:	dd00      	ble.n	801b7d8 <EwNotifyObservers+0xf0>
 801b7d6:	6013      	str	r3, [r2, #0]
 801b7d8:	4a0c      	ldr	r2, [pc, #48]	; (801b80c <EwNotifyObservers+0x124>)
 801b7da:	6812      	ldr	r2, [r2, #0]
 801b7dc:	4413      	add	r3, r2
 801b7de:	4a0c      	ldr	r2, [pc, #48]	; (801b810 <EwNotifyObservers+0x128>)
 801b7e0:	6812      	ldr	r2, [r2, #0]
 801b7e2:	4413      	add	r3, r2
 801b7e4:	4a0b      	ldr	r2, [pc, #44]	; (801b814 <EwNotifyObservers+0x12c>)
 801b7e6:	6811      	ldr	r1, [r2, #0]
 801b7e8:	428b      	cmp	r3, r1
 801b7ea:	bfc8      	it	gt
 801b7ec:	6013      	strgt	r3, [r2, #0]
 801b7ee:	f244 6377 	movw	r3, #18039	; 0x4677
 801b7f2:	812b      	strh	r3, [r5, #8]
 801b7f4:	350a      	adds	r5, #10
 801b7f6:	4628      	mov	r0, r5
 801b7f8:	bd38      	pop	{r3, r4, r5, pc}
 801b7fa:	bf00      	nop
 801b7fc:	2000035c 	.word	0x2000035c
 801b800:	20000300 	.word	0x20000300
 801b804:	200002e4 	.word	0x200002e4
 801b808:	200002fc 	.word	0x200002fc
 801b80c:	200002d8 	.word	0x200002d8
 801b810:	200002e8 	.word	0x200002e8
 801b814:	200002ec 	.word	0x200002ec
 801b818:	f240 5331 	movw	r3, #1329	; 0x531
 801b81c:	4298      	cmp	r0, r3
 801b81e:	d849      	bhi.n	801b8b4 <EwNotifyObservers+0x1cc>
 801b820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b824:	2b19      	cmp	r3, #25
 801b826:	d801      	bhi.n	801b82c <EwNotifyObservers+0x144>
 801b828:	3820      	subs	r0, #32
 801b82a:	4770      	bx	lr
 801b82c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 801b830:	2b16      	cmp	r3, #22
 801b832:	d9f9      	bls.n	801b828 <EwNotifyObservers+0x140>
 801b834:	f1a0 03f8 	sub.w	r3, r0, #248	; 0xf8
 801b838:	2b06      	cmp	r3, #6
 801b83a:	d9f5      	bls.n	801b828 <EwNotifyObservers+0x140>
 801b83c:	f2a0 337b 	subw	r3, r0, #891	; 0x37b
 801b840:	2b02      	cmp	r3, #2
 801b842:	d802      	bhi.n	801b84a <EwNotifyObservers+0x162>
 801b844:	3082      	adds	r0, #130	; 0x82
 801b846:	b280      	uxth	r0, r0
 801b848:	4770      	bx	lr
 801b84a:	f46f 7c6b 	mvn.w	ip, #940	; 0x3ac
 801b84e:	eb00 030c 	add.w	r3, r0, ip
 801b852:	2b02      	cmp	r3, #2
 801b854:	d801      	bhi.n	801b85a <EwNotifyObservers+0x172>
 801b856:	3825      	subs	r0, #37	; 0x25
 801b858:	4770      	bx	lr
 801b85a:	f46f 716c 	mvn.w	r1, #944	; 0x3b0
 801b85e:	1843      	adds	r3, r0, r1
 801b860:	2b10      	cmp	r3, #16
 801b862:	d9e1      	bls.n	801b828 <EwNotifyObservers+0x140>
 801b864:	f2a0 33c3 	subw	r3, r0, #963	; 0x3c3
 801b868:	2b08      	cmp	r3, #8
 801b86a:	d9dd      	bls.n	801b828 <EwNotifyObservers+0x140>
 801b86c:	f5a0 6386 	sub.w	r3, r0, #1072	; 0x430
 801b870:	2b1f      	cmp	r3, #31
 801b872:	d9d9      	bls.n	801b828 <EwNotifyObservers+0x140>
 801b874:	f5a0 638a 	sub.w	r3, r0, #1104	; 0x450
 801b878:	2b0f      	cmp	r3, #15
 801b87a:	d801      	bhi.n	801b880 <EwNotifyObservers+0x198>
 801b87c:	3850      	subs	r0, #80	; 0x50
 801b87e:	4770      	bx	lr
 801b880:	07c2      	lsls	r2, r0, #31
 801b882:	d418      	bmi.n	801b8b6 <EwNotifyObservers+0x1ce>
 801b884:	f5a0 739d 	sub.w	r3, r0, #314	; 0x13a
 801b888:	2b0e      	cmp	r3, #14
 801b88a:	d801      	bhi.n	801b890 <EwNotifyObservers+0x1a8>
 801b88c:	3801      	subs	r0, #1
 801b88e:	4770      	bx	lr
 801b890:	f5a0 73bd 	sub.w	r3, r0, #378	; 0x17a
 801b894:	2b04      	cmp	r3, #4
 801b896:	d9f9      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b898:	f5a0 73e7 	sub.w	r3, r0, #462	; 0x1ce
 801b89c:	2b0e      	cmp	r3, #14
 801b89e:	d9f5      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8a0:	f2a0 43c2 	subw	r3, r0, #1218	; 0x4c2
 801b8a4:	2b0c      	cmp	r3, #12
 801b8a6:	d9f1      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8a8:	4b21      	ldr	r3, [pc, #132]	; (801b930 <EwNotifyObservers+0x248>)
 801b8aa:	881a      	ldrh	r2, [r3, #0]
 801b8ac:	4290      	cmp	r0, r2
 801b8ae:	d83d      	bhi.n	801b92c <EwNotifyObservers+0x244>
 801b8b0:	bf08      	it	eq
 801b8b2:	8858      	ldrheq	r0, [r3, #2]
 801b8b4:	4770      	bx	lr
 801b8b6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801b8ba:	18c3      	adds	r3, r0, r3
 801b8bc:	2b2e      	cmp	r3, #46	; 0x2e
 801b8be:	d9e5      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8c0:	f46f 7c99 	mvn.w	ip, #306	; 0x132
 801b8c4:	eb00 030c 	add.w	r3, r0, ip
 801b8c8:	2b04      	cmp	r3, #4
 801b8ca:	d9df      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8cc:	f46f 71a5 	mvn.w	r1, #330	; 0x14a
 801b8d0:	1843      	adds	r3, r0, r1
 801b8d2:	2b2c      	cmp	r3, #44	; 0x2c
 801b8d4:	d9da      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8d6:	f46f 72d0 	mvn.w	r2, #416	; 0x1a0
 801b8da:	1883      	adds	r3, r0, r2
 801b8dc:	2b04      	cmp	r3, #4
 801b8de:	d9d5      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8e0:	f46f 73ef 	mvn.w	r3, #478	; 0x1de
 801b8e4:	18c3      	adds	r3, r0, r3
 801b8e6:	2b10      	cmp	r3, #16
 801b8e8:	d9d0      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8ea:	f46f 7cfc 	mvn.w	ip, #504	; 0x1f8
 801b8ee:	eb00 030c 	add.w	r3, r0, ip
 801b8f2:	2b26      	cmp	r3, #38	; 0x26
 801b8f4:	d9ca      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8f6:	f2a0 2323 	subw	r3, r0, #547	; 0x223
 801b8fa:	2b10      	cmp	r3, #16
 801b8fc:	d9c6      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b8fe:	f2a0 2347 	subw	r3, r0, #583	; 0x247
 801b902:	2b08      	cmp	r3, #8
 801b904:	d9c2      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b906:	f46f 7176 	mvn.w	r1, #984	; 0x3d8
 801b90a:	1843      	adds	r3, r0, r1
 801b90c:	2b16      	cmp	r3, #22
 801b90e:	d9bd      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b910:	f46f 628c 	mvn.w	r2, #1120	; 0x460
 801b914:	1883      	adds	r3, r0, r2
 801b916:	2b20      	cmp	r3, #32
 801b918:	d9b8      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b91a:	f2a0 438b 	subw	r3, r0, #1163	; 0x48b
 801b91e:	2b34      	cmp	r3, #52	; 0x34
 801b920:	d9b4      	bls.n	801b88c <EwNotifyObservers+0x1a4>
 801b922:	f46f 639a 	mvn.w	r3, #1232	; 0x4d0
 801b926:	18c3      	adds	r3, r0, r3
 801b928:	2b5e      	cmp	r3, #94	; 0x5e
 801b92a:	e7bc      	b.n	801b8a6 <EwNotifyObservers+0x1be>
 801b92c:	3304      	adds	r3, #4
 801b92e:	e7bc      	b.n	801b8aa <EwNotifyObservers+0x1c2>
 801b930:	08036b6c 	.word	0x08036b6c
 801b934:	b138      	cbz	r0, 801b946 <EwNotifyObservers+0x25e>
 801b936:	4602      	mov	r2, r0
 801b938:	4613      	mov	r3, r2
 801b93a:	3202      	adds	r2, #2
 801b93c:	8819      	ldrh	r1, [r3, #0]
 801b93e:	2900      	cmp	r1, #0
 801b940:	d1fa      	bne.n	801b938 <EwNotifyObservers+0x250>
 801b942:	1a18      	subs	r0, r3, r0
 801b944:	1040      	asrs	r0, r0, #1
 801b946:	4770      	bx	lr
 801b948:	b530      	push	{r4, r5, lr}
 801b94a:	b149      	cbz	r1, 801b960 <EwNotifyObservers+0x278>
 801b94c:	b140      	cbz	r0, 801b960 <EwNotifyObservers+0x278>
 801b94e:	b13a      	cbz	r2, 801b960 <EwNotifyObservers+0x278>
 801b950:	1e83      	subs	r3, r0, #2
 801b952:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801b956:	42a1      	cmp	r1, r4
 801b958:	d103      	bne.n	801b962 <EwNotifyObservers+0x27a>
 801b95a:	2300      	movs	r3, #0
 801b95c:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 801b960:	bd30      	pop	{r4, r5, pc}
 801b962:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b966:	f823 5f02 	strh.w	r5, [r3, #2]!
 801b96a:	e7f4      	b.n	801b956 <EwNotifyObservers+0x26e>
 801b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b96e:	4604      	mov	r4, r0
 801b970:	b1c8      	cbz	r0, 801b9a6 <EwNotifyObservers+0x2be>
 801b972:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 801b976:	f244 5257 	movw	r2, #17751	; 0x4557
 801b97a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b97e:	4293      	cmp	r3, r2
 801b980:	d011      	beq.n	801b9a6 <EwNotifyObservers+0x2be>
 801b982:	f244 6277 	movw	r2, #18039	; 0x4677
 801b986:	4293      	cmp	r3, r2
 801b988:	d00d      	beq.n	801b9a6 <EwNotifyObservers+0x2be>
 801b98a:	480d      	ldr	r0, [pc, #52]	; (801b9c0 <EwNotifyObservers+0x2d8>)
 801b98c:	4e0d      	ldr	r6, [pc, #52]	; (801b9c4 <EwNotifyObservers+0x2dc>)
 801b98e:	4f0e      	ldr	r7, [pc, #56]	; (801b9c8 <EwNotifyObservers+0x2e0>)
 801b990:	f7fc fd50 	bl	8018434 <EwPrint>
 801b994:	1ea5      	subs	r5, r4, #2
 801b996:	f835 4f02 	ldrh.w	r4, [r5, #2]!
 801b99a:	b934      	cbnz	r4, 801b9aa <EwNotifyObservers+0x2c2>
 801b99c:	480b      	ldr	r0, [pc, #44]	; (801b9cc <EwNotifyObservers+0x2e4>)
 801b99e:	f7fc fd49 	bl	8018434 <EwPrint>
 801b9a2:	f00d fee9 	bl	8029778 <EwPanic>
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9aa:	f1a4 0320 	sub.w	r3, r4, #32
 801b9ae:	2b5f      	cmp	r3, #95	; 0x5f
 801b9b0:	4621      	mov	r1, r4
 801b9b2:	bf94      	ite	ls
 801b9b4:	4638      	movls	r0, r7
 801b9b6:	4630      	movhi	r0, r6
 801b9b8:	f7fc fd3c 	bl	8018434 <EwPrint>
 801b9bc:	e7eb      	b.n	801b996 <EwNotifyObservers+0x2ae>
 801b9be:	bf00      	nop
 801b9c0:	0803a361 	.word	0x0803a361
 801b9c4:	0803a38b 	.word	0x0803a38b
 801b9c8:	0803a388 	.word	0x0803a388
 801b9cc:	0803a386 	.word	0x0803a386

0801b9d0 <ToLower>:
 801b9d0:	f240 5331 	movw	r3, #1329	; 0x531
 801b9d4:	4298      	cmp	r0, r3
 801b9d6:	d868      	bhi.n	801baaa <ToLower+0xda>
 801b9d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b9dc:	2b19      	cmp	r3, #25
 801b9de:	d802      	bhi.n	801b9e6 <ToLower+0x16>
 801b9e0:	3020      	adds	r0, #32
 801b9e2:	b280      	uxth	r0, r0
 801b9e4:	4770      	bx	lr
 801b9e6:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 801b9ea:	2b16      	cmp	r3, #22
 801b9ec:	d9f8      	bls.n	801b9e0 <ToLower+0x10>
 801b9ee:	f1a0 03d8 	sub.w	r3, r0, #216	; 0xd8
 801b9f2:	2b06      	cmp	r3, #6
 801b9f4:	d9f4      	bls.n	801b9e0 <ToLower+0x10>
 801b9f6:	f5a0 7362 	sub.w	r3, r0, #904	; 0x388
 801b9fa:	2b02      	cmp	r3, #2
 801b9fc:	d801      	bhi.n	801ba02 <ToLower+0x32>
 801b9fe:	3025      	adds	r0, #37	; 0x25
 801ba00:	e7ef      	b.n	801b9e2 <ToLower+0x12>
 801ba02:	f46f 7164 	mvn.w	r1, #912	; 0x390
 801ba06:	1843      	adds	r3, r0, r1
 801ba08:	2b10      	cmp	r3, #16
 801ba0a:	d9e9      	bls.n	801b9e0 <ToLower+0x10>
 801ba0c:	f2a0 33a3 	subw	r3, r0, #931	; 0x3a3
 801ba10:	2b08      	cmp	r3, #8
 801ba12:	d9e5      	bls.n	801b9e0 <ToLower+0x10>
 801ba14:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801ba18:	1883      	adds	r3, r0, r2
 801ba1a:	2b02      	cmp	r3, #2
 801ba1c:	d801      	bhi.n	801ba22 <ToLower+0x52>
 801ba1e:	3882      	subs	r0, #130	; 0x82
 801ba20:	4770      	bx	lr
 801ba22:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 801ba26:	2b0f      	cmp	r3, #15
 801ba28:	d801      	bhi.n	801ba2e <ToLower+0x5e>
 801ba2a:	3050      	adds	r0, #80	; 0x50
 801ba2c:	e7d9      	b.n	801b9e2 <ToLower+0x12>
 801ba2e:	f5a0 6382 	sub.w	r3, r0, #1040	; 0x410
 801ba32:	2b1f      	cmp	r3, #31
 801ba34:	d9d4      	bls.n	801b9e0 <ToLower+0x10>
 801ba36:	07c3      	lsls	r3, r0, #31
 801ba38:	d438      	bmi.n	801baac <ToLower+0xdc>
 801ba3a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 801ba3e:	2b2e      	cmp	r3, #46	; 0x2e
 801ba40:	d801      	bhi.n	801ba46 <ToLower+0x76>
 801ba42:	3001      	adds	r0, #1
 801ba44:	e7cd      	b.n	801b9e2 <ToLower+0x12>
 801ba46:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 801ba4a:	2b04      	cmp	r3, #4
 801ba4c:	d9f9      	bls.n	801ba42 <ToLower+0x72>
 801ba4e:	f5a0 73a5 	sub.w	r3, r0, #330	; 0x14a
 801ba52:	2b2c      	cmp	r3, #44	; 0x2c
 801ba54:	d9f5      	bls.n	801ba42 <ToLower+0x72>
 801ba56:	f5a0 73d0 	sub.w	r3, r0, #416	; 0x1a0
 801ba5a:	2b04      	cmp	r3, #4
 801ba5c:	d9f1      	bls.n	801ba42 <ToLower+0x72>
 801ba5e:	f5a0 73ef 	sub.w	r3, r0, #478	; 0x1de
 801ba62:	2b10      	cmp	r3, #16
 801ba64:	d9ed      	bls.n	801ba42 <ToLower+0x72>
 801ba66:	f5a0 73fc 	sub.w	r3, r0, #504	; 0x1f8
 801ba6a:	2b26      	cmp	r3, #38	; 0x26
 801ba6c:	d9e9      	bls.n	801ba42 <ToLower+0x72>
 801ba6e:	f2a0 2322 	subw	r3, r0, #546	; 0x222
 801ba72:	2b10      	cmp	r3, #16
 801ba74:	d9e5      	bls.n	801ba42 <ToLower+0x72>
 801ba76:	f2a0 2346 	subw	r3, r0, #582	; 0x246
 801ba7a:	2b08      	cmp	r3, #8
 801ba7c:	d9e1      	bls.n	801ba42 <ToLower+0x72>
 801ba7e:	f5a0 7376 	sub.w	r3, r0, #984	; 0x3d8
 801ba82:	2b16      	cmp	r3, #22
 801ba84:	d9dd      	bls.n	801ba42 <ToLower+0x72>
 801ba86:	f5a0 638c 	sub.w	r3, r0, #1120	; 0x460
 801ba8a:	2b20      	cmp	r3, #32
 801ba8c:	d9d9      	bls.n	801ba42 <ToLower+0x72>
 801ba8e:	f2a0 438a 	subw	r3, r0, #1162	; 0x48a
 801ba92:	2b34      	cmp	r3, #52	; 0x34
 801ba94:	d9d5      	bls.n	801ba42 <ToLower+0x72>
 801ba96:	f5a0 639a 	sub.w	r3, r0, #1232	; 0x4d0
 801ba9a:	2b5e      	cmp	r3, #94	; 0x5e
 801ba9c:	d9d1      	bls.n	801ba42 <ToLower+0x72>
 801ba9e:	4b0f      	ldr	r3, [pc, #60]	; (801badc <ToLower+0x10c>)
 801baa0:	881a      	ldrh	r2, [r3, #0]
 801baa2:	4290      	cmp	r0, r2
 801baa4:	d817      	bhi.n	801bad6 <ToLower+0x106>
 801baa6:	bf08      	it	eq
 801baa8:	8858      	ldrheq	r0, [r3, #2]
 801baaa:	4770      	bx	lr
 801baac:	f46f 7c9c 	mvn.w	ip, #312	; 0x138
 801bab0:	eb00 030c 	add.w	r3, r0, ip
 801bab4:	2b0e      	cmp	r3, #14
 801bab6:	d9c4      	bls.n	801ba42 <ToLower+0x72>
 801bab8:	f46f 71bc 	mvn.w	r1, #376	; 0x178
 801babc:	1843      	adds	r3, r0, r1
 801babe:	2b04      	cmp	r3, #4
 801bac0:	d9bf      	bls.n	801ba42 <ToLower+0x72>
 801bac2:	f46f 72e5 	mvn.w	r2, #458	; 0x1ca
 801bac6:	1883      	adds	r3, r0, r2
 801bac8:	2b10      	cmp	r3, #16
 801baca:	d9ba      	bls.n	801ba42 <ToLower+0x72>
 801bacc:	f46f 6398 	mvn.w	r3, #1216	; 0x4c0
 801bad0:	18c3      	adds	r3, r0, r3
 801bad2:	2b0c      	cmp	r3, #12
 801bad4:	e7e2      	b.n	801ba9c <ToLower+0xcc>
 801bad6:	3304      	adds	r3, #4
 801bad8:	e7e2      	b.n	801baa0 <ToLower+0xd0>
 801bada:	bf00      	nop
 801badc:	08036cc2 	.word	0x08036cc2

0801bae0 <EwDisposeStrings>:
 801bae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801bbbc <EwDisposeStrings+0xdc>
 801bae8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801bbc0 <EwDisposeStrings+0xe0>
 801baec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bbb8 <EwDisposeStrings+0xd8>
 801baf0:	4646      	mov	r6, r8
 801baf2:	4607      	mov	r7, r0
 801baf4:	f856 4b0c 	ldr.w	r4, [r6], #12
 801baf8:	2500      	movs	r5, #0
 801bafa:	6830      	ldr	r0, [r6, #0]
 801bafc:	b990      	cbnz	r0, 801bb24 <EwDisposeStrings+0x44>
 801bafe:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801bbc4 <EwDisposeStrings+0xe4>
 801bb02:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 801bbc0 <EwDisposeStrings+0xe0>
 801bb06:	4e2c      	ldr	r6, [pc, #176]	; (801bbb8 <EwDisposeStrings+0xd8>)
 801bb08:	b134      	cbz	r4, 801bb18 <EwDisposeStrings+0x38>
 801bb0a:	bb37      	cbnz	r7, 801bb5a <EwDisposeStrings+0x7a>
 801bb0c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801bb10:	f8da 3000 	ldr.w	r3, [sl]
 801bb14:	429a      	cmp	r2, r3
 801bb16:	dc20      	bgt.n	801bb5a <EwDisposeStrings+0x7a>
 801bb18:	f8d8 2000 	ldr.w	r2, [r8]
 801bb1c:	bb62      	cbnz	r2, 801bb78 <EwDisposeStrings+0x98>
 801bb1e:	4628      	mov	r0, r5
 801bb20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb24:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801bb28:	8903      	ldrh	r3, [r0, #8]
 801bb2a:	2a00      	cmp	r2, #0
 801bb2c:	db10      	blt.n	801bb50 <EwDisposeStrings+0x70>
 801bb2e:	6803      	ldr	r3, [r0, #0]
 801bb30:	6033      	str	r3, [r6, #0]
 801bb32:	6842      	ldr	r2, [r0, #4]
 801bb34:	f8d9 3000 	ldr.w	r3, [r9]
 801bb38:	1a9b      	subs	r3, r3, r2
 801bb3a:	f8c9 3000 	str.w	r3, [r9]
 801bb3e:	f8da 3000 	ldr.w	r3, [sl]
 801bb42:	3b01      	subs	r3, #1
 801bb44:	f8ca 3000 	str.w	r3, [sl]
 801bb48:	3501      	adds	r5, #1
 801bb4a:	f00d fe13 	bl	8029774 <EwFree>
 801bb4e:	e7d4      	b.n	801bafa <EwDisposeStrings+0x1a>
 801bb50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801bb54:	8103      	strh	r3, [r0, #8]
 801bb56:	4606      	mov	r6, r0
 801bb58:	e7cf      	b.n	801bafa <EwDisposeStrings+0x1a>
 801bb5a:	f8d4 b004 	ldr.w	fp, [r4, #4]
 801bb5e:	f104 0310 	add.w	r3, r4, #16
 801bb62:	881a      	ldrh	r2, [r3, #0]
 801bb64:	b1aa      	cbz	r2, 801bb92 <EwDisposeStrings+0xb2>
 801bb66:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 801bb6a:	2900      	cmp	r1, #0
 801bb6c:	da01      	bge.n	801bb72 <EwDisposeStrings+0x92>
 801bb6e:	465c      	mov	r4, fp
 801bb70:	e7ca      	b.n	801bb08 <EwDisposeStrings+0x28>
 801bb72:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801bb76:	e7f4      	b.n	801bb62 <EwDisposeStrings+0x82>
 801bb78:	f102 0310 	add.w	r3, r2, #16
 801bb7c:	6852      	ldr	r2, [r2, #4]
 801bb7e:	8818      	ldrh	r0, [r3, #0]
 801bb80:	2800      	cmp	r0, #0
 801bb82:	d0cb      	beq.n	801bb1c <EwDisposeStrings+0x3c>
 801bb84:	8859      	ldrh	r1, [r3, #2]
 801bb86:	f3c1 010e 	ubfx	r1, r1, #0, #15
 801bb8a:	8059      	strh	r1, [r3, #2]
 801bb8c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801bb90:	e7f5      	b.n	801bb7e <EwDisposeStrings+0x9e>
 801bb92:	68a2      	ldr	r2, [r4, #8]
 801bb94:	f8d9 3000 	ldr.w	r3, [r9]
 801bb98:	4620      	mov	r0, r4
 801bb9a:	1a9b      	subs	r3, r3, r2
 801bb9c:	f8c9 3000 	str.w	r3, [r9]
 801bba0:	f7ff fdb8 	bl	801b714 <EwNotifyObservers+0x2c>
 801bba4:	6833      	ldr	r3, [r6, #0]
 801bba6:	1a18      	subs	r0, r3, r0
 801bba8:	6030      	str	r0, [r6, #0]
 801bbaa:	4620      	mov	r0, r4
 801bbac:	f7ff fdd6 	bl	801b75c <EwNotifyObservers+0x74>
 801bbb0:	3501      	adds	r5, #1
 801bbb2:	f00d fddf 	bl	8029774 <EwFree>
 801bbb6:	e7da      	b.n	801bb6e <EwDisposeStrings+0x8e>
 801bbb8:	20000300 	.word	0x20000300
 801bbbc:	2000035c 	.word	0x2000035c
 801bbc0:	200002e4 	.word	0x200002e4
 801bbc4:	20000028 	.word	0x20000028

0801bbc8 <EwCanMarkString>:
 801bbc8:	4602      	mov	r2, r0
 801bbca:	480f      	ldr	r0, [pc, #60]	; (801bc08 <EwCanMarkString+0x40>)
 801bbcc:	68c3      	ldr	r3, [r0, #12]
 801bbce:	b96b      	cbnz	r3, 801bbec <EwCanMarkString+0x24>
 801bbd0:	6800      	ldr	r0, [r0, #0]
 801bbd2:	b1a8      	cbz	r0, 801bc00 <EwCanMarkString+0x38>
 801bbd4:	f100 0310 	add.w	r3, r0, #16
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d312      	bcc.n	801bc02 <EwCanMarkString+0x3a>
 801bbdc:	6883      	ldr	r3, [r0, #8]
 801bbde:	4403      	add	r3, r0
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	d20e      	bcs.n	801bc02 <EwCanMarkString+0x3a>
 801bbe4:	3014      	adds	r0, #20
 801bbe6:	4770      	bx	lr
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	e7f0      	b.n	801bbce <EwCanMarkString+0x6>
 801bbec:	f103 0108 	add.w	r1, r3, #8
 801bbf0:	428a      	cmp	r2, r1
 801bbf2:	d3f9      	bcc.n	801bbe8 <EwCanMarkString+0x20>
 801bbf4:	6859      	ldr	r1, [r3, #4]
 801bbf6:	4419      	add	r1, r3
 801bbf8:	428a      	cmp	r2, r1
 801bbfa:	d2f5      	bcs.n	801bbe8 <EwCanMarkString+0x20>
 801bbfc:	f103 000a 	add.w	r0, r3, #10
 801bc00:	4770      	bx	lr
 801bc02:	6840      	ldr	r0, [r0, #4]
 801bc04:	e7e5      	b.n	801bbd2 <EwCanMarkString+0xa>
 801bc06:	bf00      	nop
 801bc08:	2000035c 	.word	0x2000035c

0801bc0c <EwFormatUIntToAnsiString>:
 801bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc0e:	4604      	mov	r4, r0
 801bc10:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
 801bc14:	2800      	cmp	r0, #0
 801bc16:	bf14      	ite	ne
 801bc18:	2041      	movne	r0, #65	; 0x41
 801bc1a:	2061      	moveq	r0, #97	; 0x61
 801bc1c:	2a80      	cmp	r2, #128	; 0x80
 801bc1e:	bfa8      	it	ge
 801bc20:	2280      	movge	r2, #128	; 0x80
 801bc22:	2b02      	cmp	r3, #2
 801bc24:	d11f      	bne.n	801bc66 <EwFormatUIntToAnsiString+0x5a>
 801bc26:	4623      	mov	r3, r4
 801bc28:	f001 0001 	and.w	r0, r1, #1
 801bc2c:	3030      	adds	r0, #48	; 0x30
 801bc2e:	0849      	lsrs	r1, r1, #1
 801bc30:	f803 0b01 	strb.w	r0, [r3], #1
 801bc34:	d1f8      	bne.n	801bc28 <EwFormatUIntToAnsiString+0x1c>
 801bc36:	1b1d      	subs	r5, r3, r4
 801bc38:	2e00      	cmp	r6, #0
 801bc3a:	bf18      	it	ne
 801bc3c:	3501      	addne	r5, #1
 801bc3e:	1b55      	subs	r5, r2, r5
 801bc40:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801bc44:	4618      	mov	r0, r3
 801bc46:	462a      	mov	r2, r5
 801bc48:	2130      	movs	r1, #48	; 0x30
 801bc4a:	f015 f915 	bl	8030e78 <memset>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	4428      	add	r0, r5
 801bc52:	b116      	cbz	r6, 801bc5a <EwFormatUIntToAnsiString+0x4e>
 801bc54:	222b      	movs	r2, #43	; 0x2b
 801bc56:	555a      	strb	r2, [r3, r5]
 801bc58:	3001      	adds	r0, #1
 801bc5a:	1e42      	subs	r2, r0, #1
 801bc5c:	4623      	mov	r3, r4
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d82e      	bhi.n	801bcc0 <EwFormatUIntToAnsiString+0xb4>
 801bc62:	1b00      	subs	r0, r0, r4
 801bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc66:	2b08      	cmp	r3, #8
 801bc68:	d108      	bne.n	801bc7c <EwFormatUIntToAnsiString+0x70>
 801bc6a:	4623      	mov	r3, r4
 801bc6c:	f001 0007 	and.w	r0, r1, #7
 801bc70:	3030      	adds	r0, #48	; 0x30
 801bc72:	08c9      	lsrs	r1, r1, #3
 801bc74:	f803 0b01 	strb.w	r0, [r3], #1
 801bc78:	d1f8      	bne.n	801bc6c <EwFormatUIntToAnsiString+0x60>
 801bc7a:	e7dc      	b.n	801bc36 <EwFormatUIntToAnsiString+0x2a>
 801bc7c:	2b10      	cmp	r3, #16
 801bc7e:	4623      	mov	r3, r4
 801bc80:	d111      	bne.n	801bca6 <EwFormatUIntToAnsiString+0x9a>
 801bc82:	f1a0 050a 	sub.w	r5, r0, #10
 801bc86:	f001 070f 	and.w	r7, r1, #15
 801bc8a:	4638      	mov	r0, r7
 801bc8c:	2f09      	cmp	r7, #9
 801bc8e:	bf88      	it	hi
 801bc90:	1940      	addhi	r0, r0, r5
 801bc92:	f103 0301 	add.w	r3, r3, #1
 801bc96:	bf8c      	ite	hi
 801bc98:	b2c0      	uxtbhi	r0, r0
 801bc9a:	3030      	addls	r0, #48	; 0x30
 801bc9c:	0909      	lsrs	r1, r1, #4
 801bc9e:	f803 0c01 	strb.w	r0, [r3, #-1]
 801bca2:	d1f0      	bne.n	801bc86 <EwFormatUIntToAnsiString+0x7a>
 801bca4:	e7c7      	b.n	801bc36 <EwFormatUIntToAnsiString+0x2a>
 801bca6:	270a      	movs	r7, #10
 801bca8:	fbb1 f5f7 	udiv	r5, r1, r7
 801bcac:	fb07 1015 	mls	r0, r7, r5, r1
 801bcb0:	3030      	adds	r0, #48	; 0x30
 801bcb2:	f803 0b01 	strb.w	r0, [r3], #1
 801bcb6:	4608      	mov	r0, r1
 801bcb8:	2809      	cmp	r0, #9
 801bcba:	4629      	mov	r1, r5
 801bcbc:	d8f4      	bhi.n	801bca8 <EwFormatUIntToAnsiString+0x9c>
 801bcbe:	e7ba      	b.n	801bc36 <EwFormatUIntToAnsiString+0x2a>
 801bcc0:	7819      	ldrb	r1, [r3, #0]
 801bcc2:	7815      	ldrb	r5, [r2, #0]
 801bcc4:	f803 5b01 	strb.w	r5, [r3], #1
 801bcc8:	f802 1901 	strb.w	r1, [r2], #-1
 801bccc:	e7c7      	b.n	801bc5e <EwFormatUIntToAnsiString+0x52>

0801bcce <EwFormatIntToAnsiString>:
 801bcce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcd0:	4605      	mov	r5, r0
 801bcd2:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
 801bcd6:	2800      	cmp	r0, #0
 801bcd8:	bf14      	ite	ne
 801bcda:	2041      	movne	r0, #65	; 0x41
 801bcdc:	2061      	moveq	r0, #97	; 0x61
 801bcde:	2a80      	cmp	r2, #128	; 0x80
 801bce0:	bfa8      	it	ge
 801bce2:	2280      	movge	r2, #128	; 0x80
 801bce4:	1e0e      	subs	r6, r1, #0
 801bce6:	bfba      	itte	lt
 801bce8:	4274      	neglt	r4, r6
 801bcea:	2701      	movlt	r7, #1
 801bcec:	4634      	movge	r4, r6
 801bcee:	2b02      	cmp	r3, #2
 801bcf0:	d123      	bne.n	801bd3a <EwFormatIntToAnsiString+0x6c>
 801bcf2:	462b      	mov	r3, r5
 801bcf4:	f004 0101 	and.w	r1, r4, #1
 801bcf8:	3130      	adds	r1, #48	; 0x30
 801bcfa:	0864      	lsrs	r4, r4, #1
 801bcfc:	f803 1b01 	strb.w	r1, [r3], #1
 801bd00:	d1f8      	bne.n	801bcf4 <EwFormatIntToAnsiString+0x26>
 801bd02:	1b5c      	subs	r4, r3, r5
 801bd04:	2f00      	cmp	r7, #0
 801bd06:	bf18      	it	ne
 801bd08:	3401      	addne	r4, #1
 801bd0a:	1b14      	subs	r4, r2, r4
 801bd0c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801bd10:	4618      	mov	r0, r3
 801bd12:	4622      	mov	r2, r4
 801bd14:	2130      	movs	r1, #48	; 0x30
 801bd16:	f015 f8af 	bl	8030e78 <memset>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	4423      	add	r3, r4
 801bd1e:	2f00      	cmp	r7, #0
 801bd20:	d03a      	beq.n	801bd98 <EwFormatIntToAnsiString+0xca>
 801bd22:	2e00      	cmp	r6, #0
 801bd24:	bfb4      	ite	lt
 801bd26:	222d      	movlt	r2, #45	; 0x2d
 801bd28:	222b      	movge	r2, #43	; 0x2b
 801bd2a:	1c58      	adds	r0, r3, #1
 801bd2c:	701a      	strb	r2, [r3, #0]
 801bd2e:	1e42      	subs	r2, r0, #1
 801bd30:	462b      	mov	r3, r5
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d832      	bhi.n	801bd9c <EwFormatIntToAnsiString+0xce>
 801bd36:	1b40      	subs	r0, r0, r5
 801bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd3a:	2b08      	cmp	r3, #8
 801bd3c:	d108      	bne.n	801bd50 <EwFormatIntToAnsiString+0x82>
 801bd3e:	462b      	mov	r3, r5
 801bd40:	f004 0107 	and.w	r1, r4, #7
 801bd44:	3130      	adds	r1, #48	; 0x30
 801bd46:	08e4      	lsrs	r4, r4, #3
 801bd48:	f803 1b01 	strb.w	r1, [r3], #1
 801bd4c:	d1f8      	bne.n	801bd40 <EwFormatIntToAnsiString+0x72>
 801bd4e:	e7d8      	b.n	801bd02 <EwFormatIntToAnsiString+0x34>
 801bd50:	2b10      	cmp	r3, #16
 801bd52:	462b      	mov	r3, r5
 801bd54:	d112      	bne.n	801bd7c <EwFormatIntToAnsiString+0xae>
 801bd56:	f1a0 010a 	sub.w	r1, r0, #10
 801bd5a:	f004 0c0f 	and.w	ip, r4, #15
 801bd5e:	4660      	mov	r0, ip
 801bd60:	f1bc 0f09 	cmp.w	ip, #9
 801bd64:	bf88      	it	hi
 801bd66:	1840      	addhi	r0, r0, r1
 801bd68:	f103 0301 	add.w	r3, r3, #1
 801bd6c:	bf8c      	ite	hi
 801bd6e:	b2c0      	uxtbhi	r0, r0
 801bd70:	3030      	addls	r0, #48	; 0x30
 801bd72:	0924      	lsrs	r4, r4, #4
 801bd74:	f803 0c01 	strb.w	r0, [r3, #-1]
 801bd78:	d1ef      	bne.n	801bd5a <EwFormatIntToAnsiString+0x8c>
 801bd7a:	e7c2      	b.n	801bd02 <EwFormatIntToAnsiString+0x34>
 801bd7c:	f04f 0c0a 	mov.w	ip, #10
 801bd80:	fbb4 f0fc 	udiv	r0, r4, ip
 801bd84:	fb0c 4110 	mls	r1, ip, r0, r4
 801bd88:	3130      	adds	r1, #48	; 0x30
 801bd8a:	f803 1b01 	strb.w	r1, [r3], #1
 801bd8e:	4621      	mov	r1, r4
 801bd90:	2909      	cmp	r1, #9
 801bd92:	4604      	mov	r4, r0
 801bd94:	d8f4      	bhi.n	801bd80 <EwFormatIntToAnsiString+0xb2>
 801bd96:	e7b4      	b.n	801bd02 <EwFormatIntToAnsiString+0x34>
 801bd98:	4618      	mov	r0, r3
 801bd9a:	e7c8      	b.n	801bd2e <EwFormatIntToAnsiString+0x60>
 801bd9c:	7819      	ldrb	r1, [r3, #0]
 801bd9e:	7814      	ldrb	r4, [r2, #0]
 801bda0:	f803 4b01 	strb.w	r4, [r3], #1
 801bda4:	f802 1901 	strb.w	r1, [r2], #-1
 801bda8:	e7c3      	b.n	801bd32 <EwFormatIntToAnsiString+0x64>

0801bdaa <EwFormatUInt64ToAnsiString>:
 801bdaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdae:	4614      	mov	r4, r2
 801bdb0:	e9dd 290c 	ldrd	r2, r9, [sp, #48]	; 0x30
 801bdb4:	2a00      	cmp	r2, #0
 801bdb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdb8:	461d      	mov	r5, r3
 801bdba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdbc:	bf14      	ite	ne
 801bdbe:	2141      	movne	r1, #65	; 0x41
 801bdc0:	2161      	moveq	r1, #97	; 0x61
 801bdc2:	2a80      	cmp	r2, #128	; 0x80
 801bdc4:	bfa8      	it	ge
 801bdc6:	2280      	movge	r2, #128	; 0x80
 801bdc8:	2b02      	cmp	r3, #2
 801bdca:	4607      	mov	r7, r0
 801bdcc:	4690      	mov	r8, r2
 801bdce:	4606      	mov	r6, r0
 801bdd0:	d127      	bne.n	801be22 <EwFormatUInt64ToAnsiString+0x78>
 801bdd2:	f004 0301 	and.w	r3, r4, #1
 801bdd6:	0864      	lsrs	r4, r4, #1
 801bdd8:	3330      	adds	r3, #48	; 0x30
 801bdda:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
 801bdde:	086d      	lsrs	r5, r5, #1
 801bde0:	f806 3b01 	strb.w	r3, [r6], #1
 801bde4:	ea54 0305 	orrs.w	r3, r4, r5
 801bde8:	d1f3      	bne.n	801bdd2 <EwFormatUInt64ToAnsiString+0x28>
 801bdea:	1bf4      	subs	r4, r6, r7
 801bdec:	f1b9 0f00 	cmp.w	r9, #0
 801bdf0:	bf18      	it	ne
 801bdf2:	3401      	addne	r4, #1
 801bdf4:	eba8 0404 	sub.w	r4, r8, r4
 801bdf8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801bdfc:	4622      	mov	r2, r4
 801bdfe:	2130      	movs	r1, #48	; 0x30
 801be00:	4630      	mov	r0, r6
 801be02:	f015 f839 	bl	8030e78 <memset>
 801be06:	1930      	adds	r0, r6, r4
 801be08:	f1b9 0f00 	cmp.w	r9, #0
 801be0c:	d002      	beq.n	801be14 <EwFormatUInt64ToAnsiString+0x6a>
 801be0e:	232b      	movs	r3, #43	; 0x2b
 801be10:	5533      	strb	r3, [r6, r4]
 801be12:	3001      	adds	r0, #1
 801be14:	1e42      	subs	r2, r0, #1
 801be16:	463b      	mov	r3, r7
 801be18:	429a      	cmp	r2, r3
 801be1a:	d847      	bhi.n	801beac <EwFormatUInt64ToAnsiString+0x102>
 801be1c:	1bc0      	subs	r0, r0, r7
 801be1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be22:	2b08      	cmp	r3, #8
 801be24:	d10c      	bne.n	801be40 <EwFormatUInt64ToAnsiString+0x96>
 801be26:	f004 0307 	and.w	r3, r4, #7
 801be2a:	08e4      	lsrs	r4, r4, #3
 801be2c:	3330      	adds	r3, #48	; 0x30
 801be2e:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801be32:	08ed      	lsrs	r5, r5, #3
 801be34:	f806 3b01 	strb.w	r3, [r6], #1
 801be38:	ea54 0305 	orrs.w	r3, r4, r5
 801be3c:	d1f3      	bne.n	801be26 <EwFormatUInt64ToAnsiString+0x7c>
 801be3e:	e7d4      	b.n	801bdea <EwFormatUInt64ToAnsiString+0x40>
 801be40:	2b10      	cmp	r3, #16
 801be42:	d11a      	bne.n	801be7a <EwFormatUInt64ToAnsiString+0xd0>
 801be44:	f04f 0c00 	mov.w	ip, #0
 801be48:	390a      	subs	r1, #10
 801be4a:	f004 020f 	and.w	r2, r4, #15
 801be4e:	2a0a      	cmp	r2, #10
 801be50:	4613      	mov	r3, r2
 801be52:	f17c 0200 	sbcs.w	r2, ip, #0
 801be56:	bf28      	it	cs
 801be58:	185b      	addcs	r3, r3, r1
 801be5a:	f106 0601 	add.w	r6, r6, #1
 801be5e:	ea4f 1414 	mov.w	r4, r4, lsr #4
 801be62:	bf2c      	ite	cs
 801be64:	b2db      	uxtbcs	r3, r3
 801be66:	3330      	addcc	r3, #48	; 0x30
 801be68:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801be6c:	092d      	lsrs	r5, r5, #4
 801be6e:	f806 3c01 	strb.w	r3, [r6, #-1]
 801be72:	ea54 0305 	orrs.w	r3, r4, r5
 801be76:	d1e8      	bne.n	801be4a <EwFormatUInt64ToAnsiString+0xa0>
 801be78:	e7b7      	b.n	801bdea <EwFormatUInt64ToAnsiString+0x40>
 801be7a:	4620      	mov	r0, r4
 801be7c:	4629      	mov	r1, r5
 801be7e:	220a      	movs	r2, #10
 801be80:	2300      	movs	r3, #0
 801be82:	f001 fc59 	bl	801d738 <__aeabi_uldivmod>
 801be86:	3230      	adds	r2, #48	; 0x30
 801be88:	f806 2b01 	strb.w	r2, [r6], #1
 801be8c:	2300      	movs	r3, #0
 801be8e:	4620      	mov	r0, r4
 801be90:	4629      	mov	r1, r5
 801be92:	220a      	movs	r2, #10
 801be94:	f001 fc50 	bl	801d738 <__aeabi_uldivmod>
 801be98:	46a3      	mov	fp, r4
 801be9a:	46aa      	mov	sl, r5
 801be9c:	f1bb 0f0a 	cmp.w	fp, #10
 801bea0:	f17a 0300 	sbcs.w	r3, sl, #0
 801bea4:	4604      	mov	r4, r0
 801bea6:	460d      	mov	r5, r1
 801bea8:	d2e7      	bcs.n	801be7a <EwFormatUInt64ToAnsiString+0xd0>
 801beaa:	e79e      	b.n	801bdea <EwFormatUInt64ToAnsiString+0x40>
 801beac:	7819      	ldrb	r1, [r3, #0]
 801beae:	7814      	ldrb	r4, [r2, #0]
 801beb0:	f803 4b01 	strb.w	r4, [r3], #1
 801beb4:	f802 1901 	strb.w	r1, [r2], #-1
 801beb8:	e7ae      	b.n	801be18 <EwFormatUInt64ToAnsiString+0x6e>

0801beba <EwFormatInt64ToAnsiString>:
 801beba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bebe:	4607      	mov	r7, r0
 801bec0:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 801bec4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bec6:	2900      	cmp	r1, #0
 801bec8:	bf14      	ite	ne
 801beca:	2141      	movne	r1, #65	; 0x41
 801becc:	2161      	moveq	r1, #97	; 0x61
 801bece:	2c80      	cmp	r4, #128	; 0x80
 801bed0:	bfa8      	it	ge
 801bed2:	2480      	movge	r4, #128	; 0x80
 801bed4:	f1b3 0900 	subs.w	r9, r3, #0
 801bed8:	46a0      	mov	r8, r4
 801beda:	da34      	bge.n	801bf46 <EwFormatInt64ToAnsiString+0x8c>
 801bedc:	4254      	negs	r4, r2
 801bede:	f04f 0301 	mov.w	r3, #1
 801bee2:	eb69 0649 	sbc.w	r6, r9, r9, lsl #1
 801bee6:	930d      	str	r3, [sp, #52]	; 0x34
 801bee8:	2802      	cmp	r0, #2
 801beea:	463d      	mov	r5, r7
 801beec:	d12e      	bne.n	801bf4c <EwFormatInt64ToAnsiString+0x92>
 801beee:	f004 0301 	and.w	r3, r4, #1
 801bef2:	0864      	lsrs	r4, r4, #1
 801bef4:	3330      	adds	r3, #48	; 0x30
 801bef6:	ea44 74c6 	orr.w	r4, r4, r6, lsl #31
 801befa:	0876      	lsrs	r6, r6, #1
 801befc:	f805 3b01 	strb.w	r3, [r5], #1
 801bf00:	ea54 0306 	orrs.w	r3, r4, r6
 801bf04:	d1f3      	bne.n	801beee <EwFormatInt64ToAnsiString+0x34>
 801bf06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf08:	1bea      	subs	r2, r5, r7
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	bf18      	it	ne
 801bf0e:	3201      	addne	r2, #1
 801bf10:	eba8 0802 	sub.w	r8, r8, r2
 801bf14:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801bf18:	4628      	mov	r0, r5
 801bf1a:	4642      	mov	r2, r8
 801bf1c:	2130      	movs	r1, #48	; 0x30
 801bf1e:	f014 ffab 	bl	8030e78 <memset>
 801bf22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf24:	4445      	add	r5, r8
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d055      	beq.n	801bfd6 <EwFormatInt64ToAnsiString+0x11c>
 801bf2a:	f1b9 0f00 	cmp.w	r9, #0
 801bf2e:	bfb4      	ite	lt
 801bf30:	232d      	movlt	r3, #45	; 0x2d
 801bf32:	232b      	movge	r3, #43	; 0x2b
 801bf34:	1c68      	adds	r0, r5, #1
 801bf36:	702b      	strb	r3, [r5, #0]
 801bf38:	1e42      	subs	r2, r0, #1
 801bf3a:	463b      	mov	r3, r7
 801bf3c:	429a      	cmp	r2, r3
 801bf3e:	d84c      	bhi.n	801bfda <EwFormatInt64ToAnsiString+0x120>
 801bf40:	1bc0      	subs	r0, r0, r7
 801bf42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf46:	4614      	mov	r4, r2
 801bf48:	464e      	mov	r6, r9
 801bf4a:	e7cd      	b.n	801bee8 <EwFormatInt64ToAnsiString+0x2e>
 801bf4c:	2808      	cmp	r0, #8
 801bf4e:	d10c      	bne.n	801bf6a <EwFormatInt64ToAnsiString+0xb0>
 801bf50:	f004 0307 	and.w	r3, r4, #7
 801bf54:	08e4      	lsrs	r4, r4, #3
 801bf56:	3330      	adds	r3, #48	; 0x30
 801bf58:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 801bf5c:	08f6      	lsrs	r6, r6, #3
 801bf5e:	f805 3b01 	strb.w	r3, [r5], #1
 801bf62:	ea54 0306 	orrs.w	r3, r4, r6
 801bf66:	d1f3      	bne.n	801bf50 <EwFormatInt64ToAnsiString+0x96>
 801bf68:	e7cd      	b.n	801bf06 <EwFormatInt64ToAnsiString+0x4c>
 801bf6a:	2810      	cmp	r0, #16
 801bf6c:	d11a      	bne.n	801bfa4 <EwFormatInt64ToAnsiString+0xea>
 801bf6e:	f04f 0c00 	mov.w	ip, #0
 801bf72:	390a      	subs	r1, #10
 801bf74:	f004 020f 	and.w	r2, r4, #15
 801bf78:	2a0a      	cmp	r2, #10
 801bf7a:	4613      	mov	r3, r2
 801bf7c:	f17c 0200 	sbcs.w	r2, ip, #0
 801bf80:	bf28      	it	cs
 801bf82:	185b      	addcs	r3, r3, r1
 801bf84:	f105 0501 	add.w	r5, r5, #1
 801bf88:	ea4f 1414 	mov.w	r4, r4, lsr #4
 801bf8c:	bf2c      	ite	cs
 801bf8e:	b2db      	uxtbcs	r3, r3
 801bf90:	3330      	addcc	r3, #48	; 0x30
 801bf92:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 801bf96:	0936      	lsrs	r6, r6, #4
 801bf98:	f805 3c01 	strb.w	r3, [r5, #-1]
 801bf9c:	ea54 0306 	orrs.w	r3, r4, r6
 801bfa0:	d1e8      	bne.n	801bf74 <EwFormatInt64ToAnsiString+0xba>
 801bfa2:	e7b0      	b.n	801bf06 <EwFormatInt64ToAnsiString+0x4c>
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	4631      	mov	r1, r6
 801bfa8:	220a      	movs	r2, #10
 801bfaa:	2300      	movs	r3, #0
 801bfac:	f001 fbc4 	bl	801d738 <__aeabi_uldivmod>
 801bfb0:	3230      	adds	r2, #48	; 0x30
 801bfb2:	f805 2b01 	strb.w	r2, [r5], #1
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	4620      	mov	r0, r4
 801bfba:	4631      	mov	r1, r6
 801bfbc:	220a      	movs	r2, #10
 801bfbe:	f001 fbbb 	bl	801d738 <__aeabi_uldivmod>
 801bfc2:	46a3      	mov	fp, r4
 801bfc4:	46b2      	mov	sl, r6
 801bfc6:	f1bb 0f0a 	cmp.w	fp, #10
 801bfca:	f17a 0300 	sbcs.w	r3, sl, #0
 801bfce:	4604      	mov	r4, r0
 801bfd0:	460e      	mov	r6, r1
 801bfd2:	d2e7      	bcs.n	801bfa4 <EwFormatInt64ToAnsiString+0xea>
 801bfd4:	e797      	b.n	801bf06 <EwFormatInt64ToAnsiString+0x4c>
 801bfd6:	4628      	mov	r0, r5
 801bfd8:	e7ae      	b.n	801bf38 <EwFormatInt64ToAnsiString+0x7e>
 801bfda:	7819      	ldrb	r1, [r3, #0]
 801bfdc:	7814      	ldrb	r4, [r2, #0]
 801bfde:	f803 4b01 	strb.w	r4, [r3], #1
 801bfe2:	f802 1901 	strb.w	r1, [r2], #-1
 801bfe6:	e7a9      	b.n	801bf3c <EwFormatInt64ToAnsiString+0x82>

0801bfe8 <EwFormatFloatToAnsiString>:
 801bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfec:	b091      	sub	sp, #68	; 0x44
 801bfee:	4690      	mov	r8, r2
 801bff0:	ed8d 0a01 	vstr	s0, [sp, #4]
 801bff4:	468a      	mov	sl, r1
 801bff6:	2234      	movs	r2, #52	; 0x34
 801bff8:	2100      	movs	r1, #0
 801bffa:	4605      	mov	r5, r0
 801bffc:	a803      	add	r0, sp, #12
 801bffe:	9e01      	ldr	r6, [sp, #4]
 801c000:	461f      	mov	r7, r3
 801c002:	f014 ff39 	bl	8030e78 <memset>
 801c006:	ea88 72e8 	eor.w	r2, r8, r8, asr #31
 801c00a:	eba2 72e8 	sub.w	r2, r2, r8, asr #31
 801c00e:	2a20      	cmp	r2, #32
 801c010:	4651      	mov	r1, sl
 801c012:	f3c6 54c7 	ubfx	r4, r6, #23, #8
 801c016:	bfa8      	it	ge
 801c018:	2220      	movge	r2, #32
 801c01a:	2980      	cmp	r1, #128	; 0x80
 801c01c:	ea4f 79d6 	mov.w	r9, r6, lsr #31
 801c020:	bfa8      	it	ge
 801c022:	2180      	movge	r1, #128	; 0x80
 801c024:	f3c6 0616 	ubfx	r6, r6, #0, #23
 801c028:	2cff      	cmp	r4, #255	; 0xff
 801c02a:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 801c02e:	f000 80ba 	beq.w	801c1a6 <EwFormatFloatToAnsiString+0x1be>
 801c032:	340a      	adds	r4, #10
 801c034:	1120      	asrs	r0, r4, #4
 801c036:	f004 030f 	and.w	r3, r4, #15
 801c03a:	ac10      	add	r4, sp, #64	; 0x40
 801c03c:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 801c040:	fa06 fc03 	lsl.w	ip, r6, r3
 801c044:	f824 cc34 	strh.w	ip, [r4, #-52]
 801c048:	ac10      	add	r4, sp, #64	; 0x40
 801c04a:	eb04 0c40 	add.w	ip, r4, r0, lsl #1
 801c04e:	f1c3 0410 	rsb	r4, r3, #16
 801c052:	fa46 f404 	asr.w	r4, r6, r4
 801c056:	f82c 4c32 	strh.w	r4, [ip, #-50]
 801c05a:	b123      	cbz	r3, 801c066 <EwFormatFloatToAnsiString+0x7e>
 801c05c:	f1c3 0320 	rsb	r3, r3, #32
 801c060:	fa46 f303 	asr.w	r3, r6, r3
 801c064:	b29b      	uxth	r3, r3
 801c066:	ac10      	add	r4, sp, #64	; 0x40
 801c068:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 801c06c:	2600      	movs	r6, #0
 801c06e:	f820 3c30 	strh.w	r3, [r0, #-48]
 801c072:	f04f 0c0a 	mov.w	ip, #10
 801c076:	42b2      	cmp	r2, r6
 801c078:	d13f      	bne.n	801c0fa <EwFormatFloatToAnsiString+0x112>
 801c07a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	db4a      	blt.n	801c118 <EwFormatFloatToAnsiString+0x130>
 801c082:	ea57 0309 	orrs.w	r3, r7, r9
 801c086:	d153      	bne.n	801c130 <EwFormatFloatToAnsiString+0x148>
 801c088:	462c      	mov	r4, r5
 801c08a:	2300      	movs	r3, #0
 801c08c:	f04f 0a0a 	mov.w	sl, #10
 801c090:	2e00      	cmp	r6, #0
 801c092:	dc4f      	bgt.n	801c134 <EwFormatFloatToAnsiString+0x14c>
 801c094:	2b00      	cmp	r3, #0
 801c096:	d04d      	beq.n	801c134 <EwFormatFloatToAnsiString+0x14c>
 801c098:	462b      	mov	r3, r5
 801c09a:	1b49      	subs	r1, r1, r5
 801c09c:	f1b8 0f00 	cmp.w	r8, #0
 801c0a0:	461e      	mov	r6, r3
 801c0a2:	eb01 0a03 	add.w	sl, r1, r3
 801c0a6:	da07      	bge.n	801c0b8 <EwFormatFloatToAnsiString+0xd0>
 801c0a8:	7832      	ldrb	r2, [r6, #0]
 801c0aa:	2a30      	cmp	r2, #48	; 0x30
 801c0ac:	f103 0301 	add.w	r3, r3, #1
 801c0b0:	d102      	bne.n	801c0b8 <EwFormatFloatToAnsiString+0xd0>
 801c0b2:	781a      	ldrb	r2, [r3, #0]
 801c0b4:	2a2e      	cmp	r2, #46	; 0x2e
 801c0b6:	d1f1      	bne.n	801c09c <EwFormatFloatToAnsiString+0xb4>
 801c0b8:	42ae      	cmp	r6, r5
 801c0ba:	d907      	bls.n	801c0cc <EwFormatFloatToAnsiString+0xe4>
 801c0bc:	1ba2      	subs	r2, r4, r6
 801c0be:	4631      	mov	r1, r6
 801c0c0:	4628      	mov	r0, r5
 801c0c2:	f00d fb83 	bl	80297cc <EwMove>
 801c0c6:	1b76      	subs	r6, r6, r5
 801c0c8:	1ba4      	subs	r4, r4, r6
 801c0ca:	462e      	mov	r6, r5
 801c0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c0d0:	4652      	mov	r2, sl
 801c0d2:	2130      	movs	r1, #48	; 0x30
 801c0d4:	4620      	mov	r0, r4
 801c0d6:	f014 fecf 	bl	8030e78 <memset>
 801c0da:	eb04 000a 	add.w	r0, r4, sl
 801c0de:	f1b9 0f00 	cmp.w	r9, #0
 801c0e2:	d053      	beq.n	801c18c <EwFormatFloatToAnsiString+0x1a4>
 801c0e4:	232d      	movs	r3, #45	; 0x2d
 801c0e6:	f804 300a 	strb.w	r3, [r4, sl]
 801c0ea:	3001      	adds	r0, #1
 801c0ec:	1e43      	subs	r3, r0, #1
 801c0ee:	42b3      	cmp	r3, r6
 801c0f0:	d852      	bhi.n	801c198 <EwFormatFloatToAnsiString+0x1b0>
 801c0f2:	1b40      	subs	r0, r0, r5
 801c0f4:	b011      	add	sp, #68	; 0x44
 801c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0fa:	ac03      	add	r4, sp, #12
 801c0fc:	201a      	movs	r0, #26
 801c0fe:	2300      	movs	r3, #0
 801c100:	f8b4 e000 	ldrh.w	lr, [r4]
 801c104:	3801      	subs	r0, #1
 801c106:	fb0c 330e 	mla	r3, ip, lr, r3
 801c10a:	f824 3b02 	strh.w	r3, [r4], #2
 801c10e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c112:	d1f5      	bne.n	801c100 <EwFormatFloatToAnsiString+0x118>
 801c114:	3601      	adds	r6, #1
 801c116:	e7ae      	b.n	801c076 <EwFormatFloatToAnsiString+0x8e>
 801c118:	a808      	add	r0, sp, #32
 801c11a:	2210      	movs	r2, #16
 801c11c:	8803      	ldrh	r3, [r0, #0]
 801c11e:	3301      	adds	r3, #1
 801c120:	b29b      	uxth	r3, r3
 801c122:	f820 3b02 	strh.w	r3, [r0], #2
 801c126:	2b00      	cmp	r3, #0
 801c128:	d1ab      	bne.n	801c082 <EwFormatFloatToAnsiString+0x9a>
 801c12a:	3a01      	subs	r2, #1
 801c12c:	d1f6      	bne.n	801c11c <EwFormatFloatToAnsiString+0x134>
 801c12e:	e7a8      	b.n	801c082 <EwFormatFloatToAnsiString+0x9a>
 801c130:	3901      	subs	r1, #1
 801c132:	e7a9      	b.n	801c088 <EwFormatFloatToAnsiString+0xa0>
 801c134:	f10d 0e3e 	add.w	lr, sp, #62	; 0x3e
 801c138:	f04f 0c10 	mov.w	ip, #16
 801c13c:	2000      	movs	r0, #0
 801c13e:	2301      	movs	r3, #1
 801c140:	f83e 2902 	ldrh.w	r2, [lr], #-2
 801c144:	eb12 4200 	adds.w	r2, r2, r0, lsl #16
 801c148:	d00d      	beq.n	801c166 <EwFormatFloatToAnsiString+0x17e>
 801c14a:	fbb2 f0fa 	udiv	r0, r2, sl
 801c14e:	fa1f fb80 	uxth.w	fp, r0
 801c152:	f8ae b002 	strh.w	fp, [lr, #2]
 801c156:	fb0a 2010 	mls	r0, sl, r0, r2
 801c15a:	f1bb 0f00 	cmp.w	fp, #0
 801c15e:	bf14      	ite	ne
 801c160:	2300      	movne	r3, #0
 801c162:	f003 0301 	andeq.w	r3, r3, #1
 801c166:	f1bc 0c01 	subs.w	ip, ip, #1
 801c16a:	d1e9      	bne.n	801c140 <EwFormatFloatToAnsiString+0x158>
 801c16c:	3e01      	subs	r6, #1
 801c16e:	bf08      	it	eq
 801c170:	232e      	moveq	r3, #46	; 0x2e
 801c172:	f100 0030 	add.w	r0, r0, #48	; 0x30
 801c176:	bf08      	it	eq
 801c178:	f101 31ff 	addeq.w	r1, r1, #4294967295
 801c17c:	7020      	strb	r0, [r4, #0]
 801c17e:	bf09      	itett	eq
 801c180:	7063      	strbeq	r3, [r4, #1]
 801c182:	3401      	addne	r4, #1
 801c184:	4633      	moveq	r3, r6
 801c186:	3402      	addeq	r4, #2
 801c188:	3901      	subs	r1, #1
 801c18a:	e781      	b.n	801c090 <EwFormatFloatToAnsiString+0xa8>
 801c18c:	2f00      	cmp	r7, #0
 801c18e:	d0ad      	beq.n	801c0ec <EwFormatFloatToAnsiString+0x104>
 801c190:	232b      	movs	r3, #43	; 0x2b
 801c192:	f800 3b01 	strb.w	r3, [r0], #1
 801c196:	e7a9      	b.n	801c0ec <EwFormatFloatToAnsiString+0x104>
 801c198:	7832      	ldrb	r2, [r6, #0]
 801c19a:	7819      	ldrb	r1, [r3, #0]
 801c19c:	f806 1b01 	strb.w	r1, [r6], #1
 801c1a0:	f803 2901 	strb.w	r2, [r3], #-1
 801c1a4:	e7a3      	b.n	801c0ee <EwFormatFloatToAnsiString+0x106>
 801c1a6:	2000      	movs	r0, #0
 801c1a8:	e7a4      	b.n	801c0f4 <EwFormatFloatToAnsiString+0x10c>

0801c1aa <EwNewString>:
 801c1aa:	b507      	push	{r0, r1, r2, lr}
 801c1ac:	9001      	str	r0, [sp, #4]
 801c1ae:	f7ff fbc1 	bl	801b934 <EwNotifyObservers+0x24c>
 801c1b2:	9000      	str	r0, [sp, #0]
 801c1b4:	f7ff fae8 	bl	801b788 <EwNotifyObservers+0xa0>
 801c1b8:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c1bc:	f7ff fbc4 	bl	801b948 <EwNotifyObservers+0x260>
 801c1c0:	b003      	add	sp, #12
 801c1c2:	f85d fb04 	ldr.w	pc, [sp], #4

0801c1c6 <EwNewStringAnsi>:
 801c1c6:	b570      	push	{r4, r5, r6, lr}
 801c1c8:	4603      	mov	r3, r0
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	461d      	mov	r5, r3
 801c1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1d2:	2a00      	cmp	r2, #0
 801c1d4:	d1fa      	bne.n	801c1cc <EwNewStringAnsi+0x6>
 801c1d6:	1b2e      	subs	r6, r5, r4
 801c1d8:	4630      	mov	r0, r6
 801c1da:	f7ff fad5 	bl	801b788 <EwNotifyObservers+0xa0>
 801c1de:	b128      	cbz	r0, 801c1ec <EwNewStringAnsi+0x26>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	42a5      	cmp	r5, r4
 801c1e4:	d103      	bne.n	801c1ee <EwNewStringAnsi+0x28>
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
 801c1ec:	bd70      	pop	{r4, r5, r6, pc}
 801c1ee:	f814 2b01 	ldrb.w	r2, [r4], #1
 801c1f2:	f823 2b02 	strh.w	r2, [r3], #2
 801c1f6:	e7f4      	b.n	801c1e2 <EwNewStringAnsi+0x1c>

0801c1f8 <EwNewStringUtf8>:
 801c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1fa:	460d      	mov	r5, r1
 801c1fc:	460b      	mov	r3, r1
 801c1fe:	4604      	mov	r4, r0
 801c200:	4601      	mov	r1, r0
 801c202:	2700      	movs	r7, #0
 801c204:	2b00      	cmp	r3, #0
 801c206:	dd0e      	ble.n	801c226 <EwNewStringUtf8+0x2e>
 801c208:	f991 0000 	ldrsb.w	r0, [r1]
 801c20c:	780a      	ldrb	r2, [r1, #0]
 801c20e:	2800      	cmp	r0, #0
 801c210:	db03      	blt.n	801c21a <EwNewStringUtf8+0x22>
 801c212:	3b01      	subs	r3, #1
 801c214:	3101      	adds	r1, #1
 801c216:	3701      	adds	r7, #1
 801c218:	e7f4      	b.n	801c204 <EwNewStringUtf8+0xc>
 801c21a:	2adf      	cmp	r2, #223	; 0xdf
 801c21c:	d814      	bhi.n	801c248 <EwNewStringUtf8+0x50>
 801c21e:	3b02      	subs	r3, #2
 801c220:	3102      	adds	r1, #2
 801c222:	2b00      	cmp	r3, #0
 801c224:	daf7      	bge.n	801c216 <EwNewStringUtf8+0x1e>
 801c226:	4638      	mov	r0, r7
 801c228:	f7ff faae 	bl	801b788 <EwNotifyObservers+0xa0>
 801c22c:	b158      	cbz	r0, 801c246 <EwNewStringUtf8+0x4e>
 801c22e:	007e      	lsls	r6, r7, #1
 801c230:	eb00 0247 	add.w	r2, r0, r7, lsl #1
 801c234:	4601      	mov	r1, r0
 801c236:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801c23a:	4291      	cmp	r1, r2
 801c23c:	d001      	beq.n	801c242 <EwNewStringUtf8+0x4a>
 801c23e:	2d00      	cmp	r5, #0
 801c240:	dc09      	bgt.n	801c256 <EwNewStringUtf8+0x5e>
 801c242:	2300      	movs	r3, #0
 801c244:	5383      	strh	r3, [r0, r6]
 801c246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c248:	2aef      	cmp	r2, #239	; 0xef
 801c24a:	bf99      	ittee	ls
 801c24c:	3b03      	subls	r3, #3
 801c24e:	3103      	addls	r1, #3
 801c250:	3b04      	subhi	r3, #4
 801c252:	3104      	addhi	r1, #4
 801c254:	e7e5      	b.n	801c222 <EwNewStringUtf8+0x2a>
 801c256:	7823      	ldrb	r3, [r4, #0]
 801c258:	2b7f      	cmp	r3, #127	; 0x7f
 801c25a:	d804      	bhi.n	801c266 <EwNewStringUtf8+0x6e>
 801c25c:	3401      	adds	r4, #1
 801c25e:	3d01      	subs	r5, #1
 801c260:	f821 3b02 	strh.w	r3, [r1], #2
 801c264:	e7e9      	b.n	801c23a <EwNewStringUtf8+0x42>
 801c266:	2bdf      	cmp	r3, #223	; 0xdf
 801c268:	d80c      	bhi.n	801c284 <EwNewStringUtf8+0x8c>
 801c26a:	2d01      	cmp	r5, #1
 801c26c:	d0e9      	beq.n	801c242 <EwNewStringUtf8+0x4a>
 801c26e:	f894 c001 	ldrb.w	ip, [r4, #1]
 801c272:	019b      	lsls	r3, r3, #6
 801c274:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801c278:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
 801c27c:	4463      	add	r3, ip
 801c27e:	3d02      	subs	r5, #2
 801c280:	3402      	adds	r4, #2
 801c282:	e7ed      	b.n	801c260 <EwNewStringUtf8+0x68>
 801c284:	2bef      	cmp	r3, #239	; 0xef
 801c286:	d810      	bhi.n	801c2aa <EwNewStringUtf8+0xb2>
 801c288:	2d02      	cmp	r5, #2
 801c28a:	dd0e      	ble.n	801c2aa <EwNewStringUtf8+0xb2>
 801c28c:	f894 c002 	ldrb.w	ip, [r4, #2]
 801c290:	031b      	lsls	r3, r3, #12
 801c292:	b29b      	uxth	r3, r3
 801c294:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
 801c298:	449c      	add	ip, r3
 801c29a:	7863      	ldrb	r3, [r4, #1]
 801c29c:	019b      	lsls	r3, r3, #6
 801c29e:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801c2a2:	4463      	add	r3, ip
 801c2a4:	3d03      	subs	r5, #3
 801c2a6:	3403      	adds	r4, #3
 801c2a8:	e7da      	b.n	801c260 <EwNewStringUtf8+0x68>
 801c2aa:	2d03      	cmp	r5, #3
 801c2ac:	ddc9      	ble.n	801c242 <EwNewStringUtf8+0x4a>
 801c2ae:	f894 c001 	ldrb.w	ip, [r4, #1]
 801c2b2:	f894 e003 	ldrb.w	lr, [r4, #3]
 801c2b6:	049b      	lsls	r3, r3, #18
 801c2b8:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
 801c2bc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 801c2c0:	f40c 3c7c 	and.w	ip, ip, #258048	; 0x3f000
 801c2c4:	ea4c 0c03 	orr.w	ip, ip, r3
 801c2c8:	78a3      	ldrb	r3, [r4, #2]
 801c2ca:	019b      	lsls	r3, r3, #6
 801c2cc:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801c2d0:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
 801c2d4:	4473      	add	r3, lr
 801c2d6:	4463      	add	r3, ip
 801c2d8:	42bb      	cmp	r3, r7
 801c2da:	f1a5 0504 	sub.w	r5, r5, #4
 801c2de:	bf28      	it	cs
 801c2e0:	463b      	movcs	r3, r7
 801c2e2:	3404      	adds	r4, #4
 801c2e4:	e7bc      	b.n	801c260 <EwNewStringUtf8+0x68>

0801c2e6 <EwNewStringUInt>:
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	2400      	movs	r4, #0
 801c2ea:	b0a4      	sub	sp, #144	; 0x90
 801c2ec:	4613      	mov	r3, r2
 801c2ee:	e9cd 4400 	strd	r4, r4, [sp]
 801c2f2:	460a      	mov	r2, r1
 801c2f4:	4601      	mov	r1, r0
 801c2f6:	a803      	add	r0, sp, #12
 801c2f8:	f7ff fc88 	bl	801bc0c <EwFormatUIntToAnsiString>
 801c2fc:	ab24      	add	r3, sp, #144	; 0x90
 801c2fe:	4418      	add	r0, r3
 801c300:	f800 4c84 	strb.w	r4, [r0, #-132]
 801c304:	a803      	add	r0, sp, #12
 801c306:	f7ff ff5e 	bl	801c1c6 <EwNewStringAnsi>
 801c30a:	b024      	add	sp, #144	; 0x90
 801c30c:	bd10      	pop	{r4, pc}

0801c30e <EwNewStringInt>:
 801c30e:	b510      	push	{r4, lr}
 801c310:	2400      	movs	r4, #0
 801c312:	b0a4      	sub	sp, #144	; 0x90
 801c314:	4613      	mov	r3, r2
 801c316:	e9cd 4400 	strd	r4, r4, [sp]
 801c31a:	460a      	mov	r2, r1
 801c31c:	4601      	mov	r1, r0
 801c31e:	a803      	add	r0, sp, #12
 801c320:	f7ff fcd5 	bl	801bcce <EwFormatIntToAnsiString>
 801c324:	ab24      	add	r3, sp, #144	; 0x90
 801c326:	4418      	add	r0, r3
 801c328:	f800 4c84 	strb.w	r4, [r0, #-132]
 801c32c:	a803      	add	r0, sp, #12
 801c32e:	f7ff ff4a 	bl	801c1c6 <EwNewStringAnsi>
 801c332:	b024      	add	sp, #144	; 0x90
 801c334:	bd10      	pop	{r4, pc}

0801c336 <EwNewStringUInt64>:
 801c336:	b510      	push	{r4, lr}
 801c338:	2400      	movs	r4, #0
 801c33a:	b0a6      	sub	sp, #152	; 0x98
 801c33c:	e9cd 2300 	strd	r2, r3, [sp]
 801c340:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801c344:	4602      	mov	r2, r0
 801c346:	460b      	mov	r3, r1
 801c348:	a805      	add	r0, sp, #20
 801c34a:	f7ff fd2e 	bl	801bdaa <EwFormatUInt64ToAnsiString>
 801c34e:	ab26      	add	r3, sp, #152	; 0x98
 801c350:	4418      	add	r0, r3
 801c352:	f800 4c84 	strb.w	r4, [r0, #-132]
 801c356:	a805      	add	r0, sp, #20
 801c358:	f7ff ff35 	bl	801c1c6 <EwNewStringAnsi>
 801c35c:	b026      	add	sp, #152	; 0x98
 801c35e:	bd10      	pop	{r4, pc}

0801c360 <EwNewStringInt64>:
 801c360:	b510      	push	{r4, lr}
 801c362:	2400      	movs	r4, #0
 801c364:	b0a6      	sub	sp, #152	; 0x98
 801c366:	e9cd 2300 	strd	r2, r3, [sp]
 801c36a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801c36e:	4602      	mov	r2, r0
 801c370:	460b      	mov	r3, r1
 801c372:	a805      	add	r0, sp, #20
 801c374:	f7ff fda1 	bl	801beba <EwFormatInt64ToAnsiString>
 801c378:	ab26      	add	r3, sp, #152	; 0x98
 801c37a:	4418      	add	r0, r3
 801c37c:	f800 4c84 	strb.w	r4, [r0, #-132]
 801c380:	a805      	add	r0, sp, #20
 801c382:	f7ff ff20 	bl	801c1c6 <EwNewStringAnsi>
 801c386:	b026      	add	sp, #152	; 0x98
 801c388:	bd10      	pop	{r4, pc}

0801c38a <EwNewStringFloat>:
 801c38a:	b500      	push	{lr}
 801c38c:	1e0a      	subs	r2, r1, #0
 801c38e:	b0a3      	sub	sp, #140	; 0x8c
 801c390:	bfb8      	it	lt
 801c392:	f06f 0205 	mvnlt.w	r2, #5
 801c396:	4601      	mov	r1, r0
 801c398:	2300      	movs	r3, #0
 801c39a:	a801      	add	r0, sp, #4
 801c39c:	f7ff fe24 	bl	801bfe8 <EwFormatFloatToAnsiString>
 801c3a0:	b928      	cbnz	r0, 801c3ae <EwNewStringFloat+0x24>
 801c3a2:	4806      	ldr	r0, [pc, #24]	; (801c3bc <EwNewStringFloat+0x32>)
 801c3a4:	f7ff ff0f 	bl	801c1c6 <EwNewStringAnsi>
 801c3a8:	b023      	add	sp, #140	; 0x8c
 801c3aa:	f85d fb04 	ldr.w	pc, [sp], #4
 801c3ae:	ab22      	add	r3, sp, #136	; 0x88
 801c3b0:	4418      	add	r0, r3
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	f800 3c84 	strb.w	r3, [r0, #-132]
 801c3b8:	a801      	add	r0, sp, #4
 801c3ba:	e7f3      	b.n	801c3a4 <EwNewStringFloat+0x1a>
 801c3bc:	08039b95 	.word	0x08039b95

0801c3c0 <EwNewStringChar>:
 801c3c0:	b538      	push	{r3, r4, r5, lr}
 801c3c2:	4605      	mov	r5, r0
 801c3c4:	4608      	mov	r0, r1
 801c3c6:	460c      	mov	r4, r1
 801c3c8:	f7ff f9de 	bl	801b788 <EwNotifyObservers+0xa0>
 801c3cc:	b130      	cbz	r0, 801c3dc <EwNewStringChar+0x1c>
 801c3ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	42a3      	cmp	r3, r4
 801c3d6:	d102      	bne.n	801c3de <EwNewStringChar+0x1e>
 801c3d8:	2200      	movs	r2, #0
 801c3da:	801a      	strh	r2, [r3, #0]
 801c3dc:	bd38      	pop	{r3, r4, r5, pc}
 801c3de:	f823 5b02 	strh.w	r5, [r3], #2
 801c3e2:	e7f7      	b.n	801c3d4 <EwNewStringChar+0x14>

0801c3e4 <EwCompString>:
 801c3e4:	b538      	push	{r3, r4, r5, lr}
 801c3e6:	460d      	mov	r5, r1
 801c3e8:	f7ff fac0 	bl	801b96c <EwNotifyObservers+0x284>
 801c3ec:	4604      	mov	r4, r0
 801c3ee:	4628      	mov	r0, r5
 801c3f0:	f7ff fabc 	bl	801b96c <EwNotifyObservers+0x284>
 801c3f4:	4b0d      	ldr	r3, [pc, #52]	; (801c42c <EwCompString+0x48>)
 801c3f6:	2c00      	cmp	r4, #0
 801c3f8:	bf08      	it	eq
 801c3fa:	461c      	moveq	r4, r3
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	bf18      	it	ne
 801c400:	4603      	movne	r3, r0
 801c402:	3c02      	subs	r4, #2
 801c404:	3b02      	subs	r3, #2
 801c406:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 801c40a:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 801c40e:	428a      	cmp	r2, r1
 801c410:	d101      	bne.n	801c416 <EwCompString+0x32>
 801c412:	2a00      	cmp	r2, #0
 801c414:	d1f7      	bne.n	801c406 <EwCompString+0x22>
 801c416:	1a52      	subs	r2, r2, r1
 801c418:	2a00      	cmp	r2, #0
 801c41a:	db03      	blt.n	801c424 <EwCompString+0x40>
 801c41c:	bf14      	ite	ne
 801c41e:	2001      	movne	r0, #1
 801c420:	2000      	moveq	r0, #0
 801c422:	bd38      	pop	{r3, r4, r5, pc}
 801c424:	f04f 30ff 	mov.w	r0, #4294967295
 801c428:	e7fb      	b.n	801c422 <EwCompString+0x3e>
 801c42a:	bf00      	nop
 801c42c:	08036dd4 	.word	0x08036dd4

0801c430 <EwLoadString>:
 801c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c434:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 801c630 <EwLoadString+0x200>
 801c438:	8883      	ldrh	r3, [r0, #4]
 801c43a:	f8db 7000 	ldr.w	r7, [fp]
 801c43e:	6806      	ldr	r6, [r0, #0]
 801c440:	b085      	sub	sp, #20
 801c442:	9301      	str	r3, [sp, #4]
 801c444:	b1b7      	cbz	r7, 801c474 <EwLoadString+0x44>
 801c446:	4b72      	ldr	r3, [pc, #456]	; (801c610 <EwLoadString+0x1e0>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	42b3      	cmp	r3, r6
 801c44c:	d814      	bhi.n	801c478 <EwLoadString+0x48>
 801c44e:	4b71      	ldr	r3, [pc, #452]	; (801c614 <EwLoadString+0x1e4>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	42b3      	cmp	r3, r6
 801c454:	4630      	mov	r0, r6
 801c456:	d310      	bcc.n	801c47a <EwLoadString+0x4a>
 801c458:	47b8      	blx	r7
 801c45a:	2701      	movs	r7, #1
 801c45c:	6803      	ldr	r3, [r0, #0]
 801c45e:	9302      	str	r3, [sp, #8]
 801c460:	b96f      	cbnz	r7, 801c47e <EwLoadString+0x4e>
 801c462:	3301      	adds	r3, #1
 801c464:	d11e      	bne.n	801c4a4 <EwLoadString+0x74>
 801c466:	9b01      	ldr	r3, [sp, #4]
 801c468:	eb06 0543 	add.w	r5, r6, r3, lsl #1
 801c46c:	4628      	mov	r0, r5
 801c46e:	b005      	add	sp, #20
 801c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c474:	4630      	mov	r0, r6
 801c476:	e7f1      	b.n	801c45c <EwLoadString+0x2c>
 801c478:	4630      	mov	r0, r6
 801c47a:	2700      	movs	r7, #0
 801c47c:	e7ee      	b.n	801c45c <EwLoadString+0x2c>
 801c47e:	9b02      	ldr	r3, [sp, #8]
 801c480:	3301      	adds	r3, #1
 801c482:	d10f      	bne.n	801c4a4 <EwLoadString+0x74>
 801c484:	9b01      	ldr	r3, [sp, #4]
 801c486:	005b      	lsls	r3, r3, #1
 801c488:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c634 <EwLoadString+0x204>
 801c48c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c490:	4433      	add	r3, r6
 801c492:	b15d      	cbz	r5, 801c4ac <EwLoadString+0x7c>
 801c494:	68ea      	ldr	r2, [r5, #12]
 801c496:	4293      	cmp	r3, r2
 801c498:	d106      	bne.n	801c4a8 <EwLoadString+0x78>
 801c49a:	4628      	mov	r0, r5
 801c49c:	f7ff f95e 	bl	801b75c <EwNotifyObservers+0x74>
 801c4a0:	462c      	mov	r4, r5
 801c4a2:	e047      	b.n	801c534 <EwLoadString+0x104>
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	e7ef      	b.n	801c488 <EwLoadString+0x58>
 801c4a8:	682d      	ldr	r5, [r5, #0]
 801c4aa:	e7f2      	b.n	801c492 <EwLoadString+0x62>
 801c4ac:	9b01      	ldr	r3, [sp, #4]
 801c4ae:	eb06 0943 	add.w	r9, r6, r3, lsl #1
 801c4b2:	9b02      	ldr	r3, [sp, #8]
 801c4b4:	3301      	adds	r3, #1
 801c4b6:	d04e      	beq.n	801c556 <EwLoadString+0x126>
 801c4b8:	2f00      	cmp	r7, #0
 801c4ba:	d145      	bne.n	801c548 <EwLoadString+0x118>
 801c4bc:	f8d6 a000 	ldr.w	sl, [r6]
 801c4c0:	f10a 0310 	add.w	r3, sl, #16
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	9303      	str	r3, [sp, #12]
 801c4c8:	f00d f952 	bl	8029770 <EwAlloc>
 801c4cc:	4604      	mov	r4, r0
 801c4ce:	2800      	cmp	r0, #0
 801c4d0:	f000 8081 	beq.w	801c5d6 <EwLoadString+0x1a6>
 801c4d4:	9b03      	ldr	r3, [sp, #12]
 801c4d6:	6083      	str	r3, [r0, #8]
 801c4d8:	f100 0510 	add.w	r5, r0, #16
 801c4dc:	2300      	movs	r3, #0
 801c4de:	e9c0 3300 	strd	r3, r3, [r0]
 801c4e2:	461a      	mov	r2, r3
 801c4e4:	60c6      	str	r6, [r0, #12]
 801c4e6:	4629      	mov	r1, r5
 801c4e8:	1d30      	adds	r0, r6, #4
 801c4ea:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 801c4ee:	f7fe f89b 	bl	801a628 <EwDecompress>
 801c4f2:	ea4f 016a 	mov.w	r1, sl, asr #1
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	f7fe f9c0 	bl	801a87c <EwAdaptByteOrder2>
 801c4fc:	4b46      	ldr	r3, [pc, #280]	; (801c618 <EwLoadString+0x1e8>)
 801c4fe:	9a03      	ldr	r2, [sp, #12]
 801c500:	6819      	ldr	r1, [r3, #0]
 801c502:	4411      	add	r1, r2
 801c504:	4620      	mov	r0, r4
 801c506:	6019      	str	r1, [r3, #0]
 801c508:	f7ff f904 	bl	801b714 <EwNotifyObservers+0x2c>
 801c50c:	4a43      	ldr	r2, [pc, #268]	; (801c61c <EwLoadString+0x1ec>)
 801c50e:	6813      	ldr	r3, [r2, #0]
 801c510:	4418      	add	r0, r3
 801c512:	4b43      	ldr	r3, [pc, #268]	; (801c620 <EwLoadString+0x1f0>)
 801c514:	6010      	str	r0, [r2, #0]
 801c516:	681a      	ldr	r2, [r3, #0]
 801c518:	4291      	cmp	r1, r2
 801c51a:	bfc8      	it	gt
 801c51c:	6019      	strgt	r1, [r3, #0]
 801c51e:	4b41      	ldr	r3, [pc, #260]	; (801c624 <EwLoadString+0x1f4>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	4419      	add	r1, r3
 801c524:	4b40      	ldr	r3, [pc, #256]	; (801c628 <EwLoadString+0x1f8>)
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	4419      	add	r1, r3
 801c52a:	4b40      	ldr	r3, [pc, #256]	; (801c62c <EwLoadString+0x1fc>)
 801c52c:	681a      	ldr	r2, [r3, #0]
 801c52e:	4291      	cmp	r1, r2
 801c530:	dd00      	ble.n	801c534 <EwLoadString+0x104>
 801c532:	6019      	str	r1, [r3, #0]
 801c534:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c538:	6023      	str	r3, [r4, #0]
 801c53a:	2200      	movs	r2, #0
 801c53c:	6062      	str	r2, [r4, #4]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d153      	bne.n	801c5ea <EwLoadString+0x1ba>
 801c542:	f8c8 4000 	str.w	r4, [r8]
 801c546:	e051      	b.n	801c5ec <EwLoadString+0x1bc>
 801c548:	f8db 3000 	ldr.w	r3, [fp]
 801c54c:	4630      	mov	r0, r6
 801c54e:	4798      	blx	r3
 801c550:	f8d0 a000 	ldr.w	sl, [r0]
 801c554:	e7b4      	b.n	801c4c0 <EwLoadString+0x90>
 801c556:	46ca      	mov	sl, r9
 801c558:	f1b9 0f00 	cmp.w	r9, #0
 801c55c:	d009      	beq.n	801c572 <EwLoadString+0x142>
 801c55e:	f8db 3000 	ldr.w	r3, [fp]
 801c562:	4650      	mov	r0, sl
 801c564:	4798      	blx	r3
 801c566:	8803      	ldrh	r3, [r0, #0]
 801c568:	bb33      	cbnz	r3, 801c5b8 <EwLoadString+0x188>
 801c56a:	ebaa 0a09 	sub.w	sl, sl, r9
 801c56e:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 801c572:	f10a 010c 	add.w	r1, sl, #12
 801c576:	004a      	lsls	r2, r1, #1
 801c578:	4610      	mov	r0, r2
 801c57a:	9203      	str	r2, [sp, #12]
 801c57c:	f00d f8f8 	bl	8029770 <EwAlloc>
 801c580:	4604      	mov	r4, r0
 801c582:	b340      	cbz	r0, 801c5d6 <EwLoadString+0x1a6>
 801c584:	f10a 0103 	add.w	r1, sl, #3
 801c588:	8201      	strh	r1, [r0, #16]
 801c58a:	f244 5157 	movw	r1, #17751	; 0x4557
 801c58e:	8241      	strh	r1, [r0, #18]
 801c590:	f10a 0102 	add.w	r1, sl, #2
 801c594:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c598:	2600      	movs	r6, #0
 801c59a:	9a03      	ldr	r2, [sp, #12]
 801c59c:	f8c0 900c 	str.w	r9, [r0, #12]
 801c5a0:	e9c0 6600 	strd	r6, r6, [r0]
 801c5a4:	6082      	str	r2, [r0, #8]
 801c5a6:	f100 0512 	add.w	r5, r0, #18
 801c5aa:	820e      	strh	r6, [r1, #16]
 801c5ac:	824e      	strh	r6, [r1, #18]
 801c5ae:	4556      	cmp	r6, sl
 801c5b0:	db05      	blt.n	801c5be <EwLoadString+0x18e>
 801c5b2:	4b19      	ldr	r3, [pc, #100]	; (801c618 <EwLoadString+0x1e8>)
 801c5b4:	6819      	ldr	r1, [r3, #0]
 801c5b6:	e7a4      	b.n	801c502 <EwLoadString+0xd2>
 801c5b8:	f10a 0a02 	add.w	sl, sl, #2
 801c5bc:	e7cf      	b.n	801c55e <EwLoadString+0x12e>
 801c5be:	eb09 0046 	add.w	r0, r9, r6, lsl #1
 801c5c2:	f8db 1000 	ldr.w	r1, [fp]
 801c5c6:	9203      	str	r2, [sp, #12]
 801c5c8:	4788      	blx	r1
 801c5ca:	8803      	ldrh	r3, [r0, #0]
 801c5cc:	f825 3f02 	strh.w	r3, [r5, #2]!
 801c5d0:	9a03      	ldr	r2, [sp, #12]
 801c5d2:	3601      	adds	r6, #1
 801c5d4:	e7eb      	b.n	801c5ae <EwLoadString+0x17e>
 801c5d6:	2002      	movs	r0, #2
 801c5d8:	f7fd fb16 	bl	8019c08 <EwImmediateReclaimMemory>
 801c5dc:	2800      	cmp	r0, #0
 801c5de:	f47f af68 	bne.w	801c4b2 <EwLoadString+0x82>
 801c5e2:	2002      	movs	r0, #2
 801c5e4:	f7fc fb60 	bl	8018ca8 <EwError>
 801c5e8:	e740      	b.n	801c46c <EwLoadString+0x3c>
 801c5ea:	605c      	str	r4, [r3, #4]
 801c5ec:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801c5f0:	68a3      	ldr	r3, [r4, #8]
 801c5f2:	f8c8 4004 	str.w	r4, [r8, #4]
 801c5f6:	4413      	add	r3, r2
 801c5f8:	f8c8 3008 	str.w	r3, [r8, #8]
 801c5fc:	9b02      	ldr	r3, [sp, #8]
 801c5fe:	3301      	adds	r3, #1
 801c600:	bf16      	itet	ne
 801c602:	9b01      	ldrne	r3, [sp, #4]
 801c604:	2504      	moveq	r5, #4
 801c606:	005d      	lslne	r5, r3, #1
 801c608:	3510      	adds	r5, #16
 801c60a:	4425      	add	r5, r4
 801c60c:	e72e      	b.n	801c46c <EwLoadString+0x3c>
 801c60e:	bf00      	nop
 801c610:	2000032c 	.word	0x2000032c
 801c614:	20000330 	.word	0x20000330
 801c618:	200002e4 	.word	0x200002e4
 801c61c:	20000300 	.word	0x20000300
 801c620:	200002fc 	.word	0x200002fc
 801c624:	200002d8 	.word	0x200002d8
 801c628:	200002e8 	.word	0x200002e8
 801c62c:	200002ec 	.word	0x200002ec
 801c630:	20000328 	.word	0x20000328
 801c634:	2000035c 	.word	0x2000035c

0801c638 <EwShareString>:
 801c638:	b510      	push	{r4, lr}
 801c63a:	4604      	mov	r4, r0
 801c63c:	f7ff f996 	bl	801b96c <EwNotifyObservers+0x284>
 801c640:	b14c      	cbz	r4, 801c656 <EwShareString+0x1e>
 801c642:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 801c646:	f244 6377 	movw	r3, #18039	; 0x4677
 801c64a:	429a      	cmp	r2, r3
 801c64c:	bf04      	itt	eq
 801c64e:	f244 5357 	movweq	r3, #17751	; 0x4557
 801c652:	f824 3c02 	strheq.w	r3, [r4, #-2]
 801c656:	4620      	mov	r0, r4
 801c658:	bd10      	pop	{r4, pc}

0801c65a <EwConcatString>:
 801c65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c65e:	460e      	mov	r6, r1
 801c660:	4680      	mov	r8, r0
 801c662:	f7ff f983 	bl	801b96c <EwNotifyObservers+0x284>
 801c666:	f7ff f965 	bl	801b934 <EwNotifyObservers+0x24c>
 801c66a:	4605      	mov	r5, r0
 801c66c:	4630      	mov	r0, r6
 801c66e:	f7ff f97d 	bl	801b96c <EwNotifyObservers+0x284>
 801c672:	f7ff f95f 	bl	801b934 <EwNotifyObservers+0x24c>
 801c676:	4607      	mov	r7, r0
 801c678:	b195      	cbz	r5, 801c6a0 <EwConcatString+0x46>
 801c67a:	b198      	cbz	r0, 801c6a4 <EwConcatString+0x4a>
 801c67c:	1828      	adds	r0, r5, r0
 801c67e:	f7ff f883 	bl	801b788 <EwNotifyObservers+0xa0>
 801c682:	4604      	mov	r4, r0
 801c684:	b148      	cbz	r0, 801c69a <EwConcatString+0x40>
 801c686:	462a      	mov	r2, r5
 801c688:	4641      	mov	r1, r8
 801c68a:	f7ff f95d 	bl	801b948 <EwNotifyObservers+0x260>
 801c68e:	463a      	mov	r2, r7
 801c690:	4631      	mov	r1, r6
 801c692:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 801c696:	f7ff f957 	bl	801b948 <EwNotifyObservers+0x260>
 801c69a:	4620      	mov	r0, r4
 801c69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6a0:	4634      	mov	r4, r6
 801c6a2:	e7fa      	b.n	801c69a <EwConcatString+0x40>
 801c6a4:	4644      	mov	r4, r8
 801c6a6:	e7f8      	b.n	801c69a <EwConcatString+0x40>

0801c6a8 <EwConcatStringChar>:
 801c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6aa:	460e      	mov	r6, r1
 801c6ac:	4605      	mov	r5, r0
 801c6ae:	f7ff f95d 	bl	801b96c <EwNotifyObservers+0x284>
 801c6b2:	f7ff f93f 	bl	801b934 <EwNotifyObservers+0x24c>
 801c6b6:	4607      	mov	r7, r0
 801c6b8:	b186      	cbz	r6, 801c6dc <EwConcatStringChar+0x34>
 801c6ba:	3001      	adds	r0, #1
 801c6bc:	f7ff f864 	bl	801b788 <EwNotifyObservers+0xa0>
 801c6c0:	4604      	mov	r4, r0
 801c6c2:	b148      	cbz	r0, 801c6d8 <EwConcatStringChar+0x30>
 801c6c4:	463a      	mov	r2, r7
 801c6c6:	4629      	mov	r1, r5
 801c6c8:	f7ff f93e 	bl	801b948 <EwNotifyObservers+0x260>
 801c6cc:	eb00 0247 	add.w	r2, r0, r7, lsl #1
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	f820 6017 	strh.w	r6, [r0, r7, lsl #1]
 801c6d6:	8053      	strh	r3, [r2, #2]
 801c6d8:	4620      	mov	r0, r4
 801c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6dc:	462c      	mov	r4, r5
 801c6de:	e7fb      	b.n	801c6d8 <EwConcatStringChar+0x30>

0801c6e0 <EwConcatCharString>:
 801c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6e2:	4607      	mov	r7, r0
 801c6e4:	4608      	mov	r0, r1
 801c6e6:	460d      	mov	r5, r1
 801c6e8:	f7ff f940 	bl	801b96c <EwNotifyObservers+0x284>
 801c6ec:	f7ff f922 	bl	801b934 <EwNotifyObservers+0x24c>
 801c6f0:	4606      	mov	r6, r0
 801c6f2:	b177      	cbz	r7, 801c712 <EwConcatCharString+0x32>
 801c6f4:	3001      	adds	r0, #1
 801c6f6:	f7ff f847 	bl	801b788 <EwNotifyObservers+0xa0>
 801c6fa:	4604      	mov	r4, r0
 801c6fc:	b138      	cbz	r0, 801c70e <EwConcatCharString+0x2e>
 801c6fe:	2300      	movs	r3, #0
 801c700:	8007      	strh	r7, [r0, #0]
 801c702:	4632      	mov	r2, r6
 801c704:	f820 3f02 	strh.w	r3, [r0, #2]!
 801c708:	4629      	mov	r1, r5
 801c70a:	f7ff f91d 	bl	801b948 <EwNotifyObservers+0x260>
 801c70e:	4620      	mov	r0, r4
 801c710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c712:	462c      	mov	r4, r5
 801c714:	e7fb      	b.n	801c70e <EwConcatCharString+0x2e>

0801c716 <EwGetStringChar>:
 801c716:	b538      	push	{r3, r4, r5, lr}
 801c718:	460c      	mov	r4, r1
 801c71a:	4605      	mov	r5, r0
 801c71c:	f7ff f926 	bl	801b96c <EwNotifyObservers+0x284>
 801c720:	4621      	mov	r1, r4
 801c722:	f7ff f801 	bl	801b728 <EwNotifyObservers+0x40>
 801c726:	b108      	cbz	r0, 801c72c <EwGetStringChar+0x16>
 801c728:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 801c72c:	bd38      	pop	{r3, r4, r5, pc}

0801c72e <EwSetStringChar>:
 801c72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c730:	460d      	mov	r5, r1
 801c732:	4604      	mov	r4, r0
 801c734:	4617      	mov	r7, r2
 801c736:	f7ff f919 	bl	801b96c <EwNotifyObservers+0x284>
 801c73a:	4629      	mov	r1, r5
 801c73c:	f7fe fff4 	bl	801b728 <EwNotifyObservers+0x40>
 801c740:	4606      	mov	r6, r0
 801c742:	b940      	cbnz	r0, 801c756 <EwSetStringChar+0x28>
 801c744:	f44f 7097 	mov.w	r0, #302	; 0x12e
 801c748:	f7fc faae 	bl	8018ca8 <EwError>
 801c74c:	f00d f814 	bl	8029778 <EwPanic>
 801c750:	4634      	mov	r4, r6
 801c752:	4620      	mov	r0, r4
 801c754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c756:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 801c75a:	f244 6377 	movw	r3, #18039	; 0x4677
 801c75e:	429a      	cmp	r2, r3
 801c760:	d003      	beq.n	801c76a <EwSetStringChar+0x3c>
 801c762:	4620      	mov	r0, r4
 801c764:	f7ff fd21 	bl	801c1aa <EwNewString>
 801c768:	4604      	mov	r4, r0
 801c76a:	f824 7015 	strh.w	r7, [r4, r5, lsl #1]
 801c76e:	e7f0      	b.n	801c752 <EwSetStringChar+0x24>

0801c770 <EwGetStringLength>:
 801c770:	b508      	push	{r3, lr}
 801c772:	f7ff f8fb 	bl	801b96c <EwNotifyObservers+0x284>
 801c776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c77a:	f7ff b8db 	b.w	801b934 <EwNotifyObservers+0x24c>

0801c77e <EwIsStringEmpty>:
 801c77e:	b508      	push	{r3, lr}
 801c780:	b130      	cbz	r0, 801c790 <EwIsStringEmpty+0x12>
 801c782:	f7ff f8f3 	bl	801b96c <EwNotifyObservers+0x284>
 801c786:	8800      	ldrh	r0, [r0, #0]
 801c788:	fab0 f080 	clz	r0, r0
 801c78c:	0940      	lsrs	r0, r0, #5
 801c78e:	bd08      	pop	{r3, pc}
 801c790:	2001      	movs	r0, #1
 801c792:	e7fc      	b.n	801c78e <EwIsStringEmpty+0x10>

0801c794 <EwGetStringUpper>:
 801c794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c796:	9001      	str	r0, [sp, #4]
 801c798:	f7ff f8e8 	bl	801b96c <EwNotifyObservers+0x284>
 801c79c:	f7ff f8ca 	bl	801b934 <EwNotifyObservers+0x24c>
 801c7a0:	9000      	str	r0, [sp, #0]
 801c7a2:	f7fe fff1 	bl	801b788 <EwNotifyObservers+0xa0>
 801c7a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c7aa:	4604      	mov	r4, r0
 801c7ac:	f7ff f8cc 	bl	801b948 <EwNotifyObservers+0x260>
 801c7b0:	b118      	cbz	r0, 801c7ba <EwGetStringUpper+0x26>
 801c7b2:	1e85      	subs	r5, r0, #2
 801c7b4:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801c7b8:	b910      	cbnz	r0, 801c7c0 <EwGetStringUpper+0x2c>
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	b003      	add	sp, #12
 801c7be:	bd30      	pop	{r4, r5, pc}
 801c7c0:	f7ff f82a 	bl	801b818 <EwNotifyObservers+0x130>
 801c7c4:	8028      	strh	r0, [r5, #0]
 801c7c6:	e7f5      	b.n	801c7b4 <EwGetStringUpper+0x20>

0801c7c8 <EwGetStringLower>:
 801c7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c7ca:	9001      	str	r0, [sp, #4]
 801c7cc:	f7ff f8ce 	bl	801b96c <EwNotifyObservers+0x284>
 801c7d0:	f7ff f8b0 	bl	801b934 <EwNotifyObservers+0x24c>
 801c7d4:	9000      	str	r0, [sp, #0]
 801c7d6:	f7fe ffd7 	bl	801b788 <EwNotifyObservers+0xa0>
 801c7da:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c7de:	4604      	mov	r4, r0
 801c7e0:	f7ff f8b2 	bl	801b948 <EwNotifyObservers+0x260>
 801c7e4:	b118      	cbz	r0, 801c7ee <EwGetStringLower+0x26>
 801c7e6:	1e85      	subs	r5, r0, #2
 801c7e8:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801c7ec:	b910      	cbnz	r0, 801c7f4 <EwGetStringLower+0x2c>
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	b003      	add	sp, #12
 801c7f2:	bd30      	pop	{r4, r5, pc}
 801c7f4:	f7ff f8ec 	bl	801b9d0 <ToLower>
 801c7f8:	8028      	strh	r0, [r5, #0]
 801c7fa:	e7f5      	b.n	801c7e8 <EwGetStringLower+0x20>

0801c7fc <EwStringLeft>:
 801c7fc:	b570      	push	{r4, r5, r6, lr}
 801c7fe:	460e      	mov	r6, r1
 801c800:	4604      	mov	r4, r0
 801c802:	f7ff f8b3 	bl	801b96c <EwNotifyObservers+0x284>
 801c806:	f7ff f895 	bl	801b934 <EwNotifyObservers+0x24c>
 801c80a:	42b0      	cmp	r0, r6
 801c80c:	4605      	mov	r5, r0
 801c80e:	bfa8      	it	ge
 801c810:	4635      	movge	r5, r6
 801c812:	42b0      	cmp	r0, r6
 801c814:	dd08      	ble.n	801c828 <EwStringLeft+0x2c>
 801c816:	b14d      	cbz	r5, 801c82c <EwStringLeft+0x30>
 801c818:	4628      	mov	r0, r5
 801c81a:	f7fe ffb5 	bl	801b788 <EwNotifyObservers+0xa0>
 801c81e:	4621      	mov	r1, r4
 801c820:	462a      	mov	r2, r5
 801c822:	f7ff f891 	bl	801b948 <EwNotifyObservers+0x260>
 801c826:	4604      	mov	r4, r0
 801c828:	4620      	mov	r0, r4
 801c82a:	bd70      	pop	{r4, r5, r6, pc}
 801c82c:	462c      	mov	r4, r5
 801c82e:	e7fb      	b.n	801c828 <EwStringLeft+0x2c>

0801c830 <EwStringRight>:
 801c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c832:	460f      	mov	r7, r1
 801c834:	4605      	mov	r5, r0
 801c836:	f7ff f899 	bl	801b96c <EwNotifyObservers+0x284>
 801c83a:	f7ff f87b 	bl	801b934 <EwNotifyObservers+0x24c>
 801c83e:	42b8      	cmp	r0, r7
 801c840:	4606      	mov	r6, r0
 801c842:	bfa8      	it	ge
 801c844:	463e      	movge	r6, r7
 801c846:	42b8      	cmp	r0, r7
 801c848:	4604      	mov	r4, r0
 801c84a:	dd0a      	ble.n	801c862 <EwStringRight+0x32>
 801c84c:	b15e      	cbz	r6, 801c866 <EwStringRight+0x36>
 801c84e:	4630      	mov	r0, r6
 801c850:	f7fe ff9a 	bl	801b788 <EwNotifyObservers+0xa0>
 801c854:	1ba1      	subs	r1, r4, r6
 801c856:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 801c85a:	4632      	mov	r2, r6
 801c85c:	f7ff f874 	bl	801b948 <EwNotifyObservers+0x260>
 801c860:	4605      	mov	r5, r0
 801c862:	4628      	mov	r0, r5
 801c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c866:	4635      	mov	r5, r6
 801c868:	e7fb      	b.n	801c862 <EwStringRight+0x32>

0801c86a <EwStringMiddle>:
 801c86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c86c:	460d      	mov	r5, r1
 801c86e:	4614      	mov	r4, r2
 801c870:	4606      	mov	r6, r0
 801c872:	f7ff f87b 	bl	801b96c <EwNotifyObservers+0x284>
 801c876:	f7ff f85d 	bl	801b934 <EwNotifyObservers+0x24c>
 801c87a:	2d00      	cmp	r5, #0
 801c87c:	bfbc      	itt	lt
 801c87e:	1964      	addlt	r4, r4, r5
 801c880:	2500      	movlt	r5, #0
 801c882:	4285      	cmp	r5, r0
 801c884:	bfa8      	it	ge
 801c886:	2400      	movge	r4, #0
 801c888:	192b      	adds	r3, r5, r4
 801c88a:	4283      	cmp	r3, r0
 801c88c:	bfc8      	it	gt
 801c88e:	1b44      	subgt	r4, r0, r5
 801c890:	4284      	cmp	r4, r0
 801c892:	d009      	beq.n	801c8a8 <EwStringMiddle+0x3e>
 801c894:	b154      	cbz	r4, 801c8ac <EwStringMiddle+0x42>
 801c896:	4620      	mov	r0, r4
 801c898:	f7fe ff76 	bl	801b788 <EwNotifyObservers+0xa0>
 801c89c:	eb06 0145 	add.w	r1, r6, r5, lsl #1
 801c8a0:	4622      	mov	r2, r4
 801c8a2:	f7ff f851 	bl	801b948 <EwNotifyObservers+0x260>
 801c8a6:	4606      	mov	r6, r0
 801c8a8:	4630      	mov	r0, r6
 801c8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8ac:	4626      	mov	r6, r4
 801c8ae:	e7fb      	b.n	801c8a8 <EwStringMiddle+0x3e>

0801c8b0 <EwStringInsert>:
 801c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8b4:	460e      	mov	r6, r1
 801c8b6:	4614      	mov	r4, r2
 801c8b8:	4607      	mov	r7, r0
 801c8ba:	f7ff f857 	bl	801b96c <EwNotifyObservers+0x284>
 801c8be:	f7ff f839 	bl	801b934 <EwNotifyObservers+0x24c>
 801c8c2:	4680      	mov	r8, r0
 801c8c4:	4630      	mov	r0, r6
 801c8c6:	f7ff f851 	bl	801b96c <EwNotifyObservers+0x284>
 801c8ca:	f7ff f833 	bl	801b934 <EwNotifyObservers+0x24c>
 801c8ce:	4681      	mov	r9, r0
 801c8d0:	b320      	cbz	r0, 801c91c <EwStringInsert+0x6c>
 801c8d2:	f1b8 0f00 	cmp.w	r8, #0
 801c8d6:	d023      	beq.n	801c920 <EwStringInsert+0x70>
 801c8d8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801c8dc:	4544      	cmp	r4, r8
 801c8de:	4440      	add	r0, r8
 801c8e0:	bfa8      	it	ge
 801c8e2:	4644      	movge	r4, r8
 801c8e4:	f7fe ff50 	bl	801b788 <EwNotifyObservers+0xa0>
 801c8e8:	4605      	mov	r5, r0
 801c8ea:	b1a0      	cbz	r0, 801c916 <EwStringInsert+0x66>
 801c8ec:	4622      	mov	r2, r4
 801c8ee:	4639      	mov	r1, r7
 801c8f0:	f7ff f82a 	bl	801b948 <EwNotifyObservers+0x260>
 801c8f4:	464a      	mov	r2, r9
 801c8f6:	4631      	mov	r1, r6
 801c8f8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801c8fc:	f7ff f824 	bl	801b948 <EwNotifyObservers+0x260>
 801c900:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801c904:	1910      	adds	r0, r2, r4
 801c906:	eb07 010a 	add.w	r1, r7, sl
 801c90a:	eba8 0204 	sub.w	r2, r8, r4
 801c90e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801c912:	f7ff f819 	bl	801b948 <EwNotifyObservers+0x260>
 801c916:	4628      	mov	r0, r5
 801c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c91c:	463d      	mov	r5, r7
 801c91e:	e7fa      	b.n	801c916 <EwStringInsert+0x66>
 801c920:	4635      	mov	r5, r6
 801c922:	e7f8      	b.n	801c916 <EwStringInsert+0x66>

0801c924 <EwStringRemove>:
 801c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c928:	460c      	mov	r4, r1
 801c92a:	4615      	mov	r5, r2
 801c92c:	4680      	mov	r8, r0
 801c92e:	f7ff f81d 	bl	801b96c <EwNotifyObservers+0x284>
 801c932:	f7fe ffff 	bl	801b934 <EwNotifyObservers+0x24c>
 801c936:	1963      	adds	r3, r4, r5
 801c938:	2c00      	cmp	r4, #0
 801c93a:	bfbc      	itt	lt
 801c93c:	461d      	movlt	r5, r3
 801c93e:	2400      	movlt	r4, #0
 801c940:	4298      	cmp	r0, r3
 801c942:	bfb8      	it	lt
 801c944:	1b05      	sublt	r5, r0, r4
 801c946:	2d00      	cmp	r5, #0
 801c948:	4606      	mov	r6, r0
 801c94a:	dd16      	ble.n	801c97a <EwStringRemove+0x56>
 801c94c:	4285      	cmp	r5, r0
 801c94e:	d016      	beq.n	801c97e <EwStringRemove+0x5a>
 801c950:	1b40      	subs	r0, r0, r5
 801c952:	f7fe ff19 	bl	801b788 <EwNotifyObservers+0xa0>
 801c956:	4607      	mov	r7, r0
 801c958:	b160      	cbz	r0, 801c974 <EwStringRemove+0x50>
 801c95a:	4622      	mov	r2, r4
 801c95c:	4641      	mov	r1, r8
 801c95e:	f7fe fff3 	bl	801b948 <EwNotifyObservers+0x260>
 801c962:	1b32      	subs	r2, r6, r4
 801c964:	1929      	adds	r1, r5, r4
 801c966:	1b52      	subs	r2, r2, r5
 801c968:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 801c96c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801c970:	f7fe ffea 	bl	801b948 <EwNotifyObservers+0x260>
 801c974:	4638      	mov	r0, r7
 801c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c97a:	4647      	mov	r7, r8
 801c97c:	e7fa      	b.n	801c974 <EwStringRemove+0x50>
 801c97e:	2700      	movs	r7, #0
 801c980:	e7f8      	b.n	801c974 <EwStringRemove+0x50>

0801c982 <EwStringFindChar>:
 801c982:	b570      	push	{r4, r5, r6, lr}
 801c984:	4614      	mov	r4, r2
 801c986:	460e      	mov	r6, r1
 801c988:	4605      	mov	r5, r0
 801c98a:	f7fe ffef 	bl	801b96c <EwNotifyObservers+0x284>
 801c98e:	f7fe ffd1 	bl	801b934 <EwNotifyObservers+0x24c>
 801c992:	2c00      	cmp	r4, #0
 801c994:	db0f      	blt.n	801c9b6 <EwStringFindChar+0x34>
 801c996:	42a0      	cmp	r0, r4
 801c998:	dd0d      	ble.n	801c9b6 <EwStringFindChar+0x34>
 801c99a:	eb15 0544 	adds.w	r5, r5, r4, lsl #1
 801c99e:	d00a      	beq.n	801c9b6 <EwStringFindChar+0x34>
 801c9a0:	462b      	mov	r3, r5
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f833 2b02 	ldrh.w	r2, [r3], #2
 801c9a8:	b12a      	cbz	r2, 801c9b6 <EwStringFindChar+0x34>
 801c9aa:	4296      	cmp	r6, r2
 801c9ac:	d1f9      	bne.n	801c9a2 <EwStringFindChar+0x20>
 801c9ae:	1b45      	subs	r5, r0, r5
 801c9b0:	eb04 0065 	add.w	r0, r4, r5, asr #1
 801c9b4:	e001      	b.n	801c9ba <EwStringFindChar+0x38>
 801c9b6:	f04f 30ff 	mov.w	r0, #4294967295
 801c9ba:	bd70      	pop	{r4, r5, r6, pc}

0801c9bc <EwStringFind>:
 801c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9be:	460e      	mov	r6, r1
 801c9c0:	4614      	mov	r4, r2
 801c9c2:	4605      	mov	r5, r0
 801c9c4:	f7fe ffd2 	bl	801b96c <EwNotifyObservers+0x284>
 801c9c8:	f7fe ffb4 	bl	801b934 <EwNotifyObservers+0x24c>
 801c9cc:	4607      	mov	r7, r0
 801c9ce:	4630      	mov	r0, r6
 801c9d0:	f7fe ffcc 	bl	801b96c <EwNotifyObservers+0x284>
 801c9d4:	2c00      	cmp	r4, #0
 801c9d6:	db1d      	blt.n	801ca14 <EwStringFind+0x58>
 801c9d8:	42a7      	cmp	r7, r4
 801c9da:	dd1b      	ble.n	801ca14 <EwStringFind+0x58>
 801c9dc:	eb15 0044 	adds.w	r0, r5, r4, lsl #1
 801c9e0:	d018      	beq.n	801ca14 <EwStringFind+0x58>
 801c9e2:	b1d6      	cbz	r6, 801ca1a <EwStringFind+0x5e>
 801c9e4:	8833      	ldrh	r3, [r6, #0]
 801c9e6:	b1c3      	cbz	r3, 801ca1a <EwStringFind+0x5e>
 801c9e8:	4602      	mov	r2, r0
 801c9ea:	4613      	mov	r3, r2
 801c9ec:	3202      	adds	r2, #2
 801c9ee:	8819      	ldrh	r1, [r3, #0]
 801c9f0:	b181      	cbz	r1, 801ca14 <EwStringFind+0x58>
 801c9f2:	1e9d      	subs	r5, r3, #2
 801c9f4:	1eb1      	subs	r1, r6, #2
 801c9f6:	e000      	b.n	801c9fa <EwStringFind+0x3e>
 801c9f8:	b147      	cbz	r7, 801ca0c <EwStringFind+0x50>
 801c9fa:	f835 7f02 	ldrh.w	r7, [r5, #2]!
 801c9fe:	f831 cf02 	ldrh.w	ip, [r1, #2]!
 801ca02:	4567      	cmp	r7, ip
 801ca04:	d0f8      	beq.n	801c9f8 <EwStringFind+0x3c>
 801ca06:	f1bc 0f00 	cmp.w	ip, #0
 801ca0a:	d1ee      	bne.n	801c9ea <EwStringFind+0x2e>
 801ca0c:	1a18      	subs	r0, r3, r0
 801ca0e:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801ca12:	e001      	b.n	801ca18 <EwStringFind+0x5c>
 801ca14:	f04f 30ff 	mov.w	r0, #4294967295
 801ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca1a:	4603      	mov	r3, r0
 801ca1c:	e7f6      	b.n	801ca0c <EwStringFind+0x50>

0801ca1e <EwStringParseInt32>:
 801ca1e:	b538      	push	{r3, r4, r5, lr}
 801ca20:	4614      	mov	r4, r2
 801ca22:	460d      	mov	r5, r1
 801ca24:	f7fe ffa2 	bl	801b96c <EwNotifyObservers+0x284>
 801ca28:	f7fe fe8d 	bl	801b746 <EwNotifyObservers+0x5e>
 801ca2c:	b390      	cbz	r0, 801ca94 <EwStringParseInt32+0x76>
 801ca2e:	8803      	ldrh	r3, [r0, #0]
 801ca30:	2b2b      	cmp	r3, #43	; 0x2b
 801ca32:	d001      	beq.n	801ca38 <EwStringParseInt32+0x1a>
 801ca34:	2b2d      	cmp	r3, #45	; 0x2d
 801ca36:	d12f      	bne.n	801ca98 <EwStringParseInt32+0x7a>
 801ca38:	2b2d      	cmp	r3, #45	; 0x2d
 801ca3a:	f100 0002 	add.w	r0, r0, #2
 801ca3e:	bf0c      	ite	eq
 801ca40:	f04f 32ff 	moveq.w	r2, #4294967295
 801ca44:	2201      	movne	r2, #1
 801ca46:	2c02      	cmp	r4, #2
 801ca48:	8803      	ldrh	r3, [r0, #0]
 801ca4a:	d004      	beq.n	801ca56 <EwStringParseInt32+0x38>
 801ca4c:	2c08      	cmp	r4, #8
 801ca4e:	d002      	beq.n	801ca56 <EwStringParseInt32+0x38>
 801ca50:	2c10      	cmp	r4, #16
 801ca52:	d006      	beq.n	801ca62 <EwStringParseInt32+0x44>
 801ca54:	240a      	movs	r4, #10
 801ca56:	2b2f      	cmp	r3, #47	; 0x2f
 801ca58:	d91c      	bls.n	801ca94 <EwStringParseInt32+0x76>
 801ca5a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801ca5e:	428b      	cmp	r3, r1
 801ca60:	dc18      	bgt.n	801ca94 <EwStringParseInt32+0x76>
 801ca62:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ca66:	2909      	cmp	r1, #9
 801ca68:	d904      	bls.n	801ca74 <EwStringParseInt32+0x56>
 801ca6a:	f023 0320 	bic.w	r3, r3, #32
 801ca6e:	3b41      	subs	r3, #65	; 0x41
 801ca70:	2b05      	cmp	r3, #5
 801ca72:	d80f      	bhi.n	801ca94 <EwStringParseInt32+0x76>
 801ca74:	2c02      	cmp	r4, #2
 801ca76:	f04f 0100 	mov.w	r1, #0
 801ca7a:	d10f      	bne.n	801ca9c <EwStringParseInt32+0x7e>
 801ca7c:	f830 3b02 	ldrh.w	r3, [r0], #2
 801ca80:	3b30      	subs	r3, #48	; 0x30
 801ca82:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801ca86:	8803      	ldrh	r3, [r0, #0]
 801ca88:	3b30      	subs	r3, #48	; 0x30
 801ca8a:	b29b      	uxth	r3, r3
 801ca8c:	2b01      	cmp	r3, #1
 801ca8e:	d9f5      	bls.n	801ca7c <EwStringParseInt32+0x5e>
 801ca90:	fb02 f501 	mul.w	r5, r2, r1
 801ca94:	4628      	mov	r0, r5
 801ca96:	bd38      	pop	{r3, r4, r5, pc}
 801ca98:	2201      	movs	r2, #1
 801ca9a:	e7d4      	b.n	801ca46 <EwStringParseInt32+0x28>
 801ca9c:	2c08      	cmp	r4, #8
 801ca9e:	d10a      	bne.n	801cab6 <EwStringParseInt32+0x98>
 801caa0:	f830 3b02 	ldrh.w	r3, [r0], #2
 801caa4:	3b30      	subs	r3, #48	; 0x30
 801caa6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801caaa:	8803      	ldrh	r3, [r0, #0]
 801caac:	3b30      	subs	r3, #48	; 0x30
 801caae:	b29b      	uxth	r3, r3
 801cab0:	2b07      	cmp	r3, #7
 801cab2:	d9f5      	bls.n	801caa0 <EwStringParseInt32+0x82>
 801cab4:	e7ec      	b.n	801ca90 <EwStringParseInt32+0x72>
 801cab6:	2c0a      	cmp	r4, #10
 801cab8:	d10a      	bne.n	801cad0 <EwStringParseInt32+0xb2>
 801caba:	f830 3b02 	ldrh.w	r3, [r0], #2
 801cabe:	3b30      	subs	r3, #48	; 0x30
 801cac0:	fb04 3101 	mla	r1, r4, r1, r3
 801cac4:	8803      	ldrh	r3, [r0, #0]
 801cac6:	3b30      	subs	r3, #48	; 0x30
 801cac8:	b29b      	uxth	r3, r3
 801caca:	2b09      	cmp	r3, #9
 801cacc:	d9f5      	bls.n	801caba <EwStringParseInt32+0x9c>
 801cace:	e7df      	b.n	801ca90 <EwStringParseInt32+0x72>
 801cad0:	f830 3b02 	ldrh.w	r3, [r0], #2
 801cad4:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 801cad8:	2c05      	cmp	r4, #5
 801cada:	ea4f 1101 	mov.w	r1, r1, lsl #4
 801cade:	d80c      	bhi.n	801cafa <EwStringParseInt32+0xdc>
 801cae0:	3b57      	subs	r3, #87	; 0x57
 801cae2:	4419      	add	r1, r3
 801cae4:	8803      	ldrh	r3, [r0, #0]
 801cae6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 801caea:	2c09      	cmp	r4, #9
 801caec:	d9f0      	bls.n	801cad0 <EwStringParseInt32+0xb2>
 801caee:	f023 0320 	bic.w	r3, r3, #32
 801caf2:	3b41      	subs	r3, #65	; 0x41
 801caf4:	2b05      	cmp	r3, #5
 801caf6:	d9eb      	bls.n	801cad0 <EwStringParseInt32+0xb2>
 801caf8:	e7ca      	b.n	801ca90 <EwStringParseInt32+0x72>
 801cafa:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 801cafe:	2c05      	cmp	r4, #5
 801cb00:	bf94      	ite	ls
 801cb02:	3b37      	subls	r3, #55	; 0x37
 801cb04:	3b30      	subhi	r3, #48	; 0x30
 801cb06:	e7ec      	b.n	801cae2 <EwStringParseInt32+0xc4>

0801cb08 <EwStringParseUInt32>:
 801cb08:	b538      	push	{r3, r4, r5, lr}
 801cb0a:	4615      	mov	r5, r2
 801cb0c:	460c      	mov	r4, r1
 801cb0e:	f7fe ff2d 	bl	801b96c <EwNotifyObservers+0x284>
 801cb12:	f7fe fe18 	bl	801b746 <EwNotifyObservers+0x5e>
 801cb16:	b398      	cbz	r0, 801cb80 <EwStringParseUInt32+0x78>
 801cb18:	8803      	ldrh	r3, [r0, #0]
 801cb1a:	2b2b      	cmp	r3, #43	; 0x2b
 801cb1c:	d001      	beq.n	801cb22 <EwStringParseUInt32+0x1a>
 801cb1e:	2b2d      	cmp	r3, #45	; 0x2d
 801cb20:	d130      	bne.n	801cb84 <EwStringParseUInt32+0x7c>
 801cb22:	2b2d      	cmp	r3, #45	; 0x2d
 801cb24:	f100 0002 	add.w	r0, r0, #2
 801cb28:	bf0c      	ite	eq
 801cb2a:	f04f 32ff 	moveq.w	r2, #4294967295
 801cb2e:	2201      	movne	r2, #1
 801cb30:	2d02      	cmp	r5, #2
 801cb32:	8803      	ldrh	r3, [r0, #0]
 801cb34:	d004      	beq.n	801cb40 <EwStringParseUInt32+0x38>
 801cb36:	2d08      	cmp	r5, #8
 801cb38:	d002      	beq.n	801cb40 <EwStringParseUInt32+0x38>
 801cb3a:	2d10      	cmp	r5, #16
 801cb3c:	d006      	beq.n	801cb4c <EwStringParseUInt32+0x44>
 801cb3e:	250a      	movs	r5, #10
 801cb40:	2b2f      	cmp	r3, #47	; 0x2f
 801cb42:	d91d      	bls.n	801cb80 <EwStringParseUInt32+0x78>
 801cb44:	f105 012f 	add.w	r1, r5, #47	; 0x2f
 801cb48:	428b      	cmp	r3, r1
 801cb4a:	dc19      	bgt.n	801cb80 <EwStringParseUInt32+0x78>
 801cb4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801cb50:	2909      	cmp	r1, #9
 801cb52:	d904      	bls.n	801cb5e <EwStringParseUInt32+0x56>
 801cb54:	f023 0320 	bic.w	r3, r3, #32
 801cb58:	3b41      	subs	r3, #65	; 0x41
 801cb5a:	2b05      	cmp	r3, #5
 801cb5c:	d810      	bhi.n	801cb80 <EwStringParseUInt32+0x78>
 801cb5e:	2d02      	cmp	r5, #2
 801cb60:	f04f 0400 	mov.w	r4, #0
 801cb64:	d110      	bne.n	801cb88 <EwStringParseUInt32+0x80>
 801cb66:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cb6a:	8803      	ldrh	r3, [r0, #0]
 801cb6c:	3b30      	subs	r3, #48	; 0x30
 801cb6e:	0064      	lsls	r4, r4, #1
 801cb70:	b29b      	uxth	r3, r3
 801cb72:	3c30      	subs	r4, #48	; 0x30
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	440c      	add	r4, r1
 801cb78:	d9f5      	bls.n	801cb66 <EwStringParseUInt32+0x5e>
 801cb7a:	3201      	adds	r2, #1
 801cb7c:	bf08      	it	eq
 801cb7e:	4264      	negeq	r4, r4
 801cb80:	4620      	mov	r0, r4
 801cb82:	bd38      	pop	{r3, r4, r5, pc}
 801cb84:	2201      	movs	r2, #1
 801cb86:	e7d3      	b.n	801cb30 <EwStringParseUInt32+0x28>
 801cb88:	2d08      	cmp	r5, #8
 801cb8a:	d10a      	bne.n	801cba2 <EwStringParseUInt32+0x9a>
 801cb8c:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cb90:	8803      	ldrh	r3, [r0, #0]
 801cb92:	3b30      	subs	r3, #48	; 0x30
 801cb94:	00e4      	lsls	r4, r4, #3
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	3c30      	subs	r4, #48	; 0x30
 801cb9a:	2b07      	cmp	r3, #7
 801cb9c:	440c      	add	r4, r1
 801cb9e:	d9f5      	bls.n	801cb8c <EwStringParseUInt32+0x84>
 801cba0:	e7eb      	b.n	801cb7a <EwStringParseUInt32+0x72>
 801cba2:	2d0a      	cmp	r5, #10
 801cba4:	d10a      	bne.n	801cbbc <EwStringParseUInt32+0xb4>
 801cba6:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cbaa:	8803      	ldrh	r3, [r0, #0]
 801cbac:	3b30      	subs	r3, #48	; 0x30
 801cbae:	436c      	muls	r4, r5
 801cbb0:	b29b      	uxth	r3, r3
 801cbb2:	3c30      	subs	r4, #48	; 0x30
 801cbb4:	2b09      	cmp	r3, #9
 801cbb6:	440c      	add	r4, r1
 801cbb8:	d9f5      	bls.n	801cba6 <EwStringParseUInt32+0x9e>
 801cbba:	e7de      	b.n	801cb7a <EwStringParseUInt32+0x72>
 801cbbc:	f830 3b02 	ldrh.w	r3, [r0], #2
 801cbc0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801cbc4:	2905      	cmp	r1, #5
 801cbc6:	ea4f 1404 	mov.w	r4, r4, lsl #4
 801cbca:	d80c      	bhi.n	801cbe6 <EwStringParseUInt32+0xde>
 801cbcc:	3c57      	subs	r4, #87	; 0x57
 801cbce:	441c      	add	r4, r3
 801cbd0:	8803      	ldrh	r3, [r0, #0]
 801cbd2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801cbd6:	2909      	cmp	r1, #9
 801cbd8:	d9f0      	bls.n	801cbbc <EwStringParseUInt32+0xb4>
 801cbda:	f023 0320 	bic.w	r3, r3, #32
 801cbde:	3b41      	subs	r3, #65	; 0x41
 801cbe0:	2b05      	cmp	r3, #5
 801cbe2:	d9eb      	bls.n	801cbbc <EwStringParseUInt32+0xb4>
 801cbe4:	e7c9      	b.n	801cb7a <EwStringParseUInt32+0x72>
 801cbe6:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 801cbea:	2905      	cmp	r1, #5
 801cbec:	bf94      	ite	ls
 801cbee:	3c37      	subls	r4, #55	; 0x37
 801cbf0:	3c30      	subhi	r4, #48	; 0x30
 801cbf2:	e7ec      	b.n	801cbce <EwStringParseUInt32+0xc6>

0801cbf4 <EwStringParseInt64>:
 801cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbf8:	9d08      	ldr	r5, [sp, #32]
 801cbfa:	4691      	mov	r9, r2
 801cbfc:	4698      	mov	r8, r3
 801cbfe:	f7fe feb5 	bl	801b96c <EwNotifyObservers+0x284>
 801cc02:	f7fe fda0 	bl	801b746 <EwNotifyObservers+0x5e>
 801cc06:	b3d0      	cbz	r0, 801cc7e <EwStringParseInt64+0x8a>
 801cc08:	8803      	ldrh	r3, [r0, #0]
 801cc0a:	2b2b      	cmp	r3, #43	; 0x2b
 801cc0c:	d001      	beq.n	801cc12 <EwStringParseInt64+0x1e>
 801cc0e:	2b2d      	cmp	r3, #45	; 0x2d
 801cc10:	d103      	bne.n	801cc1a <EwStringParseInt64+0x26>
 801cc12:	2b2d      	cmp	r3, #45	; 0x2d
 801cc14:	f100 0002 	add.w	r0, r0, #2
 801cc18:	d035      	beq.n	801cc86 <EwStringParseInt64+0x92>
 801cc1a:	2701      	movs	r7, #1
 801cc1c:	2600      	movs	r6, #0
 801cc1e:	2d02      	cmp	r5, #2
 801cc20:	8804      	ldrh	r4, [r0, #0]
 801cc22:	d004      	beq.n	801cc2e <EwStringParseInt64+0x3a>
 801cc24:	2d08      	cmp	r5, #8
 801cc26:	d002      	beq.n	801cc2e <EwStringParseInt64+0x3a>
 801cc28:	2d10      	cmp	r5, #16
 801cc2a:	d006      	beq.n	801cc3a <EwStringParseInt64+0x46>
 801cc2c:	250a      	movs	r5, #10
 801cc2e:	2c2f      	cmp	r4, #47	; 0x2f
 801cc30:	d925      	bls.n	801cc7e <EwStringParseInt64+0x8a>
 801cc32:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 801cc36:	429c      	cmp	r4, r3
 801cc38:	dc21      	bgt.n	801cc7e <EwStringParseInt64+0x8a>
 801cc3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cc3e:	2b09      	cmp	r3, #9
 801cc40:	d904      	bls.n	801cc4c <EwStringParseInt64+0x58>
 801cc42:	f024 0420 	bic.w	r4, r4, #32
 801cc46:	3c41      	subs	r4, #65	; 0x41
 801cc48:	2c05      	cmp	r4, #5
 801cc4a:	d818      	bhi.n	801cc7e <EwStringParseInt64+0x8a>
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	2d02      	cmp	r5, #2
 801cc50:	461c      	mov	r4, r3
 801cc52:	d11c      	bne.n	801cc8e <EwStringParseInt64+0x9a>
 801cc54:	f830 5b02 	ldrh.w	r5, [r0], #2
 801cc58:	8802      	ldrh	r2, [r0, #0]
 801cc5a:	18db      	adds	r3, r3, r3
 801cc5c:	f1a5 0530 	sub.w	r5, r5, #48	; 0x30
 801cc60:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 801cc64:	4164      	adcs	r4, r4
 801cc66:	b292      	uxth	r2, r2
 801cc68:	18eb      	adds	r3, r5, r3
 801cc6a:	eb44 74e5 	adc.w	r4, r4, r5, asr #31
 801cc6e:	2a01      	cmp	r2, #1
 801cc70:	d9f0      	bls.n	801cc54 <EwStringParseInt64+0x60>
 801cc72:	435e      	muls	r6, r3
 801cc74:	fb07 6404 	mla	r4, r7, r4, r6
 801cc78:	fba3 9807 	umull	r9, r8, r3, r7
 801cc7c:	44a0      	add	r8, r4
 801cc7e:	4648      	mov	r0, r9
 801cc80:	4641      	mov	r1, r8
 801cc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc86:	f04f 37ff 	mov.w	r7, #4294967295
 801cc8a:	463e      	mov	r6, r7
 801cc8c:	e7c7      	b.n	801cc1e <EwStringParseInt64+0x2a>
 801cc8e:	2d08      	cmp	r5, #8
 801cc90:	d10f      	bne.n	801ccb2 <EwStringParseInt64+0xbe>
 801cc92:	f830 5b02 	ldrh.w	r5, [r0], #2
 801cc96:	8802      	ldrh	r2, [r0, #0]
 801cc98:	00e4      	lsls	r4, r4, #3
 801cc9a:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 801cc9e:	3d30      	subs	r5, #48	; 0x30
 801cca0:	00db      	lsls	r3, r3, #3
 801cca2:	3a30      	subs	r2, #48	; 0x30
 801cca4:	18eb      	adds	r3, r5, r3
 801cca6:	b292      	uxth	r2, r2
 801cca8:	eb44 74e5 	adc.w	r4, r4, r5, asr #31
 801ccac:	2a07      	cmp	r2, #7
 801ccae:	d9f0      	bls.n	801cc92 <EwStringParseInt64+0x9e>
 801ccb0:	e7df      	b.n	801cc72 <EwStringParseInt64+0x7e>
 801ccb2:	2d0a      	cmp	r5, #10
 801ccb4:	d10f      	bne.n	801ccd6 <EwStringParseInt64+0xe2>
 801ccb6:	fba3 3c05 	umull	r3, ip, r3, r5
 801ccba:	fb05 cc04 	mla	ip, r5, r4, ip
 801ccbe:	f830 4b02 	ldrh.w	r4, [r0], #2
 801ccc2:	8802      	ldrh	r2, [r0, #0]
 801ccc4:	3c30      	subs	r4, #48	; 0x30
 801ccc6:	3a30      	subs	r2, #48	; 0x30
 801ccc8:	18e3      	adds	r3, r4, r3
 801ccca:	b292      	uxth	r2, r2
 801cccc:	eb4c 74e4 	adc.w	r4, ip, r4, asr #31
 801ccd0:	2a09      	cmp	r2, #9
 801ccd2:	d9f0      	bls.n	801ccb6 <EwStringParseInt64+0xc2>
 801ccd4:	e7cd      	b.n	801cc72 <EwStringParseInt64+0x7e>
 801ccd6:	f830 5b02 	ldrh.w	r5, [r0], #2
 801ccda:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 801ccde:	0124      	lsls	r4, r4, #4
 801cce0:	2a05      	cmp	r2, #5
 801cce2:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 801cce6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801ccea:	d80e      	bhi.n	801cd0a <EwStringParseInt64+0x116>
 801ccec:	3d57      	subs	r5, #87	; 0x57
 801ccee:	8802      	ldrh	r2, [r0, #0]
 801ccf0:	18eb      	adds	r3, r5, r3
 801ccf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801ccf6:	eb44 74e5 	adc.w	r4, r4, r5, asr #31
 801ccfa:	2909      	cmp	r1, #9
 801ccfc:	d9eb      	bls.n	801ccd6 <EwStringParseInt64+0xe2>
 801ccfe:	f022 0220 	bic.w	r2, r2, #32
 801cd02:	3a41      	subs	r2, #65	; 0x41
 801cd04:	2a05      	cmp	r2, #5
 801cd06:	d9e6      	bls.n	801ccd6 <EwStringParseInt64+0xe2>
 801cd08:	e7b3      	b.n	801cc72 <EwStringParseInt64+0x7e>
 801cd0a:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
 801cd0e:	2a05      	cmp	r2, #5
 801cd10:	bf94      	ite	ls
 801cd12:	3d37      	subls	r5, #55	; 0x37
 801cd14:	3d30      	subhi	r5, #48	; 0x30
 801cd16:	e7ea      	b.n	801ccee <EwStringParseInt64+0xfa>

0801cd18 <EwStringParseUInt64>:
 801cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd1a:	9e06      	ldr	r6, [sp, #24]
 801cd1c:	4614      	mov	r4, r2
 801cd1e:	461d      	mov	r5, r3
 801cd20:	f7fe fe24 	bl	801b96c <EwNotifyObservers+0x284>
 801cd24:	f7fe fd0f 	bl	801b746 <EwNotifyObservers+0x5e>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	d03a      	beq.n	801cda2 <EwStringParseUInt64+0x8a>
 801cd2c:	8803      	ldrh	r3, [r0, #0]
 801cd2e:	2b2b      	cmp	r3, #43	; 0x2b
 801cd30:	d001      	beq.n	801cd36 <EwStringParseUInt64+0x1e>
 801cd32:	2b2d      	cmp	r3, #45	; 0x2d
 801cd34:	d138      	bne.n	801cda8 <EwStringParseUInt64+0x90>
 801cd36:	2b2d      	cmp	r3, #45	; 0x2d
 801cd38:	f100 0002 	add.w	r0, r0, #2
 801cd3c:	bf0c      	ite	eq
 801cd3e:	f04f 37ff 	moveq.w	r7, #4294967295
 801cd42:	2701      	movne	r7, #1
 801cd44:	2e02      	cmp	r6, #2
 801cd46:	8803      	ldrh	r3, [r0, #0]
 801cd48:	d004      	beq.n	801cd54 <EwStringParseUInt64+0x3c>
 801cd4a:	2e08      	cmp	r6, #8
 801cd4c:	d002      	beq.n	801cd54 <EwStringParseUInt64+0x3c>
 801cd4e:	2e10      	cmp	r6, #16
 801cd50:	d006      	beq.n	801cd60 <EwStringParseUInt64+0x48>
 801cd52:	260a      	movs	r6, #10
 801cd54:	2b2f      	cmp	r3, #47	; 0x2f
 801cd56:	d924      	bls.n	801cda2 <EwStringParseUInt64+0x8a>
 801cd58:	f106 022f 	add.w	r2, r6, #47	; 0x2f
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	dc20      	bgt.n	801cda2 <EwStringParseUInt64+0x8a>
 801cd60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801cd64:	2a09      	cmp	r2, #9
 801cd66:	d904      	bls.n	801cd72 <EwStringParseUInt64+0x5a>
 801cd68:	f023 0320 	bic.w	r3, r3, #32
 801cd6c:	3b41      	subs	r3, #65	; 0x41
 801cd6e:	2b05      	cmp	r3, #5
 801cd70:	d817      	bhi.n	801cda2 <EwStringParseUInt64+0x8a>
 801cd72:	2400      	movs	r4, #0
 801cd74:	2e02      	cmp	r6, #2
 801cd76:	4625      	mov	r5, r4
 801cd78:	d118      	bne.n	801cdac <EwStringParseUInt64+0x94>
 801cd7a:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cd7e:	8803      	ldrh	r3, [r0, #0]
 801cd80:	1924      	adds	r4, r4, r4
 801cd82:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 801cd86:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 801cd8a:	416d      	adcs	r5, r5
 801cd8c:	b29b      	uxth	r3, r3
 801cd8e:	190c      	adds	r4, r1, r4
 801cd90:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 801cd94:	2b01      	cmp	r3, #1
 801cd96:	d9f0      	bls.n	801cd7a <EwStringParseUInt64+0x62>
 801cd98:	3701      	adds	r7, #1
 801cd9a:	d102      	bne.n	801cda2 <EwStringParseUInt64+0x8a>
 801cd9c:	4264      	negs	r4, r4
 801cd9e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801cda2:	4620      	mov	r0, r4
 801cda4:	4629      	mov	r1, r5
 801cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cda8:	2701      	movs	r7, #1
 801cdaa:	e7cb      	b.n	801cd44 <EwStringParseUInt64+0x2c>
 801cdac:	2e08      	cmp	r6, #8
 801cdae:	d10f      	bne.n	801cdd0 <EwStringParseUInt64+0xb8>
 801cdb0:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cdb4:	8803      	ldrh	r3, [r0, #0]
 801cdb6:	00ed      	lsls	r5, r5, #3
 801cdb8:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 801cdbc:	3930      	subs	r1, #48	; 0x30
 801cdbe:	00e4      	lsls	r4, r4, #3
 801cdc0:	3b30      	subs	r3, #48	; 0x30
 801cdc2:	190c      	adds	r4, r1, r4
 801cdc4:	b29b      	uxth	r3, r3
 801cdc6:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 801cdca:	2b07      	cmp	r3, #7
 801cdcc:	d9f0      	bls.n	801cdb0 <EwStringParseUInt64+0x98>
 801cdce:	e7e3      	b.n	801cd98 <EwStringParseUInt64+0x80>
 801cdd0:	2e0a      	cmp	r6, #10
 801cdd2:	d10f      	bne.n	801cdf4 <EwStringParseUInt64+0xdc>
 801cdd4:	fba4 4306 	umull	r4, r3, r4, r6
 801cdd8:	fb06 3305 	mla	r3, r6, r5, r3
 801cddc:	f830 5b02 	ldrh.w	r5, [r0], #2
 801cde0:	3d30      	subs	r5, #48	; 0x30
 801cde2:	192c      	adds	r4, r5, r4
 801cde4:	eb43 75e5 	adc.w	r5, r3, r5, asr #31
 801cde8:	8803      	ldrh	r3, [r0, #0]
 801cdea:	3b30      	subs	r3, #48	; 0x30
 801cdec:	b29b      	uxth	r3, r3
 801cdee:	2b09      	cmp	r3, #9
 801cdf0:	d9f0      	bls.n	801cdd4 <EwStringParseUInt64+0xbc>
 801cdf2:	e7d1      	b.n	801cd98 <EwStringParseUInt64+0x80>
 801cdf4:	f830 1b02 	ldrh.w	r1, [r0], #2
 801cdf8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 801cdfc:	012d      	lsls	r5, r5, #4
 801cdfe:	2b05      	cmp	r3, #5
 801ce00:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 801ce04:	ea4f 1404 	mov.w	r4, r4, lsl #4
 801ce08:	d80e      	bhi.n	801ce28 <EwStringParseUInt64+0x110>
 801ce0a:	3957      	subs	r1, #87	; 0x57
 801ce0c:	8803      	ldrh	r3, [r0, #0]
 801ce0e:	190c      	adds	r4, r1, r4
 801ce10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ce14:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 801ce18:	2a09      	cmp	r2, #9
 801ce1a:	d9eb      	bls.n	801cdf4 <EwStringParseUInt64+0xdc>
 801ce1c:	f023 0320 	bic.w	r3, r3, #32
 801ce20:	3b41      	subs	r3, #65	; 0x41
 801ce22:	2b05      	cmp	r3, #5
 801ce24:	d9e6      	bls.n	801cdf4 <EwStringParseUInt64+0xdc>
 801ce26:	e7b7      	b.n	801cd98 <EwStringParseUInt64+0x80>
 801ce28:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 801ce2c:	2b05      	cmp	r3, #5
 801ce2e:	bf94      	ite	ls
 801ce30:	3937      	subls	r1, #55	; 0x37
 801ce32:	3930      	subhi	r1, #48	; 0x30
 801ce34:	e7ea      	b.n	801ce0c <EwStringParseUInt64+0xf4>

0801ce36 <EwStringParseFloat>:
 801ce36:	b570      	push	{r4, r5, r6, lr}
 801ce38:	ed2d 8b02 	vpush	{d8}
 801ce3c:	eeb0 8a40 	vmov.f32	s16, s0
 801ce40:	f7fe fd94 	bl	801b96c <EwNotifyObservers+0x284>
 801ce44:	f7fe fc7f 	bl	801b746 <EwNotifyObservers+0x5e>
 801ce48:	b1b8      	cbz	r0, 801ce7a <EwStringParseFloat+0x44>
 801ce4a:	8803      	ldrh	r3, [r0, #0]
 801ce4c:	2b2b      	cmp	r3, #43	; 0x2b
 801ce4e:	d001      	beq.n	801ce54 <EwStringParseFloat+0x1e>
 801ce50:	2b2d      	cmp	r3, #45	; 0x2d
 801ce52:	d117      	bne.n	801ce84 <EwStringParseFloat+0x4e>
 801ce54:	2b2d      	cmp	r3, #45	; 0x2d
 801ce56:	f100 0002 	add.w	r0, r0, #2
 801ce5a:	bf0c      	ite	eq
 801ce5c:	f04f 34ff 	moveq.w	r4, #4294967295
 801ce60:	2401      	movne	r4, #1
 801ce62:	8803      	ldrh	r3, [r0, #0]
 801ce64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ce68:	2a09      	cmp	r2, #9
 801ce6a:	d937      	bls.n	801cedc <EwStringParseFloat+0xa6>
 801ce6c:	2b2e      	cmp	r3, #46	; 0x2e
 801ce6e:	d104      	bne.n	801ce7a <EwStringParseFloat+0x44>
 801ce70:	8843      	ldrh	r3, [r0, #2]
 801ce72:	3b30      	subs	r3, #48	; 0x30
 801ce74:	b29b      	uxth	r3, r3
 801ce76:	2b09      	cmp	r3, #9
 801ce78:	d930      	bls.n	801cedc <EwStringParseFloat+0xa6>
 801ce7a:	eeb0 0a48 	vmov.f32	s0, s16
 801ce7e:	ecbd 8b02 	vpop	{d8}
 801ce82:	bd70      	pop	{r4, r5, r6, pc}
 801ce84:	2401      	movs	r4, #1
 801ce86:	e7ec      	b.n	801ce62 <EwStringParseFloat+0x2c>
 801ce88:	ee07 2a90 	vmov	s15, r2
 801ce8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ce90:	eee8 7a07 	vfma.f32	s15, s16, s14
 801ce94:	eeb0 8a67 	vmov.f32	s16, s15
 801ce98:	4603      	mov	r3, r0
 801ce9a:	f830 1b02 	ldrh.w	r1, [r0], #2
 801ce9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801cea2:	b295      	uxth	r5, r2
 801cea4:	2d09      	cmp	r5, #9
 801cea6:	d9ef      	bls.n	801ce88 <EwStringParseFloat+0x52>
 801cea8:	292e      	cmp	r1, #46	; 0x2e
 801ceaa:	d10b      	bne.n	801cec4 <EwStringParseFloat+0x8e>
 801ceac:	ed9f 7a24 	vldr	s14, [pc, #144]	; 801cf40 <EwStringParseFloat+0x10a>
 801ceb0:	4601      	mov	r1, r0
 801ceb2:	eef0 6a47 	vmov.f32	s13, s14
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	f831 2b02 	ldrh.w	r2, [r1], #2
 801cebc:	3a30      	subs	r2, #48	; 0x30
 801cebe:	b290      	uxth	r0, r2
 801cec0:	2809      	cmp	r0, #9
 801cec2:	d910      	bls.n	801cee6 <EwStringParseFloat+0xb0>
 801cec4:	881a      	ldrh	r2, [r3, #0]
 801cec6:	f022 0220 	bic.w	r2, r2, #32
 801ceca:	b292      	uxth	r2, r2
 801cecc:	2a45      	cmp	r2, #69	; 0x45
 801cece:	d130      	bne.n	801cf32 <EwStringParseFloat+0xfc>
 801ced0:	885a      	ldrh	r2, [r3, #2]
 801ced2:	2a2b      	cmp	r2, #43	; 0x2b
 801ced4:	d110      	bne.n	801cef8 <EwStringParseFloat+0xc2>
 801ced6:	3304      	adds	r3, #4
 801ced8:	2201      	movs	r2, #1
 801ceda:	e012      	b.n	801cf02 <EwStringParseFloat+0xcc>
 801cedc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801cf44 <EwStringParseFloat+0x10e>
 801cee0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801cee4:	e7d8      	b.n	801ce98 <EwStringParseFloat+0x62>
 801cee6:	ee07 2a90 	vmov	s15, r2
 801ceea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ceee:	eea7 8a87 	vfma.f32	s16, s15, s14
 801cef2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cef6:	e7de      	b.n	801ceb6 <EwStringParseFloat+0x80>
 801cef8:	2a2d      	cmp	r2, #45	; 0x2d
 801cefa:	d11f      	bne.n	801cf3c <EwStringParseFloat+0x106>
 801cefc:	3304      	adds	r3, #4
 801cefe:	f04f 32ff 	mov.w	r2, #4294967295
 801cf02:	3b02      	subs	r3, #2
 801cf04:	2100      	movs	r1, #0
 801cf06:	260a      	movs	r6, #10
 801cf08:	e001      	b.n	801cf0e <EwStringParseFloat+0xd8>
 801cf0a:	fb06 0101 	mla	r1, r6, r1, r0
 801cf0e:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 801cf12:	3830      	subs	r0, #48	; 0x30
 801cf14:	b285      	uxth	r5, r0
 801cf16:	2d09      	cmp	r5, #9
 801cf18:	d9f7      	bls.n	801cf0a <EwStringParseFloat+0xd4>
 801cf1a:	434a      	muls	r2, r1
 801cf1c:	d009      	beq.n	801cf32 <EwStringParseFloat+0xfc>
 801cf1e:	ee07 2a90 	vmov	s15, r2
 801cf22:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801cf26:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801cf2a:	f00c fc7f 	bl	802982c <EwMathPow>
 801cf2e:	ee28 8a00 	vmul.f32	s16, s16, s0
 801cf32:	3401      	adds	r4, #1
 801cf34:	bf08      	it	eq
 801cf36:	eeb1 8a48 	vnegeq.f32	s16, s16
 801cf3a:	e79e      	b.n	801ce7a <EwStringParseFloat+0x44>
 801cf3c:	3302      	adds	r3, #2
 801cf3e:	e7cb      	b.n	801ced8 <EwStringParseFloat+0xa2>
 801cf40:	3dcccccd 	.word	0x3dcccccd
 801cf44:	00000000 	.word	0x00000000

0801cf48 <EwStringToAnsi>:
 801cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf4a:	4614      	mov	r4, r2
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	460e      	mov	r6, r1
 801cf50:	461f      	mov	r7, r3
 801cf52:	f7fe fd0b 	bl	801b96c <EwNotifyObservers+0x284>
 801cf56:	2c00      	cmp	r4, #0
 801cf58:	dd17      	ble.n	801cf8a <EwStringToAnsi+0x42>
 801cf5a:	b1a5      	cbz	r5, 801cf86 <EwStringToAnsi+0x3e>
 801cf5c:	3c01      	subs	r4, #1
 801cf5e:	3d02      	subs	r5, #2
 801cf60:	4434      	add	r4, r6
 801cf62:	4630      	mov	r0, r6
 801cf64:	42a0      	cmp	r0, r4
 801cf66:	d002      	beq.n	801cf6e <EwStringToAnsi+0x26>
 801cf68:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 801cf6c:	b922      	cbnz	r2, 801cf78 <EwStringToAnsi+0x30>
 801cf6e:	2300      	movs	r3, #0
 801cf70:	f800 3b01 	strb.w	r3, [r0], #1
 801cf74:	1b80      	subs	r0, r0, r6
 801cf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf78:	2aff      	cmp	r2, #255	; 0xff
 801cf7a:	bf94      	ite	ls
 801cf7c:	b2d2      	uxtbls	r2, r2
 801cf7e:	463a      	movhi	r2, r7
 801cf80:	f800 2b01 	strb.w	r2, [r0], #1
 801cf84:	e7ee      	b.n	801cf64 <EwStringToAnsi+0x1c>
 801cf86:	4630      	mov	r0, r6
 801cf88:	e7f1      	b.n	801cf6e <EwStringToAnsi+0x26>
 801cf8a:	2000      	movs	r0, #0
 801cf8c:	e7f3      	b.n	801cf76 <EwStringToAnsi+0x2e>

0801cf8e <EwGetUtf8StringLength>:
 801cf8e:	b510      	push	{r4, lr}
 801cf90:	4604      	mov	r4, r0
 801cf92:	f7fe fceb 	bl	801b96c <EwNotifyObservers+0x284>
 801cf96:	2000      	movs	r0, #0
 801cf98:	b114      	cbz	r4, 801cfa0 <EwGetUtf8StringLength+0x12>
 801cf9a:	f834 2b02 	ldrh.w	r2, [r4], #2
 801cf9e:	b902      	cbnz	r2, 801cfa2 <EwGetUtf8StringLength+0x14>
 801cfa0:	bd10      	pop	{r4, pc}
 801cfa2:	2a7f      	cmp	r2, #127	; 0x7f
 801cfa4:	d801      	bhi.n	801cfaa <EwGetUtf8StringLength+0x1c>
 801cfa6:	3001      	adds	r0, #1
 801cfa8:	e7f6      	b.n	801cf98 <EwGetUtf8StringLength+0xa>
 801cfaa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801cfae:	bf34      	ite	cc
 801cfb0:	3002      	addcc	r0, #2
 801cfb2:	3003      	addcs	r0, #3
 801cfb4:	e7f0      	b.n	801cf98 <EwGetUtf8StringLength+0xa>

0801cfb6 <EwStringToUtf8>:
 801cfb6:	b570      	push	{r4, r5, r6, lr}
 801cfb8:	4616      	mov	r6, r2
 801cfba:	4604      	mov	r4, r0
 801cfbc:	460d      	mov	r5, r1
 801cfbe:	f7fe fcd5 	bl	801b96c <EwNotifyObservers+0x284>
 801cfc2:	2e00      	cmp	r6, #0
 801cfc4:	dd37      	ble.n	801d036 <EwStringToUtf8+0x80>
 801cfc6:	1e72      	subs	r2, r6, #1
 801cfc8:	4628      	mov	r0, r5
 801cfca:	b174      	cbz	r4, 801cfea <EwStringToUtf8+0x34>
 801cfcc:	f834 3b02 	ldrh.w	r3, [r4], #2
 801cfd0:	b15b      	cbz	r3, 801cfea <EwStringToUtf8+0x34>
 801cfd2:	b152      	cbz	r2, 801cfea <EwStringToUtf8+0x34>
 801cfd4:	2b7f      	cmp	r3, #127	; 0x7f
 801cfd6:	d803      	bhi.n	801cfe0 <EwStringToUtf8+0x2a>
 801cfd8:	f800 3b01 	strb.w	r3, [r0], #1
 801cfdc:	3a01      	subs	r2, #1
 801cfde:	e7f4      	b.n	801cfca <EwStringToUtf8+0x14>
 801cfe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cfe4:	d214      	bcs.n	801d010 <EwStringToUtf8+0x5a>
 801cfe6:	2a01      	cmp	r2, #1
 801cfe8:	d104      	bne.n	801cff4 <EwStringToUtf8+0x3e>
 801cfea:	2300      	movs	r3, #0
 801cfec:	f800 3b01 	strb.w	r3, [r0], #1
 801cff0:	1b40      	subs	r0, r0, r5
 801cff2:	bd70      	pop	{r4, r5, r6, pc}
 801cff4:	099e      	lsrs	r6, r3, #6
 801cff6:	4601      	mov	r1, r0
 801cff8:	f066 063f 	orn	r6, r6, #63	; 0x3f
 801cffc:	f801 6b02 	strb.w	r6, [r1], #2
 801d000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d008:	7043      	strb	r3, [r0, #1]
 801d00a:	3a02      	subs	r2, #2
 801d00c:	4608      	mov	r0, r1
 801d00e:	e7dc      	b.n	801cfca <EwStringToUtf8+0x14>
 801d010:	2a02      	cmp	r2, #2
 801d012:	ddea      	ble.n	801cfea <EwStringToUtf8+0x34>
 801d014:	0b19      	lsrs	r1, r3, #12
 801d016:	f061 011f 	orn	r1, r1, #31
 801d01a:	7001      	strb	r1, [r0, #0]
 801d01c:	f3c3 1185 	ubfx	r1, r3, #6, #6
 801d020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d024:	f061 017f 	orn	r1, r1, #127	; 0x7f
 801d028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d02c:	7041      	strb	r1, [r0, #1]
 801d02e:	7083      	strb	r3, [r0, #2]
 801d030:	3a03      	subs	r2, #3
 801d032:	3003      	adds	r0, #3
 801d034:	e7c9      	b.n	801cfca <EwStringToUtf8+0x14>
 801d036:	2000      	movs	r0, #0
 801d038:	e7db      	b.n	801cff2 <EwStringToUtf8+0x3c>

0801d03a <EwGetVariantOfString>:
 801d03a:	b508      	push	{r3, lr}
 801d03c:	210c      	movs	r1, #12
 801d03e:	f7fd fa9a 	bl	801a576 <EwGetVariantOf>
 801d042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d046:	3004      	adds	r0, #4
 801d048:	f7ff b9f2 	b.w	801c430 <EwLoadString>

0801d04c <EwGetVariantOfChar>:
 801d04c:	b508      	push	{r3, lr}
 801d04e:	2108      	movs	r1, #8
 801d050:	f7fd fa91 	bl	801a576 <EwGetVariantOf>
 801d054:	8880      	ldrh	r0, [r0, #4]
 801d056:	bd08      	pop	{r3, pc}

0801d058 <EwGetCharUpper>:
 801d058:	b508      	push	{r3, lr}
 801d05a:	f7fe fbdd 	bl	801b818 <EwNotifyObservers+0x130>
 801d05e:	b280      	uxth	r0, r0
 801d060:	bd08      	pop	{r3, pc}

0801d062 <EwGetCharLower>:
 801d062:	b508      	push	{r3, lr}
 801d064:	f7fe fcb4 	bl	801b9d0 <ToLower>
 801d068:	b280      	uxth	r0, r0
 801d06a:	bd08      	pop	{r3, pc}
 801d06c:	b510      	push	{r4, lr}
 801d06e:	4604      	mov	r4, r0
 801d070:	f00c fba4 	bl	80297bc <EwGetTicks>
 801d074:	4b06      	ldr	r3, [pc, #24]	; (801d090 <EwGetCharLower+0x2e>)
 801d076:	681a      	ldr	r2, [r3, #0]
 801d078:	6018      	str	r0, [r3, #0]
 801d07a:	4282      	cmp	r2, r0
 801d07c:	bf82      	ittt	hi
 801d07e:	685a      	ldrhi	r2, [r3, #4]
 801d080:	3201      	addhi	r2, #1
 801d082:	605a      	strhi	r2, [r3, #4]
 801d084:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d088:	e884 0003 	stmia.w	r4, {r0, r1}
 801d08c:	4620      	mov	r0, r4
 801d08e:	bd10      	pop	{r4, pc}
 801d090:	2000036c 	.word	0x2000036c

0801d094 <EwCreateTimer>:
 801d094:	b570      	push	{r4, r5, r6, lr}
 801d096:	4606      	mov	r6, r0
 801d098:	460d      	mov	r5, r1
 801d09a:	2020      	movs	r0, #32
 801d09c:	f00c fb68 	bl	8029770 <EwAlloc>
 801d0a0:	4604      	mov	r4, r0
 801d0a2:	b950      	cbnz	r0, 801d0ba <EwCreateTimer+0x26>
 801d0a4:	2001      	movs	r0, #1
 801d0a6:	f7fc fdaf 	bl	8019c08 <EwImmediateReclaimMemory>
 801d0aa:	2800      	cmp	r0, #0
 801d0ac:	d1f5      	bne.n	801d09a <EwCreateTimer+0x6>
 801d0ae:	2001      	movs	r0, #1
 801d0b0:	f7fb fdfa 	bl	8018ca8 <EwError>
 801d0b4:	f00c fb60 	bl	8029778 <EwPanic>
 801d0b8:	e01f      	b.n	801d0fa <EwCreateTimer+0x66>
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d0c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d0c4:	7303      	strb	r3, [r0, #12]
 801d0c6:	4b0e      	ldr	r3, [pc, #56]	; (801d100 <EwCreateTimer+0x6c>)
 801d0c8:	689a      	ldr	r2, [r3, #8]
 801d0ca:	6002      	str	r2, [r0, #0]
 801d0cc:	4a0d      	ldr	r2, [pc, #52]	; (801d104 <EwCreateTimer+0x70>)
 801d0ce:	6098      	str	r0, [r3, #8]
 801d0d0:	6813      	ldr	r3, [r2, #0]
 801d0d2:	3320      	adds	r3, #32
 801d0d4:	6013      	str	r3, [r2, #0]
 801d0d6:	4a0c      	ldr	r2, [pc, #48]	; (801d108 <EwCreateTimer+0x74>)
 801d0d8:	6811      	ldr	r1, [r2, #0]
 801d0da:	428b      	cmp	r3, r1
 801d0dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d0e0:	dd00      	ble.n	801d0e4 <EwCreateTimer+0x50>
 801d0e2:	6013      	str	r3, [r2, #0]
 801d0e4:	4a09      	ldr	r2, [pc, #36]	; (801d10c <EwCreateTimer+0x78>)
 801d0e6:	6812      	ldr	r2, [r2, #0]
 801d0e8:	4413      	add	r3, r2
 801d0ea:	4a09      	ldr	r2, [pc, #36]	; (801d110 <EwCreateTimer+0x7c>)
 801d0ec:	6812      	ldr	r2, [r2, #0]
 801d0ee:	4413      	add	r3, r2
 801d0f0:	4a08      	ldr	r2, [pc, #32]	; (801d114 <EwCreateTimer+0x80>)
 801d0f2:	6811      	ldr	r1, [r2, #0]
 801d0f4:	428b      	cmp	r3, r1
 801d0f6:	dd00      	ble.n	801d0fa <EwCreateTimer+0x66>
 801d0f8:	6013      	str	r3, [r2, #0]
 801d0fa:	4620      	mov	r0, r4
 801d0fc:	bd70      	pop	{r4, r5, r6, pc}
 801d0fe:	bf00      	nop
 801d100:	2000036c 	.word	0x2000036c
 801d104:	200002d8 	.word	0x200002d8
 801d108:	200002e0 	.word	0x200002e0
 801d10c:	200002e4 	.word	0x200002e4
 801d110:	200002e8 	.word	0x200002e8
 801d114:	200002ec 	.word	0x200002ec

0801d118 <EwResetTimer>:
 801d118:	7b03      	ldrb	r3, [r0, #12]
 801d11a:	b12b      	cbz	r3, 801d128 <EwResetTimer+0x10>
 801d11c:	2300      	movs	r3, #0
 801d11e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d126:	7303      	strb	r3, [r0, #12]
 801d128:	4770      	bx	lr

0801d12a <EwDestroyTimer>:
 801d12a:	b510      	push	{r4, lr}
 801d12c:	4c10      	ldr	r4, [pc, #64]	; (801d170 <EwDestroyTimer+0x46>)
 801d12e:	68a2      	ldr	r2, [r4, #8]
 801d130:	f7ff fff2 	bl	801d118 <EwResetTimer>
 801d134:	4282      	cmp	r2, r0
 801d136:	4601      	mov	r1, r0
 801d138:	d10b      	bne.n	801d152 <EwDestroyTimer+0x28>
 801d13a:	6803      	ldr	r3, [r0, #0]
 801d13c:	60a3      	str	r3, [r4, #8]
 801d13e:	4a0d      	ldr	r2, [pc, #52]	; (801d174 <EwDestroyTimer+0x4a>)
 801d140:	6813      	ldr	r3, [r2, #0]
 801d142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d146:	3b20      	subs	r3, #32
 801d148:	4608      	mov	r0, r1
 801d14a:	6013      	str	r3, [r2, #0]
 801d14c:	f00c bb12 	b.w	8029774 <EwFree>
 801d150:	461a      	mov	r2, r3
 801d152:	b12a      	cbz	r2, 801d160 <EwDestroyTimer+0x36>
 801d154:	6813      	ldr	r3, [r2, #0]
 801d156:	428b      	cmp	r3, r1
 801d158:	d1fa      	bne.n	801d150 <EwDestroyTimer+0x26>
 801d15a:	680b      	ldr	r3, [r1, #0]
 801d15c:	6013      	str	r3, [r2, #0]
 801d15e:	e7ee      	b.n	801d13e <EwDestroyTimer+0x14>
 801d160:	f240 102d 	movw	r0, #301	; 0x12d
 801d164:	f7fb fdb6 	bl	8018cd4 <EwErrorPD>
 801d168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d16c:	f00c bb04 	b.w	8029778 <EwPanic>
 801d170:	2000036c 	.word	0x2000036c
 801d174:	200002d8 	.word	0x200002d8

0801d178 <EwStartTimer>:
 801d178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d17a:	f7ff ffcd 	bl	801d118 <EwResetTimer>
 801d17e:	2900      	cmp	r1, #0
 801d180:	4604      	mov	r4, r0
 801d182:	460d      	mov	r5, r1
 801d184:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d188:	dc02      	bgt.n	801d190 <EwStartTimer+0x18>
 801d18a:	2a00      	cmp	r2, #0
 801d18c:	dd0e      	ble.n	801d1ac <EwStartTimer+0x34>
 801d18e:	461d      	mov	r5, r3
 801d190:	e9c4 5306 	strd	r5, r3, [r4, #24]
 801d194:	4668      	mov	r0, sp
 801d196:	f7ff ff69 	bl	801d06c <EwGetCharLower+0xa>
 801d19a:	e9dd 1300 	ldrd	r1, r3, [sp]
 801d19e:	1949      	adds	r1, r1, r5
 801d1a0:	bf28      	it	cs
 801d1a2:	3301      	addcs	r3, #1
 801d1a4:	e9c4 1304 	strd	r1, r3, [r4, #16]
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	7323      	strb	r3, [r4, #12]
 801d1ac:	b003      	add	sp, #12
 801d1ae:	bd30      	pop	{r4, r5, pc}

0801d1b0 <EwProcessTimers>:
 801d1b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d1b4:	4b22      	ldr	r3, [pc, #136]	; (801d240 <EwProcessTimers+0x90>)
 801d1b6:	4668      	mov	r0, sp
 801d1b8:	689c      	ldr	r4, [r3, #8]
 801d1ba:	f7ff ff57 	bl	801d06c <EwGetCharLower+0xa>
 801d1be:	e9dd 6500 	ldrd	r6, r5, [sp]
 801d1c2:	f04f 0800 	mov.w	r8, #0
 801d1c6:	4647      	mov	r7, r8
 801d1c8:	b91c      	cbnz	r4, 801d1d2 <EwProcessTimers+0x22>
 801d1ca:	4640      	mov	r0, r8
 801d1cc:	b002      	add	sp, #8
 801d1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1d2:	7b23      	ldrb	r3, [r4, #12]
 801d1d4:	b35b      	cbz	r3, 801d22e <EwProcessTimers+0x7e>
 801d1d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801d1da:	1aa9      	subs	r1, r5, r2
 801d1dc:	bf08      	it	eq
 801d1de:	1af1      	subeq	r1, r6, r3
 801d1e0:	2900      	cmp	r1, #0
 801d1e2:	db24      	blt.n	801d22e <EwProcessTimers+0x7e>
 801d1e4:	69e1      	ldr	r1, [r4, #28]
 801d1e6:	2900      	cmp	r1, #0
 801d1e8:	dd23      	ble.n	801d232 <EwProcessTimers+0x82>
 801d1ea:	185b      	adds	r3, r3, r1
 801d1ec:	bf28      	it	cs
 801d1ee:	3201      	addcs	r2, #1
 801d1f0:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801d1f4:	1aaa      	subs	r2, r5, r2
 801d1f6:	bf08      	it	eq
 801d1f8:	1af2      	subeq	r2, r6, r3
 801d1fa:	2a00      	cmp	r2, #0
 801d1fc:	db12      	blt.n	801d224 <EwProcessTimers+0x74>
 801d1fe:	1af3      	subs	r3, r6, r3
 801d200:	fb93 f2f1 	sdiv	r2, r3, r1
 801d204:	fb01 3312 	mls	r3, r1, r2, r3
 801d208:	1af2      	subs	r2, r6, r3
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	bfcc      	ite	gt
 801d20e:	f105 33ff 	addgt.w	r3, r5, #4294967295
 801d212:	462b      	movle	r3, r5
 801d214:	42b2      	cmp	r2, r6
 801d216:	bf38      	it	cc
 801d218:	3301      	addcc	r3, #1
 801d21a:	1852      	adds	r2, r2, r1
 801d21c:	bf28      	it	cs
 801d21e:	3301      	addcs	r3, #1
 801d220:	e9c4 2304 	strd	r2, r3, [r4, #16]
 801d224:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 801d228:	4798      	blx	r3
 801d22a:	f108 0801 	add.w	r8, r8, #1
 801d22e:	6824      	ldr	r4, [r4, #0]
 801d230:	e7ca      	b.n	801d1c8 <EwProcessTimers+0x18>
 801d232:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801d236:	e9c4 7704 	strd	r7, r7, [r4, #16]
 801d23a:	7327      	strb	r7, [r4, #12]
 801d23c:	e7f2      	b.n	801d224 <EwProcessTimers+0x74>
 801d23e:	bf00      	nop
 801d240:	2000036c 	.word	0x2000036c

0801d244 <EwNextTimerExpiration>:
 801d244:	b513      	push	{r0, r1, r4, lr}
 801d246:	4b0b      	ldr	r3, [pc, #44]	; (801d274 <EwNextTimerExpiration+0x30>)
 801d248:	4668      	mov	r0, sp
 801d24a:	689c      	ldr	r4, [r3, #8]
 801d24c:	f7ff ff0e 	bl	801d06c <EwGetCharLower+0xa>
 801d250:	9a00      	ldr	r2, [sp, #0]
 801d252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d256:	b91c      	cbnz	r4, 801d260 <EwNextTimerExpiration+0x1c>
 801d258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801d25c:	b002      	add	sp, #8
 801d25e:	bd10      	pop	{r4, pc}
 801d260:	7b23      	ldrb	r3, [r4, #12]
 801d262:	b123      	cbz	r3, 801d26e <EwNextTimerExpiration+0x2a>
 801d264:	6923      	ldr	r3, [r4, #16]
 801d266:	1a9b      	subs	r3, r3, r2
 801d268:	4298      	cmp	r0, r3
 801d26a:	bfa8      	it	ge
 801d26c:	4618      	movge	r0, r3
 801d26e:	6824      	ldr	r4, [r4, #0]
 801d270:	e7f1      	b.n	801d256 <EwNextTimerExpiration+0x12>
 801d272:	bf00      	nop
 801d274:	2000036c 	.word	0x2000036c
	...

0801d280 <memchr>:
 801d280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801d284:	2a10      	cmp	r2, #16
 801d286:	db2b      	blt.n	801d2e0 <memchr+0x60>
 801d288:	f010 0f07 	tst.w	r0, #7
 801d28c:	d008      	beq.n	801d2a0 <memchr+0x20>
 801d28e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d292:	3a01      	subs	r2, #1
 801d294:	428b      	cmp	r3, r1
 801d296:	d02d      	beq.n	801d2f4 <memchr+0x74>
 801d298:	f010 0f07 	tst.w	r0, #7
 801d29c:	b342      	cbz	r2, 801d2f0 <memchr+0x70>
 801d29e:	d1f6      	bne.n	801d28e <memchr+0xe>
 801d2a0:	b4f0      	push	{r4, r5, r6, r7}
 801d2a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 801d2a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801d2aa:	f022 0407 	bic.w	r4, r2, #7
 801d2ae:	f07f 0700 	mvns.w	r7, #0
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 801d2b8:	3c08      	subs	r4, #8
 801d2ba:	ea85 0501 	eor.w	r5, r5, r1
 801d2be:	ea86 0601 	eor.w	r6, r6, r1
 801d2c2:	fa85 f547 	uadd8	r5, r5, r7
 801d2c6:	faa3 f587 	sel	r5, r3, r7
 801d2ca:	fa86 f647 	uadd8	r6, r6, r7
 801d2ce:	faa5 f687 	sel	r6, r5, r7
 801d2d2:	b98e      	cbnz	r6, 801d2f8 <memchr+0x78>
 801d2d4:	d1ee      	bne.n	801d2b4 <memchr+0x34>
 801d2d6:	bcf0      	pop	{r4, r5, r6, r7}
 801d2d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801d2dc:	f002 0207 	and.w	r2, r2, #7
 801d2e0:	b132      	cbz	r2, 801d2f0 <memchr+0x70>
 801d2e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d2e6:	3a01      	subs	r2, #1
 801d2e8:	ea83 0301 	eor.w	r3, r3, r1
 801d2ec:	b113      	cbz	r3, 801d2f4 <memchr+0x74>
 801d2ee:	d1f8      	bne.n	801d2e2 <memchr+0x62>
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	4770      	bx	lr
 801d2f4:	3801      	subs	r0, #1
 801d2f6:	4770      	bx	lr
 801d2f8:	2d00      	cmp	r5, #0
 801d2fa:	bf06      	itte	eq
 801d2fc:	4635      	moveq	r5, r6
 801d2fe:	3803      	subeq	r0, #3
 801d300:	3807      	subne	r0, #7
 801d302:	f015 0f01 	tst.w	r5, #1
 801d306:	d107      	bne.n	801d318 <memchr+0x98>
 801d308:	3001      	adds	r0, #1
 801d30a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801d30e:	bf02      	ittt	eq
 801d310:	3001      	addeq	r0, #1
 801d312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 801d316:	3001      	addeq	r0, #1
 801d318:	bcf0      	pop	{r4, r5, r6, r7}
 801d31a:	3801      	subs	r0, #1
 801d31c:	4770      	bx	lr
 801d31e:	bf00      	nop

0801d320 <__aeabi_drsub>:
 801d320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801d324:	e002      	b.n	801d32c <__adddf3>
 801d326:	bf00      	nop

0801d328 <__aeabi_dsub>:
 801d328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801d32c <__adddf3>:
 801d32c:	b530      	push	{r4, r5, lr}
 801d32e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801d332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801d336:	ea94 0f05 	teq	r4, r5
 801d33a:	bf08      	it	eq
 801d33c:	ea90 0f02 	teqeq	r0, r2
 801d340:	bf1f      	itttt	ne
 801d342:	ea54 0c00 	orrsne.w	ip, r4, r0
 801d346:	ea55 0c02 	orrsne.w	ip, r5, r2
 801d34a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801d34e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801d352:	f000 80e2 	beq.w	801d51a <__adddf3+0x1ee>
 801d356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801d35a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801d35e:	bfb8      	it	lt
 801d360:	426d      	neglt	r5, r5
 801d362:	dd0c      	ble.n	801d37e <__adddf3+0x52>
 801d364:	442c      	add	r4, r5
 801d366:	ea80 0202 	eor.w	r2, r0, r2
 801d36a:	ea81 0303 	eor.w	r3, r1, r3
 801d36e:	ea82 0000 	eor.w	r0, r2, r0
 801d372:	ea83 0101 	eor.w	r1, r3, r1
 801d376:	ea80 0202 	eor.w	r2, r0, r2
 801d37a:	ea81 0303 	eor.w	r3, r1, r3
 801d37e:	2d36      	cmp	r5, #54	; 0x36
 801d380:	bf88      	it	hi
 801d382:	bd30      	pophi	{r4, r5, pc}
 801d384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801d388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801d38c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 801d390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 801d394:	d002      	beq.n	801d39c <__adddf3+0x70>
 801d396:	4240      	negs	r0, r0
 801d398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801d39c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 801d3a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801d3a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801d3a8:	d002      	beq.n	801d3b0 <__adddf3+0x84>
 801d3aa:	4252      	negs	r2, r2
 801d3ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801d3b0:	ea94 0f05 	teq	r4, r5
 801d3b4:	f000 80a7 	beq.w	801d506 <__adddf3+0x1da>
 801d3b8:	f1a4 0401 	sub.w	r4, r4, #1
 801d3bc:	f1d5 0e20 	rsbs	lr, r5, #32
 801d3c0:	db0d      	blt.n	801d3de <__adddf3+0xb2>
 801d3c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 801d3c6:	fa22 f205 	lsr.w	r2, r2, r5
 801d3ca:	1880      	adds	r0, r0, r2
 801d3cc:	f141 0100 	adc.w	r1, r1, #0
 801d3d0:	fa03 f20e 	lsl.w	r2, r3, lr
 801d3d4:	1880      	adds	r0, r0, r2
 801d3d6:	fa43 f305 	asr.w	r3, r3, r5
 801d3da:	4159      	adcs	r1, r3
 801d3dc:	e00e      	b.n	801d3fc <__adddf3+0xd0>
 801d3de:	f1a5 0520 	sub.w	r5, r5, #32
 801d3e2:	f10e 0e20 	add.w	lr, lr, #32
 801d3e6:	2a01      	cmp	r2, #1
 801d3e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 801d3ec:	bf28      	it	cs
 801d3ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 801d3f2:	fa43 f305 	asr.w	r3, r3, r5
 801d3f6:	18c0      	adds	r0, r0, r3
 801d3f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801d3fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801d400:	d507      	bpl.n	801d412 <__adddf3+0xe6>
 801d402:	f04f 0e00 	mov.w	lr, #0
 801d406:	f1dc 0c00 	rsbs	ip, ip, #0
 801d40a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801d40e:	eb6e 0101 	sbc.w	r1, lr, r1
 801d412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801d416:	d31b      	bcc.n	801d450 <__adddf3+0x124>
 801d418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801d41c:	d30c      	bcc.n	801d438 <__adddf3+0x10c>
 801d41e:	0849      	lsrs	r1, r1, #1
 801d420:	ea5f 0030 	movs.w	r0, r0, rrx
 801d424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801d428:	f104 0401 	add.w	r4, r4, #1
 801d42c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 801d430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801d434:	f080 809a 	bcs.w	801d56c <__adddf3+0x240>
 801d438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801d43c:	bf08      	it	eq
 801d43e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801d442:	f150 0000 	adcs.w	r0, r0, #0
 801d446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801d44a:	ea41 0105 	orr.w	r1, r1, r5
 801d44e:	bd30      	pop	{r4, r5, pc}
 801d450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 801d454:	4140      	adcs	r0, r0
 801d456:	eb41 0101 	adc.w	r1, r1, r1
 801d45a:	3c01      	subs	r4, #1
 801d45c:	bf28      	it	cs
 801d45e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 801d462:	d2e9      	bcs.n	801d438 <__adddf3+0x10c>
 801d464:	f091 0f00 	teq	r1, #0
 801d468:	bf04      	itt	eq
 801d46a:	4601      	moveq	r1, r0
 801d46c:	2000      	moveq	r0, #0
 801d46e:	fab1 f381 	clz	r3, r1
 801d472:	bf08      	it	eq
 801d474:	3320      	addeq	r3, #32
 801d476:	f1a3 030b 	sub.w	r3, r3, #11
 801d47a:	f1b3 0220 	subs.w	r2, r3, #32
 801d47e:	da0c      	bge.n	801d49a <__adddf3+0x16e>
 801d480:	320c      	adds	r2, #12
 801d482:	dd08      	ble.n	801d496 <__adddf3+0x16a>
 801d484:	f102 0c14 	add.w	ip, r2, #20
 801d488:	f1c2 020c 	rsb	r2, r2, #12
 801d48c:	fa01 f00c 	lsl.w	r0, r1, ip
 801d490:	fa21 f102 	lsr.w	r1, r1, r2
 801d494:	e00c      	b.n	801d4b0 <__adddf3+0x184>
 801d496:	f102 0214 	add.w	r2, r2, #20
 801d49a:	bfd8      	it	le
 801d49c:	f1c2 0c20 	rsble	ip, r2, #32
 801d4a0:	fa01 f102 	lsl.w	r1, r1, r2
 801d4a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 801d4a8:	bfdc      	itt	le
 801d4aa:	ea41 010c 	orrle.w	r1, r1, ip
 801d4ae:	4090      	lslle	r0, r2
 801d4b0:	1ae4      	subs	r4, r4, r3
 801d4b2:	bfa2      	ittt	ge
 801d4b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801d4b8:	4329      	orrge	r1, r5
 801d4ba:	bd30      	popge	{r4, r5, pc}
 801d4bc:	ea6f 0404 	mvn.w	r4, r4
 801d4c0:	3c1f      	subs	r4, #31
 801d4c2:	da1c      	bge.n	801d4fe <__adddf3+0x1d2>
 801d4c4:	340c      	adds	r4, #12
 801d4c6:	dc0e      	bgt.n	801d4e6 <__adddf3+0x1ba>
 801d4c8:	f104 0414 	add.w	r4, r4, #20
 801d4cc:	f1c4 0220 	rsb	r2, r4, #32
 801d4d0:	fa20 f004 	lsr.w	r0, r0, r4
 801d4d4:	fa01 f302 	lsl.w	r3, r1, r2
 801d4d8:	ea40 0003 	orr.w	r0, r0, r3
 801d4dc:	fa21 f304 	lsr.w	r3, r1, r4
 801d4e0:	ea45 0103 	orr.w	r1, r5, r3
 801d4e4:	bd30      	pop	{r4, r5, pc}
 801d4e6:	f1c4 040c 	rsb	r4, r4, #12
 801d4ea:	f1c4 0220 	rsb	r2, r4, #32
 801d4ee:	fa20 f002 	lsr.w	r0, r0, r2
 801d4f2:	fa01 f304 	lsl.w	r3, r1, r4
 801d4f6:	ea40 0003 	orr.w	r0, r0, r3
 801d4fa:	4629      	mov	r1, r5
 801d4fc:	bd30      	pop	{r4, r5, pc}
 801d4fe:	fa21 f004 	lsr.w	r0, r1, r4
 801d502:	4629      	mov	r1, r5
 801d504:	bd30      	pop	{r4, r5, pc}
 801d506:	f094 0f00 	teq	r4, #0
 801d50a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801d50e:	bf06      	itte	eq
 801d510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801d514:	3401      	addeq	r4, #1
 801d516:	3d01      	subne	r5, #1
 801d518:	e74e      	b.n	801d3b8 <__adddf3+0x8c>
 801d51a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801d51e:	bf18      	it	ne
 801d520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801d524:	d029      	beq.n	801d57a <__adddf3+0x24e>
 801d526:	ea94 0f05 	teq	r4, r5
 801d52a:	bf08      	it	eq
 801d52c:	ea90 0f02 	teqeq	r0, r2
 801d530:	d005      	beq.n	801d53e <__adddf3+0x212>
 801d532:	ea54 0c00 	orrs.w	ip, r4, r0
 801d536:	bf04      	itt	eq
 801d538:	4619      	moveq	r1, r3
 801d53a:	4610      	moveq	r0, r2
 801d53c:	bd30      	pop	{r4, r5, pc}
 801d53e:	ea91 0f03 	teq	r1, r3
 801d542:	bf1e      	ittt	ne
 801d544:	2100      	movne	r1, #0
 801d546:	2000      	movne	r0, #0
 801d548:	bd30      	popne	{r4, r5, pc}
 801d54a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801d54e:	d105      	bne.n	801d55c <__adddf3+0x230>
 801d550:	0040      	lsls	r0, r0, #1
 801d552:	4149      	adcs	r1, r1
 801d554:	bf28      	it	cs
 801d556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801d55a:	bd30      	pop	{r4, r5, pc}
 801d55c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 801d560:	bf3c      	itt	cc
 801d562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801d566:	bd30      	popcc	{r4, r5, pc}
 801d568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801d56c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 801d570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801d574:	f04f 0000 	mov.w	r0, #0
 801d578:	bd30      	pop	{r4, r5, pc}
 801d57a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801d57e:	bf1a      	itte	ne
 801d580:	4619      	movne	r1, r3
 801d582:	4610      	movne	r0, r2
 801d584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801d588:	bf1c      	itt	ne
 801d58a:	460b      	movne	r3, r1
 801d58c:	4602      	movne	r2, r0
 801d58e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801d592:	bf06      	itte	eq
 801d594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801d598:	ea91 0f03 	teqeq	r1, r3
 801d59c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 801d5a0:	bd30      	pop	{r4, r5, pc}
 801d5a2:	bf00      	nop

0801d5a4 <__aeabi_ui2d>:
 801d5a4:	f090 0f00 	teq	r0, #0
 801d5a8:	bf04      	itt	eq
 801d5aa:	2100      	moveq	r1, #0
 801d5ac:	4770      	bxeq	lr
 801d5ae:	b530      	push	{r4, r5, lr}
 801d5b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801d5b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801d5b8:	f04f 0500 	mov.w	r5, #0
 801d5bc:	f04f 0100 	mov.w	r1, #0
 801d5c0:	e750      	b.n	801d464 <__adddf3+0x138>
 801d5c2:	bf00      	nop

0801d5c4 <__aeabi_i2d>:
 801d5c4:	f090 0f00 	teq	r0, #0
 801d5c8:	bf04      	itt	eq
 801d5ca:	2100      	moveq	r1, #0
 801d5cc:	4770      	bxeq	lr
 801d5ce:	b530      	push	{r4, r5, lr}
 801d5d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801d5d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801d5d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801d5dc:	bf48      	it	mi
 801d5de:	4240      	negmi	r0, r0
 801d5e0:	f04f 0100 	mov.w	r1, #0
 801d5e4:	e73e      	b.n	801d464 <__adddf3+0x138>
 801d5e6:	bf00      	nop

0801d5e8 <__aeabi_f2d>:
 801d5e8:	0042      	lsls	r2, r0, #1
 801d5ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801d5ee:	ea4f 0131 	mov.w	r1, r1, rrx
 801d5f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801d5f6:	bf1f      	itttt	ne
 801d5f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801d5fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 801d600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801d604:	4770      	bxne	lr
 801d606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801d60a:	bf08      	it	eq
 801d60c:	4770      	bxeq	lr
 801d60e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 801d612:	bf04      	itt	eq
 801d614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 801d618:	4770      	bxeq	lr
 801d61a:	b530      	push	{r4, r5, lr}
 801d61c:	f44f 7460 	mov.w	r4, #896	; 0x380
 801d620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801d624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d628:	e71c      	b.n	801d464 <__adddf3+0x138>
 801d62a:	bf00      	nop

0801d62c <__aeabi_ul2d>:
 801d62c:	ea50 0201 	orrs.w	r2, r0, r1
 801d630:	bf08      	it	eq
 801d632:	4770      	bxeq	lr
 801d634:	b530      	push	{r4, r5, lr}
 801d636:	f04f 0500 	mov.w	r5, #0
 801d63a:	e00a      	b.n	801d652 <__aeabi_l2d+0x16>

0801d63c <__aeabi_l2d>:
 801d63c:	ea50 0201 	orrs.w	r2, r0, r1
 801d640:	bf08      	it	eq
 801d642:	4770      	bxeq	lr
 801d644:	b530      	push	{r4, r5, lr}
 801d646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801d64a:	d502      	bpl.n	801d652 <__aeabi_l2d+0x16>
 801d64c:	4240      	negs	r0, r0
 801d64e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801d652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801d656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801d65a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801d65e:	f43f aed8 	beq.w	801d412 <__adddf3+0xe6>
 801d662:	f04f 0203 	mov.w	r2, #3
 801d666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801d66a:	bf18      	it	ne
 801d66c:	3203      	addne	r2, #3
 801d66e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801d672:	bf18      	it	ne
 801d674:	3203      	addne	r2, #3
 801d676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801d67a:	f1c2 0320 	rsb	r3, r2, #32
 801d67e:	fa00 fc03 	lsl.w	ip, r0, r3
 801d682:	fa20 f002 	lsr.w	r0, r0, r2
 801d686:	fa01 fe03 	lsl.w	lr, r1, r3
 801d68a:	ea40 000e 	orr.w	r0, r0, lr
 801d68e:	fa21 f102 	lsr.w	r1, r1, r2
 801d692:	4414      	add	r4, r2
 801d694:	e6bd      	b.n	801d412 <__adddf3+0xe6>
 801d696:	bf00      	nop

0801d698 <__aeabi_d2f>:
 801d698:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801d69c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 801d6a0:	bf24      	itt	cs
 801d6a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801d6a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801d6aa:	d90d      	bls.n	801d6c8 <__aeabi_d2f+0x30>
 801d6ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801d6b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801d6b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801d6b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d6bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 801d6c0:	bf08      	it	eq
 801d6c2:	f020 0001 	biceq.w	r0, r0, #1
 801d6c6:	4770      	bx	lr
 801d6c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801d6cc:	d121      	bne.n	801d712 <__aeabi_d2f+0x7a>
 801d6ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 801d6d2:	bfbc      	itt	lt
 801d6d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801d6d8:	4770      	bxlt	lr
 801d6da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d6de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 801d6e2:	f1c2 0218 	rsb	r2, r2, #24
 801d6e6:	f1c2 0c20 	rsb	ip, r2, #32
 801d6ea:	fa10 f30c 	lsls.w	r3, r0, ip
 801d6ee:	fa20 f002 	lsr.w	r0, r0, r2
 801d6f2:	bf18      	it	ne
 801d6f4:	f040 0001 	orrne.w	r0, r0, #1
 801d6f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801d6fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801d700:	fa03 fc0c 	lsl.w	ip, r3, ip
 801d704:	ea40 000c 	orr.w	r0, r0, ip
 801d708:	fa23 f302 	lsr.w	r3, r3, r2
 801d70c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d710:	e7cc      	b.n	801d6ac <__aeabi_d2f+0x14>
 801d712:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801d716:	d107      	bne.n	801d728 <__aeabi_d2f+0x90>
 801d718:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801d71c:	bf1e      	ittt	ne
 801d71e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 801d722:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801d726:	4770      	bxne	lr
 801d728:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801d72c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801d730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801d734:	4770      	bx	lr
 801d736:	bf00      	nop

0801d738 <__aeabi_uldivmod>:
 801d738:	b953      	cbnz	r3, 801d750 <__aeabi_uldivmod+0x18>
 801d73a:	b94a      	cbnz	r2, 801d750 <__aeabi_uldivmod+0x18>
 801d73c:	2900      	cmp	r1, #0
 801d73e:	bf08      	it	eq
 801d740:	2800      	cmpeq	r0, #0
 801d742:	bf1c      	itt	ne
 801d744:	f04f 31ff 	movne.w	r1, #4294967295
 801d748:	f04f 30ff 	movne.w	r0, #4294967295
 801d74c:	f000 b96e 	b.w	801da2c <__aeabi_idiv0>
 801d750:	f1ad 0c08 	sub.w	ip, sp, #8
 801d754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801d758:	f000 f806 	bl	801d768 <__udivmoddi4>
 801d75c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d764:	b004      	add	sp, #16
 801d766:	4770      	bx	lr

0801d768 <__udivmoddi4>:
 801d768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d76c:	9d08      	ldr	r5, [sp, #32]
 801d76e:	4604      	mov	r4, r0
 801d770:	468c      	mov	ip, r1
 801d772:	2b00      	cmp	r3, #0
 801d774:	f040 8083 	bne.w	801d87e <__udivmoddi4+0x116>
 801d778:	428a      	cmp	r2, r1
 801d77a:	4617      	mov	r7, r2
 801d77c:	d947      	bls.n	801d80e <__udivmoddi4+0xa6>
 801d77e:	fab2 f282 	clz	r2, r2
 801d782:	b142      	cbz	r2, 801d796 <__udivmoddi4+0x2e>
 801d784:	f1c2 0020 	rsb	r0, r2, #32
 801d788:	fa24 f000 	lsr.w	r0, r4, r0
 801d78c:	4091      	lsls	r1, r2
 801d78e:	4097      	lsls	r7, r2
 801d790:	ea40 0c01 	orr.w	ip, r0, r1
 801d794:	4094      	lsls	r4, r2
 801d796:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801d79a:	0c23      	lsrs	r3, r4, #16
 801d79c:	fbbc f6f8 	udiv	r6, ip, r8
 801d7a0:	fa1f fe87 	uxth.w	lr, r7
 801d7a4:	fb08 c116 	mls	r1, r8, r6, ip
 801d7a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801d7ac:	fb06 f10e 	mul.w	r1, r6, lr
 801d7b0:	4299      	cmp	r1, r3
 801d7b2:	d909      	bls.n	801d7c8 <__udivmoddi4+0x60>
 801d7b4:	18fb      	adds	r3, r7, r3
 801d7b6:	f106 30ff 	add.w	r0, r6, #4294967295
 801d7ba:	f080 8119 	bcs.w	801d9f0 <__udivmoddi4+0x288>
 801d7be:	4299      	cmp	r1, r3
 801d7c0:	f240 8116 	bls.w	801d9f0 <__udivmoddi4+0x288>
 801d7c4:	3e02      	subs	r6, #2
 801d7c6:	443b      	add	r3, r7
 801d7c8:	1a5b      	subs	r3, r3, r1
 801d7ca:	b2a4      	uxth	r4, r4
 801d7cc:	fbb3 f0f8 	udiv	r0, r3, r8
 801d7d0:	fb08 3310 	mls	r3, r8, r0, r3
 801d7d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801d7d8:	fb00 fe0e 	mul.w	lr, r0, lr
 801d7dc:	45a6      	cmp	lr, r4
 801d7de:	d909      	bls.n	801d7f4 <__udivmoddi4+0x8c>
 801d7e0:	193c      	adds	r4, r7, r4
 801d7e2:	f100 33ff 	add.w	r3, r0, #4294967295
 801d7e6:	f080 8105 	bcs.w	801d9f4 <__udivmoddi4+0x28c>
 801d7ea:	45a6      	cmp	lr, r4
 801d7ec:	f240 8102 	bls.w	801d9f4 <__udivmoddi4+0x28c>
 801d7f0:	3802      	subs	r0, #2
 801d7f2:	443c      	add	r4, r7
 801d7f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801d7f8:	eba4 040e 	sub.w	r4, r4, lr
 801d7fc:	2600      	movs	r6, #0
 801d7fe:	b11d      	cbz	r5, 801d808 <__udivmoddi4+0xa0>
 801d800:	40d4      	lsrs	r4, r2
 801d802:	2300      	movs	r3, #0
 801d804:	e9c5 4300 	strd	r4, r3, [r5]
 801d808:	4631      	mov	r1, r6
 801d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d80e:	b902      	cbnz	r2, 801d812 <__udivmoddi4+0xaa>
 801d810:	deff      	udf	#255	; 0xff
 801d812:	fab2 f282 	clz	r2, r2
 801d816:	2a00      	cmp	r2, #0
 801d818:	d150      	bne.n	801d8bc <__udivmoddi4+0x154>
 801d81a:	1bcb      	subs	r3, r1, r7
 801d81c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801d820:	fa1f f887 	uxth.w	r8, r7
 801d824:	2601      	movs	r6, #1
 801d826:	fbb3 fcfe 	udiv	ip, r3, lr
 801d82a:	0c21      	lsrs	r1, r4, #16
 801d82c:	fb0e 331c 	mls	r3, lr, ip, r3
 801d830:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801d834:	fb08 f30c 	mul.w	r3, r8, ip
 801d838:	428b      	cmp	r3, r1
 801d83a:	d907      	bls.n	801d84c <__udivmoddi4+0xe4>
 801d83c:	1879      	adds	r1, r7, r1
 801d83e:	f10c 30ff 	add.w	r0, ip, #4294967295
 801d842:	d202      	bcs.n	801d84a <__udivmoddi4+0xe2>
 801d844:	428b      	cmp	r3, r1
 801d846:	f200 80e9 	bhi.w	801da1c <__udivmoddi4+0x2b4>
 801d84a:	4684      	mov	ip, r0
 801d84c:	1ac9      	subs	r1, r1, r3
 801d84e:	b2a3      	uxth	r3, r4
 801d850:	fbb1 f0fe 	udiv	r0, r1, lr
 801d854:	fb0e 1110 	mls	r1, lr, r0, r1
 801d858:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 801d85c:	fb08 f800 	mul.w	r8, r8, r0
 801d860:	45a0      	cmp	r8, r4
 801d862:	d907      	bls.n	801d874 <__udivmoddi4+0x10c>
 801d864:	193c      	adds	r4, r7, r4
 801d866:	f100 33ff 	add.w	r3, r0, #4294967295
 801d86a:	d202      	bcs.n	801d872 <__udivmoddi4+0x10a>
 801d86c:	45a0      	cmp	r8, r4
 801d86e:	f200 80d9 	bhi.w	801da24 <__udivmoddi4+0x2bc>
 801d872:	4618      	mov	r0, r3
 801d874:	eba4 0408 	sub.w	r4, r4, r8
 801d878:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801d87c:	e7bf      	b.n	801d7fe <__udivmoddi4+0x96>
 801d87e:	428b      	cmp	r3, r1
 801d880:	d909      	bls.n	801d896 <__udivmoddi4+0x12e>
 801d882:	2d00      	cmp	r5, #0
 801d884:	f000 80b1 	beq.w	801d9ea <__udivmoddi4+0x282>
 801d888:	2600      	movs	r6, #0
 801d88a:	e9c5 0100 	strd	r0, r1, [r5]
 801d88e:	4630      	mov	r0, r6
 801d890:	4631      	mov	r1, r6
 801d892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d896:	fab3 f683 	clz	r6, r3
 801d89a:	2e00      	cmp	r6, #0
 801d89c:	d14a      	bne.n	801d934 <__udivmoddi4+0x1cc>
 801d89e:	428b      	cmp	r3, r1
 801d8a0:	d302      	bcc.n	801d8a8 <__udivmoddi4+0x140>
 801d8a2:	4282      	cmp	r2, r0
 801d8a4:	f200 80b8 	bhi.w	801da18 <__udivmoddi4+0x2b0>
 801d8a8:	1a84      	subs	r4, r0, r2
 801d8aa:	eb61 0103 	sbc.w	r1, r1, r3
 801d8ae:	2001      	movs	r0, #1
 801d8b0:	468c      	mov	ip, r1
 801d8b2:	2d00      	cmp	r5, #0
 801d8b4:	d0a8      	beq.n	801d808 <__udivmoddi4+0xa0>
 801d8b6:	e9c5 4c00 	strd	r4, ip, [r5]
 801d8ba:	e7a5      	b.n	801d808 <__udivmoddi4+0xa0>
 801d8bc:	f1c2 0320 	rsb	r3, r2, #32
 801d8c0:	fa20 f603 	lsr.w	r6, r0, r3
 801d8c4:	4097      	lsls	r7, r2
 801d8c6:	fa01 f002 	lsl.w	r0, r1, r2
 801d8ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801d8ce:	40d9      	lsrs	r1, r3
 801d8d0:	4330      	orrs	r0, r6
 801d8d2:	0c03      	lsrs	r3, r0, #16
 801d8d4:	fbb1 f6fe 	udiv	r6, r1, lr
 801d8d8:	fa1f f887 	uxth.w	r8, r7
 801d8dc:	fb0e 1116 	mls	r1, lr, r6, r1
 801d8e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801d8e4:	fb06 f108 	mul.w	r1, r6, r8
 801d8e8:	4299      	cmp	r1, r3
 801d8ea:	fa04 f402 	lsl.w	r4, r4, r2
 801d8ee:	d909      	bls.n	801d904 <__udivmoddi4+0x19c>
 801d8f0:	18fb      	adds	r3, r7, r3
 801d8f2:	f106 3cff 	add.w	ip, r6, #4294967295
 801d8f6:	f080 808d 	bcs.w	801da14 <__udivmoddi4+0x2ac>
 801d8fa:	4299      	cmp	r1, r3
 801d8fc:	f240 808a 	bls.w	801da14 <__udivmoddi4+0x2ac>
 801d900:	3e02      	subs	r6, #2
 801d902:	443b      	add	r3, r7
 801d904:	1a5b      	subs	r3, r3, r1
 801d906:	b281      	uxth	r1, r0
 801d908:	fbb3 f0fe 	udiv	r0, r3, lr
 801d90c:	fb0e 3310 	mls	r3, lr, r0, r3
 801d910:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801d914:	fb00 f308 	mul.w	r3, r0, r8
 801d918:	428b      	cmp	r3, r1
 801d91a:	d907      	bls.n	801d92c <__udivmoddi4+0x1c4>
 801d91c:	1879      	adds	r1, r7, r1
 801d91e:	f100 3cff 	add.w	ip, r0, #4294967295
 801d922:	d273      	bcs.n	801da0c <__udivmoddi4+0x2a4>
 801d924:	428b      	cmp	r3, r1
 801d926:	d971      	bls.n	801da0c <__udivmoddi4+0x2a4>
 801d928:	3802      	subs	r0, #2
 801d92a:	4439      	add	r1, r7
 801d92c:	1acb      	subs	r3, r1, r3
 801d92e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801d932:	e778      	b.n	801d826 <__udivmoddi4+0xbe>
 801d934:	f1c6 0c20 	rsb	ip, r6, #32
 801d938:	fa03 f406 	lsl.w	r4, r3, r6
 801d93c:	fa22 f30c 	lsr.w	r3, r2, ip
 801d940:	431c      	orrs	r4, r3
 801d942:	fa20 f70c 	lsr.w	r7, r0, ip
 801d946:	fa01 f306 	lsl.w	r3, r1, r6
 801d94a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 801d94e:	fa21 f10c 	lsr.w	r1, r1, ip
 801d952:	431f      	orrs	r7, r3
 801d954:	0c3b      	lsrs	r3, r7, #16
 801d956:	fbb1 f9fe 	udiv	r9, r1, lr
 801d95a:	fa1f f884 	uxth.w	r8, r4
 801d95e:	fb0e 1119 	mls	r1, lr, r9, r1
 801d962:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 801d966:	fb09 fa08 	mul.w	sl, r9, r8
 801d96a:	458a      	cmp	sl, r1
 801d96c:	fa02 f206 	lsl.w	r2, r2, r6
 801d970:	fa00 f306 	lsl.w	r3, r0, r6
 801d974:	d908      	bls.n	801d988 <__udivmoddi4+0x220>
 801d976:	1861      	adds	r1, r4, r1
 801d978:	f109 30ff 	add.w	r0, r9, #4294967295
 801d97c:	d248      	bcs.n	801da10 <__udivmoddi4+0x2a8>
 801d97e:	458a      	cmp	sl, r1
 801d980:	d946      	bls.n	801da10 <__udivmoddi4+0x2a8>
 801d982:	f1a9 0902 	sub.w	r9, r9, #2
 801d986:	4421      	add	r1, r4
 801d988:	eba1 010a 	sub.w	r1, r1, sl
 801d98c:	b2bf      	uxth	r7, r7
 801d98e:	fbb1 f0fe 	udiv	r0, r1, lr
 801d992:	fb0e 1110 	mls	r1, lr, r0, r1
 801d996:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801d99a:	fb00 f808 	mul.w	r8, r0, r8
 801d99e:	45b8      	cmp	r8, r7
 801d9a0:	d907      	bls.n	801d9b2 <__udivmoddi4+0x24a>
 801d9a2:	19e7      	adds	r7, r4, r7
 801d9a4:	f100 31ff 	add.w	r1, r0, #4294967295
 801d9a8:	d22e      	bcs.n	801da08 <__udivmoddi4+0x2a0>
 801d9aa:	45b8      	cmp	r8, r7
 801d9ac:	d92c      	bls.n	801da08 <__udivmoddi4+0x2a0>
 801d9ae:	3802      	subs	r0, #2
 801d9b0:	4427      	add	r7, r4
 801d9b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801d9b6:	eba7 0708 	sub.w	r7, r7, r8
 801d9ba:	fba0 8902 	umull	r8, r9, r0, r2
 801d9be:	454f      	cmp	r7, r9
 801d9c0:	46c6      	mov	lr, r8
 801d9c2:	4649      	mov	r1, r9
 801d9c4:	d31a      	bcc.n	801d9fc <__udivmoddi4+0x294>
 801d9c6:	d017      	beq.n	801d9f8 <__udivmoddi4+0x290>
 801d9c8:	b15d      	cbz	r5, 801d9e2 <__udivmoddi4+0x27a>
 801d9ca:	ebb3 020e 	subs.w	r2, r3, lr
 801d9ce:	eb67 0701 	sbc.w	r7, r7, r1
 801d9d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 801d9d6:	40f2      	lsrs	r2, r6
 801d9d8:	ea4c 0202 	orr.w	r2, ip, r2
 801d9dc:	40f7      	lsrs	r7, r6
 801d9de:	e9c5 2700 	strd	r2, r7, [r5]
 801d9e2:	2600      	movs	r6, #0
 801d9e4:	4631      	mov	r1, r6
 801d9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9ea:	462e      	mov	r6, r5
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	e70b      	b.n	801d808 <__udivmoddi4+0xa0>
 801d9f0:	4606      	mov	r6, r0
 801d9f2:	e6e9      	b.n	801d7c8 <__udivmoddi4+0x60>
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	e6fd      	b.n	801d7f4 <__udivmoddi4+0x8c>
 801d9f8:	4543      	cmp	r3, r8
 801d9fa:	d2e5      	bcs.n	801d9c8 <__udivmoddi4+0x260>
 801d9fc:	ebb8 0e02 	subs.w	lr, r8, r2
 801da00:	eb69 0104 	sbc.w	r1, r9, r4
 801da04:	3801      	subs	r0, #1
 801da06:	e7df      	b.n	801d9c8 <__udivmoddi4+0x260>
 801da08:	4608      	mov	r0, r1
 801da0a:	e7d2      	b.n	801d9b2 <__udivmoddi4+0x24a>
 801da0c:	4660      	mov	r0, ip
 801da0e:	e78d      	b.n	801d92c <__udivmoddi4+0x1c4>
 801da10:	4681      	mov	r9, r0
 801da12:	e7b9      	b.n	801d988 <__udivmoddi4+0x220>
 801da14:	4666      	mov	r6, ip
 801da16:	e775      	b.n	801d904 <__udivmoddi4+0x19c>
 801da18:	4630      	mov	r0, r6
 801da1a:	e74a      	b.n	801d8b2 <__udivmoddi4+0x14a>
 801da1c:	f1ac 0c02 	sub.w	ip, ip, #2
 801da20:	4439      	add	r1, r7
 801da22:	e713      	b.n	801d84c <__udivmoddi4+0xe4>
 801da24:	3802      	subs	r0, #2
 801da26:	443c      	add	r4, r7
 801da28:	e724      	b.n	801d874 <__udivmoddi4+0x10c>
 801da2a:	bf00      	nop

0801da2c <__aeabi_idiv0>:
 801da2c:	4770      	bx	lr
 801da2e:	bf00      	nop

0801da30 <ApplicationScreenBase__Init>:
static const XPoint _Const0029 = { 214, 198 };
static const XPoint _Const002A = { 214, 0 };

/* Initializer for the class 'Application::ScreenBase' */
void ApplicationScreenBase__Init( ApplicationScreenBase _this, XObject aLink, XHandle aArg )
{
 801da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da34:	4604      	mov	r4, r0
 801da36:	b082      	sub	sp, #8

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationScreenBase );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801da38:	f100 0658 	add.w	r6, r0, #88	; 0x58

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( ApplicationScreenBase );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0000 );
 801da3c:	4d13      	ldr	r5, [pc, #76]	; (801da8c <ApplicationScreenBase__Init+0x5c>)
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationScreenBase );
 801da3e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 801da94 <ApplicationScreenBase__Init+0x64>
  CoreGroup__Init( &_this->_.Super, aLink, aArg );
 801da42:	f004 fb3b 	bl	80220bc <CoreGroup__Init>
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801da46:	4630      	mov	r0, r6
 801da48:	4621      	mov	r1, r4
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationScreenBase );
 801da4a:	f8c4 800c 	str.w	r8, [r4, #12]
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801da4e:	2200      	movs	r2, #0
 801da50:	f008 f83a 	bl	8025ac8 <ViewsRectangle__Init>
  CoreRectView__OnSetBounds( _this, _Const0000 );
 801da54:	68ef      	ldr	r7, [r5, #12]
  _this->_.VMT = EW_CLASS( ApplicationScreenBase );
 801da56:	f8c4 8000 	str.w	r8, [r4]
  CoreRectView__OnSetBounds( _this, _Const0000 );
 801da5a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801da5e:	4620      	mov	r0, r4
 801da60:	9700      	str	r7, [sp, #0]
 801da62:	f004 f879 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0000 );
 801da66:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801da6a:	4630      	mov	r0, r6
 801da6c:	9700      	str	r7, [sp, #0]
 801da6e:	f004 f873 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0001 );
 801da72:	4b07      	ldr	r3, [pc, #28]	; (801da90 <ApplicationScreenBase__Init+0x60>)
 801da74:	4630      	mov	r0, r6
 801da76:	6819      	ldr	r1, [r3, #0]
 801da78:	f008 fad8 	bl	802602c <ViewsRectangle_OnSetColor>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Rectangle ), 0 );
 801da7c:	4631      	mov	r1, r6
 801da7e:	4620      	mov	r0, r4
 801da80:	2200      	movs	r2, #0
}
 801da82:	b002      	add	sp, #8
 801da84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Rectangle ), 0 );
 801da88:	f004 bc5a 	b.w	8022340 <CoreGroup_Add>
 801da8c:	0803715c 	.word	0x0803715c
 801da90:	0803716c 	.word	0x0803716c
 801da94:	0803753c 	.word	0x0803753c

0801da98 <ApplicationScreenBase__ReInit>:

/* Re-Initializer for the class 'Application::ScreenBase' */
void ApplicationScreenBase__ReInit( ApplicationScreenBase _this )
{
 801da98:	b510      	push	{r4, lr}
 801da9a:	4604      	mov	r4, r0
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_.Super );
 801da9c:	f001 fe0c 	bl	801f6b8 <CoreGroup__ReInit>

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
 801daa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801daa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsRectangle__ReInit( &_this->Rectangle );
 801daa8:	f008 b84c 	b.w	8025b44 <ViewsRectangle__ReInit>

0801daac <ApplicationScreenBase__Done>:

/* Finalizer method for the class 'Application::ScreenBase' */
void ApplicationScreenBase__Done( ApplicationScreenBase _this )
{
 801daac:	b510      	push	{r4, lr}
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 801daae:	4b05      	ldr	r3, [pc, #20]	; (801dac4 <ApplicationScreenBase__Done+0x18>)
{
 801dab0:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 801dab2:	f840 3b58 	str.w	r3, [r0], #88

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
 801dab6:	f008 f84d 	bl	8025b54 <ViewsRectangle__Done>

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_.Super );
 801daba:	4620      	mov	r0, r4
}
 801dabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup__Done( &_this->_.Super );
 801dac0:	f001 be3c 	b.w	801f73c <CoreGroup__Done>
 801dac4:	08037c98 	.word	0x08037c98

0801dac8 <ApplicationApplication_GoToGauge>:
  CoreRoot__Done( &_this->_.Super );
}

/* 'C' function for method : 'Application::Application.GoToGauge()' */
void ApplicationApplication_GoToGauge( ApplicationApplication _this, XObject sender )
{
 801dac8:	b570      	push	{r4, r5, r6, lr}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Super4.Owner != 0 )
 801daca:	6984      	ldr	r4, [r0, #24]
{
 801dacc:	b08a      	sub	sp, #40	; 0x28
  if ( _this->Super4.Owner != 0 )
 801dace:	b1c4      	cbz	r4, 801db02 <ApplicationApplication_GoToGauge+0x3a>
    CoreGroup_PresentDialog( _this->Super4.Owner, ((CoreGroup)EwNewObject( ApplicationGaugeScreen, 
 801dad0:	2100      	movs	r1, #0
 801dad2:	480d      	ldr	r0, [pc, #52]	; (801db08 <ApplicationApplication_GoToGauge+0x40>)
 801dad4:	f7fb fdbe 	bl	8019654 <EwNewObjectIndirect>
 801dad8:	4a0c      	ldr	r2, [pc, #48]	; (801db0c <ApplicationApplication_GoToGauge+0x44>)
 801dada:	4606      	mov	r6, r0
 801dadc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dae0:	2300      	movs	r3, #0
 801dae2:	aa04      	add	r2, sp, #16
 801dae4:	ad06      	add	r5, sp, #24
 801dae6:	9308      	str	r3, [sp, #32]
 801dae8:	e885 0003 	stmia.w	r5, {r0, r1}
 801daec:	e882 0003 	stmia.w	r2, {r0, r1}
 801daf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801daf4:	e9cd 3300 	strd	r3, r3, [sp]
 801daf8:	4631      	mov	r1, r6
 801dafa:	4620      	mov	r0, r4
 801dafc:	461a      	mov	r2, r3
 801dafe:	f006 faa1 	bl	8024044 <CoreGroup_PresentDialog>
    0 )), 0, 0, 0, 0, 0, 0, EwNullSlot, EwNullSlot, 0 );
}
 801db02:	b00a      	add	sp, #40	; 0x28
 801db04:	bd70      	pop	{r4, r5, r6, pc}
 801db06:	bf00      	nop
 801db08:	08037444 	.word	0x08037444
 801db0c:	08036b64 	.word	0x08036b64

0801db10 <ApplicationGaugeScreen_GoToCommands>:
}

/* 'C' function for method : 'Application::GaugeScreen.GoToCommands()' */
void ApplicationGaugeScreen_GoToCommands( ApplicationGaugeScreen _this, XObject 
  sender )
{
 801db10:	b570      	push	{r4, r5, r6, lr}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Super4.Owner != 0 )
 801db12:	6984      	ldr	r4, [r0, #24]
{
 801db14:	b08a      	sub	sp, #40	; 0x28
  if ( _this->Super4.Owner != 0 )
 801db16:	b1c4      	cbz	r4, 801db4a <ApplicationGaugeScreen_GoToCommands+0x3a>
    CoreGroup_PresentDialog( _this->Super4.Owner, ((CoreGroup)EwNewObject( ApplicationCmdScreen, 
 801db18:	2100      	movs	r1, #0
 801db1a:	480d      	ldr	r0, [pc, #52]	; (801db50 <ApplicationGaugeScreen_GoToCommands+0x40>)
 801db1c:	f7fb fd9a 	bl	8019654 <EwNewObjectIndirect>
 801db20:	4a0c      	ldr	r2, [pc, #48]	; (801db54 <ApplicationGaugeScreen_GoToCommands+0x44>)
 801db22:	4606      	mov	r6, r0
 801db24:	e892 0003 	ldmia.w	r2, {r0, r1}
 801db28:	2300      	movs	r3, #0
 801db2a:	aa04      	add	r2, sp, #16
 801db2c:	ad06      	add	r5, sp, #24
 801db2e:	9308      	str	r3, [sp, #32]
 801db30:	e885 0003 	stmia.w	r5, {r0, r1}
 801db34:	e882 0003 	stmia.w	r2, {r0, r1}
 801db38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801db3c:	e9cd 3300 	strd	r3, r3, [sp]
 801db40:	4631      	mov	r1, r6
 801db42:	4620      	mov	r0, r4
 801db44:	461a      	mov	r2, r3
 801db46:	f006 fa7d 	bl	8024044 <CoreGroup_PresentDialog>
    0 )), 0, 0, 0, 0, 0, 0, EwNullSlot, EwNullSlot, 0 );
}
 801db4a:	b00a      	add	sp, #40	; 0x28
 801db4c:	bd70      	pop	{r4, r5, r6, pc}
 801db4e:	bf00      	nop
 801db50:	080373c8 	.word	0x080373c8
 801db54:	08036b64 	.word	0x08036b64

0801db58 <ApplicationPushButton_UpdateViewState>:
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationPushButton_UpdateViewState( ApplicationPushButton _this, XSet aState )
{
 801db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db5c:	4604      	mov	r4, r0
 801db5e:	b08a      	sub	sp, #40	; 0x28
 801db60:	460d      	mov	r5, r1
  XBool isEnabled;
  XBool isSelected;
  XBool isPressed;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 801db62:	f001 fcf7 	bl	801f554 <CoreGroup_UpdateViewState>
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
  || _this->FlashTimer.Enabled );
 801db66:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 801db6a:	f005 0210 	and.w	r2, r5, #16
 801db6e:	f3c5 1600 	ubfx	r6, r5, #4, #1
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
 801db72:	f3c5 1540 	ubfx	r5, r5, #5, #1
  || _this->FlashTimer.Enabled );
 801db76:	b16b      	cbz	r3, 801db94 <ApplicationPushButton_UpdateViewState+0x3c>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801db78:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
 801db7c:	b153      	cbz	r3, 801db94 <ApplicationPushButton_UpdateViewState+0x3c>

  if ( isEnabled && isPressed )
 801db7e:	b97a      	cbnz	r2, 801dba0 <ApplicationPushButton_UpdateViewState+0x48>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801db80:	2301      	movs	r3, #1
    CoreGroup_PresentDialog( _this->Super4.Owner, ((CoreGroup)EwNewObject( ApplicationGaugeScreen, 
    0 )), 0, 0, 0, 0, 0, 0, EwNullSlot, EwNullSlot, 0 );

  _this->enabled = isEnabled;
 801db82:	f884 61c0 	strb.w	r6, [r4, #448]	; 0x1c0
  _this->selected = isSelected;
 801db86:	f884 51c1 	strb.w	r5, [r4, #449]	; 0x1c1
  _this->pressed = isPressed;
 801db8a:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
}
 801db8e:	b00a      	add	sp, #40	; 0x28
 801db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  || _this->FlashTimer.Enabled );
 801db94:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d0f2      	beq.n	801db82 <ApplicationPushButton_UpdateViewState+0x2a>
  if ( isEnabled && isPressed )
 801db9c:	2a00      	cmp	r2, #0
 801db9e:	d0ef      	beq.n	801db80 <ApplicationPushButton_UpdateViewState+0x28>
    CoreGroup_PresentDialog( _this->Super4.Owner, ((CoreGroup)EwNewObject( ApplicationGaugeScreen, 
 801dba0:	2100      	movs	r1, #0
 801dba2:	480e      	ldr	r0, [pc, #56]	; (801dbdc <ApplicationPushButton_UpdateViewState+0x84>)
 801dba4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 801dba8:	f7fb fd54 	bl	8019654 <EwNewObjectIndirect>
 801dbac:	4a0c      	ldr	r2, [pc, #48]	; (801dbe0 <ApplicationPushButton_UpdateViewState+0x88>)
 801dbae:	4684      	mov	ip, r0
 801dbb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	aa04      	add	r2, sp, #16
 801dbb8:	af06      	add	r7, sp, #24
 801dbba:	9308      	str	r3, [sp, #32]
 801dbbc:	e887 0003 	stmia.w	r7, {r0, r1}
 801dbc0:	e882 0003 	stmia.w	r2, {r0, r1}
 801dbc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801dbc8:	e9cd 3300 	strd	r3, r3, [sp]
 801dbcc:	461a      	mov	r2, r3
 801dbce:	4661      	mov	r1, ip
 801dbd0:	4640      	mov	r0, r8
 801dbd2:	f006 fa37 	bl	8024044 <CoreGroup_PresentDialog>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801dbd6:	2301      	movs	r3, #1
 801dbd8:	e7d3      	b.n	801db82 <ApplicationPushButton_UpdateViewState+0x2a>
 801dbda:	bf00      	nop
 801dbdc:	08037444 	.word	0x08037444
 801dbe0:	08036b64 	.word	0x08036b64

0801dbe4 <ApplicationGaugeScreen__Init>:
{
 801dbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbe8:	4604      	mov	r4, r0
 801dbea:	b085      	sub	sp, #20
  ViewsImage__Init( &_this->Image, &_this->_.XObject, 0 );
 801dbec:	f100 0794 	add.w	r7, r0, #148	; 0x94
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationGaugeScreen );
 801dbf0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801dce4 <ApplicationGaugeScreen__Init+0x100>
  CoreRectView__OnSetBounds( _this, _Const0008 );
 801dbf4:	4d32      	ldr	r5, [pc, #200]	; (801dcc0 <ApplicationGaugeScreen__Init+0xdc>)
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_.XObject, 0 );
 801dbf6:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
  ApplicationScreenBase__Init( &_this->_.Super, aLink, aArg );
 801dbfa:	f7ff ff19 	bl	801da30 <ApplicationScreenBase__Init>
  ViewsImage__Init( &_this->Image, &_this->_.XObject, 0 );
 801dbfe:	4638      	mov	r0, r7
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationGaugeScreen );
 801dc00:	f8c4 900c 	str.w	r9, [r4, #12]
  ViewsImage__Init( &_this->Image, &_this->_.XObject, 0 );
 801dc04:	4621      	mov	r1, r4
 801dc06:	2200      	movs	r2, #0
 801dc08:	f007 ff80 	bl	8025b0c <ViewsImage__Init>
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_.XObject, 0 );
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	4621      	mov	r1, r4
 801dc10:	2200      	movs	r2, #0
 801dc12:	f009 fecf 	bl	80279b4 <WidgetSetPushButton__Init>
  CoreRectView__OnSetBounds( _this, _Const0008 );
 801dc16:	f8d5 800c 	ldr.w	r8, [r5, #12]
  _this->_.VMT = EW_CLASS( ApplicationGaugeScreen );
 801dc1a:	f8c4 9000 	str.w	r9, [r4]
  CoreRectView__OnSetBounds( _this, _Const0008 );
 801dc1e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801dc22:	4620      	mov	r0, r4
 801dc24:	f8cd 8000 	str.w	r8, [sp]
 801dc28:	f003 ff96 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle, _Const0008 );
 801dc2c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801dc30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc34:	f8cd 8000 	str.w	r8, [sp]
 801dc38:	f003 ff8e 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Image, _Const0009 );
 801dc3c:	4b21      	ldr	r3, [pc, #132]	; (801dcc4 <ApplicationGaugeScreen__Init+0xe0>)
 801dc3e:	68da      	ldr	r2, [r3, #12]
 801dc40:	9200      	str	r2, [sp, #0]
 801dc42:	4638      	mov	r0, r7
 801dc44:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc46:	f003 ff87 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->PushButton, _Const000A );
 801dc4a:	4b1f      	ldr	r3, [pc, #124]	; (801dcc8 <ApplicationGaugeScreen__Init+0xe4>)
 801dc4c:	68da      	ldr	r2, [r3, #12]
 801dc4e:	9200      	str	r2, [sp, #0]
 801dc50:	4630      	mov	r0, r6
 801dc52:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc54:	f003 ff80 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreGroup__OnSetOpacity( &_this->PushButton, 0 );
 801dc58:	4630      	mov	r0, r6
 801dc5a:	2100      	movs	r1, #0
 801dc5c:	f004 f9ee 	bl	802203c <CoreGroup__OnSetOpacity>
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const000B ));
 801dc60:	481a      	ldr	r0, [pc, #104]	; (801dccc <ApplicationGaugeScreen__Init+0xe8>)
 801dc62:	f7fe fbe5 	bl	801c430 <EwLoadString>
 801dc66:	4601      	mov	r1, r0
 801dc68:	4630      	mov	r0, r6
 801dc6a:	f00a fceb 	bl	8028644 <WidgetSetPushButton_OnSetLabel>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Image ), 0 );
 801dc6e:	4639      	mov	r1, r7
 801dc70:	4620      	mov	r0, r4
 801dc72:	2200      	movs	r2, #0
 801dc74:	f004 fb64 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->PushButton ), 0 );
 801dc78:	2200      	movs	r2, #0
 801dc7a:	4631      	mov	r1, r6
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f004 fb5f 	bl	8022340 <CoreGroup_Add>
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationGauge, ResourcesBitmap ));
 801dc82:	4913      	ldr	r1, [pc, #76]	; (801dcd0 <ApplicationGaugeScreen__Init+0xec>)
 801dc84:	4813      	ldr	r0, [pc, #76]	; (801dcd4 <ApplicationGaugeScreen__Init+0xf0>)
 801dc86:	f7fc fc9f 	bl	801a5c8 <EwLoadResource>
  _this->PushButton.OnActivate = EwNewSlot( _this, ApplicationGaugeScreen_GoToCommands );
 801dc8a:	ad02      	add	r5, sp, #8
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationGauge, ResourcesBitmap ));
 801dc8c:	4601      	mov	r1, r0
 801dc8e:	4638      	mov	r0, r7
 801dc90:	f008 fd24 	bl	80266dc <ViewsImage_OnSetBitmap>
  _this->PushButton.OnActivate = EwNewSlot( _this, ApplicationGaugeScreen_GoToCommands );
 801dc94:	4a10      	ldr	r2, [pc, #64]	; (801dcd8 <ApplicationGaugeScreen__Init+0xf4>)
 801dc96:	4621      	mov	r1, r4
 801dc98:	4628      	mov	r0, r5
 801dc9a:	f7fd fa9b 	bl	801b1d4 <EwNewSlot>
 801dc9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801dca2:	f504 74a2 	add.w	r4, r4, #324	; 0x144
 801dca6:	e884 0003 	stmia.w	r4, {r0, r1}
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Medium, 
 801dcaa:	490c      	ldr	r1, [pc, #48]	; (801dcdc <ApplicationGaugeScreen__Init+0xf8>)
 801dcac:	480c      	ldr	r0, [pc, #48]	; (801dce0 <ApplicationGaugeScreen__Init+0xfc>)
 801dcae:	f7fb fd7b 	bl	80197a8 <EwGetAutoObject>
 801dcb2:	4601      	mov	r1, r0
 801dcb4:	4630      	mov	r0, r6
}
 801dcb6:	b005      	add	sp, #20
 801dcb8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Medium, 
 801dcbc:	f00a bcd6 	b.w	802866c <WidgetSetPushButton_OnSetAppearance>
 801dcc0:	080371b0 	.word	0x080371b0
 801dcc4:	080371c0 	.word	0x080371c0
 801dcc8:	080371d0 	.word	0x080371d0
 801dccc:	080371e0 	.word	0x080371e0
 801dcd0:	08038640 	.word	0x08038640
 801dcd4:	08036fa0 	.word	0x08036fa0
 801dcd8:	0801db11 	.word	0x0801db11
 801dcdc:	08038af4 	.word	0x08038af4
 801dce0:	080389e4 	.word	0x080389e4
 801dce4:	08037444 	.word	0x08037444

0801dce8 <ApplicationGaugeScreen__ReInit>:
{
 801dce8:	b510      	push	{r4, lr}
 801dcea:	4604      	mov	r4, r0
  CoreGroup__ReInit( &_this->_.Super );
 801dcec:	f001 fce4 	bl	801f6b8 <CoreGroup__ReInit>
  ViewsRectangle__ReInit( &_this->Rectangle );
 801dcf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dcf4:	f007 ff26 	bl	8025b44 <ViewsRectangle__ReInit>
  ViewsImage__ReInit( &_this->Image );
 801dcf8:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801dcfc:	f007 ff26 	bl	8025b4c <ViewsImage__ReInit>
  WidgetSetPushButton__ReInit( &_this->PushButton );
 801dd00:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
 801dd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WidgetSetPushButton__ReInit( &_this->PushButton );
 801dd08:	f009 bf16 	b.w	8027b38 <WidgetSetPushButton__ReInit>

0801dd0c <ApplicationGaugeScreen__Done>:
  _this->_.Super._.VMT = EW_CLASS( ApplicationScreenBase );
 801dd0c:	4b0a      	ldr	r3, [pc, #40]	; (801dd38 <ApplicationGaugeScreen__Done+0x2c>)
{
 801dd0e:	b510      	push	{r4, lr}
 801dd10:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( ApplicationScreenBase );
 801dd12:	f840 3b94 	str.w	r3, [r0], #148
  ViewsImage__Done( &_this->Image );
 801dd16:	f007 ff29 	bl	8025b6c <ViewsImage__Done>
  WidgetSetPushButton__Done( &_this->PushButton );
 801dd1a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 801dd1e:	f009 ff1d 	bl	8027b5c <WidgetSetPushButton__Done>
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 801dd22:	4620      	mov	r0, r4
 801dd24:	4b05      	ldr	r3, [pc, #20]	; (801dd3c <ApplicationGaugeScreen__Done+0x30>)
 801dd26:	f840 3b58 	str.w	r3, [r0], #88
  ViewsRectangle__Done( &_this->Rectangle );
 801dd2a:	f007 ff13 	bl	8025b54 <ViewsRectangle__Done>
  CoreGroup__Done( &_this->_.Super );
 801dd2e:	4620      	mov	r0, r4
}
 801dd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup__Done( &_this->_.Super );
 801dd34:	f001 bd02 	b.w	801f73c <CoreGroup__Done>
 801dd38:	0803753c 	.word	0x0803753c
 801dd3c:	08037c98 	.word	0x08037c98

0801dd40 <ApplicationredButton_UpdateViewState>:
{
 801dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd42:	4604      	mov	r4, r0
 801dd44:	460d      	mov	r5, r1
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 801dd46:	f001 fc05 	bl	801f554 <CoreGroup_UpdateViewState>
  || _this->FlashTimer.Enabled );
 801dd4a:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 801dd4e:	f005 0310 	and.w	r3, r5, #16
 801dd52:	f3c5 1700 	ubfx	r7, r5, #4, #1
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
 801dd56:	f3c5 1540 	ubfx	r5, r5, #5, #1
  || _this->FlashTimer.Enabled );
 801dd5a:	b15a      	cbz	r2, 801dd74 <ApplicationredButton_UpdateViewState+0x34>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801dd5c:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
 801dd60:	b142      	cbz	r2, 801dd74 <ApplicationredButton_UpdateViewState+0x34>
  if ( isEnabled )
 801dd62:	b9cb      	cbnz	r3, 801dd98 <ApplicationredButton_UpdateViewState+0x58>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801dd64:	2601      	movs	r6, #1
  _this->enabled = isEnabled;
 801dd66:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801dd6a:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801dd6e:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801dd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  || _this->FlashTimer.Enabled );
 801dd74:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
 801dd78:	2e00      	cmp	r6, #0
 801dd7a:	d1f2      	bne.n	801dd62 <ApplicationredButton_UpdateViewState+0x22>
  if ( isEnabled )
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d0f2      	beq.n	801dd66 <ApplicationredButton_UpdateViewState+0x26>
      ViewsImage_OnSetVisible( &_this->black, 1 );
 801dd80:	2101      	movs	r1, #1
 801dd82:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801dd86:	f008 fa9f 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801dd8a:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801dd8e:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801dd92:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801dd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801dd98:	2100      	movs	r1, #0
 801dd9a:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801dd9e:	2601      	movs	r6, #1
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801dda0:	f008 fa92 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801dda4:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801dda8:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801ddac:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddb2:	bf00      	nop

0801ddb4 <ApplicationgreenButton_UpdateViewState>:
{
 801ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddb6:	4604      	mov	r4, r0
 801ddb8:	460d      	mov	r5, r1
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 801ddba:	f001 fbcb 	bl	801f554 <CoreGroup_UpdateViewState>
  || _this->FlashTimer.Enabled );
 801ddbe:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 801ddc2:	f005 0310 	and.w	r3, r5, #16
 801ddc6:	f3c5 1700 	ubfx	r7, r5, #4, #1
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
 801ddca:	f3c5 1540 	ubfx	r5, r5, #5, #1
  || _this->FlashTimer.Enabled );
 801ddce:	b15a      	cbz	r2, 801dde8 <ApplicationgreenButton_UpdateViewState+0x34>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801ddd0:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
 801ddd4:	b142      	cbz	r2, 801dde8 <ApplicationgreenButton_UpdateViewState+0x34>
  if ( isEnabled )
 801ddd6:	b9cb      	cbnz	r3, 801de0c <ApplicationgreenButton_UpdateViewState+0x58>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801ddd8:	2601      	movs	r6, #1
  _this->enabled = isEnabled;
 801ddda:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801ddde:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801dde2:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  || _this->FlashTimer.Enabled );
 801dde8:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
 801ddec:	2e00      	cmp	r6, #0
 801ddee:	d1f2      	bne.n	801ddd6 <ApplicationgreenButton_UpdateViewState+0x22>
  if ( isEnabled )
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d0f2      	beq.n	801ddda <ApplicationgreenButton_UpdateViewState+0x26>
      ViewsImage_OnSetVisible( &_this->black, 1 );
 801ddf4:	2101      	movs	r1, #1
 801ddf6:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801ddfa:	f008 fa65 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801ddfe:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801de02:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801de06:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801de0c:	2100      	movs	r1, #0
 801de0e:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801de12:	2601      	movs	r6, #1
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801de14:	f008 fa58 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801de18:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801de1c:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801de20:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801de24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de26:	bf00      	nop

0801de28 <ApplicationblueButton_UpdateViewState>:
{
 801de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de2a:	4604      	mov	r4, r0
 801de2c:	460d      	mov	r5, r1
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 801de2e:	f001 fb91 	bl	801f554 <CoreGroup_UpdateViewState>
  || _this->FlashTimer.Enabled );
 801de32:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 801de36:	f005 0310 	and.w	r3, r5, #16
 801de3a:	f3c5 1700 	ubfx	r7, r5, #4, #1
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
 801de3e:	f3c5 1540 	ubfx	r5, r5, #5, #1
  || _this->FlashTimer.Enabled );
 801de42:	b15a      	cbz	r2, 801de5c <ApplicationblueButton_UpdateViewState+0x34>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801de44:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
 801de48:	b142      	cbz	r2, 801de5c <ApplicationblueButton_UpdateViewState+0x34>
  if ( isEnabled )
 801de4a:	b9cb      	cbnz	r3, 801de80 <ApplicationblueButton_UpdateViewState+0x58>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801de4c:	2601      	movs	r6, #1
  _this->enabled = isEnabled;
 801de4e:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801de52:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801de56:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801de5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  || _this->FlashTimer.Enabled );
 801de5c:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
 801de60:	2e00      	cmp	r6, #0
 801de62:	d1f2      	bne.n	801de4a <ApplicationblueButton_UpdateViewState+0x22>
  if ( isEnabled )
 801de64:	2b00      	cmp	r3, #0
 801de66:	d0f2      	beq.n	801de4e <ApplicationblueButton_UpdateViewState+0x26>
      ViewsImage_OnSetVisible( &_this->black, 1 );
 801de68:	2101      	movs	r1, #1
 801de6a:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801de6e:	f008 fa2b 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801de72:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801de76:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801de7a:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801de7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801de80:	2100      	movs	r1, #0
 801de82:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801de86:	2601      	movs	r6, #1
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801de88:	f008 fa1e 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801de8c:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801de90:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801de94:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801de98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de9a:	bf00      	nop

0801de9c <ApplicationorangeButton_UpdateViewState>:
{
 801de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de9e:	4604      	mov	r4, r0
 801dea0:	460d      	mov	r5, r1
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 801dea2:	f001 fb57 	bl	801f554 <CoreGroup_UpdateViewState>
  || _this->FlashTimer.Enabled );
 801dea6:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 801deaa:	f005 0310 	and.w	r3, r5, #16
 801deae:	f3c5 1700 	ubfx	r7, r5, #4, #1
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
 801deb2:	f3c5 1540 	ubfx	r5, r5, #5, #1
  || _this->FlashTimer.Enabled );
 801deb6:	b15a      	cbz	r2, 801ded0 <ApplicationorangeButton_UpdateViewState+0x34>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801deb8:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
 801debc:	b142      	cbz	r2, 801ded0 <ApplicationorangeButton_UpdateViewState+0x34>
  if ( isEnabled )
 801debe:	b9cb      	cbnz	r3, 801def4 <ApplicationorangeButton_UpdateViewState+0x58>
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801dec0:	2601      	movs	r6, #1
  _this->enabled = isEnabled;
 801dec2:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801dec6:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801deca:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801dece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  || _this->FlashTimer.Enabled );
 801ded0:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
 801ded4:	2e00      	cmp	r6, #0
 801ded6:	d1f2      	bne.n	801debe <ApplicationorangeButton_UpdateViewState+0x22>
  if ( isEnabled )
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d0f2      	beq.n	801dec2 <ApplicationorangeButton_UpdateViewState+0x26>
      ViewsImage_OnSetVisible( &_this->black, 1 );
 801dedc:	2101      	movs	r1, #1
 801dede:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801dee2:	f008 f9f1 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801dee6:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801deea:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801deee:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801def2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801def4:	2100      	movs	r1, #0
 801def6:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
  isPressed = (XBool)(( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 801defa:	2601      	movs	r6, #1
      ViewsImage_OnSetVisible( &_this->black, 0 );
 801defc:	f008 f9e4 	bl	80262c8 <ViewsImage_OnSetVisible>
  _this->enabled = isEnabled;
 801df00:	f884 720c 	strb.w	r7, [r4, #524]	; 0x20c
  _this->selected = isSelected;
 801df04:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  _this->pressed = isPressed;
 801df08:	f884 620e 	strb.w	r6, [r4, #526]	; 0x20e
}
 801df0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df0e:	bf00      	nop

0801df10 <ApplicationPushButton__Init>:
{
 801df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df14:	4604      	mov	r4, r0
 801df16:	b085      	sub	sp, #20
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801df18:	f100 0860 	add.w	r8, r0, #96	; 0x60
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationPushButton );
 801df1c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 801e0bc <ApplicationPushButton__Init+0x1ac>
  CoreRectView__OnSetBounds( _this, _Const0027 );
 801df20:	4e5b      	ldr	r6, [pc, #364]	; (801e090 <ApplicationPushButton__Init+0x180>)
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationPushButton_onEnterLeaveTouch );
 801df22:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801e0c0 <ApplicationPushButton__Init+0x1b0>
  TemplatesPushButton__Init( &_this->_.Super, aLink, aArg );
 801df26:	f007 fdbb 	bl	8025aa0 <TemplatesPushButton__Init>
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801df2a:	4640      	mov	r0, r8
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationPushButton );
 801df2c:	f8c4 b00c 	str.w	fp, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801df30:	4621      	mov	r1, r4
 801df32:	2200      	movs	r2, #0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801df34:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801df38:	f001 fba8 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801df3c:	4621      	mov	r1, r4
 801df3e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801df42:	2200      	movs	r2, #0
 801df44:	f005 fe30 	bl	8023ba8 <CoreKeyPressHandler__Init>
  ViewsImage__Init( &_this->Image, &_this->_.XObject, 0 );
 801df48:	f504 77ba 	add.w	r7, r4, #372	; 0x174
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801df4c:	4628      	mov	r0, r5
 801df4e:	4621      	mov	r1, r4
 801df50:	2200      	movs	r2, #0
 801df52:	f001 fb29 	bl	801f5a8 <CoreSimpleTouchHandler__Init>
  ViewsImage__Init( &_this->Image, &_this->_.XObject, 0 );
 801df56:	4638      	mov	r0, r7
 801df58:	4621      	mov	r1, r4
 801df5a:	2200      	movs	r2, #0
 801df5c:	f007 fdd6 	bl	8025b0c <ViewsImage__Init>
  CoreRectView__OnSetBounds( _this, _Const0027 );
 801df60:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  _this->_.VMT = EW_CLASS( ApplicationPushButton );
 801df64:	f8c4 b000 	str.w	fp, [r4]
  CoreRectView__OnSetBounds( _this, _Const0027 );
 801df68:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801df6c:	4620      	mov	r0, r4
 801df6e:	f8cd a000 	str.w	sl, [sp]
 801df72:	f003 fdf1 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 801df76:	4640      	mov	r0, r8
 801df78:	2100      	movs	r1, #0
 801df7a:	f006 fb07 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 801df7e:	4640      	mov	r0, r8
 801df80:	2132      	movs	r1, #50	; 0x32
 801df82:	f006 fb15 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 801df86:	2395      	movs	r3, #149	; 0x95
 801df88:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 801df8c:	4628      	mov	r0, r5
 801df8e:	213f      	movs	r1, #63	; 0x3f
 801df90:	f002 ff3e 	bl	8020e10 <CoreView_OnSetLayout>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0028 );
 801df94:	4b3f      	ldr	r3, [pc, #252]	; (801e094 <ApplicationPushButton__Init+0x184>)
 801df96:	4628      	mov	r0, r5
 801df98:	e893 0006 	ldmia.w	r3, {r1, r2}
 801df9c:	f002 ff90 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const0029 );
 801dfa0:	4b3d      	ldr	r3, [pc, #244]	; (801e098 <ApplicationPushButton__Init+0x188>)
 801dfa2:	4628      	mov	r0, r5
 801dfa4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801dfa8:	f003 f806 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const002A );
 801dfac:	4b3b      	ldr	r3, [pc, #236]	; (801e09c <ApplicationPushButton__Init+0x18c>)
 801dfae:	4628      	mov	r0, r5
 801dfb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801dfb4:	f003 f87c 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const0017 );
 801dfb8:	4b39      	ldr	r3, [pc, #228]	; (801e0a0 <ApplicationPushButton__Init+0x190>)
 801dfba:	4628      	mov	r0, r5
 801dfbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801dfc0:	f003 f8f2 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
 801dfc4:	230f      	movs	r3, #15
 801dfc6:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 801dfca:	4628      	mov	r0, r5
 801dfcc:	2164      	movs	r1, #100	; 0x64
 801dfce:	f005 fdc5 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreRectView__OnSetBounds( &_this->Image, _Const0027 );
 801dfd2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801dfd6:	4638      	mov	r0, r7
 801dfd8:	f8cd a000 	str.w	sl, [sp]
 801dfdc:	f003 fdbc 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801dfe0:	4629      	mov	r1, r5
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	2200      	movs	r2, #0
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationPushButton_onFlashTimer );
 801dfe6:	ad02      	add	r5, sp, #8
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801dfe8:	f004 f9aa 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Image ), 0 );
 801dfec:	4639      	mov	r1, r7
 801dfee:	4620      	mov	r0, r4
 801dff0:	2200      	movs	r2, #0
 801dff2:	f004 f9a5 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationPushButton_onFlashTimer );
 801dff6:	4621      	mov	r1, r4
 801dff8:	4628      	mov	r0, r5
 801dffa:	4a2a      	ldr	r2, [pc, #168]	; (801e0a4 <ApplicationPushButton__Init+0x194>)
 801dffc:	f7fd f8ea 	bl	801b1d4 <EwNewSlot>
 801e000:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e004:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801e008:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, ApplicationPushButton_onPressKey );
 801e00c:	4a26      	ldr	r2, [pc, #152]	; (801e0a8 <ApplicationPushButton__Init+0x198>)
 801e00e:	4621      	mov	r1, r4
 801e010:	4628      	mov	r0, r5
 801e012:	f7fd f8df 	bl	801b1d4 <EwNewSlot>
 801e016:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e01a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 801e01e:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationPushButton_onEnterLeaveTouch );
 801e022:	464a      	mov	r2, r9
 801e024:	4621      	mov	r1, r4
 801e026:	4628      	mov	r0, r5
 801e028:	f7fd f8d4 	bl	801b1d4 <EwNewSlot>
 801e02c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e030:	f504 738a 	add.w	r3, r4, #276	; 0x114
 801e034:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationPushButton_onEnterLeaveTouch );
 801e038:	464a      	mov	r2, r9
 801e03a:	4621      	mov	r1, r4
 801e03c:	4628      	mov	r0, r5
 801e03e:	f7fd f8c9 	bl	801b1d4 <EwNewSlot>
 801e042:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e046:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 801e04a:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationPushButton_onReleaseTouch );
 801e04e:	4a17      	ldr	r2, [pc, #92]	; (801e0ac <ApplicationPushButton__Init+0x19c>)
 801e050:	4621      	mov	r1, r4
 801e052:	4628      	mov	r0, r5
 801e054:	f7fd f8be 	bl	801b1d4 <EwNewSlot>
 801e058:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e05c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801e060:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationPushButton_onPressTouch );
 801e064:	4a12      	ldr	r2, [pc, #72]	; (801e0b0 <ApplicationPushButton__Init+0x1a0>)
 801e066:	4621      	mov	r1, r4
 801e068:	4628      	mov	r0, r5
 801e06a:	f7fd f8b3 	bl	801b1d4 <EwNewSlot>
 801e06e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e072:	f504 7496 	add.w	r4, r4, #300	; 0x12c
 801e076:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationStartButt, 
 801e07a:	490e      	ldr	r1, [pc, #56]	; (801e0b4 <ApplicationPushButton__Init+0x1a4>)
 801e07c:	480e      	ldr	r0, [pc, #56]	; (801e0b8 <ApplicationPushButton__Init+0x1a8>)
 801e07e:	f7fc faa3 	bl	801a5c8 <EwLoadResource>
 801e082:	4601      	mov	r1, r0
 801e084:	4638      	mov	r0, r7
}
 801e086:	b005      	add	sp, #20
 801e088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationStartButt, 
 801e08c:	f008 bb26 	b.w	80266dc <ViewsImage_OnSetBitmap>
 801e090:	08037324 	.word	0x08037324
 801e094:	08037334 	.word	0x08037334
 801e098:	0803733c 	.word	0x0803733c
 801e09c:	08037344 	.word	0x08037344
 801e0a0:	08037274 	.word	0x08037274
 801e0a4:	0801ef41 	.word	0x0801ef41
 801e0a8:	0801f409 	.word	0x0801f409
 801e0ac:	0801f455 	.word	0x0801f455
 801e0b0:	0801f481 	.word	0x0801f481
 801e0b4:	08038640 	.word	0x08038640
 801e0b8:	08036fac 	.word	0x08036fac
 801e0bc:	080374c0 	.word	0x080374c0
 801e0c0:	0801eecd 	.word	0x0801eecd

0801e0c4 <ApplicationApplication__Init>:
{
 801e0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0c8:	4604      	mov	r4, r0
 801e0ca:	b084      	sub	sp, #16
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801e0cc:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationApplication );
 801e0d0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 801e1e0 <ApplicationApplication__Init+0x11c>
  CoreRectView__OnSetBounds( _this, _Const0002 );
 801e0d4:	4e39      	ldr	r6, [pc, #228]	; (801e1bc <ApplicationApplication__Init+0xf8>)
  CoreRoot__Init( &_this->_.Super, aLink, aArg );
 801e0d6:	f006 fa21 	bl	802451c <CoreRoot__Init>
  ApplicationPushButton__Init( &_this->PushButtonConfig, &_this->_.XObject, 0 );
 801e0da:	f204 483c 	addw	r8, r4, #1084	; 0x43c
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801e0de:	4638      	mov	r0, r7
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationApplication );
 801e0e0:	f8c4 a00c 	str.w	sl, [r4, #12]
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801e0e4:	4621      	mov	r1, r4
 801e0e6:	2200      	movs	r2, #0
  ViewsText__Init( &_this->Text, &_this->_.XObject, 0 );
 801e0e8:	f504 65c0 	add.w	r5, r4, #1536	; 0x600
  ViewsRectangle__Init( &_this->Rectangle, &_this->_.XObject, 0 );
 801e0ec:	f007 fcec 	bl	8025ac8 <ViewsRectangle__Init>
  ApplicationPushButton__Init( &_this->PushButtonConfig, &_this->_.XObject, 0 );
 801e0f0:	4640      	mov	r0, r8
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	f7ff ff0b 	bl	801df10 <ApplicationPushButton__Init>
  ViewsText__Init( &_this->Text, &_this->_.XObject, 0 );
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	4621      	mov	r1, r4
 801e0fe:	2200      	movs	r2, #0
 801e100:	f007 fd0e 	bl	8025b20 <ViewsText__Init>
  CoreRectView__OnSetBounds( _this, _Const0002 );
 801e104:	f8d6 900c 	ldr.w	r9, [r6, #12]
  _this->_.VMT = EW_CLASS( ApplicationApplication );
 801e108:	f8c4 a000 	str.w	sl, [r4]
  CoreRectView__OnSetBounds( _this, _Const0002 );
 801e10c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e110:	4620      	mov	r0, r4
 801e112:	f8cd 9000 	str.w	r9, [sp]
 801e116:	f003 fd1f 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0002 );
 801e11a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e11e:	4638      	mov	r0, r7
 801e120:	f8cd 9000 	str.w	r9, [sp]
 801e124:	f003 fd18 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0003 );
 801e128:	4b25      	ldr	r3, [pc, #148]	; (801e1c0 <ApplicationApplication__Init+0xfc>)
 801e12a:	4638      	mov	r0, r7
 801e12c:	6819      	ldr	r1, [r3, #0]
 801e12e:	f007 ff7d 	bl	802602c <ViewsRectangle_OnSetColor>
  CoreRectView__OnSetBounds( &_this->PushButtonConfig, _Const0004 );
 801e132:	4b24      	ldr	r3, [pc, #144]	; (801e1c4 <ApplicationApplication__Init+0x100>)
 801e134:	68da      	ldr	r2, [r3, #12]
 801e136:	9200      	str	r2, [sp, #0]
 801e138:	4640      	mov	r0, r8
 801e13a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e13c:	f003 fd0c 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Text, _Const0005 );
 801e140:	4b21      	ldr	r3, [pc, #132]	; (801e1c8 <ApplicationApplication__Init+0x104>)
 801e142:	68da      	ldr	r2, [r3, #12]
 801e144:	9200      	str	r2, [sp, #0]
 801e146:	4628      	mov	r0, r5
 801e148:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e14a:	f003 fd05 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsText_OnSetAutoSize( &_this->Text, 1 );
 801e14e:	4628      	mov	r0, r5
 801e150:	2101      	movs	r1, #1
 801e152:	f009 fba9 	bl	80278a8 <ViewsText_OnSetAutoSize>
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0006 ));
 801e156:	481d      	ldr	r0, [pc, #116]	; (801e1cc <ApplicationApplication__Init+0x108>)
 801e158:	f7fe f96a 	bl	801c430 <EwLoadString>
 801e15c:	4601      	mov	r1, r0
 801e15e:	4628      	mov	r0, r5
 801e160:	f008 fbda 	bl	8026918 <ViewsText_OnSetString>
  ViewsText_OnSetColor( &_this->Text, _Const0007 );
 801e164:	4b1a      	ldr	r3, [pc, #104]	; (801e1d0 <ApplicationApplication__Init+0x10c>)
 801e166:	4628      	mov	r0, r5
 801e168:	6819      	ldr	r1, [r3, #0]
 801e16a:	f008 fc15 	bl	8026998 <ViewsText_OnSetColor>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Rectangle ), 0 );
 801e16e:	4639      	mov	r1, r7
 801e170:	4620      	mov	r0, r4
 801e172:	2200      	movs	r2, #0
 801e174:	f004 f8e4 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->PushButtonConfig ), 0 );
 801e178:	4641      	mov	r1, r8
 801e17a:	4620      	mov	r0, r4
 801e17c:	2200      	movs	r2, #0
 801e17e:	f004 f8df 	bl	8022340 <CoreGroup_Add>
  _this->PushButtonConfig.OnActivate = EwNewSlot( _this, ApplicationApplication_GoToGauge );
 801e182:	ae02      	add	r6, sp, #8
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Text ), 0 );
 801e184:	4629      	mov	r1, r5
 801e186:	4620      	mov	r0, r4
 801e188:	2200      	movs	r2, #0
 801e18a:	f004 f8d9 	bl	8022340 <CoreGroup_Add>
  _this->PushButtonConfig.OnActivate = EwNewSlot( _this, ApplicationApplication_GoToGauge );
 801e18e:	4a11      	ldr	r2, [pc, #68]	; (801e1d4 <ApplicationApplication__Init+0x110>)
 801e190:	4621      	mov	r1, r4
 801e192:	4630      	mov	r0, r6
 801e194:	f7fd f81e 	bl	801b1d4 <EwNewSlot>
 801e198:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e19c:	f204 4494 	addw	r4, r4, #1172	; 0x494
 801e1a0:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontLarge, ResourcesFont ));
 801e1a4:	490c      	ldr	r1, [pc, #48]	; (801e1d8 <ApplicationApplication__Init+0x114>)
 801e1a6:	480d      	ldr	r0, [pc, #52]	; (801e1dc <ApplicationApplication__Init+0x118>)
 801e1a8:	f7fc fa0e 	bl	801a5c8 <EwLoadResource>
 801e1ac:	4601      	mov	r1, r0
 801e1ae:	4628      	mov	r0, r5
}
 801e1b0:	b004      	add	sp, #16
 801e1b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontLarge, ResourcesFont ));
 801e1b6:	f008 bbd3 	b.w	8026960 <ViewsText_OnSetFont>
 801e1ba:	bf00      	nop
 801e1bc:	08037170 	.word	0x08037170
 801e1c0:	08037180 	.word	0x08037180
 801e1c4:	08037184 	.word	0x08037184
 801e1c8:	08037194 	.word	0x08037194
 801e1cc:	080371a4 	.word	0x080371a4
 801e1d0:	080371ac 	.word	0x080371ac
 801e1d4:	0801dac9 	.word	0x0801dac9
 801e1d8:	08038684 	.word	0x08038684
 801e1dc:	080385b0 	.word	0x080385b0
 801e1e0:	0803734c 	.word	0x0803734c

0801e1e4 <ApplicationredButton__Init>:
{
 801e1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e8:	4604      	mov	r4, r0
 801e1ea:	b085      	sub	sp, #20
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e1ec:	f100 0a60 	add.w	sl, r0, #96	; 0x60
  TemplatesPushButton__Init( &_this->_.Super, aLink, aArg );
 801e1f0:	f007 fc56 	bl	8025aa0 <TemplatesPushButton__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationredButton );
 801e1f4:	4b6b      	ldr	r3, [pc, #428]	; (801e3a4 <ApplicationredButton__Init+0x1c0>)
 801e1f6:	60e3      	str	r3, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e1f8:	4650      	mov	r0, sl
 801e1fa:	4621      	mov	r1, r4
 801e1fc:	2200      	movs	r2, #0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e1fe:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e202:	f001 fa43 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e206:	4621      	mov	r1, r4
 801e208:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801e20c:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->red, &_this->_.XObject, 0 );
 801e20e:	f504 77ba 	add.w	r7, r4, #372	; 0x174
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e212:	f005 fcc9 	bl	8023ba8 <CoreKeyPressHandler__Init>
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e216:	4630      	mov	r0, r6
 801e218:	4621      	mov	r1, r4
 801e21a:	2200      	movs	r2, #0
 801e21c:	f001 f9c4 	bl	801f5a8 <CoreSimpleTouchHandler__Init>
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e220:	f504 78e0 	add.w	r8, r4, #448	; 0x1c0
  CoreRectView__OnSetBounds( _this, _Const0013 );
 801e224:	4d60      	ldr	r5, [pc, #384]	; (801e3a8 <ApplicationredButton__Init+0x1c4>)
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationredButton_onEnterLeaveTouch );
 801e226:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 801e3d4 <ApplicationredButton__Init+0x1f0>
  ViewsImage__Init( &_this->red, &_this->_.XObject, 0 );
 801e22a:	4638      	mov	r0, r7
 801e22c:	4621      	mov	r1, r4
 801e22e:	2200      	movs	r2, #0
 801e230:	f007 fc6c 	bl	8025b0c <ViewsImage__Init>
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e234:	4640      	mov	r0, r8
 801e236:	4621      	mov	r1, r4
 801e238:	2200      	movs	r2, #0
 801e23a:	f007 fc67 	bl	8025b0c <ViewsImage__Init>
  CoreRectView__OnSetBounds( _this, _Const0013 );
 801e23e:	f8d5 900c 	ldr.w	r9, [r5, #12]
  _this->_.VMT = EW_CLASS( ApplicationredButton );
 801e242:	4b58      	ldr	r3, [pc, #352]	; (801e3a4 <ApplicationredButton__Init+0x1c0>)
 801e244:	6023      	str	r3, [r4, #0]
  CoreRectView__OnSetBounds( _this, _Const0013 );
 801e246:	4620      	mov	r0, r4
 801e248:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e24c:	f8cd 9000 	str.w	r9, [sp]
 801e250:	f003 fc82 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 801e254:	4650      	mov	r0, sl
 801e256:	2100      	movs	r1, #0
 801e258:	f006 f998 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 801e25c:	4650      	mov	r0, sl
 801e25e:	2132      	movs	r1, #50	; 0x32
 801e260:	f006 f9a6 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 801e264:	2395      	movs	r3, #149	; 0x95
 801e266:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 801e26a:	4630      	mov	r0, r6
 801e26c:	213f      	movs	r1, #63	; 0x3f
 801e26e:	f002 fdcf 	bl	8020e10 <CoreView_OnSetLayout>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0014 );
 801e272:	4b4e      	ldr	r3, [pc, #312]	; (801e3ac <ApplicationredButton__Init+0x1c8>)
  ViewsImage_OnSetBitmap( &_this->red, EwLoadResource( &ApplicationBitmapred, ResourcesBitmap ));
 801e274:	f8df a160 	ldr.w	sl, [pc, #352]	; 801e3d8 <ApplicationredButton__Init+0x1f4>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0014 );
 801e278:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e27c:	4630      	mov	r0, r6
 801e27e:	f002 fe1f 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const0015 );
 801e282:	4b4b      	ldr	r3, [pc, #300]	; (801e3b0 <ApplicationredButton__Init+0x1cc>)
 801e284:	4630      	mov	r0, r6
 801e286:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e28a:	f002 fe95 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const0016 );
 801e28e:	4b49      	ldr	r3, [pc, #292]	; (801e3b4 <ApplicationredButton__Init+0x1d0>)
 801e290:	4630      	mov	r0, r6
 801e292:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e296:	f002 ff0b 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const0017 );
 801e29a:	4b47      	ldr	r3, [pc, #284]	; (801e3b8 <ApplicationredButton__Init+0x1d4>)
 801e29c:	4630      	mov	r0, r6
 801e29e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e2a2:	f002 ff81 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
 801e2a6:	230f      	movs	r3, #15
 801e2a8:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 801e2ac:	4630      	mov	r0, r6
 801e2ae:	2164      	movs	r1, #100	; 0x64
 801e2b0:	f005 fc54 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreRectView__OnSetBounds( &_this->red, _Const0013 );
 801e2b4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e2b8:	4638      	mov	r0, r7
 801e2ba:	f8cd 9000 	str.w	r9, [sp]
 801e2be:	f003 fc4b 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->red, 1 );
 801e2c2:	4638      	mov	r0, r7
 801e2c4:	2101      	movs	r1, #1
 801e2c6:	f008 f9e7 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreRectView__OnSetBounds( &_this->black, _Const0013 );
 801e2ca:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e2ce:	4640      	mov	r0, r8
 801e2d0:	f8cd 9000 	str.w	r9, [sp]
 801e2d4:	f003 fc40 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801e2d8:	4631      	mov	r1, r6
 801e2da:	4620      	mov	r0, r4
 801e2dc:	2200      	movs	r2, #0
 801e2de:	f004 f82f 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->red ), 0 );
 801e2e2:	4639      	mov	r1, r7
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	2200      	movs	r2, #0
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationredButton_onFlashTimer );
 801e2e8:	ad02      	add	r5, sp, #8
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->red ), 0 );
 801e2ea:	f004 f829 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->black ), 0 );
 801e2ee:	4641      	mov	r1, r8
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	2200      	movs	r2, #0
 801e2f4:	f004 f824 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationredButton_onFlashTimer );
 801e2f8:	4621      	mov	r1, r4
 801e2fa:	4628      	mov	r0, r5
 801e2fc:	4a2f      	ldr	r2, [pc, #188]	; (801e3bc <ApplicationredButton__Init+0x1d8>)
 801e2fe:	f7fc ff69 	bl	801b1d4 <EwNewSlot>
 801e302:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e306:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801e30a:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, ApplicationredButton_onPressKey );
 801e30e:	4a2c      	ldr	r2, [pc, #176]	; (801e3c0 <ApplicationredButton__Init+0x1dc>)
 801e310:	4621      	mov	r1, r4
 801e312:	4628      	mov	r0, r5
 801e314:	f7fc ff5e 	bl	801b1d4 <EwNewSlot>
 801e318:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e31c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 801e320:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationredButton_onEnterLeaveTouch );
 801e324:	465a      	mov	r2, fp
 801e326:	4621      	mov	r1, r4
 801e328:	4628      	mov	r0, r5
 801e32a:	f7fc ff53 	bl	801b1d4 <EwNewSlot>
 801e32e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e332:	f504 738a 	add.w	r3, r4, #276	; 0x114
 801e336:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationredButton_onEnterLeaveTouch );
 801e33a:	465a      	mov	r2, fp
 801e33c:	4621      	mov	r1, r4
 801e33e:	4628      	mov	r0, r5
 801e340:	f7fc ff48 	bl	801b1d4 <EwNewSlot>
 801e344:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e348:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 801e34c:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationredButton_onReleaseTouch );
 801e350:	4a1c      	ldr	r2, [pc, #112]	; (801e3c4 <ApplicationredButton__Init+0x1e0>)
 801e352:	4621      	mov	r1, r4
 801e354:	4628      	mov	r0, r5
 801e356:	f7fc ff3d 	bl	801b1d4 <EwNewSlot>
 801e35a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e35e:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801e362:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationredButton_onPressTouch );
 801e366:	4a18      	ldr	r2, [pc, #96]	; (801e3c8 <ApplicationredButton__Init+0x1e4>)
 801e368:	4621      	mov	r1, r4
 801e36a:	4628      	mov	r0, r5
 801e36c:	f7fc ff32 	bl	801b1d4 <EwNewSlot>
 801e370:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e374:	f504 7496 	add.w	r4, r4, #300	; 0x12c
 801e378:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsImage_OnSetBitmap( &_this->red, EwLoadResource( &ApplicationBitmapred, ResourcesBitmap ));
 801e37c:	4651      	mov	r1, sl
 801e37e:	4813      	ldr	r0, [pc, #76]	; (801e3cc <ApplicationredButton__Init+0x1e8>)
 801e380:	f7fc f922 	bl	801a5c8 <EwLoadResource>
 801e384:	4601      	mov	r1, r0
 801e386:	4638      	mov	r0, r7
 801e388:	f008 f9a8 	bl	80266dc <ViewsImage_OnSetBitmap>
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e38c:	4651      	mov	r1, sl
 801e38e:	4810      	ldr	r0, [pc, #64]	; (801e3d0 <ApplicationredButton__Init+0x1ec>)
 801e390:	f7fc f91a 	bl	801a5c8 <EwLoadResource>
 801e394:	4601      	mov	r1, r0
 801e396:	4640      	mov	r0, r8
}
 801e398:	b005      	add	sp, #20
 801e39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e39e:	f008 b99d 	b.w	80266dc <ViewsImage_OnSetBitmap>
 801e3a2:	bf00      	nop
 801e3a4:	0803772c 	.word	0x0803772c
 801e3a8:	0803724c 	.word	0x0803724c
 801e3ac:	0803725c 	.word	0x0803725c
 801e3b0:	08037264 	.word	0x08037264
 801e3b4:	0803726c 	.word	0x0803726c
 801e3b8:	08037274 	.word	0x08037274
 801e3bc:	0801eed1 	.word	0x0801eed1
 801e3c0:	0801f199 	.word	0x0801f199
 801e3c4:	0801f1e5 	.word	0x0801f1e5
 801e3c8:	0801f211 	.word	0x0801f211
 801e3cc:	08036f94 	.word	0x08036f94
 801e3d0:	08036f64 	.word	0x08036f64
 801e3d4:	0801eebd 	.word	0x0801eebd
 801e3d8:	08038640 	.word	0x08038640

0801e3dc <ApplicationgreenButton__Init>:
{
 801e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e0:	4604      	mov	r4, r0
 801e3e2:	b087      	sub	sp, #28
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e3e4:	f100 0960 	add.w	r9, r0, #96	; 0x60
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationgreenButton );
 801e3e8:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801e5d4 <ApplicationgreenButton__Init+0x1f8>
  CoreRectView__OnSetBounds( _this, _Const0018 );
 801e3ec:	4e6d      	ldr	r6, [pc, #436]	; (801e5a4 <ApplicationgreenButton__Init+0x1c8>)
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationgreenButton_onEnterLeaveTouch );
 801e3ee:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801e5d8 <ApplicationgreenButton__Init+0x1fc>
  TemplatesPushButton__Init( &_this->_.Super, aLink, aArg );
 801e3f2:	f007 fb55 	bl	8025aa0 <TemplatesPushButton__Init>
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e3f6:	4648      	mov	r0, r9
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationgreenButton );
 801e3f8:	f8c4 b00c 	str.w	fp, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e3fc:	4621      	mov	r1, r4
 801e3fe:	2200      	movs	r2, #0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e400:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e404:	f001 f942 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e408:	4621      	mov	r1, r4
 801e40a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801e40e:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->green, &_this->_.XObject, 0 );
 801e410:	f504 78ba 	add.w	r8, r4, #372	; 0x174
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e414:	f005 fbc8 	bl	8023ba8 <CoreKeyPressHandler__Init>
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e418:	4628      	mov	r0, r5
 801e41a:	4621      	mov	r1, r4
 801e41c:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e41e:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e422:	f001 f8c1 	bl	801f5a8 <CoreSimpleTouchHandler__Init>
  ViewsImage__Init( &_this->green, &_this->_.XObject, 0 );
 801e426:	4640      	mov	r0, r8
 801e428:	4621      	mov	r1, r4
 801e42a:	2200      	movs	r2, #0
 801e42c:	f007 fb6e 	bl	8025b0c <ViewsImage__Init>
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e430:	4638      	mov	r0, r7
 801e432:	4621      	mov	r1, r4
 801e434:	2200      	movs	r2, #0
 801e436:	f007 fb69 	bl	8025b0c <ViewsImage__Init>
  CoreRectView__OnSetBounds( _this, _Const0018 );
 801e43a:	68f3      	ldr	r3, [r6, #12]
  _this->_.VMT = EW_CLASS( ApplicationgreenButton );
 801e43c:	f8c4 b000 	str.w	fp, [r4]
  CoreRectView__OnSetBounds( _this, _Const0018 );
 801e440:	4620      	mov	r0, r4
 801e442:	9303      	str	r3, [sp, #12]
 801e444:	9300      	str	r3, [sp, #0]
 801e446:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e44a:	f003 fb85 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 801e44e:	4648      	mov	r0, r9
 801e450:	2100      	movs	r1, #0
 801e452:	f006 f89b 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 801e456:	4648      	mov	r0, r9
 801e458:	2132      	movs	r1, #50	; 0x32
 801e45a:	f006 f8a9 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 801e45e:	2395      	movs	r3, #149	; 0x95
 801e460:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 801e464:	4628      	mov	r0, r5
 801e466:	213f      	movs	r1, #63	; 0x3f
 801e468:	f002 fcd2 	bl	8020e10 <CoreView_OnSetLayout>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0019 );
 801e46c:	4b4e      	ldr	r3, [pc, #312]	; (801e5a8 <ApplicationgreenButton__Init+0x1cc>)
  ViewsImage_OnSetBitmap( &_this->green, EwLoadResource( &ApplicationBitmapgreen, 
 801e46e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801e5dc <ApplicationgreenButton__Init+0x200>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0019 );
 801e472:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e476:	4628      	mov	r0, r5
 801e478:	f002 fd22 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const001A );
 801e47c:	4b4b      	ldr	r3, [pc, #300]	; (801e5ac <ApplicationgreenButton__Init+0x1d0>)
 801e47e:	4628      	mov	r0, r5
 801e480:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e484:	f002 fd98 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const001B );
 801e488:	4b49      	ldr	r3, [pc, #292]	; (801e5b0 <ApplicationgreenButton__Init+0x1d4>)
 801e48a:	4628      	mov	r0, r5
 801e48c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e490:	f002 fe0e 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const0017 );
 801e494:	4b47      	ldr	r3, [pc, #284]	; (801e5b4 <ApplicationgreenButton__Init+0x1d8>)
 801e496:	4628      	mov	r0, r5
 801e498:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e49c:	f002 fe84 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
 801e4a0:	230f      	movs	r3, #15
 801e4a2:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 801e4a6:	4628      	mov	r0, r5
 801e4a8:	2164      	movs	r1, #100	; 0x64
 801e4aa:	f005 fb57 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreRectView__OnSetBounds( &_this->green, _Const0018 );
 801e4ae:	9b03      	ldr	r3, [sp, #12]
 801e4b0:	9300      	str	r3, [sp, #0]
 801e4b2:	4640      	mov	r0, r8
 801e4b4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e4b8:	f003 fb4e 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->green, 1 );
 801e4bc:	4640      	mov	r0, r8
 801e4be:	2101      	movs	r1, #1
 801e4c0:	f008 f8ea 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreRectView__OnSetBounds( &_this->black, _Const001C );
 801e4c4:	4b3c      	ldr	r3, [pc, #240]	; (801e5b8 <ApplicationgreenButton__Init+0x1dc>)
 801e4c6:	68da      	ldr	r2, [r3, #12]
 801e4c8:	9200      	str	r2, [sp, #0]
 801e4ca:	4638      	mov	r0, r7
 801e4cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e4ce:	f003 fb43 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->black, 1 );
 801e4d2:	4638      	mov	r0, r7
 801e4d4:	2101      	movs	r1, #1
 801e4d6:	f008 f8df 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801e4da:	4629      	mov	r1, r5
 801e4dc:	4620      	mov	r0, r4
 801e4de:	2200      	movs	r2, #0
 801e4e0:	f003 ff2e 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->green ), 0 );
 801e4e4:	4641      	mov	r1, r8
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	2200      	movs	r2, #0
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationgreenButton_onFlashTimer );
 801e4ea:	ad04      	add	r5, sp, #16
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->green ), 0 );
 801e4ec:	f003 ff28 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->black ), 0 );
 801e4f0:	4639      	mov	r1, r7
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	2200      	movs	r2, #0
 801e4f6:	f003 ff23 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationgreenButton_onFlashTimer );
 801e4fa:	4621      	mov	r1, r4
 801e4fc:	4628      	mov	r0, r5
 801e4fe:	4a2f      	ldr	r2, [pc, #188]	; (801e5bc <ApplicationgreenButton__Init+0x1e0>)
 801e500:	f7fc fe68 	bl	801b1d4 <EwNewSlot>
 801e504:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e508:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801e50c:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, ApplicationgreenButton_onPressKey );
 801e510:	4a2b      	ldr	r2, [pc, #172]	; (801e5c0 <ApplicationgreenButton__Init+0x1e4>)
 801e512:	4621      	mov	r1, r4
 801e514:	4628      	mov	r0, r5
 801e516:	f7fc fe5d 	bl	801b1d4 <EwNewSlot>
 801e51a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e51e:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 801e522:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationgreenButton_onEnterLeaveTouch );
 801e526:	4652      	mov	r2, sl
 801e528:	4621      	mov	r1, r4
 801e52a:	4628      	mov	r0, r5
 801e52c:	f7fc fe52 	bl	801b1d4 <EwNewSlot>
 801e530:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e534:	f504 738a 	add.w	r3, r4, #276	; 0x114
 801e538:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationgreenButton_onEnterLeaveTouch );
 801e53c:	4652      	mov	r2, sl
 801e53e:	4621      	mov	r1, r4
 801e540:	4628      	mov	r0, r5
 801e542:	f7fc fe47 	bl	801b1d4 <EwNewSlot>
 801e546:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e54a:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 801e54e:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationgreenButton_onReleaseTouch );
 801e552:	4a1c      	ldr	r2, [pc, #112]	; (801e5c4 <ApplicationgreenButton__Init+0x1e8>)
 801e554:	4621      	mov	r1, r4
 801e556:	4628      	mov	r0, r5
 801e558:	f7fc fe3c 	bl	801b1d4 <EwNewSlot>
 801e55c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e560:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801e564:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationgreenButton_onPressTouch );
 801e568:	4a17      	ldr	r2, [pc, #92]	; (801e5c8 <ApplicationgreenButton__Init+0x1ec>)
 801e56a:	4621      	mov	r1, r4
 801e56c:	4628      	mov	r0, r5
 801e56e:	f7fc fe31 	bl	801b1d4 <EwNewSlot>
 801e572:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e576:	f504 7496 	add.w	r4, r4, #300	; 0x12c
 801e57a:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsImage_OnSetBitmap( &_this->green, EwLoadResource( &ApplicationBitmapgreen, 
 801e57e:	4649      	mov	r1, r9
 801e580:	4812      	ldr	r0, [pc, #72]	; (801e5cc <ApplicationgreenButton__Init+0x1f0>)
 801e582:	f7fc f821 	bl	801a5c8 <EwLoadResource>
 801e586:	4601      	mov	r1, r0
 801e588:	4640      	mov	r0, r8
 801e58a:	f008 f8a7 	bl	80266dc <ViewsImage_OnSetBitmap>
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e58e:	4649      	mov	r1, r9
 801e590:	480f      	ldr	r0, [pc, #60]	; (801e5d0 <ApplicationgreenButton__Init+0x1f4>)
 801e592:	f7fc f819 	bl	801a5c8 <EwLoadResource>
 801e596:	4601      	mov	r1, r0
 801e598:	4638      	mov	r0, r7
}
 801e59a:	b007      	add	sp, #28
 801e59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e5a0:	f008 b89c 	b.w	80266dc <ViewsImage_OnSetBitmap>
 801e5a4:	0803727c 	.word	0x0803727c
 801e5a8:	0803728c 	.word	0x0803728c
 801e5ac:	08037294 	.word	0x08037294
 801e5b0:	0803729c 	.word	0x0803729c
 801e5b4:	08037274 	.word	0x08037274
 801e5b8:	080372a4 	.word	0x080372a4
 801e5bc:	0801eeed 	.word	0x0801eeed
 801e5c0:	0801f235 	.word	0x0801f235
 801e5c4:	0801f281 	.word	0x0801f281
 801e5c8:	0801f2ad 	.word	0x0801f2ad
 801e5cc:	08036f7c 	.word	0x08036f7c
 801e5d0:	08036f64 	.word	0x08036f64
 801e5d4:	08037634 	.word	0x08037634
 801e5d8:	0801eec1 	.word	0x0801eec1
 801e5dc:	08038640 	.word	0x08038640

0801e5e0 <ApplicationblueButton__Init>:
{
 801e5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5e4:	4604      	mov	r4, r0
 801e5e6:	b084      	sub	sp, #16
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e5e8:	f100 0860 	add.w	r8, r0, #96	; 0x60
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationblueButton );
 801e5ec:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801e7d8 <ApplicationblueButton__Init+0x1f8>
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationblueButton_onEnterLeaveTouch );
 801e5f0:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 801e7dc <ApplicationblueButton__Init+0x1fc>
  TemplatesPushButton__Init( &_this->_.Super, aLink, aArg );
 801e5f4:	f007 fa54 	bl	8025aa0 <TemplatesPushButton__Init>
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e5f8:	4640      	mov	r0, r8
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationblueButton );
 801e5fa:	f8c4 a00c 	str.w	sl, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e5fe:	4621      	mov	r1, r4
 801e600:	2200      	movs	r2, #0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e602:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e606:	f001 f841 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e60a:	4621      	mov	r1, r4
 801e60c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801e610:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->blue, &_this->_.XObject, 0 );
 801e612:	f504 77ba 	add.w	r7, r4, #372	; 0x174
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e616:	f005 fac7 	bl	8023ba8 <CoreKeyPressHandler__Init>
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e61a:	4628      	mov	r0, r5
 801e61c:	4621      	mov	r1, r4
 801e61e:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e620:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e624:	f000 ffc0 	bl	801f5a8 <CoreSimpleTouchHandler__Init>
  ViewsImage__Init( &_this->blue, &_this->_.XObject, 0 );
 801e628:	4638      	mov	r0, r7
 801e62a:	4621      	mov	r1, r4
 801e62c:	2200      	movs	r2, #0
 801e62e:	f007 fa6d 	bl	8025b0c <ViewsImage__Init>
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e632:	4630      	mov	r0, r6
 801e634:	4621      	mov	r1, r4
 801e636:	2200      	movs	r2, #0
 801e638:	f007 fa68 	bl	8025b0c <ViewsImage__Init>
  CoreRectView__OnSetBounds( _this, _Const001D );
 801e63c:	4b59      	ldr	r3, [pc, #356]	; (801e7a4 <ApplicationblueButton__Init+0x1c4>)
  _this->_.VMT = EW_CLASS( ApplicationblueButton );
 801e63e:	f8c4 a000 	str.w	sl, [r4]
  CoreRectView__OnSetBounds( _this, _Const001D );
 801e642:	68da      	ldr	r2, [r3, #12]
 801e644:	9200      	str	r2, [sp, #0]
 801e646:	4620      	mov	r0, r4
 801e648:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e64a:	f003 fa85 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 801e64e:	4640      	mov	r0, r8
 801e650:	2100      	movs	r1, #0
 801e652:	f005 ff9b 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 801e656:	4640      	mov	r0, r8
 801e658:	2132      	movs	r1, #50	; 0x32
 801e65a:	f005 ffa9 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 801e65e:	2395      	movs	r3, #149	; 0x95
 801e660:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 801e664:	4628      	mov	r0, r5
 801e666:	213f      	movs	r1, #63	; 0x3f
 801e668:	f002 fbd2 	bl	8020e10 <CoreView_OnSetLayout>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const001E );
 801e66c:	4b4e      	ldr	r3, [pc, #312]	; (801e7a8 <ApplicationblueButton__Init+0x1c8>)
  ViewsImage_OnSetBitmap( &_this->blue, EwLoadResource( &ApplicationBitmapblue, 
 801e66e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801e7e0 <ApplicationblueButton__Init+0x200>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const001E );
 801e672:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e676:	4628      	mov	r0, r5
 801e678:	f002 fc22 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const001F );
 801e67c:	4b4b      	ldr	r3, [pc, #300]	; (801e7ac <ApplicationblueButton__Init+0x1cc>)
 801e67e:	4628      	mov	r0, r5
 801e680:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e684:	f002 fc98 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const0020 );
 801e688:	4b49      	ldr	r3, [pc, #292]	; (801e7b0 <ApplicationblueButton__Init+0x1d0>)
 801e68a:	4628      	mov	r0, r5
 801e68c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e690:	f002 fd0e 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const0017 );
 801e694:	4b47      	ldr	r3, [pc, #284]	; (801e7b4 <ApplicationblueButton__Init+0x1d4>)
 801e696:	4628      	mov	r0, r5
 801e698:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e69c:	f002 fd84 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
 801e6a0:	230f      	movs	r3, #15
 801e6a2:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 801e6a6:	4628      	mov	r0, r5
 801e6a8:	2164      	movs	r1, #100	; 0x64
 801e6aa:	f005 fa57 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreRectView__OnSetBounds( &_this->blue, _Const0021 );
 801e6ae:	4b42      	ldr	r3, [pc, #264]	; (801e7b8 <ApplicationblueButton__Init+0x1d8>)
 801e6b0:	68da      	ldr	r2, [r3, #12]
 801e6b2:	9200      	str	r2, [sp, #0]
 801e6b4:	4638      	mov	r0, r7
 801e6b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e6b8:	f003 fa4e 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->blue, 1 );
 801e6bc:	4638      	mov	r0, r7
 801e6be:	2101      	movs	r1, #1
 801e6c0:	f007 ffea 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreRectView__OnSetBounds( &_this->black, _Const0022 );
 801e6c4:	4b3d      	ldr	r3, [pc, #244]	; (801e7bc <ApplicationblueButton__Init+0x1dc>)
 801e6c6:	68da      	ldr	r2, [r3, #12]
 801e6c8:	9200      	str	r2, [sp, #0]
 801e6ca:	4630      	mov	r0, r6
 801e6cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e6ce:	f003 fa43 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->black, 1 );
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	2101      	movs	r1, #1
 801e6d6:	f007 ffdf 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801e6da:	4629      	mov	r1, r5
 801e6dc:	4620      	mov	r0, r4
 801e6de:	2200      	movs	r2, #0
 801e6e0:	f003 fe2e 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->blue ), 0 );
 801e6e4:	4639      	mov	r1, r7
 801e6e6:	4620      	mov	r0, r4
 801e6e8:	2200      	movs	r2, #0
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationblueButton_onFlashTimer );
 801e6ea:	ad02      	add	r5, sp, #8
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->blue ), 0 );
 801e6ec:	f003 fe28 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->black ), 0 );
 801e6f0:	4631      	mov	r1, r6
 801e6f2:	4620      	mov	r0, r4
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	f003 fe23 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationblueButton_onFlashTimer );
 801e6fa:	4621      	mov	r1, r4
 801e6fc:	4628      	mov	r0, r5
 801e6fe:	4a30      	ldr	r2, [pc, #192]	; (801e7c0 <ApplicationblueButton__Init+0x1e0>)
 801e700:	f7fc fd68 	bl	801b1d4 <EwNewSlot>
 801e704:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e708:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801e70c:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, ApplicationblueButton_onPressKey );
 801e710:	4a2c      	ldr	r2, [pc, #176]	; (801e7c4 <ApplicationblueButton__Init+0x1e4>)
 801e712:	4621      	mov	r1, r4
 801e714:	4628      	mov	r0, r5
 801e716:	f7fc fd5d 	bl	801b1d4 <EwNewSlot>
 801e71a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e71e:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 801e722:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationblueButton_onEnterLeaveTouch );
 801e726:	464a      	mov	r2, r9
 801e728:	4621      	mov	r1, r4
 801e72a:	4628      	mov	r0, r5
 801e72c:	f7fc fd52 	bl	801b1d4 <EwNewSlot>
 801e730:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e734:	f504 738a 	add.w	r3, r4, #276	; 0x114
 801e738:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationblueButton_onEnterLeaveTouch );
 801e73c:	464a      	mov	r2, r9
 801e73e:	4621      	mov	r1, r4
 801e740:	4628      	mov	r0, r5
 801e742:	f7fc fd47 	bl	801b1d4 <EwNewSlot>
 801e746:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e74a:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 801e74e:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationblueButton_onReleaseTouch );
 801e752:	4a1d      	ldr	r2, [pc, #116]	; (801e7c8 <ApplicationblueButton__Init+0x1e8>)
 801e754:	4621      	mov	r1, r4
 801e756:	4628      	mov	r0, r5
 801e758:	f7fc fd3c 	bl	801b1d4 <EwNewSlot>
 801e75c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e760:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801e764:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationblueButton_onPressTouch );
 801e768:	4a18      	ldr	r2, [pc, #96]	; (801e7cc <ApplicationblueButton__Init+0x1ec>)
 801e76a:	4621      	mov	r1, r4
 801e76c:	4628      	mov	r0, r5
 801e76e:	f7fc fd31 	bl	801b1d4 <EwNewSlot>
 801e772:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e776:	f504 7496 	add.w	r4, r4, #300	; 0x12c
 801e77a:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsImage_OnSetBitmap( &_this->blue, EwLoadResource( &ApplicationBitmapblue, 
 801e77e:	4641      	mov	r1, r8
 801e780:	4813      	ldr	r0, [pc, #76]	; (801e7d0 <ApplicationblueButton__Init+0x1f0>)
 801e782:	f7fb ff21 	bl	801a5c8 <EwLoadResource>
 801e786:	4601      	mov	r1, r0
 801e788:	4638      	mov	r0, r7
 801e78a:	f007 ffa7 	bl	80266dc <ViewsImage_OnSetBitmap>
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e78e:	4641      	mov	r1, r8
 801e790:	4810      	ldr	r0, [pc, #64]	; (801e7d4 <ApplicationblueButton__Init+0x1f4>)
 801e792:	f7fb ff19 	bl	801a5c8 <EwLoadResource>
 801e796:	4601      	mov	r1, r0
 801e798:	4630      	mov	r0, r6
}
 801e79a:	b004      	add	sp, #16
 801e79c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e7a0:	f007 bf9c 	b.w	80266dc <ViewsImage_OnSetBitmap>
 801e7a4:	080372b4 	.word	0x080372b4
 801e7a8:	080372c4 	.word	0x080372c4
 801e7ac:	080372cc 	.word	0x080372cc
 801e7b0:	080372d4 	.word	0x080372d4
 801e7b4:	08037274 	.word	0x08037274
 801e7b8:	080372dc 	.word	0x080372dc
 801e7bc:	080372ec 	.word	0x080372ec
 801e7c0:	0801ef09 	.word	0x0801ef09
 801e7c4:	0801f2d1 	.word	0x0801f2d1
 801e7c8:	0801f31d 	.word	0x0801f31d
 801e7cc:	0801f349 	.word	0x0801f349
 801e7d0:	08036f70 	.word	0x08036f70
 801e7d4:	08036f64 	.word	0x08036f64
 801e7d8:	080375b8 	.word	0x080375b8
 801e7dc:	0801eec5 	.word	0x0801eec5
 801e7e0:	08038640 	.word	0x08038640

0801e7e4 <ApplicationorangeButton__Init>:
{
 801e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e8:	4604      	mov	r4, r0
 801e7ea:	b085      	sub	sp, #20
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e7ec:	f100 0a60 	add.w	sl, r0, #96	; 0x60
  TemplatesPushButton__Init( &_this->_.Super, aLink, aArg );
 801e7f0:	f007 f956 	bl	8025aa0 <TemplatesPushButton__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationorangeButton );
 801e7f4:	4b6d      	ldr	r3, [pc, #436]	; (801e9ac <ApplicationorangeButton__Init+0x1c8>)
 801e7f6:	60e3      	str	r3, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e7f8:	4650      	mov	r0, sl
 801e7fa:	4621      	mov	r1, r4
 801e7fc:	2200      	movs	r2, #0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e7fe:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 801e802:	f000 ff43 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e806:	4621      	mov	r1, r4
 801e808:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801e80c:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->orange, &_this->_.XObject, 0 );
 801e80e:	f504 78ba 	add.w	r8, r4, #372	; 0x174
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 801e812:	f005 f9c9 	bl	8023ba8 <CoreKeyPressHandler__Init>
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e816:	4630      	mov	r0, r6
 801e818:	4621      	mov	r1, r4
 801e81a:	2200      	movs	r2, #0
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e81c:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 801e820:	f000 fec2 	bl	801f5a8 <CoreSimpleTouchHandler__Init>
  CoreRectView__OnSetBounds( _this, _Const0023 );
 801e824:	4d62      	ldr	r5, [pc, #392]	; (801e9b0 <ApplicationorangeButton__Init+0x1cc>)
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationorangeButton_onEnterLeaveTouch );
 801e826:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 801e9dc <ApplicationorangeButton__Init+0x1f8>
  ViewsImage__Init( &_this->orange, &_this->_.XObject, 0 );
 801e82a:	4640      	mov	r0, r8
 801e82c:	4621      	mov	r1, r4
 801e82e:	2200      	movs	r2, #0
 801e830:	f007 f96c 	bl	8025b0c <ViewsImage__Init>
  ViewsImage__Init( &_this->black, &_this->_.XObject, 0 );
 801e834:	4638      	mov	r0, r7
 801e836:	4621      	mov	r1, r4
 801e838:	2200      	movs	r2, #0
 801e83a:	f007 f967 	bl	8025b0c <ViewsImage__Init>
  CoreRectView__OnSetBounds( _this, _Const0023 );
 801e83e:	f8d5 900c 	ldr.w	r9, [r5, #12]
  _this->_.VMT = EW_CLASS( ApplicationorangeButton );
 801e842:	4b5a      	ldr	r3, [pc, #360]	; (801e9ac <ApplicationorangeButton__Init+0x1c8>)
 801e844:	6023      	str	r3, [r4, #0]
  CoreRectView__OnSetBounds( _this, _Const0023 );
 801e846:	4620      	mov	r0, r4
 801e848:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e84c:	f8cd 9000 	str.w	r9, [sp]
 801e850:	f003 f982 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 801e854:	4650      	mov	r0, sl
 801e856:	2100      	movs	r1, #0
 801e858:	f005 fe98 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 801e85c:	4650      	mov	r0, sl
 801e85e:	2132      	movs	r1, #50	; 0x32
 801e860:	f005 fea6 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 801e864:	2395      	movs	r3, #149	; 0x95
 801e866:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 801e86a:	4630      	mov	r0, r6
 801e86c:	213f      	movs	r1, #63	; 0x3f
 801e86e:	f002 facf 	bl	8020e10 <CoreView_OnSetLayout>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0024 );
 801e872:	4b50      	ldr	r3, [pc, #320]	; (801e9b4 <ApplicationorangeButton__Init+0x1d0>)
  ViewsImage_OnSetBitmap( &_this->orange, EwLoadResource( &ApplicationBitmaporange, 
 801e874:	f8df a168 	ldr.w	sl, [pc, #360]	; 801e9e0 <ApplicationorangeButton__Init+0x1fc>
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0024 );
 801e878:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e87c:	4630      	mov	r0, r6
 801e87e:	f002 fb1f 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const0025 );
 801e882:	4b4d      	ldr	r3, [pc, #308]	; (801e9b8 <ApplicationorangeButton__Init+0x1d4>)
 801e884:	4630      	mov	r0, r6
 801e886:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e88a:	f002 fb95 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const0026 );
 801e88e:	4b4b      	ldr	r3, [pc, #300]	; (801e9bc <ApplicationorangeButton__Init+0x1d8>)
 801e890:	4630      	mov	r0, r6
 801e892:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e896:	f002 fc0b 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const0017 );
 801e89a:	4b49      	ldr	r3, [pc, #292]	; (801e9c0 <ApplicationorangeButton__Init+0x1dc>)
 801e89c:	4630      	mov	r0, r6
 801e89e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801e8a2:	f002 fc81 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
 801e8a6:	230f      	movs	r3, #15
 801e8a8:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 801e8ac:	4630      	mov	r0, r6
 801e8ae:	2164      	movs	r1, #100	; 0x64
 801e8b0:	f005 f954 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreRectView__OnSetBounds( &_this->orange, _Const0023 );
 801e8b4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e8b8:	4640      	mov	r0, r8
 801e8ba:	f8cd 9000 	str.w	r9, [sp]
 801e8be:	f003 f94b 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->orange, 1 );
 801e8c2:	4640      	mov	r0, r8
 801e8c4:	2101      	movs	r1, #1
 801e8c6:	f007 fee7 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreRectView__OnSetBounds( &_this->black, _Const0023 );
 801e8ca:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e8ce:	4638      	mov	r0, r7
 801e8d0:	f8cd 9000 	str.w	r9, [sp]
 801e8d4:	f003 f940 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsImage_OnSetAutoSize( &_this->black, 1 );
 801e8d8:	4638      	mov	r0, r7
 801e8da:	2101      	movs	r1, #1
 801e8dc:	f007 fedc 	bl	8026698 <ViewsImage_OnSetAutoSize>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 801e8e0:	4631      	mov	r1, r6
 801e8e2:	4620      	mov	r0, r4
 801e8e4:	2200      	movs	r2, #0
 801e8e6:	f003 fd2b 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->orange ), 0 );
 801e8ea:	4641      	mov	r1, r8
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	2200      	movs	r2, #0
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationorangeButton_onFlashTimer );
 801e8f0:	ad02      	add	r5, sp, #8
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->orange ), 0 );
 801e8f2:	f003 fd25 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->black ), 0 );
 801e8f6:	4639      	mov	r1, r7
 801e8f8:	4620      	mov	r0, r4
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	f003 fd20 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, ApplicationorangeButton_onFlashTimer );
 801e900:	4621      	mov	r1, r4
 801e902:	4628      	mov	r0, r5
 801e904:	4a2f      	ldr	r2, [pc, #188]	; (801e9c4 <ApplicationorangeButton__Init+0x1e0>)
 801e906:	f7fc fc65 	bl	801b1d4 <EwNewSlot>
 801e90a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e90e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801e912:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, ApplicationorangeButton_onPressKey );
 801e916:	4a2c      	ldr	r2, [pc, #176]	; (801e9c8 <ApplicationorangeButton__Init+0x1e4>)
 801e918:	4621      	mov	r1, r4
 801e91a:	4628      	mov	r0, r5
 801e91c:	f7fc fc5a 	bl	801b1d4 <EwNewSlot>
 801e920:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e924:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 801e928:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationorangeButton_onEnterLeaveTouch );
 801e92c:	465a      	mov	r2, fp
 801e92e:	4621      	mov	r1, r4
 801e930:	4628      	mov	r0, r5
 801e932:	f7fc fc4f 	bl	801b1d4 <EwNewSlot>
 801e936:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e93a:	f504 738a 	add.w	r3, r4, #276	; 0x114
 801e93e:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationorangeButton_onEnterLeaveTouch );
 801e942:	465a      	mov	r2, fp
 801e944:	4621      	mov	r1, r4
 801e946:	4628      	mov	r0, r5
 801e948:	f7fc fc44 	bl	801b1d4 <EwNewSlot>
 801e94c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e950:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 801e954:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationorangeButton_onReleaseTouch );
 801e958:	4a1c      	ldr	r2, [pc, #112]	; (801e9cc <ApplicationorangeButton__Init+0x1e8>)
 801e95a:	4621      	mov	r1, r4
 801e95c:	4628      	mov	r0, r5
 801e95e:	f7fc fc39 	bl	801b1d4 <EwNewSlot>
 801e962:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e966:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801e96a:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationorangeButton_onPressTouch );
 801e96e:	4a18      	ldr	r2, [pc, #96]	; (801e9d0 <ApplicationorangeButton__Init+0x1ec>)
 801e970:	4621      	mov	r1, r4
 801e972:	4628      	mov	r0, r5
 801e974:	f7fc fc2e 	bl	801b1d4 <EwNewSlot>
 801e978:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e97c:	f504 7496 	add.w	r4, r4, #300	; 0x12c
 801e980:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsImage_OnSetBitmap( &_this->orange, EwLoadResource( &ApplicationBitmaporange, 
 801e984:	4651      	mov	r1, sl
 801e986:	4813      	ldr	r0, [pc, #76]	; (801e9d4 <ApplicationorangeButton__Init+0x1f0>)
 801e988:	f7fb fe1e 	bl	801a5c8 <EwLoadResource>
 801e98c:	4601      	mov	r1, r0
 801e98e:	4640      	mov	r0, r8
 801e990:	f007 fea4 	bl	80266dc <ViewsImage_OnSetBitmap>
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e994:	4651      	mov	r1, sl
 801e996:	4810      	ldr	r0, [pc, #64]	; (801e9d8 <ApplicationorangeButton__Init+0x1f4>)
 801e998:	f7fb fe16 	bl	801a5c8 <EwLoadResource>
 801e99c:	4601      	mov	r1, r0
 801e99e:	4638      	mov	r0, r7
}
 801e9a0:	b005      	add	sp, #20
 801e9a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ViewsImage_OnSetBitmap( &_this->black, EwLoadResource( &ApplicationBitmapblack, 
 801e9a6:	f007 be99 	b.w	80266dc <ViewsImage_OnSetBitmap>
 801e9aa:	bf00      	nop
 801e9ac:	080376b0 	.word	0x080376b0
 801e9b0:	080372fc 	.word	0x080372fc
 801e9b4:	0803730c 	.word	0x0803730c
 801e9b8:	08037314 	.word	0x08037314
 801e9bc:	0803731c 	.word	0x0803731c
 801e9c0:	08037274 	.word	0x08037274
 801e9c4:	0801ef25 	.word	0x0801ef25
 801e9c8:	0801f36d 	.word	0x0801f36d
 801e9cc:	0801f3b9 	.word	0x0801f3b9
 801e9d0:	0801f3e5 	.word	0x0801f3e5
 801e9d4:	08036f88 	.word	0x08036f88
 801e9d8:	08036f64 	.word	0x08036f64
 801e9dc:	0801eec9 	.word	0x0801eec9
 801e9e0:	08038640 	.word	0x08038640

0801e9e4 <ApplicationCmdScreen__Init>:
{
 801e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e8:	4604      	mov	r4, r0
 801e9ea:	b087      	sub	sp, #28
  ApplicationgreenButton__Init( &_this->greenButton, &_this->_.XObject, 0 );
 801e9ec:	f100 0a94 	add.w	sl, r0, #148	; 0x94
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationCmdScreen );
 801e9f0:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 801ebbc <ApplicationCmdScreen__Init+0x1d8>
  CoreRectView__OnSetBounds( _this, _Const000C );
 801e9f4:	4e62      	ldr	r6, [pc, #392]	; (801eb80 <ApplicationCmdScreen__Init+0x19c>)
  ApplicationScreenBase__Init( &_this->_.Super, aLink, aArg );
 801e9f6:	f7ff f81b 	bl	801da30 <ApplicationScreenBase__Init>
  ApplicationorangeButton__Init( &_this->orangeButton, &_this->_.XObject, 0 );
 801e9fa:	f504 7929 	add.w	r9, r4, #676	; 0x2a4
  ApplicationgreenButton__Init( &_this->greenButton, &_this->_.XObject, 0 );
 801e9fe:	4650      	mov	r0, sl
  _this->_.XObject._.GCT = EW_CLASS_GCT( ApplicationCmdScreen );
 801ea00:	f8c4 b00c 	str.w	fp, [r4, #12]
  ApplicationgreenButton__Init( &_this->greenButton, &_this->_.XObject, 0 );
 801ea04:	4621      	mov	r1, r4
 801ea06:	2200      	movs	r2, #0
 801ea08:	f7ff fce8 	bl	801e3dc <ApplicationgreenButton__Init>
  ApplicationredButton__Init( &_this->redButton, &_this->_.XObject, 0 );
 801ea0c:	f204 48b4 	addw	r8, r4, #1204	; 0x4b4
  ApplicationorangeButton__Init( &_this->orangeButton, &_this->_.XObject, 0 );
 801ea10:	4648      	mov	r0, r9
 801ea12:	4621      	mov	r1, r4
 801ea14:	2200      	movs	r2, #0
 801ea16:	f7ff fee5 	bl	801e7e4 <ApplicationorangeButton__Init>
  ApplicationblueButton__Init( &_this->blueButton, &_this->_.XObject, 0 );
 801ea1a:	f204 67c4 	addw	r7, r4, #1732	; 0x6c4
  ApplicationredButton__Init( &_this->redButton, &_this->_.XObject, 0 );
 801ea1e:	4640      	mov	r0, r8
 801ea20:	4621      	mov	r1, r4
 801ea22:	2200      	movs	r2, #0
  ViewsText__Init( &_this->Text, &_this->_.XObject, 0 );
 801ea24:	f604 05d4 	addw	r5, r4, #2260	; 0x8d4
  ApplicationredButton__Init( &_this->redButton, &_this->_.XObject, 0 );
 801ea28:	f7ff fbdc 	bl	801e1e4 <ApplicationredButton__Init>
  ApplicationblueButton__Init( &_this->blueButton, &_this->_.XObject, 0 );
 801ea2c:	4638      	mov	r0, r7
 801ea2e:	4621      	mov	r1, r4
 801ea30:	2200      	movs	r2, #0
 801ea32:	f7ff fdd5 	bl	801e5e0 <ApplicationblueButton__Init>
  ViewsText__Init( &_this->Text, &_this->_.XObject, 0 );
 801ea36:	4628      	mov	r0, r5
 801ea38:	4621      	mov	r1, r4
 801ea3a:	2200      	movs	r2, #0
 801ea3c:	f007 f870 	bl	8025b20 <ViewsText__Init>
  CoreRectView__OnSetBounds( _this, _Const000C );
 801ea40:	68f3      	ldr	r3, [r6, #12]
  _this->_.VMT = EW_CLASS( ApplicationCmdScreen );
 801ea42:	f8c4 b000 	str.w	fp, [r4]
  CoreRectView__OnSetBounds( _this, _Const000C );
 801ea46:	4620      	mov	r0, r4
 801ea48:	9303      	str	r3, [sp, #12]
 801ea4a:	9300      	str	r3, [sp, #0]
 801ea4c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801ea50:	f003 f882 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle, _Const000C );
 801ea54:	f104 0b58 	add.w	fp, r4, #88	; 0x58
 801ea58:	9b03      	ldr	r3, [sp, #12]
 801ea5a:	9300      	str	r3, [sp, #0]
 801ea5c:	4658      	mov	r0, fp
 801ea5e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801ea62:	f003 f879 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle, _Const0007 );
 801ea66:	4b47      	ldr	r3, [pc, #284]	; (801eb84 <ApplicationCmdScreen__Init+0x1a0>)
 801ea68:	4658      	mov	r0, fp
 801ea6a:	6819      	ldr	r1, [r3, #0]
 801ea6c:	f007 fade 	bl	802602c <ViewsRectangle_OnSetColor>
  CoreRectView__OnSetBounds( &_this->greenButton, _Const000D );
 801ea70:	4b45      	ldr	r3, [pc, #276]	; (801eb88 <ApplicationCmdScreen__Init+0x1a4>)
 801ea72:	68da      	ldr	r2, [r3, #12]
 801ea74:	9200      	str	r2, [sp, #0]
 801ea76:	4650      	mov	r0, sl
 801ea78:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ea7a:	f003 f86d 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->orangeButton, _Const000E );
 801ea7e:	4b43      	ldr	r3, [pc, #268]	; (801eb8c <ApplicationCmdScreen__Init+0x1a8>)
 801ea80:	68da      	ldr	r2, [r3, #12]
 801ea82:	9200      	str	r2, [sp, #0]
 801ea84:	4648      	mov	r0, r9
 801ea86:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ea88:	f003 f866 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->redButton, _Const000F );
 801ea8c:	4b40      	ldr	r3, [pc, #256]	; (801eb90 <ApplicationCmdScreen__Init+0x1ac>)
 801ea8e:	68da      	ldr	r2, [r3, #12]
 801ea90:	9200      	str	r2, [sp, #0]
 801ea92:	4640      	mov	r0, r8
 801ea94:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ea96:	f003 f85f 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->blueButton, _Const0010 );
 801ea9a:	4b3e      	ldr	r3, [pc, #248]	; (801eb94 <ApplicationCmdScreen__Init+0x1b0>)
 801ea9c:	68da      	ldr	r2, [r3, #12]
 801ea9e:	9200      	str	r2, [sp, #0]
 801eaa0:	4638      	mov	r0, r7
 801eaa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801eaa4:	f003 f858 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreRectView__OnSetBounds( &_this->Text, _Const0011 );
 801eaa8:	4b3b      	ldr	r3, [pc, #236]	; (801eb98 <ApplicationCmdScreen__Init+0x1b4>)
  _this->ledBlue = 1;
 801eaaa:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  CoreRectView__OnSetBounds( &_this->Text, _Const0011 );
 801eaae:	68da      	ldr	r2, [r3, #12]
  _this->ledBlue = 1;
 801eab0:	f8c4 1934 	str.w	r1, [r4, #2356]	; 0x934
  CoreRectView__OnSetBounds( &_this->Text, _Const0011 );
 801eab4:	4628      	mov	r0, r5
 801eab6:	9200      	str	r2, [sp, #0]
 801eab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801eaba:	f003 f84d 	bl	8021b58 <CoreRectView__OnSetBounds>
  ViewsText_OnSetAutoSize( &_this->Text, 1 );
 801eabe:	4628      	mov	r0, r5
 801eac0:	2101      	movs	r1, #1
 801eac2:	f008 fef1 	bl	80278a8 <ViewsText_OnSetAutoSize>
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0006 ));
 801eac6:	4835      	ldr	r0, [pc, #212]	; (801eb9c <ApplicationCmdScreen__Init+0x1b8>)
 801eac8:	f7fd fcb2 	bl	801c430 <EwLoadString>
 801eacc:	4601      	mov	r1, r0
 801eace:	4628      	mov	r0, r5
 801ead0:	f007 ff22 	bl	8026918 <ViewsText_OnSetString>
  ViewsText_OnSetColor( &_this->Text, _Const0012 );
 801ead4:	4b32      	ldr	r3, [pc, #200]	; (801eba0 <ApplicationCmdScreen__Init+0x1bc>)
 801ead6:	4628      	mov	r0, r5
 801ead8:	6819      	ldr	r1, [r3, #0]
 801eada:	f007 ff5d 	bl	8026998 <ViewsText_OnSetColor>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->greenButton ), 0 );
 801eade:	4651      	mov	r1, sl
 801eae0:	4620      	mov	r0, r4
 801eae2:	2200      	movs	r2, #0
 801eae4:	f003 fc2c 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->orangeButton ), 0 );
 801eae8:	4649      	mov	r1, r9
 801eaea:	4620      	mov	r0, r4
 801eaec:	2200      	movs	r2, #0
 801eaee:	f003 fc27 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->redButton ), 0 );
 801eaf2:	4641      	mov	r1, r8
 801eaf4:	4620      	mov	r0, r4
 801eaf6:	2200      	movs	r2, #0
 801eaf8:	f003 fc22 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->blueButton ), 0 );
 801eafc:	4639      	mov	r1, r7
 801eafe:	4620      	mov	r0, r4
 801eb00:	2200      	movs	r2, #0
  _this->greenButton.OnActivate = EwNewSlot( _this, ApplicationCmdScreen_Greenmethod );
 801eb02:	ae04      	add	r6, sp, #16
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->blueButton ), 0 );
 801eb04:	f003 fc1c 	bl	8022340 <CoreGroup_Add>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->Text ), 0 );
 801eb08:	4629      	mov	r1, r5
 801eb0a:	4620      	mov	r0, r4
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	f003 fc17 	bl	8022340 <CoreGroup_Add>
  _this->greenButton.OnActivate = EwNewSlot( _this, ApplicationCmdScreen_Greenmethod );
 801eb12:	4621      	mov	r1, r4
 801eb14:	4630      	mov	r0, r6
 801eb16:	4a23      	ldr	r2, [pc, #140]	; (801eba4 <ApplicationCmdScreen__Init+0x1c0>)
 801eb18:	f7fc fb5c 	bl	801b1d4 <EwNewSlot>
 801eb1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801eb20:	f104 03ec 	add.w	r3, r4, #236	; 0xec
 801eb24:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->orangeButton.OnActivate = EwNewSlot( _this, ApplicationCmdScreen_Orangemethod );
 801eb28:	4a1f      	ldr	r2, [pc, #124]	; (801eba8 <ApplicationCmdScreen__Init+0x1c4>)
 801eb2a:	4621      	mov	r1, r4
 801eb2c:	4630      	mov	r0, r6
 801eb2e:	f7fc fb51 	bl	801b1d4 <EwNewSlot>
 801eb32:	e896 0003 	ldmia.w	r6, {r0, r1}
 801eb36:	f504 733f 	add.w	r3, r4, #764	; 0x2fc
 801eb3a:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->redButton.OnActivate = EwNewSlot( _this, ApplicationCmdScreen_Redmethod );
 801eb3e:	4a1b      	ldr	r2, [pc, #108]	; (801ebac <ApplicationCmdScreen__Init+0x1c8>)
 801eb40:	4621      	mov	r1, r4
 801eb42:	4630      	mov	r0, r6
 801eb44:	f7fc fb46 	bl	801b1d4 <EwNewSlot>
 801eb48:	e896 0003 	ldmia.w	r6, {r0, r1}
 801eb4c:	f204 530c 	addw	r3, r4, #1292	; 0x50c
 801eb50:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->blueButton.OnActivate = EwNewSlot( _this, ApplicationCmdScreen_Bluemethod );
 801eb54:	4a16      	ldr	r2, [pc, #88]	; (801ebb0 <ApplicationCmdScreen__Init+0x1cc>)
 801eb56:	4621      	mov	r1, r4
 801eb58:	4630      	mov	r0, r6
 801eb5a:	f7fc fb3b 	bl	801b1d4 <EwNewSlot>
 801eb5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801eb62:	f204 741c 	addw	r4, r4, #1820	; 0x71c
 801eb66:	e884 0003 	stmia.w	r4, {r0, r1}
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontLarge, ResourcesFont ));
 801eb6a:	4912      	ldr	r1, [pc, #72]	; (801ebb4 <ApplicationCmdScreen__Init+0x1d0>)
 801eb6c:	4812      	ldr	r0, [pc, #72]	; (801ebb8 <ApplicationCmdScreen__Init+0x1d4>)
 801eb6e:	f7fb fd2b 	bl	801a5c8 <EwLoadResource>
 801eb72:	4601      	mov	r1, r0
 801eb74:	4628      	mov	r0, r5
}
 801eb76:	b007      	add	sp, #28
 801eb78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontLarge, ResourcesFont ));
 801eb7c:	f007 bef0 	b.w	8026960 <ViewsText_OnSetFont>
 801eb80:	080371e8 	.word	0x080371e8
 801eb84:	080371ac 	.word	0x080371ac
 801eb88:	080371f8 	.word	0x080371f8
 801eb8c:	08037208 	.word	0x08037208
 801eb90:	08037218 	.word	0x08037218
 801eb94:	08037228 	.word	0x08037228
 801eb98:	08037238 	.word	0x08037238
 801eb9c:	080371a4 	.word	0x080371a4
 801eba0:	08037248 	.word	0x08037248
 801eba4:	0801f105 	.word	0x0801f105
 801eba8:	0801ef5d 	.word	0x0801ef5d
 801ebac:	0801eff1 	.word	0x0801eff1
 801ebb0:	0801f085 	.word	0x0801f085
 801ebb4:	08038684 	.word	0x08038684
 801ebb8:	080385b0 	.word	0x080385b0
 801ebbc:	080373c8 	.word	0x080373c8

0801ebc0 <ApplicationredButton__ReInit>:
{
 801ebc0:	b510      	push	{r4, lr}
 801ebc2:	4604      	mov	r4, r0
  TemplatesPushButton__ReInit( &_this->_.Super );
 801ebc4:	f006 ff76 	bl	8025ab4 <TemplatesPushButton__ReInit>
  CoreTimer__ReInit( &_this->FlashTimer );
 801ebc8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ebcc:	f000 fd92 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 801ebd0:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ebd4:	f000 fd7e 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 801ebd8:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ebdc:	f000 fd68 	bl	801f6b0 <CoreSimpleTouchHandler__ReInit>
  ViewsImage__ReInit( &_this->red );
 801ebe0:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ebe4:	f006 ffb2 	bl	8025b4c <ViewsImage__ReInit>
  ViewsImage__ReInit( &_this->black );
 801ebe8:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
}
 801ebec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsImage__ReInit( &_this->black );
 801ebf0:	f006 bfac 	b.w	8025b4c <ViewsImage__ReInit>

0801ebf4 <ApplicationgreenButton__ReInit>:
{
 801ebf4:	b510      	push	{r4, lr}
 801ebf6:	4604      	mov	r4, r0
  TemplatesPushButton__ReInit( &_this->_.Super );
 801ebf8:	f006 ff5c 	bl	8025ab4 <TemplatesPushButton__ReInit>
  CoreTimer__ReInit( &_this->FlashTimer );
 801ebfc:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ec00:	f000 fd78 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 801ec04:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ec08:	f000 fd64 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 801ec0c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ec10:	f000 fd4e 	bl	801f6b0 <CoreSimpleTouchHandler__ReInit>
  ViewsImage__ReInit( &_this->green );
 801ec14:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ec18:	f006 ff98 	bl	8025b4c <ViewsImage__ReInit>
  ViewsImage__ReInit( &_this->black );
 801ec1c:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
}
 801ec20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsImage__ReInit( &_this->black );
 801ec24:	f006 bf92 	b.w	8025b4c <ViewsImage__ReInit>

0801ec28 <ApplicationblueButton__ReInit>:
{
 801ec28:	b510      	push	{r4, lr}
 801ec2a:	4604      	mov	r4, r0
  TemplatesPushButton__ReInit( &_this->_.Super );
 801ec2c:	f006 ff42 	bl	8025ab4 <TemplatesPushButton__ReInit>
  CoreTimer__ReInit( &_this->FlashTimer );
 801ec30:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ec34:	f000 fd5e 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 801ec38:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ec3c:	f000 fd4a 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 801ec40:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ec44:	f000 fd34 	bl	801f6b0 <CoreSimpleTouchHandler__ReInit>
  ViewsImage__ReInit( &_this->blue );
 801ec48:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ec4c:	f006 ff7e 	bl	8025b4c <ViewsImage__ReInit>
  ViewsImage__ReInit( &_this->black );
 801ec50:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
}
 801ec54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsImage__ReInit( &_this->black );
 801ec58:	f006 bf78 	b.w	8025b4c <ViewsImage__ReInit>

0801ec5c <ApplicationorangeButton__ReInit>:
{
 801ec5c:	b510      	push	{r4, lr}
 801ec5e:	4604      	mov	r4, r0
  TemplatesPushButton__ReInit( &_this->_.Super );
 801ec60:	f006 ff28 	bl	8025ab4 <TemplatesPushButton__ReInit>
  CoreTimer__ReInit( &_this->FlashTimer );
 801ec64:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ec68:	f000 fd44 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 801ec6c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ec70:	f000 fd30 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 801ec74:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ec78:	f000 fd1a 	bl	801f6b0 <CoreSimpleTouchHandler__ReInit>
  ViewsImage__ReInit( &_this->orange );
 801ec7c:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ec80:	f006 ff64 	bl	8025b4c <ViewsImage__ReInit>
  ViewsImage__ReInit( &_this->black );
 801ec84:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
}
 801ec88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsImage__ReInit( &_this->black );
 801ec8c:	f006 bf5e 	b.w	8025b4c <ViewsImage__ReInit>

0801ec90 <ApplicationCmdScreen__ReInit>:
{
 801ec90:	b510      	push	{r4, lr}
 801ec92:	4604      	mov	r4, r0
  CoreGroup__ReInit( &_this->_.Super );
 801ec94:	f000 fd10 	bl	801f6b8 <CoreGroup__ReInit>
  ViewsRectangle__ReInit( &_this->Rectangle );
 801ec98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ec9c:	f006 ff52 	bl	8025b44 <ViewsRectangle__ReInit>
  ApplicationgreenButton__ReInit( &_this->greenButton );
 801eca0:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801eca4:	f7ff ffa6 	bl	801ebf4 <ApplicationgreenButton__ReInit>
  ApplicationorangeButton__ReInit( &_this->orangeButton );
 801eca8:	f504 7029 	add.w	r0, r4, #676	; 0x2a4
 801ecac:	f7ff ffd6 	bl	801ec5c <ApplicationorangeButton__ReInit>
  ApplicationredButton__ReInit( &_this->redButton );
 801ecb0:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
 801ecb4:	f7ff ff84 	bl	801ebc0 <ApplicationredButton__ReInit>
  ApplicationblueButton__ReInit( &_this->blueButton );
 801ecb8:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
 801ecbc:	f7ff ffb4 	bl	801ec28 <ApplicationblueButton__ReInit>
  ViewsText__ReInit( &_this->Text );
 801ecc0:	f604 00d4 	addw	r0, r4, #2260	; 0x8d4
}
 801ecc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsText__ReInit( &_this->Text );
 801ecc8:	f006 bf42 	b.w	8025b50 <ViewsText__ReInit>

0801eccc <ApplicationPushButton__ReInit>:
{
 801eccc:	b510      	push	{r4, lr}
 801ecce:	4604      	mov	r4, r0
  TemplatesPushButton__ReInit( &_this->_.Super );
 801ecd0:	f006 fef0 	bl	8025ab4 <TemplatesPushButton__ReInit>
  CoreTimer__ReInit( &_this->FlashTimer );
 801ecd4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ecd8:	f000 fd0c 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 801ecdc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ece0:	f000 fcf8 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 801ece4:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ece8:	f000 fce2 	bl	801f6b0 <CoreSimpleTouchHandler__ReInit>
  ViewsImage__ReInit( &_this->Image );
 801ecec:	f504 70ba 	add.w	r0, r4, #372	; 0x174
}
 801ecf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsImage__ReInit( &_this->Image );
 801ecf4:	f006 bf2a 	b.w	8025b4c <ViewsImage__ReInit>

0801ecf8 <ApplicationApplication__ReInit>:
{
 801ecf8:	b510      	push	{r4, lr}
 801ecfa:	4604      	mov	r4, r0
  CoreRoot__ReInit( &_this->_.Super );
 801ecfc:	f000 fcfc 	bl	801f6f8 <CoreRoot__ReInit>
  ViewsRectangle__ReInit( &_this->Rectangle );
 801ed00:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 801ed04:	f006 ff1e 	bl	8025b44 <ViewsRectangle__ReInit>
  ApplicationPushButton__ReInit( &_this->PushButtonConfig );
 801ed08:	f204 403c 	addw	r0, r4, #1084	; 0x43c
 801ed0c:	f7ff ffde 	bl	801eccc <ApplicationPushButton__ReInit>
  ViewsText__ReInit( &_this->Text );
 801ed10:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
}
 801ed14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ViewsText__ReInit( &_this->Text );
 801ed18:	f006 bf1a 	b.w	8025b50 <ViewsText__ReInit>

0801ed1c <ApplicationredButton__Done>:
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed1c:	4b0d      	ldr	r3, [pc, #52]	; (801ed54 <ApplicationredButton__Done+0x38>)
{
 801ed1e:	b510      	push	{r4, lr}
 801ed20:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed22:	f840 3b60 	str.w	r3, [r0], #96
  CoreTimer__Done( &_this->FlashTimer );
 801ed26:	f001 fc31 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 801ed2a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ed2e:	f000 fd2f 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 801ed32:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ed36:	f000 fcf5 	bl	801f724 <CoreSimpleTouchHandler__Done>
  ViewsImage__Done( &_this->red );
 801ed3a:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ed3e:	f006 ff15 	bl	8025b6c <ViewsImage__Done>
  ViewsImage__Done( &_this->black );
 801ed42:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801ed46:	f006 ff11 	bl	8025b6c <ViewsImage__Done>
  TemplatesPushButton__Done( &_this->_.Super );
 801ed4a:	4620      	mov	r0, r4
}
 801ed4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TemplatesPushButton__Done( &_this->_.Super );
 801ed50:	f006 beb2 	b.w	8025ab8 <TemplatesPushButton__Done>
 801ed54:	080386e8 	.word	0x080386e8

0801ed58 <ApplicationgreenButton__Done>:
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed58:	4b0d      	ldr	r3, [pc, #52]	; (801ed90 <ApplicationgreenButton__Done+0x38>)
{
 801ed5a:	b510      	push	{r4, lr}
 801ed5c:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed5e:	f840 3b60 	str.w	r3, [r0], #96
  CoreTimer__Done( &_this->FlashTimer );
 801ed62:	f001 fc13 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 801ed66:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ed6a:	f000 fd11 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 801ed6e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ed72:	f000 fcd7 	bl	801f724 <CoreSimpleTouchHandler__Done>
  ViewsImage__Done( &_this->green );
 801ed76:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ed7a:	f006 fef7 	bl	8025b6c <ViewsImage__Done>
  ViewsImage__Done( &_this->black );
 801ed7e:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801ed82:	f006 fef3 	bl	8025b6c <ViewsImage__Done>
  TemplatesPushButton__Done( &_this->_.Super );
 801ed86:	4620      	mov	r0, r4
}
 801ed88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TemplatesPushButton__Done( &_this->_.Super );
 801ed8c:	f006 be94 	b.w	8025ab8 <TemplatesPushButton__Done>
 801ed90:	080386e8 	.word	0x080386e8

0801ed94 <ApplicationblueButton__Done>:
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed94:	4b0d      	ldr	r3, [pc, #52]	; (801edcc <ApplicationblueButton__Done+0x38>)
{
 801ed96:	b510      	push	{r4, lr}
 801ed98:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ed9a:	f840 3b60 	str.w	r3, [r0], #96
  CoreTimer__Done( &_this->FlashTimer );
 801ed9e:	f001 fbf5 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 801eda2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801eda6:	f000 fcf3 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 801edaa:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801edae:	f000 fcb9 	bl	801f724 <CoreSimpleTouchHandler__Done>
  ViewsImage__Done( &_this->blue );
 801edb2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801edb6:	f006 fed9 	bl	8025b6c <ViewsImage__Done>
  ViewsImage__Done( &_this->black );
 801edba:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801edbe:	f006 fed5 	bl	8025b6c <ViewsImage__Done>
  TemplatesPushButton__Done( &_this->_.Super );
 801edc2:	4620      	mov	r0, r4
}
 801edc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TemplatesPushButton__Done( &_this->_.Super );
 801edc8:	f006 be76 	b.w	8025ab8 <TemplatesPushButton__Done>
 801edcc:	080386e8 	.word	0x080386e8

0801edd0 <ApplicationorangeButton__Done>:
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801edd0:	4b0d      	ldr	r3, [pc, #52]	; (801ee08 <ApplicationorangeButton__Done+0x38>)
{
 801edd2:	b510      	push	{r4, lr}
 801edd4:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801edd6:	f840 3b60 	str.w	r3, [r0], #96
  CoreTimer__Done( &_this->FlashTimer );
 801edda:	f001 fbd7 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 801edde:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ede2:	f000 fcd5 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 801ede6:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801edea:	f000 fc9b 	bl	801f724 <CoreSimpleTouchHandler__Done>
  ViewsImage__Done( &_this->orange );
 801edee:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801edf2:	f006 febb 	bl	8025b6c <ViewsImage__Done>
  ViewsImage__Done( &_this->black );
 801edf6:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801edfa:	f006 feb7 	bl	8025b6c <ViewsImage__Done>
  TemplatesPushButton__Done( &_this->_.Super );
 801edfe:	4620      	mov	r0, r4
}
 801ee00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TemplatesPushButton__Done( &_this->_.Super );
 801ee04:	f006 be58 	b.w	8025ab8 <TemplatesPushButton__Done>
 801ee08:	080386e8 	.word	0x080386e8

0801ee0c <ApplicationCmdScreen__Done>:
  _this->_.Super._.VMT = EW_CLASS( ApplicationScreenBase );
 801ee0c:	4b10      	ldr	r3, [pc, #64]	; (801ee50 <ApplicationCmdScreen__Done+0x44>)
{
 801ee0e:	b510      	push	{r4, lr}
 801ee10:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( ApplicationScreenBase );
 801ee12:	f840 3b94 	str.w	r3, [r0], #148
  ApplicationgreenButton__Done( &_this->greenButton );
 801ee16:	f7ff ff9f 	bl	801ed58 <ApplicationgreenButton__Done>
  ApplicationorangeButton__Done( &_this->orangeButton );
 801ee1a:	f504 7029 	add.w	r0, r4, #676	; 0x2a4
 801ee1e:	f7ff ffd7 	bl	801edd0 <ApplicationorangeButton__Done>
  ApplicationredButton__Done( &_this->redButton );
 801ee22:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
 801ee26:	f7ff ff79 	bl	801ed1c <ApplicationredButton__Done>
  ApplicationblueButton__Done( &_this->blueButton );
 801ee2a:	f204 60c4 	addw	r0, r4, #1732	; 0x6c4
 801ee2e:	f7ff ffb1 	bl	801ed94 <ApplicationblueButton__Done>
  ViewsText__Done( &_this->Text );
 801ee32:	f604 00d4 	addw	r0, r4, #2260	; 0x8d4
 801ee36:	f007 f8e7 	bl	8026008 <ViewsText__Done>
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	4b05      	ldr	r3, [pc, #20]	; (801ee54 <ApplicationCmdScreen__Done+0x48>)
 801ee3e:	f840 3b58 	str.w	r3, [r0], #88
  ViewsRectangle__Done( &_this->Rectangle );
 801ee42:	f006 fe87 	bl	8025b54 <ViewsRectangle__Done>
  CoreGroup__Done( &_this->_.Super );
 801ee46:	4620      	mov	r0, r4
}
 801ee48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup__Done( &_this->_.Super );
 801ee4c:	f000 bc76 	b.w	801f73c <CoreGroup__Done>
 801ee50:	0803753c 	.word	0x0803753c
 801ee54:	08037c98 	.word	0x08037c98

0801ee58 <ApplicationPushButton__Done>:
{
 801ee58:	b510      	push	{r4, lr}
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ee5a:	4b0b      	ldr	r3, [pc, #44]	; (801ee88 <ApplicationPushButton__Done+0x30>)
{
 801ee5c:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( TemplatesPushButton );
 801ee5e:	f840 3b60 	str.w	r3, [r0], #96
  CoreTimer__Done( &_this->FlashTimer );
 801ee62:	f001 fb93 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 801ee66:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801ee6a:	f000 fc91 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 801ee6e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801ee72:	f000 fc57 	bl	801f724 <CoreSimpleTouchHandler__Done>
  ViewsImage__Done( &_this->Image );
 801ee76:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 801ee7a:	f006 fe77 	bl	8025b6c <ViewsImage__Done>
  TemplatesPushButton__Done( &_this->_.Super );
 801ee7e:	4620      	mov	r0, r4
}
 801ee80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TemplatesPushButton__Done( &_this->_.Super );
 801ee84:	f006 be18 	b.w	8025ab8 <TemplatesPushButton__Done>
 801ee88:	080386e8 	.word	0x080386e8

0801ee8c <ApplicationApplication__Done>:
{
 801ee8c:	b510      	push	{r4, lr}
  _this->_.Super._.VMT = EW_CLASS( CoreRoot );
 801ee8e:	4b0a      	ldr	r3, [pc, #40]	; (801eeb8 <ApplicationApplication__Done+0x2c>)
 801ee90:	6003      	str	r3, [r0, #0]
{
 801ee92:	4604      	mov	r4, r0
  ViewsRectangle__Done( &_this->Rectangle );
 801ee94:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801ee98:	f006 fe5c 	bl	8025b54 <ViewsRectangle__Done>
  ApplicationPushButton__Done( &_this->PushButtonConfig );
 801ee9c:	f204 403c 	addw	r0, r4, #1084	; 0x43c
 801eea0:	f7ff ffda 	bl	801ee58 <ApplicationPushButton__Done>
  ViewsText__Done( &_this->Text );
 801eea4:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
 801eea8:	f007 f8ae 	bl	8026008 <ViewsText__Done>
  CoreRoot__Done( &_this->_.Super );
 801eeac:	4620      	mov	r0, r4
}
 801eeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreRoot__Done( &_this->_.Super );
 801eeb2:	f001 bb7d 	b.w	80205b0 <CoreRoot__Done>
 801eeb6:	bf00      	nop
 801eeb8:	08037f68 	.word	0x08037f68

0801eebc <ApplicationredButton_onEnterLeaveTouch>:
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eebc:	f003 b8e6 	b.w	802208c <CoreGroup_InvalidateViewState>

0801eec0 <ApplicationgreenButton_onEnterLeaveTouch>:
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eec0:	f003 b8e4 	b.w	802208c <CoreGroup_InvalidateViewState>

0801eec4 <ApplicationblueButton_onEnterLeaveTouch>:
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eec4:	f003 b8e2 	b.w	802208c <CoreGroup_InvalidateViewState>

0801eec8 <ApplicationorangeButton_onEnterLeaveTouch>:
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eec8:	f003 b8e0 	b.w	802208c <CoreGroup_InvalidateViewState>

0801eecc <ApplicationPushButton_onEnterLeaveTouch>:
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eecc:	f003 b8de 	b.w	802208c <CoreGroup_InvalidateViewState>

0801eed0 <ApplicationredButton_onFlashTimer>:
{
 801eed0:	b500      	push	{lr}
 801eed2:	b083      	sub	sp, #12
 801eed4:	9001      	str	r0, [sp, #4]
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eed6:	f003 f8d9 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801eeda:	9a01      	ldr	r2, [sp, #4]
 801eedc:	e9d2 0116 	ldrd	r0, r1, [r2, #88]	; 0x58
}
 801eee0:	b003      	add	sp, #12
 801eee2:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801eee6:	f7fc b9a3 	b.w	801b230 <EwPostSignal>
 801eeea:	bf00      	nop

0801eeec <ApplicationgreenButton_onFlashTimer>:
{
 801eeec:	b500      	push	{lr}
 801eeee:	b083      	sub	sp, #12
 801eef0:	9001      	str	r0, [sp, #4]
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801eef2:	f003 f8cb 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801eef6:	9a01      	ldr	r2, [sp, #4]
 801eef8:	e9d2 0116 	ldrd	r0, r1, [r2, #88]	; 0x58
}
 801eefc:	b003      	add	sp, #12
 801eefe:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef02:	f7fc b995 	b.w	801b230 <EwPostSignal>
 801ef06:	bf00      	nop

0801ef08 <ApplicationblueButton_onFlashTimer>:
{
 801ef08:	b500      	push	{lr}
 801ef0a:	b083      	sub	sp, #12
 801ef0c:	9001      	str	r0, [sp, #4]
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801ef0e:	f003 f8bd 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef12:	9a01      	ldr	r2, [sp, #4]
 801ef14:	e9d2 0116 	ldrd	r0, r1, [r2, #88]	; 0x58
}
 801ef18:	b003      	add	sp, #12
 801ef1a:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef1e:	f7fc b987 	b.w	801b230 <EwPostSignal>
 801ef22:	bf00      	nop

0801ef24 <ApplicationorangeButton_onFlashTimer>:
{
 801ef24:	b500      	push	{lr}
 801ef26:	b083      	sub	sp, #12
 801ef28:	9001      	str	r0, [sp, #4]
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801ef2a:	f003 f8af 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef2e:	9a01      	ldr	r2, [sp, #4]
 801ef30:	e9d2 0116 	ldrd	r0, r1, [r2, #88]	; 0x58
}
 801ef34:	b003      	add	sp, #12
 801ef36:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef3a:	f7fc b979 	b.w	801b230 <EwPostSignal>
 801ef3e:	bf00      	nop

0801ef40 <ApplicationPushButton_onFlashTimer>:
{
 801ef40:	b500      	push	{lr}
 801ef42:	b083      	sub	sp, #12
 801ef44:	9001      	str	r0, [sp, #4]
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801ef46:	f003 f8a1 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef4a:	9a01      	ldr	r2, [sp, #4]
 801ef4c:	e9d2 0116 	ldrd	r0, r1, [r2, #88]	; 0x58
}
 801ef50:	b003      	add	sp, #12
 801ef52:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801ef56:	f7fc b96b 	b.w	801b230 <EwPostSignal>
 801ef5a:	bf00      	nop

0801ef5c <ApplicationCmdScreen_Orangemethod>:
{
 801ef5c:	b570      	push	{r4, r5, r6, lr}
  if ( _this->ledOrange == 0 )
 801ef5e:	f890 5936 	ldrb.w	r5, [r0, #2358]	; 0x936
{
 801ef62:	4604      	mov	r4, r0
  if ( _this->ledOrange == 0 )
 801ef64:	b115      	cbz	r5, 801ef6c <ApplicationCmdScreen_Orangemethod+0x10>
  if ( _this->ledOrange == 1 )
 801ef66:	2d01      	cmp	r5, #1
 801ef68:	d01e      	beq.n	801efa8 <ApplicationCmdScreen_Orangemethod+0x4c>
}
 801ef6a:	bd70      	pop	{r4, r5, r6, pc}
    _this->ledOrange = 1;
 801ef6c:	2601      	movs	r6, #1
    ViewsImage_OnSetVisible( &_this->orangeButton.black, 0 );
 801ef6e:	4629      	mov	r1, r5
 801ef70:	f200 4064 	addw	r0, r0, #1124	; 0x464
 801ef74:	f007 f9a8 	bl	80262c8 <ViewsImage_OnSetVisible>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801ef78:	4632      	mov	r2, r6
 801ef7a:	481a      	ldr	r0, [pc, #104]	; (801efe4 <ApplicationCmdScreen_Orangemethod+0x88>)
    _this->ledOrange = 1;
 801ef7c:	f884 6936 	strb.w	r6, [r4, #2358]	; 0x936
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801ef80:	2140      	movs	r1, #64	; 0x40
 801ef82:	f00d fefd 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 801ef86:	462a      	mov	r2, r5
 801ef88:	4817      	ldr	r0, [pc, #92]	; (801efe8 <ApplicationCmdScreen_Orangemethod+0x8c>)
 801ef8a:	2110      	movs	r1, #16
 801ef8c:	f00d fef8 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801ef90:	4632      	mov	r2, r6
 801ef92:	4815      	ldr	r0, [pc, #84]	; (801efe8 <ApplicationCmdScreen_Orangemethod+0x8c>)
 801ef94:	2120      	movs	r1, #32
 801ef96:	f00d fef3 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801ef9a:	4632      	mov	r2, r6
 801ef9c:	4813      	ldr	r0, [pc, #76]	; (801efec <ApplicationCmdScreen_Orangemethod+0x90>)
}
 801ef9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801efa2:	2108      	movs	r1, #8
 801efa4:	f00d beec 	b.w	802cd80 <HAL_GPIO_WritePin>
    ViewsImage_OnSetVisible( &_this->orangeButton.black, 1 );
 801efa8:	4629      	mov	r1, r5
 801efaa:	f200 4064 	addw	r0, r0, #1124	; 0x464
 801efae:	f007 f98b 	bl	80262c8 <ViewsImage_OnSetVisible>
    _this->ledOrange = 0;
 801efb2:	2300      	movs	r3, #0
 801efb4:	f884 3936 	strb.w	r3, [r4, #2358]	; 0x936
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801efb8:	462a      	mov	r2, r5
 801efba:	480a      	ldr	r0, [pc, #40]	; (801efe4 <ApplicationCmdScreen_Orangemethod+0x88>)
 801efbc:	2140      	movs	r1, #64	; 0x40
 801efbe:	f00d fedf 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801efc2:	462a      	mov	r2, r5
 801efc4:	4808      	ldr	r0, [pc, #32]	; (801efe8 <ApplicationCmdScreen_Orangemethod+0x8c>)
 801efc6:	2110      	movs	r1, #16
 801efc8:	f00d feda 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801efcc:	462a      	mov	r2, r5
 801efce:	4806      	ldr	r0, [pc, #24]	; (801efe8 <ApplicationCmdScreen_Orangemethod+0x8c>)
 801efd0:	2120      	movs	r1, #32
 801efd2:	f00d fed5 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801efd6:	462a      	mov	r2, r5
 801efd8:	4804      	ldr	r0, [pc, #16]	; (801efec <ApplicationCmdScreen_Orangemethod+0x90>)
}
 801efda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801efde:	2108      	movs	r1, #8
 801efe0:	f00d bece 	b.w	802cd80 <HAL_GPIO_WritePin>
 801efe4:	40021800 	.word	0x40021800
 801efe8:	40020c00 	.word	0x40020c00
 801efec:	40022800 	.word	0x40022800

0801eff0 <ApplicationCmdScreen_Redmethod>:
{
 801eff0:	b570      	push	{r4, r5, r6, lr}
  if ( _this->ledRed == 0 )
 801eff2:	f890 5935 	ldrb.w	r5, [r0, #2357]	; 0x935
{
 801eff6:	4604      	mov	r4, r0
  if ( _this->ledRed == 0 )
 801eff8:	b115      	cbz	r5, 801f000 <ApplicationCmdScreen_Redmethod+0x10>
  if ( _this->ledRed == 1 )
 801effa:	2d01      	cmp	r5, #1
 801effc:	d01e      	beq.n	801f03c <ApplicationCmdScreen_Redmethod+0x4c>
}
 801effe:	bd70      	pop	{r4, r5, r6, pc}
    _this->ledRed = 1;
 801f000:	2601      	movs	r6, #1
    ViewsImage_OnSetVisible( &_this->redButton.black, 0 );
 801f002:	4629      	mov	r1, r5
 801f004:	f200 6074 	addw	r0, r0, #1652	; 0x674
 801f008:	f007 f95e 	bl	80262c8 <ViewsImage_OnSetVisible>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f00c:	4632      	mov	r2, r6
 801f00e:	481a      	ldr	r0, [pc, #104]	; (801f078 <ApplicationCmdScreen_Redmethod+0x88>)
    _this->ledRed = 1;
 801f010:	f884 6935 	strb.w	r6, [r4, #2357]	; 0x935
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f014:	2140      	movs	r1, #64	; 0x40
 801f016:	f00d feb3 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f01a:	4632      	mov	r2, r6
 801f01c:	4817      	ldr	r0, [pc, #92]	; (801f07c <ApplicationCmdScreen_Redmethod+0x8c>)
 801f01e:	2110      	movs	r1, #16
 801f020:	f00d feae 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 801f024:	462a      	mov	r2, r5
 801f026:	4815      	ldr	r0, [pc, #84]	; (801f07c <ApplicationCmdScreen_Redmethod+0x8c>)
 801f028:	2120      	movs	r1, #32
 801f02a:	f00d fea9 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f02e:	4632      	mov	r2, r6
 801f030:	4813      	ldr	r0, [pc, #76]	; (801f080 <ApplicationCmdScreen_Redmethod+0x90>)
}
 801f032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f036:	2108      	movs	r1, #8
 801f038:	f00d bea2 	b.w	802cd80 <HAL_GPIO_WritePin>
    ViewsImage_OnSetVisible( &_this->redButton.black, 1 );
 801f03c:	4629      	mov	r1, r5
 801f03e:	f200 6074 	addw	r0, r0, #1652	; 0x674
 801f042:	f007 f941 	bl	80262c8 <ViewsImage_OnSetVisible>
    _this->ledRed = 0;
 801f046:	2300      	movs	r3, #0
 801f048:	f884 3935 	strb.w	r3, [r4, #2357]	; 0x935
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f04c:	462a      	mov	r2, r5
 801f04e:	480a      	ldr	r0, [pc, #40]	; (801f078 <ApplicationCmdScreen_Redmethod+0x88>)
 801f050:	2140      	movs	r1, #64	; 0x40
 801f052:	f00d fe95 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f056:	462a      	mov	r2, r5
 801f058:	4808      	ldr	r0, [pc, #32]	; (801f07c <ApplicationCmdScreen_Redmethod+0x8c>)
 801f05a:	2110      	movs	r1, #16
 801f05c:	f00d fe90 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f060:	462a      	mov	r2, r5
 801f062:	4806      	ldr	r0, [pc, #24]	; (801f07c <ApplicationCmdScreen_Redmethod+0x8c>)
 801f064:	2120      	movs	r1, #32
 801f066:	f00d fe8b 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f06a:	462a      	mov	r2, r5
 801f06c:	4804      	ldr	r0, [pc, #16]	; (801f080 <ApplicationCmdScreen_Redmethod+0x90>)
}
 801f06e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f072:	2108      	movs	r1, #8
 801f074:	f00d be84 	b.w	802cd80 <HAL_GPIO_WritePin>
 801f078:	40021800 	.word	0x40021800
 801f07c:	40020c00 	.word	0x40020c00
 801f080:	40022800 	.word	0x40022800

0801f084 <ApplicationCmdScreen_Bluemethod>:
{
 801f084:	b570      	push	{r4, r5, r6, lr}
  if ( _this->ledBlue == 0 )
 801f086:	f890 5934 	ldrb.w	r5, [r0, #2356]	; 0x934
{
 801f08a:	4604      	mov	r4, r0
  if ( _this->ledBlue == 0 )
 801f08c:	b115      	cbz	r5, 801f094 <ApplicationCmdScreen_Bluemethod+0x10>
  if ( _this->ledBlue == 1 )
 801f08e:	2d01      	cmp	r5, #1
 801f090:	d01e      	beq.n	801f0d0 <ApplicationCmdScreen_Bluemethod+0x4c>
}
 801f092:	bd70      	pop	{r4, r5, r6, pc}
    _this->ledBlue = 1;
 801f094:	2601      	movs	r6, #1
    ViewsImage_OnSetVisible( &_this->blueButton.black, 0 );
 801f096:	4629      	mov	r1, r5
 801f098:	f600 0084 	addw	r0, r0, #2180	; 0x884
 801f09c:	f007 f914 	bl	80262c8 <ViewsImage_OnSetVisible>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f0a0:	4815      	ldr	r0, [pc, #84]	; (801f0f8 <ApplicationCmdScreen_Bluemethod+0x74>)
    _this->ledBlue = 1;
 801f0a2:	f884 6934 	strb.w	r6, [r4, #2356]	; 0x934
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f0a6:	4632      	mov	r2, r6
 801f0a8:	2140      	movs	r1, #64	; 0x40
 801f0aa:	f00d fe69 	bl	802cd80 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f0ae:	4632      	mov	r2, r6
 801f0b0:	4812      	ldr	r0, [pc, #72]	; (801f0fc <ApplicationCmdScreen_Bluemethod+0x78>)
 801f0b2:	2110      	movs	r1, #16
 801f0b4:	f00d fe64 	bl	802cd80 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f0b8:	4632      	mov	r2, r6
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f0ba:	4810      	ldr	r0, [pc, #64]	; (801f0fc <ApplicationCmdScreen_Bluemethod+0x78>)
 801f0bc:	2120      	movs	r1, #32
 801f0be:	f00d fe5f 	bl	802cd80 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f0c2:	462a      	mov	r2, r5
 801f0c4:	480e      	ldr	r0, [pc, #56]	; (801f100 <ApplicationCmdScreen_Bluemethod+0x7c>)
}
 801f0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f0ca:	2108      	movs	r1, #8
 801f0cc:	f00d be58 	b.w	802cd80 <HAL_GPIO_WritePin>
    ViewsImage_OnSetVisible( &_this->blueButton.black, 1 );
 801f0d0:	4629      	mov	r1, r5
 801f0d2:	f600 0084 	addw	r0, r0, #2180	; 0x884
 801f0d6:	f007 f8f7 	bl	80262c8 <ViewsImage_OnSetVisible>
    _this->ledBlue = 0;
 801f0da:	2300      	movs	r3, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f0dc:	4806      	ldr	r0, [pc, #24]	; (801f0f8 <ApplicationCmdScreen_Bluemethod+0x74>)
    _this->ledBlue = 0;
 801f0de:	f884 3934 	strb.w	r3, [r4, #2356]	; 0x934
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f0e2:	462a      	mov	r2, r5
 801f0e4:	2140      	movs	r1, #64	; 0x40
 801f0e6:	f00d fe4b 	bl	802cd80 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f0ea:	462a      	mov	r2, r5
 801f0ec:	4803      	ldr	r0, [pc, #12]	; (801f0fc <ApplicationCmdScreen_Bluemethod+0x78>)
 801f0ee:	2110      	movs	r1, #16
 801f0f0:	f00d fe46 	bl	802cd80 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f0f4:	462a      	mov	r2, r5
 801f0f6:	e7e0      	b.n	801f0ba <ApplicationCmdScreen_Bluemethod+0x36>
 801f0f8:	40021800 	.word	0x40021800
 801f0fc:	40020c00 	.word	0x40020c00
 801f100:	40022800 	.word	0x40022800

0801f104 <ApplicationCmdScreen_Greenmethod>:
{
 801f104:	b570      	push	{r4, r5, r6, lr}
  if ( _this->ledGreen == 0 )
 801f106:	f890 5937 	ldrb.w	r5, [r0, #2359]	; 0x937
{
 801f10a:	4604      	mov	r4, r0
  if ( _this->ledGreen == 0 )
 801f10c:	b115      	cbz	r5, 801f114 <ApplicationCmdScreen_Greenmethod+0x10>
  if ( _this->ledGreen == 1 )
 801f10e:	2d01      	cmp	r5, #1
 801f110:	d01e      	beq.n	801f150 <ApplicationCmdScreen_Greenmethod+0x4c>
}
 801f112:	bd70      	pop	{r4, r5, r6, pc}
    _this->ledGreen = 1;
 801f114:	2601      	movs	r6, #1
    ViewsImage_OnSetVisible( &_this->greenButton.black, 0 );
 801f116:	4629      	mov	r1, r5
 801f118:	f500 7015 	add.w	r0, r0, #596	; 0x254
 801f11c:	f007 f8d4 	bl	80262c8 <ViewsImage_OnSetVisible>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 801f120:	462a      	mov	r2, r5
 801f122:	481a      	ldr	r0, [pc, #104]	; (801f18c <ApplicationCmdScreen_Greenmethod+0x88>)
    _this->ledGreen = 1;
 801f124:	f884 6937 	strb.w	r6, [r4, #2359]	; 0x937
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 801f128:	2140      	movs	r1, #64	; 0x40
 801f12a:	f00d fe29 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f12e:	4632      	mov	r2, r6
 801f130:	4817      	ldr	r0, [pc, #92]	; (801f190 <ApplicationCmdScreen_Greenmethod+0x8c>)
 801f132:	2110      	movs	r1, #16
 801f134:	f00d fe24 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f138:	4632      	mov	r2, r6
 801f13a:	4815      	ldr	r0, [pc, #84]	; (801f190 <ApplicationCmdScreen_Greenmethod+0x8c>)
 801f13c:	2120      	movs	r1, #32
 801f13e:	f00d fe1f 	bl	802cd80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f142:	4632      	mov	r2, r6
 801f144:	4813      	ldr	r0, [pc, #76]	; (801f194 <ApplicationCmdScreen_Greenmethod+0x90>)
}
 801f146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f14a:	2108      	movs	r1, #8
 801f14c:	f00d be18 	b.w	802cd80 <HAL_GPIO_WritePin>
    CoreGroup_OnSetVisible((CoreGroup)&_this->greenButton, 1 );
 801f150:	4629      	mov	r1, r5
 801f152:	3094      	adds	r0, #148	; 0x94
 801f154:	f002 ff76 	bl	8022044 <CoreGroup_OnSetVisible>
    _this->ledGreen = 0;
 801f158:	2300      	movs	r3, #0
 801f15a:	f884 3937 	strb.w	r3, [r4, #2359]	; 0x937
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 801f15e:	462a      	mov	r2, r5
 801f160:	480a      	ldr	r0, [pc, #40]	; (801f18c <ApplicationCmdScreen_Greenmethod+0x88>)
 801f162:	2140      	movs	r1, #64	; 0x40
 801f164:	f00d fe0c 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 801f168:	462a      	mov	r2, r5
 801f16a:	4809      	ldr	r0, [pc, #36]	; (801f190 <ApplicationCmdScreen_Greenmethod+0x8c>)
 801f16c:	2110      	movs	r1, #16
 801f16e:	f00d fe07 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 801f172:	462a      	mov	r2, r5
 801f174:	4806      	ldr	r0, [pc, #24]	; (801f190 <ApplicationCmdScreen_Greenmethod+0x8c>)
 801f176:	2120      	movs	r1, #32
 801f178:	f00d fe02 	bl	802cd80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f17c:	462a      	mov	r2, r5
 801f17e:	4805      	ldr	r0, [pc, #20]	; (801f194 <ApplicationCmdScreen_Greenmethod+0x90>)
}
 801f180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 801f184:	2108      	movs	r1, #8
 801f186:	f00d bdfb 	b.w	802cd80 <HAL_GPIO_WritePin>
 801f18a:	bf00      	nop
 801f18c:	40021800 	.word	0x40021800
 801f190:	40020c00 	.word	0x40020c00
 801f194:	40022800 	.word	0x40022800

0801f198 <ApplicationredButton_onPressKey>:
{
 801f198:	b538      	push	{r3, r4, r5, lr}
  if ( _this->TouchHandler.Down )
 801f19a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
 801f19e:	b91b      	cbnz	r3, 801f1a8 <ApplicationredButton_onPressKey+0x10>
  if ( _this->KeyHandler.Repetition )
 801f1a0:	f890 50c8 	ldrb.w	r5, [r0, #200]	; 0xc8
 801f1a4:	4604      	mov	r4, r0
 801f1a6:	b105      	cbz	r5, 801f1aa <ApplicationredButton_onPressKey+0x12>
}
 801f1a8:	bd38      	pop	{r3, r4, r5, pc}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801f1aa:	f002 ff6f 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 801f1ae:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801f1b2:	b933      	cbnz	r3, 801f1c2 <ApplicationredButton_onPressKey+0x2a>
 801f1b4:	3460      	adds	r4, #96	; 0x60
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f1b6:	4620      	mov	r0, r4
 801f1b8:	2101      	movs	r1, #1
}
 801f1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f1be:	f005 ba05 	b.w	80245cc <CoreTimer_OnSetEnabled>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f1c2:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 801f1c6:	4622      	mov	r2, r4
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f1c8:	3460      	adds	r4, #96	; 0x60
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f1ca:	f7fc f831 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f1ce:	4629      	mov	r1, r5
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f005 f9fb 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	2101      	movs	r1, #1
}
 801f1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f1de:	f005 b9f5 	b.w	80245cc <CoreTimer_OnSetEnabled>
 801f1e2:	bf00      	nop

0801f1e4 <ApplicationredButton_onReleaseTouch>:
  if ( !_this->TouchHandler.Inside )
 801f1e4:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
 801f1e8:	b16b      	cbz	r3, 801f206 <ApplicationredButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.AutoDeflected )
 801f1ea:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 801f1ee:	b953      	cbnz	r3, 801f206 <ApplicationredButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.HoldPeriod >= _this->FlashTimer.Begin )
 801f1f0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801f1f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801f1f8:	429a      	cmp	r2, r3
 801f1fa:	db05      	blt.n	801f208 <ApplicationredButton_onReleaseTouch+0x24>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f1fc:	4602      	mov	r2, r0
 801f1fe:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f202:	f7fc b815 	b.w	801b230 <EwPostSignal>
}
 801f206:	4770      	bx	lr
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f208:	3060      	adds	r0, #96	; 0x60
 801f20a:	2101      	movs	r1, #1
 801f20c:	f005 b9de 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f210 <ApplicationredButton_onPressTouch>:
  if ( _this->FlashTimer.Enabled )
 801f210:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f214:	b903      	cbnz	r3, 801f218 <ApplicationredButton_onPressTouch+0x8>
 801f216:	4770      	bx	lr
{
 801f218:	b510      	push	{r4, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f21a:	4602      	mov	r2, r0
 801f21c:	4604      	mov	r4, r0
 801f21e:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f222:	f7fc f805 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f226:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801f22a:	2100      	movs	r1, #0
}
 801f22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f230:	f005 b9cc 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f234 <ApplicationgreenButton_onPressKey>:
{
 801f234:	b538      	push	{r3, r4, r5, lr}
  if ( _this->TouchHandler.Down )
 801f236:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
 801f23a:	b91b      	cbnz	r3, 801f244 <ApplicationgreenButton_onPressKey+0x10>
  if ( _this->KeyHandler.Repetition )
 801f23c:	f890 50c8 	ldrb.w	r5, [r0, #200]	; 0xc8
 801f240:	4604      	mov	r4, r0
 801f242:	b105      	cbz	r5, 801f246 <ApplicationgreenButton_onPressKey+0x12>
}
 801f244:	bd38      	pop	{r3, r4, r5, pc}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801f246:	f002 ff21 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 801f24a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801f24e:	b933      	cbnz	r3, 801f25e <ApplicationgreenButton_onPressKey+0x2a>
 801f250:	3460      	adds	r4, #96	; 0x60
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f252:	4620      	mov	r0, r4
 801f254:	2101      	movs	r1, #1
}
 801f256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f25a:	f005 b9b7 	b.w	80245cc <CoreTimer_OnSetEnabled>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f25e:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 801f262:	4622      	mov	r2, r4
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f264:	3460      	adds	r4, #96	; 0x60
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f266:	f7fb ffe3 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f26a:	4629      	mov	r1, r5
 801f26c:	4620      	mov	r0, r4
 801f26e:	f005 f9ad 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f272:	4620      	mov	r0, r4
 801f274:	2101      	movs	r1, #1
}
 801f276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f27a:	f005 b9a7 	b.w	80245cc <CoreTimer_OnSetEnabled>
 801f27e:	bf00      	nop

0801f280 <ApplicationgreenButton_onReleaseTouch>:
  if ( !_this->TouchHandler.Inside )
 801f280:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
 801f284:	b16b      	cbz	r3, 801f2a2 <ApplicationgreenButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.AutoDeflected )
 801f286:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 801f28a:	b953      	cbnz	r3, 801f2a2 <ApplicationgreenButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.HoldPeriod >= _this->FlashTimer.Begin )
 801f28c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801f290:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801f294:	429a      	cmp	r2, r3
 801f296:	db05      	blt.n	801f2a4 <ApplicationgreenButton_onReleaseTouch+0x24>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f298:	4602      	mov	r2, r0
 801f29a:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f29e:	f7fb bfc7 	b.w	801b230 <EwPostSignal>
}
 801f2a2:	4770      	bx	lr
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f2a4:	3060      	adds	r0, #96	; 0x60
 801f2a6:	2101      	movs	r1, #1
 801f2a8:	f005 b990 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f2ac <ApplicationgreenButton_onPressTouch>:
  if ( _this->FlashTimer.Enabled )
 801f2ac:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f2b0:	b903      	cbnz	r3, 801f2b4 <ApplicationgreenButton_onPressTouch+0x8>
 801f2b2:	4770      	bx	lr
{
 801f2b4:	b510      	push	{r4, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f2b6:	4602      	mov	r2, r0
 801f2b8:	4604      	mov	r4, r0
 801f2ba:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f2be:	f7fb ffb7 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f2c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801f2c6:	2100      	movs	r1, #0
}
 801f2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f2cc:	f005 b97e 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f2d0 <ApplicationblueButton_onPressKey>:
{
 801f2d0:	b538      	push	{r3, r4, r5, lr}
  if ( _this->TouchHandler.Down )
 801f2d2:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
 801f2d6:	b91b      	cbnz	r3, 801f2e0 <ApplicationblueButton_onPressKey+0x10>
  if ( _this->KeyHandler.Repetition )
 801f2d8:	f890 50c8 	ldrb.w	r5, [r0, #200]	; 0xc8
 801f2dc:	4604      	mov	r4, r0
 801f2de:	b105      	cbz	r5, 801f2e2 <ApplicationblueButton_onPressKey+0x12>
}
 801f2e0:	bd38      	pop	{r3, r4, r5, pc}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801f2e2:	f002 fed3 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 801f2e6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801f2ea:	b933      	cbnz	r3, 801f2fa <ApplicationblueButton_onPressKey+0x2a>
 801f2ec:	3460      	adds	r4, #96	; 0x60
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	2101      	movs	r1, #1
}
 801f2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f2f6:	f005 b969 	b.w	80245cc <CoreTimer_OnSetEnabled>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f2fa:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 801f2fe:	4622      	mov	r2, r4
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f300:	3460      	adds	r4, #96	; 0x60
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f302:	f7fb ff95 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f306:	4629      	mov	r1, r5
 801f308:	4620      	mov	r0, r4
 801f30a:	f005 f95f 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f30e:	4620      	mov	r0, r4
 801f310:	2101      	movs	r1, #1
}
 801f312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f316:	f005 b959 	b.w	80245cc <CoreTimer_OnSetEnabled>
 801f31a:	bf00      	nop

0801f31c <ApplicationblueButton_onReleaseTouch>:
  if ( !_this->TouchHandler.Inside )
 801f31c:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
 801f320:	b16b      	cbz	r3, 801f33e <ApplicationblueButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.AutoDeflected )
 801f322:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 801f326:	b953      	cbnz	r3, 801f33e <ApplicationblueButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.HoldPeriod >= _this->FlashTimer.Begin )
 801f328:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801f32c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801f330:	429a      	cmp	r2, r3
 801f332:	db05      	blt.n	801f340 <ApplicationblueButton_onReleaseTouch+0x24>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f334:	4602      	mov	r2, r0
 801f336:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f33a:	f7fb bf79 	b.w	801b230 <EwPostSignal>
}
 801f33e:	4770      	bx	lr
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f340:	3060      	adds	r0, #96	; 0x60
 801f342:	2101      	movs	r1, #1
 801f344:	f005 b942 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f348 <ApplicationblueButton_onPressTouch>:
  if ( _this->FlashTimer.Enabled )
 801f348:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f34c:	b903      	cbnz	r3, 801f350 <ApplicationblueButton_onPressTouch+0x8>
 801f34e:	4770      	bx	lr
{
 801f350:	b510      	push	{r4, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f352:	4602      	mov	r2, r0
 801f354:	4604      	mov	r4, r0
 801f356:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f35a:	f7fb ff69 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f35e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801f362:	2100      	movs	r1, #0
}
 801f364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f368:	f005 b930 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f36c <ApplicationorangeButton_onPressKey>:
{
 801f36c:	b538      	push	{r3, r4, r5, lr}
  if ( _this->TouchHandler.Down )
 801f36e:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
 801f372:	b91b      	cbnz	r3, 801f37c <ApplicationorangeButton_onPressKey+0x10>
  if ( _this->KeyHandler.Repetition )
 801f374:	f890 50c8 	ldrb.w	r5, [r0, #200]	; 0xc8
 801f378:	4604      	mov	r4, r0
 801f37a:	b105      	cbz	r5, 801f37e <ApplicationorangeButton_onPressKey+0x12>
}
 801f37c:	bd38      	pop	{r3, r4, r5, pc}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801f37e:	f002 fe85 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 801f382:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801f386:	b933      	cbnz	r3, 801f396 <ApplicationorangeButton_onPressKey+0x2a>
 801f388:	3460      	adds	r4, #96	; 0x60
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f38a:	4620      	mov	r0, r4
 801f38c:	2101      	movs	r1, #1
}
 801f38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f392:	f005 b91b 	b.w	80245cc <CoreTimer_OnSetEnabled>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f396:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 801f39a:	4622      	mov	r2, r4
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f39c:	3460      	adds	r4, #96	; 0x60
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f39e:	f7fb ff47 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f3a2:	4629      	mov	r1, r5
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	f005 f911 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f3aa:	4620      	mov	r0, r4
 801f3ac:	2101      	movs	r1, #1
}
 801f3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f3b2:	f005 b90b 	b.w	80245cc <CoreTimer_OnSetEnabled>
 801f3b6:	bf00      	nop

0801f3b8 <ApplicationorangeButton_onReleaseTouch>:
  if ( !_this->TouchHandler.Inside )
 801f3b8:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
 801f3bc:	b16b      	cbz	r3, 801f3da <ApplicationorangeButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.AutoDeflected )
 801f3be:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 801f3c2:	b953      	cbnz	r3, 801f3da <ApplicationorangeButton_onReleaseTouch+0x22>
  if ( _this->TouchHandler.HoldPeriod >= _this->FlashTimer.Begin )
 801f3c4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801f3c8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801f3cc:	429a      	cmp	r2, r3
 801f3ce:	db05      	blt.n	801f3dc <ApplicationorangeButton_onReleaseTouch+0x24>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f3d0:	4602      	mov	r2, r0
 801f3d2:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f3d6:	f7fb bf2b 	b.w	801b230 <EwPostSignal>
}
 801f3da:	4770      	bx	lr
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f3dc:	3060      	adds	r0, #96	; 0x60
 801f3de:	2101      	movs	r1, #1
 801f3e0:	f005 b8f4 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f3e4 <ApplicationorangeButton_onPressTouch>:
  if ( _this->FlashTimer.Enabled )
 801f3e4:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f3e8:	b903      	cbnz	r3, 801f3ec <ApplicationorangeButton_onPressTouch+0x8>
 801f3ea:	4770      	bx	lr
{
 801f3ec:	b510      	push	{r4, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f3ee:	4602      	mov	r2, r0
 801f3f0:	4604      	mov	r4, r0
 801f3f2:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f3f6:	f7fb ff1b 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f3fa:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801f3fe:	2100      	movs	r1, #0
}
 801f400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f404:	f005 b8e2 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f408 <ApplicationPushButton_onPressKey>:
{
 801f408:	b538      	push	{r3, r4, r5, lr}
  if ( _this->TouchHandler.Down )
 801f40a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
 801f40e:	b91b      	cbnz	r3, 801f418 <ApplicationPushButton_onPressKey+0x10>
  if ( _this->KeyHandler.Repetition )
 801f410:	f890 50c8 	ldrb.w	r5, [r0, #200]	; 0xc8
 801f414:	4604      	mov	r4, r0
 801f416:	b105      	cbz	r5, 801f41a <ApplicationPushButton_onPressKey+0x12>
}
 801f418:	bd38      	pop	{r3, r4, r5, pc}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 801f41a:	f002 fe37 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 801f41e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801f422:	b933      	cbnz	r3, 801f432 <ApplicationPushButton_onPressKey+0x2a>
 801f424:	3460      	adds	r4, #96	; 0x60
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f426:	4620      	mov	r0, r4
 801f428:	2101      	movs	r1, #1
}
 801f42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f42e:	f005 b8cd 	b.w	80245cc <CoreTimer_OnSetEnabled>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f432:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 801f436:	4622      	mov	r2, r4
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f438:	3460      	adds	r4, #96	; 0x60
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f43a:	f7fb fef9 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f43e:	4629      	mov	r1, r5
 801f440:	4620      	mov	r0, r4
 801f442:	f005 f8c3 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f446:	4620      	mov	r0, r4
 801f448:	2101      	movs	r1, #1
}
 801f44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f44e:	f005 b8bd 	b.w	80245cc <CoreTimer_OnSetEnabled>
 801f452:	bf00      	nop

0801f454 <ApplicationPushButton_onReleaseTouch>:
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Inside )
 801f454:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
 801f458:	b16b      	cbz	r3, 801f476 <ApplicationPushButton_onReleaseTouch+0x22>
    return;

  if ( _this->TouchHandler.AutoDeflected )
 801f45a:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
 801f45e:	b953      	cbnz	r3, 801f476 <ApplicationPushButton_onReleaseTouch+0x22>
    return;

  if ( _this->TouchHandler.HoldPeriod >= _this->FlashTimer.Begin )
 801f460:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801f464:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801f468:	429a      	cmp	r2, r3
 801f46a:	db05      	blt.n	801f478 <ApplicationPushButton_onReleaseTouch+0x24>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f46c:	4602      	mov	r2, r0
 801f46e:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f472:	f7fb bedd 	b.w	801b230 <EwPostSignal>
  else
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
}
 801f476:	4770      	bx	lr
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 801f478:	3060      	adds	r0, #96	; 0x60
 801f47a:	2101      	movs	r1, #1
 801f47c:	f005 b8a6 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f480 <ApplicationPushButton_onPressTouch>:
void ApplicationPushButton_onPressTouch( ApplicationPushButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->FlashTimer.Enabled )
 801f480:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801f484:	b903      	cbnz	r3, 801f488 <ApplicationPushButton_onPressTouch+0x8>
 801f486:	4770      	bx	lr
{
 801f488:	b510      	push	{r4, lr}
  {
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 801f48a:	4602      	mov	r2, r0
 801f48c:	4604      	mov	r4, r0
 801f48e:	e9d0 0116 	ldrd	r0, r1, [r0, #88]	; 0x58
 801f492:	f7fb fecd 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f496:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801f49a:	2100      	movs	r1, #0
  }
}
 801f49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 801f4a0:	f005 b894 	b.w	80245cc <CoreTimer_OnSetEnabled>

0801f4a4 <CoreView_initLayoutContext>:
  XObject__Done( &_this->_.Super );
}

/* 'C' function for method : 'Core::View.initLayoutContext()' */
void CoreView_initLayoutContext( CoreView _this, XRect aBounds, CoreOutline aOutline )
{
 801f4a4:	b084      	sub	sp, #16
 801f4a6:	a801      	add	r0, sp, #4
 801f4a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aOutline );
  EW_UNUSED_ARG( aBounds );
}
 801f4ac:	b004      	add	sp, #16
 801f4ae:	4770      	bx	lr

0801f4b0 <CoreView_Draw>:
   operation. If the view implements its own 'Blend' property, the Draw() method 
   should calculate the resulting real blend mode by using logical AND operation 
   of the value of the property and the one passed in aBlend parameter. */
void CoreView_Draw( CoreView _this, GraphicsCanvas aCanvas, XRect aClip, XPoint 
  aOffset, XInt32 aOpacity, XBool aBlend )
{
 801f4b0:	b082      	sub	sp, #8
 801f4b2:	e88d 000c 	stmia.w	sp, {r2, r3}
  EW_UNUSED_ARG( aBlend );
  EW_UNUSED_ARG( aOpacity );
  EW_UNUSED_ARG( aOffset );
  EW_UNUSED_ARG( aClip );
  EW_UNUSED_ARG( aCanvas );
}
 801f4b6:	b002      	add	sp, #8
 801f4b8:	4770      	bx	lr
 801f4ba:	bf00      	nop

0801f4bc <CoreView_HandleEvent>:
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aEvent );

  return 0;
}
 801f4bc:	2000      	movs	r0, #0
 801f4be:	4770      	bx	lr

0801f4c0 <CoreView_CursorHitTest>:
   need to invoke it directly. This method is predetermined for the hit-test only. 
   The proper processing of events should take place in the @HandleEvent() method 
   by reacting to Core::CursorEvent and Core::DragEvent events. */
CoreCursorHit CoreView_CursorHitTest( CoreView _this, XRect aArea, XInt32 aFinger, 
  XInt32 aStrikeCount, CoreView aDedicatedView, XSet aRetargetReason )
{
 801f4c0:	b084      	sub	sp, #16
 801f4c2:	a801      	add	r0, sp, #4
 801f4c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  EW_UNUSED_ARG( aStrikeCount );
  EW_UNUSED_ARG( aFinger );
  EW_UNUSED_ARG( aArea );

  return 0;
}
 801f4c8:	b004      	add	sp, #16
 801f4ca:	2000      	movs	r0, #0
 801f4cc:	4770      	bx	lr
 801f4ce:	bf00      	nop

0801f4d0 <CoreView_ArrangeView>:
   the view is moved and scaled only to fit inside the aBounds area.
   ArrangeView() is invoked automatically by the framework, so you never should 
   need to invoke it directly.
   The method returns the size of the view after it has been arranged. */
XPoint CoreView_ArrangeView( CoreView _this, XRect aBounds, XEnum aFormation )
{
 801f4d0:	b082      	sub	sp, #8
 801f4d2:	b410      	push	{r4}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aFormation );
  EW_UNUSED_ARG( aBounds );

  return _Const0000;
 801f4d4:	2400      	movs	r4, #0
{
 801f4d6:	f10d 0c04 	add.w	ip, sp, #4
  return _Const0000;
 801f4da:	e9c0 4400 	strd	r4, r4, [r0]
}
 801f4de:	f85d 4b04 	ldr.w	r4, [sp], #4
{
 801f4e2:	e88c 000c 	stmia.w	ip, {r2, r3}
}
 801f4e6:	b002      	add	sp, #8
 801f4e8:	4770      	bx	lr
 801f4ea:	bf00      	nop

0801f4ec <CoreView_MoveView>:
   To do this you can use the method InvalidateArea() of the views @Owner.
   In the case aFastMove == false, the operation automatically requests the screen 
   redraw of the view areas before and after the movement. You don't need to take 
   care about it. */
void CoreView_MoveView( CoreView _this, XPoint aOffset, XBool aFastMove )
{
 801f4ec:	b082      	sub	sp, #8
 801f4ee:	ab02      	add	r3, sp, #8
 801f4f0:	e903 0006 	stmdb	r3, {r1, r2}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aFastMove );
  EW_UNUSED_ARG( aOffset );
}
 801f4f4:	b002      	add	sp, #8
 801f4f6:	4770      	bx	lr

0801f4f8 <CoreView_GetExtent>:
XRect CoreView_GetExtent( CoreView _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return _Const0001;
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	e9c0 2200 	strd	r2, r2, [r0]
 801f4fe:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 801f502:	4770      	bx	lr

0801f504 <CoreRectView_GetExtent>:
/* The method GetExtent() returns the position and the size of the view relative 
   to the origin of its @Owner. In case of views with a non rectangular shape the 
   method returns the rectangular boundary area enclosing the entire shape. */
XRect CoreRectView_GetExtent( CoreRectView _this )
{
  return _this->Bounds;
 801f504:	3128      	adds	r1, #40	; 0x28
{
 801f506:	b410      	push	{r4}
 801f508:	4604      	mov	r4, r0
  return _this->Bounds;
 801f50a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801f50c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801f510:	4620      	mov	r0, r4
 801f512:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f516:	4770      	bx	lr

0801f518 <CoreGroup_OnSetOpacity>:
    value = 255;

  if ( value < 0 )
    value = 0;

  if ( value == _this->Opacity )
 801f518:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801f51a:	f381 0108 	usat	r1, #8, r1
 801f51e:	428b      	cmp	r3, r1
 801f520:	d016      	beq.n	801f550 <CoreGroup_OnSetOpacity+0x38>
{
 801f522:	b570      	push	{r4, r5, r6, lr}
    return;

  _this->Opacity = value;

  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 801f524:	6985      	ldr	r5, [r0, #24]
  _this->Opacity = value;
 801f526:	6541      	str	r1, [r0, #84]	; 0x54
{
 801f528:	b086      	sub	sp, #24
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 801f52a:	b17d      	cbz	r5, 801f54c <CoreGroup_OnSetOpacity+0x34>
 801f52c:	6a03      	ldr	r3, [r0, #32]
 801f52e:	07db      	lsls	r3, r3, #31
 801f530:	d50c      	bpl.n	801f54c <CoreGroup_OnSetOpacity+0x34>
      == CoreViewStateVisible ))
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 801f532:	3028      	adds	r0, #40	; 0x28
 801f534:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801f536:	ac02      	add	r4, sp, #8
 801f538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}

/* Wrapper function for the virtual method : 'Core::Group.InvalidateArea()' */
void CoreGroup__InvalidateArea( void* _this, XRect aArea )
{
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 801f53c:	682b      	ldr	r3, [r5, #0]
 801f53e:	9a05      	ldr	r2, [sp, #20]
 801f540:	9200      	str	r2, [sp, #0]
 801f542:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 801f544:	4628      	mov	r0, r5
 801f546:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801f54a:	47b0      	blx	r6
}
 801f54c:	b006      	add	sp, #24
 801f54e:	bd70      	pop	{r4, r5, r6, pc}
 801f550:	4770      	bx	lr
 801f552:	bf00      	nop

0801f554 <CoreGroup_UpdateViewState>:
}
 801f554:	4770      	bx	lr
 801f556:	bf00      	nop

0801f558 <CoreRoot_GetRoot>:
   This method can fail and return null if the view still doesn't belong to any 
   owner group. */
CoreRoot CoreRoot_GetRoot( CoreRoot _this )
{
  return _this;
}
 801f558:	4770      	bx	lr
 801f55a:	bf00      	nop

0801f55c <CoreTask_OnComplete>:
void CoreTask_OnComplete( CoreTask _this, CoreTaskQueue aQueue )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aQueue );
}
 801f55c:	4770      	bx	lr
 801f55e:	bf00      	nop

0801f560 <TimerProc>:
}

/* Wrapper function for the virtual method : 'Core::Timer.Trigger()' */
void CoreTimer__Trigger( void* _this )
{
  ((CoreTimer)_this)->_.VMT->Trigger((CoreTimer)_this );
 801f560:	6803      	ldr	r3, [r0, #0]
 801f562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f564:	4718      	bx	r3
 801f566:	bf00      	nop

0801f568 <CoreView__Init>:
{
 801f568:	b510      	push	{r4, lr}
 801f56a:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f56c:	f7fa f866 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreView );
 801f570:	4b04      	ldr	r3, [pc, #16]	; (801f584 <CoreView__Init+0x1c>)
 801f572:	60e3      	str	r3, [r4, #12]
  _this->viewState = CoreViewStateAlphaBlended | CoreViewStateFastReshape | CoreViewStateVisible;
 801f574:	f240 1103 	movw	r1, #259	; 0x103
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 801f578:	2214      	movs	r2, #20
 801f57a:	e9c4 1208 	strd	r1, r2, [r4, #32]
  _this->_.VMT = EW_CLASS( CoreView );
 801f57e:	6023      	str	r3, [r4, #0]
}
 801f580:	bd10      	pop	{r4, pc}
 801f582:	bf00      	nop
 801f584:	0803810c 	.word	0x0803810c

0801f588 <CoreQuadView__Init>:
{
 801f588:	b510      	push	{r4, lr}
 801f58a:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f58c:	f7fa f856 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreQuadView );
 801f590:	4b04      	ldr	r3, [pc, #16]	; (801f5a4 <CoreQuadView__Init+0x1c>)
 801f592:	60e3      	str	r3, [r4, #12]
  _this->viewState = CoreViewStateAlphaBlended | CoreViewStateFastReshape | CoreViewStateVisible;
 801f594:	f240 1103 	movw	r1, #259	; 0x103
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 801f598:	2214      	movs	r2, #20
 801f59a:	e9c4 1208 	strd	r1, r2, [r4, #32]
  _this->_.VMT = EW_CLASS( CoreQuadView );
 801f59e:	6023      	str	r3, [r4, #0]
}
 801f5a0:	bd10      	pop	{r4, pc}
 801f5a2:	bf00      	nop
 801f5a4:	08037e68 	.word	0x08037e68

0801f5a8 <CoreSimpleTouchHandler__Init>:
{
 801f5a8:	b538      	push	{r3, r4, r5, lr}
 801f5aa:	4604      	mov	r4, r0
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 801f5ac:	2514      	movs	r5, #20
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f5ae:	f7fa f845 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreSimpleTouchHandler );
 801f5b2:	4b07      	ldr	r3, [pc, #28]	; (801f5d0 <CoreSimpleTouchHandler__Init+0x28>)
 801f5b4:	60e3      	str	r3, [r4, #12]
  _this->Super2.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFastReshape 
 801f5b6:	f240 101b 	movw	r0, #283	; 0x11b
  _this->RetargetOffset = 8;
 801f5ba:	2108      	movs	r1, #8
  _this->MaxStrikeCount = 1;
 801f5bc:	2201      	movs	r2, #1
  _this->Super2.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFastReshape 
 801f5be:	e9c4 0508 	strd	r0, r5, [r4, #32]
  _this->RetargetOffset = 8;
 801f5c2:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
  _this->MaxStrikeCount = 1;
 801f5c6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  _this->_.VMT = EW_CLASS( CoreSimpleTouchHandler );
 801f5ca:	6023      	str	r3, [r4, #0]
}
 801f5cc:	bd38      	pop	{r3, r4, r5, pc}
 801f5ce:	bf00      	nop
 801f5d0:	08037fe4 	.word	0x08037fe4

0801f5d4 <CoreRectView__Init>:
{
 801f5d4:	b510      	push	{r4, lr}
 801f5d6:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f5d8:	f7fa f830 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreRectView );
 801f5dc:	4b04      	ldr	r3, [pc, #16]	; (801f5f0 <CoreRectView__Init+0x1c>)
 801f5de:	60e3      	str	r3, [r4, #12]
  _this->viewState = CoreViewStateAlphaBlended | CoreViewStateFastReshape | CoreViewStateVisible;
 801f5e0:	f240 1103 	movw	r1, #259	; 0x103
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 801f5e4:	2214      	movs	r2, #20
 801f5e6:	e9c4 1208 	strd	r1, r2, [r4, #32]
  _this->_.VMT = EW_CLASS( CoreRectView );
 801f5ea:	6023      	str	r3, [r4, #0]
}
 801f5ec:	bd10      	pop	{r4, pc}
 801f5ee:	bf00      	nop
 801f5f0:	08037ec8 	.word	0x08037ec8

0801f5f4 <CoreOutline__Init>:
{
 801f5f4:	b510      	push	{r4, lr}
 801f5f6:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f5f8:	f7fa f820 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreOutline );
 801f5fc:	4b04      	ldr	r3, [pc, #16]	; (801f610 <CoreOutline__Init+0x1c>)
 801f5fe:	60e3      	str	r3, [r4, #12]
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 801f600:	2114      	movs	r1, #20
  _this->Super2.viewState = CoreViewStateAlphaBlended | CoreViewStateIsOutline | 
 801f602:	f240 2203 	movw	r2, #515	; 0x203
 801f606:	e9c4 2108 	strd	r2, r1, [r4, #32]
  _this->_.VMT = EW_CLASS( CoreOutline );
 801f60a:	6023      	str	r3, [r4, #0]
}
 801f60c:	bd10      	pop	{r4, pc}
 801f60e:	bf00      	nop
 801f610:	08037e04 	.word	0x08037e04

0801f614 <CoreCursorHit__Init>:
{
 801f614:	b510      	push	{r4, lr}
 801f616:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f618:	f7fa f810 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreCursorHit );
 801f61c:	4b01      	ldr	r3, [pc, #4]	; (801f624 <CoreCursorHit__Init+0x10>)
 801f61e:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreCursorHit );
 801f620:	6023      	str	r3, [r4, #0]
}
 801f622:	bd10      	pop	{r4, pc}
 801f624:	08037ba8 	.word	0x08037ba8

0801f628 <CoreLayoutContext__Init>:
{
 801f628:	b510      	push	{r4, lr}
 801f62a:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f62c:	f7fa f806 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreLayoutContext );
 801f630:	4b01      	ldr	r3, [pc, #4]	; (801f638 <CoreLayoutContext__Init+0x10>)
 801f632:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreLayoutContext );
 801f634:	6023      	str	r3, [r4, #0]
}
 801f636:	bd10      	pop	{r4, pc}
 801f638:	08037d8c 	.word	0x08037d8c

0801f63c <CoreLayoutQuadContext__Init>:
{
 801f63c:	b510      	push	{r4, lr}
 801f63e:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f640:	f7f9 fffc 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreLayoutQuadContext );
 801f644:	4b01      	ldr	r3, [pc, #4]	; (801f64c <CoreLayoutQuadContext__Init+0x10>)
 801f646:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreLayoutQuadContext );
 801f648:	6023      	str	r3, [r4, #0]
}
 801f64a:	bd10      	pop	{r4, pc}
 801f64c:	08037dc8 	.word	0x08037dc8

0801f650 <CoreDialogContext__Init>:
{
 801f650:	b510      	push	{r4, lr}
 801f652:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f654:	f7f9 fff2 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreDialogContext );
 801f658:	4b01      	ldr	r3, [pc, #4]	; (801f660 <CoreDialogContext__Init+0x10>)
 801f65a:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreDialogContext );
 801f65c:	6023      	str	r3, [r4, #0]
}
 801f65e:	bd10      	pop	{r4, pc}
 801f660:	08037be4 	.word	0x08037be4

0801f664 <CoreTaskQueue__Init>:
{
 801f664:	b510      	push	{r4, lr}
 801f666:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f668:	f7f9 ffe8 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreTaskQueue );
 801f66c:	4b01      	ldr	r3, [pc, #4]	; (801f674 <CoreTaskQueue__Init+0x10>)
 801f66e:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreTaskQueue );
 801f670:	6023      	str	r3, [r4, #0]
}
 801f672:	bd10      	pop	{r4, pc}
 801f674:	08038090 	.word	0x08038090

0801f678 <CoreTask__Init>:
{
 801f678:	b510      	push	{r4, lr}
 801f67a:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f67c:	f7f9 ffde 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreTask );
 801f680:	4b01      	ldr	r3, [pc, #4]	; (801f688 <CoreTask__Init+0x10>)
 801f682:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreTask );
 801f684:	6023      	str	r3, [r4, #0]
}
 801f686:	bd10      	pop	{r4, pc}
 801f688:	08038044 	.word	0x08038044

0801f68c <CoreTimer__Init>:
{
 801f68c:	b510      	push	{r4, lr}
 801f68e:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 801f690:	f7f9 ffd4 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreTimer );
 801f694:	4b03      	ldr	r3, [pc, #12]	; (801f6a4 <CoreTimer__Init+0x18>)
 801f696:	60e3      	str	r3, [r4, #12]
  _this->Period = 1000;
 801f698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f69c:	6222      	str	r2, [r4, #32]
  _this->_.VMT = EW_CLASS( CoreTimer );
 801f69e:	6023      	str	r3, [r4, #0]
}
 801f6a0:	bd10      	pop	{r4, pc}
 801f6a2:	bf00      	nop
 801f6a4:	080380cc 	.word	0x080380cc

0801f6a8 <CoreView__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6a8:	f7f9 bfce 	b.w	8019648 <XObject__ReInit>

0801f6ac <CoreQuadView__ReInit>:
 801f6ac:	f7f9 bfcc 	b.w	8019648 <XObject__ReInit>

0801f6b0 <CoreSimpleTouchHandler__ReInit>:
 801f6b0:	f7f9 bfca 	b.w	8019648 <XObject__ReInit>

0801f6b4 <CoreRectView__ReInit>:
 801f6b4:	f7f9 bfc8 	b.w	8019648 <XObject__ReInit>

0801f6b8 <CoreGroup__ReInit>:
 801f6b8:	f7f9 bfc6 	b.w	8019648 <XObject__ReInit>

0801f6bc <CoreOutline__ReInit>:
 801f6bc:	f7f9 bfc4 	b.w	8019648 <XObject__ReInit>

0801f6c0 <CoreEvent__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6c0:	f7f9 bfc2 	b.w	8019648 <XObject__ReInit>

0801f6c4 <CoreKeyEvent__ReInit>:
 801f6c4:	f7f9 bfc0 	b.w	8019648 <XObject__ReInit>

0801f6c8 <CoreCursorGrabEvent__ReInit>:
 801f6c8:	f7f9 bfbe 	b.w	8019648 <XObject__ReInit>

0801f6cc <CoreCursorEvent__ReInit>:
 801f6cc:	f7f9 bfbc 	b.w	8019648 <XObject__ReInit>

0801f6d0 <CoreDragEvent__ReInit>:
 801f6d0:	f7f9 bfba 	b.w	8019648 <XObject__ReInit>

0801f6d4 <CoreKeyPressHandler__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6d4:	f7f9 bfb8 	b.w	8019648 <XObject__ReInit>

0801f6d8 <CoreCursorHit__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6d8:	f7f9 bfb6 	b.w	8019648 <XObject__ReInit>

0801f6dc <CoreLayoutContext__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6dc:	f7f9 bfb4 	b.w	8019648 <XObject__ReInit>

0801f6e0 <CoreLayoutQuadContext__ReInit>:
 801f6e0:	f7f9 bfb2 	b.w	8019648 <XObject__ReInit>

0801f6e4 <CoreDialogContext__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6e4:	f7f9 bfb0 	b.w	8019648 <XObject__ReInit>

0801f6e8 <CoreTaskQueue__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6e8:	f7f9 bfae 	b.w	8019648 <XObject__ReInit>

0801f6ec <CoreTask__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6ec:	f7f9 bfac 	b.w	8019648 <XObject__ReInit>

0801f6f0 <CoreResource__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6f0:	f7f9 bfaa 	b.w	8019648 <XObject__ReInit>

0801f6f4 <CoreTimer__ReInit>:
  XObject__ReInit( &_this->_.Super );
 801f6f4:	f7f9 bfa8 	b.w	8019648 <XObject__ReInit>

0801f6f8 <CoreRoot__ReInit>:
{
 801f6f8:	b510      	push	{r4, lr}
 801f6fa:	4604      	mov	r4, r0
  XObject__ReInit( &_this->_.Super );
 801f6fc:	f7f9 ffa4 	bl	8019648 <XObject__ReInit>
  XObject__ReInit( &_this->_.Super );
 801f700:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 801f704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  XObject__ReInit( &_this->_.Super );
 801f708:	f7f9 bf9e 	b.w	8019648 <XObject__ReInit>

0801f70c <CoreView__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f70c:	4b01      	ldr	r3, [pc, #4]	; (801f714 <CoreView__Done+0x8>)
 801f70e:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f710:	f7f9 bf9b 	b.w	801964a <XObject__Done>
 801f714:	08036b2c 	.word	0x08036b2c

0801f718 <CoreQuadView__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f718:	4b01      	ldr	r3, [pc, #4]	; (801f720 <CoreQuadView__Done+0x8>)
 801f71a:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f71c:	f7f9 bf95 	b.w	801964a <XObject__Done>
 801f720:	08036b2c 	.word	0x08036b2c

0801f724 <CoreSimpleTouchHandler__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f724:	4b01      	ldr	r3, [pc, #4]	; (801f72c <CoreSimpleTouchHandler__Done+0x8>)
 801f726:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f728:	f7f9 bf8f 	b.w	801964a <XObject__Done>
 801f72c:	08036b2c 	.word	0x08036b2c

0801f730 <CoreRectView__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f730:	4b01      	ldr	r3, [pc, #4]	; (801f738 <CoreRectView__Done+0x8>)
 801f732:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f734:	f7f9 bf89 	b.w	801964a <XObject__Done>
 801f738:	08036b2c 	.word	0x08036b2c

0801f73c <CoreGroup__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f73c:	4b01      	ldr	r3, [pc, #4]	; (801f744 <CoreGroup__Done+0x8>)
 801f73e:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f740:	f7f9 bf83 	b.w	801964a <XObject__Done>
 801f744:	08036b2c 	.word	0x08036b2c

0801f748 <CoreOutline__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f748:	4b01      	ldr	r3, [pc, #4]	; (801f750 <CoreOutline__Done+0x8>)
 801f74a:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f74c:	f7f9 bf7d 	b.w	801964a <XObject__Done>
 801f750:	08036b2c 	.word	0x08036b2c

0801f754 <CoreEvent__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f754:	4b01      	ldr	r3, [pc, #4]	; (801f75c <CoreEvent__Done+0x8>)
 801f756:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f758:	f7f9 bf77 	b.w	801964a <XObject__Done>
 801f75c:	08036b2c 	.word	0x08036b2c

0801f760 <CoreKeyEvent__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f760:	4b01      	ldr	r3, [pc, #4]	; (801f768 <CoreKeyEvent__Done+0x8>)
 801f762:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f764:	f7f9 bf71 	b.w	801964a <XObject__Done>
 801f768:	08036b2c 	.word	0x08036b2c

0801f76c <CoreCursorGrabEvent__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f76c:	4b01      	ldr	r3, [pc, #4]	; (801f774 <CoreCursorGrabEvent__Done+0x8>)
 801f76e:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f770:	f7f9 bf6b 	b.w	801964a <XObject__Done>
 801f774:	08036b2c 	.word	0x08036b2c

0801f778 <CoreCursorEvent__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f778:	4b01      	ldr	r3, [pc, #4]	; (801f780 <CoreCursorEvent__Done+0x8>)
 801f77a:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f77c:	f7f9 bf65 	b.w	801964a <XObject__Done>
 801f780:	08036b2c 	.word	0x08036b2c

0801f784 <CoreDragEvent__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f784:	4b01      	ldr	r3, [pc, #4]	; (801f78c <CoreDragEvent__Done+0x8>)
 801f786:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f788:	f7f9 bf5f 	b.w	801964a <XObject__Done>
 801f78c:	08036b2c 	.word	0x08036b2c

0801f790 <CoreKeyPressHandler__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f790:	4b01      	ldr	r3, [pc, #4]	; (801f798 <CoreKeyPressHandler__Done+0x8>)
 801f792:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f794:	f7f9 bf59 	b.w	801964a <XObject__Done>
 801f798:	08036b2c 	.word	0x08036b2c

0801f79c <CoreCursorHit__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f79c:	4b01      	ldr	r3, [pc, #4]	; (801f7a4 <CoreCursorHit__Done+0x8>)
 801f79e:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7a0:	f7f9 bf53 	b.w	801964a <XObject__Done>
 801f7a4:	08036b2c 	.word	0x08036b2c

0801f7a8 <CoreLayoutContext__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f7a8:	4b01      	ldr	r3, [pc, #4]	; (801f7b0 <CoreLayoutContext__Done+0x8>)
 801f7aa:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7ac:	f7f9 bf4d 	b.w	801964a <XObject__Done>
 801f7b0:	08036b2c 	.word	0x08036b2c

0801f7b4 <CoreLayoutQuadContext__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f7b4:	4b01      	ldr	r3, [pc, #4]	; (801f7bc <CoreLayoutQuadContext__Done+0x8>)
 801f7b6:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7b8:	f7f9 bf47 	b.w	801964a <XObject__Done>
 801f7bc:	08036b2c 	.word	0x08036b2c

0801f7c0 <CoreDialogContext__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f7c0:	4b01      	ldr	r3, [pc, #4]	; (801f7c8 <CoreDialogContext__Done+0x8>)
 801f7c2:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7c4:	f7f9 bf41 	b.w	801964a <XObject__Done>
 801f7c8:	08036b2c 	.word	0x08036b2c

0801f7cc <CoreTaskQueue__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f7cc:	4b01      	ldr	r3, [pc, #4]	; (801f7d4 <CoreTaskQueue__Done+0x8>)
 801f7ce:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7d0:	f7f9 bf3b 	b.w	801964a <XObject__Done>
 801f7d4:	08036b2c 	.word	0x08036b2c

0801f7d8 <CoreTask__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 801f7d8:	4b01      	ldr	r3, [pc, #4]	; (801f7e0 <CoreTask__Done+0x8>)
 801f7da:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 801f7dc:	f7f9 bf35 	b.w	801964a <XObject__Done>
 801f7e0:	08036b2c 	.word	0x08036b2c

0801f7e4 <CoreTaskQueue_onPreDispatchNext3>:
{
 801f7e4:	b530      	push	{r4, r5, lr}
 801f7e6:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onDispatchNext ), ((XObject)_this ));
 801f7e8:	466d      	mov	r5, sp
{
 801f7ea:	4604      	mov	r4, r0
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onDispatchNext ), ((XObject)_this ));
 801f7ec:	4601      	mov	r1, r0
 801f7ee:	4a06      	ldr	r2, [pc, #24]	; (801f808 <CoreTaskQueue_onPreDispatchNext3+0x24>)
 801f7f0:	4628      	mov	r0, r5
 801f7f2:	f7fb fcef 	bl	801b1d4 <EwNewSlot>
 801f7f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f7fa:	4622      	mov	r2, r4
}
 801f7fc:	b003      	add	sp, #12
 801f7fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onDispatchNext ), ((XObject)_this ));
 801f802:	f7fb bd15 	b.w	801b230 <EwPostSignal>
 801f806:	bf00      	nop
 801f808:	08020919 	.word	0x08020919

0801f80c <CoreTaskQueue_onPreDispatchNext2>:
{
 801f80c:	b530      	push	{r4, r5, lr}
 801f80e:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext3 ), ((XObject)_this ));
 801f810:	466d      	mov	r5, sp
{
 801f812:	4604      	mov	r4, r0
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext3 ), ((XObject)_this ));
 801f814:	4601      	mov	r1, r0
 801f816:	4a06      	ldr	r2, [pc, #24]	; (801f830 <CoreTaskQueue_onPreDispatchNext2+0x24>)
 801f818:	4628      	mov	r0, r5
 801f81a:	f7fb fcdb 	bl	801b1d4 <EwNewSlot>
 801f81e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f822:	4622      	mov	r2, r4
}
 801f824:	b003      	add	sp, #12
 801f826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext3 ), ((XObject)_this ));
 801f82a:	f7fb bd01 	b.w	801b230 <EwPostSignal>
 801f82e:	bf00      	nop
 801f830:	0801f7e5 	.word	0x0801f7e5

0801f834 <CoreTaskQueue_onPreDispatchNext1>:
{
 801f834:	b530      	push	{r4, r5, lr}
 801f836:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext2 ), ((XObject)_this ));
 801f838:	466d      	mov	r5, sp
{
 801f83a:	4604      	mov	r4, r0
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext2 ), ((XObject)_this ));
 801f83c:	4601      	mov	r1, r0
 801f83e:	4a06      	ldr	r2, [pc, #24]	; (801f858 <CoreTaskQueue_onPreDispatchNext1+0x24>)
 801f840:	4628      	mov	r0, r5
 801f842:	f7fb fcc7 	bl	801b1d4 <EwNewSlot>
 801f846:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f84a:	4622      	mov	r2, r4
}
 801f84c:	b003      	add	sp, #12
 801f84e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext2 ), ((XObject)_this ));
 801f852:	f7fb bced 	b.w	801b230 <EwPostSignal>
 801f856:	bf00      	nop
 801f858:	0801f80d 	.word	0x0801f80d

0801f85c <CoreView_GetRoot>:
{
 801f85c:	b538      	push	{r3, r4, r5, lr}
  CoreGroup grp = _this->Owner;
 801f85e:	6984      	ldr	r4, [r0, #24]
  while ( grp != 0 )
 801f860:	b154      	cbz	r4, 801f878 <CoreView_GetRoot+0x1c>
    CoreRoot root = EwCastObject( grp, CoreRoot );
 801f862:	4d06      	ldr	r5, [pc, #24]	; (801f87c <CoreView_GetRoot+0x20>)
 801f864:	e001      	b.n	801f86a <CoreView_GetRoot+0xe>
    grp = grp->Super2.Owner;
 801f866:	69a4      	ldr	r4, [r4, #24]
  while ( grp != 0 )
 801f868:	b134      	cbz	r4, 801f878 <CoreView_GetRoot+0x1c>
    CoreRoot root = EwCastObject( grp, CoreRoot );
 801f86a:	4629      	mov	r1, r5
 801f86c:	4620      	mov	r0, r4
 801f86e:	f7f9 fffd 	bl	801986c <EwCastObject>
    if ( root != 0 )
 801f872:	2800      	cmp	r0, #0
 801f874:	d0f7      	beq.n	801f866 <CoreView_GetRoot+0xa>
}
 801f876:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
 801f878:	2000      	movs	r0, #0
}
 801f87a:	bd38      	pop	{r3, r4, r5, pc}
 801f87c:	08037f68 	.word	0x08037f68

0801f880 <CoreRectView_initLayoutContext>:
{
 801f880:	b084      	sub	sp, #16
 801f882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f884:	ac07      	add	r4, sp, #28
 801f886:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801f88a:	4607      	mov	r7, r0
  CoreLayoutContext context = EwNewObject( CoreLayoutContext, 0 );
 801f88c:	2100      	movs	r1, #0
 801f88e:	480c      	ldr	r0, [pc, #48]	; (801f8c0 <CoreRectView_initLayoutContext+0x40>)
{
 801f890:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  CoreLayoutContext context = EwNewObject( CoreLayoutContext, 0 );
 801f892:	f7f9 fedf 	bl	8019654 <EwNewObjectIndirect>
  context->extent = _this->Bounds;
 801f896:	f107 0328 	add.w	r3, r7, #40	; 0x28
  CoreLayoutContext context = EwNewObject( CoreLayoutContext, 0 );
 801f89a:	4605      	mov	r5, r0
  context->extent = _this->Bounds;
 801f89c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f89e:	f105 0c14 	add.w	ip, r5, #20
 801f8a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  context->bounds = aBounds;
 801f8a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f8aa:	f105 0424 	add.w	r4, r5, #36	; 0x24
 801f8ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  context->outline = aOutline;
 801f8b2:	612e      	str	r6, [r5, #16]
  _this->Super1.layoutContext = context;
 801f8b4:	61fd      	str	r5, [r7, #28]
}
 801f8b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f8ba:	b004      	add	sp, #16
 801f8bc:	4770      	bx	lr
 801f8be:	bf00      	nop
 801f8c0:	08037d8c 	.word	0x08037d8c

0801f8c4 <CoreQuadView_initLayoutContext>:
{
 801f8c4:	b084      	sub	sp, #16
 801f8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8ca:	b084      	sub	sp, #16
 801f8cc:	ae0b      	add	r6, sp, #44	; 0x2c
 801f8ce:	4604      	mov	r4, r0
 801f8d0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  CoreLayoutQuadContext context = EwNewObject( CoreLayoutQuadContext, 0 );
 801f8d4:	481c      	ldr	r0, [pc, #112]	; (801f948 <CoreQuadView_initLayoutContext+0x84>)
{
 801f8d6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  CoreLayoutQuadContext context = EwNewObject( CoreLayoutQuadContext, 0 );
 801f8d8:	2100      	movs	r1, #0
 801f8da:	f7f9 febb 	bl	8019654 <EwNewObjectIndirect>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 801f8de:	6823      	ldr	r3, [r4, #0]
  _this->Super1.layoutContext = 0;
 801f8e0:	2200      	movs	r2, #0
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 801f8e2:	46e8      	mov	r8, sp
  CoreLayoutQuadContext context = EwNewObject( CoreLayoutQuadContext, 0 );
 801f8e4:	4605      	mov	r5, r0
  _this->Super1.layoutContext = 0;
 801f8e6:	61e2      	str	r2, [r4, #28]
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 801f8e8:	4621      	mov	r1, r4
 801f8ea:	4640      	mov	r0, r8
 801f8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f8ee:	4798      	blx	r3
  context->Super1.extent = CoreView__GetExtent( _this );
 801f8f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801f8f4:	f105 0c14 	add.w	ip, r5, #20
 801f8f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  context->Super1.bounds = aBounds;
 801f8fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801f900:	f105 0624 	add.w	r6, r5, #36	; 0x24
 801f904:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  context->point1 = _this->Point1;
 801f908:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 801f90c:	f105 0350 	add.w	r3, r5, #80	; 0x50
  context->Super1.outline = aOutline;
 801f910:	612f      	str	r7, [r5, #16]
  context->point1 = _this->Point1;
 801f912:	e883 0003 	stmia.w	r3, {r0, r1}
  context->point2 = _this->Point2;
 801f916:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 801f91a:	f105 0348 	add.w	r3, r5, #72	; 0x48
 801f91e:	e883 0003 	stmia.w	r3, {r0, r1}
  context->point3 = _this->Point3;
 801f922:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 801f926:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801f92a:	e883 0003 	stmia.w	r3, {r0, r1}
  context->point4 = _this->Point4;
 801f92e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 801f932:	f105 0338 	add.w	r3, r5, #56	; 0x38
 801f936:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->Super1.layoutContext = ((CoreLayoutContext)context );
 801f93a:	61e5      	str	r5, [r4, #28]
}
 801f93c:	b004      	add	sp, #16
 801f93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f942:	b004      	add	sp, #16
 801f944:	4770      	bx	lr
 801f946:	bf00      	nop
 801f948:	08037dc8 	.word	0x08037dc8

0801f94c <CoreQuadView_GetExtent>:
{
 801f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (( _this->Super1.layoutContext != 0 ) && _this->Super1.layoutContext->isEmpty )
 801f94e:	69cb      	ldr	r3, [r1, #28]
{
 801f950:	b083      	sub	sp, #12
 801f952:	4605      	mov	r5, r0
  if (( _this->Super1.layoutContext != 0 ) && _this->Super1.layoutContext->isEmpty )
 801f954:	b113      	cbz	r3, 801f95c <CoreQuadView_GetExtent+0x10>
 801f956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f95a:	bbcb      	cbnz	r3, 801f9d0 <CoreQuadView_GetExtent+0x84>
  x1 = _this->Point1.X;
 801f95c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  if (((( _this->Point4.X != x1 ) || ( _this->Point2.Y != y1 )) || ( _this->Point2.X 
 801f95e:	6a8f      	ldr	r7, [r1, #40]	; 0x28
  y1 = _this->Point1.Y;
 801f960:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  x2 = _this->Point3.X;
 801f964:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  if (((( _this->Point4.X != x1 ) || ( _this->Point2.Y != y1 )) || ( _this->Point2.X 
 801f966:	4297      	cmp	r7, r2
  y2 = _this->Point3.Y;
 801f968:	e9d1 340c 	ldrd	r3, r4, [r1, #48]	; 0x30
  if (((( _this->Point4.X != x1 ) || ( _this->Point2.Y != y1 )) || ( _this->Point2.X 
 801f96c:	e9d1 0c0e 	ldrd	r0, ip, [r1, #56]	; 0x38
 801f970:	d036      	beq.n	801f9e0 <CoreQuadView_GetExtent+0x94>
    if ( _this->Point3.X < x1 )
 801f972:	429a      	cmp	r2, r3
 801f974:	4611      	mov	r1, r2
 801f976:	bfa8      	it	ge
 801f978:	4619      	movge	r1, r3
 801f97a:	4293      	cmp	r3, r2
 801f97c:	bfb8      	it	lt
 801f97e:	4613      	movlt	r3, r2
 801f980:	45a6      	cmp	lr, r4
 801f982:	4672      	mov	r2, lr
 801f984:	bfa8      	it	ge
 801f986:	4622      	movge	r2, r4
 801f988:	4574      	cmp	r4, lr
 801f98a:	bfb8      	it	lt
 801f98c:	4674      	movlt	r4, lr
 801f98e:	42b9      	cmp	r1, r7
 801f990:	bfa8      	it	ge
 801f992:	4639      	movge	r1, r7
    if ( _this->Point4.X < x1 )
 801f994:	42bb      	cmp	r3, r7
 801f996:	bfb8      	it	lt
 801f998:	463b      	movlt	r3, r7
 801f99a:	4562      	cmp	r2, ip
 801f99c:	bfa8      	it	ge
 801f99e:	4662      	movge	r2, ip
 801f9a0:	4564      	cmp	r4, ip
 801f9a2:	bfb8      	it	lt
 801f9a4:	4664      	movlt	r4, ip
 801f9a6:	4281      	cmp	r1, r0
 801f9a8:	bfa8      	it	ge
 801f9aa:	4601      	movge	r1, r0
    if ( _this->Point4.Y < y1 )
 801f9ac:	4283      	cmp	r3, r0
 801f9ae:	bfb8      	it	lt
 801f9b0:	4603      	movlt	r3, r0
 801f9b2:	42b2      	cmp	r2, r6
 801f9b4:	bfa8      	it	ge
 801f9b6:	4632      	movge	r2, r6
    if ( _this->Point4.Y > y2 )
 801f9b8:	42b4      	cmp	r4, r6
 801f9ba:	bfb8      	it	lt
 801f9bc:	4634      	movlt	r4, r6
  return EwNewRect( x1, y1, x2 + 1, y2 + 1 );
 801f9be:	3401      	adds	r4, #1
 801f9c0:	4628      	mov	r0, r5
 801f9c2:	9400      	str	r4, [sp, #0]
 801f9c4:	3301      	adds	r3, #1
 801f9c6:	f7fa fa83 	bl	8019ed0 <EwNewRect>
}
 801f9ca:	4628      	mov	r0, r5
 801f9cc:	b003      	add	sp, #12
 801f9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _Const0001;
 801f9d0:	2300      	movs	r3, #0
 801f9d2:	e9c0 3300 	strd	r3, r3, [r0]
 801f9d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 801f9da:	4628      	mov	r0, r5
 801f9dc:	b003      	add	sp, #12
 801f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((( _this->Point4.X != x1 ) || ( _this->Point2.Y != y1 )) || ( _this->Point2.X 
 801f9e0:	45f4      	cmp	ip, lr
 801f9e2:	d1c6      	bne.n	801f972 <CoreQuadView_GetExtent+0x26>
 801f9e4:	4298      	cmp	r0, r3
 801f9e6:	d1c4      	bne.n	801f972 <CoreQuadView_GetExtent+0x26>
      != x2 )) || ( _this->Point4.Y != y2 ))
 801f9e8:	42a6      	cmp	r6, r4
 801f9ea:	d1c2      	bne.n	801f972 <CoreQuadView_GetExtent+0x26>
    if ( x2 < x1 )
 801f9ec:	429f      	cmp	r7, r3
 801f9ee:	bfca      	itet	gt
 801f9f0:	4619      	movgt	r1, r3
 801f9f2:	4639      	movle	r1, r7
 801f9f4:	463b      	movgt	r3, r7
    if ( y2 < y1 )
 801f9f6:	45a6      	cmp	lr, r4
 801f9f8:	bfca      	itet	gt
 801f9fa:	4622      	movgt	r2, r4
 801f9fc:	4672      	movle	r2, lr
 801f9fe:	4674      	movgt	r4, lr
 801fa00:	e7dd      	b.n	801f9be <CoreQuadView_GetExtent+0x72>
 801fa02:	bf00      	nop

0801fa04 <CoreRectView_ArrangeView>:
{
 801fa04:	b082      	sub	sp, #8
 801fa06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa0a:	460c      	mov	r4, r1
 801fa0c:	b09d      	sub	sp, #116	; 0x74
  CoreLayoutContext context = _this->Super1.layoutContext;
 801fa0e:	69e5      	ldr	r5, [r4, #28]
{
 801fa10:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
  XInt32 y1 = context->extent.Point1.Y;
 801fa14:	e9d5 6705 	ldrd	r6, r7, [r5, #20]
  XInt32 y2 = context->extent.Point2.Y;
 801fa18:	e9d5 9a07 	ldrd	r9, sl, [r5, #28]
{
 801fa1c:	a926      	add	r1, sp, #152	; 0x98
 801fa1e:	e881 000c 	stmia.w	r1, {r2, r3}
  XInt32 y1 = context->extent.Point1.Y;
 801fa22:	9702      	str	r7, [sp, #8]
  XInt32 w = x2 - x1;
 801fa24:	eba9 0706 	sub.w	r7, r9, r6
 801fa28:	9703      	str	r7, [sp, #12]
  XInt32 h = y2 - y1;
 801fa2a:	9f02      	ldr	r7, [sp, #8]
 801fa2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  XPoint dstSize = EwGetRectSize( aBounds );
 801fa2e:	9300      	str	r3, [sp, #0]
  XInt32 h = y2 - y1;
 801fa30:	ebaa 0707 	sub.w	r7, sl, r7
 801fa34:	9704      	str	r7, [sp, #16]
  XSet layout = _this->Super1.Layout;
 801fa36:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801fa38:	9705      	str	r7, [sp, #20]
 801fa3a:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 801fa3c:	9309      	str	r3, [sp, #36]	; 0x24
 801fa3e:	4694      	mov	ip, r2
{
 801fa40:	4683      	mov	fp, r0
 801fa42:	9707      	str	r7, [sp, #28]
  XPoint dstSize = EwGetRectSize( aBounds );
 801fa44:	c90e      	ldmia	r1, {r1, r2, r3}
 801fa46:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801fa48:	f8cd c018 	str.w	ip, [sp, #24]
 801fa4c:	a810      	add	r0, sp, #64	; 0x40
 801fa4e:	9708      	str	r7, [sp, #32]
 801fa50:	f7fa fbd5 	bl	801a1fe <EwGetRectSize>
  if ( aFormation == CoreFormationNone )
 801fa54:	f1b8 0f00 	cmp.w	r8, #0
 801fa58:	d067      	beq.n	801fb2a <CoreRectView_ArrangeView+0x126>
    switch ( aFormation )
 801fa5a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa5e:	f1b8 0f03 	cmp.w	r8, #3
 801fa62:	d80a      	bhi.n	801fa7a <CoreRectView_ArrangeView+0x76>
 801fa64:	e8df f018 	tbh	[pc, r8, lsl #1]
 801fa68:	00d20004 	.word	0x00d20004
 801fa6c:	00c400d8 	.word	0x00c400d8
        y2 = y1 + h;
 801fa70:	9f07      	ldr	r7, [sp, #28]
 801fa72:	9b04      	ldr	r3, [sp, #16]
        y1 = aBounds.Point1.Y;
 801fa74:	9702      	str	r7, [sp, #8]
        y2 = y1 + h;
 801fa76:	eb03 0a07 	add.w	sl, r3, r7
    if (( aFormation == CoreFormationTopToBottom ) || ( aFormation == CoreFormationBottomToTop ))
 801fa7a:	f1b8 0f01 	cmp.w	r8, #1
 801fa7e:	d810      	bhi.n	801faa2 <CoreRectView_ArrangeView+0x9e>
      if ( resizeHorz )
 801fa80:	9b05      	ldr	r3, [sp, #20]
 801fa82:	07d8      	lsls	r0, r3, #31
 801fa84:	f100 80dc 	bmi.w	801fc40 <CoreRectView_ArrangeView+0x23c>
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 801fa88:	9a05      	ldr	r2, [sp, #20]
        if ( alignToLeft && !alignToRight )
 801fa8a:	0751      	lsls	r1, r2, #29
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 801fa8c:	f002 0308 	and.w	r3, r2, #8
        if ( alignToLeft && !alignToRight )
 801fa90:	f140 80e4 	bpl.w	801fc5c <CoreRectView_ArrangeView+0x258>
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	f040 80e3 	bne.w	801fc60 <CoreRectView_ArrangeView+0x25c>
          x2 = x1 + w;
 801fa9a:	9b03      	ldr	r3, [sp, #12]
 801fa9c:	9e06      	ldr	r6, [sp, #24]
 801fa9e:	eb03 0906 	add.w	r9, r3, r6
  context->isEmpty = (XBool)(( x1 >= x2 ) || ( y1 >= y2 ));
 801faa2:	454e      	cmp	r6, r9
 801faa4:	da22      	bge.n	801faec <CoreRectView_ArrangeView+0xe8>
 801faa6:	9b02      	ldr	r3, [sp, #8]
 801faa8:	4553      	cmp	r3, sl
 801faaa:	bfb4      	ite	lt
 801faac:	2300      	movlt	r3, #0
 801faae:	2301      	movge	r3, #1
 801fab0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if ((( _this->Super1.viewState & CoreViewStateFastReshape ) == CoreViewStateFastReshape ))
 801fab4:	6a23      	ldr	r3, [r4, #32]
 801fab6:	05da      	lsls	r2, r3, #23
 801fab8:	d51e      	bpl.n	801faf8 <CoreRectView_ArrangeView+0xf4>
    _this->Bounds = EwNewRect( x1, y1, x2, y2 );
 801faba:	ad0c      	add	r5, sp, #48	; 0x30
 801fabc:	9a02      	ldr	r2, [sp, #8]
 801fabe:	f8cd a000 	str.w	sl, [sp]
 801fac2:	464b      	mov	r3, r9
 801fac4:	4631      	mov	r1, r6
 801fac6:	4628      	mov	r0, r5
 801fac8:	f7fa fa02 	bl	8019ed0 <EwNewRect>
 801facc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fad0:	3428      	adds	r4, #40	; 0x28
 801fad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return EwNewPoint( x2 - x1, y2 - y1 );
 801fad6:	4658      	mov	r0, fp
 801fad8:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 801fadc:	f7fa f982 	bl	8019de4 <EwNewPoint>
}
 801fae0:	4658      	mov	r0, fp
 801fae2:	b01d      	add	sp, #116	; 0x74
 801fae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae8:	b002      	add	sp, #8
 801faea:	4770      	bx	lr
 801faec:	2301      	movs	r3, #1
  context->isEmpty = (XBool)(( x1 >= x2 ) || ( y1 >= y2 ));
 801faee:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if ((( _this->Super1.viewState & CoreViewStateFastReshape ) == CoreViewStateFastReshape ))
 801faf2:	6a23      	ldr	r3, [r4, #32]
 801faf4:	05da      	lsls	r2, r3, #23
 801faf6:	d4e0      	bmi.n	801faba <CoreRectView_ArrangeView+0xb6>
    CoreRectView__OnSetBounds( _this, EwNewRect( x1, y1, x2, y2 ));
 801faf8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801fafc:	4631      	mov	r1, r6
 801fafe:	9a02      	ldr	r2, [sp, #8]
 801fb00:	f8cd a000 	str.w	sl, [sp]
 801fb04:	464b      	mov	r3, r9
 801fb06:	4640      	mov	r0, r8
 801fb08:	f7fa f9e2 	bl	8019ed0 <EwNewRect>
 801fb0c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801fb10:	ae18      	add	r6, sp, #96	; 0x60
 801fb12:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ((CoreRectView)_this)->_.VMT->OnSetBounds((CoreRectView)_this, value );
 801fb16:	6823      	ldr	r3, [r4, #0]
 801fb18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fb1a:	9200      	str	r2, [sp, #0]
 801fb1c:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 801fb1e:	4620      	mov	r0, r4
 801fb20:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801fb24:	47b8      	blx	r7
    _this->Super1.layoutContext = context;
 801fb26:	61e5      	str	r5, [r4, #28]
 801fb28:	e7d5      	b.n	801fad6 <CoreRectView_ArrangeView+0xd2>
  XPoint dstSize = EwGetRectSize( aBounds );
 801fb2a:	e9dd 8710 	ldrd	r8, r7, [sp, #64]	; 0x40
    XPoint srcSize = EwGetRectSize( context->bounds );
 801fb2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801fb30:	9300      	str	r3, [sp, #0]
 801fb32:	f105 0324 	add.w	r3, r5, #36	; 0x24
 801fb36:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fb38:	a812      	add	r0, sp, #72	; 0x48
  XPoint dstSize = EwGetRectSize( aBounds );
 801fb3a:	970a      	str	r7, [sp, #40]	; 0x28
    XPoint srcSize = EwGetRectSize( context->bounds );
 801fb3c:	f7fa fb5f 	bl	801a1fe <EwGetRectSize>
 801fb40:	e9dd ce12 	ldrd	ip, lr, [sp, #72]	; 0x48
    y1 = y1 - context->bounds.Point1.Y;
 801fb44:	e9d5 3209 	ldrd	r3, r2, [r5, #36]	; 0x24
 801fb48:	9902      	ldr	r1, [sp, #8]
 801fb4a:	920b      	str	r2, [sp, #44]	; 0x2c
    if ( srcSize.X != dstSize.X )
 801fb4c:	45e0      	cmp	r8, ip
    x1 = x1 - context->bounds.Point1.X;
 801fb4e:	eba6 0603 	sub.w	r6, r6, r3
    y1 = y1 - context->bounds.Point1.Y;
 801fb52:	eba1 0702 	sub.w	r7, r1, r2
    if ( srcSize.X != dstSize.X )
 801fb56:	f000 80b0 	beq.w	801fcba <CoreRectView_ArrangeView+0x2b6>
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 801fb5a:	9805      	ldr	r0, [sp, #20]
 801fb5c:	f000 0108 	and.w	r1, r0, #8
      XBool resizeHorz = (( layout & CoreLayoutResizeHorz ) == CoreLayoutResizeHorz );
 801fb60:	f000 0201 	and.w	r2, r0, #1
      if ( !alignToLeft && ( resizeHorz || !alignToRight ))
 801fb64:	f010 0004 	ands.w	r0, r0, #4
 801fb68:	d070      	beq.n	801fc4c <CoreRectView_ArrangeView+0x248>
      if ( !alignToRight && ( resizeHorz || !alignToLeft ))
 801fb6a:	b929      	cbnz	r1, 801fb78 <CoreRectView_ArrangeView+0x174>
 801fb6c:	2a00      	cmp	r2, #0
 801fb6e:	f040 8085 	bne.w	801fc7c <CoreRectView_ArrangeView+0x278>
 801fb72:	2800      	cmp	r0, #0
 801fb74:	f000 8082 	beq.w	801fc7c <CoreRectView_ArrangeView+0x278>
        x2 = x2 - context->bounds.Point2.X;
 801fb78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801fb7a:	eba9 0903 	sub.w	r9, r9, r3
      x1 = x1 + aBounds.Point1.X;
 801fb7e:	9b06      	ldr	r3, [sp, #24]
 801fb80:	4433      	add	r3, r6
 801fb82:	461e      	mov	r6, r3
      x2 = x2 + aBounds.Point2.X;
 801fb84:	9b08      	ldr	r3, [sp, #32]
 801fb86:	4499      	add	r9, r3
      if ( !resizeHorz )
 801fb88:	2a00      	cmp	r2, #0
 801fb8a:	f040 809d 	bne.w	801fcc8 <CoreRectView_ArrangeView+0x2c4>
        if ( alignToLeft && !alignToRight )
 801fb8e:	2800      	cmp	r0, #0
 801fb90:	f040 80d6 	bne.w	801fd40 <CoreRectView_ArrangeView+0x33c>
          if ( !alignToLeft && alignToRight )
 801fb94:	2900      	cmp	r1, #0
 801fb96:	f040 80ea 	bne.w	801fd6e <CoreRectView_ArrangeView+0x36a>
            x1 = x1 + ((( x2 - x1 ) - w ) / 2 );
 801fb9a:	9b03      	ldr	r3, [sp, #12]
 801fb9c:	eba9 0906 	sub.w	r9, r9, r6
 801fba0:	eba9 0903 	sub.w	r9, r9, r3
 801fba4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 801fba8:	eb06 0669 	add.w	r6, r6, r9, asr #1
            x2 = x1 + w;
 801fbac:	eb03 0906 	add.w	r9, r3, r6
    if ( srcSize.Y != dstSize.Y )
 801fbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbb2:	4573      	cmp	r3, lr
 801fbb4:	f000 808f 	beq.w	801fcd6 <CoreRectView_ArrangeView+0x2d2>
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 801fbb8:	9b05      	ldr	r3, [sp, #20]
      if ( !alignToTop && ( resizeVert || !alignToBottom ))
 801fbba:	f013 0c10 	ands.w	ip, r3, #16
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 801fbbe:	f003 0120 	and.w	r1, r3, #32
      XBool resizeVert = (( layout & CoreLayoutResizeVert ) == CoreLayoutResizeVert );
 801fbc2:	f003 0202 	and.w	r2, r3, #2
      if ( !alignToTop && ( resizeVert || !alignToBottom ))
 801fbc6:	d167      	bne.n	801fc98 <CoreRectView_ArrangeView+0x294>
 801fbc8:	2a00      	cmp	r2, #0
 801fbca:	d160      	bne.n	801fc8e <CoreRectView_ArrangeView+0x28a>
 801fbcc:	2900      	cmp	r1, #0
 801fbce:	d05e      	beq.n	801fc8e <CoreRectView_ArrangeView+0x28a>
        y2 = y2 - context->bounds.Point2.Y;
 801fbd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801fbd2:	ebaa 0a03 	sub.w	sl, sl, r3
      y1 = y1 + aBounds.Point1.Y;
 801fbd6:	9b07      	ldr	r3, [sp, #28]
 801fbd8:	443b      	add	r3, r7
 801fbda:	4618      	mov	r0, r3
 801fbdc:	9302      	str	r3, [sp, #8]
      y2 = y2 + aBounds.Point2.Y;
 801fbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbe0:	449a      	add	sl, r3
      if ( !resizeVert )
 801fbe2:	2a00      	cmp	r2, #0
 801fbe4:	f000 8094 	beq.w	801fd10 <CoreRectView_ArrangeView+0x30c>
 801fbe8:	ebaa 0300 	sub.w	r3, sl, r0
 801fbec:	9304      	str	r3, [sp, #16]
 801fbee:	e758      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        x1 = x2 - w;
 801fbf0:	9b08      	ldr	r3, [sp, #32]
 801fbf2:	9a03      	ldr	r2, [sp, #12]
        x2 = aBounds.Point2.X;
 801fbf4:	4699      	mov	r9, r3
        x1 = x2 - w;
 801fbf6:	1a9e      	subs	r6, r3, r2
      if ( resizeVert )
 801fbf8:	9b05      	ldr	r3, [sp, #20]
 801fbfa:	079b      	lsls	r3, r3, #30
 801fbfc:	d513      	bpl.n	801fc26 <CoreRectView_ArrangeView+0x222>
 801fbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc00:	9f07      	ldr	r7, [sp, #28]
        y1 = aBounds.Point1.Y;
 801fc02:	9702      	str	r7, [sp, #8]
 801fc04:	1bda      	subs	r2, r3, r7
 801fc06:	9204      	str	r2, [sp, #16]
        y2 = aBounds.Point2.Y;
 801fc08:	469a      	mov	sl, r3
    if (( aFormation == CoreFormationTopToBottom ) || ( aFormation == CoreFormationBottomToTop ))
 801fc0a:	e74a      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        y1 = y2 - h;
 801fc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc0e:	9a04      	ldr	r2, [sp, #16]
 801fc10:	1a9a      	subs	r2, r3, r2
 801fc12:	9202      	str	r2, [sp, #8]
        y2 = aBounds.Point2.Y;
 801fc14:	469a      	mov	sl, r3
      break;
 801fc16:	e730      	b.n	801fa7a <CoreRectView_ArrangeView+0x76>
        x2 = x1 + w;
 801fc18:	9b03      	ldr	r3, [sp, #12]
 801fc1a:	9e06      	ldr	r6, [sp, #24]
 801fc1c:	eb03 0906 	add.w	r9, r3, r6
      if ( resizeVert )
 801fc20:	9b05      	ldr	r3, [sp, #20]
 801fc22:	079b      	lsls	r3, r3, #30
 801fc24:	d4eb      	bmi.n	801fbfe <CoreRectView_ArrangeView+0x1fa>
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 801fc26:	9a05      	ldr	r2, [sp, #20]
        if ( alignToTop && !alignToBottom )
 801fc28:	06d7      	lsls	r7, r2, #27
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 801fc2a:	f002 0320 	and.w	r3, r2, #32
        if ( alignToTop && !alignToBottom )
 801fc2e:	d55e      	bpl.n	801fcee <CoreRectView_ArrangeView+0x2ea>
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	d15e      	bne.n	801fcf2 <CoreRectView_ArrangeView+0x2ee>
          y2 = y1 + h;
 801fc34:	9f07      	ldr	r7, [sp, #28]
 801fc36:	9b04      	ldr	r3, [sp, #16]
          y1 = aBounds.Point1.Y;
 801fc38:	9702      	str	r7, [sp, #8]
          y2 = y1 + h;
 801fc3a:	eb03 0a07 	add.w	sl, r3, r7
 801fc3e:	e730      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
 801fc40:	9b08      	ldr	r3, [sp, #32]
 801fc42:	9e06      	ldr	r6, [sp, #24]
 801fc44:	1b9a      	subs	r2, r3, r6
 801fc46:	9203      	str	r2, [sp, #12]
        x2 = aBounds.Point2.X;
 801fc48:	4699      	mov	r9, r3
 801fc4a:	e72a      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
      if ( !alignToLeft && ( resizeHorz || !alignToRight ))
 801fc4c:	b90a      	cbnz	r2, 801fc52 <CoreRectView_ArrangeView+0x24e>
 801fc4e:	2900      	cmp	r1, #0
 801fc50:	d192      	bne.n	801fb78 <CoreRectView_ArrangeView+0x174>
        x1 = ( x1 * dstSize.X ) / srcSize.X;
 801fc52:	fb08 f606 	mul.w	r6, r8, r6
 801fc56:	fb96 f6fc 	sdiv	r6, r6, ip
 801fc5a:	e786      	b.n	801fb6a <CoreRectView_ArrangeView+0x166>
          if ( alignToRight && !alignToLeft )
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d176      	bne.n	801fd4e <CoreRectView_ArrangeView+0x34a>
            x1 = aBounds.Point1.X + (( EwGetRectW( aBounds ) - w ) / 2 );
 801fc60:	ab26      	add	r3, sp, #152	; 0x98
 801fc62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fc64:	f7fa fab6 	bl	801a1d4 <EwGetRectW>
 801fc68:	9b03      	ldr	r3, [sp, #12]
 801fc6a:	9a06      	ldr	r2, [sp, #24]
 801fc6c:	1ac0      	subs	r0, r0, r3
 801fc6e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801fc72:	eb02 0660 	add.w	r6, r2, r0, asr #1
            x2 = x1 + w;
 801fc76:	eb03 0906 	add.w	r9, r3, r6
 801fc7a:	e712      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        x2 = x2 - context->bounds.Point1.X;
 801fc7c:	eba9 0903 	sub.w	r9, r9, r3
        x2 = ( x2 * dstSize.X ) / srcSize.X;
 801fc80:	fb08 f909 	mul.w	r9, r8, r9
 801fc84:	fb99 f9fc 	sdiv	r9, r9, ip
        x2 = x2 - dstSize.X;
 801fc88:	eba9 0908 	sub.w	r9, r9, r8
 801fc8c:	e777      	b.n	801fb7e <CoreRectView_ArrangeView+0x17a>
        y1 = ( y1 * dstSize.Y ) / srcSize.Y;
 801fc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc90:	fb03 f707 	mul.w	r7, r3, r7
 801fc94:	fb97 f7fe 	sdiv	r7, r7, lr
      if ( !alignToBottom && ( resizeVert || !alignToTop ))
 801fc98:	2900      	cmp	r1, #0
 801fc9a:	d199      	bne.n	801fbd0 <CoreRectView_ArrangeView+0x1cc>
 801fc9c:	b912      	cbnz	r2, 801fca4 <CoreRectView_ArrangeView+0x2a0>
 801fc9e:	f1bc 0f00 	cmp.w	ip, #0
 801fca2:	d195      	bne.n	801fbd0 <CoreRectView_ArrangeView+0x1cc>
        y2 = y2 - context->bounds.Point1.Y;
 801fca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fca6:	ebaa 0a03 	sub.w	sl, sl, r3
        y2 = ( y2 * dstSize.Y ) / srcSize.Y;
 801fcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcac:	fb03 fa0a 	mul.w	sl, r3, sl
 801fcb0:	fb9a fafe 	sdiv	sl, sl, lr
        y2 = y2 - dstSize.Y;
 801fcb4:	ebaa 0a03 	sub.w	sl, sl, r3
 801fcb8:	e78d      	b.n	801fbd6 <CoreRectView_ArrangeView+0x1d2>
      x2 = x2 - context->bounds.Point2.X;
 801fcba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801fcbc:	eba9 0903 	sub.w	r9, r9, r3
      x1 = x1 + aBounds.Point1.X;
 801fcc0:	9b06      	ldr	r3, [sp, #24]
 801fcc2:	441e      	add	r6, r3
      x2 = x2 + aBounds.Point2.X;
 801fcc4:	9b08      	ldr	r3, [sp, #32]
 801fcc6:	4499      	add	r9, r3
 801fcc8:	eba9 0306 	sub.w	r3, r9, r6
 801fccc:	9303      	str	r3, [sp, #12]
    if ( srcSize.Y != dstSize.Y )
 801fcce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcd0:	4573      	cmp	r3, lr
 801fcd2:	f47f af71 	bne.w	801fbb8 <CoreRectView_ArrangeView+0x1b4>
      y2 = y2 - context->bounds.Point2.Y;
 801fcd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801fcd8:	ebaa 0a03 	sub.w	sl, sl, r3
      y1 = y1 + aBounds.Point1.Y;
 801fcdc:	9b07      	ldr	r3, [sp, #28]
 801fcde:	18fa      	adds	r2, r7, r3
      y2 = y2 + aBounds.Point2.Y;
 801fce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
      y1 = y1 + aBounds.Point1.Y;
 801fce2:	9202      	str	r2, [sp, #8]
      y2 = y2 + aBounds.Point2.Y;
 801fce4:	449a      	add	sl, r3
 801fce6:	ebaa 0302 	sub.w	r3, sl, r2
 801fcea:	9304      	str	r3, [sp, #16]
 801fcec:	e6d9      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
          if ( alignToBottom && !alignToTop )
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d132      	bne.n	801fd58 <CoreRectView_ArrangeView+0x354>
            y1 = aBounds.Point1.Y + (( EwGetRectH( aBounds ) - h ) / 2 );
 801fcf2:	ab26      	add	r3, sp, #152	; 0x98
 801fcf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fcf6:	f7fa fa65 	bl	801a1c4 <EwGetRectH>
 801fcfa:	9b04      	ldr	r3, [sp, #16]
 801fcfc:	9a07      	ldr	r2, [sp, #28]
 801fcfe:	1ac0      	subs	r0, r0, r3
 801fd00:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801fd04:	eb02 0260 	add.w	r2, r2, r0, asr #1
 801fd08:	9202      	str	r2, [sp, #8]
            y2 = y1 + h;
 801fd0a:	eb03 0a02 	add.w	sl, r3, r2
 801fd0e:	e6c8      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        if ( alignToTop && !alignToBottom )
 801fd10:	f1bc 0f00 	cmp.w	ip, #0
 801fd14:	d105      	bne.n	801fd22 <CoreRectView_ArrangeView+0x31e>
          if ( !alignToTop && alignToBottom )
 801fd16:	b129      	cbz	r1, 801fd24 <CoreRectView_ArrangeView+0x320>
            y1 = y2 - h;
 801fd18:	9b04      	ldr	r3, [sp, #16]
 801fd1a:	ebaa 0303 	sub.w	r3, sl, r3
 801fd1e:	9302      	str	r3, [sp, #8]
 801fd20:	e6bf      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        if ( alignToTop && !alignToBottom )
 801fd22:	b1f9      	cbz	r1, 801fd64 <CoreRectView_ArrangeView+0x360>
            y1 = y1 + ((( y2 - y1 ) - h ) / 2 );
 801fd24:	9902      	ldr	r1, [sp, #8]
 801fd26:	9b04      	ldr	r3, [sp, #16]
 801fd28:	ebaa 0a01 	sub.w	sl, sl, r1
 801fd2c:	ebaa 0a03 	sub.w	sl, sl, r3
 801fd30:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 801fd34:	eb01 026a 	add.w	r2, r1, sl, asr #1
 801fd38:	9202      	str	r2, [sp, #8]
            y2 = y1 + h;
 801fd3a:	eb03 0a02 	add.w	sl, r3, r2
 801fd3e:	e6b0      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
        if ( alignToLeft && !alignToRight )
 801fd40:	2900      	cmp	r1, #0
 801fd42:	f47f af2a 	bne.w	801fb9a <CoreRectView_ArrangeView+0x196>
          x2 = x1 + w;
 801fd46:	9b03      	ldr	r3, [sp, #12]
 801fd48:	eb03 0906 	add.w	r9, r3, r6
 801fd4c:	e730      	b.n	801fbb0 <CoreRectView_ArrangeView+0x1ac>
            x1 = x2 - w;
 801fd4e:	9b08      	ldr	r3, [sp, #32]
 801fd50:	9a03      	ldr	r2, [sp, #12]
            x2 = aBounds.Point2.X;
 801fd52:	4699      	mov	r9, r3
            x1 = x2 - w;
 801fd54:	1a9e      	subs	r6, r3, r2
 801fd56:	e6a4      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
            y1 = y2 - h;
 801fd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd5a:	9a04      	ldr	r2, [sp, #16]
 801fd5c:	1a9a      	subs	r2, r3, r2
 801fd5e:	9202      	str	r2, [sp, #8]
            y2 = aBounds.Point2.Y;
 801fd60:	469a      	mov	sl, r3
            y1 = y2 - h;
 801fd62:	e69e      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
          y2 = y1 + h;
 801fd64:	9b04      	ldr	r3, [sp, #16]
 801fd66:	9a02      	ldr	r2, [sp, #8]
 801fd68:	eb03 0a02 	add.w	sl, r3, r2
 801fd6c:	e699      	b.n	801faa2 <CoreRectView_ArrangeView+0x9e>
            x1 = x2 - w;
 801fd6e:	9b03      	ldr	r3, [sp, #12]
 801fd70:	eba9 0603 	sub.w	r6, r9, r3
 801fd74:	e71c      	b.n	801fbb0 <CoreRectView_ArrangeView+0x1ac>
 801fd76:	bf00      	nop

0801fd78 <CoreRectView_MoveView>:
{
 801fd78:	b570      	push	{r4, r5, r6, lr}
 801fd7a:	b092      	sub	sp, #72	; 0x48
 801fd7c:	ad08      	add	r5, sp, #32
 801fd7e:	e885 0006 	stmia.w	r5, {r1, r2}
 801fd82:	4604      	mov	r4, r0
    _this->Bounds = EwMoveRectPos( _this->Bounds, aOffset );
 801fd84:	e895 0003 	ldmia.w	r5, {r0, r1}
  if ( aFastMove )
 801fd88:	b18b      	cbz	r3, 801fdae <CoreRectView_MoveView+0x36>
    _this->Bounds = EwMoveRectPos( _this->Bounds, aOffset );
 801fd8a:	ab01      	add	r3, sp, #4
 801fd8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd8e:	e883 0005 	stmia.w	r3, {r0, r2}
 801fd92:	ad04      	add	r5, sp, #16
 801fd94:	3428      	adds	r4, #40	; 0x28
 801fd96:	9100      	str	r1, [sp, #0]
 801fd98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801fd9c:	4628      	mov	r0, r5
 801fd9e:	f7fa f9fa 	bl	801a196 <EwMoveRectPos>
 801fda2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fda6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801fdaa:	b012      	add	sp, #72	; 0x48
 801fdac:	bd70      	pop	{r4, r5, r6, pc}
    CoreRectView__OnSetBounds( _this, EwMoveRectPos( _this->Bounds, aOffset ));
 801fdae:	a901      	add	r1, sp, #4
 801fdb0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801fdb2:	e881 0005 	stmia.w	r1, {r0, r2}
 801fdb6:	ad0a      	add	r5, sp, #40	; 0x28
 801fdb8:	9600      	str	r6, [sp, #0]
 801fdba:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801fdbe:	4628      	mov	r0, r5
 801fdc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fdc2:	f7fa f9e8 	bl	801a196 <EwMoveRectPos>
 801fdc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fdca:	ad0e      	add	r5, sp, #56	; 0x38
 801fdcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreRectView)_this)->_.VMT->OnSetBounds((CoreRectView)_this, value );
 801fdd0:	6823      	ldr	r3, [r4, #0]
 801fdd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fdd4:	9200      	str	r2, [sp, #0]
 801fdd6:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 801fdd8:	4620      	mov	r0, r4
 801fdda:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801fdde:	47b0      	blx	r6
}
 801fde0:	b012      	add	sp, #72	; 0x48
 801fde2:	bd70      	pop	{r4, r5, r6, pc}

0801fde4 <CoreRectView_OnSetBounds>:
{
 801fde4:	b084      	sub	sp, #16
 801fde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdea:	b088      	sub	sp, #32
 801fdec:	ac0f      	add	r4, sp, #60	; 0x3c
  if ( !EwCompRect( value, _this->Bounds ))
 801fdee:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 801fdf2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801fdf6:	4606      	mov	r6, r0
  if ( !EwCompRect( value, _this->Bounds ))
 801fdf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fdfc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801fe00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fe04:	f7fa f883 	bl	8019f0e <EwCompRect>
 801fe08:	2800      	cmp	r0, #0
 801fe0a:	d03f      	beq.n	801fe8c <CoreRectView_OnSetBounds+0xa8>
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 801fe0c:	f8d6 c018 	ldr.w	ip, [r6, #24]
 801fe10:	f1bc 0f00 	cmp.w	ip, #0
 801fe14:	d046      	beq.n	801fea4 <CoreRectView_OnSetBounds+0xc0>
 801fe16:	6a37      	ldr	r7, [r6, #32]
 801fe18:	f017 0e01 	ands.w	lr, r7, #1
 801fe1c:	d03b      	beq.n	801fe96 <CoreRectView_OnSetBounds+0xb2>
    CoreGroup__InvalidateArea( _this->Super1.Owner, _this->Bounds );
 801fe1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fe22:	af04      	add	r7, sp, #16
 801fe24:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 801fe28:	f8dc 3000 	ldr.w	r3, [ip]
 801fe2c:	9a07      	ldr	r2, [sp, #28]
 801fe2e:	9200      	str	r2, [sp, #0]
 801fe30:	4660      	mov	r0, ip
 801fe32:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 801fe36:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 801fe3a:	47c0      	blx	r8
  _this->Bounds = value;
 801fe3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fe40:	f8d6 c018 	ldr.w	ip, [r6, #24]
  _this->Super1.layoutContext = 0;
 801fe44:	2400      	movs	r4, #0
 801fe46:	61f4      	str	r4, [r6, #28]
  _this->Bounds = value;
 801fe48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 801fe4c:	f1bc 0f00 	cmp.w	ip, #0
 801fe50:	d01c      	beq.n	801fe8c <CoreRectView_OnSetBounds+0xa8>
 801fe52:	6a37      	ldr	r7, [r6, #32]
 801fe54:	07f9      	lsls	r1, r7, #31
 801fe56:	d513      	bpl.n	801fe80 <CoreRectView_OnSetBounds+0x9c>
    CoreGroup__InvalidateArea( _this->Super1.Owner, _this->Bounds );
 801fe58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fe5c:	ac04      	add	r4, sp, #16
 801fe5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 801fe62:	f8dc 3000 	ldr.w	r3, [ip]
 801fe66:	9a07      	ldr	r2, [sp, #28]
 801fe68:	9200      	str	r2, [sp, #0]
 801fe6a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801fe6c:	4660      	mov	r0, ip
 801fe6e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801fe72:	47a8      	blx	r5
  if ((( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateEmbedded ) 
 801fe74:	f8d6 c018 	ldr.w	ip, [r6, #24]
 801fe78:	f1bc 0f00 	cmp.w	ip, #0
 801fe7c:	d006      	beq.n	801fe8c <CoreRectView_OnSetBounds+0xa8>
 801fe7e:	6a37      	ldr	r7, [r6, #32]
 801fe80:	057a      	lsls	r2, r7, #21
 801fe82:	d503      	bpl.n	801fe8c <CoreRectView_OnSetBounds+0xa8>
      == CoreViewStateEmbedded )) && !(( _this->Super1.Owner->Super2.viewState & 
 801fe84:	f8dc 3020 	ldr.w	r3, [ip, #32]
 801fe88:	049b      	lsls	r3, r3, #18
 801fe8a:	d516      	bpl.n	801feba <CoreRectView_OnSetBounds+0xd6>
}
 801fe8c:	b008      	add	sp, #32
 801fe8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe92:	b004      	add	sp, #16
 801fe94:	4770      	bx	lr
  _this->Bounds = value;
 801fe96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  _this->Super1.layoutContext = 0;
 801fe9a:	f8c6 e01c 	str.w	lr, [r6, #28]
  _this->Bounds = value;
 801fe9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 801fea2:	e7d7      	b.n	801fe54 <CoreRectView_OnSetBounds+0x70>
  _this->Bounds = value;
 801fea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  _this->Super1.layoutContext = 0;
 801fea8:	f8c6 c01c 	str.w	ip, [r6, #28]
  _this->Bounds = value;
 801feac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801feb0:	b008      	add	sp, #32
 801feb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801feb6:	b004      	add	sp, #16
 801feb8:	4770      	bx	lr
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 801feba:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 801febe:	6237      	str	r7, [r6, #32]
    | CoreViewStatePendingLayout;
 801fec0:	f8dc 3020 	ldr.w	r3, [ip, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 801fec4:	4a09      	ldr	r2, [pc, #36]	; (801feec <CoreRectView_OnSetBounds+0x108>)
    | CoreViewStatePendingLayout;
 801fec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 801feca:	ac04      	add	r4, sp, #16
 801fecc:	4661      	mov	r1, ip
 801fece:	4620      	mov	r0, r4
    _this->Super1.Owner->Super2.viewState = _this->Super1.Owner->Super2.viewState 
 801fed0:	f8cc 3020 	str.w	r3, [ip, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 801fed4:	f7fb f97e 	bl	801b1d4 <EwNewSlot>
 801fed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801fedc:	4632      	mov	r2, r6
}
 801fede:	b008      	add	sp, #32
 801fee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fee4:	b004      	add	sp, #16
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 801fee6:	f7fb b9a3 	b.w	801b230 <EwPostSignal>
 801feea:	bf00      	nop
 801feec:	08021fe9 	.word	0x08021fe9

0801fef0 <CoreGroup_InvalidateArea>:
{
 801fef0:	b084      	sub	sp, #16
 801fef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fef6:	b08f      	sub	sp, #60	; 0x3c
 801fef8:	ac17      	add	r4, sp, #92	; 0x5c
 801fefa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  while (( grp != 0 ) && !EwIsRectEmpty( aArea ))
 801fefe:	2800      	cmp	r0, #0
 801ff00:	d03e      	beq.n	801ff80 <CoreGroup_InvalidateArea+0x90>
 801ff02:	4681      	mov	r9, r0
 801ff04:	4606      	mov	r6, r0
    aArea = EwIntersectRect( EwMoveRectPos( aArea, grp->Super1.Bounds.Point1 ), 
 801ff06:	f10d 0818 	add.w	r8, sp, #24
 801ff0a:	af01      	add	r7, sp, #4
 801ff0c:	e01a      	b.n	801ff44 <CoreGroup_InvalidateArea+0x54>
    if ( !(( grp->Super2.viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 801ff0e:	6a33      	ldr	r3, [r6, #32]
 801ff10:	07db      	lsls	r3, r3, #31
 801ff12:	d535      	bpl.n	801ff80 <CoreGroup_InvalidateArea+0x90>
    aArea = EwIntersectRect( EwMoveRectPos( aArea, grp->Super1.Bounds.Point1 ), 
 801ff14:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ff18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ff1a:	e887 0003 	stmia.w	r7, {r0, r1}
 801ff1e:	9300      	str	r3, [sp, #0]
 801ff20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ff24:	4640      	mov	r0, r8
 801ff26:	f7fa f936 	bl	801a196 <EwMoveRectPos>
 801ff2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ff2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ff30:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801ff34:	9500      	str	r5, [sp, #0]
 801ff36:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 801ff3a:	4620      	mov	r0, r4
 801ff3c:	f7fa f84c 	bl	8019fd8 <EwIntersectRect>
    grp = grp->Super2.Owner;
 801ff40:	69b6      	ldr	r6, [r6, #24]
  while (( grp != 0 ) && !EwIsRectEmpty( aArea ))
 801ff42:	b1ee      	cbz	r6, 801ff80 <CoreGroup_InvalidateArea+0x90>
 801ff44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    aArea = EwIntersectRect( EwMoveRectPos( aArea, grp->Super1.Bounds.Point1 ), 
 801ff48:	f106 0528 	add.w	r5, r6, #40	; 0x28
  while (( grp != 0 ) && !EwIsRectEmpty( aArea ))
 801ff4c:	f7fa f81e 	bl	8019f8c <EwIsRectEmpty>
 801ff50:	b9b0      	cbnz	r0, 801ff80 <CoreGroup_InvalidateArea+0x90>
    if (( grp->Super2.Owner == 0 ) && ( grp != _this ))
 801ff52:	69b3      	ldr	r3, [r6, #24]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d1da      	bne.n	801ff0e <CoreGroup_InvalidateArea+0x1e>
 801ff58:	45b1      	cmp	r9, r6
 801ff5a:	d0d8      	beq.n	801ff0e <CoreGroup_InvalidateArea+0x1e>
      CoreGroup__InvalidateArea( grp, aArea );
 801ff5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ff60:	ac0a      	add	r4, sp, #40	; 0x28
 801ff62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 801ff66:	6833      	ldr	r3, [r6, #0]
 801ff68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ff6a:	921a      	str	r2, [sp, #104]	; 0x68
 801ff6c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801ff6e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ff72:	4630      	mov	r0, r6
 801ff74:	46ac      	mov	ip, r5
}
 801ff76:	b00f      	add	sp, #60	; 0x3c
 801ff78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ff7c:	b004      	add	sp, #16
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 801ff7e:	4760      	bx	ip
}
 801ff80:	b00f      	add	sp, #60	; 0x3c
 801ff82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ff86:	b004      	add	sp, #16
 801ff88:	4770      	bx	lr
 801ff8a:	bf00      	nop

0801ff8c <CoreGroup_CursorHitTest>:
{
 801ff8c:	b084      	sub	sp, #16
 801ff8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff92:	b0a9      	sub	sp, #164	; 0xa4
  XRect area = _Const0001;
 801ff94:	ae0c      	add	r6, sp, #48	; 0x30
  XBool lock = (XBool)(( _this->fadersQueue != 0 ) && (( _this->fadersQueue->current 
 801ff96:	6c85      	ldr	r5, [r0, #72]	; 0x48
  CoreView view = _this->last;
 801ff98:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
 801ff9a:	4683      	mov	fp, r0
 801ff9c:	f10d 0acc 	add.w	sl, sp, #204	; 0xcc
  XRect area = _Const0001;
 801ffa0:	2000      	movs	r0, #0
{
 801ffa2:	e88a 000e 	stmia.w	sl, {r1, r2, r3}
  XRect area = _Const0001;
 801ffa6:	e9c6 0002 	strd	r0, r0, [r6, #8]
 801ffaa:	6070      	str	r0, [r6, #4]
 801ffac:	900c      	str	r0, [sp, #48]	; 0x30
  XBool lock = (XBool)(( _this->fadersQueue != 0 ) && (( _this->fadersQueue->current 
 801ffae:	2d00      	cmp	r5, #0
 801ffb0:	f000 80e5 	beq.w	802017e <CoreGroup_CursorHitTest+0x1f2>
 801ffb4:	692b      	ldr	r3, [r5, #16]
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	d043      	beq.n	8020042 <CoreGroup_CursorHitTest+0xb6>
 801ffba:	2301      	movs	r3, #1
 801ffbc:	930b      	str	r3, [sp, #44]	; 0x2c
  if ( EwIsRectEmpty( EwIntersectRect( aArea, _this->Super1.Bounds )))
 801ffbe:	f10b 0728 	add.w	r7, fp, #40	; 0x28
 801ffc2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801ffc6:	ad01      	add	r5, sp, #4
 801ffc8:	9507      	str	r5, [sp, #28]
 801ffca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801ffce:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ffd0:	9300      	str	r3, [sp, #0]
 801ffd2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ffd6:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 801ffda:	4640      	mov	r0, r8
 801ffdc:	f7f9 fffc 	bl	8019fd8 <EwIntersectRect>
 801ffe0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801ffe4:	f7f9 ffd2 	bl	8019f8c <EwIsRectEmpty>
 801ffe8:	4605      	mov	r5, r0
 801ffea:	2800      	cmp	r0, #0
 801ffec:	f040 80c4 	bne.w	8020178 <CoreGroup_CursorHitTest+0x1ec>
  aArea = EwMoveRectNeg( aArea, _this->Super1.Bounds.Point1 );
 801fff0:	e897 0003 	ldmia.w	r7, {r0, r1}
 801fff4:	9a07      	ldr	r2, [sp, #28]
 801fff6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fff8:	e882 0003 	stmia.w	r2, {r0, r1}
 801fffc:	9300      	str	r3, [sp, #0]
 801fffe:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 8020002:	4650      	mov	r0, sl
 8020004:	f7fa f8b1 	bl	801a16a <EwMoveRectNeg>
  while ( view != 0 )
 8020008:	2c00      	cmp	r4, #0
 802000a:	f000 80b5 	beq.w	8020178 <CoreGroup_CursorHitTest+0x1ec>
        && !(( view->viewState & CoreViewStatePendingFader ) == CoreViewStatePendingFader )) 
 802000e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8020190 <CoreGroup_CursorHitTest+0x204>
  CoreCursorHit found = 0;
 8020012:	9508      	str	r5, [sp, #32]
      area = _Const0001;
 8020014:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ) 
 8020018:	6a23      	ldr	r3, [r4, #32]
 802001a:	0558      	lsls	r0, r3, #21
 802001c:	d502      	bpl.n	8020024 <CoreGroup_CursorHitTest+0x98>
        && ( form == 0 ))
 802001e:	2d00      	cmp	r5, #0
 8020020:	f000 8088 	beq.w	8020134 <CoreGroup_CursorHitTest+0x1a8>
    if ( form == view )
 8020024:	42a5      	cmp	r5, r4
 8020026:	d065      	beq.n	80200f4 <CoreGroup_CursorHitTest+0x168>
        && !(( view->viewState & CoreViewStatePendingFader ) == CoreViewStatePendingFader )) 
 8020028:	ea03 0208 	and.w	r2, r3, r8
    if (((((( view->viewState & CoreViewStateTouchable ) == CoreViewStateTouchable ) 
 802002c:	2a18      	cmp	r2, #24
 802002e:	d00e      	beq.n	802004e <CoreGroup_CursorHitTest+0xc2>
      view = view->prev;
 8020030:	6964      	ldr	r4, [r4, #20]
  while ( view != 0 )
 8020032:	2c00      	cmp	r4, #0
 8020034:	d1f0      	bne.n	8020018 <CoreGroup_CursorHitTest+0x8c>
}
 8020036:	9808      	ldr	r0, [sp, #32]
 8020038:	b029      	add	sp, #164	; 0xa4
 802003a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802003e:	b004      	add	sp, #16
 8020040:	4770      	bx	lr
    != 0 ) || ( _this->fadersQueue->first != 0 )));
 8020042:	69ab      	ldr	r3, [r5, #24]
 8020044:	1a1b      	subs	r3, r3, r0
 8020046:	bf18      	it	ne
 8020048:	2301      	movne	r3, #1
 802004a:	930b      	str	r3, [sp, #44]	; 0x2c
 802004c:	e7b7      	b.n	801ffbe <CoreGroup_CursorHitTest+0x32>
        && ( !(( view->viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 802004e:	03da      	lsls	r2, r3, #15
 8020050:	d507      	bpl.n	8020062 <CoreGroup_CursorHitTest+0xd6>
        || (((CoreView)_this->dialogStack->group == view ) && !lock )))
 8020052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020056:	691b      	ldr	r3, [r3, #16]
 8020058:	42a3      	cmp	r3, r4
 802005a:	d1e9      	bne.n	8020030 <CoreGroup_CursorHitTest+0xa4>
 802005c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802005e:	2b00      	cmp	r3, #0
 8020060:	d1e6      	bne.n	8020030 <CoreGroup_CursorHitTest+0xa4>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8020062:	6823      	ldr	r3, [r4, #0]
 8020064:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8020068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802006a:	4648      	mov	r0, r9
 802006c:	4621      	mov	r1, r4
 802006e:	4798      	blx	r3
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8020070:	6a23      	ldr	r3, [r4, #32]
        dedicatedView = 0;
 8020072:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8020074:	42a2      	cmp	r2, r4
 8020076:	bf08      	it	eq
 8020078:	2200      	moveq	r2, #0
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 802007a:	055b      	lsls	r3, r3, #21
        dedicatedView = 0;
 802007c:	9209      	str	r2, [sp, #36]	; 0x24
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 802007e:	d540      	bpl.n	8020102 <CoreGroup_CursorHitTest+0x176>
        if ( !EwIsRectEmpty( EwIntersectRect( extent, area )))
 8020080:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8020084:	9f07      	ldr	r7, [sp, #28]
 8020086:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 802008a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802008c:	9300      	str	r3, [sp, #0]
 802008e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8020092:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8020096:	4658      	mov	r0, fp
 8020098:	f7f9 ff9e 	bl	8019fd8 <EwIntersectRect>
 802009c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80200a0:	f7f9 ff74 	bl	8019f8c <EwIsRectEmpty>
 80200a4:	2800      	cmp	r0, #0
 80200a6:	d1c3      	bne.n	8020030 <CoreGroup_CursorHitTest+0xa4>
          cursorHit = CoreView__CursorHitTest( view, area, aFinger, aStrikeCount, 
 80200a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80200ac:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 80200b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  return ((CoreView)_this)->_.VMT->CursorHitTest((CoreView)_this, aArea, aFinger
 80200b4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80200b6:	6823      	ldr	r3, [r4, #0]
 80200b8:	9200      	str	r2, [sp, #0]
 80200ba:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80200bc:	9204      	str	r2, [sp, #16]
 80200be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200c0:	9203      	str	r2, [sp, #12]
 80200c2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80200c4:	9202      	str	r2, [sp, #8]
 80200c6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80200c8:	9201      	str	r2, [sp, #4]
 80200ca:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80200ce:	4620      	mov	r0, r4
 80200d0:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 80200d4:	47c8      	blx	r9
      view = view->prev;
 80200d6:	6964      	ldr	r4, [r4, #20]
      if ( cursorHit != 0 )
 80200d8:	2800      	cmp	r0, #0
 80200da:	d0aa      	beq.n	8020032 <CoreGroup_CursorHitTest+0xa6>
        if (( found == 0 ) || (( cursorHit->Deviation < found->Deviation ) && ( 
 80200dc:	9a08      	ldr	r2, [sp, #32]
 80200de:	6943      	ldr	r3, [r0, #20]
 80200e0:	b122      	cbz	r2, 80200ec <CoreGroup_CursorHitTest+0x160>
 80200e2:	6952      	ldr	r2, [r2, #20]
 80200e4:	4293      	cmp	r3, r2
 80200e6:	da02      	bge.n	80200ee <CoreGroup_CursorHitTest+0x162>
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	dba2      	blt.n	8020032 <CoreGroup_CursorHitTest+0xa6>
 80200ec:	9008      	str	r0, [sp, #32]
        if ( cursorHit->Deviation == 0 )
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d0a1      	beq.n	8020036 <CoreGroup_CursorHitTest+0xaa>
 80200f2:	e79e      	b.n	8020032 <CoreGroup_CursorHitTest+0xa6>
      area = _Const0001;
 80200f4:	2200      	movs	r2, #0
 80200f6:	e9c6 2200 	strd	r2, r2, [r6]
 80200fa:	e9c6 2202 	strd	r2, r2, [r6, #8]
      form = 0;
 80200fe:	4615      	mov	r5, r2
 8020100:	e792      	b.n	8020028 <CoreGroup_CursorHitTest+0x9c>
        if ( !EwIsRectEmpty( EwIntersectRect( extent, aArea )) || ( aDedicatedView 
 8020102:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8020106:	9f07      	ldr	r7, [sp, #28]
 8020108:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 802010c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802010e:	9300      	str	r3, [sp, #0]
 8020110:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
 8020114:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8020118:	4658      	mov	r0, fp
 802011a:	f7f9 ff5d 	bl	8019fd8 <EwIntersectRect>
 802011e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8020122:	f7f9 ff33 	bl	8019f8c <EwIsRectEmpty>
 8020126:	b110      	cbz	r0, 802012e <CoreGroup_CursorHitTest+0x1a2>
 8020128:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 802012a:	42a3      	cmp	r3, r4
 802012c:	d180      	bne.n	8020030 <CoreGroup_CursorHitTest+0xa4>
          cursorHit = CoreView__CursorHitTest( view, aArea, aFinger, aStrikeCount, 
 802012e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8020132:	e7bb      	b.n	80200ac <CoreGroup_CursorHitTest+0x120>
      form = view->prev;
 8020134:	f8d4 9014 	ldr.w	r9, [r4, #20]
      while (( form != 0 ) && !(( form->viewState & CoreViewStateIsOutline ) == 
 8020138:	464a      	mov	r2, r9
 802013a:	f1b9 0f00 	cmp.w	r9, #0
 802013e:	d102      	bne.n	8020146 <CoreGroup_CursorHitTest+0x1ba>
 8020140:	e01f      	b.n	8020182 <CoreGroup_CursorHitTest+0x1f6>
        form = form->prev;
 8020142:	6952      	ldr	r2, [r2, #20]
      while (( form != 0 ) && !(( form->viewState & CoreViewStateIsOutline ) == 
 8020144:	b1ea      	cbz	r2, 8020182 <CoreGroup_CursorHitTest+0x1f6>
 8020146:	6a11      	ldr	r1, [r2, #32]
 8020148:	0589      	lsls	r1, r1, #22
 802014a:	d5fa      	bpl.n	8020142 <CoreGroup_CursorHitTest+0x1b6>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 802014c:	6813      	ldr	r3, [r2, #0]
 802014e:	ad18      	add	r5, sp, #96	; 0x60
 8020150:	4628      	mov	r0, r5
 8020152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020154:	4611      	mov	r1, r2
 8020156:	4691      	mov	r9, r2
 8020158:	4798      	blx	r3
        area = EwIntersectRect( aArea, CoreView__GetExtent( form ));
 802015a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802015e:	9f07      	ldr	r7, [sp, #28]
 8020160:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 8020162:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8020166:	9500      	str	r5, [sp, #0]
 8020168:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 802016c:	4630      	mov	r0, r6
 802016e:	f7f9 ff33 	bl	8019fd8 <EwIntersectRect>
 8020172:	464d      	mov	r5, r9
 8020174:	6a23      	ldr	r3, [r4, #32]
 8020176:	e755      	b.n	8020024 <CoreGroup_CursorHitTest+0x98>
    return 0;
 8020178:	2300      	movs	r3, #0
 802017a:	9308      	str	r3, [sp, #32]
 802017c:	e75b      	b.n	8020036 <CoreGroup_CursorHitTest+0xaa>
  XBool lock = (XBool)(( _this->fadersQueue != 0 ) && (( _this->fadersQueue->current 
 802017e:	950b      	str	r5, [sp, #44]	; 0x2c
 8020180:	e71d      	b.n	801ffbe <CoreGroup_CursorHitTest+0x32>
        area = _Const0001;
 8020182:	2200      	movs	r2, #0
 8020184:	e9c6 2200 	strd	r2, r2, [r6]
 8020188:	e9c6 2202 	strd	r2, r2, [r6, #8]
    if ( form == view )
 802018c:	e74c      	b.n	8020028 <CoreGroup_CursorHitTest+0x9c>
 802018e:	bf00      	nop
 8020190:	00060018 	.word	0x00060018

08020194 <CoreGroup_OnSetBounds>:
{
 8020194:	b084      	sub	sp, #16
 8020196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802019a:	b090      	sub	sp, #64	; 0x40
 802019c:	ac17      	add	r4, sp, #92	; 0x5c
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 802019e:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 80201a2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80201a6:	4606      	mov	r6, r0
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 80201a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80201ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80201b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80201b4:	f7f9 feab 	bl	8019f0e <EwCompRect>
 80201b8:	b920      	cbnz	r0, 80201c4 <CoreGroup_OnSetBounds+0x30>
}
 80201ba:	b010      	add	sp, #64	; 0x40
 80201bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80201c0:	b004      	add	sp, #16
 80201c2:	4770      	bx	lr
  oldSize = EwGetRectSize( _this->Super1.Bounds );
 80201c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80201c6:	9300      	str	r3, [sp, #0]
 80201c8:	af04      	add	r7, sp, #16
 80201ca:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80201ce:	4638      	mov	r0, r7
 80201d0:	f7fa f815 	bl	801a1fe <EwGetRectSize>
  newSize = EwGetRectSize( value );
 80201d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80201d6:	9300      	str	r3, [sp, #0]
 80201d8:	ad06      	add	r5, sp, #24
 80201da:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80201de:	4628      	mov	r0, r5
 80201e0:	f7fa f80d 	bl	801a1fe <EwGetRectSize>
  resize = (XBool)EwCompPoint( oldSize, newSize );
 80201e4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80201e8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80201ec:	f7f9 fdfd 	bl	8019dea <EwCompPoint>
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 80201f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80201f2:	9300      	str	r3, [sp, #0]
  resize = (XBool)EwCompPoint( oldSize, newSize );
 80201f4:	4605      	mov	r5, r0
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 80201f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80201fa:	4630      	mov	r0, r6
 80201fc:	f7ff fdf2 	bl	801fde4 <CoreRectView_OnSetBounds>
  if (( resize && ( oldSize.X > 0 )) && ( oldSize.Y > 0 ))
 8020200:	f015 0fff 	tst.w	r5, #255	; 0xff
 8020204:	d0d9      	beq.n	80201ba <CoreGroup_OnSetBounds+0x26>
 8020206:	9b04      	ldr	r3, [sp, #16]
 8020208:	2b00      	cmp	r3, #0
 802020a:	dd02      	ble.n	8020212 <CoreGroup_OnSetBounds+0x7e>
 802020c:	9a05      	ldr	r2, [sp, #20]
 802020e:	2a00      	cmp	r2, #0
 8020210:	dc12      	bgt.n	8020238 <CoreGroup_OnSetBounds+0xa4>
 8020212:	ad0c      	add	r5, sp, #48	; 0x30
    _this->Super2.viewState = _this->Super2.viewState | ( CoreViewStatePendingLayout 
 8020214:	6a33      	ldr	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8020216:	4a1c      	ldr	r2, [pc, #112]	; (8020288 <CoreGroup_OnSetBounds+0xf4>)
    _this->Super2.viewState = _this->Super2.viewState | ( CoreViewStatePendingLayout 
 8020218:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802021c:	4631      	mov	r1, r6
 802021e:	4628      	mov	r0, r5
    _this->Super2.viewState = _this->Super2.viewState | ( CoreViewStatePendingLayout 
 8020220:	6233      	str	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8020222:	f7fa ffd7 	bl	801b1d4 <EwNewSlot>
 8020226:	e895 0003 	ldmia.w	r5, {r0, r1}
 802022a:	4632      	mov	r2, r6
}
 802022c:	b010      	add	sp, #64	; 0x40
 802022e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020232:	b004      	add	sp, #16
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8020234:	f7fa bffc 	b.w	801b230 <EwPostSignal>
    XRect bounds = EwNewRect2Point( _Const0000, oldSize );
 8020238:	4914      	ldr	r1, [pc, #80]	; (802028c <CoreGroup_OnSetBounds+0xf8>)
 802023a:	9200      	str	r2, [sp, #0]
 802023c:	f10d 0820 	add.w	r8, sp, #32
 8020240:	c906      	ldmia	r1, {r1, r2}
 8020242:	4640      	mov	r0, r8
 8020244:	f7f9 fe4b 	bl	8019ede <EwNewRect2Point>
    CoreView view = _this->first;
 8020248:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    while ( view != 0 )
 802024a:	ad0c      	add	r5, sp, #48	; 0x30
 802024c:	b91c      	cbnz	r4, 8020256 <CoreGroup_OnSetBounds+0xc2>
 802024e:	e7e1      	b.n	8020214 <CoreGroup_OnSetBounds+0x80>
      view = view->next;
 8020250:	6924      	ldr	r4, [r4, #16]
    while ( view != 0 )
 8020252:	2c00      	cmp	r4, #0
 8020254:	d0de      	beq.n	8020214 <CoreGroup_OnSetBounds+0x80>
      if ((( view->layoutContext == 0 ) && ( view->Layout != ( CoreLayoutAlignToLeft 
 8020256:	69e3      	ldr	r3, [r4, #28]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d1f9      	bne.n	8020250 <CoreGroup_OnSetBounds+0xbc>
 802025c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802025e:	2b14      	cmp	r3, #20
 8020260:	d0f6      	beq.n	8020250 <CoreGroup_OnSetBounds+0xbc>
          | CoreLayoutAlignToTop ))) && !(( view->viewState & CoreViewStateEmbedded ) 
 8020262:	6a23      	ldr	r3, [r4, #32]
 8020264:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
 8020268:	d1f2      	bne.n	8020250 <CoreGroup_OnSetBounds+0xbc>
 802026a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 802026e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreView)_this)->_.VMT->initLayoutContext((CoreView)_this, aBounds, aOutline );
 8020272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020274:	6823      	ldr	r3, [r4, #0]
 8020276:	e9cd 2700 	strd	r2, r7, [sp]
 802027a:	4620      	mov	r0, r4
 802027c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 802027e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8020282:	47b8      	blx	r7
 8020284:	e7e4      	b.n	8020250 <CoreGroup_OnSetBounds+0xbc>
 8020286:	bf00      	nop
 8020288:	08021fe9 	.word	0x08021fe9
 802028c:	08037aa4 	.word	0x08037aa4

08020290 <CoreGroup_OnSetFocus>:
{
 8020290:	b570      	push	{r4, r5, r6, lr}
 8020292:	4605      	mov	r5, r0
  if (( value != 0 ) && ( value->Owner != _this ))
 8020294:	460c      	mov	r4, r1
 8020296:	b141      	cbz	r1, 80202aa <CoreGroup_OnSetFocus+0x1a>
 8020298:	698b      	ldr	r3, [r1, #24]
 802029a:	4283      	cmp	r3, r0
 802029c:	d11c      	bne.n	80202d8 <CoreGroup_OnSetFocus+0x48>
  if (( value != 0 ) && !(( value->viewState & ( CoreViewStateEnabled | CoreViewStateFocusable )) 
 802029e:	6a0b      	ldr	r3, [r1, #32]
 80202a0:	f003 0214 	and.w	r2, r3, #20
 80202a4:	2a14      	cmp	r2, #20
 80202a6:	d01f      	beq.n	80202e8 <CoreGroup_OnSetFocus+0x58>
    value = 0;
 80202a8:	2400      	movs	r4, #0
  if ( value == _this->Focus )
 80202aa:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80202ac:	42a0      	cmp	r0, r4
 80202ae:	d01a      	beq.n	80202e6 <CoreGroup_OnSetFocus+0x56>
  if ( _this->Focus != 0 )
 80202b0:	b120      	cbz	r0, 80202bc <CoreGroup_OnSetFocus+0x2c>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202b2:	6803      	ldr	r3, [r0, #0]
 80202b4:	2260      	movs	r2, #96	; 0x60
 80202b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80202b8:	2100      	movs	r1, #0
 80202ba:	4798      	blx	r3
  _this->Focus = value;
 80202bc:	652c      	str	r4, [r5, #80]	; 0x50
  if ( value != 0 )
 80202be:	b194      	cbz	r4, 80202e6 <CoreGroup_OnSetFocus+0x56>
    if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ))
 80202c0:	6a2a      	ldr	r2, [r5, #32]
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202c2:	6823      	ldr	r3, [r4, #0]
    if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ))
 80202c4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80202c8:	d013      	beq.n	80202f2 <CoreGroup_OnSetFocus+0x62>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202ca:	4620      	mov	r0, r4
 80202cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80202ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202d2:	2200      	movs	r2, #0
 80202d4:	2160      	movs	r1, #96	; 0x60
 80202d6:	4718      	bx	r3
    EwThrow( EwLoadString( &_Const0002 ));
 80202d8:	4809      	ldr	r0, [pc, #36]	; (8020300 <CoreGroup_OnSetFocus+0x70>)
 80202da:	f7fc f8a9 	bl	801c430 <EwLoadString>
}
 80202de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    EwThrow( EwLoadString( &_Const0002 ));
 80202e2:	f7f8 bcd5 	b.w	8018c90 <EwThrow>
}
 80202e6:	bd70      	pop	{r4, r5, r6, pc}
    value = 0;
 80202e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80202ec:	bf18      	it	ne
 80202ee:	2400      	movne	r4, #0
 80202f0:	e7db      	b.n	80202aa <CoreGroup_OnSetFocus+0x1a>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202f2:	4620      	mov	r0, r4
 80202f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80202f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80202fa:	2120      	movs	r1, #32
 80202fc:	4718      	bx	r3
 80202fe:	bf00      	nop
 8020300:	08037aac 	.word	0x08037aac

08020304 <CoreRoot_OnSetFocus>:
    CoreGroup_OnSetFocus((CoreGroup)_this, value );
 8020304:	f7ff bfc4 	b.w	8020290 <CoreGroup_OnSetFocus>

08020308 <CoreOutline_OnSetBounds>:
{
 8020308:	b084      	sub	sp, #16
 802030a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802030e:	b093      	sub	sp, #76	; 0x4c
 8020310:	ac1b      	add	r4, sp, #108	; 0x6c
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 8020312:	f100 0628 	add.w	r6, r0, #40	; 0x28
{
 8020316:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 802031a:	4605      	mov	r5, r0
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 802031c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8020320:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8020324:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8020328:	f7f9 fdf1 	bl	8019f0e <EwCompRect>
 802032c:	b920      	cbnz	r0, 8020338 <CoreOutline_OnSetBounds+0x30>
}
 802032e:	b013      	add	sp, #76	; 0x4c
 8020330:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020334:	b004      	add	sp, #16
 8020336:	4770      	bx	lr
  oldSize = EwGetRectSize( _this->Super1.Bounds );
 8020338:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802033a:	9300      	str	r3, [sp, #0]
 802033c:	af04      	add	r7, sp, #16
 802033e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8020342:	4638      	mov	r0, r7
 8020344:	f7f9 ff5b 	bl	801a1fe <EwGetRectSize>
  newSize = EwGetRectSize( value );
 8020348:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802034a:	9300      	str	r3, [sp, #0]
 802034c:	f10d 0818 	add.w	r8, sp, #24
 8020350:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8020354:	4640      	mov	r0, r8
 8020356:	f7f9 ff52 	bl	801a1fe <EwGetRectSize>
  resize = (XBool)EwCompPoint( oldSize, newSize );
 802035a:	e898 000c 	ldmia.w	r8, {r2, r3}
 802035e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8020362:	f7f9 fd42 	bl	8019dea <EwCompPoint>
  offset = EwMovePointNeg( value.Point1, _this->Super1.Bounds.Point1 );
 8020366:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8020368:	9300      	str	r3, [sp, #0]
 802036a:	af08      	add	r7, sp, #32
 802036c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020370:	6aab      	ldr	r3, [r5, #40]	; 0x28
  resize = (XBool)EwCompPoint( oldSize, newSize );
 8020372:	4680      	mov	r8, r0
  offset = EwMovePointNeg( value.Point1, _this->Super1.Bounds.Point1 );
 8020374:	4638      	mov	r0, r7
 8020376:	f7f9 fd57 	bl	8019e28 <EwMovePointNeg>
  if ( EwCompPoint( offset, _Const0000 ) && !resize )
 802037a:	4b44      	ldr	r3, [pc, #272]	; (802048c <CoreOutline_OnSetBounds+0x184>)
 802037c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8020380:	cb0c      	ldmia	r3, {r2, r3}
  resize = (XBool)EwCompPoint( oldSize, newSize );
 8020382:	fa5f f888 	uxtb.w	r8, r8
  if ( EwCompPoint( offset, _Const0000 ) && !resize )
 8020386:	f7f9 fd30 	bl	8019dea <EwCompPoint>
 802038a:	b340      	cbz	r0, 80203de <CoreOutline_OnSetBounds+0xd6>
 802038c:	f1b8 0f00 	cmp.w	r8, #0
 8020390:	d128      	bne.n	80203e4 <CoreOutline_OnSetBounds+0xdc>
    CoreView view = _this->Super2.next;
 8020392:	692e      	ldr	r6, [r5, #16]
    while (( view != 0 ) && !(( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8020394:	b1be      	cbz	r6, 80203c6 <CoreOutline_OnSetBounds+0xbe>
 8020396:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802039a:	e00e      	b.n	80203ba <CoreOutline_OnSetBounds+0xb2>
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 802039c:	0550      	lsls	r0, r2, #21
 802039e:	d50a      	bpl.n	80203b6 <CoreOutline_OnSetBounds+0xae>
 80203a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80203a4:	e888 0003 	stmia.w	r8, {r0, r1}
  ((CoreView)_this)->_.VMT->MoveView((CoreView)_this, aOffset, aFastMove );
 80203a8:	6830      	ldr	r0, [r6, #0]
 80203aa:	e898 0006 	ldmia.w	r8, {r1, r2}
 80203ae:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 80203b2:	4630      	mov	r0, r6
 80203b4:	47c8      	blx	r9
      view = view->next;
 80203b6:	6936      	ldr	r6, [r6, #16]
    while (( view != 0 ) && !(( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80203b8:	b12e      	cbz	r6, 80203c6 <CoreOutline_OnSetBounds+0xbe>
 80203ba:	6a32      	ldr	r2, [r6, #32]
 80203bc:	f412 7f00 	tst.w	r2, #512	; 0x200
  ((CoreView)_this)->_.VMT->MoveView((CoreView)_this, aOffset, aFastMove );
 80203c0:	f3c2 2300 	ubfx	r3, r2, #8, #1
    while (( view != 0 ) && !(( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80203c4:	d0ea      	beq.n	802039c <CoreOutline_OnSetBounds+0x94>
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 80203c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203c8:	9300      	str	r3, [sp, #0]
 80203ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80203ce:	4628      	mov	r0, r5
 80203d0:	f7ff fd08 	bl	801fde4 <CoreRectView_OnSetBounds>
}
 80203d4:	b013      	add	sp, #76	; 0x4c
 80203d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80203da:	b004      	add	sp, #16
 80203dc:	4770      	bx	lr
  if (( resize && ( oldSize.X > 0 )) && ( oldSize.Y > 0 ))
 80203de:	f1b8 0f00 	cmp.w	r8, #0
 80203e2:	d0f0      	beq.n	80203c6 <CoreOutline_OnSetBounds+0xbe>
 80203e4:	9b04      	ldr	r3, [sp, #16]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	dd2b      	ble.n	8020442 <CoreOutline_OnSetBounds+0x13a>
 80203ea:	9b05      	ldr	r3, [sp, #20]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	dd28      	ble.n	8020442 <CoreOutline_OnSetBounds+0x13a>
    XRect bounds = _this->Super1.Bounds;
 80203f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    CoreView view = _this->Super2.next;
 80203f4:	692e      	ldr	r6, [r5, #16]
    XRect bounds = _this->Super1.Bounds;
 80203f6:	af0a      	add	r7, sp, #40	; 0x28
 80203f8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    while (( view != 0 ) && !(( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80203fc:	b30e      	cbz	r6, 8020442 <CoreOutline_OnSetBounds+0x13a>
 80203fe:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8020402:	e01a      	b.n	802043a <CoreOutline_OnSetBounds+0x132>
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8020404:	0559      	lsls	r1, r3, #21
 8020406:	d516      	bpl.n	8020436 <CoreOutline_OnSetBounds+0x12e>
        if (( view->layoutContext != 0 ) && ( view->layoutContext->outline != _this ))
 8020408:	69f3      	ldr	r3, [r6, #28]
 802040a:	b11b      	cbz	r3, 8020414 <CoreOutline_OnSetBounds+0x10c>
 802040c:	691b      	ldr	r3, [r3, #16]
 802040e:	42ab      	cmp	r3, r5
 8020410:	d011      	beq.n	8020436 <CoreOutline_OnSetBounds+0x12e>
          view->layoutContext = 0;
 8020412:	61f2      	str	r2, [r6, #28]
        if (( view->layoutContext == 0 ) && ( view->Layout != ( CoreLayoutAlignToLeft 
 8020414:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020416:	2b14      	cmp	r3, #20
 8020418:	d00d      	beq.n	8020436 <CoreOutline_OnSetBounds+0x12e>
 802041a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 802041e:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
  ((CoreView)_this)->_.VMT->initLayoutContext((CoreView)_this, aBounds, aOutline );
 8020422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020424:	6833      	ldr	r3, [r6, #0]
 8020426:	e9cd 2500 	strd	r2, r5, [sp]
 802042a:	4630      	mov	r0, r6
 802042c:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
 8020430:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8020434:	47c8      	blx	r9
      view = view->next;
 8020436:	6936      	ldr	r6, [r6, #16]
    while (( view != 0 ) && !(( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8020438:	b11e      	cbz	r6, 8020442 <CoreOutline_OnSetBounds+0x13a>
 802043a:	6a33      	ldr	r3, [r6, #32]
 802043c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
 8020440:	d0e0      	beq.n	8020404 <CoreOutline_OnSetBounds+0xfc>
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 8020442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020444:	9300      	str	r3, [sp, #0]
 8020446:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 802044a:	4628      	mov	r0, r5
 802044c:	f7ff fcca 	bl	801fde4 <CoreRectView_OnSetBounds>
  if (( _this->Super2.Owner != 0 ) && resize )
 8020450:	69a9      	ldr	r1, [r5, #24]
 8020452:	2900      	cmp	r1, #0
 8020454:	f43f af6b 	beq.w	802032e <CoreOutline_OnSetBounds+0x26>
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdateLayout;
 8020458:	6a2b      	ldr	r3, [r5, #32]
    if ( !(( _this->Super2.Owner->Super2.viewState & CoreViewStateUpdatingLayout ) 
 802045a:	6a0a      	ldr	r2, [r1, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdateLayout;
 802045c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020460:	622b      	str	r3, [r5, #32]
    if ( !(( _this->Super2.Owner->Super2.viewState & CoreViewStateUpdatingLayout ) 
 8020462:	0493      	lsls	r3, r2, #18
 8020464:	f53f af63 	bmi.w	802032e <CoreOutline_OnSetBounds+0x26>
      EwPostSignal( EwNewSlot( _this->Super2.Owner, CoreGroup_updateComponent ), 
 8020468:	ac0e      	add	r4, sp, #56	; 0x38
      | CoreViewStatePendingLayout;
 802046a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
      _this->Super2.Owner->Super2.viewState = _this->Super2.Owner->Super2.viewState 
 802046e:	620a      	str	r2, [r1, #32]
      EwPostSignal( EwNewSlot( _this->Super2.Owner, CoreGroup_updateComponent ), 
 8020470:	4620      	mov	r0, r4
 8020472:	4a07      	ldr	r2, [pc, #28]	; (8020490 <CoreOutline_OnSetBounds+0x188>)
 8020474:	f7fa feae 	bl	801b1d4 <EwNewSlot>
 8020478:	e894 0003 	ldmia.w	r4, {r0, r1}
 802047c:	462a      	mov	r2, r5
}
 802047e:	b013      	add	sp, #76	; 0x4c
 8020480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020484:	b004      	add	sp, #16
      EwPostSignal( EwNewSlot( _this->Super2.Owner, CoreGroup_updateComponent ), 
 8020486:	f7fa bed3 	b.w	801b230 <EwPostSignal>
 802048a:	bf00      	nop
 802048c:	08037aa4 	.word	0x08037aa4
 8020490:	08021fe9 	.word	0x08021fe9

08020494 <CoreEvent__Init>:
{
 8020494:	b510      	push	{r4, lr}
 8020496:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8020498:	f7f9 f8d0 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreEvent );
 802049c:	4b03      	ldr	r3, [pc, #12]	; (80204ac <CoreEvent__Init+0x18>)
 802049e:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreEvent );
 80204a0:	6023      	str	r3, [r4, #0]
  ticksCount = (XUInt32)EwGetTicks();
 80204a2:	f009 f98b 	bl	80297bc <EwGetTicks>
  _this->Time = CoreEvent_GetCurrentTime( _this );
 80204a6:	6120      	str	r0, [r4, #16]
}
 80204a8:	bd10      	pop	{r4, pc}
 80204aa:	bf00      	nop
 80204ac:	08037c5c 	.word	0x08037c5c

080204b0 <CoreKeyEvent__Init>:
{
 80204b0:	b510      	push	{r4, lr}
 80204b2:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 80204b4:	f7f9 f8c2 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreEvent );
 80204b8:	4b04      	ldr	r3, [pc, #16]	; (80204cc <CoreKeyEvent__Init+0x1c>)
 80204ba:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreEvent );
 80204bc:	6023      	str	r3, [r4, #0]
  ticksCount = (XUInt32)EwGetTicks();
 80204be:	f009 f97d 	bl	80297bc <EwGetTicks>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreKeyEvent );
 80204c2:	4b03      	ldr	r3, [pc, #12]	; (80204d0 <CoreKeyEvent__Init+0x20>)
  _this->_.VMT = EW_CLASS( CoreKeyEvent );
 80204c4:	6023      	str	r3, [r4, #0]
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreKeyEvent );
 80204c6:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 80204ca:	bd10      	pop	{r4, pc}
 80204cc:	08037c5c 	.word	0x08037c5c
 80204d0:	08037d14 	.word	0x08037d14

080204d4 <CoreCursorGrabEvent__Init>:
{
 80204d4:	b510      	push	{r4, lr}
 80204d6:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 80204d8:	f7f9 f8b0 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreEvent );
 80204dc:	4b04      	ldr	r3, [pc, #16]	; (80204f0 <CoreCursorGrabEvent__Init+0x1c>)
 80204de:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreEvent );
 80204e0:	6023      	str	r3, [r4, #0]
  ticksCount = (XUInt32)EwGetTicks();
 80204e2:	f009 f96b 	bl	80297bc <EwGetTicks>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreCursorGrabEvent );
 80204e6:	4b03      	ldr	r3, [pc, #12]	; (80204f4 <CoreCursorGrabEvent__Init+0x20>)
  _this->_.VMT = EW_CLASS( CoreCursorGrabEvent );
 80204e8:	6023      	str	r3, [r4, #0]
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreCursorGrabEvent );
 80204ea:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 80204ee:	bd10      	pop	{r4, pc}
 80204f0:	08037c5c 	.word	0x08037c5c
 80204f4:	08037b6c 	.word	0x08037b6c

080204f8 <CoreCursorEvent__Init>:
{
 80204f8:	b510      	push	{r4, lr}
 80204fa:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 80204fc:	f7f9 f89e 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreEvent );
 8020500:	4b04      	ldr	r3, [pc, #16]	; (8020514 <CoreCursorEvent__Init+0x1c>)
 8020502:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreEvent );
 8020504:	6023      	str	r3, [r4, #0]
  ticksCount = (XUInt32)EwGetTicks();
 8020506:	f009 f959 	bl	80297bc <EwGetTicks>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreCursorEvent );
 802050a:	4b03      	ldr	r3, [pc, #12]	; (8020518 <CoreCursorEvent__Init+0x20>)
  _this->_.VMT = EW_CLASS( CoreCursorEvent );
 802050c:	6023      	str	r3, [r4, #0]
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreCursorEvent );
 802050e:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8020512:	bd10      	pop	{r4, pc}
 8020514:	08037c5c 	.word	0x08037c5c
 8020518:	08037b30 	.word	0x08037b30

0802051c <CoreDragEvent__Init>:
{
 802051c:	b510      	push	{r4, lr}
 802051e:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8020520:	f7f9 f88c 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreEvent );
 8020524:	4b04      	ldr	r3, [pc, #16]	; (8020538 <CoreDragEvent__Init+0x1c>)
 8020526:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreEvent );
 8020528:	6023      	str	r3, [r4, #0]
  ticksCount = (XUInt32)EwGetTicks();
 802052a:	f009 f947 	bl	80297bc <EwGetTicks>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreDragEvent );
 802052e:	4b03      	ldr	r3, [pc, #12]	; (802053c <CoreDragEvent__Init+0x20>)
  _this->_.VMT = EW_CLASS( CoreDragEvent );
 8020530:	6023      	str	r3, [r4, #0]
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreDragEvent );
 8020532:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8020536:	bd10      	pop	{r4, pc}
 8020538:	08037c5c 	.word	0x08037c5c
 802053c:	08037c20 	.word	0x08037c20

08020540 <CoreResource__Done>:
  if ( _this->resource != 0 )
 8020540:	6903      	ldr	r3, [r0, #16]
{
 8020542:	b510      	push	{r4, lr}
 8020544:	4604      	mov	r4, r0
  if ( _this->resource != 0 )
 8020546:	b943      	cbnz	r3, 802055a <CoreResource__Done+0x1a>
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8020548:	4b05      	ldr	r3, [pc, #20]	; (8020560 <CoreResource__Done+0x20>)
 802054a:	6023      	str	r3, [r4, #0]
  _this->resource = 0;
 802054c:	2200      	movs	r2, #0
 802054e:	6122      	str	r2, [r4, #16]
  XObject__Done( &_this->_.Super );
 8020550:	4620      	mov	r0, r4
}
 8020552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  XObject__Done( &_this->_.Super );
 8020556:	f7f9 b878 	b.w	801964a <XObject__Done>
      EwDeregisterResource((XObject)this );
 802055a:	f7f9 ffcb 	bl	801a4f4 <EwDeregisterResource>
 802055e:	e7f3      	b.n	8020548 <CoreResource__Done+0x8>
 8020560:	08036b2c 	.word	0x08036b2c

08020564 <CoreResource__Init>:
{
 8020564:	b538      	push	{r3, r4, r5, lr}
 8020566:	4604      	mov	r4, r0
 8020568:	4615      	mov	r5, r2
  XObject__Init( &_this->_.Super, aLink, aArg );
 802056a:	f7f9 f867 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreResource );
 802056e:	4b06      	ldr	r3, [pc, #24]	; (8020588 <CoreResource__Init+0x24>)
 8020570:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( CoreResource );
 8020572:	6023      	str	r3, [r4, #0]
    if ( aArg )
 8020574:	b90d      	cbnz	r5, 802057a <CoreResource__Init+0x16>
  _this->resource = aArg;
 8020576:	6125      	str	r5, [r4, #16]
}
 8020578:	bd38      	pop	{r3, r4, r5, pc}
      EwRegisterResource((XObject)this, (const void*)aArg );
 802057a:	4629      	mov	r1, r5
 802057c:	4620      	mov	r0, r4
 802057e:	f7f9 ff75 	bl	801a46c <EwRegisterResource>
  _this->resource = aArg;
 8020582:	6125      	str	r5, [r4, #16]
}
 8020584:	bd38      	pop	{r3, r4, r5, pc}
 8020586:	bf00      	nop
 8020588:	08037f2c 	.word	0x08037f2c

0802058c <CoreTimer__Done>:
{
 802058c:	b510      	push	{r4, lr}
 802058e:	4604      	mov	r4, r0
  XHandle tmp = _this->timer;
 8020590:	6980      	ldr	r0, [r0, #24]
  if ( tmp != 0 )
 8020592:	b940      	cbnz	r0, 80205a6 <CoreTimer__Done+0x1a>
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8020594:	4b05      	ldr	r3, [pc, #20]	; (80205ac <CoreTimer__Done+0x20>)
 8020596:	6023      	str	r3, [r4, #0]
  _this->timer = 0;
 8020598:	2200      	movs	r2, #0
 802059a:	61a2      	str	r2, [r4, #24]
  XObject__Done( &_this->_.Super );
 802059c:	4620      	mov	r0, r4
}
 802059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  XObject__Done( &_this->_.Super );
 80205a2:	f7f9 b852 	b.w	801964a <XObject__Done>
    EwDestroyTimer((XTimer*)tmp );
 80205a6:	f7fc fdc0 	bl	801d12a <EwDestroyTimer>
 80205aa:	e7f3      	b.n	8020594 <CoreTimer__Done+0x8>
 80205ac:	08036b2c 	.word	0x08036b2c

080205b0 <CoreRoot__Done>:
{
 80205b0:	b510      	push	{r4, lr}
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 80205b2:	4b06      	ldr	r3, [pc, #24]	; (80205cc <CoreRoot__Done+0x1c>)
{
 80205b4:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 80205b6:	f840 3b88 	str.w	r3, [r0], #136
  CoreTimer__Done( &_this->cursorHoldTimer );
 80205ba:	f7ff ffe7 	bl	802058c <CoreTimer__Done>
  _this->_.Super._.VMT = EW_CLASS( XObject );
 80205be:	4b04      	ldr	r3, [pc, #16]	; (80205d0 <CoreRoot__Done+0x20>)
 80205c0:	6023      	str	r3, [r4, #0]
  XObject__Done( &_this->_.Super );
 80205c2:	4620      	mov	r0, r4
}
 80205c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  XObject__Done( &_this->_.Super );
 80205c8:	f7f9 b83f 	b.w	801964a <XObject__Done>
 80205cc:	08037c98 	.word	0x08037c98
 80205d0:	08036b2c 	.word	0x08036b2c

080205d4 <CoreRoot_OnSetOpacity>:
{
 80205d4:	b570      	push	{r4, r5, r6, lr}
 80205d6:	4604      	mov	r4, r0
 80205d8:	b08a      	sub	sp, #40	; 0x28
  XInt32 oldValue = _this->Super1.Opacity;
 80205da:	6d45      	ldr	r5, [r0, #84]	; 0x54
  CoreGroup_OnSetOpacity((CoreGroup)_this, value );
 80205dc:	f7fe ff9c 	bl	801f518 <CoreGroup_OnSetOpacity>
  if ((( oldValue != _this->Super1.Opacity ) && ( _this->Super3.Owner == 0 )) && 
 80205e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80205e2:	42ab      	cmp	r3, r5
 80205e4:	d001      	beq.n	80205ea <CoreRoot_OnSetOpacity+0x16>
 80205e6:	69a3      	ldr	r3, [r4, #24]
 80205e8:	b10b      	cbz	r3, 80205ee <CoreRoot_OnSetOpacity+0x1a>
}
 80205ea:	b00a      	add	sp, #40	; 0x28
 80205ec:	bd70      	pop	{r4, r5, r6, pc}
      (( _this->Super3.viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 80205ee:	6a23      	ldr	r3, [r4, #32]
  if ((( oldValue != _this->Super1.Opacity ) && ( _this->Super3.Owner == 0 )) && 
 80205f0:	07db      	lsls	r3, r3, #31
 80205f2:	d5fa      	bpl.n	80205ea <CoreRoot_OnSetOpacity+0x16>
    CoreGroup__InvalidateArea( _this, EwGetRectORect( _this->Super2.Bounds ));
 80205f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80205f6:	9300      	str	r3, [sp, #0]
 80205f8:	ad06      	add	r5, sp, #24
 80205fa:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80205fe:	4628      	mov	r0, r5
 8020600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020602:	f7f9 fe0b 	bl	801a21c <EwGetRectORect>
 8020606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802060a:	ad02      	add	r5, sp, #8
 802060c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8020610:	6823      	ldr	r3, [r4, #0]
 8020612:	9a05      	ldr	r2, [sp, #20]
 8020614:	9200      	str	r2, [sp, #0]
 8020616:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8020618:	4620      	mov	r0, r4
 802061a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802061e:	47b0      	blx	r6
}
 8020620:	e7e3      	b.n	80205ea <CoreRoot_OnSetOpacity+0x16>
 8020622:	bf00      	nop

08020624 <CoreGroup_FindSiblingView.part.0>:
CoreView CoreGroup_FindSiblingView( CoreGroup _this, CoreView aView, XSet aFilter )
 8020624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  prevView = aView->prev;
 8020626:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    notFilter = 0;
 802062a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
CoreView CoreGroup_FindSiblingView( CoreGroup _this, CoreView aView, XSet aFilter )
 802062e:	460e      	mov	r6, r1
    notFilter = 0;
 8020630:	bf0c      	ite	eq
 8020632:	f44f 3780 	moveq.w	r7, #65536	; 0x10000
 8020636:	2700      	movne	r7, #0
  while (( nextView != 0 ) || ( prevView != 0 ))
 8020638:	b34c      	cbz	r4, 802068e <CoreGroup_FindSiblingView.part.0+0x6a>
    if ((( nextView != 0 ) && ( !aFilter || EwSetContains( nextView->viewState, 
 802063a:	b99e      	cbnz	r6, 8020664 <CoreGroup_FindSiblingView.part.0+0x40>
        aFilter ))) && ( !notFilter || !EwSetContains( nextView->viewState, notFilter )))
 802063c:	2f00      	cmp	r7, #0
 802063e:	d034      	beq.n	80206aa <CoreGroup_FindSiblingView.part.0+0x86>
 8020640:	6a20      	ldr	r0, [r4, #32]
 8020642:	4639      	mov	r1, r7
 8020644:	f7fa f954 	bl	801a8f0 <EwSetContains>
 8020648:	2800      	cmp	r0, #0
 802064a:	d02e      	beq.n	80206aa <CoreGroup_FindSiblingView.part.0+0x86>
    if ((( prevView != 0 ) && ( !aFilter || EwSetContains( prevView->viewState, 
 802064c:	b345      	cbz	r5, 80206a0 <CoreGroup_FindSiblingView.part.0+0x7c>
 802064e:	b986      	cbnz	r6, 8020672 <CoreGroup_FindSiblingView.part.0+0x4e>
        aFilter ))) && ( !notFilter || !EwSetContains( prevView->viewState, notFilter )))
 8020650:	6a28      	ldr	r0, [r5, #32]
 8020652:	4639      	mov	r1, r7
 8020654:	f7fa f94c 	bl	801a8f0 <EwSetContains>
 8020658:	b1f8      	cbz	r0, 802069a <CoreGroup_FindSiblingView.part.0+0x76>
      nextView = nextView->next;
 802065a:	6924      	ldr	r4, [r4, #16]
      prevView = prevView->prev;
 802065c:	696d      	ldr	r5, [r5, #20]
  while (( nextView != 0 ) || ( prevView != 0 ))
 802065e:	2c00      	cmp	r4, #0
 8020660:	d1eb      	bne.n	802063a <CoreGroup_FindSiblingView.part.0+0x16>
 8020662:	e014      	b.n	802068e <CoreGroup_FindSiblingView.part.0+0x6a>
    if ((( nextView != 0 ) && ( !aFilter || EwSetContains( nextView->viewState, 
 8020664:	6a20      	ldr	r0, [r4, #32]
 8020666:	4631      	mov	r1, r6
 8020668:	f7fa f942 	bl	801a8f0 <EwSetContains>
 802066c:	2800      	cmp	r0, #0
 802066e:	d1e5      	bne.n	802063c <CoreGroup_FindSiblingView.part.0+0x18>
    if ((( prevView != 0 ) && ( !aFilter || EwSetContains( prevView->viewState, 
 8020670:	b1b5      	cbz	r5, 80206a0 <CoreGroup_FindSiblingView.part.0+0x7c>
 8020672:	6a28      	ldr	r0, [r5, #32]
 8020674:	4631      	mov	r1, r6
 8020676:	f7fa f93b 	bl	801a8f0 <EwSetContains>
 802067a:	b128      	cbz	r0, 8020688 <CoreGroup_FindSiblingView.part.0+0x64>
        aFilter ))) && ( !notFilter || !EwSetContains( prevView->viewState, notFilter )))
 802067c:	b16f      	cbz	r7, 802069a <CoreGroup_FindSiblingView.part.0+0x76>
 802067e:	6a28      	ldr	r0, [r5, #32]
 8020680:	4639      	mov	r1, r7
 8020682:	f7fa f935 	bl	801a8f0 <EwSetContains>
 8020686:	b140      	cbz	r0, 802069a <CoreGroup_FindSiblingView.part.0+0x76>
    if ( nextView != 0 )
 8020688:	2c00      	cmp	r4, #0
 802068a:	d1e6      	bne.n	802065a <CoreGroup_FindSiblingView.part.0+0x36>
      prevView = prevView->prev;
 802068c:	696d      	ldr	r5, [r5, #20]
  while (( nextView != 0 ) || ( prevView != 0 ))
 802068e:	b15d      	cbz	r5, 80206a8 <CoreGroup_FindSiblingView.part.0+0x84>
    if ((( prevView != 0 ) && ( !aFilter || EwSetContains( prevView->viewState, 
 8020690:	2400      	movs	r4, #0
 8020692:	2e00      	cmp	r6, #0
 8020694:	d1ed      	bne.n	8020672 <CoreGroup_FindSiblingView.part.0+0x4e>
        aFilter ))) && ( !notFilter || !EwSetContains( prevView->viewState, notFilter )))
 8020696:	2f00      	cmp	r7, #0
 8020698:	d1f1      	bne.n	802067e <CoreGroup_FindSiblingView.part.0+0x5a>
 802069a:	462c      	mov	r4, r5
}
 802069c:	4620      	mov	r0, r4
 802069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      nextView = nextView->next;
 80206a0:	6924      	ldr	r4, [r4, #16]
  while (( nextView != 0 ) || ( prevView != 0 ))
 80206a2:	2500      	movs	r5, #0
 80206a4:	2c00      	cmp	r4, #0
 80206a6:	d1c8      	bne.n	802063a <CoreGroup_FindSiblingView.part.0+0x16>
  return 0;
 80206a8:	2400      	movs	r4, #0
}
 80206aa:	4620      	mov	r0, r4
 80206ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206ae:	bf00      	nop

080206b0 <CoreView_ChangeViewState>:
{
 80206b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((( _this->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80206b4:	6a06      	ldr	r6, [r0, #32]
{
 80206b6:	4605      	mov	r5, r0
  if ((( _this->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80206b8:	05b0      	lsls	r0, r6, #22
  newState = ( _this->viewState & ~aClearState ) | aSetState;
 80206ba:	ea26 0202 	bic.w	r2, r6, r2
    aSetState = aSetState & ~CoreViewStateEmbedded;
 80206be:	bf48      	it	mi
 80206c0:	f421 6180 	bicmi.w	r1, r1, #1024	; 0x400
  if (( _this->Owner != 0 ) && !!( deltaState & ( CoreViewStateEnabled | CoreViewStateFocusable )))
 80206c4:	69af      	ldr	r7, [r5, #24]
  newState = ( _this->viewState & ~aClearState ) | aSetState;
 80206c6:	ea42 0401 	orr.w	r4, r2, r1
{
 80206ca:	b08c      	sub	sp, #48	; 0x30
  deltaState = newState ^ _this->viewState;
 80206cc:	4066      	eors	r6, r4
  _this->viewState = newState;
 80206ce:	622c      	str	r4, [r5, #32]
  if (( _this->Owner != 0 ) && !!( deltaState & ( CoreViewStateEnabled | CoreViewStateFocusable )))
 80206d0:	2f00      	cmp	r7, #0
 80206d2:	d04a      	beq.n	802076a <CoreView_ChangeViewState+0xba>
 80206d4:	f016 0f14 	tst.w	r6, #20
 80206d8:	d006      	beq.n	80206e8 <CoreView_ChangeViewState+0x38>
    XBool focusable = (( _this->viewState & ( CoreViewStateEnabled | CoreViewStateFocusable )) 
 80206da:	f004 0314 	and.w	r3, r4, #20
    if ( focusable && ( _this->Owner->Focus == 0 ))
 80206de:	2b14      	cmp	r3, #20
 80206e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80206e2:	d05c      	beq.n	802079e <CoreView_ChangeViewState+0xee>
    if ( !focusable && ( _this->Owner->Focus == _this ))
 80206e4:	42ab      	cmp	r3, r5
 80206e6:	d066      	beq.n	80207b6 <CoreView_ChangeViewState+0x106>
  if (( _this->Owner != 0 ) && !!( deltaState & ( CoreViewStateAlphaBlended | CoreViewStateEmbedded 
 80206e8:	f240 4303 	movw	r3, #1027	; 0x403
 80206ec:	421e      	tst	r6, r3
 80206ee:	d120      	bne.n	8020732 <CoreView_ChangeViewState+0x82>
  if (((( _this->layoutContext != 0 ) && ( _this->Owner != 0 )) && (( newState & 
 80206f0:	69eb      	ldr	r3, [r5, #28]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d05b      	beq.n	80207ae <CoreView_ChangeViewState+0xfe>
 80206f6:	0561      	lsls	r1, r4, #21
 80206f8:	d501      	bpl.n	80206fe <CoreView_ChangeViewState+0x4e>
      CoreViewStateEmbedded ) == CoreViewStateEmbedded )) && (( deltaState & CoreViewStateVisible ) 
 80206fa:	07f2      	lsls	r2, r6, #31
 80206fc:	d438      	bmi.n	8020770 <CoreView_ChangeViewState+0xc0>
  if (( _this->Owner != 0 ) && (( deltaState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 80206fe:	4639      	mov	r1, r7
 8020700:	0573      	lsls	r3, r6, #21
 8020702:	d532      	bpl.n	802076a <CoreView_ChangeViewState+0xba>
    _this->viewState = _this->viewState | CoreViewStateRequestLayout;
 8020704:	6a2b      	ldr	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020706:	4a32      	ldr	r2, [pc, #200]	; (80207d0 <CoreView_ChangeViewState+0x120>)
    _this->viewState = _this->viewState | CoreViewStateRequestLayout;
 8020708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802070c:	622b      	str	r3, [r5, #32]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 802070e:	6a0b      	ldr	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020710:	ac08      	add	r4, sp, #32
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 8020712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    _this->layoutContext = 0;
 8020716:	2000      	movs	r0, #0
 8020718:	61e8      	str	r0, [r5, #28]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 802071a:	620b      	str	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802071c:	4620      	mov	r0, r4
 802071e:	f7fa fd59 	bl	801b1d4 <EwNewSlot>
 8020722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8020726:	462a      	mov	r2, r5
}
 8020728:	b00c      	add	sp, #48	; 0x30
 802072a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802072e:	f7fa bd7f 	b.w	801b230 <EwPostSignal>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8020732:	682b      	ldr	r3, [r5, #0]
 8020734:	f10d 0810 	add.w	r8, sp, #16
 8020738:	4640      	mov	r0, r8
 802073a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802073c:	4629      	mov	r1, r5
 802073e:	4798      	blx	r3
 8020740:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8020744:	f10d 0c20 	add.w	ip, sp, #32
 8020748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 802074c:	683b      	ldr	r3, [r7, #0]
 802074e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020750:	9200      	str	r2, [sp, #0]
 8020752:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 8020756:	4638      	mov	r0, r7
 8020758:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 802075c:	47c0      	blx	r8
  if (((( _this->layoutContext != 0 ) && ( _this->Owner != 0 )) && (( newState & 
 802075e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 8020762:	4639      	mov	r1, r7
 8020764:	b1c3      	cbz	r3, 8020798 <CoreView_ChangeViewState+0xe8>
 8020766:	2f00      	cmp	r7, #0
 8020768:	d1c5      	bne.n	80206f6 <CoreView_ChangeViewState+0x46>
}
 802076a:	b00c      	add	sp, #48	; 0x30
 802076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _this->viewState = _this->viewState | CoreViewStateRequestLayout;
 8020770:	6a2b      	ldr	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020772:	4a17      	ldr	r2, [pc, #92]	; (80207d0 <CoreView_ChangeViewState+0x120>)
    _this->viewState = _this->viewState | CoreViewStateRequestLayout;
 8020774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020778:	622b      	str	r3, [r5, #32]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 802077a:	6a3b      	ldr	r3, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802077c:	ac02      	add	r4, sp, #8
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 802077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020782:	623b      	str	r3, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020784:	4639      	mov	r1, r7
 8020786:	4620      	mov	r0, r4
 8020788:	f7fa fd24 	bl	801b1d4 <EwNewSlot>
 802078c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8020790:	462a      	mov	r2, r5
 8020792:	f7fa fd4d 	bl	801b230 <EwPostSignal>
 8020796:	69a9      	ldr	r1, [r5, #24]
  if (( _this->Owner != 0 ) && (( deltaState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8020798:	2900      	cmp	r1, #0
 802079a:	d1b1      	bne.n	8020700 <CoreView_ChangeViewState+0x50>
 802079c:	e7e5      	b.n	802076a <CoreView_ChangeViewState+0xba>
    if ( focusable && ( _this->Owner->Focus == 0 ))
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d1a2      	bne.n	80206e8 <CoreView_ChangeViewState+0x38>
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 80207a2:	683b      	ldr	r3, [r7, #0]
 80207a4:	4638      	mov	r0, r7
 80207a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207a8:	4629      	mov	r1, r5
 80207aa:	4798      	blx	r3
}
 80207ac:	e00c      	b.n	80207c8 <CoreView_ChangeViewState+0x118>
 80207ae:	4639      	mov	r1, r7
  if (( _this->Owner != 0 ) && (( deltaState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 80207b0:	2900      	cmp	r1, #0
 80207b2:	d1a5      	bne.n	8020700 <CoreView_ChangeViewState+0x50>
 80207b4:	e7d9      	b.n	802076a <CoreView_ChangeViewState+0xba>
  if (( aView == 0 ) || ( aView->Owner != _this ))
 80207b6:	2114      	movs	r1, #20
 80207b8:	4628      	mov	r0, r5
 80207ba:	f7ff ff33 	bl	8020624 <CoreGroup_FindSiblingView.part.0>
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 80207be:	683b      	ldr	r3, [r7, #0]
 80207c0:	4601      	mov	r1, r0
 80207c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207c4:	4638      	mov	r0, r7
 80207c6:	4798      	blx	r3
  if (( _this->Owner != 0 ) && !!( deltaState & ( CoreViewStateAlphaBlended | CoreViewStateEmbedded 
 80207c8:	69af      	ldr	r7, [r5, #24]
 80207ca:	2f00      	cmp	r7, #0
 80207cc:	d18c      	bne.n	80206e8 <CoreView_ChangeViewState+0x38>
 80207ce:	e7cc      	b.n	802076a <CoreView_ChangeViewState+0xba>
 80207d0:	08021fe9 	.word	0x08021fe9

080207d4 <CoreGroup_ChangeViewState>:
{
 80207d4:	b570      	push	{r4, r5, r6, lr}
 80207d6:	4604      	mov	r4, r0
 80207d8:	b082      	sub	sp, #8
  XSet oldState = _this->Super2.viewState;
 80207da:	6a06      	ldr	r6, [r0, #32]
  CoreView_ChangeViewState((CoreView)_this, aSetState, aClearState );
 80207dc:	f7ff ff68 	bl	80206b0 <CoreView_ChangeViewState>
  deltaState = _this->Super2.viewState ^ oldState;
 80207e0:	6a25      	ldr	r5, [r4, #32]
  if (( _this->Focus != 0 ) && (( deltaState & CoreViewStateFocused ) == CoreViewStateFocused ))
 80207e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
  deltaState = _this->Super2.viewState ^ oldState;
 80207e4:	ea85 0306 	eor.w	r3, r5, r6
  if (( _this->Focus != 0 ) && (( deltaState & CoreViewStateFocused ) == CoreViewStateFocused ))
 80207e8:	2800      	cmp	r0, #0
 80207ea:	d038      	beq.n	802085e <CoreGroup_ChangeViewState+0x8a>
 80207ec:	065b      	lsls	r3, r3, #25
 80207ee:	d519      	bpl.n	8020824 <CoreGroup_ChangeViewState+0x50>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80207f0:	6803      	ldr	r3, [r0, #0]
    if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ))
 80207f2:	f015 0140 	ands.w	r1, r5, #64	; 0x40
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80207f6:	bf14      	ite	ne
 80207f8:	2200      	movne	r2, #0
 80207fa:	2240      	moveq	r2, #64	; 0x40
 80207fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80207fe:	bf18      	it	ne
 8020800:	2140      	movne	r1, #64	; 0x40
 8020802:	4798      	blx	r3
  if (( _this->dialogStack != 0 ) && (( deltaState & CoreViewStateFocused ) == CoreViewStateFocused ))
 8020804:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020806:	b16a      	cbz	r2, 8020824 <CoreGroup_ChangeViewState+0x50>
 8020808:	6a23      	ldr	r3, [r4, #32]
        && (( _this->dialogStack->group->Super2.viewState & ( CoreViewStateEnabled 
 802080a:	6910      	ldr	r0, [r2, #16]
    if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ) 
 802080c:	065b      	lsls	r3, r3, #25
 802080e:	d50d      	bpl.n	802082c <CoreGroup_ChangeViewState+0x58>
        && (( _this->dialogStack->group->Super2.viewState & ( CoreViewStateEnabled 
 8020810:	6a03      	ldr	r3, [r0, #32]
 8020812:	f003 0314 	and.w	r3, r3, #20
 8020816:	2b14      	cmp	r3, #20
 8020818:	d108      	bne.n	802082c <CoreGroup_ChangeViewState+0x58>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 802081a:	6803      	ldr	r3, [r0, #0]
 802081c:	2200      	movs	r2, #0
 802081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020820:	2140      	movs	r1, #64	; 0x40
 8020822:	4798      	blx	r3
  if ( !!deltaState )
 8020824:	42b5      	cmp	r5, r6
 8020826:	d108      	bne.n	802083a <CoreGroup_ChangeViewState+0x66>
}
 8020828:	b002      	add	sp, #8
 802082a:	bd70      	pop	{r4, r5, r6, pc}
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 802082c:	6803      	ldr	r3, [r0, #0]
 802082e:	2240      	movs	r2, #64	; 0x40
 8020830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020832:	2100      	movs	r1, #0
 8020834:	4798      	blx	r3
  if ( !!deltaState )
 8020836:	42b5      	cmp	r5, r6
 8020838:	d0f6      	beq.n	8020828 <CoreGroup_ChangeViewState+0x54>
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 802083a:	6a23      	ldr	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802083c:	4a0b      	ldr	r2, [pc, #44]	; (802086c <CoreGroup_ChangeViewState+0x98>)
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 802083e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8020842:	466d      	mov	r5, sp
 8020844:	4628      	mov	r0, r5
 8020846:	4621      	mov	r1, r4
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 8020848:	6223      	str	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802084a:	f7fa fcc3 	bl	801b1d4 <EwNewSlot>
 802084e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020852:	4622      	mov	r2, r4
}
 8020854:	b002      	add	sp, #8
 8020856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802085a:	f7fa bce9 	b.w	801b230 <EwPostSignal>
  if (( _this->dialogStack != 0 ) && (( deltaState & CoreViewStateFocused ) == CoreViewStateFocused ))
 802085e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020860:	2a00      	cmp	r2, #0
 8020862:	d0df      	beq.n	8020824 <CoreGroup_ChangeViewState+0x50>
 8020864:	0659      	lsls	r1, r3, #25
 8020866:	d5dd      	bpl.n	8020824 <CoreGroup_ChangeViewState+0x50>
  deltaState = _this->Super2.viewState ^ oldState;
 8020868:	462b      	mov	r3, r5
 802086a:	e7ce      	b.n	802080a <CoreGroup_ChangeViewState+0x36>
 802086c:	08021fe9 	.word	0x08021fe9

08020870 <CoreRoot_ChangeViewState>:
{
 8020870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020872:	4604      	mov	r4, r0
 8020874:	b08f      	sub	sp, #60	; 0x3c
 8020876:	460e      	mov	r6, r1
 8020878:	4615      	mov	r5, r2
  CoreGroup_ChangeViewState((CoreGroup)_this, aSetState, aClearState );
 802087a:	f7ff ffab 	bl	80207d4 <CoreGroup_ChangeViewState>
  if (( _this->Super3.Owner == 0 ) && ((( aSetState & CoreViewStateVisible ) == 
 802087e:	69a3      	ldr	r3, [r4, #24]
 8020880:	b10b      	cbz	r3, 8020886 <CoreRoot_ChangeViewState+0x16>
}
 8020882:	b00f      	add	sp, #60	; 0x3c
 8020884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020886:	4335      	orrs	r5, r6
      CoreViewStateVisible ) || (( aClearState & CoreViewStateVisible ) == CoreViewStateVisible )))
 8020888:	07ea      	lsls	r2, r5, #31
 802088a:	d518      	bpl.n	80208be <CoreRoot_ChangeViewState+0x4e>
    CoreGroup__InvalidateArea( _this, EwGetRectORect( _this->Super2.Bounds ));
 802088c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802088e:	9300      	str	r3, [sp, #0]
 8020890:	ae02      	add	r6, sp, #8
 8020892:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8020896:	4630      	mov	r0, r6
 8020898:	cb0e      	ldmia	r3, {r1, r2, r3}
 802089a:	f7f9 fcbf 	bl	801a21c <EwGetRectORect>
 802089e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80208a2:	ae0a      	add	r6, sp, #40	; 0x28
 80208a4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80208a8:	6823      	ldr	r3, [r4, #0]
 80208aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80208ac:	9200      	str	r2, [sp, #0]
 80208ae:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 80208b0:	4620      	mov	r0, r4
 80208b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80208b6:	47b8      	blx	r7
  if (( _this->Super3.Owner == 0 ) && ((( aSetState & CoreViewStateAlphaBlended ) 
 80208b8:	69a3      	ldr	r3, [r4, #24]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d1e1      	bne.n	8020882 <CoreRoot_ChangeViewState+0x12>
      == CoreViewStateAlphaBlended ) || (( aClearState & CoreViewStateAlphaBlended ) 
 80208be:	07ab      	lsls	r3, r5, #30
 80208c0:	d5df      	bpl.n	8020882 <CoreRoot_ChangeViewState+0x12>
    CoreGroup__InvalidateArea( _this, EwGetRectORect( _this->Super2.Bounds ));
 80208c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80208c4:	9300      	str	r3, [sp, #0]
 80208c6:	ad06      	add	r5, sp, #24
 80208c8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80208cc:	4628      	mov	r0, r5
 80208ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80208d0:	f7f9 fca4 	bl	801a21c <EwGetRectORect>
 80208d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80208d8:	ad0a      	add	r5, sp, #40	; 0x28
 80208da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80208de:	6823      	ldr	r3, [r4, #0]
 80208e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80208e2:	9200      	str	r2, [sp, #0]
 80208e4:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 80208e6:	4620      	mov	r0, r4
 80208e8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80208ec:	47b0      	blx	r6
}
 80208ee:	b00f      	add	sp, #60	; 0x3c
 80208f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208f2:	bf00      	nop

080208f4 <CoreRoot_DoesNeedUpdate.part.0>:
XBool CoreRoot_DoesNeedUpdate( CoreRoot _this )
 80208f4:	b510      	push	{r4, lr}
 80208f6:	b084      	sub	sp, #16
  overlayArea = EwGetOverlayArea( 0, 0 );
 80208f8:	466c      	mov	r4, sp
 80208fa:	2200      	movs	r2, #0
 80208fc:	4620      	mov	r0, r4
 80208fe:	4611      	mov	r1, r2
 8020900:	f7ed fca4 	bl	800e24c <EwGetOverlayArea>
  if ( !EwIsRectEmpty( overlayArea ))
 8020904:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8020908:	f7f9 fb40 	bl	8019f8c <EwIsRectEmpty>
}
 802090c:	fab0 f080 	clz	r0, r0
 8020910:	0940      	lsrs	r0, r0, #5
 8020912:	b004      	add	sp, #16
 8020914:	bd10      	pop	{r4, pc}
 8020916:	bf00      	nop

08020918 <CoreTaskQueue_onDispatchNext>:
{
 8020918:	b538      	push	{r3, r4, r5, lr}
  if ( _this->current != 0 )
 802091a:	6903      	ldr	r3, [r0, #16]
 802091c:	b103      	cbz	r3, 8020920 <CoreTaskQueue_onDispatchNext+0x8>
}
 802091e:	bd38      	pop	{r3, r4, r5, pc}
  if ( _this->first == 0 )
 8020920:	4604      	mov	r4, r0
 8020922:	6980      	ldr	r0, [r0, #24]
 8020924:	2800      	cmp	r0, #0
 8020926:	d0fa      	beq.n	802091e <CoreTaskQueue_onDispatchNext+0x6>
  _this->first = _this->first->next;
 8020928:	6982      	ldr	r2, [r0, #24]
 802092a:	61a2      	str	r2, [r4, #24]
  _this->current = _this->first;
 802092c:	6120      	str	r0, [r4, #16]
  if ( _this->first != 0 )
 802092e:	b152      	cbz	r2, 8020946 <CoreTaskQueue_onDispatchNext+0x2e>
    _this->first->prev = 0;
 8020930:	6153      	str	r3, [r2, #20]
  _this->current->next = 0;
 8020932:	2500      	movs	r5, #0
  _this->isInOnStart = 1;
 8020934:	2301      	movs	r3, #1
  _this->current->next = 0;
 8020936:	6185      	str	r5, [r0, #24]
  _this->isInOnStart = 1;
 8020938:	7723      	strb	r3, [r4, #28]
  ((CoreTask)_this)->_.VMT->OnStart((CoreTask)_this, aQueue );
 802093a:	6803      	ldr	r3, [r0, #0]
 802093c:	4621      	mov	r1, r4
 802093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020940:	4798      	blx	r3
  _this->isInOnStart = 0;
 8020942:	7725      	strb	r5, [r4, #28]
}
 8020944:	bd38      	pop	{r3, r4, r5, pc}
    _this->last = 0;
 8020946:	6162      	str	r2, [r4, #20]
 8020948:	e7f3      	b.n	8020932 <CoreTaskQueue_onDispatchNext+0x1a>
 802094a:	bf00      	nop

0802094c <EwCheckIndex.part.0.constprop.0>:
  static int EwCheckIndex( int aIndex, int aRange, const char* aFile, int aLine )
 802094c:	b500      	push	{lr}
 802094e:	b083      	sub	sp, #12
 8020950:	4603      	mov	r3, r0
      EwPrint( "[FATAL ERROR in %s:%d] Array index %d out of bounds %d",
 8020952:	9100      	str	r1, [sp, #0]
 8020954:	4804      	ldr	r0, [pc, #16]	; (8020968 <EwCheckIndex.part.0.constprop.0+0x1c>)
 8020956:	4905      	ldr	r1, [pc, #20]	; (802096c <EwCheckIndex.part.0.constprop.0+0x20>)
 8020958:	f7f7 fd6c 	bl	8018434 <EwPrint>
  }
 802095c:	b003      	add	sp, #12
 802095e:	f85d eb04 	ldr.w	lr, [sp], #4
      EwPanic();
 8020962:	f008 bf09 	b.w	8029778 <EwPanic>
 8020966:	bf00      	nop
 8020968:	080378f8 	.word	0x080378f8
 802096c:	080378b4 	.word	0x080378b4

08020970 <CoreRoot_InvalidateArea>:
{
 8020970:	b084      	sub	sp, #16
 8020972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020976:	4604      	mov	r4, r0
  if ( _this->updateLock > 0 )
 8020978:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
{
 802097c:	b09f      	sub	sp, #124	; 0x7c
 802097e:	ad29      	add	r5, sp, #164	; 0xa4
  if ( _this->updateLock > 0 )
 8020980:	2800      	cmp	r0, #0
{
 8020982:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if ( _this->updateLock > 0 )
 8020986:	dc6e      	bgt.n	8020a66 <CoreRoot_InvalidateArea+0xf6>
  fullScreenUpdate = (XBool)EwFullScreenUpdate;
 8020988:	4b9b      	ldr	r3, [pc, #620]	; (8020bf8 <CoreRoot_InvalidateArea+0x288>)
  if ( fullScreenUpdate )
 802098a:	781b      	ldrb	r3, [r3, #0]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d15e      	bne.n	8020a4e <CoreRoot_InvalidateArea+0xde>
  if ( _this->Super3.Owner != 0 )
 8020990:	69a3      	ldr	r3, [r4, #24]
 8020992:	b15b      	cbz	r3, 80209ac <CoreRoot_InvalidateArea+0x3c>
    CoreGroup_InvalidateArea((CoreGroup)_this, aArea );
 8020994:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020996:	9300      	str	r3, [sp, #0]
 8020998:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802099c:	4620      	mov	r0, r4
 802099e:	f7ff faa7 	bl	801fef0 <CoreGroup_InvalidateArea>
}
 80209a2:	b01f      	add	sp, #124	; 0x7c
 80209a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a8:	b004      	add	sp, #16
 80209aa:	4770      	bx	lr
  aArea = EwIntersectRect( EwMoveRectPos( aArea, _this->Super2.Bounds.Point1 ), 
 80209ac:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80209b0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80209b4:	f10d 0a04 	add.w	sl, sp, #4
 80209b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80209ba:	e88a 0003 	stmia.w	sl, {r0, r1}
 80209be:	af12      	add	r7, sp, #72	; 0x48
 80209c0:	9300      	str	r3, [sp, #0]
 80209c2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80209c6:	4638      	mov	r0, r7
 80209c8:	f7f9 fbe5 	bl	801a196 <EwMoveRectPos>
 80209cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80209d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80209d2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80209d6:	4628      	mov	r0, r5
 80209d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80209dc:	9600      	str	r6, [sp, #0]
 80209de:	f7f9 fafb 	bl	8019fd8 <EwIntersectRect>
  if ( EwIsRectEmpty( aArea ))
 80209e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80209e6:	f7f9 fad1 	bl	8019f8c <EwIsRectEmpty>
 80209ea:	2800      	cmp	r0, #0
 80209ec:	d1d9      	bne.n	80209a2 <CoreRoot_InvalidateArea+0x32>
  for ( i = 0; i < _this->noOfRegions; i = i + 1 )
 80209ee:	f8d4 83f4 	ldr.w	r8, [r4, #1012]	; 0x3f4
 80209f2:	f1b8 0f00 	cmp.w	r8, #0
 80209f6:	46c1      	mov	r9, r8
 80209f8:	f340 818e 	ble.w	8020d18 <CoreRoot_InvalidateArea+0x3a8>
 80209fc:	4606      	mov	r6, r0
 80209fe:	af16      	add	r7, sp, #88	; 0x58
    if ( !EwIsRectEmpty( EwIntersectRect( _this->regions[ EwCheckIndex( i, 4 )], 
 8020a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020a04:	f106 083b 	add.w	r8, r6, #59	; 0x3b
 8020a08:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8020a0c:	f108 0904 	add.w	r9, r8, #4
 8020a10:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8020a14:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8020a18:	f8cd c000 	str.w	ip, [sp]
 8020a1c:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8020a20:	4638      	mov	r0, r7
 8020a22:	f7f9 fad9 	bl	8019fd8 <EwIntersectRect>
 8020a26:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8020a2a:	f7f9 faaf 	bl	8019f8c <EwIsRectEmpty>
  for ( i = 0; i < _this->noOfRegions; i = i + 1 )
 8020a2e:	f640 42a5 	movw	r2, #3237	; 0xca5
    if ( !EwIsRectEmpty( EwIntersectRect( _this->regions[ EwCheckIndex( i, 4 )], 
 8020a32:	b308      	cbz	r0, 8020a78 <CoreRoot_InvalidateArea+0x108>
  for ( i = 0; i < _this->noOfRegions; i = i + 1 )
 8020a34:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
 8020a38:	3601      	adds	r6, #1
 8020a3a:	42b3      	cmp	r3, r6
 8020a3c:	4699      	mov	r9, r3
 8020a3e:	4631      	mov	r1, r6
 8020a40:	4630      	mov	r0, r6
 8020a42:	dd35      	ble.n	8020ab0 <CoreRoot_InvalidateArea+0x140>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020a44:	2e04      	cmp	r6, #4
 8020a46:	d1db      	bne.n	8020a00 <CoreRoot_InvalidateArea+0x90>
 8020a48:	f7ff ff80 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020a4c:	e7d8      	b.n	8020a00 <CoreRoot_InvalidateArea+0x90>
    aArea = EwGetRectORect( _this->Super2.Bounds );
 8020a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a50:	9300      	str	r3, [sp, #0]
 8020a52:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8020a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020a58:	4628      	mov	r0, r5
 8020a5a:	f7f9 fbdf 	bl	801a21c <EwGetRectORect>
  if ( _this->Super3.Owner != 0 )
 8020a5e:	69a3      	ldr	r3, [r4, #24]
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d197      	bne.n	8020994 <CoreRoot_InvalidateArea+0x24>
 8020a64:	e7a2      	b.n	80209ac <CoreRoot_InvalidateArea+0x3c>
    EwThrow( EwLoadString( &_Const000D ));
 8020a66:	4865      	ldr	r0, [pc, #404]	; (8020bfc <CoreRoot_InvalidateArea+0x28c>)
 8020a68:	f7fb fce2 	bl	801c430 <EwLoadString>
}
 8020a6c:	b01f      	add	sp, #124	; 0x7c
 8020a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a72:	b004      	add	sp, #16
    EwThrow( EwLoadString( &_Const000D ));
 8020a74:	f7f8 b90c 	b.w	8018c90 <EwThrow>
      _this->regions[ EwCheckIndex( i, 4 )] = EwUnionRect( _this->regions[ EwCheckIndex( 
 8020a78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020a7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8020a80:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8020a84:	ad0e      	add	r5, sp, #56	; 0x38
 8020a86:	9700      	str	r7, [sp, #0]
 8020a88:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8020a8c:	4628      	mov	r0, r5
 8020a8e:	f7f9 fadc 	bl	801a04a <EwUnionRect>
 8020a92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020a96:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
      _this->regionsArea[ EwCheckIndex( i, 4 )] = EwGetRectArea( _this->regions[ 
 8020a9a:	f7f9 fba4 	bl	801a1e6 <EwGetRectArea>
 8020a9e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8020aa2:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
}
 8020aa6:	b01f      	add	sp, #124	; 0x7c
 8020aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aac:	b004      	add	sp, #16
 8020aae:	4770      	bx	lr
  if ( _this->noOfRegions < 3 )
 8020ab0:	2b02      	cmp	r3, #2
 8020ab2:	4698      	mov	r8, r3
 8020ab4:	f340 8130 	ble.w	8020d18 <CoreRoot_InvalidateArea+0x3a8>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020ab8:	2b04      	cmp	r3, #4
 8020aba:	d107      	bne.n	8020acc <CoreRoot_InvalidateArea+0x15c>
 8020abc:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8020ac0:	4649      	mov	r1, r9
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	f7ff ff42 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020ac8:	f8d4 83f4 	ldr.w	r8, [r4, #1012]	; 0x3f4
  _this->regions[ EwCheckIndex( _this->noOfRegions, 4 )] = aArea;
 8020acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020ad0:	eb04 1909 	add.w	r9, r4, r9, lsl #4
 8020ad4:	f509 796d 	add.w	r9, r9, #948	; 0x3b4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020ad8:	f1b8 0f03 	cmp.w	r8, #3
  _this->regions[ EwCheckIndex( _this->noOfRegions, 4 )] = aArea;
 8020adc:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020ae0:	f200 8113 	bhi.w	8020d0a <CoreRoot_InvalidateArea+0x39a>
  _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( aArea );
 8020ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020ae8:	f7f9 fb7d 	bl	801a1e6 <EwGetRectArea>
  for ( j = 0; j <= _this->noOfRegions; j = j + 1 )
 8020aec:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
  _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( aArea );
 8020af0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
  for ( j = 0; j <= _this->noOfRegions; j = j + 1 )
 8020af4:	2b00      	cmp	r3, #0
  _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( aArea );
 8020af6:	f8c8 03a4 	str.w	r0, [r8, #932]	; 0x3a4
  for ( j = 0; j <= _this->noOfRegions; j = j + 1 )
 8020afa:	f2c0 8150 	blt.w	8020d9e <CoreRoot_InvalidateArea+0x42e>
 8020afe:	f04f 0b00 	mov.w	fp, #0
 8020b02:	f504 7269 	add.w	r2, r4, #932	; 0x3a4
  jj = 0;
 8020b06:	e9cd bb07 	strd	fp, fp, [sp, #28]
 8020b0a:	9206      	str	r2, [sp, #24]
  best = 2147483647;
 8020b0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8020b10:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8020b14:	af1a      	add	r7, sp, #104	; 0x68
 8020b16:	4692      	mov	sl, r2
 8020b18:	465a      	mov	r2, fp
 8020b1a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    for ( k = j + 1; k <= _this->noOfRegions; k = k + 1 )
 8020b1e:	f10b 0b01 	add.w	fp, fp, #1
 8020b22:	455b      	cmp	r3, fp
 8020b24:	db6c      	blt.n	8020c00 <CoreRoot_InvalidateArea+0x290>
 8020b26:	f102 093b 	add.w	r9, r2, #59	; 0x3b
 8020b2a:	9b06      	ldr	r3, [sp, #24]
 8020b2c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020b30:	eb04 1909 	add.w	r9, r4, r9, lsl #4
 8020b34:	3304      	adds	r3, #4
 8020b36:	f109 0204 	add.w	r2, r9, #4
 8020b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8020b3c:	9209      	str	r2, [sp, #36]	; 0x24
    for ( k = j + 1; k <= _this->noOfRegions; k = k + 1 )
 8020b3e:	4698      	mov	r8, r3
 8020b40:	465d      	mov	r5, fp
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020b42:	eb04 1305 	add.w	r3, r4, r5, lsl #4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020b46:	2d03      	cmp	r5, #3
 8020b48:	4628      	mov	r0, r5
 8020b4a:	f640 42c2 	movw	r2, #3266	; 0xcc2
 8020b4e:	f04f 0104 	mov.w	r1, #4
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020b52:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020b56:	d82b      	bhi.n	8020bb0 <CoreRoot_InvalidateArea+0x240>
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020b5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020b5c:	f8d9 c010 	ldr.w	ip, [r9, #16]
 8020b60:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8020b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b66:	f8cd c000 	str.w	ip, [sp]
 8020b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020b6c:	4638      	mov	r0, r7
 8020b6e:	f7f9 fa6c 	bl	801a04a <EwUnionRect>
 8020b72:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8020b76:	f7f9 fb36 	bl	801a1e6 <EwGetRectArea>
      XInt32 overhead = ( unionArea << 8 ) / ( _this->regionsArea[ EwCheckIndex( 
 8020b7a:	9b06      	ldr	r3, [sp, #24]
 8020b7c:	f8d3 b000 	ldr.w	fp, [r3]
 8020b80:	0206      	lsls	r6, r0, #8
        j, 4 )] + _this->regionsArea[ EwCheckIndex( k, 4 )]);
 8020b82:	f858 3b04 	ldr.w	r3, [r8], #4
 8020b86:	445b      	add	r3, fp
      XInt32 overhead = ( unionArea << 8 ) / ( _this->regionsArea[ EwCheckIndex( 
 8020b88:	fb96 f6f3 	sdiv	r6, r6, r3
      if ( overhead < best )
 8020b8c:	4556      	cmp	r6, sl
 8020b8e:	da03      	bge.n	8020b98 <CoreRoot_InvalidateArea+0x228>
 8020b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b92:	9508      	str	r5, [sp, #32]
 8020b94:	46b2      	mov	sl, r6
 8020b96:	9307      	str	r3, [sp, #28]
    for ( k = j + 1; k <= _this->noOfRegions; k = k + 1 )
 8020b98:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
 8020b9c:	3501      	adds	r5, #1
 8020b9e:	42ab      	cmp	r3, r5
 8020ba0:	dacf      	bge.n	8020b42 <CoreRoot_InvalidateArea+0x1d2>
 8020ba2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  for ( j = 0; j <= _this->noOfRegions; j = j + 1 )
 8020ba6:	455b      	cmp	r3, fp
 8020ba8:	db2a      	blt.n	8020c00 <CoreRoot_InvalidateArea+0x290>
 8020baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020bac:	9206      	str	r2, [sp, #24]
 8020bae:	e7b3      	b.n	8020b18 <CoreRoot_InvalidateArea+0x1a8>
 8020bb0:	f7ff fecc 	bl	802094c <EwCheckIndex.part.0.constprop.0>
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020bb4:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8020bb8:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8020bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020bbe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020bc0:	f8d9 c010 	ldr.w	ip, [r9, #16]
 8020bc4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8020bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bca:	f8cd c000 	str.w	ip, [sp]
 8020bce:	4638      	mov	r0, r7
 8020bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020bd2:	f7f9 fa3a 	bl	801a04a <EwUnionRect>
 8020bd6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8020bda:	f7f9 fb04 	bl	801a1e6 <EwGetRectArea>
      XInt32 overhead = ( unionArea << 8 ) / ( _this->regionsArea[ EwCheckIndex( 
 8020bde:	9b06      	ldr	r3, [sp, #24]
      XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8020be0:	4606      	mov	r6, r0
      XInt32 overhead = ( unionArea << 8 ) / ( _this->regionsArea[ EwCheckIndex( 
 8020be2:	f640 42c4 	movw	r2, #3268	; 0xcc4
 8020be6:	2104      	movs	r1, #4
 8020be8:	4628      	mov	r0, r5
 8020bea:	f8d3 b000 	ldr.w	fp, [r3]
 8020bee:	0236      	lsls	r6, r6, #8
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020bf0:	f7ff feac 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020bf4:	e7c5      	b.n	8020b82 <CoreRoot_InvalidateArea+0x212>
 8020bf6:	bf00      	nop
 8020bf8:	200001e4 	.word	0x200001e4
 8020bfc:	08037b00 	.word	0x08037b00
 8020c00:	9b07      	ldr	r3, [sp, #28]
 8020c02:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8020c06:	2b03      	cmp	r3, #3
 8020c08:	d905      	bls.n	8020c16 <CoreRoot_InvalidateArea+0x2a6>
 8020c0a:	9807      	ldr	r0, [sp, #28]
 8020c0c:	f640 42ce 	movw	r2, #3278	; 0xcce
 8020c10:	2104      	movs	r1, #4
 8020c12:	f7ff fe9b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020c16:	9b08      	ldr	r3, [sp, #32]
 8020c18:	9f08      	ldr	r7, [sp, #32]
 8020c1a:	2b03      	cmp	r3, #3
 8020c1c:	d905      	bls.n	8020c2a <CoreRoot_InvalidateArea+0x2ba>
 8020c1e:	f640 42cf 	movw	r2, #3279	; 0xccf
 8020c22:	2104      	movs	r1, #4
 8020c24:	4618      	mov	r0, r3
 8020c26:	f7ff fe91 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020c2a:	9b07      	ldr	r3, [sp, #28]
 8020c2c:	2b03      	cmp	r3, #3
 8020c2e:	f340 80b9 	ble.w	8020da4 <CoreRoot_InvalidateArea+0x434>
 8020c32:	9d07      	ldr	r5, [sp, #28]
  _this->regions[ EwCheckIndex( jj, 4 )] = EwUnionRect( _this->regions[ EwCheckIndex( 
 8020c34:	9b08      	ldr	r3, [sp, #32]
 8020c36:	4628      	mov	r0, r5
 8020c38:	f640 42ce 	movw	r2, #3278	; 0xcce
 8020c3c:	2104      	movs	r1, #4
 8020c3e:	f103 063b 	add.w	r6, r3, #59	; 0x3b
 8020c42:	f7ff fe83 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020c46:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8020c4a:	3304      	adds	r3, #4
 8020c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020c4e:	9507      	str	r5, [sp, #28]
 8020c50:	353b      	adds	r5, #59	; 0x3b
 8020c52:	eb04 1c05 	add.w	ip, r4, r5, lsl #4
 8020c56:	f10c 0804 	add.w	r8, ip, #4
 8020c5a:	f8dc c010 	ldr.w	ip, [ip, #16]
 8020c5e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8020c62:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8020c66:	f8cd c000 	str.w	ip, [sp]
 8020c6a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8020c6e:	4648      	mov	r0, r9
 8020c70:	f7f9 f9eb 	bl	801a04a <EwUnionRect>
 8020c74:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8020c78:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020c7c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020c80:	f44f 624d 	mov.w	r2, #3280	; 0xcd0
 8020c84:	2104      	movs	r1, #4
 8020c86:	4640      	mov	r0, r8
 8020c88:	f7ff fe60 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020c8c:	f44f 624d 	mov.w	r2, #3280	; 0xcd0
 8020c90:	2104      	movs	r1, #4
 8020c92:	4640      	mov	r0, r8
 8020c94:	f7ff fe5a 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->regionsArea[ EwCheckIndex( jj, 4 )] = EwGetRectArea( _this->regions[ EwCheckIndex( 
 8020c98:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8020c9c:	3304      	adds	r3, #4
 8020c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020ca0:	f7f9 faa1 	bl	801a1e6 <EwGetRectArea>
 8020ca4:	9b07      	ldr	r3, [sp, #28]
  if ( kk != _this->noOfRegions )
 8020ca6:	f8d4 53f4 	ldr.w	r5, [r4, #1012]	; 0x3f4
  _this->regionsArea[ EwCheckIndex( jj, 4 )] = EwGetRectArea( _this->regions[ EwCheckIndex( 
 8020caa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020cae:	f8c3 03a4 	str.w	r0, [r3, #932]	; 0x3a4
  if ( kk != _this->noOfRegions )
 8020cb2:	9b08      	ldr	r3, [sp, #32]
 8020cb4:	429d      	cmp	r5, r3
 8020cb6:	f43f ae74 	beq.w	80209a2 <CoreRoot_InvalidateArea+0x32>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020cba:	2d03      	cmp	r5, #3
 8020cbc:	d905      	bls.n	8020cca <CoreRoot_InvalidateArea+0x35a>
 8020cbe:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8020cc2:	2104      	movs	r1, #4
 8020cc4:	4628      	mov	r0, r5
 8020cc6:	f7ff fe41 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020cca:	2f03      	cmp	r7, #3
 8020ccc:	d846      	bhi.n	8020d5c <CoreRoot_InvalidateArea+0x3ec>
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020cce:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8020cd2:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8020cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    _this->regionsArea[ EwCheckIndex( kk, 4 )] = _this->regionsArea[ EwCheckIndex( 
 8020cd8:	f8d4 73f4 	ldr.w	r7, [r4, #1012]	; 0x3f4
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020cdc:	eb04 1506 	add.w	r5, r4, r6, lsl #4
 8020ce0:	3504      	adds	r5, #4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020ce2:	2f03      	cmp	r7, #3
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020ce4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020ce8:	d905      	bls.n	8020cf6 <CoreRoot_InvalidateArea+0x386>
 8020cea:	f640 42d7 	movw	r2, #3287	; 0xcd7
 8020cee:	2104      	movs	r1, #4
 8020cf0:	4638      	mov	r0, r7
 8020cf2:	f7ff fe2b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
    _this->regionsArea[ EwCheckIndex( kk, 4 )] = _this->regionsArea[ EwCheckIndex( 
 8020cf6:	9b08      	ldr	r3, [sp, #32]
 8020cf8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8020cfc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020d00:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8020d04:	f8c4 33a4 	str.w	r3, [r4, #932]	; 0x3a4
 8020d08:	e64b      	b.n	80209a2 <CoreRoot_InvalidateArea+0x32>
 8020d0a:	f640 42bc 	movw	r2, #3260	; 0xcbc
 8020d0e:	2104      	movs	r1, #4
 8020d10:	4640      	mov	r0, r8
 8020d12:	f7ff fe1b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020d16:	e6e5      	b.n	8020ae4 <CoreRoot_InvalidateArea+0x174>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020d18:	f1b8 0f00 	cmp.w	r8, #0
 8020d1c:	db61      	blt.n	8020de2 <CoreRoot_InvalidateArea+0x472>
    _this->regions[ EwCheckIndex( _this->noOfRegions, 4 )] = aArea;
 8020d1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020d22:	eb04 1909 	add.w	r9, r4, r9, lsl #4
 8020d26:	f509 796d 	add.w	r9, r9, #948	; 0x3b4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020d2a:	f1b8 0f03 	cmp.w	r8, #3
    _this->regions[ EwCheckIndex( _this->noOfRegions, 4 )] = aArea;
 8020d2e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020d32:	d905      	bls.n	8020d40 <CoreRoot_InvalidateArea+0x3d0>
 8020d34:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8020d38:	2104      	movs	r1, #4
 8020d3a:	4640      	mov	r0, r8
 8020d3c:	f7ff fe06 	bl	802094c <EwCheckIndex.part.0.constprop.0>
    _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( 
 8020d40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020d44:	f7f9 fa4f 	bl	801a1e6 <EwGetRectArea>
    _this->noOfRegions = _this->noOfRegions + 1;
 8020d48:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	; 0x3f4
    _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( 
 8020d4c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
    _this->noOfRegions = _this->noOfRegions + 1;
 8020d50:	3301      	adds	r3, #1
    _this->regionsArea[ EwCheckIndex( _this->noOfRegions, 4 )] = EwGetRectArea( 
 8020d52:	f8c8 03a4 	str.w	r0, [r8, #932]	; 0x3a4
    _this->noOfRegions = _this->noOfRegions + 1;
 8020d56:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
    return;
 8020d5a:	e622      	b.n	80209a2 <CoreRoot_InvalidateArea+0x32>
 8020d5c:	9808      	ldr	r0, [sp, #32]
 8020d5e:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8020d62:	2104      	movs	r1, #4
 8020d64:	f7ff fdf2 	bl	802094c <EwCheckIndex.part.0.constprop.0>
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020d68:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8020d6c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8020d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    _this->regionsArea[ EwCheckIndex( kk, 4 )] = _this->regionsArea[ EwCheckIndex( 
 8020d72:	f8d4 73f4 	ldr.w	r7, [r4, #1012]	; 0x3f4
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020d76:	eb04 1506 	add.w	r5, r4, r6, lsl #4
 8020d7a:	3504      	adds	r5, #4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020d7c:	2f03      	cmp	r7, #3
    _this->regions[ EwCheckIndex( kk, 4 )] = _this->regions[ EwCheckIndex( _this->noOfRegions, 
 8020d7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020d82:	d905      	bls.n	8020d90 <CoreRoot_InvalidateArea+0x420>
 8020d84:	f640 42d7 	movw	r2, #3287	; 0xcd7
 8020d88:	2104      	movs	r1, #4
 8020d8a:	4638      	mov	r0, r7
 8020d8c:	f7ff fdde 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020d90:	9808      	ldr	r0, [sp, #32]
 8020d92:	f640 42d7 	movw	r2, #3287	; 0xcd7
 8020d96:	2104      	movs	r1, #4
 8020d98:	f7ff fdd8 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020d9c:	e7ab      	b.n	8020cf6 <CoreRoot_InvalidateArea+0x386>
  for ( j = 0; j <= _this->noOfRegions; j = j + 1 )
 8020d9e:	2700      	movs	r7, #0
  kk = 0;
 8020da0:	e9cd 7707 	strd	r7, r7, [sp, #28]
  _this->regions[ EwCheckIndex( jj, 4 )] = EwUnionRect( _this->regions[ EwCheckIndex( 
 8020da4:	9b08      	ldr	r3, [sp, #32]
 8020da6:	9d07      	ldr	r5, [sp, #28]
 8020da8:	f103 063b 	add.w	r6, r3, #59	; 0x3b
 8020dac:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8020db0:	3304      	adds	r3, #4
 8020db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020db4:	353b      	adds	r5, #59	; 0x3b
 8020db6:	eb04 1c05 	add.w	ip, r4, r5, lsl #4
 8020dba:	f10c 0804 	add.w	r8, ip, #4
 8020dbe:	f8dc c010 	ldr.w	ip, [ip, #16]
 8020dc2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8020dc6:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8020dca:	f8cd c000 	str.w	ip, [sp]
 8020dce:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8020dd2:	4648      	mov	r0, r9
 8020dd4:	f7f9 f939 	bl	801a04a <EwUnionRect>
 8020dd8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8020ddc:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8020de0:	e75a      	b.n	8020c98 <CoreRoot_InvalidateArea+0x328>
 8020de2:	4640      	mov	r0, r8
 8020de4:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8020de8:	2104      	movs	r1, #4
 8020dea:	f7ff fdaf 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8020dee:	f8d4 83f4 	ldr.w	r8, [r4, #1012]	; 0x3f4
 8020df2:	e794      	b.n	8020d1e <CoreRoot_InvalidateArea+0x3ae>

08020df4 <CoreOutline_Draw>:
 8020df4:	b082      	sub	sp, #8
 8020df6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8020dfa:	b002      	add	sp, #8
 8020dfc:	4770      	bx	lr
 8020dfe:	bf00      	nop

08020e00 <CoreSimpleTouchHandler_Draw>:
 8020e00:	b082      	sub	sp, #8
 8020e02:	e88d 000c 	stmia.w	sp, {r2, r3}
 8020e06:	b002      	add	sp, #8
 8020e08:	4770      	bx	lr
 8020e0a:	bf00      	nop

08020e0c <CoreTask_OnCancel>:
 8020e0c:	4770      	bx	lr
 8020e0e:	bf00      	nop

08020e10 <CoreView_OnSetLayout>:
  if ( !delta )
 8020e10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8020e12:	428b      	cmp	r3, r1
 8020e14:	d04d      	beq.n	8020eb2 <CoreView_OnSetLayout+0xa2>
{
 8020e16:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (( _this->layoutContext != 0 ) && !(( _this->viewState & CoreViewStateEmbedded ) 
 8020e18:	69c3      	ldr	r3, [r0, #28]
  _this->Layout = value;
 8020e1a:	6241      	str	r1, [r0, #36]	; 0x24
{
 8020e1c:	b08d      	sub	sp, #52	; 0x34
 8020e1e:	4604      	mov	r4, r0
  if (( _this->layoutContext != 0 ) && !(( _this->viewState & CoreViewStateEmbedded ) 
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d044      	beq.n	8020eae <CoreView_OnSetLayout+0x9e>
 8020e24:	6a02      	ldr	r2, [r0, #32]
 8020e26:	0551      	lsls	r1, r2, #21
 8020e28:	d516      	bpl.n	8020e58 <CoreView_OnSetLayout+0x48>
 8020e2a:	ad08      	add	r5, sp, #32
    _this->layoutContext->outline->Super2.viewState = _this->layoutContext->outline->Super2.viewState 
 8020e2c:	6918      	ldr	r0, [r3, #16]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 8020e2e:	69a1      	ldr	r1, [r4, #24]
    | CoreViewStateUpdateLayout;
 8020e30:	6a02      	ldr	r2, [r0, #32]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 8020e32:	6a0b      	ldr	r3, [r1, #32]
    | CoreViewStateUpdateLayout;
 8020e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 8020e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    _this->layoutContext->outline->Super2.viewState = _this->layoutContext->outline->Super2.viewState 
 8020e3c:	6202      	str	r2, [r0, #32]
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | CoreViewStatePendingLayout;
 8020e3e:	620b      	str	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020e40:	4628      	mov	r0, r5
 8020e42:	4a1c      	ldr	r2, [pc, #112]	; (8020eb4 <CoreView_OnSetLayout+0xa4>)
 8020e44:	f7fa f9c6 	bl	801b1d4 <EwNewSlot>
 8020e48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020e4c:	4622      	mov	r2, r4
}
 8020e4e:	b00d      	add	sp, #52	; 0x34
 8020e50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020e54:	f7fa b9ec 	b.w	801b230 <EwPostSignal>
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | ( CoreViewStatePendingLayout 
 8020e58:	6981      	ldr	r1, [r0, #24]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020e5a:	4a16      	ldr	r2, [pc, #88]	; (8020eb4 <CoreView_OnSetLayout+0xa4>)
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | ( CoreViewStatePendingLayout 
 8020e5c:	6a0b      	ldr	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020e5e:	ad02      	add	r5, sp, #8
    _this->Owner->Super2.viewState = _this->Owner->Super2.viewState | ( CoreViewStatePendingLayout 
 8020e60:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8020e64:	620b      	str	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this->Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020e66:	4628      	mov	r0, r5
 8020e68:	f7fa f9b4 	bl	801b1d4 <EwNewSlot>
 8020e6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020e70:	4622      	mov	r2, r4
 8020e72:	f7fa f9dd 	bl	801b230 <EwPostSignal>
    CoreGroup__InvalidateArea( _this->Owner, EwGetRectORect( _this->Owner->Super1.Bounds ));
 8020e76:	69a6      	ldr	r6, [r4, #24]
 8020e78:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8020e7a:	9300      	str	r3, [sp, #0]
 8020e7c:	ad04      	add	r5, sp, #16
 8020e7e:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8020e82:	4628      	mov	r0, r5
 8020e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020e86:	f7f9 f9c9 	bl	801a21c <EwGetRectORect>
 8020e8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020e8e:	ad08      	add	r5, sp, #32
 8020e90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8020e94:	6833      	ldr	r3, [r6, #0]
 8020e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e98:	9200      	str	r2, [sp, #0]
 8020e9a:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 8020e9c:	4630      	mov	r0, r6
 8020e9e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8020ea2:	47b8      	blx	r7
  if (( _this->layoutContext != 0 ) && (( _this->viewState & CoreViewStateEmbedded ) 
 8020ea4:	69e3      	ldr	r3, [r4, #28]
 8020ea6:	b113      	cbz	r3, 8020eae <CoreView_OnSetLayout+0x9e>
 8020ea8:	6a22      	ldr	r2, [r4, #32]
 8020eaa:	0552      	lsls	r2, r2, #21
 8020eac:	d4be      	bmi.n	8020e2c <CoreView_OnSetLayout+0x1c>
}
 8020eae:	b00d      	add	sp, #52	; 0x34
 8020eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020eb2:	4770      	bx	lr
 8020eb4:	08021fe9 	.word	0x08021fe9

08020eb8 <CoreView__ChangeViewState>:
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8020eb8:	6803      	ldr	r3, [r0, #0]
 8020eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ebc:	4718      	bx	r3
 8020ebe:	bf00      	nop

08020ec0 <CoreQuadView_OnSetPoint4>:
{
 8020ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ec4:	b090      	sub	sp, #64	; 0x40
 8020ec6:	ad02      	add	r5, sp, #8
 8020ec8:	e885 0006 	stmia.w	r5, {r1, r2}
  if ( !EwCompPoint( value, _this->Point4 ))
 8020ecc:	f100 0628 	add.w	r6, r0, #40	; 0x28
{
 8020ed0:	4604      	mov	r4, r0
  if ( !EwCompPoint( value, _this->Point4 ))
 8020ed2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8020ed6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020eda:	f7f8 ff86 	bl	8019dea <EwCompPoint>
 8020ede:	2800      	cmp	r0, #0
 8020ee0:	d042      	beq.n	8020f68 <CoreQuadView_OnSetPoint4+0xa8>
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8020ee2:	69a7      	ldr	r7, [r4, #24]
 8020ee4:	2f00      	cmp	r7, #0
 8020ee6:	d048      	beq.n	8020f7a <CoreQuadView_OnSetPoint4+0xba>
 8020ee8:	6a23      	ldr	r3, [r4, #32]
 8020eea:	f013 0201 	ands.w	r2, r3, #1
 8020eee:	d03e      	beq.n	8020f6e <CoreQuadView_OnSetPoint4+0xae>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8020ef0:	6823      	ldr	r3, [r4, #0]
 8020ef2:	f10d 0810 	add.w	r8, sp, #16
 8020ef6:	4640      	mov	r0, r8
 8020ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020efa:	4621      	mov	r1, r4
 8020efc:	4798      	blx	r3
 8020efe:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8020f02:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8020f06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8020f0a:	683b      	ldr	r3, [r7, #0]
 8020f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f0e:	9200      	str	r2, [sp, #0]
 8020f10:	4638      	mov	r0, r7
 8020f12:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 8020f16:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8020f1a:	47c0      	blx	r8
  _this->Point4 = value;
 8020f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020f20:	69a7      	ldr	r7, [r4, #24]
  _this->Super1.layoutContext = 0;
 8020f22:	2300      	movs	r3, #0
 8020f24:	61e3      	str	r3, [r4, #28]
  _this->Point4 = value;
 8020f26:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8020f2a:	b1ef      	cbz	r7, 8020f68 <CoreQuadView_OnSetPoint4+0xa8>
 8020f2c:	6a23      	ldr	r3, [r4, #32]
 8020f2e:	07dd      	lsls	r5, r3, #31
 8020f30:	d515      	bpl.n	8020f5e <CoreQuadView_OnSetPoint4+0x9e>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8020f32:	6823      	ldr	r3, [r4, #0]
 8020f34:	ad08      	add	r5, sp, #32
 8020f36:	4628      	mov	r0, r5
 8020f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020f3a:	4621      	mov	r1, r4
 8020f3c:	4798      	blx	r3
 8020f3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020f42:	ad0c      	add	r5, sp, #48	; 0x30
 8020f44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8020f48:	683b      	ldr	r3, [r7, #0]
 8020f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f4c:	9200      	str	r2, [sp, #0]
 8020f4e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8020f50:	4638      	mov	r0, r7
 8020f52:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8020f56:	47b0      	blx	r6
  if ((( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateEmbedded ) 
 8020f58:	69a7      	ldr	r7, [r4, #24]
 8020f5a:	b12f      	cbz	r7, 8020f68 <CoreQuadView_OnSetPoint4+0xa8>
 8020f5c:	6a23      	ldr	r3, [r4, #32]
 8020f5e:	0558      	lsls	r0, r3, #21
 8020f60:	d502      	bpl.n	8020f68 <CoreQuadView_OnSetPoint4+0xa8>
      == CoreViewStateEmbedded )) && !(( _this->Super1.Owner->Super2.viewState & 
 8020f62:	6a3a      	ldr	r2, [r7, #32]
 8020f64:	0491      	lsls	r1, r2, #18
 8020f66:	d510      	bpl.n	8020f8a <CoreQuadView_OnSetPoint4+0xca>
}
 8020f68:	b010      	add	sp, #64	; 0x40
 8020f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _this->Point4 = value;
 8020f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 8020f72:	61e2      	str	r2, [r4, #28]
  _this->Point4 = value;
 8020f74:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8020f78:	e7d9      	b.n	8020f2e <CoreQuadView_OnSetPoint4+0x6e>
  _this->Point4 = value;
 8020f7a:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 8020f7e:	61e7      	str	r7, [r4, #28]
  _this->Point4 = value;
 8020f80:	e886 0003 	stmia.w	r6, {r0, r1}
}
 8020f84:	b010      	add	sp, #64	; 0x40
 8020f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 8020f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020f8e:	ad0c      	add	r5, sp, #48	; 0x30
    | CoreViewStatePendingLayout;
 8020f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 8020f94:	6223      	str	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020f96:	4639      	mov	r1, r7
    _this->Super1.Owner->Super2.viewState = _this->Super1.Owner->Super2.viewState 
 8020f98:	623a      	str	r2, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020f9a:	4628      	mov	r0, r5
 8020f9c:	4a05      	ldr	r2, [pc, #20]	; (8020fb4 <CoreQuadView_OnSetPoint4+0xf4>)
 8020f9e:	f7fa f919 	bl	801b1d4 <EwNewSlot>
 8020fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020fa6:	4622      	mov	r2, r4
}
 8020fa8:	b010      	add	sp, #64	; 0x40
 8020faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8020fae:	f7fa b93f 	b.w	801b230 <EwPostSignal>
 8020fb2:	bf00      	nop
 8020fb4:	08021fe9 	.word	0x08021fe9

08020fb8 <CoreQuadView_OnSetPoint3>:
{
 8020fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020fbc:	b090      	sub	sp, #64	; 0x40
 8020fbe:	ad02      	add	r5, sp, #8
 8020fc0:	e885 0006 	stmia.w	r5, {r1, r2}
  if ( !EwCompPoint( value, _this->Point3 ))
 8020fc4:	f100 0630 	add.w	r6, r0, #48	; 0x30
{
 8020fc8:	4604      	mov	r4, r0
  if ( !EwCompPoint( value, _this->Point3 ))
 8020fca:	e896 000c 	ldmia.w	r6, {r2, r3}
 8020fce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020fd2:	f7f8 ff0a 	bl	8019dea <EwCompPoint>
 8020fd6:	2800      	cmp	r0, #0
 8020fd8:	d042      	beq.n	8021060 <CoreQuadView_OnSetPoint3+0xa8>
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8020fda:	69a7      	ldr	r7, [r4, #24]
 8020fdc:	2f00      	cmp	r7, #0
 8020fde:	d048      	beq.n	8021072 <CoreQuadView_OnSetPoint3+0xba>
 8020fe0:	6a23      	ldr	r3, [r4, #32]
 8020fe2:	f013 0201 	ands.w	r2, r3, #1
 8020fe6:	d03e      	beq.n	8021066 <CoreQuadView_OnSetPoint3+0xae>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8020fe8:	6823      	ldr	r3, [r4, #0]
 8020fea:	f10d 0810 	add.w	r8, sp, #16
 8020fee:	4640      	mov	r0, r8
 8020ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020ff2:	4621      	mov	r1, r4
 8020ff4:	4798      	blx	r3
 8020ff6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8020ffa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8020ffe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8021002:	683b      	ldr	r3, [r7, #0]
 8021004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021006:	9200      	str	r2, [sp, #0]
 8021008:	4638      	mov	r0, r7
 802100a:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 802100e:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8021012:	47c0      	blx	r8
  _this->Point3 = value;
 8021014:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021018:	69a7      	ldr	r7, [r4, #24]
  _this->Super1.layoutContext = 0;
 802101a:	2300      	movs	r3, #0
 802101c:	61e3      	str	r3, [r4, #28]
  _this->Point3 = value;
 802101e:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8021022:	b1ef      	cbz	r7, 8021060 <CoreQuadView_OnSetPoint3+0xa8>
 8021024:	6a23      	ldr	r3, [r4, #32]
 8021026:	07dd      	lsls	r5, r3, #31
 8021028:	d515      	bpl.n	8021056 <CoreQuadView_OnSetPoint3+0x9e>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 802102a:	6823      	ldr	r3, [r4, #0]
 802102c:	ad08      	add	r5, sp, #32
 802102e:	4628      	mov	r0, r5
 8021030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021032:	4621      	mov	r1, r4
 8021034:	4798      	blx	r3
 8021036:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802103a:	ad0c      	add	r5, sp, #48	; 0x30
 802103c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8021040:	683b      	ldr	r3, [r7, #0]
 8021042:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021044:	9200      	str	r2, [sp, #0]
 8021046:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8021048:	4638      	mov	r0, r7
 802104a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802104e:	47b0      	blx	r6
  if ((( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateEmbedded ) 
 8021050:	69a7      	ldr	r7, [r4, #24]
 8021052:	b12f      	cbz	r7, 8021060 <CoreQuadView_OnSetPoint3+0xa8>
 8021054:	6a23      	ldr	r3, [r4, #32]
 8021056:	0558      	lsls	r0, r3, #21
 8021058:	d502      	bpl.n	8021060 <CoreQuadView_OnSetPoint3+0xa8>
      == CoreViewStateEmbedded )) && !(( _this->Super1.Owner->Super2.viewState & 
 802105a:	6a3a      	ldr	r2, [r7, #32]
 802105c:	0491      	lsls	r1, r2, #18
 802105e:	d510      	bpl.n	8021082 <CoreQuadView_OnSetPoint3+0xca>
}
 8021060:	b010      	add	sp, #64	; 0x40
 8021062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _this->Point3 = value;
 8021066:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 802106a:	61e2      	str	r2, [r4, #28]
  _this->Point3 = value;
 802106c:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8021070:	e7d9      	b.n	8021026 <CoreQuadView_OnSetPoint3+0x6e>
  _this->Point3 = value;
 8021072:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 8021076:	61e7      	str	r7, [r4, #28]
  _this->Point3 = value;
 8021078:	e886 0003 	stmia.w	r6, {r0, r1}
}
 802107c:	b010      	add	sp, #64	; 0x40
 802107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 8021082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021086:	ad0c      	add	r5, sp, #48	; 0x30
    | CoreViewStatePendingLayout;
 8021088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 802108c:	6223      	str	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802108e:	4639      	mov	r1, r7
    _this->Super1.Owner->Super2.viewState = _this->Super1.Owner->Super2.viewState 
 8021090:	623a      	str	r2, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021092:	4628      	mov	r0, r5
 8021094:	4a05      	ldr	r2, [pc, #20]	; (80210ac <CoreQuadView_OnSetPoint3+0xf4>)
 8021096:	f7fa f89d 	bl	801b1d4 <EwNewSlot>
 802109a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802109e:	4622      	mov	r2, r4
}
 80210a0:	b010      	add	sp, #64	; 0x40
 80210a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 80210a6:	f7fa b8c3 	b.w	801b230 <EwPostSignal>
 80210aa:	bf00      	nop
 80210ac:	08021fe9 	.word	0x08021fe9

080210b0 <CoreQuadView_OnSetPoint2>:
{
 80210b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210b4:	b090      	sub	sp, #64	; 0x40
 80210b6:	ad02      	add	r5, sp, #8
 80210b8:	e885 0006 	stmia.w	r5, {r1, r2}
  if ( !EwCompPoint( value, _this->Point2 ))
 80210bc:	f100 0638 	add.w	r6, r0, #56	; 0x38
{
 80210c0:	4604      	mov	r4, r0
  if ( !EwCompPoint( value, _this->Point2 ))
 80210c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80210c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80210ca:	f7f8 fe8e 	bl	8019dea <EwCompPoint>
 80210ce:	2800      	cmp	r0, #0
 80210d0:	d042      	beq.n	8021158 <CoreQuadView_OnSetPoint2+0xa8>
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 80210d2:	69a7      	ldr	r7, [r4, #24]
 80210d4:	2f00      	cmp	r7, #0
 80210d6:	d048      	beq.n	802116a <CoreQuadView_OnSetPoint2+0xba>
 80210d8:	6a23      	ldr	r3, [r4, #32]
 80210da:	f013 0201 	ands.w	r2, r3, #1
 80210de:	d03e      	beq.n	802115e <CoreQuadView_OnSetPoint2+0xae>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 80210e0:	6823      	ldr	r3, [r4, #0]
 80210e2:	f10d 0810 	add.w	r8, sp, #16
 80210e6:	4640      	mov	r0, r8
 80210e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80210ea:	4621      	mov	r1, r4
 80210ec:	4798      	blx	r3
 80210ee:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80210f2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80210f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80210fa:	683b      	ldr	r3, [r7, #0]
 80210fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210fe:	9200      	str	r2, [sp, #0]
 8021100:	4638      	mov	r0, r7
 8021102:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 8021106:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 802110a:	47c0      	blx	r8
  _this->Point2 = value;
 802110c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021110:	69a7      	ldr	r7, [r4, #24]
  _this->Super1.layoutContext = 0;
 8021112:	2300      	movs	r3, #0
 8021114:	61e3      	str	r3, [r4, #28]
  _this->Point2 = value;
 8021116:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 802111a:	b1ef      	cbz	r7, 8021158 <CoreQuadView_OnSetPoint2+0xa8>
 802111c:	6a23      	ldr	r3, [r4, #32]
 802111e:	07dd      	lsls	r5, r3, #31
 8021120:	d515      	bpl.n	802114e <CoreQuadView_OnSetPoint2+0x9e>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8021122:	6823      	ldr	r3, [r4, #0]
 8021124:	ad08      	add	r5, sp, #32
 8021126:	4628      	mov	r0, r5
 8021128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802112a:	4621      	mov	r1, r4
 802112c:	4798      	blx	r3
 802112e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021132:	ad0c      	add	r5, sp, #48	; 0x30
 8021134:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8021138:	683b      	ldr	r3, [r7, #0]
 802113a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802113c:	9200      	str	r2, [sp, #0]
 802113e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8021140:	4638      	mov	r0, r7
 8021142:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8021146:	47b0      	blx	r6
  if ((( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateEmbedded ) 
 8021148:	69a7      	ldr	r7, [r4, #24]
 802114a:	b12f      	cbz	r7, 8021158 <CoreQuadView_OnSetPoint2+0xa8>
 802114c:	6a23      	ldr	r3, [r4, #32]
 802114e:	0558      	lsls	r0, r3, #21
 8021150:	d502      	bpl.n	8021158 <CoreQuadView_OnSetPoint2+0xa8>
      == CoreViewStateEmbedded )) && !(( _this->Super1.Owner->Super2.viewState & 
 8021152:	6a3a      	ldr	r2, [r7, #32]
 8021154:	0491      	lsls	r1, r2, #18
 8021156:	d510      	bpl.n	802117a <CoreQuadView_OnSetPoint2+0xca>
}
 8021158:	b010      	add	sp, #64	; 0x40
 802115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _this->Point2 = value;
 802115e:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 8021162:	61e2      	str	r2, [r4, #28]
  _this->Point2 = value;
 8021164:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8021168:	e7d9      	b.n	802111e <CoreQuadView_OnSetPoint2+0x6e>
  _this->Point2 = value;
 802116a:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 802116e:	61e7      	str	r7, [r4, #28]
  _this->Point2 = value;
 8021170:	e886 0003 	stmia.w	r6, {r0, r1}
}
 8021174:	b010      	add	sp, #64	; 0x40
 8021176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 802117a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802117e:	ad0c      	add	r5, sp, #48	; 0x30
    | CoreViewStatePendingLayout;
 8021180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 8021184:	6223      	str	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021186:	4639      	mov	r1, r7
    _this->Super1.Owner->Super2.viewState = _this->Super1.Owner->Super2.viewState 
 8021188:	623a      	str	r2, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802118a:	4628      	mov	r0, r5
 802118c:	4a05      	ldr	r2, [pc, #20]	; (80211a4 <CoreQuadView_OnSetPoint2+0xf4>)
 802118e:	f7fa f821 	bl	801b1d4 <EwNewSlot>
 8021192:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021196:	4622      	mov	r2, r4
}
 8021198:	b010      	add	sp, #64	; 0x40
 802119a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802119e:	f7fa b847 	b.w	801b230 <EwPostSignal>
 80211a2:	bf00      	nop
 80211a4:	08021fe9 	.word	0x08021fe9

080211a8 <CoreQuadView_OnSetPoint1>:
{
 80211a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211ac:	b090      	sub	sp, #64	; 0x40
 80211ae:	ad02      	add	r5, sp, #8
 80211b0:	e885 0006 	stmia.w	r5, {r1, r2}
  if ( !EwCompPoint( value, _this->Point1 ))
 80211b4:	f100 0640 	add.w	r6, r0, #64	; 0x40
{
 80211b8:	4604      	mov	r4, r0
  if ( !EwCompPoint( value, _this->Point1 ))
 80211ba:	e896 000c 	ldmia.w	r6, {r2, r3}
 80211be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80211c2:	f7f8 fe12 	bl	8019dea <EwCompPoint>
 80211c6:	2800      	cmp	r0, #0
 80211c8:	d042      	beq.n	8021250 <CoreQuadView_OnSetPoint1+0xa8>
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 80211ca:	69a7      	ldr	r7, [r4, #24]
 80211cc:	2f00      	cmp	r7, #0
 80211ce:	d048      	beq.n	8021262 <CoreQuadView_OnSetPoint1+0xba>
 80211d0:	6a23      	ldr	r3, [r4, #32]
 80211d2:	f013 0201 	ands.w	r2, r3, #1
 80211d6:	d03e      	beq.n	8021256 <CoreQuadView_OnSetPoint1+0xae>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 80211d8:	6823      	ldr	r3, [r4, #0]
 80211da:	f10d 0810 	add.w	r8, sp, #16
 80211de:	4640      	mov	r0, r8
 80211e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80211e2:	4621      	mov	r1, r4
 80211e4:	4798      	blx	r3
 80211e6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80211ea:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80211ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80211f2:	683b      	ldr	r3, [r7, #0]
 80211f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80211f6:	9200      	str	r2, [sp, #0]
 80211f8:	4638      	mov	r0, r7
 80211fa:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 80211fe:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8021202:	47c0      	blx	r8
  _this->Point1 = value;
 8021204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021208:	69a7      	ldr	r7, [r4, #24]
  _this->Super1.layoutContext = 0;
 802120a:	2300      	movs	r3, #0
 802120c:	61e3      	str	r3, [r4, #28]
  _this->Point1 = value;
 802120e:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8021212:	b1ef      	cbz	r7, 8021250 <CoreQuadView_OnSetPoint1+0xa8>
 8021214:	6a23      	ldr	r3, [r4, #32]
 8021216:	07dd      	lsls	r5, r3, #31
 8021218:	d515      	bpl.n	8021246 <CoreQuadView_OnSetPoint1+0x9e>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 802121a:	6823      	ldr	r3, [r4, #0]
 802121c:	ad08      	add	r5, sp, #32
 802121e:	4628      	mov	r0, r5
 8021220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021222:	4621      	mov	r1, r4
 8021224:	4798      	blx	r3
 8021226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802122a:	ad0c      	add	r5, sp, #48	; 0x30
 802122c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8021230:	683b      	ldr	r3, [r7, #0]
 8021232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021234:	9200      	str	r2, [sp, #0]
 8021236:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8021238:	4638      	mov	r0, r7
 802123a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802123e:	47b0      	blx	r6
  if ((( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateEmbedded ) 
 8021240:	69a7      	ldr	r7, [r4, #24]
 8021242:	b12f      	cbz	r7, 8021250 <CoreQuadView_OnSetPoint1+0xa8>
 8021244:	6a23      	ldr	r3, [r4, #32]
 8021246:	0558      	lsls	r0, r3, #21
 8021248:	d502      	bpl.n	8021250 <CoreQuadView_OnSetPoint1+0xa8>
      == CoreViewStateEmbedded )) && !(( _this->Super1.Owner->Super2.viewState & 
 802124a:	6a3a      	ldr	r2, [r7, #32]
 802124c:	0491      	lsls	r1, r2, #18
 802124e:	d510      	bpl.n	8021272 <CoreQuadView_OnSetPoint1+0xca>
}
 8021250:	b010      	add	sp, #64	; 0x40
 8021252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  _this->Point1 = value;
 8021256:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 802125a:	61e2      	str	r2, [r4, #28]
  _this->Point1 = value;
 802125c:	e886 0003 	stmia.w	r6, {r0, r1}
  if (( _this->Super1.Owner != 0 ) && (( _this->Super1.viewState & CoreViewStateVisible ) 
 8021260:	e7d9      	b.n	8021216 <CoreQuadView_OnSetPoint1+0x6e>
  _this->Point1 = value;
 8021262:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->Super1.layoutContext = 0;
 8021266:	61e7      	str	r7, [r4, #28]
  _this->Point1 = value;
 8021268:	e886 0003 	stmia.w	r6, {r0, r1}
}
 802126c:	b010      	add	sp, #64	; 0x40
 802126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 8021272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021276:	ad0c      	add	r5, sp, #48	; 0x30
    | CoreViewStatePendingLayout;
 8021278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    _this->Super1.viewState = _this->Super1.viewState | CoreViewStateRequestLayout;
 802127c:	6223      	str	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 802127e:	4639      	mov	r1, r7
    _this->Super1.Owner->Super2.viewState = _this->Super1.Owner->Super2.viewState 
 8021280:	623a      	str	r2, [r7, #32]
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021282:	4628      	mov	r0, r5
 8021284:	4a05      	ldr	r2, [pc, #20]	; (802129c <CoreQuadView_OnSetPoint1+0xf4>)
 8021286:	f7f9 ffa5 	bl	801b1d4 <EwNewSlot>
 802128a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802128e:	4622      	mov	r2, r4
}
 8021290:	b010      	add	sp, #64	; 0x40
 8021292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    EwPostSignal( EwNewSlot( _this->Super1.Owner, CoreGroup_updateComponent ), ((XObject)_this ));
 8021296:	f7f9 bfcb 	b.w	801b230 <EwPostSignal>
 802129a:	bf00      	nop
 802129c:	08021fe9 	.word	0x08021fe9

080212a0 <CoreQuadView_ArrangeView>:
{
 80212a0:	b082      	sub	sp, #8
 80212a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a6:	ed2d 8b02 	vpush	{d8}
 80212aa:	b09b      	sub	sp, #108	; 0x6c
 80212ac:	4689      	mov	r9, r1
 80212ae:	a926      	add	r1, sp, #152	; 0x98
 80212b0:	e881 000c 	stmia.w	r1, {r2, r3}
  XSet layout = _this->Super1.Layout;
 80212b4:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
 80212b8:	9404      	str	r4, [sp, #16]
 80212ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80212bc:	9405      	str	r4, [sp, #20]
 80212be:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  CoreLayoutQuadContext context = EwCastObject( _this->Super1.layoutContext, CoreLayoutQuadContext );
 80212c0:	49af      	ldr	r1, [pc, #700]	; (8021580 <CoreQuadView_ArrangeView+0x2e0>)
 80212c2:	9408      	str	r4, [sp, #32]
{
 80212c4:	4603      	mov	r3, r0
 80212c6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
  CoreLayoutQuadContext context = EwCastObject( _this->Super1.layoutContext, CoreLayoutQuadContext );
 80212c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
{
 80212cc:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80212ce:	9409      	str	r4, [sp, #36]	; 0x24
 80212d0:	ee08 3a10 	vmov	s16, r3
 80212d4:	4692      	mov	sl, r2
  CoreLayoutQuadContext context = EwCastObject( _this->Super1.layoutContext, CoreLayoutQuadContext );
 80212d6:	f7f8 fac9 	bl	801986c <EwCastObject>
  XInt32 y1 = context->Super1.extent.Point1.Y;
 80212da:	e9d0 b705 	ldrd	fp, r7, [r0, #20]
  XInt32 y2 = context->Super1.extent.Point2.Y;
 80212de:	e9d0 8507 	ldrd	r8, r5, [r0, #28]
  XInt32 y1 = context->Super1.extent.Point1.Y;
 80212e2:	9703      	str	r7, [sp, #12]
  XInt32 w = x2 - x1;
 80212e4:	eba8 070b 	sub.w	r7, r8, fp
  XPoint dstSize = EwGetRectSize( aBounds );
 80212e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  XInt32 w = x2 - x1;
 80212ea:	9706      	str	r7, [sp, #24]
  XInt32 h = y2 - y1;
 80212ec:	9f03      	ldr	r7, [sp, #12]
  XPoint dstSize = EwGetRectSize( aBounds );
 80212ee:	9300      	str	r3, [sp, #0]
 80212f0:	ab26      	add	r3, sp, #152	; 0x98
  CoreLayoutQuadContext context = EwCastObject( _this->Super1.layoutContext, CoreLayoutQuadContext );
 80212f2:	4604      	mov	r4, r0
  XInt32 h = y2 - y1;
 80212f4:	1bef      	subs	r7, r5, r7
  XPoint dstSize = EwGetRectSize( aBounds );
 80212f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80212f8:	a80e      	add	r0, sp, #56	; 0x38
  XInt32 h = y2 - y1;
 80212fa:	9707      	str	r7, [sp, #28]
  XPoint dstSize = EwGetRectSize( aBounds );
 80212fc:	f7f8 ff7f 	bl	801a1fe <EwGetRectSize>
  if ( aFormation == CoreFormationNone )
 8021300:	2e00      	cmp	r6, #0
 8021302:	f000 813f 	beq.w	8021584 <CoreQuadView_ArrangeView+0x2e4>
    switch ( aFormation )
 8021306:	3e01      	subs	r6, #1
 8021308:	2e03      	cmp	r6, #3
 802130a:	d809      	bhi.n	8021320 <CoreQuadView_ArrangeView+0x80>
 802130c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8021310:	01a60004 	.word	0x01a60004
 8021314:	019701ab 	.word	0x019701ab
        y2 = y1 + h;
 8021318:	9f05      	ldr	r7, [sp, #20]
 802131a:	9b07      	ldr	r3, [sp, #28]
        y1 = aBounds.Point1.Y;
 802131c:	9703      	str	r7, [sp, #12]
        y2 = y1 + h;
 802131e:	19dd      	adds	r5, r3, r7
    if (( aFormation == CoreFormationTopToBottom ) || ( aFormation == CoreFormationBottomToTop ))
 8021320:	2e01      	cmp	r6, #1
 8021322:	d810      	bhi.n	8021346 <CoreQuadView_ArrangeView+0xa6>
      if ( resizeHorz )
 8021324:	9b04      	ldr	r3, [sp, #16]
 8021326:	07d8      	lsls	r0, r3, #31
 8021328:	f100 81b0 	bmi.w	802168c <CoreQuadView_ArrangeView+0x3ec>
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 802132c:	9a04      	ldr	r2, [sp, #16]
        if ( alignToLeft && !alignToRight )
 802132e:	0751      	lsls	r1, r2, #29
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 8021330:	f002 0308 	and.w	r3, r2, #8
        if ( alignToLeft && !alignToRight )
 8021334:	f140 81b9 	bpl.w	80216aa <CoreQuadView_ArrangeView+0x40a>
 8021338:	2b00      	cmp	r3, #0
 802133a:	f040 81b8 	bne.w	80216ae <CoreQuadView_ArrangeView+0x40e>
          x2 = x1 + w;
 802133e:	9b06      	ldr	r3, [sp, #24]
          x1 = aBounds.Point1.X;
 8021340:	46d3      	mov	fp, sl
          x2 = x1 + w;
 8021342:	eb03 080a 	add.w	r8, r3, sl
  context->Super1.isEmpty = (XBool)(( x1 >= x2 ) || ( y1 >= y2 ));
 8021346:	45c3      	cmp	fp, r8
 8021348:	f280 80a6 	bge.w	8021498 <CoreQuadView_ArrangeView+0x1f8>
 802134c:	9b03      	ldr	r3, [sp, #12]
 802134e:	42ab      	cmp	r3, r5
 8021350:	bfb4      	ite	lt
 8021352:	2200      	movlt	r2, #0
 8021354:	2201      	movge	r2, #1
  ey = context->Super1.extent.Point1.Y;
 8021356:	e9d4 0506 	ldrd	r0, r5, [r4, #24]
  ex = context->Super1.extent.Point1.X;
 802135a:	f8d4 a014 	ldr.w	sl, [r4, #20]
  if ((( _this->Super1.viewState & CoreViewStateFastReshape ) == CoreViewStateFastReshape ))
 802135e:	f8d9 3020 	ldr.w	r3, [r9, #32]
  eh = ( context->Super1.extent.Point2.Y - ey ) - 1;
 8021362:	6a26      	ldr	r6, [r4, #32]
  context->Super1.isEmpty = (XBool)(( x1 >= x2 ) || ( y1 >= y2 ));
 8021364:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  w = ( x2 - x1 ) - 1;
 8021368:	9a06      	ldr	r2, [sp, #24]
  ey = context->Super1.extent.Point1.Y;
 802136a:	9008      	str	r0, [sp, #32]
  ew = ( context->Super1.extent.Point2.X - ex ) - 1;
 802136c:	eba5 050a 	sub.w	r5, r5, sl
    ew = 1;
 8021370:	3d01      	subs	r5, #1
  w = ( x2 - x1 ) - 1;
 8021372:	f102 37ff 	add.w	r7, r2, #4294967295
  eh = ( context->Super1.extent.Point2.Y - ey ) - 1;
 8021376:	eba6 0600 	sub.w	r6, r6, r0
  h = ( y2 - y1 ) - 1;
 802137a:	9a07      	ldr	r2, [sp, #28]
  w = ( x2 - x1 ) - 1;
 802137c:	9704      	str	r7, [sp, #16]
    ew = 1;
 802137e:	bf08      	it	eq
 8021380:	2501      	moveq	r5, #1
    eh = 1;
 8021382:	3e01      	subs	r6, #1
  h = ( y2 - y1 ) - 1;
 8021384:	f102 32ff 	add.w	r2, r2, #4294967295
    eh = 1;
 8021388:	bf08      	it	eq
 802138a:	2601      	moveq	r6, #1
  if ((( _this->Super1.viewState & CoreViewStateFastReshape ) == CoreViewStateFastReshape ))
 802138c:	05db      	lsls	r3, r3, #23
  h = ( y2 - y1 ) - 1;
 802138e:	9205      	str	r2, [sp, #20]
    _this->Point1 = EwNewPoint( x1 + ((( context->point1.X - ex ) * w ) / ew ), 
 8021390:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	; 0x50
  if ((( _this->Super1.viewState & CoreViewStateFastReshape ) == CoreViewStateFastReshape ))
 8021394:	f140 8082 	bpl.w	802149c <CoreQuadView_ArrangeView+0x1fc>
    y1 + ((( context->point1.Y - ey ) * h ) / eh ));
 8021398:	9b05      	ldr	r3, [sp, #20]
 802139a:	1a12      	subs	r2, r2, r0
 802139c:	fb03 f202 	mul.w	r2, r3, r2
    _this->Point1 = EwNewPoint( x1 + ((( context->point1.X - ex ) * w ) / ew ), 
 80213a0:	9b03      	ldr	r3, [sp, #12]
    y1 + ((( context->point1.Y - ey ) * h ) / eh ));
 80213a2:	fb92 f2f6 	sdiv	r2, r2, r6
    _this->Point1 = EwNewPoint( x1 + ((( context->point1.X - ex ) * w ) / ew ), 
 80213a6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80213aa:	eba1 010a 	sub.w	r1, r1, sl
 80213ae:	fb07 f101 	mul.w	r1, r7, r1
 80213b2:	441a      	add	r2, r3
 80213b4:	4640      	mov	r0, r8
 80213b6:	fb91 f1f5 	sdiv	r1, r1, r5
 80213ba:	4459      	add	r1, fp
 80213bc:	f7f8 fd12 	bl	8019de4 <EwNewPoint>
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 80213c0:	e9d4 3212 	ldrd	r3, r2, [r4, #72]	; 0x48
    y1 + ((( context->point2.Y - ey ) * h ) / eh ));
 80213c4:	9f08      	ldr	r7, [sp, #32]
 80213c6:	1bd2      	subs	r2, r2, r7
 80213c8:	9f05      	ldr	r7, [sp, #20]
 80213ca:	fb07 f202 	mul.w	r2, r7, r2
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 80213ce:	9f04      	ldr	r7, [sp, #16]
    y1 + ((( context->point2.Y - ey ) * h ) / eh ));
 80213d0:	fb92 f2f6 	sdiv	r2, r2, r6
    _this->Point1 = EwNewPoint( x1 + ((( context->point1.X - ex ) * w ) / ew ), 
 80213d4:	e898 0003 	ldmia.w	r8, {r0, r1}
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 80213d8:	eba3 030a 	sub.w	r3, r3, sl
 80213dc:	fb07 f303 	mul.w	r3, r7, r3
 80213e0:	9f03      	ldr	r7, [sp, #12]
 80213e2:	fb93 f3f5 	sdiv	r3, r3, r5
    _this->Point1 = EwNewPoint( x1 + ((( context->point1.X - ex ) * w ) / ew ), 
 80213e6:	f109 0c40 	add.w	ip, r9, #64	; 0x40
 80213ea:	e88c 0003 	stmia.w	ip, {r0, r1}
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 80213ee:	443a      	add	r2, r7
 80213f0:	eb03 010b 	add.w	r1, r3, fp
 80213f4:	4640      	mov	r0, r8
 80213f6:	f7f8 fcf5 	bl	8019de4 <EwNewPoint>
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 80213fa:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
    y1 + ((( context->point3.Y - ey ) * h ) / eh ));
 80213fe:	9f08      	ldr	r7, [sp, #32]
 8021400:	1bd2      	subs	r2, r2, r7
 8021402:	9f05      	ldr	r7, [sp, #20]
 8021404:	fb07 f202 	mul.w	r2, r7, r2
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 8021408:	9f04      	ldr	r7, [sp, #16]
    y1 + ((( context->point3.Y - ey ) * h ) / eh ));
 802140a:	fb92 f2f6 	sdiv	r2, r2, r6
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 802140e:	e898 0003 	ldmia.w	r8, {r0, r1}
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 8021412:	eba3 030a 	sub.w	r3, r3, sl
 8021416:	fb07 f303 	mul.w	r3, r7, r3
 802141a:	9f03      	ldr	r7, [sp, #12]
 802141c:	fb93 f3f5 	sdiv	r3, r3, r5
    _this->Point2 = EwNewPoint( x1 + ((( context->point2.X - ex ) * w ) / ew ), 
 8021420:	f109 0c38 	add.w	ip, r9, #56	; 0x38
 8021424:	e88c 0003 	stmia.w	ip, {r0, r1}
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 8021428:	443a      	add	r2, r7
 802142a:	eb03 010b 	add.w	r1, r3, fp
 802142e:	4640      	mov	r0, r8
 8021430:	f7f8 fcd8 	bl	8019de4 <EwNewPoint>
    _this->Point4 = EwNewPoint( x1 + ((( context->point4.X - ex ) * w ) / ew ), 
 8021434:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
    y1 + ((( context->point4.Y - ey ) * h ) / eh ));
 8021438:	9f08      	ldr	r7, [sp, #32]
 802143a:	9c05      	ldr	r4, [sp, #20]
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 802143c:	e898 0003 	ldmia.w	r8, {r0, r1}
    y1 + ((( context->point4.Y - ey ) * h ) / eh ));
 8021440:	1bd2      	subs	r2, r2, r7
 8021442:	fb04 f202 	mul.w	r2, r4, r2
    _this->Point4 = EwNewPoint( x1 + ((( context->point4.X - ex ) * w ) / ew ), 
 8021446:	9f04      	ldr	r7, [sp, #16]
 8021448:	9c03      	ldr	r4, [sp, #12]
    y1 + ((( context->point4.Y - ey ) * h ) / eh ));
 802144a:	fb92 f2f6 	sdiv	r2, r2, r6
    _this->Point4 = EwNewPoint( x1 + ((( context->point4.X - ex ) * w ) / ew ), 
 802144e:	eba3 0a0a 	sub.w	sl, r3, sl
    _this->Point3 = EwNewPoint( x1 + ((( context->point3.X - ex ) * w ) / ew ), 
 8021452:	f109 0330 	add.w	r3, r9, #48	; 0x30
 8021456:	e883 0003 	stmia.w	r3, {r0, r1}
    _this->Point4 = EwNewPoint( x1 + ((( context->point4.X - ex ) * w ) / ew ), 
 802145a:	fb07 fa0a 	mul.w	sl, r7, sl
 802145e:	4640      	mov	r0, r8
 8021460:	4422      	add	r2, r4
 8021462:	fb9a f5f5 	sdiv	r5, sl, r5
 8021466:	eb05 010b 	add.w	r1, r5, fp
 802146a:	f7f8 fcbb 	bl	8019de4 <EwNewPoint>
 802146e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021472:	f109 0328 	add.w	r3, r9, #40	; 0x28
 8021476:	e883 0003 	stmia.w	r3, {r0, r1}
  return EwNewPoint( w + 1, h + 1 );
 802147a:	ee18 0a10 	vmov	r0, s16
 802147e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021482:	f7f8 fcaf 	bl	8019de4 <EwNewPoint>
}
 8021486:	ee18 0a10 	vmov	r0, s16
 802148a:	b01b      	add	sp, #108	; 0x6c
 802148c:	ecbd 8b02 	vpop	{d8}
 8021490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021494:	b002      	add	sp, #8
 8021496:	4770      	bx	lr
 8021498:	2201      	movs	r2, #1
 802149a:	e75c      	b.n	8021356 <CoreQuadView_ArrangeView+0xb6>
    * w ) / ew ), y1 + ((( context->point1.Y - ey ) * h ) / eh )));
 802149c:	9804      	ldr	r0, [sp, #16]
 802149e:	9f08      	ldr	r7, [sp, #32]
 80214a0:	9b05      	ldr	r3, [sp, #20]
    CoreQuadView_OnSetPoint1( _this, EwNewPoint( x1 + ((( context->point1.X - ex ) 
 80214a2:	eba1 010a 	sub.w	r1, r1, sl
    * w ) / ew ), y1 + ((( context->point1.Y - ey ) * h ) / eh )));
 80214a6:	fb00 f101 	mul.w	r1, r0, r1
    CoreQuadView_OnSetPoint1( _this, EwNewPoint( x1 + ((( context->point1.X - ex ) 
 80214aa:	9803      	ldr	r0, [sp, #12]
    * w ) / ew ), y1 + ((( context->point1.Y - ey ) * h ) / eh )));
 80214ac:	fb91 f1f5 	sdiv	r1, r1, r5
    CoreQuadView_OnSetPoint1( _this, EwNewPoint( x1 + ((( context->point1.X - ex ) 
 80214b0:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    * w ) / ew ), y1 + ((( context->point1.Y - ey ) * h ) / eh )));
 80214b4:	1bd2      	subs	r2, r2, r7
 80214b6:	fb03 f202 	mul.w	r2, r3, r2
    CoreQuadView_OnSetPoint1( _this, EwNewPoint( x1 + ((( context->point1.X - ex ) 
 80214ba:	4459      	add	r1, fp
    * w ) / ew ), y1 + ((( context->point1.Y - ey ) * h ) / eh )));
 80214bc:	fb92 f2f6 	sdiv	r2, r2, r6
    CoreQuadView_OnSetPoint1( _this, EwNewPoint( x1 + ((( context->point1.X - ex ) 
 80214c0:	4402      	add	r2, r0
 80214c2:	4640      	mov	r0, r8
 80214c4:	f7f8 fc8e 	bl	8019de4 <EwNewPoint>
 80214c8:	e898 0006 	ldmia.w	r8, {r1, r2}
 80214cc:	4648      	mov	r0, r9
 80214ce:	f7ff fe6b 	bl	80211a8 <CoreQuadView_OnSetPoint1>
    CoreQuadView_OnSetPoint2( _this, EwNewPoint( x1 + ((( context->point2.X - ex ) 
 80214d2:	e9d4 1212 	ldrd	r1, r2, [r4, #72]	; 0x48
    * w ) / ew ), y1 + ((( context->point2.Y - ey ) * h ) / eh )));
 80214d6:	9b05      	ldr	r3, [sp, #20]
 80214d8:	9804      	ldr	r0, [sp, #16]
 80214da:	1bd2      	subs	r2, r2, r7
 80214dc:	fb03 f202 	mul.w	r2, r3, r2
    CoreQuadView_OnSetPoint2( _this, EwNewPoint( x1 + ((( context->point2.X - ex ) 
 80214e0:	9b03      	ldr	r3, [sp, #12]
    * w ) / ew ), y1 + ((( context->point2.Y - ey ) * h ) / eh )));
 80214e2:	fb92 f2f6 	sdiv	r2, r2, r6
    CoreQuadView_OnSetPoint2( _this, EwNewPoint( x1 + ((( context->point2.X - ex ) 
 80214e6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80214ea:	eba1 010a 	sub.w	r1, r1, sl
 80214ee:	441a      	add	r2, r3
    * w ) / ew ), y1 + ((( context->point2.Y - ey ) * h ) / eh )));
 80214f0:	fb00 f101 	mul.w	r1, r0, r1
    CoreQuadView_OnSetPoint2( _this, EwNewPoint( x1 + ((( context->point2.X - ex ) 
 80214f4:	4640      	mov	r0, r8
    * w ) / ew ), y1 + ((( context->point2.Y - ey ) * h ) / eh )));
 80214f6:	fb91 f1f5 	sdiv	r1, r1, r5
    CoreQuadView_OnSetPoint2( _this, EwNewPoint( x1 + ((( context->point2.X - ex ) 
 80214fa:	4459      	add	r1, fp
 80214fc:	f7f8 fc72 	bl	8019de4 <EwNewPoint>
 8021500:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021504:	4648      	mov	r0, r9
 8021506:	f7ff fdd3 	bl	80210b0 <CoreQuadView_OnSetPoint2>
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 802150a:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
    * w ) / ew ), y1 + ((( context->point3.Y - ey ) * h ) / eh )));
 802150e:	9804      	ldr	r0, [sp, #16]
 8021510:	9b05      	ldr	r3, [sp, #20]
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 8021512:	eba1 010a 	sub.w	r1, r1, sl
    * w ) / ew ), y1 + ((( context->point3.Y - ey ) * h ) / eh )));
 8021516:	fb00 f101 	mul.w	r1, r0, r1
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 802151a:	9803      	ldr	r0, [sp, #12]
    * w ) / ew ), y1 + ((( context->point3.Y - ey ) * h ) / eh )));
 802151c:	fb91 f1f5 	sdiv	r1, r1, r5
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 8021520:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    * w ) / ew ), y1 + ((( context->point3.Y - ey ) * h ) / eh )));
 8021524:	1bd2      	subs	r2, r2, r7
 8021526:	fb03 f202 	mul.w	r2, r3, r2
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 802152a:	4459      	add	r1, fp
    * w ) / ew ), y1 + ((( context->point3.Y - ey ) * h ) / eh )));
 802152c:	fb92 f2f6 	sdiv	r2, r2, r6
    CoreQuadView_OnSetPoint3( _this, EwNewPoint( x1 + ((( context->point3.X - ex ) 
 8021530:	4402      	add	r2, r0
 8021532:	4640      	mov	r0, r8
 8021534:	f7f8 fc56 	bl	8019de4 <EwNewPoint>
 8021538:	e898 0006 	ldmia.w	r8, {r1, r2}
 802153c:	4648      	mov	r0, r9
 802153e:	f7ff fd3b 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
    CoreQuadView_OnSetPoint4( _this, EwNewPoint( x1 + ((( context->point4.X - ex ) 
 8021542:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    * w ) / ew ), y1 + ((( context->point4.Y - ey ) * h ) / eh )));
 8021546:	9b05      	ldr	r3, [sp, #20]
 8021548:	9804      	ldr	r0, [sp, #16]
 802154a:	1bd2      	subs	r2, r2, r7
 802154c:	fb03 f202 	mul.w	r2, r3, r2
    CoreQuadView_OnSetPoint4( _this, EwNewPoint( x1 + ((( context->point4.X - ex ) 
 8021550:	9b03      	ldr	r3, [sp, #12]
    * w ) / ew ), y1 + ((( context->point4.Y - ey ) * h ) / eh )));
 8021552:	fb92 f2f6 	sdiv	r2, r2, r6
    CoreQuadView_OnSetPoint4( _this, EwNewPoint( x1 + ((( context->point4.X - ex ) 
 8021556:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 802155a:	eba1 010a 	sub.w	r1, r1, sl
 802155e:	441a      	add	r2, r3
    * w ) / ew ), y1 + ((( context->point4.Y - ey ) * h ) / eh )));
 8021560:	fb00 f101 	mul.w	r1, r0, r1
    CoreQuadView_OnSetPoint4( _this, EwNewPoint( x1 + ((( context->point4.X - ex ) 
 8021564:	4640      	mov	r0, r8
    * w ) / ew ), y1 + ((( context->point4.Y - ey ) * h ) / eh )));
 8021566:	fb91 f1f5 	sdiv	r1, r1, r5
    CoreQuadView_OnSetPoint4( _this, EwNewPoint( x1 + ((( context->point4.X - ex ) 
 802156a:	4459      	add	r1, fp
 802156c:	f7f8 fc3a 	bl	8019de4 <EwNewPoint>
 8021570:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021574:	4648      	mov	r0, r9
 8021576:	f7ff fca3 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
    _this->Super1.layoutContext = ((CoreLayoutContext)context );
 802157a:	f8c9 401c 	str.w	r4, [r9, #28]
 802157e:	e77c      	b.n	802147a <CoreQuadView_ArrangeView+0x1da>
 8021580:	08037dc8 	.word	0x08037dc8
  XPoint dstSize = EwGetRectSize( aBounds );
 8021584:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    XPoint srcSize = EwGetRectSize( context->Super1.bounds );
 8021588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802158a:	9300      	str	r3, [sp, #0]
 802158c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8021590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021592:	a810      	add	r0, sp, #64	; 0x40
  XPoint dstSize = EwGetRectSize( aBounds );
 8021594:	970a      	str	r7, [sp, #40]	; 0x28
    XPoint srcSize = EwGetRectSize( context->Super1.bounds );
 8021596:	f7f8 fe32 	bl	801a1fe <EwGetRectSize>
 802159a:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    y1 = y1 - context->Super1.bounds.Point1.Y;
 802159e:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
 80215a2:	9903      	ldr	r1, [sp, #12]
 80215a4:	920b      	str	r2, [sp, #44]	; 0x2c
    if ( srcSize.X != dstSize.X )
 80215a6:	4566      	cmp	r6, ip
    x1 = x1 - context->Super1.bounds.Point1.X;
 80215a8:	ebab 0b03 	sub.w	fp, fp, r3
    y1 = y1 - context->Super1.bounds.Point1.Y;
 80215ac:	eba1 0702 	sub.w	r7, r1, r2
    if ( srcSize.X != dstSize.X )
 80215b0:	f000 80a6 	beq.w	8021700 <CoreQuadView_ArrangeView+0x460>
      XBool alignToRight = (( layout & CoreLayoutAlignToRight ) == CoreLayoutAlignToRight );
 80215b4:	9804      	ldr	r0, [sp, #16]
 80215b6:	f000 0108 	and.w	r1, r0, #8
      XBool resizeHorz = (( layout & CoreLayoutResizeHorz ) == CoreLayoutResizeHorz );
 80215ba:	f000 0201 	and.w	r2, r0, #1
      if ( !alignToLeft && ( resizeHorz || !alignToRight ))
 80215be:	f010 0004 	ands.w	r0, r0, #4
 80215c2:	d06a      	beq.n	802169a <CoreQuadView_ArrangeView+0x3fa>
      if ( !alignToRight && ( resizeHorz || !alignToLeft ))
 80215c4:	b919      	cbnz	r1, 80215ce <CoreQuadView_ArrangeView+0x32e>
 80215c6:	2a00      	cmp	r2, #0
 80215c8:	d17e      	bne.n	80216c8 <CoreQuadView_ArrangeView+0x428>
 80215ca:	2800      	cmp	r0, #0
 80215cc:	d07c      	beq.n	80216c8 <CoreQuadView_ArrangeView+0x428>
        x2 = x2 - context->Super1.bounds.Point2.X;
 80215ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80215d0:	eba8 0806 	sub.w	r8, r8, r6
      x2 = x2 + aBounds.Point2.X;
 80215d4:	9b08      	ldr	r3, [sp, #32]
      x1 = x1 + aBounds.Point1.X;
 80215d6:	44d3      	add	fp, sl
      x2 = x2 + aBounds.Point2.X;
 80215d8:	4498      	add	r8, r3
      if ( !resizeHorz )
 80215da:	2a00      	cmp	r2, #0
 80215dc:	f040 8096 	bne.w	802170c <CoreQuadView_ArrangeView+0x46c>
        if ( alignToLeft && !alignToRight )
 80215e0:	2800      	cmp	r0, #0
 80215e2:	f040 80c5 	bne.w	8021770 <CoreQuadView_ArrangeView+0x4d0>
          if ( !alignToLeft && alignToRight )
 80215e6:	2900      	cmp	r1, #0
 80215e8:	f040 80d6 	bne.w	8021798 <CoreQuadView_ArrangeView+0x4f8>
            x1 = x1 + ((( x2 - x1 ) - w ) / 2 );
 80215ec:	9b06      	ldr	r3, [sp, #24]
 80215ee:	eba8 080b 	sub.w	r8, r8, fp
 80215f2:	eba8 0803 	sub.w	r8, r8, r3
 80215f6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80215fa:	eb0b 0b68 	add.w	fp, fp, r8, asr #1
            x2 = x1 + w;
 80215fe:	eb03 080b 	add.w	r8, r3, fp
    if ( srcSize.Y != dstSize.Y )
 8021602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021604:	4573      	cmp	r3, lr
 8021606:	f000 8088 	beq.w	802171a <CoreQuadView_ArrangeView+0x47a>
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 802160a:	9b04      	ldr	r3, [sp, #16]
      if ( !alignToTop && ( resizeVert || !alignToBottom ))
 802160c:	f013 0010 	ands.w	r0, r3, #16
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 8021610:	f003 0120 	and.w	r1, r3, #32
      XBool resizeVert = (( layout & CoreLayoutResizeVert ) == CoreLayoutResizeVert );
 8021614:	f003 0202 	and.w	r2, r3, #2
      if ( !alignToTop && ( resizeVert || !alignToBottom ))
 8021618:	d164      	bne.n	80216e4 <CoreQuadView_ArrangeView+0x444>
 802161a:	2a00      	cmp	r2, #0
 802161c:	d15d      	bne.n	80216da <CoreQuadView_ArrangeView+0x43a>
 802161e:	2900      	cmp	r1, #0
 8021620:	d05b      	beq.n	80216da <CoreQuadView_ArrangeView+0x43a>
        y2 = y2 - context->Super1.bounds.Point2.Y;
 8021622:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021624:	1aed      	subs	r5, r5, r3
      y1 = y1 + aBounds.Point1.Y;
 8021626:	9b05      	ldr	r3, [sp, #20]
 8021628:	443b      	add	r3, r7
 802162a:	461e      	mov	r6, r3
 802162c:	9303      	str	r3, [sp, #12]
      y2 = y2 + aBounds.Point2.Y;
 802162e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021630:	441d      	add	r5, r3
      if ( !resizeVert )
 8021632:	2a00      	cmp	r2, #0
 8021634:	f000 808a 	beq.w	802174c <CoreQuadView_ArrangeView+0x4ac>
 8021638:	1bab      	subs	r3, r5, r6
 802163a:	9307      	str	r3, [sp, #28]
 802163c:	e683      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        x1 = x2 - w;
 802163e:	9b08      	ldr	r3, [sp, #32]
 8021640:	9906      	ldr	r1, [sp, #24]
 8021642:	461a      	mov	r2, r3
 8021644:	eba3 0b01 	sub.w	fp, r3, r1
        x2 = aBounds.Point2.X;
 8021648:	4698      	mov	r8, r3
      if ( resizeVert )
 802164a:	9b04      	ldr	r3, [sp, #16]
 802164c:	079b      	lsls	r3, r3, #30
 802164e:	d511      	bpl.n	8021674 <CoreQuadView_ArrangeView+0x3d4>
 8021650:	9f05      	ldr	r7, [sp, #20]
 8021652:	9d09      	ldr	r5, [sp, #36]	; 0x24
        y1 = aBounds.Point1.Y;
 8021654:	9703      	str	r7, [sp, #12]
 8021656:	1beb      	subs	r3, r5, r7
 8021658:	9307      	str	r3, [sp, #28]
    if (( aFormation == CoreFormationTopToBottom ) || ( aFormation == CoreFormationBottomToTop ))
 802165a:	e674      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        y1 = y2 - h;
 802165c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802165e:	9b07      	ldr	r3, [sp, #28]
 8021660:	1aeb      	subs	r3, r5, r3
 8021662:	9303      	str	r3, [sp, #12]
      break;
 8021664:	e65c      	b.n	8021320 <CoreQuadView_ArrangeView+0x80>
        x2 = x1 + w;
 8021666:	9b06      	ldr	r3, [sp, #24]
 8021668:	eb03 080a 	add.w	r8, r3, sl
      if ( resizeVert )
 802166c:	9b04      	ldr	r3, [sp, #16]
 802166e:	079b      	lsls	r3, r3, #30
        x1 = aBounds.Point1.X;
 8021670:	46d3      	mov	fp, sl
      if ( resizeVert )
 8021672:	d4ed      	bmi.n	8021650 <CoreQuadView_ArrangeView+0x3b0>
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 8021674:	9a04      	ldr	r2, [sp, #16]
        if ( alignToTop && !alignToBottom )
 8021676:	06d5      	lsls	r5, r2, #27
      XBool alignToBottom = (( layout & CoreLayoutAlignToBottom ) == CoreLayoutAlignToBottom );
 8021678:	f002 0320 	and.w	r3, r2, #32
        if ( alignToTop && !alignToBottom )
 802167c:	d557      	bpl.n	802172e <CoreQuadView_ArrangeView+0x48e>
 802167e:	2b00      	cmp	r3, #0
 8021680:	d156      	bne.n	8021730 <CoreQuadView_ArrangeView+0x490>
          y2 = y1 + h;
 8021682:	9f05      	ldr	r7, [sp, #20]
 8021684:	9b07      	ldr	r3, [sp, #28]
          y1 = aBounds.Point1.Y;
 8021686:	9703      	str	r7, [sp, #12]
          y2 = y1 + h;
 8021688:	19dd      	adds	r5, r3, r7
 802168a:	e65c      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
 802168c:	9b08      	ldr	r3, [sp, #32]
 802168e:	eba3 020a 	sub.w	r2, r3, sl
 8021692:	9206      	str	r2, [sp, #24]
        x2 = aBounds.Point2.X;
 8021694:	4698      	mov	r8, r3
        x1 = aBounds.Point1.X;
 8021696:	46d3      	mov	fp, sl
 8021698:	e655      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
      if ( !alignToLeft && ( resizeHorz || !alignToRight ))
 802169a:	b90a      	cbnz	r2, 80216a0 <CoreQuadView_ArrangeView+0x400>
 802169c:	2900      	cmp	r1, #0
 802169e:	d196      	bne.n	80215ce <CoreQuadView_ArrangeView+0x32e>
        x1 = ( x1 * dstSize.X ) / srcSize.X;
 80216a0:	fb06 fb0b 	mul.w	fp, r6, fp
 80216a4:	fb9b fbfc 	sdiv	fp, fp, ip
 80216a8:	e78c      	b.n	80215c4 <CoreQuadView_ArrangeView+0x324>
          if ( alignToRight && !alignToLeft )
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d167      	bne.n	802177e <CoreQuadView_ArrangeView+0x4de>
            x1 = aBounds.Point1.X + (( EwGetRectW( aBounds ) - w ) / 2 );
 80216ae:	ab26      	add	r3, sp, #152	; 0x98
 80216b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80216b2:	f7f8 fd8f 	bl	801a1d4 <EwGetRectW>
 80216b6:	9b06      	ldr	r3, [sp, #24]
 80216b8:	1ac0      	subs	r0, r0, r3
 80216ba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80216be:	eb0a 0b60 	add.w	fp, sl, r0, asr #1
            x2 = x1 + w;
 80216c2:	eb03 080b 	add.w	r8, r3, fp
 80216c6:	e63e      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        x2 = x2 - context->Super1.bounds.Point1.X;
 80216c8:	eba8 0803 	sub.w	r8, r8, r3
        x2 = ( x2 * dstSize.X ) / srcSize.X;
 80216cc:	fb06 f808 	mul.w	r8, r6, r8
 80216d0:	fb98 f8fc 	sdiv	r8, r8, ip
        x2 = x2 - dstSize.X;
 80216d4:	eba8 0806 	sub.w	r8, r8, r6
 80216d8:	e77c      	b.n	80215d4 <CoreQuadView_ArrangeView+0x334>
        y1 = ( y1 * dstSize.Y ) / srcSize.Y;
 80216da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216dc:	fb03 f707 	mul.w	r7, r3, r7
 80216e0:	fb97 f7fe 	sdiv	r7, r7, lr
      if ( !alignToBottom && ( resizeVert || !alignToTop ))
 80216e4:	2900      	cmp	r1, #0
 80216e6:	d19c      	bne.n	8021622 <CoreQuadView_ArrangeView+0x382>
 80216e8:	b90a      	cbnz	r2, 80216ee <CoreQuadView_ArrangeView+0x44e>
 80216ea:	2800      	cmp	r0, #0
 80216ec:	d199      	bne.n	8021622 <CoreQuadView_ArrangeView+0x382>
        y2 = y2 - context->Super1.bounds.Point1.Y;
 80216ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216f0:	1aed      	subs	r5, r5, r3
        y2 = ( y2 * dstSize.Y ) / srcSize.Y;
 80216f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216f4:	fb03 f505 	mul.w	r5, r3, r5
 80216f8:	fb95 f5fe 	sdiv	r5, r5, lr
        y2 = y2 - dstSize.Y;
 80216fc:	1aed      	subs	r5, r5, r3
 80216fe:	e792      	b.n	8021626 <CoreQuadView_ArrangeView+0x386>
      x2 = x2 - context->Super1.bounds.Point2.X;
 8021700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021702:	eba8 0803 	sub.w	r8, r8, r3
      x2 = x2 + aBounds.Point2.X;
 8021706:	9b08      	ldr	r3, [sp, #32]
      x1 = x1 + aBounds.Point1.X;
 8021708:	44d3      	add	fp, sl
      x2 = x2 + aBounds.Point2.X;
 802170a:	4498      	add	r8, r3
 802170c:	eba8 030b 	sub.w	r3, r8, fp
 8021710:	9306      	str	r3, [sp, #24]
    if ( srcSize.Y != dstSize.Y )
 8021712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021714:	4573      	cmp	r3, lr
 8021716:	f47f af78 	bne.w	802160a <CoreQuadView_ArrangeView+0x36a>
      y2 = y2 - context->Super1.bounds.Point2.Y;
 802171a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802171c:	1aed      	subs	r5, r5, r3
      y1 = y1 + aBounds.Point1.Y;
 802171e:	9b05      	ldr	r3, [sp, #20]
 8021720:	18fa      	adds	r2, r7, r3
      y2 = y2 + aBounds.Point2.Y;
 8021722:	9b09      	ldr	r3, [sp, #36]	; 0x24
      y1 = y1 + aBounds.Point1.Y;
 8021724:	9203      	str	r2, [sp, #12]
      y2 = y2 + aBounds.Point2.Y;
 8021726:	441d      	add	r5, r3
 8021728:	1aab      	subs	r3, r5, r2
 802172a:	9307      	str	r3, [sp, #28]
 802172c:	e60b      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
          if ( alignToBottom && !alignToTop )
 802172e:	bb6b      	cbnz	r3, 802178c <CoreQuadView_ArrangeView+0x4ec>
            y1 = aBounds.Point1.Y + (( EwGetRectH( aBounds ) - h ) / 2 );
 8021730:	ab26      	add	r3, sp, #152	; 0x98
 8021732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021734:	f7f8 fd46 	bl	801a1c4 <EwGetRectH>
 8021738:	9b07      	ldr	r3, [sp, #28]
 802173a:	9a05      	ldr	r2, [sp, #20]
 802173c:	1ac0      	subs	r0, r0, r3
 802173e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8021742:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8021746:	9203      	str	r2, [sp, #12]
            y2 = y1 + h;
 8021748:	189d      	adds	r5, r3, r2
 802174a:	e5fc      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        if ( alignToTop && !alignToBottom )
 802174c:	b920      	cbnz	r0, 8021758 <CoreQuadView_ArrangeView+0x4b8>
          if ( !alignToTop && alignToBottom )
 802174e:	b121      	cbz	r1, 802175a <CoreQuadView_ArrangeView+0x4ba>
            y1 = y2 - h;
 8021750:	9b07      	ldr	r3, [sp, #28]
 8021752:	1aeb      	subs	r3, r5, r3
 8021754:	9303      	str	r3, [sp, #12]
 8021756:	e5f6      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        if ( alignToTop && !alignToBottom )
 8021758:	b1d1      	cbz	r1, 8021790 <CoreQuadView_ArrangeView+0x4f0>
            y1 = y1 + ((( y2 - y1 ) - h ) / 2 );
 802175a:	9a03      	ldr	r2, [sp, #12]
 802175c:	9b07      	ldr	r3, [sp, #28]
 802175e:	1aad      	subs	r5, r5, r2
 8021760:	1aed      	subs	r5, r5, r3
 8021762:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021766:	eb02 0265 	add.w	r2, r2, r5, asr #1
 802176a:	9203      	str	r2, [sp, #12]
            y2 = y1 + h;
 802176c:	189d      	adds	r5, r3, r2
 802176e:	e5ea      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
        if ( alignToLeft && !alignToRight )
 8021770:	2900      	cmp	r1, #0
 8021772:	f47f af3b 	bne.w	80215ec <CoreQuadView_ArrangeView+0x34c>
          x2 = x1 + w;
 8021776:	9b06      	ldr	r3, [sp, #24]
 8021778:	eb03 080b 	add.w	r8, r3, fp
 802177c:	e741      	b.n	8021602 <CoreQuadView_ArrangeView+0x362>
            x1 = x2 - w;
 802177e:	9b08      	ldr	r3, [sp, #32]
 8021780:	9906      	ldr	r1, [sp, #24]
 8021782:	461a      	mov	r2, r3
 8021784:	eba3 0b01 	sub.w	fp, r3, r1
            x2 = aBounds.Point2.X;
 8021788:	4698      	mov	r8, r3
            x1 = x2 - w;
 802178a:	e5dc      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
            y1 = y2 - h;
 802178c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802178e:	e7df      	b.n	8021750 <CoreQuadView_ArrangeView+0x4b0>
          y2 = y1 + h;
 8021790:	9b07      	ldr	r3, [sp, #28]
 8021792:	9a03      	ldr	r2, [sp, #12]
 8021794:	189d      	adds	r5, r3, r2
 8021796:	e5d6      	b.n	8021346 <CoreQuadView_ArrangeView+0xa6>
            x1 = x2 - w;
 8021798:	9b06      	ldr	r3, [sp, #24]
 802179a:	eba8 0b03 	sub.w	fp, r8, r3
 802179e:	e730      	b.n	8021602 <CoreQuadView_ArrangeView+0x362>

080217a0 <CoreQuadView_MoveView>:
{
 80217a0:	b570      	push	{r4, r5, r6, lr}
 80217a2:	b08e      	sub	sp, #56	; 0x38
 80217a4:	ad04      	add	r5, sp, #16
 80217a6:	e885 0006 	stmia.w	r5, {r1, r2}
 80217aa:	4604      	mov	r4, r0
  if ( aFastMove )
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d039      	beq.n	8021824 <CoreQuadView_MoveView+0x84>
    _this->Point1 = EwMovePointPos( _this->Point1, aOffset );
 80217b0:	9b05      	ldr	r3, [sp, #20]
 80217b2:	9300      	str	r3, [sp, #0]
 80217b4:	ad02      	add	r5, sp, #8
 80217b6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80217ba:	e896 0006 	ldmia.w	r6, {r1, r2}
 80217be:	9b04      	ldr	r3, [sp, #16]
 80217c0:	4628      	mov	r0, r5
 80217c2:	f7f8 fb43 	bl	8019e4c <EwMovePointPos>
 80217c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80217ca:	e886 0003 	stmia.w	r6, {r0, r1}
    _this->Point2 = EwMovePointPos( _this->Point2, aOffset );
 80217ce:	9b05      	ldr	r3, [sp, #20]
 80217d0:	9300      	str	r3, [sp, #0]
 80217d2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80217d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80217da:	9b04      	ldr	r3, [sp, #16]
 80217dc:	4628      	mov	r0, r5
 80217de:	f7f8 fb35 	bl	8019e4c <EwMovePointPos>
 80217e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80217e6:	e886 0003 	stmia.w	r6, {r0, r1}
    _this->Point3 = EwMovePointPos( _this->Point3, aOffset );
 80217ea:	9b05      	ldr	r3, [sp, #20]
 80217ec:	9300      	str	r3, [sp, #0]
 80217ee:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80217f2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80217f6:	9b04      	ldr	r3, [sp, #16]
 80217f8:	4628      	mov	r0, r5
 80217fa:	f7f8 fb27 	bl	8019e4c <EwMovePointPos>
 80217fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021802:	e886 0003 	stmia.w	r6, {r0, r1}
    _this->Point4 = EwMovePointPos( _this->Point4, aOffset );
 8021806:	9b05      	ldr	r3, [sp, #20]
 8021808:	9300      	str	r3, [sp, #0]
 802180a:	3428      	adds	r4, #40	; 0x28
 802180c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021810:	4628      	mov	r0, r5
 8021812:	9b04      	ldr	r3, [sp, #16]
 8021814:	f7f8 fb1a 	bl	8019e4c <EwMovePointPos>
 8021818:	e895 0003 	ldmia.w	r5, {r0, r1}
 802181c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8021820:	b00e      	add	sp, #56	; 0x38
 8021822:	bd70      	pop	{r4, r5, r6, pc}
    CoreQuadView_OnSetPoint1( _this, EwMovePointPos( _this->Point1, aOffset ));
 8021824:	9b05      	ldr	r3, [sp, #20]
 8021826:	9300      	str	r3, [sp, #0]
 8021828:	ad06      	add	r5, sp, #24
 802182a:	9b04      	ldr	r3, [sp, #16]
 802182c:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8021830:	4628      	mov	r0, r5
 8021832:	f7f8 fb0b 	bl	8019e4c <EwMovePointPos>
 8021836:	e895 0006 	ldmia.w	r5, {r1, r2}
 802183a:	4620      	mov	r0, r4
 802183c:	f7ff fcb4 	bl	80211a8 <CoreQuadView_OnSetPoint1>
    CoreQuadView_OnSetPoint2( _this, EwMovePointPos( _this->Point2, aOffset ));
 8021840:	9b05      	ldr	r3, [sp, #20]
 8021842:	9300      	str	r3, [sp, #0]
 8021844:	ad08      	add	r5, sp, #32
 8021846:	9b04      	ldr	r3, [sp, #16]
 8021848:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
 802184c:	4628      	mov	r0, r5
 802184e:	f7f8 fafd 	bl	8019e4c <EwMovePointPos>
 8021852:	e895 0006 	ldmia.w	r5, {r1, r2}
 8021856:	4620      	mov	r0, r4
 8021858:	f7ff fc2a 	bl	80210b0 <CoreQuadView_OnSetPoint2>
    CoreQuadView_OnSetPoint3( _this, EwMovePointPos( _this->Point3, aOffset ));
 802185c:	9b05      	ldr	r3, [sp, #20]
 802185e:	9300      	str	r3, [sp, #0]
 8021860:	ad0a      	add	r5, sp, #40	; 0x28
 8021862:	9b04      	ldr	r3, [sp, #16]
 8021864:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8021868:	4628      	mov	r0, r5
 802186a:	f7f8 faef 	bl	8019e4c <EwMovePointPos>
 802186e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8021872:	4620      	mov	r0, r4
 8021874:	f7ff fba0 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
    CoreQuadView_OnSetPoint4( _this, EwMovePointPos( _this->Point4, aOffset ));
 8021878:	9b05      	ldr	r3, [sp, #20]
 802187a:	9300      	str	r3, [sp, #0]
 802187c:	ad0c      	add	r5, sp, #48	; 0x30
 802187e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8021882:	4628      	mov	r0, r5
 8021884:	9b04      	ldr	r3, [sp, #16]
 8021886:	f7f8 fae1 	bl	8019e4c <EwMovePointPos>
 802188a:	e895 0006 	ldmia.w	r5, {r1, r2}
 802188e:	4620      	mov	r0, r4
}
 8021890:	b00e      	add	sp, #56	; 0x38
 8021892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    CoreQuadView_OnSetPoint4( _this, EwMovePointPos( _this->Point4, aOffset ));
 8021896:	f7ff bb13 	b.w	8020ec0 <CoreQuadView_OnSetPoint4>
 802189a:	bf00      	nop

0802189c <CoreQuadView_IsPointInside>:
{
 802189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218a0:	b08b      	sub	sp, #44	; 0x2c
 80218a2:	4603      	mov	r3, r0
 80218a4:	4668      	mov	r0, sp
 80218a6:	e880 0006 	stmia.w	r0, {r1, r2}
  points[ 0 ] = _this->Point1;
 80218aa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80218ae:	4617      	mov	r7, r2
 80218b0:	aa02      	add	r2, sp, #8
 80218b2:	e882 0003 	stmia.w	r2, {r0, r1}
  points[ 1 ] = _this->Point2;
 80218b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80218ba:	ac04      	add	r4, sp, #16
 80218bc:	e884 0003 	stmia.w	r4, {r0, r1}
  points[ 2 ] = _this->Point3;
 80218c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80218c4:	ac06      	add	r4, sp, #24
 80218c6:	e884 0003 	stmia.w	r4, {r0, r1}
  points[ 3 ] = _this->Point4;
 80218ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80218ce:	ab0a      	add	r3, sp, #40	; 0x28
 80218d0:	e903 0003 	stmdb	r3, {r0, r1}
 80218d4:	e9dd 4108 	ldrd	r4, r1, [sp, #32]
  XBool inside2 = 0;
 80218d8:	f04f 0e00 	mov.w	lr, #0
 80218dc:	f8dd c000 	ldr.w	ip, [sp]
  XBool inside1 = 0;
 80218e0:	4670      	mov	r0, lr
 80218e2:	4698      	mov	r8, r3
        inside2 = (XBool)!inside2;
 80218e4:	460d      	mov	r5, r1
    XInt32 vert1Y = points[ EwCheckIndex( i, 4 )].Y;
 80218e6:	6851      	ldr	r1, [r2, #4]
    if ((( vert1Y > aPoint.Y ) != ( vert2Y > aPoint.Y )) || (( vert1Y < aPoint.Y ) 
 80218e8:	42bd      	cmp	r5, r7
 80218ea:	bfd4      	ite	le
 80218ec:	f04f 0a00 	movle.w	sl, #0
 80218f0:	f04f 0a01 	movgt.w	sl, #1
 80218f4:	4626      	mov	r6, r4
 80218f6:	428f      	cmp	r7, r1
    XInt32 vert1X = points[ EwCheckIndex( i, 4 )].X;
 80218f8:	6814      	ldr	r4, [r2, #0]
    if ((( vert1Y > aPoint.Y ) != ( vert2Y > aPoint.Y )) || (( vert1Y < aPoint.Y ) 
 80218fa:	bfac      	ite	ge
 80218fc:	f04f 0b00 	movge.w	fp, #0
 8021900:	f04f 0b01 	movlt.w	fp, #1
      XInt32 x = ((( vert2X - vert1X ) * ( aPoint.Y - vert1Y )) / ( vert2Y - vert1Y )) 
 8021904:	1b36      	subs	r6, r6, r4
 8021906:	1a7b      	subs	r3, r7, r1
    if ((( vert1Y > aPoint.Y ) != ( vert2Y > aPoint.Y )) || (( vert1Y < aPoint.Y ) 
 8021908:	45d3      	cmp	fp, sl
      XInt32 x = ((( vert2X - vert1X ) * ( aPoint.Y - vert1Y )) / ( vert2Y - vert1Y )) 
 802190a:	fb03 f306 	mul.w	r3, r3, r6
 802190e:	eba5 0901 	sub.w	r9, r5, r1
 8021912:	f080 0601 	eor.w	r6, r0, #1
    if ((( vert1Y > aPoint.Y ) != ( vert2Y > aPoint.Y )) || (( vert1Y < aPoint.Y ) 
 8021916:	d012      	beq.n	802193e <CoreQuadView_IsPointInside+0xa2>
      XInt32 x = ((( vert2X - vert1X ) * ( aPoint.Y - vert1Y )) / ( vert2Y - vert1Y )) 
 8021918:	fb93 f3f9 	sdiv	r3, r3, r9
 802191c:	4423      	add	r3, r4
      if ( aPoint.X > x )
 802191e:	459c      	cmp	ip, r3
 8021920:	dd09      	ble.n	8021936 <CoreQuadView_IsPointInside+0x9a>
 8021922:	b2f0      	uxtb	r0, r6
  while ( i < 4 )
 8021924:	3208      	adds	r2, #8
 8021926:	4542      	cmp	r2, r8
 8021928:	d1dc      	bne.n	80218e4 <CoreQuadView_IsPointInside+0x48>
}
 802192a:	2800      	cmp	r0, #0
 802192c:	bf08      	it	eq
 802192e:	4670      	moveq	r0, lr
 8021930:	b00b      	add	sp, #44	; 0x2c
 8021932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021936:	bfb8      	it	lt
 8021938:	f08e 0e01 	eorlt.w	lr, lr, #1
 802193c:	e7f2      	b.n	8021924 <CoreQuadView_IsPointInside+0x88>
    if ((( vert1Y > aPoint.Y ) != ( vert2Y > aPoint.Y )) || (( vert1Y < aPoint.Y ) 
 802193e:	42bd      	cmp	r5, r7
 8021940:	bfac      	ite	ge
 8021942:	2500      	movge	r5, #0
 8021944:	2501      	movlt	r5, #1
 8021946:	428f      	cmp	r7, r1
 8021948:	bfd4      	ite	le
 802194a:	f04f 0a00 	movle.w	sl, #0
 802194e:	f04f 0a01 	movgt.w	sl, #1
 8021952:	45aa      	cmp	sl, r5
 8021954:	d1e0      	bne.n	8021918 <CoreQuadView_IsPointInside+0x7c>
 8021956:	e7e5      	b.n	8021924 <CoreQuadView_IsPointInside+0x88>

08021958 <CoreQuadView_HasRectShape>:
  return (XBool)((((( _this->Point1.X == _this->Point4.X ) && ( _this->Point2.X 
 8021958:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802195a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802195c:	6b81      	ldr	r1, [r0, #56]	; 0x38
    == _this->Point4.Y )) || (((( _this->Point1.X == _this->Point2.X ) && ( _this->Point3.X 
 802195e:	4293      	cmp	r3, r2
{
 8021960:	b430      	push	{r4, r5}
    == _this->Point4.Y )) || (((( _this->Point1.X == _this->Point2.X ) && ( _this->Point3.X 
 8021962:	d004      	beq.n	802196e <CoreQuadView_HasRectShape+0x16>
 8021964:	428b      	cmp	r3, r1
 8021966:	d00f      	beq.n	8021988 <CoreQuadView_HasRectShape+0x30>
 8021968:	2000      	movs	r0, #0
}
 802196a:	bc30      	pop	{r4, r5}
 802196c:	4770      	bx	lr
  return (XBool)((((( _this->Point1.X == _this->Point4.X ) && ( _this->Point2.X 
 802196e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8021970:	42a1      	cmp	r1, r4
 8021972:	d1f7      	bne.n	8021964 <CoreQuadView_HasRectShape+0xc>
    == _this->Point3.X )) && ( _this->Point1.Y == _this->Point2.Y )) && ( _this->Point3.Y 
 8021974:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8021976:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8021978:	42a5      	cmp	r5, r4
 802197a:	d1f3      	bne.n	8021964 <CoreQuadView_HasRectShape+0xc>
 802197c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 802197e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8021980:	42a5      	cmp	r5, r4
 8021982:	d1ef      	bne.n	8021964 <CoreQuadView_HasRectShape+0xc>
 8021984:	2001      	movs	r0, #1
 8021986:	e7f0      	b.n	802196a <CoreQuadView_HasRectShape+0x12>
    == _this->Point4.Y )) || (((( _this->Point1.X == _this->Point2.X ) && ( _this->Point3.X 
 8021988:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802198a:	429a      	cmp	r2, r3
 802198c:	d1ec      	bne.n	8021968 <CoreQuadView_HasRectShape+0x10>
    == _this->Point4.X )) && ( _this->Point1.Y == _this->Point4.Y )) && ( _this->Point2.Y 
 802198e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021990:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8021992:	429a      	cmp	r2, r3
 8021994:	d1e8      	bne.n	8021968 <CoreQuadView_HasRectShape+0x10>
 8021996:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8021998:	6b40      	ldr	r0, [r0, #52]	; 0x34
 802199a:	1a18      	subs	r0, r3, r0
 802199c:	fab0 f080 	clz	r0, r0
 80219a0:	0940      	lsrs	r0, r0, #5
 80219a2:	e7e2      	b.n	802196a <CoreQuadView_HasRectShape+0x12>

080219a4 <CoreSimpleTouchHandler_CursorHitTest>:
{
 80219a4:	b084      	sub	sp, #16
 80219a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219aa:	b0a1      	sub	sp, #132	; 0x84
 80219ac:	ad2b      	add	r5, sp, #172	; 0xac
 80219ae:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80219b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80219b4:	4604      	mov	r4, r0
 80219b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
  if (( aDedicatedView != 0 ) && ( aDedicatedView != (CoreView)_this ))
 80219b8:	b10e      	cbz	r6, 80219be <CoreSimpleTouchHandler_CursorHitTest+0x1a>
 80219ba:	4286      	cmp	r6, r0
 80219bc:	d13b      	bne.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
  if (( aStrikeCount < 1 ) || ( aStrikeCount > _this->MaxStrikeCount ))
 80219be:	2b00      	cmp	r3, #0
 80219c0:	dd39      	ble.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
 80219c2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80219c6:	429a      	cmp	r2, r3
 80219c8:	db35      	blt.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
  if ( _this->state >= 33554432 )
 80219ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80219cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80219d0:	d231      	bcs.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
  if (( _this->state >= 16777216 ) && (( _this->state & ( 4096 << aFinger )) == 
 80219d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80219d6:	d305      	bcc.n	80219e4 <CoreSimpleTouchHandler_CursorHitTest+0x40>
 80219d8:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80219da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80219de:	408a      	lsls	r2, r1
 80219e0:	421a      	tst	r2, r3
 80219e2:	d028      	beq.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
  if ( !!( aRetargetReason & _this->RetargetCondition ))
 80219e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80219e8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80219ea:	421a      	tst	r2, r3
 80219ec:	d123      	bne.n	8021a36 <CoreSimpleTouchHandler_CursorHitTest+0x92>
  if ( CoreQuadView_HasRectShape((CoreQuadView)_this ))
 80219ee:	4620      	mov	r0, r4
 80219f0:	f7ff ffb2 	bl	8021958 <CoreQuadView_HasRectShape>
 80219f4:	4606      	mov	r6, r0
 80219f6:	2800      	cmp	r0, #0
 80219f8:	d051      	beq.n	8021a9e <CoreSimpleTouchHandler_CursorHitTest+0xfa>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 80219fa:	6823      	ldr	r3, [r4, #0]
 80219fc:	ae0e      	add	r6, sp, #56	; 0x38
 80219fe:	4630      	mov	r0, r6
 8021a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021a02:	4621      	mov	r1, r4
 8021a04:	4798      	blx	r3
    XRect r = EwIntersectRect( aArea, CoreView__GetExtent( _this ));
 8021a06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8021a0a:	f10d 0c04 	add.w	ip, sp, #4
 8021a0e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8021a10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8021a14:	ae0a      	add	r6, sp, #40	; 0x28
 8021a16:	9700      	str	r7, [sp, #0]
 8021a18:	4630      	mov	r0, r6
 8021a1a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8021a1e:	f7f8 fadb 	bl	8019fd8 <EwIntersectRect>
    if ( !EwIsRectEmpty( r ))
 8021a22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    XRect r = EwIntersectRect( aArea, CoreView__GetExtent( _this ));
 8021a26:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 8021a2a:	e9dd a60a 	ldrd	sl, r6, [sp, #40]	; 0x28
    if ( !EwIsRectEmpty( r ))
 8021a2e:	f7f8 faad 	bl	8019f8c <EwIsRectEmpty>
 8021a32:	4607      	mov	r7, r0
 8021a34:	b130      	cbz	r0, 8021a44 <CoreSimpleTouchHandler_CursorHitTest+0xa0>
    return 0;
 8021a36:	2500      	movs	r5, #0
}
 8021a38:	4628      	mov	r0, r5
 8021a3a:	b021      	add	sp, #132	; 0x84
 8021a3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a40:	b004      	add	sp, #16
 8021a42:	4770      	bx	lr
      XPoint center = EwGetRectCenter( aArea );
 8021a44:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021a46:	9300      	str	r3, [sp, #0]
 8021a48:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8021a4c:	a806      	add	r0, sp, #24
 8021a4e:	f7f8 fbf7 	bl	801a240 <EwGetRectCenter>
 8021a52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
      if ( center.X < r.Point1.X )
 8021a56:	4592      	cmp	sl, r2
        offset.X = ( r.Point1.X - center.X );
 8021a58:	bfc8      	it	gt
 8021a5a:	ebaa 0702 	subgt.w	r7, sl, r2
      if ( center.X >= r.Point2.X )
 8021a5e:	4591      	cmp	r9, r2
        offset.X = (( r.Point2.X - center.X ) - 1 );
 8021a60:	bfdc      	itt	le
 8021a62:	eba9 0702 	suble.w	r7, r9, r2
 8021a66:	f107 37ff 	addle.w	r7, r7, #4294967295
      if ( center.Y < r.Point1.Y )
 8021a6a:	429e      	cmp	r6, r3
      XPoint offset = _Const0000;
 8021a6c:	bfd4      	ite	le
 8021a6e:	2600      	movle	r6, #0
        offset.Y = ( r.Point1.Y - center.Y );
 8021a70:	1af6      	subgt	r6, r6, r3
      if ( center.Y >= r.Point2.Y )
 8021a72:	4598      	cmp	r8, r3
        offset.Y = (( r.Point2.Y - center.Y ) - 1 );
 8021a74:	bfd8      	it	le
 8021a76:	eba8 0603 	suble.w	r6, r8, r3
      return CoreCursorHit_Initialize( EwNewObject( CoreCursorHit, 0 ), ((CoreView)_this ), 
 8021a7a:	4836      	ldr	r0, [pc, #216]	; (8021b54 <CoreSimpleTouchHandler_CursorHitTest+0x1b0>)
 8021a7c:	f04f 0100 	mov.w	r1, #0
        offset.Y = (( r.Point2.Y - center.Y ) - 1 );
 8021a80:	bfd8      	it	le
 8021a82:	f106 36ff 	addle.w	r6, r6, #4294967295
      return CoreCursorHit_Initialize( EwNewObject( CoreCursorHit, 0 ), ((CoreView)_this ), 
 8021a86:	f7f7 fde5 	bl	8019654 <EwNewObjectIndirect>
  _this->Deviation = ( aOffset.X * aOffset.X ) + ( aOffset.Y * aOffset.Y );
 8021a8a:	fb06 f306 	mul.w	r3, r6, r6
 8021a8e:	fb07 3307 	mla	r3, r7, r7, r3
  _this->Offset = aOffset;
 8021a92:	e9c0 7606 	strd	r7, r6, [r0, #24]
      return CoreCursorHit_Initialize( EwNewObject( CoreCursorHit, 0 ), ((CoreView)_this ), 
 8021a96:	4605      	mov	r5, r0
  _this->View = aView;
 8021a98:	6104      	str	r4, [r0, #16]
  _this->Deviation = ( aOffset.X * aOffset.X ) + ( aOffset.Y * aOffset.Y );
 8021a9a:	6143      	str	r3, [r0, #20]
  return _this;
 8021a9c:	e7cc      	b.n	8021a38 <CoreSimpleTouchHandler_CursorHitTest+0x94>
    XPoint points[ 9 ] = {0};
 8021a9e:	af0e      	add	r7, sp, #56	; 0x38
 8021aa0:	2248      	movs	r2, #72	; 0x48
 8021aa2:	4631      	mov	r1, r6
 8021aa4:	4638      	mov	r0, r7
 8021aa6:	e9dd ab2b 	ldrd	sl, fp, [sp, #172]	; 0xac
 8021aaa:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 8021aae:	f00f f9e3 	bl	8030e78 <memset>
    points[ 0 ] = EwGetRectCenter( aArea );
 8021ab2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ab4:	9300      	str	r3, [sp, #0]
 8021ab6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8021aba:	4638      	mov	r0, r7
 8021abc:	f7f8 fbc0 	bl	801a240 <EwGetRectCenter>
    points[ 1 ] = points[ 0 ];
 8021ac0:	e897 0003 	ldmia.w	r7, {r0, r1}
 8021ac4:	ab10      	add	r3, sp, #64	; 0x40
 8021ac6:	e883 0003 	stmia.w	r3, {r0, r1}
    points[ 2 ] = points[ 0 ];
 8021aca:	ab12      	add	r3, sp, #72	; 0x48
 8021acc:	e883 0003 	stmia.w	r3, {r0, r1}
    points[ 3 ] = points[ 0 ];
 8021ad0:	ab14      	add	r3, sp, #80	; 0x50
 8021ad2:	e883 0003 	stmia.w	r3, {r0, r1}
    points[ 4 ] = points[ 0 ];
 8021ad6:	ab16      	add	r3, sp, #88	; 0x58
 8021ad8:	e883 0003 	stmia.w	r3, {r0, r1}
    points[ 6 ] = EwNewPoint( aArea.Point2.X, aArea.Point1.Y );
 8021adc:	465a      	mov	r2, fp
 8021ade:	4649      	mov	r1, r9
 8021ae0:	a81a      	add	r0, sp, #104	; 0x68
    points[ 5 ] = aArea.Point1;
 8021ae2:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
    points[ 3 ].X = aArea.Point2.X;
 8021ae6:	e9cd b913 	strd	fp, r9, [sp, #76]	; 0x4c
    points[ 1 ].X = aArea.Point1.X;
 8021aea:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    points[ 4 ].Y = aArea.Point2.Y;
 8021aee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    points[ 6 ] = EwNewPoint( aArea.Point2.X, aArea.Point1.Y );
 8021af2:	f7f8 f977 	bl	8019de4 <EwNewPoint>
    points[ 7 ] = EwNewPoint( aArea.Point1.X, aArea.Point2.Y );
 8021af6:	4642      	mov	r2, r8
 8021af8:	4651      	mov	r1, sl
 8021afa:	a81c      	add	r0, sp, #112	; 0x70
 8021afc:	f7f8 f972 	bl	8019de4 <EwNewPoint>
    points[ 8 ] = aArea.Point2;
 8021b00:	e9cd 981e 	strd	r9, r8, [sp, #120]	; 0x78
      if ( CoreQuadView_IsPointInside((CoreQuadView)_this, points[ EwCheckIndex( 
 8021b04:	ab20      	add	r3, sp, #128	; 0x80
 8021b06:	eb03 07c6 	add.w	r7, r3, r6, lsl #3
 8021b0a:	3f48      	subs	r7, #72	; 0x48
 8021b0c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8021b10:	4620      	mov	r0, r4
    for ( i = 0; i < 9; i = i + 1 )
 8021b12:	3601      	adds	r6, #1
      if ( CoreQuadView_IsPointInside((CoreQuadView)_this, points[ EwCheckIndex( 
 8021b14:	f7ff fec2 	bl	802189c <CoreQuadView_IsPointInside>
 8021b18:	b918      	cbnz	r0, 8021b22 <CoreSimpleTouchHandler_CursorHitTest+0x17e>
    for ( i = 0; i < 9; i = i + 1 )
 8021b1a:	2e09      	cmp	r6, #9
 8021b1c:	d1f2      	bne.n	8021b04 <CoreSimpleTouchHandler_CursorHitTest+0x160>
  return 0;
 8021b1e:	4605      	mov	r5, r0
 8021b20:	e78a      	b.n	8021a38 <CoreSimpleTouchHandler_CursorHitTest+0x94>
        return CoreCursorHit_Initialize( EwNewObject( CoreCursorHit, 0 ), ((CoreView)_this ), 
 8021b22:	2100      	movs	r1, #0
 8021b24:	480b      	ldr	r0, [pc, #44]	; (8021b54 <CoreSimpleTouchHandler_CursorHitTest+0x1b0>)
 8021b26:	f7f7 fd95 	bl	8019654 <EwNewObjectIndirect>
 8021b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b2c:	9300      	str	r3, [sp, #0]
 8021b2e:	4605      	mov	r5, r0
 8021b30:	e897 0006 	ldmia.w	r7, {r1, r2}
 8021b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021b36:	a808      	add	r0, sp, #32
 8021b38:	f7f8 f976 	bl	8019e28 <EwMovePointNeg>
 8021b3c:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
  _this->Deviation = ( aOffset.X * aOffset.X ) + ( aOffset.Y * aOffset.Y );
 8021b40:	fb01 f201 	mul.w	r2, r1, r1
 8021b44:	fb03 2203 	mla	r2, r3, r3, r2
  _this->Offset = aOffset;
 8021b48:	e9c5 2305 	strd	r2, r3, [r5, #20]
  _this->View = aView;
 8021b4c:	612c      	str	r4, [r5, #16]
  _this->Offset = aOffset;
 8021b4e:	61e9      	str	r1, [r5, #28]
  _this->Deviation = ( aOffset.X * aOffset.X ) + ( aOffset.Y * aOffset.Y );
 8021b50:	e772      	b.n	8021a38 <CoreSimpleTouchHandler_CursorHitTest+0x94>
 8021b52:	bf00      	nop
 8021b54:	08037ba8 	.word	0x08037ba8

08021b58 <CoreRectView__OnSetBounds>:
{
 8021b58:	b084      	sub	sp, #16
 8021b5a:	b530      	push	{r4, r5, lr}
 8021b5c:	b083      	sub	sp, #12
 8021b5e:	ac07      	add	r4, sp, #28
 8021b60:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  ((CoreRectView)_this)->_.VMT->OnSetBounds((CoreRectView)_this, value );
 8021b64:	6805      	ldr	r5, [r0, #0]
 8021b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b68:	9300      	str	r3, [sp, #0]
 8021b6a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8021b6e:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8021b70:	47a0      	blx	r4
}
 8021b72:	b003      	add	sp, #12
 8021b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b78:	b004      	add	sp, #16
 8021b7a:	4770      	bx	lr

08021b7c <CoreGroup_drawContent>:
{
 8021b7c:	b082      	sub	sp, #8
 8021b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b82:	ed2d 8b02 	vpush	{d8}
 8021b86:	b0ad      	sub	sp, #180	; 0xb4
  XRect clip = _Const0001;
 8021b88:	f10d 0930 	add.w	r9, sp, #48	; 0x30
{
 8021b8c:	ee08 1a10 	vmov	s16, r1
 8021b90:	a938      	add	r1, sp, #224	; 0xe0
 8021b92:	e881 000c 	stmia.w	r1, {r2, r3}
  CoreView view = _this->first;
 8021b96:	6b84      	ldr	r4, [r0, #56]	; 0x38
  XRect clip = _Const0001;
 8021b98:	2300      	movs	r3, #0
 8021b9a:	e9c9 3302 	strd	r3, r3, [r9, #8]
 8021b9e:	f8c9 3004 	str.w	r3, [r9, #4]
 8021ba2:	930c      	str	r3, [sp, #48]	; 0x30
{
 8021ba4:	f89d 30fc 	ldrb.w	r3, [sp, #252]	; 0xfc
 8021ba8:	9309      	str	r3, [sp, #36]	; 0x24
  while ( view != 0 )
 8021baa:	2c00      	cmp	r4, #0
 8021bac:	f000 809f 	beq.w	8021cee <CoreGroup_drawContent+0x172>
  XBool outlineVisible = 1;
 8021bb0:	2301      	movs	r3, #1
 8021bb2:	9307      	str	r3, [sp, #28]
      clip = EwIntersectRect( aClip, EwMoveRectPos( outlineView->Super1.Bounds, 
 8021bb4:	ab14      	add	r3, sp, #80	; 0x50
      CoreOutline outlineView = EwCastObject( view, CoreOutline );
 8021bb6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8021cfc <CoreGroup_drawContent+0x180>
      clip = EwIntersectRect( aClip, EwMoveRectPos( outlineView->Super1.Bounds, 
 8021bba:	9308      	str	r3, [sp, #32]
 8021bbc:	ad01      	add	r5, sp, #4
 8021bbe:	e04f      	b.n	8021c60 <CoreGroup_drawContent+0xe4>
    if ((( view->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8021bc0:	07da      	lsls	r2, r3, #31
 8021bc2:	d54a      	bpl.n	8021c5a <CoreGroup_drawContent+0xde>
      if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021bc4:	055b      	lsls	r3, r3, #21
 8021bc6:	d573      	bpl.n	8021cb0 <CoreGroup_drawContent+0x134>
        if ( outlineVisible )
 8021bc8:	9b07      	ldr	r3, [sp, #28]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d045      	beq.n	8021c5a <CoreGroup_drawContent+0xde>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8021bce:	6822      	ldr	r2, [r4, #0]
 8021bd0:	ae18      	add	r6, sp, #96	; 0x60
 8021bd2:	4630      	mov	r0, r6
 8021bd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8021bd6:	4621      	mov	r1, r4
          XRect area = EwIntersectRect( EwMoveRectPos( CoreView__GetExtent( view ), 
 8021bd8:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8021bdc:	4790      	blx	r2
          XRect area = EwIntersectRect( EwMoveRectPos( CoreView__GetExtent( view ), 
 8021bde:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8021be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8021be6:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8021bea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8021bee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021bf0:	9600      	str	r6, [sp, #0]
 8021bf2:	4650      	mov	r0, sl
 8021bf4:	f7f8 facf 	bl	801a196 <EwMoveRectPos>
 8021bf8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8021bfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8021c00:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 8021c04:	ae10      	add	r6, sp, #64	; 0x40
 8021c06:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8021c08:	4630      	mov	r0, r6
        XRect area = EwIntersectRect( EwMoveRectPos( CoreView__GetExtent( view ), 
 8021c0a:	9700      	str	r7, [sp, #0]
 8021c0c:	f7f8 f9e4 	bl	8019fd8 <EwIntersectRect>
        if ( !EwIsRectEmpty( area ))
 8021c10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8021c14:	f7f8 f9ba 	bl	8019f8c <EwIsRectEmpty>
 8021c18:	b9f8      	cbnz	r0, 8021c5a <CoreGroup_drawContent+0xde>
          CoreView__Draw( view, aCanvas, area, aOffset, aOpacity, aBlend );
 8021c1a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8021c1e:	ae28      	add	r6, sp, #160	; 0xa0
 8021c20:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8021c24:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8021c28:	ab0a      	add	r3, sp, #40	; 0x28
 8021c2a:	e883 0003 	stmia.w	r3, {r0, r1}
  ((CoreView)_this)->_.VMT->Draw((CoreView)_this, aCanvas, aClip, aOffset, aOpacity
 8021c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c30:	f8d4 c000 	ldr.w	ip, [r4]
 8021c34:	9205      	str	r2, [sp, #20]
 8021c36:	ab02      	add	r3, sp, #8
 8021c38:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8021c3a:	9204      	str	r2, [sp, #16]
 8021c3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8021c40:	ab2c      	add	r3, sp, #176	; 0xb0
 8021c42:	e913 0003 	ldmdb	r3, {r0, r1}
 8021c46:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021c4a:	ee18 1a10 	vmov	r1, s16
 8021c4e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8021c52:	4620      	mov	r0, r4
 8021c54:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
 8021c58:	47b0      	blx	r6
    view = view->next;
 8021c5a:	6924      	ldr	r4, [r4, #16]
  while ( view != 0 )
 8021c5c:	2c00      	cmp	r4, #0
 8021c5e:	d046      	beq.n	8021cee <CoreGroup_drawContent+0x172>
    if ((( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8021c60:	6a23      	ldr	r3, [r4, #32]
 8021c62:	0599      	lsls	r1, r3, #22
 8021c64:	d5ac      	bpl.n	8021bc0 <CoreGroup_drawContent+0x44>
      CoreOutline outlineView = EwCastObject( view, CoreOutline );
 8021c66:	4641      	mov	r1, r8
 8021c68:	4620      	mov	r0, r4
 8021c6a:	f7f7 fdff 	bl	801986c <EwCastObject>
 8021c6e:	4682      	mov	sl, r0
      clip = EwIntersectRect( aClip, EwMoveRectPos( outlineView->Super1.Bounds, 
 8021c70:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8021c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8021c78:	9e08      	ldr	r6, [sp, #32]
 8021c7a:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8021c7e:	9200      	str	r2, [sp, #0]
 8021c80:	f10a 0328 	add.w	r3, sl, #40	; 0x28
 8021c84:	4630      	mov	r0, r6
 8021c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021c88:	f7f8 fa85 	bl	801a196 <EwMoveRectPos>
 8021c8c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8021c90:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8021c92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8021c96:	9600      	str	r6, [sp, #0]
 8021c98:	ab38      	add	r3, sp, #224	; 0xe0
 8021c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021c9c:	4648      	mov	r0, r9
 8021c9e:	f7f8 f99b 	bl	8019fd8 <EwIntersectRect>
      == CoreViewStateVisible );
 8021ca2:	f8da 2020 	ldr.w	r2, [sl, #32]
 8021ca6:	6a23      	ldr	r3, [r4, #32]
      outlineVisible = (( outlineView->Super2.viewState & CoreViewStateVisible ) 
 8021ca8:	f002 0201 	and.w	r2, r2, #1
 8021cac:	9207      	str	r2, [sp, #28]
 8021cae:	e787      	b.n	8021bc0 <CoreGroup_drawContent+0x44>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8021cb0:	6822      	ldr	r2, [r4, #0]
 8021cb2:	ae20      	add	r6, sp, #128	; 0x80
 8021cb4:	4630      	mov	r0, r6
 8021cb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8021cb8:	4621      	mov	r1, r4
        XRect area = EwIntersectRect( EwMoveRectPos( CoreView__GetExtent( view ), 
 8021cba:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8021cbe:	4790      	blx	r2
        XRect area = EwIntersectRect( EwMoveRectPos( CoreView__GetExtent( view ), 
 8021cc0:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8021cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8021cc8:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
 8021ccc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8021cd0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021cd2:	9600      	str	r6, [sp, #0]
 8021cd4:	4650      	mov	r0, sl
 8021cd6:	f7f8 fa5e 	bl	801a196 <EwMoveRectPos>
 8021cda:	ab38      	add	r3, sp, #224	; 0xe0
 8021cdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021cde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8021ce2:	ae10      	add	r6, sp, #64	; 0x40
 8021ce4:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 8021ce8:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8021cea:	4630      	mov	r0, r6
 8021cec:	e78d      	b.n	8021c0a <CoreGroup_drawContent+0x8e>
}
 8021cee:	b02d      	add	sp, #180	; 0xb4
 8021cf0:	ecbd 8b02 	vpop	{d8}
 8021cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cf8:	b002      	add	sp, #8
 8021cfa:	4770      	bx	lr
 8021cfc:	08037e04 	.word	0x08037e04

08021d00 <CoreGroup_Draw>:
{
 8021d00:	b082      	sub	sp, #8
 8021d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d06:	b088      	sub	sp, #32
 8021d08:	4604      	mov	r4, r0
 8021d0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  aOpacity = (( aOpacity + 1 ) * _this->Opacity ) >> 8;
 8021d0c:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
 8021d0e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
  aOpacity = (( aOpacity + 1 ) * _this->Opacity ) >> 8;
 8021d12:	fb05 0000 	mla	r0, r5, r0, r0
{
 8021d16:	460f      	mov	r7, r1
 8021d18:	a90e      	add	r1, sp, #56	; 0x38
 8021d1a:	e881 000c 	stmia.w	r1, {r2, r3}
  aOpacity = (( aOpacity + 1 ) * _this->Opacity ) >> 8;
 8021d1e:	1205      	asrs	r5, r0, #8
  aBlend = (XBool)( aBlend && (( _this->Super2.viewState & CoreViewStateAlphaBlended ) 
 8021d20:	b116      	cbz	r6, 8021d28 <CoreGroup_Draw+0x28>
 8021d22:	6a26      	ldr	r6, [r4, #32]
 8021d24:	f3c6 0640 	ubfx	r6, r6, #1, #1
  CoreGroup_drawContent( _this, aCanvas, aClip, EwMovePointPos( aOffset, _this->Super1.Bounds.Point1 ), 
 8021d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021d2a:	9300      	str	r3, [sp, #0]
 8021d2c:	f10d 0818 	add.w	r8, sp, #24
 8021d30:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8021d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021d36:	4640      	mov	r0, r8
 8021d38:	f7f8 f888 	bl	8019e4c <EwMovePointPos>
 8021d3c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021d40:	ab02      	add	r3, sp, #8
 8021d42:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8021d46:	e883 0003 	stmia.w	r3, {r0, r1}
 8021d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8021d4e:	ab0e      	add	r3, sp, #56	; 0x38
 8021d50:	cb0c      	ldmia	r3, {r2, r3}
 8021d52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021d56:	4639      	mov	r1, r7
 8021d58:	4620      	mov	r0, r4
 8021d5a:	f7ff ff0f 	bl	8021b7c <CoreGroup_drawContent>
}
 8021d5e:	b008      	add	sp, #32
 8021d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021d64:	b002      	add	sp, #8
 8021d66:	4770      	bx	lr

08021d68 <CoreRoot_Draw>:
{
 8021d68:	b082      	sub	sp, #8
 8021d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fullScreenUpdate = (XBool)EwFullScreenUpdate;
 8021d6e:	4c2d      	ldr	r4, [pc, #180]	; (8021e24 <CoreRoot_Draw+0xbc>)
{
 8021d70:	b095      	sub	sp, #84	; 0x54
  if ( !fullScreenUpdate )
 8021d72:	f894 8000 	ldrb.w	r8, [r4]
{
 8021d76:	f89d 9094 	ldrb.w	r9, [sp, #148]	; 0x94
 8021d7a:	460d      	mov	r5, r1
 8021d7c:	a91e      	add	r1, sp, #120	; 0x78
 8021d7e:	e881 000c 	stmia.w	r1, {r2, r3}
 8021d82:	4604      	mov	r4, r0
    GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( EwMoveRectPos( 
 8021d84:	ae22      	add	r6, sp, #136	; 0x88
  if ( !fullScreenUpdate )
 8021d86:	f1b8 0f00 	cmp.w	r8, #0
 8021d8a:	d017      	beq.n	8021dbc <CoreRoot_Draw+0x54>
  CoreGroup_Draw((CoreGroup)_this, aCanvas, aClip, aOffset, aOpacity, aBlend );
 8021d8c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8021d90:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021d92:	f8cd 9014 	str.w	r9, [sp, #20]
 8021d96:	ab02      	add	r3, sp, #8
 8021d98:	9204      	str	r2, [sp, #16]
 8021d9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8021d9e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8021da2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021da6:	ab1e      	add	r3, sp, #120	; 0x78
 8021da8:	cb0c      	ldmia	r3, {r2, r3}
 8021daa:	4629      	mov	r1, r5
 8021dac:	4620      	mov	r0, r4
 8021dae:	f7ff ffa7 	bl	8021d00 <CoreGroup_Draw>
}
 8021db2:	b015      	add	sp, #84	; 0x54
 8021db4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db8:	b002      	add	sp, #8
 8021dba:	4770      	bx	lr
    GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( EwMoveRectPos( 
 8021dbc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8021dc0:	af01      	add	r7, sp, #4
 8021dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021dc4:	e9c7 0100 	strd	r0, r1, [r7]
 8021dc8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8021dcc:	9300      	str	r3, [sp, #0]
 8021dce:	ab1e      	add	r3, sp, #120	; 0x78
 8021dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021dd2:	4658      	mov	r0, fp
 8021dd4:	f7f8 f9df 	bl	801a196 <EwMoveRectPos>
 8021dd8:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8021ddc:	970b      	str	r7, [sp, #44]	; 0x2c
 8021dde:	e9c7 0100 	strd	r0, r1, [r7]
 8021de2:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8021de6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021de8:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 8021dec:	4650      	mov	r0, sl
 8021dee:	9700      	str	r7, [sp, #0]
 8021df0:	f7f8 f9d1 	bl	801a196 <EwMoveRectPos>
 8021df4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8021df8:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8021e28 <CoreRoot_Draw+0xc0>
 8021dfc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021dfe:	f8dc c000 	ldr.w	ip, [ip]
 8021e02:	f8cd c014 	str.w	ip, [sp, #20]
 8021e06:	e9cd c808 	strd	ip, r8, [sp, #32]
 8021e0a:	e9cd cc06 	strd	ip, ip, [sp, #24]
 8021e0e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8021e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021e14:	9300      	str	r3, [sp, #0]
 8021e16:	ab1e      	add	r3, sp, #120	; 0x78
 8021e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021e1a:	4628      	mov	r0, r5
 8021e1c:	f003 fcb4 	bl	8025788 <GraphicsCanvas_FillRectangle>
 8021e20:	e7b4      	b.n	8021d8c <CoreRoot_Draw+0x24>
 8021e22:	bf00      	nop
 8021e24:	200001e4 	.word	0x200001e4
 8021e28:	08037afc 	.word	0x08037afc

08021e2c <CoreGroup_recalculateLayout>:
{
 8021e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e30:	b097      	sub	sp, #92	; 0x5c
  XRect groupBounds = EwGetRectORect( _this->Super1.Bounds );
 8021e32:	6b42      	ldr	r2, [r0, #52]	; 0x34
  XBool groupLayout = (( _this->Super2.viewState & CoreViewStateUpdateLayout ) == 
 8021e34:	6a05      	ldr	r5, [r0, #32]
  XRect groupBounds = EwGetRectORect( _this->Super1.Bounds );
 8021e36:	9200      	str	r2, [sp, #0]
{
 8021e38:	4680      	mov	r8, r0
  XRect groupBounds = EwGetRectORect( _this->Super1.Bounds );
 8021e3a:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8021e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021e40:	a806      	add	r0, sp, #24
 8021e42:	f7f8 f9eb 	bl	801a21c <EwGetRectORect>
  XRect formBounds2 = _Const0001;
 8021e46:	af0e      	add	r7, sp, #56	; 0x38
  CoreView view = _this->last;
 8021e48:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
  XRect formBounds2 = _Const0001;
 8021e4c:	2200      	movs	r2, #0
 8021e4e:	e9c7 2202 	strd	r2, r2, [r7, #8]
  XBool groupLayout = (( _this->Super2.viewState & CoreViewStateUpdateLayout ) == 
 8021e52:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
  XRect formBounds2 = _Const0001;
 8021e56:	607a      	str	r2, [r7, #4]
 8021e58:	920e      	str	r2, [sp, #56]	; 0x38
  while ( view != 0 )
 8021e5a:	b143      	cbz	r3, 8021e6e <CoreGroup_recalculateLayout+0x42>
    if ((( view->viewState & CoreViewStateRequestLayout ) == CoreViewStateRequestLayout ))
 8021e5c:	6a1a      	ldr	r2, [r3, #32]
 8021e5e:	0510      	lsls	r0, r2, #20
      view->viewState = view->viewState & ~CoreViewStateRequestLayout;
 8021e60:	bf44      	itt	mi
 8021e62:	f422 6200 	bicmi.w	r2, r2, #2048	; 0x800
 8021e66:	621a      	strmi	r2, [r3, #32]
    view = view->prev;
 8021e68:	695b      	ldr	r3, [r3, #20]
  while ( view != 0 )
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d1f6      	bne.n	8021e5c <CoreGroup_recalculateLayout+0x30>
  view = _this->first;
 8021e6e:	f8d8 4038 	ldr.w	r4, [r8, #56]	; 0x38
  if ( groupLayout )
 8021e72:	2d00      	cmp	r5, #0
 8021e74:	f040 80a4 	bne.w	8021fc0 <CoreGroup_recalculateLayout+0x194>
  XBool groupLayout = (( _this->Super2.viewState & CoreViewStateUpdateLayout ) == 
 8021e78:	46aa      	mov	sl, r5
  _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdatingLayout;
 8021e7a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8021e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021e82:	f8c8 3020 	str.w	r3, [r8, #32]
  while ( view != 0 )
 8021e86:	ae12      	add	r6, sp, #72	; 0x48
 8021e88:	2c00      	cmp	r4, #0
 8021e8a:	d048      	beq.n	8021f1e <CoreGroup_recalculateLayout+0xf2>
  CoreOutline form = 0;
 8021e8c:	f04f 0900 	mov.w	r9, #0
 8021e90:	ae12      	add	r6, sp, #72	; 0x48
  return ((CoreView)_this)->_.VMT->ArrangeView((CoreView)_this, aBounds, aFormation );
 8021e92:	46cb      	mov	fp, r9
    if ((( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021e94:	6a25      	ldr	r5, [r4, #32]
 8021e96:	0569      	lsls	r1, r5, #21
 8021e98:	d51a      	bpl.n	8021ed0 <CoreGroup_recalculateLayout+0xa4>
      if (( view->layoutContext != 0 ) && ( view->layoutContext->outline != form ))
 8021e9a:	69e3      	ldr	r3, [r4, #28]
 8021e9c:	b123      	cbz	r3, 8021ea8 <CoreGroup_recalculateLayout+0x7c>
 8021e9e:	691b      	ldr	r3, [r3, #16]
 8021ea0:	454b      	cmp	r3, r9
 8021ea2:	d04a      	beq.n	8021f3a <CoreGroup_recalculateLayout+0x10e>
        view->layoutContext = 0;
 8021ea4:	2300      	movs	r3, #0
 8021ea6:	61e3      	str	r3, [r4, #28]
      if ((( view->layoutContext == 0 ) && formLayout ) && ( view->Layout != ( CoreLayoutAlignToLeft 
 8021ea8:	f1bb 0f00 	cmp.w	fp, #0
 8021eac:	d030      	beq.n	8021f10 <CoreGroup_recalculateLayout+0xe4>
 8021eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021eb0:	2b14      	cmp	r3, #20
 8021eb2:	d02d      	beq.n	8021f10 <CoreGroup_recalculateLayout+0xe4>
        CoreView__initLayoutContext( view, formBounds2, form );
 8021eb4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8021eb8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ((CoreView)_this)->_.VMT->initLayoutContext((CoreView)_this, aBounds, aOutline );
 8021ebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021ebe:	6823      	ldr	r3, [r4, #0]
 8021ec0:	e9cd 2900 	strd	r2, r9, [sp]
 8021ec4:	4620      	mov	r0, r4
 8021ec6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8021ec8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8021ecc:	47a8      	blx	r5
 8021ece:	6a25      	ldr	r5, [r4, #32]
    if ( view->layoutContext != 0 )
 8021ed0:	69e3      	ldr	r3, [r4, #28]
 8021ed2:	b1eb      	cbz	r3, 8021f10 <CoreGroup_recalculateLayout+0xe4>
      if ( groupLayout && !(( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021ed4:	f1ba 0f00 	cmp.w	sl, #0
 8021ed8:	d015      	beq.n	8021f06 <CoreGroup_recalculateLayout+0xda>
 8021eda:	f415 6c80 	ands.w	ip, r5, #1024	; 0x400
 8021ede:	d12f      	bne.n	8021f40 <CoreGroup_recalculateLayout+0x114>
        CoreView__ArrangeView( view, groupBounds, CoreFormationNone );
 8021ee0:	ab06      	add	r3, sp, #24
 8021ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021ee4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  return ((CoreView)_this)->_.VMT->ArrangeView((CoreView)_this, aBounds, aFormation );
 8021ee8:	ab16      	add	r3, sp, #88	; 0x58
 8021eea:	e913 0003 	ldmdb	r3, {r0, r1}
 8021eee:	6825      	ldr	r5, [r4, #0]
 8021ef0:	f8cd c008 	str.w	ip, [sp, #8]
 8021ef4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021ef8:	4621      	mov	r1, r4
 8021efa:	6ced      	ldr	r5, [r5, #76]	; 0x4c
 8021efc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8021f00:	a804      	add	r0, sp, #16
 8021f02:	47a8      	blx	r5
 8021f04:	6a25      	ldr	r5, [r4, #32]
      if ( formLayout && (( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021f06:	f1bb 0f00 	cmp.w	fp, #0
 8021f0a:	d001      	beq.n	8021f10 <CoreGroup_recalculateLayout+0xe4>
 8021f0c:	056a      	lsls	r2, r5, #21
 8021f0e:	d41a      	bmi.n	8021f46 <CoreGroup_recalculateLayout+0x11a>
    if ((( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8021f10:	05ab      	lsls	r3, r5, #22
 8021f12:	d42d      	bmi.n	8021f70 <CoreGroup_recalculateLayout+0x144>
    view = view->next;
 8021f14:	6924      	ldr	r4, [r4, #16]
  while ( view != 0 )
 8021f16:	2c00      	cmp	r4, #0
 8021f18:	d1bc      	bne.n	8021e94 <CoreGroup_recalculateLayout+0x68>
 8021f1a:	f8d8 3020 	ldr.w	r3, [r8, #32]
  CoreGroup_UpdateLayout( _this, EwGetRectSize( groupBounds ));
 8021f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f20:	9200      	str	r2, [sp, #0]
  _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateUpdatingLayout;
 8021f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021f26:	f8c8 3020 	str.w	r3, [r8, #32]
  CoreGroup_UpdateLayout( _this, EwGetRectSize( groupBounds ));
 8021f2a:	ab06      	add	r3, sp, #24
 8021f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021f2e:	4630      	mov	r0, r6
 8021f30:	f7f8 f965 	bl	801a1fe <EwGetRectSize>
}
 8021f34:	b017      	add	sp, #92	; 0x5c
 8021f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( groupLayout && !(( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021f3a:	f1ba 0f00 	cmp.w	sl, #0
 8021f3e:	d0e2      	beq.n	8021f06 <CoreGroup_recalculateLayout+0xda>
      if ( formLayout && (( view->viewState & CoreViewStateEmbedded ) == CoreViewStateEmbedded ))
 8021f40:	f1bb 0f00 	cmp.w	fp, #0
 8021f44:	d0e4      	beq.n	8021f10 <CoreGroup_recalculateLayout+0xe4>
        CoreView__ArrangeView( view, formBounds2, CoreFormationNone );
 8021f46:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8021f4a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  return ((CoreView)_this)->_.VMT->ArrangeView((CoreView)_this, aBounds, aFormation );
 8021f4e:	ab16      	add	r3, sp, #88	; 0x58
 8021f50:	e913 0003 	ldmdb	r3, {r0, r1}
 8021f54:	6825      	ldr	r5, [r4, #0]
 8021f56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021f5a:	2300      	movs	r3, #0
 8021f5c:	9302      	str	r3, [sp, #8]
 8021f5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8021f62:	6ced      	ldr	r5, [r5, #76]	; 0x4c
 8021f64:	4621      	mov	r1, r4
 8021f66:	a804      	add	r0, sp, #16
 8021f68:	47a8      	blx	r5
 8021f6a:	6a25      	ldr	r5, [r4, #32]
    if ((( view->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8021f6c:	05ab      	lsls	r3, r5, #22
 8021f6e:	d5d1      	bpl.n	8021f14 <CoreGroup_recalculateLayout+0xe8>
      form = EwCastObject( view, CoreOutline );
 8021f70:	491c      	ldr	r1, [pc, #112]	; (8021fe4 <CoreGroup_recalculateLayout+0x1b8>)
 8021f72:	4620      	mov	r0, r4
 8021f74:	f7f7 fc7a 	bl	801986c <EwCastObject>
      if ( formLayout )
 8021f78:	f415 5b80 	ands.w	fp, r5, #4096	; 0x1000
      form = EwCastObject( view, CoreOutline );
 8021f7c:	4681      	mov	r9, r0
      if ( formLayout )
 8021f7e:	d0c9      	beq.n	8021f14 <CoreGroup_recalculateLayout+0xe8>
        view->viewState = view->viewState & ~CoreViewStateUpdateLayout;
 8021f80:	6a23      	ldr	r3, [r4, #32]
 8021f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021f86:	6223      	str	r3, [r4, #32]
        formBounds = form->Super1.Bounds;
 8021f88:	f100 0b28 	add.w	fp, r0, #40	; 0x28
 8021f8c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8021f90:	ad0a      	add	r5, sp, #40	; 0x28
 8021f92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        formBounds2 = formBounds;
 8021f96:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        formLayout = (XBool)!EwIsRectEmpty( formBounds );
 8021f9a:	f7f7 fff7 	bl	8019f8c <EwIsRectEmpty>
      if ( formLayout )
 8021f9e:	b9f0      	cbnz	r0, 8021fde <CoreGroup_recalculateLayout+0x1b2>
        CoreGroup__InvalidateArea( _this, form->Super1.Bounds );
 8021fa0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8021fa4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8021fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8021fac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021fae:	9200      	str	r2, [sp, #0]
 8021fb0:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 8021fb2:	4640      	mov	r0, r8
 8021fb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8021fb8:	47a8      	blx	r5
        CoreGroup__InvalidateArea( _this, form->Super1.Bounds );
 8021fba:	f04f 0b01 	mov.w	fp, #1
 8021fbe:	e7a9      	b.n	8021f14 <CoreGroup_recalculateLayout+0xe8>
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateUpdateLayout;
 8021fc0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8021fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021fc8:	f8c8 3020 	str.w	r3, [r8, #32]
    groupLayout = (XBool)!EwIsRectEmpty( groupBounds );
 8021fcc:	ab06      	add	r3, sp, #24
 8021fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021fd0:	f7f7 ffdc 	bl	8019f8c <EwIsRectEmpty>
 8021fd4:	fab0 fa80 	clz	sl, r0
 8021fd8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021fdc:	e74d      	b.n	8021e7a <CoreGroup_recalculateLayout+0x4e>
 8021fde:	f04f 0b00 	mov.w	fp, #0
 8021fe2:	e797      	b.n	8021f14 <CoreGroup_recalculateLayout+0xe8>
 8021fe4:	08037e04 	.word	0x08037e04

08021fe8 <CoreGroup_updateComponent>:
  updateLayout = (( _this->Super2.viewState & CoreViewStateUpdateLayout ) == CoreViewStateUpdateLayout );
 8021fe8:	6a01      	ldr	r1, [r0, #32]
  if ((( _this->Super2.viewState & CoreViewStatePendingLayout ) == CoreViewStatePendingLayout ))
 8021fea:	044b      	lsls	r3, r1, #17
{
 8021fec:	b570      	push	{r4, r5, r6, lr}
 8021fee:	4604      	mov	r4, r0
  updateLayout = (( _this->Super2.viewState & CoreViewStateUpdateLayout ) == CoreViewStateUpdateLayout );
 8021ff0:	f401 5580 	and.w	r5, r1, #4096	; 0x1000
  if ((( _this->Super2.viewState & CoreViewStatePendingLayout ) == CoreViewStatePendingLayout ))
 8021ff4:	d40d      	bmi.n	8022012 <CoreGroup_updateComponent+0x2a>
  if ((( _this->Super2.viewState & CoreViewStatePendingViewState ) == CoreViewStatePendingViewState ) 
 8021ff6:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
 8021ffa:	432b      	orrs	r3, r5
 8021ffc:	d100      	bne.n	8022000 <CoreGroup_updateComponent+0x18>
}
 8021ffe:	bd70      	pop	{r4, r5, r6, pc}
  ((CoreGroup)_this)->_.VMT->UpdateViewState((CoreGroup)_this, aState );
 8022000:	6823      	ldr	r3, [r4, #0]
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStatePendingViewState;
 8022002:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8022006:	6221      	str	r1, [r4, #32]
  ((CoreGroup)_this)->_.VMT->UpdateViewState((CoreGroup)_this, aState );
 8022008:	4620      	mov	r0, r4
 802200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 802200c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ((CoreGroup)_this)->_.VMT->UpdateViewState((CoreGroup)_this, aState );
 8022010:	4718      	bx	r3
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStatePendingLayout;
 8022012:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8022016:	6201      	str	r1, [r0, #32]
    CoreGroup_recalculateLayout( _this );
 8022018:	f7ff ff08 	bl	8021e2c <CoreGroup_recalculateLayout>
 802201c:	6a21      	ldr	r1, [r4, #32]
 802201e:	e7ea      	b.n	8021ff6 <CoreGroup_updateComponent+0xe>

08022020 <CoreGroup__OnSetFocus>:
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 8022020:	6803      	ldr	r3, [r0, #0]
 8022022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022024:	4718      	bx	r3
 8022026:	bf00      	nop

08022028 <CoreGroup_OnSetEnabled>:
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8022028:	6803      	ldr	r3, [r0, #0]
  if ( value )
 802202a:	b119      	cbz	r1, 8022034 <CoreGroup_OnSetEnabled+0xc>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 802202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802202e:	2200      	movs	r2, #0
 8022030:	2110      	movs	r1, #16
 8022032:	4718      	bx	r3
 8022034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022036:	2210      	movs	r2, #16
 8022038:	4718      	bx	r3
 802203a:	bf00      	nop

0802203c <CoreGroup__OnSetOpacity>:
  ((CoreGroup)_this)->_.VMT->OnSetOpacity((CoreGroup)_this, value );
 802203c:	6803      	ldr	r3, [r0, #0]
 802203e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022040:	4718      	bx	r3
 8022042:	bf00      	nop

08022044 <CoreGroup_OnSetVisible>:
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8022044:	6803      	ldr	r3, [r0, #0]
  if ( value )
 8022046:	b119      	cbz	r1, 8022050 <CoreGroup_OnSetVisible+0xc>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8022048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802204a:	2200      	movs	r2, #0
 802204c:	2101      	movs	r1, #1
 802204e:	4718      	bx	r3
 8022050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022052:	2201      	movs	r2, #1
 8022054:	4718      	bx	r3
 8022056:	bf00      	nop

08022058 <CoreGroup_LocalPosition>:
{
 8022058:	b570      	push	{r4, r5, r6, lr}
 802205a:	b084      	sub	sp, #16
 802205c:	ad02      	add	r5, sp, #8
 802205e:	e885 000c 	stmia.w	r5, {r2, r3}
 8022062:	4606      	mov	r6, r0
  while ( tmp != 0 )
 8022064:	b159      	cbz	r1, 802207e <CoreGroup_LocalPosition+0x26>
 8022066:	460c      	mov	r4, r1
    aPoint = EwMovePointNeg( aPoint, tmp->Super1.Bounds.Point1 );
 8022068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802206a:	9300      	str	r3, [sp, #0]
 802206c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802206e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8022072:	4628      	mov	r0, r5
 8022074:	f7f7 fed8 	bl	8019e28 <EwMovePointNeg>
    tmp = tmp->Super2.Owner;
 8022078:	69a4      	ldr	r4, [r4, #24]
  while ( tmp != 0 )
 802207a:	2c00      	cmp	r4, #0
 802207c:	d1f4      	bne.n	8022068 <CoreGroup_LocalPosition+0x10>
  return aPoint;
 802207e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8022082:	e886 0003 	stmia.w	r6, {r0, r1}
}
 8022086:	4630      	mov	r0, r6
 8022088:	b004      	add	sp, #16
 802208a:	bd70      	pop	{r4, r5, r6, pc}

0802208c <CoreGroup_InvalidateViewState>:
{
 802208c:	b530      	push	{r4, r5, lr}
  _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 802208e:	6a03      	ldr	r3, [r0, #32]
  EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022090:	4a09      	ldr	r2, [pc, #36]	; (80220b8 <CoreGroup_InvalidateViewState+0x2c>)
{
 8022092:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022094:	466d      	mov	r5, sp
  _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 8022096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
{
 802209a:	4604      	mov	r4, r0
  _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingViewState;
 802209c:	6203      	str	r3, [r0, #32]
  EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802209e:	4601      	mov	r1, r0
 80220a0:	4628      	mov	r0, r5
 80220a2:	f7f9 f897 	bl	801b1d4 <EwNewSlot>
 80220a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80220aa:	4622      	mov	r2, r4
}
 80220ac:	b003      	add	sp, #12
 80220ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80220b2:	f7f9 b8bd 	b.w	801b230 <EwPostSignal>
 80220b6:	bf00      	nop
 80220b8:	08021fe9 	.word	0x08021fe9

080220bc <CoreGroup__Init>:
{
 80220bc:	b510      	push	{r4, lr}
 80220be:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 80220c0:	f7f7 fabc 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreGroup );
 80220c4:	4b06      	ldr	r3, [pc, #24]	; (80220e0 <CoreGroup__Init+0x24>)
 80220c6:	60e3      	str	r3, [r4, #12]
  _this->Layout = CoreLayoutAlignToLeft | CoreLayoutAlignToTop;
 80220c8:	2014      	movs	r0, #20
  _this->Super2.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFocusable 
 80220ca:	211f      	movs	r1, #31
  _this->Opacity = 255;
 80220cc:	22ff      	movs	r2, #255	; 0xff
  _this->Super2.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFocusable 
 80220ce:	e9c4 1008 	strd	r1, r0, [r4, #32]
  _this->Opacity = 255;
 80220d2:	6562      	str	r2, [r4, #84]	; 0x54
  _this->_.VMT = EW_CLASS( CoreGroup );
 80220d4:	6023      	str	r3, [r4, #0]
  CoreGroup_InvalidateViewState( _this );
 80220d6:	4620      	mov	r0, r4
}
 80220d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup_InvalidateViewState( _this );
 80220dc:	f7ff bfd6 	b.w	802208c <CoreGroup_InvalidateViewState>
 80220e0:	08037c98 	.word	0x08037c98

080220e4 <CoreGroup__InvalidateArea>:
{
 80220e4:	b084      	sub	sp, #16
 80220e6:	b530      	push	{r4, r5, lr}
 80220e8:	b083      	sub	sp, #12
 80220ea:	ac07      	add	r4, sp, #28
 80220ec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80220f0:	6805      	ldr	r5, [r0, #0]
 80220f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220f4:	9300      	str	r3, [sp, #0]
 80220f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80220fa:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80220fc:	47a0      	blx	r4
}
 80220fe:	b003      	add	sp, #12
 8022100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022104:	b004      	add	sp, #16
 8022106:	4770      	bx	lr

08022108 <CoreGroup_RestackTop>:
{
 8022108:	b5f0      	push	{r4, r5, r6, r7, lr}
 802210a:	b08f      	sub	sp, #60	; 0x3c
  if ( aView == 0 )
 802210c:	2900      	cmp	r1, #0
 802210e:	d079      	beq.n	8022204 <CoreGroup_RestackTop+0xfc>
  if ( aView->Owner != _this )
 8022110:	698b      	ldr	r3, [r1, #24]
 8022112:	4283      	cmp	r3, r0
 8022114:	4606      	mov	r6, r0
 8022116:	460c      	mov	r4, r1
 8022118:	d14d      	bne.n	80221b6 <CoreGroup_RestackTop+0xae>
  if ( aView->next == 0 )
 802211a:	690b      	ldr	r3, [r1, #16]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d048      	beq.n	80221b2 <CoreGroup_RestackTop+0xaa>
  after = _this->last;
 8022120:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((( after == aView ) || ( after == 0 )) || ( after->next == aView ))
 8022122:	42a9      	cmp	r1, r5
 8022124:	d045      	beq.n	80221b2 <CoreGroup_RestackTop+0xaa>
 8022126:	2d00      	cmp	r5, #0
 8022128:	d043      	beq.n	80221b2 <CoreGroup_RestackTop+0xaa>
 802212a:	692b      	ldr	r3, [r5, #16]
 802212c:	428b      	cmp	r3, r1
 802212e:	d040      	beq.n	80221b2 <CoreGroup_RestackTop+0xaa>
  if ((( aView->viewState & ( CoreViewStateEmbedded | CoreViewStateVisible )) == 
 8022130:	6a0b      	ldr	r3, [r1, #32]
 8022132:	f240 4201 	movw	r2, #1025	; 0x401
 8022136:	439a      	bics	r2, r3
 8022138:	d045      	beq.n	80221c6 <CoreGroup_RestackTop+0xbe>
  if ((( aView->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 802213a:	059a      	lsls	r2, r3, #22
 802213c:	d515      	bpl.n	802216a <CoreGroup_RestackTop+0x62>
    if ( aView->prev != 0 )
 802213e:	6963      	ldr	r3, [r4, #20]
 8022140:	b11b      	cbz	r3, 802214a <CoreGroup_RestackTop+0x42>
      aView->prev->viewState = aView->prev->viewState | CoreViewStateRequestLayout;
 8022142:	6a1a      	ldr	r2, [r3, #32]
 8022144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8022148:	621a      	str	r2, [r3, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 802214a:	6a33      	ldr	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802214c:	4a2f      	ldr	r2, [pc, #188]	; (802220c <CoreGroup_RestackTop+0x104>)
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 802214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022152:	af04      	add	r7, sp, #16
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022154:	6233      	str	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022156:	4638      	mov	r0, r7
 8022158:	4631      	mov	r1, r6
 802215a:	f7f9 f83b 	bl	801b1d4 <EwNewSlot>
 802215e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8022162:	4632      	mov	r2, r6
 8022164:	f7f9 f864 	bl	801b230 <EwPostSignal>
 8022168:	6a23      	ldr	r3, [r4, #32]
    aView->prev->next = aView->next;
 802216a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
  if ( aView->prev != 0 )
 802216e:	2a00      	cmp	r2, #0
 8022170:	d046      	beq.n	8022200 <CoreGroup_RestackTop+0xf8>
    aView->prev->next = aView->next;
 8022172:	6111      	str	r1, [r2, #16]
 8022174:	6921      	ldr	r1, [r4, #16]
  aView->next = after->next;
 8022176:	6928      	ldr	r0, [r5, #16]
  aView->next->prev = aView->prev;
 8022178:	614a      	str	r2, [r1, #20]
  aView->next = after->next;
 802217a:	e9c4 0504 	strd	r0, r5, [r4, #16]
  after->next = aView;
 802217e:	612c      	str	r4, [r5, #16]
  if ( aView->next != 0 )
 8022180:	6922      	ldr	r2, [r4, #16]
 8022182:	2a00      	cmp	r2, #0
 8022184:	d040      	beq.n	8022208 <CoreGroup_RestackTop+0x100>
    aView->next->prev = aView;
 8022186:	6154      	str	r4, [r2, #20]
  if ((( aView->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8022188:	07db      	lsls	r3, r3, #31
 802218a:	d512      	bpl.n	80221b2 <CoreGroup_RestackTop+0xaa>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 802218c:	6823      	ldr	r3, [r4, #0]
 802218e:	ad06      	add	r5, sp, #24
 8022190:	4621      	mov	r1, r4
 8022192:	4628      	mov	r0, r5
 8022194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022196:	4798      	blx	r3
 8022198:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802219c:	ac0a      	add	r4, sp, #40	; 0x28
 802219e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80221a2:	6833      	ldr	r3, [r6, #0]
 80221a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80221a6:	9200      	str	r2, [sp, #0]
 80221a8:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 80221aa:	4630      	mov	r0, r6
 80221ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80221b0:	47a8      	blx	r5
}
 80221b2:	b00f      	add	sp, #60	; 0x3c
 80221b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EwThrow( EwLoadString( &_Const0008 ));
 80221b6:	4816      	ldr	r0, [pc, #88]	; (8022210 <CoreGroup_RestackTop+0x108>)
 80221b8:	f7fa f93a 	bl	801c430 <EwLoadString>
}
 80221bc:	b00f      	add	sp, #60	; 0x3c
 80221be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwThrow( EwLoadString( &_Const0008 ));
 80221c2:	f7f6 bd65 	b.w	8018c90 <EwThrow>
    if (( aView->prev != 0 ) && ( aView->layoutContext != 0 ))
 80221c6:	694a      	ldr	r2, [r1, #20]
 80221c8:	b132      	cbz	r2, 80221d8 <CoreGroup_RestackTop+0xd0>
 80221ca:	69c9      	ldr	r1, [r1, #28]
 80221cc:	b121      	cbz	r1, 80221d8 <CoreGroup_RestackTop+0xd0>
      aView->prev->viewState = aView->prev->viewState | CoreViewStateRequestLayout;
 80221ce:	6a13      	ldr	r3, [r2, #32]
 80221d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80221d4:	6213      	str	r3, [r2, #32]
 80221d6:	6a23      	ldr	r3, [r4, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80221d8:	4a0c      	ldr	r2, [pc, #48]	; (802220c <CoreGroup_RestackTop+0x104>)
    aView->viewState = aView->viewState | CoreViewStateRequestLayout;
 80221da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80221de:	6223      	str	r3, [r4, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80221e0:	6a33      	ldr	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80221e2:	af02      	add	r7, sp, #8
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80221e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80221e8:	6233      	str	r3, [r6, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80221ea:	4638      	mov	r0, r7
 80221ec:	4631      	mov	r1, r6
 80221ee:	f7f8 fff1 	bl	801b1d4 <EwNewSlot>
 80221f2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80221f6:	4632      	mov	r2, r6
 80221f8:	f7f9 f81a 	bl	801b230 <EwPostSignal>
 80221fc:	6a23      	ldr	r3, [r4, #32]
 80221fe:	e79c      	b.n	802213a <CoreGroup_RestackTop+0x32>
    _this->first = aView->next;
 8022200:	63b1      	str	r1, [r6, #56]	; 0x38
 8022202:	e7b8      	b.n	8022176 <CoreGroup_RestackTop+0x6e>
    EwThrow( EwLoadString( &_Const0007 ));
 8022204:	4803      	ldr	r0, [pc, #12]	; (8022214 <CoreGroup_RestackTop+0x10c>)
 8022206:	e7d7      	b.n	80221b8 <CoreGroup_RestackTop+0xb0>
    _this->last = aView;
 8022208:	63f4      	str	r4, [r6, #60]	; 0x3c
 802220a:	e7bd      	b.n	8022188 <CoreGroup_RestackTop+0x80>
 802220c:	08021fe9 	.word	0x08021fe9
 8022210:	08037adc 	.word	0x08037adc
 8022214:	08037ad4 	.word	0x08037ad4

08022218 <CoreGroup_Remove>:
{
 8022218:	b570      	push	{r4, r5, r6, lr}
 802221a:	b08e      	sub	sp, #56	; 0x38
  if ( aView == 0 )
 802221c:	2900      	cmp	r1, #0
 802221e:	d07a      	beq.n	8022316 <CoreGroup_Remove+0xfe>
  if ( aView->Owner != _this )
 8022220:	698b      	ldr	r3, [r1, #24]
 8022222:	4283      	cmp	r3, r0
 8022224:	4605      	mov	r5, r0
 8022226:	460c      	mov	r4, r1
 8022228:	d14c      	bne.n	80222c4 <CoreGroup_Remove+0xac>
  if (((( aView->viewState & ( CoreViewStateEmbedded | CoreViewStateVisible )) == 
 802222a:	6a0b      	ldr	r3, [r1, #32]
 802222c:	f240 4201 	movw	r2, #1025	; 0x401
 8022230:	439a      	bics	r2, r3
 8022232:	d04f      	beq.n	80222d4 <CoreGroup_Remove+0xbc>
  if ((( aView->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 8022234:	0598      	lsls	r0, r3, #22
 8022236:	d514      	bpl.n	8022262 <CoreGroup_Remove+0x4a>
    if ( aView->prev != 0 )
 8022238:	6961      	ldr	r1, [r4, #20]
 802223a:	b119      	cbz	r1, 8022244 <CoreGroup_Remove+0x2c>
      aView->prev->viewState = aView->prev->viewState | CoreViewStateRequestLayout;
 802223c:	6a0b      	ldr	r3, [r1, #32]
 802223e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022242:	620b      	str	r3, [r1, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022244:	6a2b      	ldr	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022246:	4a3b      	ldr	r2, [pc, #236]	; (8022334 <CoreGroup_Remove+0x11c>)
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802224c:	ae04      	add	r6, sp, #16
 802224e:	4630      	mov	r0, r6
 8022250:	4629      	mov	r1, r5
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022252:	622b      	str	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022254:	f7f8 ffbe 	bl	801b1d4 <EwNewSlot>
 8022258:	e896 0003 	ldmia.w	r6, {r0, r1}
 802225c:	462a      	mov	r2, r5
 802225e:	f7f8 ffe7 	bl	801b230 <EwPostSignal>
  if ( _this->Focus == aView )
 8022262:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  aView->layoutContext = 0;
 8022264:	2100      	movs	r1, #0
  if ( _this->Focus == aView )
 8022266:	42a3      	cmp	r3, r4
  aView->layoutContext = 0;
 8022268:	61e1      	str	r1, [r4, #28]
  if ( _this->Focus == aView )
 802226a:	d04c      	beq.n	8022306 <CoreGroup_Remove+0xee>
  if ( aView->prev != 0 )
 802226c:	6963      	ldr	r3, [r4, #20]
 802226e:	b10b      	cbz	r3, 8022274 <CoreGroup_Remove+0x5c>
    aView->prev->next = aView->next;
 8022270:	6922      	ldr	r2, [r4, #16]
 8022272:	611a      	str	r2, [r3, #16]
  if ( aView->next != 0 )
 8022274:	6922      	ldr	r2, [r4, #16]
 8022276:	b102      	cbz	r2, 802227a <CoreGroup_Remove+0x62>
    aView->next->prev = aView->prev;
 8022278:	6153      	str	r3, [r2, #20]
  if ( _this->first == aView )
 802227a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802227c:	42a3      	cmp	r3, r4
  if ( _this->last == aView )
 802227e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    _this->first = aView->next;
 8022280:	bf08      	it	eq
 8022282:	63aa      	streq	r2, [r5, #56]	; 0x38
  if ( _this->last == aView )
 8022284:	42a3      	cmp	r3, r4
  if ((( aView->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8022286:	6a22      	ldr	r2, [r4, #32]
    _this->last = aView->prev;
 8022288:	bf04      	itt	eq
 802228a:	6963      	ldreq	r3, [r4, #20]
 802228c:	63eb      	streq	r3, [r5, #60]	; 0x3c
  aView->Owner = 0;
 802228e:	2300      	movs	r3, #0
  if ((( aView->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8022290:	07d1      	lsls	r1, r2, #31
  aView->prev = 0;
 8022292:	e9c4 3304 	strd	r3, r3, [r4, #16]
  aView->Owner = 0;
 8022296:	61a3      	str	r3, [r4, #24]
  if ((( aView->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8022298:	d512      	bpl.n	80222c0 <CoreGroup_Remove+0xa8>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 802229a:	6823      	ldr	r3, [r4, #0]
 802229c:	ae06      	add	r6, sp, #24
 802229e:	4621      	mov	r1, r4
 80222a0:	4630      	mov	r0, r6
 80222a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80222a4:	4798      	blx	r3
 80222a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80222aa:	ac0a      	add	r4, sp, #40	; 0x28
 80222ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80222b0:	682b      	ldr	r3, [r5, #0]
 80222b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80222b4:	9200      	str	r2, [sp, #0]
 80222b6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 80222b8:	4628      	mov	r0, r5
 80222ba:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80222be:	47b0      	blx	r6
}
 80222c0:	b00e      	add	sp, #56	; 0x38
 80222c2:	bd70      	pop	{r4, r5, r6, pc}
    EwThrow( EwLoadString( &_Const0008 ));
 80222c4:	481c      	ldr	r0, [pc, #112]	; (8022338 <CoreGroup_Remove+0x120>)
 80222c6:	f7fa f8b3 	bl	801c430 <EwLoadString>
}
 80222ca:	b00e      	add	sp, #56	; 0x38
 80222cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    EwThrow( EwLoadString( &_Const0008 ));
 80222d0:	f7f6 bcde 	b.w	8018c90 <EwThrow>
      ( CoreViewStateEmbedded | CoreViewStateVisible )) && ( aView->prev != 0 )) 
 80222d4:	6949      	ldr	r1, [r1, #20]
 80222d6:	b319      	cbz	r1, 8022320 <CoreGroup_Remove+0x108>
      && ( aView->layoutContext != 0 ))
 80222d8:	69e2      	ldr	r2, [r4, #28]
 80222da:	b1f2      	cbz	r2, 802231a <CoreGroup_Remove+0x102>
    aView->prev->viewState = aView->prev->viewState | CoreViewStateRequestLayout;
 80222dc:	6a0b      	ldr	r3, [r1, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80222de:	4a15      	ldr	r2, [pc, #84]	; (8022334 <CoreGroup_Remove+0x11c>)
    aView->prev->viewState = aView->prev->viewState | CoreViewStateRequestLayout;
 80222e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80222e4:	620b      	str	r3, [r1, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80222e6:	6a03      	ldr	r3, [r0, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80222e8:	ae02      	add	r6, sp, #8
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80222ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80222ee:	6203      	str	r3, [r0, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80222f0:	4629      	mov	r1, r5
 80222f2:	4630      	mov	r0, r6
 80222f4:	f7f8 ff6e 	bl	801b1d4 <EwNewSlot>
 80222f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80222fc:	462a      	mov	r2, r5
 80222fe:	f7f8 ff97 	bl	801b230 <EwPostSignal>
 8022302:	6a23      	ldr	r3, [r4, #32]
 8022304:	e796      	b.n	8022234 <CoreGroup_Remove+0x1c>
  if (( aView == 0 ) || ( aView->Owner != _this ))
 8022306:	69a3      	ldr	r3, [r4, #24]
 8022308:	429d      	cmp	r5, r3
 802230a:	d00c      	beq.n	8022326 <CoreGroup_Remove+0x10e>
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 802230c:	682b      	ldr	r3, [r5, #0]
 802230e:	4628      	mov	r0, r5
 8022310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022312:	4798      	blx	r3
}
 8022314:	e7aa      	b.n	802226c <CoreGroup_Remove+0x54>
    EwThrow( EwLoadString( &_Const0009 ));
 8022316:	4809      	ldr	r0, [pc, #36]	; (802233c <CoreGroup_Remove+0x124>)
 8022318:	e7d5      	b.n	80222c6 <CoreGroup_Remove+0xae>
  if ((( aView->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 802231a:	059a      	lsls	r2, r3, #22
 802231c:	d48e      	bmi.n	802223c <CoreGroup_Remove+0x24>
 802231e:	e7a0      	b.n	8022262 <CoreGroup_Remove+0x4a>
 8022320:	059b      	lsls	r3, r3, #22
 8022322:	d48f      	bmi.n	8022244 <CoreGroup_Remove+0x2c>
 8022324:	e79d      	b.n	8022262 <CoreGroup_Remove+0x4a>
 8022326:	2114      	movs	r1, #20
 8022328:	4620      	mov	r0, r4
 802232a:	f7fe f97b 	bl	8020624 <CoreGroup_FindSiblingView.part.0>
 802232e:	4601      	mov	r1, r0
 8022330:	e7ec      	b.n	802230c <CoreGroup_Remove+0xf4>
 8022332:	bf00      	nop
 8022334:	08021fe9 	.word	0x08021fe9
 8022338:	08037adc 	.word	0x08037adc
 802233c:	08037ae4 	.word	0x08037ae4

08022340 <CoreGroup_Add>:
{
 8022340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022342:	b08d      	sub	sp, #52	; 0x34
  if ( aView == 0 )
 8022344:	2900      	cmp	r1, #0
 8022346:	f000 8083 	beq.w	8022450 <CoreGroup_Add+0x110>
  if ( aView->Owner != 0 )
 802234a:	698b      	ldr	r3, [r1, #24]
 802234c:	460c      	mov	r4, r1
 802234e:	2b00      	cmp	r3, #0
 8022350:	d13d      	bne.n	80223ce <CoreGroup_Add+0x8e>
  if (( aOrder < 0 ) && ( _this->last != 0 ))
 8022352:	2a00      	cmp	r2, #0
 8022354:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022356:	4605      	mov	r5, r0
 8022358:	db08      	blt.n	802236c <CoreGroup_Add+0x2c>
    aView->Owner = _this;
 802235a:	e9c1 3005 	strd	r3, r0, [r1, #20]
    if ( _this->last != 0 )
 802235e:	b103      	cbz	r3, 8022362 <CoreGroup_Add+0x22>
      _this->last->next = aView;
 8022360:	6119      	str	r1, [r3, #16]
    if ( _this->first == 0 )
 8022362:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8022364:	2b00      	cmp	r3, #0
 8022366:	d075      	beq.n	8022454 <CoreGroup_Add+0x114>
    _this->last = aView;
 8022368:	63ec      	str	r4, [r5, #60]	; 0x3c
 802236a:	e00f      	b.n	802238c <CoreGroup_Add+0x4c>
  if (( aOrder < 0 ) && ( _this->last != 0 ))
 802236c:	2b00      	cmp	r3, #0
 802236e:	d036      	beq.n	80223de <CoreGroup_Add+0x9e>
  while ((( aOrder < 0 ) && ( before != 0 )) && ( before->prev != 0 ))
 8022370:	3201      	adds	r2, #1
 8022372:	4619      	mov	r1, r3
 8022374:	695b      	ldr	r3, [r3, #20]
 8022376:	d001      	beq.n	802237c <CoreGroup_Add+0x3c>
 8022378:	2b00      	cmp	r3, #0
 802237a:	d1f9      	bne.n	8022370 <CoreGroup_Add+0x30>
    aView->prev = before->prev;
 802237c:	e9c4 3505 	strd	r3, r5, [r4, #20]
    aView->next = before;
 8022380:	6121      	str	r1, [r4, #16]
    before->prev = aView;
 8022382:	614c      	str	r4, [r1, #20]
    if ( aView->prev != 0 )
 8022384:	6963      	ldr	r3, [r4, #20]
 8022386:	2b00      	cmp	r3, #0
 8022388:	d04c      	beq.n	8022424 <CoreGroup_Add+0xe4>
      aView->prev->next = aView;
 802238a:	611c      	str	r4, [r3, #16]
  if ((( aView->viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 802238c:	6a23      	ldr	r3, [r4, #32]
 802238e:	07d9      	lsls	r1, r3, #31
 8022390:	d512      	bpl.n	80223b8 <CoreGroup_Add+0x78>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8022392:	6823      	ldr	r3, [r4, #0]
 8022394:	ae04      	add	r6, sp, #16
 8022396:	4630      	mov	r0, r6
 8022398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802239a:	4621      	mov	r1, r4
 802239c:	4798      	blx	r3
 802239e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80223a2:	ae08      	add	r6, sp, #32
 80223a4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80223a8:	682b      	ldr	r3, [r5, #0]
 80223aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80223ac:	9200      	str	r2, [sp, #0]
 80223ae:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 80223b0:	4628      	mov	r0, r5
 80223b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80223b6:	47b8      	blx	r7
  if (((( _this->Focus == 0 ) && (( aView->viewState & CoreViewStateFocusable ) 
 80223b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80223ba:	b343      	cbz	r3, 802240e <CoreGroup_Add+0xce>
 80223bc:	6a23      	ldr	r3, [r4, #32]
  if ((( aView->viewState & ( CoreViewStateEmbedded | CoreViewStateVisible )) == 
 80223be:	f240 4201 	movw	r2, #1025	; 0x401
 80223c2:	439a      	bics	r2, r3
 80223c4:	d030      	beq.n	8022428 <CoreGroup_Add+0xe8>
  if ((( aView->viewState & CoreViewStateIsOutline ) == CoreViewStateIsOutline ))
 80223c6:	059a      	lsls	r2, r3, #22
 80223c8:	d40c      	bmi.n	80223e4 <CoreGroup_Add+0xa4>
}
 80223ca:	b00d      	add	sp, #52	; 0x34
 80223cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EwThrow( EwLoadString( &_Const000B ));
 80223ce:	4822      	ldr	r0, [pc, #136]	; (8022458 <CoreGroup_Add+0x118>)
 80223d0:	f7fa f82e 	bl	801c430 <EwLoadString>
}
 80223d4:	b00d      	add	sp, #52	; 0x34
 80223d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwThrow( EwLoadString( &_Const000B ));
 80223da:	f7f6 bc59 	b.w	8018c90 <EwThrow>
    aView->prev = _this->last;
 80223de:	e9c1 3005 	strd	r3, r0, [r1, #20]
    if ( _this->last != 0 )
 80223e2:	e7be      	b.n	8022362 <CoreGroup_Add+0x22>
    aView->viewState = aView->viewState | CoreViewStateRequestLayout;
 80223e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80223e8:	6223      	str	r3, [r4, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80223ea:	6a2b      	ldr	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80223ec:	4a1b      	ldr	r2, [pc, #108]	; (802245c <CoreGroup_Add+0x11c>)
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80223ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80223f2:	ac08      	add	r4, sp, #32
 80223f4:	4620      	mov	r0, r4
 80223f6:	4629      	mov	r1, r5
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 80223f8:	622b      	str	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 80223fa:	f7f8 feeb 	bl	801b1d4 <EwNewSlot>
 80223fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022402:	462a      	mov	r2, r5
}
 8022404:	b00d      	add	sp, #52	; 0x34
 8022406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802240a:	f7f8 bf11 	b.w	801b230 <EwPostSignal>
      == CoreViewStateEnabled )) && !(( aView->viewState & CoreViewStateDialog ) 
 802240e:	6a23      	ldr	r3, [r4, #32]
 8022410:	4a13      	ldr	r2, [pc, #76]	; (8022460 <CoreGroup_Add+0x120>)
 8022412:	401a      	ands	r2, r3
 8022414:	2a14      	cmp	r2, #20
 8022416:	d1d2      	bne.n	80223be <CoreGroup_Add+0x7e>
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 8022418:	682b      	ldr	r3, [r5, #0]
 802241a:	4621      	mov	r1, r4
 802241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802241e:	4628      	mov	r0, r5
 8022420:	4798      	blx	r3
 8022422:	e7cb      	b.n	80223bc <CoreGroup_Add+0x7c>
      _this->first = aView;
 8022424:	63ac      	str	r4, [r5, #56]	; 0x38
 8022426:	e7b1      	b.n	802238c <CoreGroup_Add+0x4c>
    aView->viewState = aView->viewState | CoreViewStateRequestLayout;
 8022428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802242c:	6223      	str	r3, [r4, #32]
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 802242e:	6a2b      	ldr	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022430:	4a0a      	ldr	r2, [pc, #40]	; (802245c <CoreGroup_Add+0x11c>)
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 8022436:	ae02      	add	r6, sp, #8
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStatePendingLayout;
 8022438:	622b      	str	r3, [r5, #32]
    EwPostSignal( EwNewSlot( _this, CoreGroup_updateComponent ), ((XObject)_this ));
 802243a:	4630      	mov	r0, r6
 802243c:	4629      	mov	r1, r5
 802243e:	f7f8 fec9 	bl	801b1d4 <EwNewSlot>
 8022442:	e896 0003 	ldmia.w	r6, {r0, r1}
 8022446:	462a      	mov	r2, r5
 8022448:	f7f8 fef2 	bl	801b230 <EwPostSignal>
 802244c:	6a23      	ldr	r3, [r4, #32]
 802244e:	e7ba      	b.n	80223c6 <CoreGroup_Add+0x86>
    EwThrow( EwLoadString( &_Const000A ));
 8022450:	4804      	ldr	r0, [pc, #16]	; (8022464 <CoreGroup_Add+0x124>)
 8022452:	e7bd      	b.n	80223d0 <CoreGroup_Add+0x90>
      _this->first = aView;
 8022454:	63ac      	str	r4, [r5, #56]	; 0x38
 8022456:	e787      	b.n	8022368 <CoreGroup_Add+0x28>
 8022458:	08037af4 	.word	0x08037af4
 802245c:	08021fe9 	.word	0x08021fe9
 8022460:	00010014 	.word	0x00010014
 8022464:	08037aec 	.word	0x08037aec

08022468 <CoreRoot__EndUpdate>:
  if ( _this->noOfRegions > 0 )
 8022468:	f8d0 33f4 	ldr.w	r3, [r0, #1012]	; 0x3f4
 802246c:	2b00      	cmp	r3, #0
 802246e:	dd07      	ble.n	8022480 <CoreRoot__EndUpdate+0x18>
    _this->fpsCounter = _this->fpsCounter + 1;
 8022470:	f8d0 336c 	ldr.w	r3, [r0, #876]	; 0x36c
    _this->noOfRegions = 0;
 8022474:	2200      	movs	r2, #0
    _this->fpsCounter = _this->fpsCounter + 1;
 8022476:	3301      	adds	r3, #1
 8022478:	f8c0 336c 	str.w	r3, [r0, #876]	; 0x36c
    _this->noOfRegions = 0;
 802247c:	f8c0 23f4 	str.w	r2, [r0, #1012]	; 0x3f4
}
 8022480:	4770      	bx	lr
 8022482:	bf00      	nop

08022484 <CoreRoot_UpdateCanvas>:
{
 8022484:	b082      	sub	sp, #8
 8022486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802248a:	b0a5      	sub	sp, #148	; 0x94
 802248c:	4693      	mov	fp, r2
  XRect canvasArea = EwNewRect2Point( aOffset, EwMovePointPos( aCanvas->Super1.FrameSize, 
 802248e:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8022490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022492:	9400      	str	r4, [sp, #0]
  XRect wholeArea = _Const0001;
 8022494:	ad10      	add	r5, sp, #64	; 0x40
 8022496:	2400      	movs	r4, #0
{
 8022498:	460e      	mov	r6, r1
 802249a:	4607      	mov	r7, r0
  XRect canvasArea = EwNewRect2Point( aOffset, EwMovePointPos( aCanvas->Super1.FrameSize, 
 802249c:	f8db 1020 	ldr.w	r1, [fp, #32]
  XRect wholeArea = _Const0001;
 80224a0:	606c      	str	r4, [r5, #4]
  XRect canvasArea = EwNewRect2Point( aOffset, EwMovePointPos( aCanvas->Super1.FrameSize, 
 80224a2:	a80a      	add	r0, sp, #40	; 0x28
  XRect wholeArea = _Const0001;
 80224a4:	e9c5 4402 	strd	r4, r4, [r5, #8]
{
 80224a8:	932f      	str	r3, [sp, #188]	; 0xbc
 80224aa:	9709      	str	r7, [sp, #36]	; 0x24
  XRect wholeArea = _Const0001;
 80224ac:	9410      	str	r4, [sp, #64]	; 0x40
  XRect canvasArea = EwNewRect2Point( aOffset, EwMovePointPos( aCanvas->Super1.FrameSize, 
 80224ae:	f7f7 fccd 	bl	8019e4c <EwMovePointPos>
 80224b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224b4:	9300      	str	r3, [sp, #0]
 80224b6:	ab2f      	add	r3, sp, #188	; 0xbc
 80224b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80224bc:	a814      	add	r0, sp, #80	; 0x50
 80224be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224c0:	f7f7 fd0d 	bl	8019ede <EwNewRect2Point>
  _this->updateLock = _this->updateLock + 1;
 80224c4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
  XInt32 j = _this->noOfRegions;
 80224c8:	f8d6 93f4 	ldr.w	r9, [r6, #1012]	; 0x3f4
  _this->updateLock = _this->updateLock + 1;
 80224cc:	1c5a      	adds	r2, r3, #1
  for ( i = 0; ( i < j ) && ( i < 4 ); i = i + 1 )
 80224ce:	45a1      	cmp	r9, r4
  _this->updateLock = _this->updateLock + 1;
 80224d0:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
  for ( i = 0; ( i < j ) && ( i < 4 ); i = i + 1 )
 80224d4:	dd1c      	ble.n	8022510 <CoreRoot_UpdateCanvas+0x8c>
      CoreView__Draw( _this, aCanvas, EwMoveRectNeg( _this->regions[ EwCheckIndex( 
 80224d6:	ab01      	add	r3, sp, #4
 80224d8:	e9cd 3607 	strd	r3, r6, [sp, #28]
 80224dc:	f506 7a69 	add.w	sl, r6, #932	; 0x3a4
 80224e0:	9e08      	ldr	r6, [sp, #32]
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] > 0 )
 80224e2:	f85a 2b04 	ldr.w	r2, [sl], #4
      CoreView__Draw( _this, aCanvas, EwMoveRectNeg( _this->regions[ EwCheckIndex( 
 80224e6:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80224ea:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] > 0 )
 80224ee:	2a00      	cmp	r2, #0
      CoreView__Draw( _this, aCanvas, EwMoveRectNeg( _this->regions[ EwCheckIndex( 
 80224f0:	f103 0704 	add.w	r7, r3, #4
      wholeArea = EwUnionRect( wholeArea, EwIntersectRect( canvasArea, _this->regions[ 
 80224f4:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] > 0 )
 80224f8:	dc1d      	bgt.n	8022536 <CoreRoot_UpdateCanvas+0xb2>
      j = j + 1;
 80224fa:	f109 0901 	add.w	r9, r9, #1
  for ( i = 0; ( i < j ) && ( i < 4 ); i = i + 1 )
 80224fe:	3401      	adds	r4, #1
 8022500:	45a1      	cmp	r9, r4
 8022502:	dd01      	ble.n	8022508 <CoreRoot_UpdateCanvas+0x84>
 8022504:	2c04      	cmp	r4, #4
 8022506:	d1eb      	bne.n	80224e0 <CoreRoot_UpdateCanvas+0x5c>
 8022508:	9e08      	ldr	r6, [sp, #32]
 802250a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 802250e:	3b01      	subs	r3, #1
  _this->updateLock = _this->updateLock - 1;
 8022510:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
  if ( !EwIsRectEmpty( wholeArea ))
 8022514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8022518:	f7f7 fd38 	bl	8019f8c <EwIsRectEmpty>
 802251c:	2800      	cmp	r0, #0
 802251e:	d057      	beq.n	80225d0 <CoreRoot_UpdateCanvas+0x14c>
    return wholeArea;
 8022520:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8022524:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802252a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802252c:	b025      	add	sp, #148	; 0x94
 802252e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022532:	b002      	add	sp, #8
 8022534:	4770      	bx	lr
      CoreView__Draw( _this, aCanvas, EwMoveRectNeg( _this->regions[ EwCheckIndex( 
 8022536:	aa2f      	add	r2, sp, #188	; 0xbc
 8022538:	e892 0003 	ldmia.w	r2, {r0, r1}
 802253c:	9a07      	ldr	r2, [sp, #28]
 802253e:	691b      	ldr	r3, [r3, #16]
 8022540:	e882 0003 	stmia.w	r2, {r0, r1}
 8022544:	9300      	str	r3, [sp, #0]
 8022546:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 802254a:	a818      	add	r0, sp, #96	; 0x60
 802254c:	f7f7 fe0d 	bl	801a16a <EwMoveRectNeg>
 8022550:	ab2f      	add	r3, sp, #188	; 0xbc
 8022552:	e893 0006 	ldmia.w	r3, {r1, r2}
 8022556:	a80c      	add	r0, sp, #48	; 0x30
 8022558:	f7f7 fc8b 	bl	8019e72 <EwNegPoint>
 802255c:	ab18      	add	r3, sp, #96	; 0x60
 802255e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022560:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8022564:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8022568:	ab0c      	add	r3, sp, #48	; 0x30
 802256a:	e893 0003 	ldmia.w	r3, {r0, r1}
  ((CoreView)_this)->_.VMT->Draw((CoreView)_this, aCanvas, aClip, aOffset, aOpacity
 802256e:	f04f 0e01 	mov.w	lr, #1
 8022572:	ab0e      	add	r3, sp, #56	; 0x38
 8022574:	22ff      	movs	r2, #255	; 0xff
 8022576:	e883 0003 	stmia.w	r3, {r0, r1}
 802257a:	e9cd 2e04 	strd	r2, lr, [sp, #16]
 802257e:	ab02      	add	r3, sp, #8
 8022580:	e883 0003 	stmia.w	r3, {r0, r1}
 8022584:	ab24      	add	r3, sp, #144	; 0x90
 8022586:	e913 0003 	ldmdb	r3, {r0, r1}
 802258a:	e88d 0003 	stmia.w	sp, {r0, r1}
 802258e:	6831      	ldr	r1, [r6, #0]
 8022590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8022592:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8022596:	4630      	mov	r0, r6
 8022598:	460e      	mov	r6, r1
 802259a:	4659      	mov	r1, fp
 802259c:	47b0      	blx	r6
      wholeArea = EwUnionRect( wholeArea, EwIntersectRect( canvasArea, _this->regions[ 
 802259e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80225a2:	9e07      	ldr	r6, [sp, #28]
 80225a4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80225a6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80225aa:	9700      	str	r7, [sp, #0]
 80225ac:	ab14      	add	r3, sp, #80	; 0x50
 80225ae:	4640      	mov	r0, r8
 80225b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80225b2:	f7f7 fd11 	bl	8019fd8 <EwIntersectRect>
 80225b6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80225ba:	9e07      	ldr	r6, [sp, #28]
 80225bc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80225be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80225c2:	9700      	str	r7, [sp, #0]
 80225c4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80225c8:	4628      	mov	r0, r5
 80225ca:	f7f7 fd3e 	bl	801a04a <EwUnionRect>
 80225ce:	e796      	b.n	80224fe <CoreRoot_UpdateCanvas+0x7a>
    return EwMoveRectNeg( wholeArea, aOffset );
 80225d0:	ab2f      	add	r3, sp, #188	; 0xbc
 80225d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80225d6:	ab01      	add	r3, sp, #4
 80225d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80225da:	e883 0003 	stmia.w	r3, {r0, r1}
 80225de:	9200      	str	r2, [sp, #0]
 80225e0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80225e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80225e6:	f7f7 fdc0 	bl	801a16a <EwMoveRectNeg>
 80225ea:	e79e      	b.n	802252a <CoreRoot_UpdateCanvas+0xa6>

080225ec <CoreRoot__UpdateCanvas>:
{
 80225ec:	b082      	sub	sp, #8
 80225ee:	b510      	push	{r4, lr}
 80225f0:	b082      	sub	sp, #8
  return CoreRoot_UpdateCanvas((CoreRoot)_this, aCanvas, aOffset );
 80225f2:	9c06      	ldr	r4, [sp, #24]
 80225f4:	9400      	str	r4, [sp, #0]
{
 80225f6:	9305      	str	r3, [sp, #20]
 80225f8:	4604      	mov	r4, r0
  return CoreRoot_UpdateCanvas((CoreRoot)_this, aCanvas, aOffset );
 80225fa:	f7ff ff43 	bl	8022484 <CoreRoot_UpdateCanvas>
}
 80225fe:	4620      	mov	r0, r4
 8022600:	b002      	add	sp, #8
 8022602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022606:	b002      	add	sp, #8
 8022608:	4770      	bx	lr
 802260a:	bf00      	nop

0802260c <CoreRoot_GetUpdateRegion>:
  if ( aRegionNo < 0 )
 802260c:	2a00      	cmp	r2, #0
{
 802260e:	b470      	push	{r4, r5, r6}
 8022610:	4604      	mov	r4, r0
  if ( aRegionNo < 0 )
 8022612:	db10      	blt.n	8022636 <CoreRoot_GetUpdateRegion+0x2a>
  XInt32 j = _this->noOfRegions;
 8022614:	f8d1 03f4 	ldr.w	r0, [r1, #1012]	; 0x3f4
  for ( i = 0; ( i < j ) && ( i < 4 ); i = i + 1 )
 8022618:	2800      	cmp	r0, #0
 802261a:	dd0c      	ble.n	8022636 <CoreRoot_GetUpdateRegion+0x2a>
 802261c:	f501 7569 	add.w	r5, r1, #932	; 0x3a4
 8022620:	2300      	movs	r3, #0
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] == 0 )
 8022622:	f855 6b04 	ldr.w	r6, [r5], #4
 8022626:	b976      	cbnz	r6, 8022646 <CoreRoot_GetUpdateRegion+0x3a>
      j = j + 1;
 8022628:	3001      	adds	r0, #1
      aRegionNo = aRegionNo + 1;
 802262a:	3201      	adds	r2, #1
  for ( i = 0; ( i < j ) && ( i < 4 ); i = i + 1 )
 802262c:	3301      	adds	r3, #1
 802262e:	4298      	cmp	r0, r3
 8022630:	dd01      	ble.n	8022636 <CoreRoot_GetUpdateRegion+0x2a>
 8022632:	2b04      	cmp	r3, #4
 8022634:	d1f5      	bne.n	8022622 <CoreRoot_GetUpdateRegion+0x16>
    return _Const0001;
 8022636:	2300      	movs	r3, #0
 8022638:	e9c4 3300 	strd	r3, r3, [r4]
 802263c:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8022640:	4620      	mov	r0, r4
 8022642:	bc70      	pop	{r4, r5, r6}
 8022644:	4770      	bx	lr
      if ( i == aRegionNo )
 8022646:	429a      	cmp	r2, r3
 8022648:	d1f0      	bne.n	802262c <CoreRoot_GetUpdateRegion+0x20>
        return _this->regions[ EwCheckIndex( i, 4 )];
 802264a:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 802264e:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8022652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8022658:	e7f2      	b.n	8022640 <CoreRoot_GetUpdateRegion+0x34>
 802265a:	bf00      	nop

0802265c <CoreRoot__GetUpdateRegion>:
{
 802265c:	b510      	push	{r4, lr}
 802265e:	4604      	mov	r4, r0
  return CoreRoot_GetUpdateRegion((CoreRoot)_this, aRegionNo );
 8022660:	f7ff ffd4 	bl	802260c <CoreRoot_GetUpdateRegion>
}
 8022664:	4620      	mov	r0, r4
 8022666:	bd10      	pop	{r4, pc}

08022668 <CoreRoot_BeginUpdate>:
{
 8022668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  par1 = (XBool)( _this->noOfRegions > 0 );
 802266c:	f8d0 13f4 	ldr.w	r1, [r0, #1012]	; 0x3f4
    preserveFramebufferContent = (XBool)EwPreserveFramebufferContent;
 8022670:	4ab2      	ldr	r2, [pc, #712]	; (802293c <CoreRoot_BeginUpdate+0x2d4>)
    fullScreenUpdate           = (XBool)EwFullScreenUpdate;
 8022672:	4bb3      	ldr	r3, [pc, #716]	; (8022940 <CoreRoot_BeginUpdate+0x2d8>)
    preserveFramebufferContent = (XBool)EwPreserveFramebufferContent;
 8022674:	7816      	ldrb	r6, [r2, #0]
    fullScreenUpdate           = (XBool)EwFullScreenUpdate;
 8022676:	781f      	ldrb	r7, [r3, #0]
{
 8022678:	b0a3      	sub	sp, #140	; 0x8c
  overlayArea = EwGetOverlayArea( par1, 1 );
 802267a:	2900      	cmp	r1, #0
 802267c:	ac0e      	add	r4, sp, #56	; 0x38
 802267e:	bfd4      	ite	le
 8022680:	2100      	movle	r1, #0
 8022682:	2101      	movgt	r1, #1
 8022684:	2201      	movs	r2, #1
{
 8022686:	4605      	mov	r5, r0
  overlayArea = EwGetOverlayArea( par1, 1 );
 8022688:	4620      	mov	r0, r4
 802268a:	f7eb fddf 	bl	800e24c <EwGetOverlayArea>
  if ( !EwIsRectEmpty( overlayArea ))
 802268e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8022692:	f7f7 fc7b 	bl	8019f8c <EwIsRectEmpty>
 8022696:	b968      	cbnz	r0, 80226b4 <CoreRoot_BeginUpdate+0x4c>
    CoreGroup__InvalidateArea( _this, overlayArea );
 8022698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802269c:	ac16      	add	r4, sp, #88	; 0x58
 802269e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 80226a2:	682b      	ldr	r3, [r5, #0]
 80226a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80226a6:	9200      	str	r2, [sp, #0]
 80226a8:	f8d3 8074 	ldr.w	r8, [r3, #116]	; 0x74
 80226ac:	4628      	mov	r0, r5
 80226ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80226b2:	47c0      	blx	r8
  if (( !preserveFramebufferContent && !fullScreenUpdate ) && ( _this->noOfRegions 
 80226b4:	ea56 0107 	orrs.w	r1, r6, r7
 80226b8:	f8d5 73f4 	ldr.w	r7, [r5, #1012]	; 0x3f4
 80226bc:	d132      	bne.n	8022724 <CoreRoot_BeginUpdate+0xbc>
 80226be:	2f00      	cmp	r7, #0
 80226c0:	dd30      	ble.n	8022724 <CoreRoot_BeginUpdate+0xbc>
    XRect tmpRegions[ 3 ] = {0};
 80226c2:	a816      	add	r0, sp, #88	; 0x58
 80226c4:	2230      	movs	r2, #48	; 0x30
 80226c6:	f00e fbd7 	bl	8030e78 <memset>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80226ca:	46a8      	mov	r8, r5
    XRect tmpRegions[ 3 ] = {0};
 80226cc:	46a9      	mov	r9, r5
 80226ce:	2401      	movs	r4, #1
      tmpRegions[ EwCheckIndex( i, 3 )] = _this->regions[ EwCheckIndex( i, 4 )];
 80226d0:	f509 736d 	add.w	r3, r9, #948	; 0x3b4
 80226d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80226d6:	ae16      	add	r6, sp, #88	; 0x58
 80226d8:	eb06 1604 	add.w	r6, r6, r4, lsl #4
    for ( i = 0; i < tmpNoOfRegions; i = i + 1 )
 80226dc:	42bc      	cmp	r4, r7
      tmpRegions[ EwCheckIndex( i, 3 )] = _this->regions[ EwCheckIndex( i, 4 )];
 80226de:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
    for ( i = 0; i < tmpNoOfRegions; i = i + 1 )
 80226e2:	4621      	mov	r1, r4
 80226e4:	4620      	mov	r0, r4
 80226e6:	f640 6212 	movw	r2, #3602	; 0xe12
 80226ea:	f000 8100 	beq.w	80228ee <CoreRoot_BeginUpdate+0x286>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80226ee:	2c03      	cmp	r4, #3
 80226f0:	d101      	bne.n	80226f6 <CoreRoot_BeginUpdate+0x8e>
 80226f2:	f7fe f92b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80226f6:	3401      	adds	r4, #1
 80226f8:	f109 0910 	add.w	r9, r9, #16
 80226fc:	e7e8      	b.n	80226d0 <CoreRoot_BeginUpdate+0x68>
 80226fe:	ac16      	add	r4, sp, #88	; 0x58
 8022700:	eb05 1c07 	add.w	ip, r5, r7, lsl #4
      _this->lastRegions[ EwCheckIndex( i, 3 )] = tmpRegions[ EwCheckIndex( i, 3 )];
 8022704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8022708:	f508 765c 	add.w	r6, r8, #880	; 0x370
 802270c:	f108 0810 	add.w	r8, r8, #16
    for ( i = 0; i < tmpNoOfRegions; i = i + 1 )
 8022710:	45e0      	cmp	r8, ip
      _this->lastRegions[ EwCheckIndex( i, 3 )] = tmpRegions[ EwCheckIndex( i, 3 )];
 8022712:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    for ( i = 0; i < tmpNoOfRegions; i = i + 1 )
 8022716:	f104 0410 	add.w	r4, r4, #16
 802271a:	d1f3      	bne.n	8022704 <CoreRoot_BeginUpdate+0x9c>
    _this->noOfLastRegions = tmpNoOfRegions;
 802271c:	f8c5 73a0 	str.w	r7, [r5, #928]	; 0x3a0
 8022720:	f8d5 73f4 	ldr.w	r7, [r5, #1012]	; 0x3f4
  for ( j = 0; j < ( _this->noOfRegions - 1 ); j = j + 1 )
 8022724:	1e7c      	subs	r4, r7, #1
 8022726:	2c00      	cmp	r4, #0
 8022728:	dd3d      	ble.n	80227a6 <CoreRoot_BeginUpdate+0x13e>
 802272a:	f505 7b69 	add.w	fp, r5, #932	; 0x3a4
 802272e:	46d9      	mov	r9, fp
 8022730:	f04f 0800 	mov.w	r8, #0
    if ( _this->regionsArea[ EwCheckIndex( j, 4 )] > 0 )
 8022734:	f859 3b04 	ldr.w	r3, [r9], #4
 8022738:	2b00      	cmp	r3, #0
 802273a:	f108 0601 	add.w	r6, r8, #1
 802273e:	dc13      	bgt.n	8022768 <CoreRoot_BeginUpdate+0x100>
  for ( j = 0; j < ( _this->noOfRegions - 1 ); j = j + 1 )
 8022740:	1e7c      	subs	r4, r7, #1
 8022742:	42b4      	cmp	r4, r6
 8022744:	dd2f      	ble.n	80227a6 <CoreRoot_BeginUpdate+0x13e>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022746:	2e04      	cmp	r6, #4
 8022748:	d107      	bne.n	802275a <CoreRoot_BeginUpdate+0xf2>
 802274a:	f640 621e 	movw	r2, #3614	; 0xe1e
 802274e:	4631      	mov	r1, r6
 8022750:	4630      	mov	r0, r6
 8022752:	f7fe f8fb 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8022756:	f8d5 73f4 	ldr.w	r7, [r5, #1012]	; 0x3f4
    if ( _this->regionsArea[ EwCheckIndex( j, 4 )] > 0 )
 802275a:	f859 3b04 	ldr.w	r3, [r9], #4
 802275e:	46b0      	mov	r8, r6
 8022760:	2b00      	cmp	r3, #0
 8022762:	f108 0601 	add.w	r6, r8, #1
 8022766:	ddeb      	ble.n	8022740 <CoreRoot_BeginUpdate+0xd8>
      for ( k = j + 1; k < _this->noOfRegions; k = k + 1 )
 8022768:	42b7      	cmp	r7, r6
 802276a:	dde9      	ble.n	8022740 <CoreRoot_BeginUpdate+0xd8>
          XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 802276c:	f108 033b 	add.w	r3, r8, #59	; 0x3b
 8022770:	9309      	str	r3, [sp, #36]	; 0x24
 8022772:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022776:	9307      	str	r3, [sp, #28]
      for ( k = j + 1; k < _this->noOfRegions; k = k + 1 )
 8022778:	4634      	mov	r4, r6
 802277a:	9608      	str	r6, [sp, #32]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802277c:	2c03      	cmp	r4, #3
 802277e:	d905      	bls.n	802278c <CoreRoot_BeginUpdate+0x124>
 8022780:	f44f 6262 	mov.w	r2, #3616	; 0xe20
 8022784:	2104      	movs	r1, #4
 8022786:	4620      	mov	r0, r4
 8022788:	f7fe f8e0 	bl	802094c <EwCheckIndex.part.0.constprop.0>
        if ( _this->regionsArea[ EwCheckIndex( k, 4 )] > 0 )
 802278c:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8022790:	2b00      	cmp	r3, #0
 8022792:	dc30      	bgt.n	80227f6 <CoreRoot_BeginUpdate+0x18e>
      for ( k = j + 1; k < _this->noOfRegions; k = k + 1 )
 8022794:	f8d5 73f4 	ldr.w	r7, [r5, #1012]	; 0x3f4
 8022798:	3401      	adds	r4, #1
 802279a:	42a7      	cmp	r7, r4
 802279c:	dcee      	bgt.n	802277c <CoreRoot_BeginUpdate+0x114>
 802279e:	9e08      	ldr	r6, [sp, #32]
  for ( j = 0; j < ( _this->noOfRegions - 1 ); j = j + 1 )
 80227a0:	1e7c      	subs	r4, r7, #1
 80227a2:	42b4      	cmp	r4, r6
 80227a4:	dccf      	bgt.n	8022746 <CoreRoot_BeginUpdate+0xde>
  for ( i = _this->noOfRegions - 1; i >= 0; i = i - 1 )
 80227a6:	2c00      	cmp	r4, #0
 80227a8:	db21      	blt.n	80227ee <CoreRoot_BeginUpdate+0x186>
 80227aa:	f505 7b69 	add.w	fp, r5, #932	; 0x3a4
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80227ae:	2c03      	cmp	r4, #3
 80227b0:	f44f 6263 	mov.w	r2, #3632	; 0xe30
 80227b4:	f04f 0104 	mov.w	r1, #4
 80227b8:	4620      	mov	r0, r4
 80227ba:	dd0c      	ble.n	80227d6 <CoreRoot_BeginUpdate+0x16e>
 80227bc:	f7fe f8c6 	bl	802094c <EwCheckIndex.part.0.constprop.0>
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] == 0 )
 80227c0:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 80227c4:	b153      	cbz	r3, 80227dc <CoreRoot_BeginUpdate+0x174>
 80227c6:	3c01      	subs	r4, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80227c8:	2c03      	cmp	r4, #3
 80227ca:	f44f 6263 	mov.w	r2, #3632	; 0xe30
 80227ce:	f04f 0104 	mov.w	r1, #4
 80227d2:	4620      	mov	r0, r4
 80227d4:	dcf2      	bgt.n	80227bc <CoreRoot_BeginUpdate+0x154>
    if ( _this->regionsArea[ EwCheckIndex( i, 4 )] == 0 )
 80227d6:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 80227da:	b923      	cbnz	r3, 80227e6 <CoreRoot_BeginUpdate+0x17e>
      _this->noOfRegions = _this->noOfRegions - 1;
 80227dc:	f8d5 33f4 	ldr.w	r3, [r5, #1012]	; 0x3f4
 80227e0:	3b01      	subs	r3, #1
 80227e2:	f8c5 33f4 	str.w	r3, [r5, #1012]	; 0x3f4
  for ( i = _this->noOfRegions - 1; i >= 0; i = i - 1 )
 80227e6:	3c01      	subs	r4, #1
 80227e8:	d5e1      	bpl.n	80227ae <CoreRoot_BeginUpdate+0x146>
 80227ea:	f8d5 73f4 	ldr.w	r7, [r5, #1012]	; 0x3f4
}
 80227ee:	4638      	mov	r0, r7
 80227f0:	b023      	add	sp, #140	; 0x8c
 80227f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80227f6:	2c03      	cmp	r4, #3
 80227f8:	d95c      	bls.n	80228b4 <CoreRoot_BeginUpdate+0x24c>
 80227fa:	f640 6223 	movw	r2, #3619	; 0xe23
 80227fe:	2104      	movs	r1, #4
 8022800:	4620      	mov	r0, r4
          XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 8022802:	f104 083b 	add.w	r8, r4, #59	; 0x3b
 8022806:	f7fe f8a1 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 802280a:	eb05 1308 	add.w	r3, r5, r8, lsl #4
 802280e:	3304      	adds	r3, #4
 8022810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022812:	9e07      	ldr	r6, [sp, #28]
 8022814:	af01      	add	r7, sp, #4
 8022816:	6936      	ldr	r6, [r6, #16]
 8022818:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 802281c:	9b07      	ldr	r3, [sp, #28]
 802281e:	9600      	str	r6, [sp, #0]
 8022820:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8022824:	3304      	adds	r3, #4
 8022826:	4650      	mov	r0, sl
 8022828:	cb0e      	ldmia	r3, {r1, r2, r3}
 802282a:	f7f7 fc0e 	bl	801a04a <EwUnionRect>
 802282e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8022832:	f7f7 fcd8 	bl	801a1e6 <EwGetRectArea>
          if ((( unionArea - _this->regionsArea[ EwCheckIndex( j, 4 )]) - _this->regionsArea[ 
 8022836:	f859 3c04 	ldr.w	r3, [r9, #-4]
          XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 802283a:	4682      	mov	sl, r0
    return aIndex;
 802283c:	f640 6226 	movw	r2, #3622	; 0xe26
 8022840:	2104      	movs	r1, #4
 8022842:	4620      	mov	r0, r4
          if ((( unionArea - _this->regionsArea[ EwCheckIndex( j, 4 )]) - _this->regionsArea[ 
 8022844:	ebaa 0603 	sub.w	r6, sl, r3
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022848:	f7fe f880 	bl	802094c <EwCheckIndex.part.0.constprop.0>
          if ((( unionArea - _this->regionsArea[ EwCheckIndex( j, 4 )]) - _this->regionsArea[ 
 802284c:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 8022850:	1ab3      	subs	r3, r6, r2
 8022852:	2b00      	cmp	r3, #0
 8022854:	da9e      	bge.n	8022794 <CoreRoot_BeginUpdate+0x12c>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022856:	2c03      	cmp	r4, #3
 8022858:	d905      	bls.n	8022866 <CoreRoot_BeginUpdate+0x1fe>
 802285a:	f640 6229 	movw	r2, #3625	; 0xe29
 802285e:	2104      	movs	r1, #4
 8022860:	4620      	mov	r0, r4
 8022862:	f7fe f873 	bl	802094c <EwCheckIndex.part.0.constprop.0>
            _this->regions[ EwCheckIndex( j, 4 )] = EwUnionRect( _this->regions[ 
 8022866:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 802286a:	f108 0804 	add.w	r8, r8, #4
 802286e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8022872:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022874:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8022878:	eb05 1c06 	add.w	ip, r5, r6, lsl #4
 802287c:	f10c 0704 	add.w	r7, ip, #4
 8022880:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8022884:	9300      	str	r3, [sp, #0]
 8022886:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 802288a:	a80a      	add	r0, sp, #40	; 0x28
 802288c:	f7f7 fbdd 	bl	801a04a <EwUnionRect>
 8022890:	ab0a      	add	r3, sp, #40	; 0x28
 8022892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022894:	2c03      	cmp	r4, #3
            _this->regions[ EwCheckIndex( j, 4 )] = EwUnionRect( _this->regions[ 
 8022896:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
            _this->regionsArea[ EwCheckIndex( j, 4 )] = unionArea;
 802289a:	f849 ac04 	str.w	sl, [r9, #-4]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802289e:	d905      	bls.n	80228ac <CoreRoot_BeginUpdate+0x244>
 80228a0:	f640 622b 	movw	r2, #3627	; 0xe2b
 80228a4:	2104      	movs	r1, #4
 80228a6:	4620      	mov	r0, r4
 80228a8:	f7fe f850 	bl	802094c <EwCheckIndex.part.0.constprop.0>
            _this->regionsArea[ EwCheckIndex( k, 4 )] = 0;
 80228ac:	2300      	movs	r3, #0
 80228ae:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
 80228b2:	e76f      	b.n	8022794 <CoreRoot_BeginUpdate+0x12c>
          XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 80228b4:	f104 083b 	add.w	r8, r4, #59	; 0x3b
 80228b8:	eb05 1308 	add.w	r3, r5, r8, lsl #4
 80228bc:	3304      	adds	r3, #4
 80228be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80228c0:	9e07      	ldr	r6, [sp, #28]
 80228c2:	af01      	add	r7, sp, #4
 80228c4:	6936      	ldr	r6, [r6, #16]
 80228c6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80228ca:	9b07      	ldr	r3, [sp, #28]
 80228cc:	9600      	str	r6, [sp, #0]
 80228ce:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 80228d2:	3304      	adds	r3, #4
 80228d4:	4650      	mov	r0, sl
 80228d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80228d8:	f7f7 fbb7 	bl	801a04a <EwUnionRect>
 80228dc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80228e0:	f7f7 fc81 	bl	801a1e6 <EwGetRectArea>
          if ((( unionArea - _this->regionsArea[ EwCheckIndex( j, 4 )]) - _this->regionsArea[ 
 80228e4:	f859 3c04 	ldr.w	r3, [r9, #-4]
          XInt32 unionArea = EwGetRectArea( EwUnionRect( _this->regions[ EwCheckIndex( 
 80228e8:	4682      	mov	sl, r0
          if ((( unionArea - _this->regionsArea[ EwCheckIndex( j, 4 )]) - _this->regionsArea[ 
 80228ea:	1ac6      	subs	r6, r0, r3
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80228ec:	e7ae      	b.n	802284c <CoreRoot_BeginUpdate+0x1e4>
    for ( i = 0; i < _this->noOfLastRegions; i = i + 1 )
 80228ee:	f8d5 33a0 	ldr.w	r3, [r5, #928]	; 0x3a0
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	f77f af03 	ble.w	80226fe <CoreRoot_BeginUpdate+0x96>
 80228f8:	46a9      	mov	r9, r5
 80228fa:	2600      	movs	r6, #0
 80228fc:	ac12      	add	r4, sp, #72	; 0x48
    return aIndex;
 80228fe:	f509 735c 	add.w	r3, r9, #880	; 0x370
 8022902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8022908:	682b      	ldr	r3, [r5, #0]
 802290a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802290c:	9200      	str	r2, [sp, #0]
 802290e:	f8d3 a074 	ldr.w	sl, [r3, #116]	; 0x74
 8022912:	4628      	mov	r0, r5
 8022914:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8022918:	47d0      	blx	sl
    for ( i = 0; i < _this->noOfLastRegions; i = i + 1 )
 802291a:	f8d5 33a0 	ldr.w	r3, [r5, #928]	; 0x3a0
 802291e:	3601      	adds	r6, #1
 8022920:	42b3      	cmp	r3, r6
 8022922:	f640 6215 	movw	r2, #3605	; 0xe15
 8022926:	4631      	mov	r1, r6
 8022928:	4630      	mov	r0, r6
 802292a:	f77f aee8 	ble.w	80226fe <CoreRoot_BeginUpdate+0x96>
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802292e:	2e03      	cmp	r6, #3
 8022930:	d101      	bne.n	8022936 <CoreRoot_BeginUpdate+0x2ce>
 8022932:	f7fe f80b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8022936:	f109 0910 	add.w	r9, r9, #16
 802293a:	e7e0      	b.n	80228fe <CoreRoot_BeginUpdate+0x296>
 802293c:	20000010 	.word	0x20000010
 8022940:	200001e4 	.word	0x200001e4

08022944 <CoreRoot_UpdateGE20>:
{
 8022944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022946:	4604      	mov	r4, r0
 8022948:	b087      	sub	sp, #28
  if ( CoreRoot_BeginUpdate( _this ) == 0 )
 802294a:	4608      	mov	r0, r1
{
 802294c:	460f      	mov	r7, r1
 802294e:	4615      	mov	r5, r2
  if ( CoreRoot_BeginUpdate( _this ) == 0 )
 8022950:	f7ff fe8a 	bl	8022668 <CoreRoot_BeginUpdate>
 8022954:	b930      	cbnz	r0, 8022964 <CoreRoot_UpdateGE20+0x20>
    return _Const0001;
 8022956:	e9c4 0000 	strd	r0, r0, [r4]
 802295a:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
 802295e:	4620      	mov	r0, r4
 8022960:	b007      	add	sp, #28
 8022962:	bdf0      	pop	{r4, r5, r6, r7, pc}
  wholeArea = CoreRoot_UpdateCanvas( _this, aCanvas, _Const0000 );
 8022964:	4b0e      	ldr	r3, [pc, #56]	; (80229a0 <CoreRoot_UpdateGE20+0x5c>)
 8022966:	ae02      	add	r6, sp, #8
 8022968:	685a      	ldr	r2, [r3, #4]
 802296a:	9200      	str	r2, [sp, #0]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	462a      	mov	r2, r5
 8022970:	4630      	mov	r0, r6
 8022972:	4639      	mov	r1, r7
 8022974:	f7ff fd86 	bl	8022484 <CoreRoot_UpdateCanvas>
  if ( _this->noOfRegions > 0 )
 8022978:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 802297c:	2b00      	cmp	r3, #0
 802297e:	dd07      	ble.n	8022990 <CoreRoot_UpdateGE20+0x4c>
    _this->fpsCounter = _this->fpsCounter + 1;
 8022980:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
    _this->noOfRegions = 0;
 8022984:	2200      	movs	r2, #0
    _this->fpsCounter = _this->fpsCounter + 1;
 8022986:	3301      	adds	r3, #1
 8022988:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    _this->noOfRegions = 0;
 802298c:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
  return wholeArea;
 8022990:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8022994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8022998:	4620      	mov	r0, r4
 802299a:	b007      	add	sp, #28
 802299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802299e:	bf00      	nop
 80229a0:	08037aa4 	.word	0x08037aa4

080229a4 <CoreRoot__UpdateGE20>:
{
 80229a4:	b510      	push	{r4, lr}
 80229a6:	4604      	mov	r4, r0
  return CoreRoot_UpdateGE20((CoreRoot)_this, aCanvas );
 80229a8:	f7ff ffcc 	bl	8022944 <CoreRoot_UpdateGE20>
}
 80229ac:	4620      	mov	r0, r4
 80229ae:	bd10      	pop	{r4, pc}

080229b0 <CoreRoot__BeginUpdate>:
  return CoreRoot_BeginUpdate((CoreRoot)_this );
 80229b0:	f7ff be5a 	b.w	8022668 <CoreRoot_BeginUpdate>

080229b4 <CoreRoot__DoesNeedUpdate>:
  if ( _this->noOfRegions > 0 )
 80229b4:	f8d0 33f4 	ldr.w	r3, [r0, #1012]	; 0x3f4
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	dd01      	ble.n	80229c0 <CoreRoot__DoesNeedUpdate+0xc>
}
 80229bc:	2001      	movs	r0, #1
 80229be:	4770      	bx	lr
 80229c0:	f7fd bf98 	b.w	80208f4 <CoreRoot_DoesNeedUpdate.part.0>

080229c4 <CoreRoot_Initialize>:
{
 80229c4:	b570      	push	{r4, r5, r6, lr}
 80229c6:	b08c      	sub	sp, #48	; 0x30
 80229c8:	ab02      	add	r3, sp, #8
 80229ca:	e883 0006 	stmia.w	r3, {r1, r2}
  CoreRectView__OnSetBounds( _this, EwNewRect2Point( _Const0000, aSize ));
 80229ce:	4a18      	ldr	r2, [pc, #96]	; (8022a30 <CoreRoot_Initialize+0x6c>)
 80229d0:	9b03      	ldr	r3, [sp, #12]
 80229d2:	9300      	str	r3, [sp, #0]
 80229d4:	ac04      	add	r4, sp, #16
{
 80229d6:	4605      	mov	r5, r0
  CoreRectView__OnSetBounds( _this, EwNewRect2Point( _Const0000, aSize ));
 80229d8:	460b      	mov	r3, r1
 80229da:	4620      	mov	r0, r4
 80229dc:	ca06      	ldmia	r2, {r1, r2}
 80229de:	f7f7 fa7e 	bl	8019ede <EwNewRect2Point>
 80229e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80229e6:	ac08      	add	r4, sp, #32
 80229e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreRectView)_this)->_.VMT->OnSetBounds((CoreRectView)_this, value );
 80229ec:	682b      	ldr	r3, [r5, #0]
 80229ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80229f0:	9200      	str	r2, [sp, #0]
 80229f2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 80229f4:	4628      	mov	r0, r5
 80229f6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80229fa:	47b0      	blx	r6
  if ( _this->hasRootFocus )
 80229fc:	f895 33fe 	ldrb.w	r3, [r5, #1022]	; 0x3fe
    _this->Super3.viewState = _this->Super3.viewState | ( CoreViewStateFocused | 
 8022a00:	6a2e      	ldr	r6, [r5, #32]
  if ( _this->hasRootFocus )
 8022a02:	b193      	cbz	r3, 8022a2a <CoreRoot_Initialize+0x66>
    _this->Super3.viewState = _this->Super3.viewState | ( CoreViewStateFocused | 
 8022a04:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 8022a08:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8022a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ((CoreGroup)_this)->_.VMT->InvalidateArea((CoreGroup)_this, aArea );
 8022a12:	682b      	ldr	r3, [r5, #0]
 8022a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022a16:	9200      	str	r2, [sp, #0]
 8022a18:	4628      	mov	r0, r5
 8022a1a:	622e      	str	r6, [r5, #32]
 8022a1c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
 8022a1e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8022a22:	47b0      	blx	r6
}
 8022a24:	4628      	mov	r0, r5
 8022a26:	b00c      	add	sp, #48	; 0x30
 8022a28:	bd70      	pop	{r4, r5, r6, pc}
    _this->Super3.viewState = _this->Super3.viewState | CoreViewStateSelected;
 8022a2a:	f046 0620 	orr.w	r6, r6, #32
 8022a2e:	e7eb      	b.n	8022a08 <CoreRoot_Initialize+0x44>
 8022a30:	08037aa4 	.word	0x08037aa4

08022a34 <CoreRoot__Initialize>:
{
 8022a34:	b082      	sub	sp, #8
 8022a36:	466b      	mov	r3, sp
 8022a38:	e883 0006 	stmia.w	r3, {r1, r2}
  return CoreRoot_Initialize((CoreRoot)_this, aSize );
 8022a3c:	e893 0006 	ldmia.w	r3, {r1, r2}
}
 8022a40:	b002      	add	sp, #8
  return CoreRoot_Initialize((CoreRoot)_this, aSize );
 8022a42:	f7ff bfbf 	b.w	80229c4 <CoreRoot_Initialize>
 8022a46:	bf00      	nop

08022a48 <CoreRoot_DriveMultiTouchMovement>:
{
 8022a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a4c:	460e      	mov	r6, r1
 8022a4e:	b099      	sub	sp, #100	; 0x64
 8022a50:	a90c      	add	r1, sp, #48	; 0x30
  if (( aFinger < 0 ) || ( aFinger > 9 ))
 8022a52:	2e09      	cmp	r6, #9
{
 8022a54:	e881 000c 	stmia.w	r1, {r2, r3}
 8022a58:	4605      	mov	r5, r0
  if (( aFinger < 0 ) || ( aFinger > 9 ))
 8022a5a:	d905      	bls.n	8022a68 <CoreRoot_DriveMultiTouchMovement+0x20>
    _this->currentEventTimestamp = 0;
 8022a5c:	2000      	movs	r0, #0
 8022a5e:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
}
 8022a62:	b019      	add	sp, #100	; 0x64
 8022a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  offset = EwMovePointNeg( aPos, _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )]);
 8022a68:	f106 0758 	add.w	r7, r6, #88	; 0x58
 8022a6c:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 8022a70:	ac0e      	add	r4, sp, #56	; 0x38
 8022a72:	689a      	ldr	r2, [r3, #8]
 8022a74:	9200      	str	r2, [sp, #0]
 8022a76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a7a:	685b      	ldr	r3, [r3, #4]
 8022a7c:	9203      	str	r2, [sp, #12]
 8022a7e:	00ff      	lsls	r7, r7, #3
 8022a80:	c906      	ldmia	r1, {r1, r2}
  _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )] = aPos;
 8022a82:	f107 0904 	add.w	r9, r7, #4
 8022a86:	9002      	str	r0, [sp, #8]
  offset = EwMovePointNeg( aPos, _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )]);
 8022a88:	4620      	mov	r0, r4
 8022a8a:	f7f7 f9cd 	bl	8019e28 <EwMovePointNeg>
  _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )] = aPos;
 8022a8e:	eb05 0b09 	add.w	fp, r5, r9
 8022a92:	9a03      	ldr	r2, [sp, #12]
 8022a94:	f845 2009 	str.w	r2, [r5, r9]
 8022a98:	9802      	ldr	r0, [sp, #8]
 8022a9a:	f8cb 0004 	str.w	r0, [fp, #4]
    return aIndex;
 8022a9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  if (( _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] == 0 ) || !EwCompPoint( 
 8022aa2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8022aa6:	2b00      	cmp	r3, #0
 8022aa8:	d0d8      	beq.n	8022a5c <CoreRoot_DriveMultiTouchMovement+0x14>
 8022aaa:	4b99      	ldr	r3, [pc, #612]	; (8022d10 <CoreRoot_DriveMultiTouchMovement+0x2c8>)
 8022aac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022ab0:	cb0c      	ldmia	r3, {r2, r3}
 8022ab2:	f7f7 f99a 	bl	8019dea <EwCompPoint>
 8022ab6:	2800      	cmp	r0, #0
 8022ab8:	d0d0      	beq.n	8022a5c <CoreRoot_DriveMultiTouchMovement+0x14>
  grp = _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )]->Owner;
 8022aba:	f8d8 a05c 	ldr.w	sl, [r8, #92]	; 0x5c
 8022abe:	f8da 4018 	ldr.w	r4, [sl, #24]
  pos = aPos;
 8022ac2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
  while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8022ac6:	b1cc      	cbz	r4, 8022afc <CoreRoot_DriveMultiTouchMovement+0xb4>
 8022ac8:	42a5      	cmp	r5, r4
 8022aca:	f000 80b2 	beq.w	8022c32 <CoreRoot_DriveMultiTouchMovement+0x1ea>
 8022ace:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8022ad2:	e002      	b.n	8022ada <CoreRoot_DriveMultiTouchMovement+0x92>
 8022ad4:	42a5      	cmp	r5, r4
 8022ad6:	f000 80aa 	beq.w	8022c2e <CoreRoot_DriveMultiTouchMovement+0x1e6>
    pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8022ada:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8022ade:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8022ae0:	9100      	str	r1, [sp, #0]
 8022ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022ae4:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8022ae8:	4650      	mov	r0, sl
 8022aea:	f7f7 f99d 	bl	8019e28 <EwMovePointNeg>
    grp = grp->Super2.Owner;
 8022aee:	69a4      	ldr	r4, [r4, #24]
    pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8022af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8022af4:	2c00      	cmp	r4, #0
 8022af6:	d1ed      	bne.n	8022ad4 <CoreRoot_DriveMultiTouchMovement+0x8c>
 8022af8:	f8d8 a05c 	ldr.w	sl, [r8, #92]	; 0x5c
  if (( grp == 0 ) && ((CoreRoot)_this->cursorTargetView[ EwCheckIndex( aFinger, 
 8022afc:	4555      	cmp	r5, sl
 8022afe:	f000 8098 	beq.w	8022c32 <CoreRoot_DriveMultiTouchMovement+0x1ea>
    _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] = 0;
 8022b02:	2100      	movs	r1, #0
    _this->cursorFinger = aFinger;
 8022b04:	f8c5 6364 	str.w	r6, [r5, #868]	; 0x364
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022b08:	4882      	ldr	r0, [pc, #520]	; (8022d14 <CoreRoot_DriveMultiTouchMovement+0x2cc>)
    _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] = 0;
 8022b0a:	f8c8 105c 	str.w	r1, [r8, #92]	; 0x5c
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022b0e:	f7f6 fda1 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022b12:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022b16:	f8d8 c0bc 	ldr.w	ip, [r8, #188]	; 0xbc
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022b1a:	2b00      	cmp	r3, #0
    event->Super1.Time = _this->currentEventTimestamp;
 8022b1c:	bf1a      	itte	ne
 8022b1e:	6103      	strne	r3, [r0, #16]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022b20:	2201      	movne	r2, #1
 8022b22:	2200      	moveq	r2, #0
 8022b24:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022b28:	4604      	mov	r4, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022b2a:	7502      	strb	r2, [r0, #20]
    return aIndex;
 8022b2c:	e9d3 0189 	ldrd	r0, r1, [r3, #548]	; 0x224
 8022b30:	469e      	mov	lr, r3
 8022b32:	aa12      	add	r2, sp, #72	; 0x48
 8022b34:	e882 0003 	stmia.w	r2, {r0, r1}
 8022b38:	e9de 016b 	ldrd	r0, r1, [lr, #428]	; 0x1ac
 8022b3c:	f855 3009 	ldr.w	r3, [r5, r9]
 8022b40:	9308      	str	r3, [sp, #32]
 8022b42:	f8db 3004 	ldr.w	r3, [fp, #4]
 8022b46:	9304      	str	r3, [sp, #16]
 8022b48:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 8022b4c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8022b50:	e9de 019d 	ldrd	r0, r1, [lr, #628]	; 0x274
 8022b54:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
 8022b58:	e90e 0003 	stmdb	lr, {r0, r1}
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022b5c:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
 8022b60:	9306      	str	r3, [sp, #24]
 8022b62:	3754      	adds	r7, #84	; 0x54
 8022b64:	19eb      	adds	r3, r5, r7
  _this->Down = 0;
 8022b66:	f04f 0900 	mov.w	r9, #0
 8022b6a:	6859      	ldr	r1, [r3, #4]
 8022b6c:	59ef      	ldr	r7, [r5, r7]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022b6e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022b72:	9105      	str	r1, [sp, #20]
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022b74:	f10c 0c01 	add.w	ip, ip, #1
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022b78:	ca06      	ldmia	r2, {r1, r2}
 8022b7a:	9709      	str	r7, [sp, #36]	; 0x24
  _this->Finger = aFinger;
 8022b7c:	6426      	str	r6, [r4, #64]	; 0x40
  _this->Down = 0;
 8022b7e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022b82:	9000      	str	r0, [sp, #0]
 8022b84:	a80a      	add	r0, sp, #40	; 0x28
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022b86:	f8cd c01c 	str.w	ip, [sp, #28]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022b8a:	f7f7 f95f 	bl	8019e4c <EwMovePointPos>
 8022b8e:	ab0a      	add	r3, sp, #40	; 0x28
 8022b90:	e893 0003 	ldmia.w	r3, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022b94:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8022b96:	9b16      	ldr	r3, [sp, #88]	; 0x58
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022b98:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8022b9c:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022ba0:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8022ba4:	a80a      	add	r0, sp, #40	; 0x28
 8022ba6:	9700      	str	r7, [sp, #0]
 8022ba8:	f7f7 f950 	bl	8019e4c <EwMovePointPos>
 8022bac:	ab0a      	add	r3, sp, #40	; 0x28
 8022bae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022bb2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8022bb6:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->AutoDeflected = aAutoDeflected;
 8022bba:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022bbe:	f8da 3000 	ldr.w	r3, [sl]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022bc2:	9a08      	ldr	r2, [sp, #32]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022bc4:	9805      	ldr	r0, [sp, #20]
  _this->HoldPeriod = aHoldPeriod;
 8022bc6:	9906      	ldr	r1, [sp, #24]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022bc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022bca:	6222      	str	r2, [r4, #32]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022bcc:	61e0      	str	r0, [r4, #28]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022bce:	9a04      	ldr	r2, [sp, #16]
  _this->StrikeCount = aStrikeCount;
 8022bd0:	9807      	ldr	r0, [sp, #28]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022bd2:	6262      	str	r2, [r4, #36]	; 0x24
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  _this->StrikeCount = aStrikeCount;
 8022bd6:	62a0      	str	r0, [r4, #40]	; 0x28
  _this->HoldPeriod = aHoldPeriod;
 8022bd8:	62e1      	str	r1, [r4, #44]	; 0x2c
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022bda:	61a7      	str	r7, [r4, #24]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022bdc:	4621      	mov	r1, r4
 8022bde:	4650      	mov	r0, sl
 8022be0:	4798      	blx	r3
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8022be2:	4649      	mov	r1, r9
 8022be4:	484c      	ldr	r0, [pc, #304]	; (8022d18 <CoreRoot_DriveMultiTouchMovement+0x2d0>)
 8022be6:	f7f6 fd35 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022bea:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8022bee:	454b      	cmp	r3, r9
 8022bf0:	bf16      	itet	ne
 8022bf2:	2201      	movne	r2, #1
 8022bf4:	464a      	moveq	r2, r9
    event->Super1.Time = _this->currentEventTimestamp;
 8022bf6:	6103      	strne	r3, [r0, #16]
    CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8022bf8:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022bfc:	7502      	strb	r2, [r0, #20]
  _this->Down = 0;
 8022bfe:	2200      	movs	r2, #0
 8022c00:	8582      	strh	r2, [r0, #44]	; 0x2c
    CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8022c02:	3301      	adds	r3, #1
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8022c04:	682a      	ldr	r2, [r5, #0]
  _this->StrikeCount = aStrikeCount;
 8022c06:	6243      	str	r3, [r0, #36]	; 0x24
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022c08:	9b03      	ldr	r3, [sp, #12]
 8022c0a:	61c3      	str	r3, [r0, #28]
 8022c0c:	9b02      	ldr	r3, [sp, #8]
 8022c0e:	6203      	str	r3, [r0, #32]
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8022c10:	4601      	mov	r1, r0
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8022c12:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  _this->Finger = aFinger;
 8022c14:	6286      	str	r6, [r0, #40]	; 0x28
  _this->Target = aTarget;
 8022c16:	f8c0 a018 	str.w	sl, [r0, #24]
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8022c1a:	2218      	movs	r2, #24
 8022c1c:	4628      	mov	r0, r5
 8022c1e:	4798      	blx	r3
  _this->currentEventTimestamp = 0;
 8022c20:	2300      	movs	r3, #0
  return 1;
 8022c22:	2001      	movs	r0, #1
  _this->currentEventTimestamp = 0;
 8022c24:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
}
 8022c28:	b019      	add	sp, #100	; 0x64
 8022c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c2e:	f8d8 a05c 	ldr.w	sl, [r8, #92]	; 0x5c
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8022c32:	9205      	str	r2, [sp, #20]
 8022c34:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8022c38:	1868      	adds	r0, r5, r1
 8022c3a:	506a      	str	r2, [r5, r1]
 8022c3c:	6043      	str	r3, [r0, #4]
  CoreDragEvent event = EwNewObject( CoreDragEvent, 0 );
 8022c3e:	2100      	movs	r1, #0
    _this->cursorFinger = aFinger;
 8022c40:	f8c5 6364 	str.w	r6, [r5, #868]	; 0x364
  CoreDragEvent event = EwNewObject( CoreDragEvent, 0 );
 8022c44:	4835      	ldr	r0, [pc, #212]	; (8022d1c <CoreRoot_DriveMultiTouchMovement+0x2d4>)
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8022c46:	9304      	str	r3, [sp, #16]
  CoreDragEvent event = EwNewObject( CoreDragEvent, 0 );
 8022c48:	f7f6 fd04 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022c4c:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
  CoreDragEvent event = EwNewObject( CoreDragEvent, 0 );
 8022c50:	4604      	mov	r4, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022c52:	2900      	cmp	r1, #0
 8022c54:	bf14      	ite	ne
 8022c56:	2001      	movne	r0, #1
 8022c58:	2000      	moveq	r0, #0
 8022c5a:	7520      	strb	r0, [r4, #20]
  if ( _this->currentEventTimestamp != 0 )
 8022c5c:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
    event->Super1.Time = _this->currentEventTimestamp;
 8022c60:	bf18      	it	ne
 8022c62:	6121      	strne	r1, [r4, #16]
 8022c64:	4684      	mov	ip, r0
 8022c66:	e9d0 016b 	ldrd	r0, r1, [r0, #428]	; 0x1ac
  if ( _this->currentEventTimestamp != 0 )
 8022c6a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    return aIndex;
 8022c6e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8022c72:	e889 0003 	stmia.w	r9, {r0, r1}
 8022c76:	e9dc 019d 	ldrd	r0, r1, [ip, #628]	; 0x274
 8022c7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8022c7c:	ab18      	add	r3, sp, #96	; 0x60
 8022c7e:	e903 0003 	stmdb	r3, {r0, r1}
 8022c82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8022c86:	18e9      	adds	r1, r5, r3
    ((CoreEvent)CoreDragEvent_Initialize( CoreRoot_createDragEvent( _this ), aFinger, 
 8022c88:	f8d8 70bc 	ldr.w	r7, [r8, #188]	; 0xbc
 8022c8c:	f8d1 b004 	ldr.w	fp, [r1, #4]
 8022c90:	58eb      	ldr	r3, [r5, r3]
 8022c92:	f8d8 1184 	ldr.w	r1, [r8, #388]	; 0x184
 8022c96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022c98:	9212      	str	r2, [sp, #72]	; 0x48
  _this->Finger = aFinger;
 8022c9a:	64a6      	str	r6, [r4, #72]	; 0x48
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022c9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022c9e:	9307      	str	r3, [sp, #28]
 8022ca0:	ae0a      	add	r6, sp, #40	; 0x28
 8022ca2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ((CoreEvent)CoreDragEvent_Initialize( CoreRoot_createDragEvent( _this ), aFinger, 
 8022ca4:	9104      	str	r1, [sp, #16]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022ca6:	9200      	str	r2, [sp, #0]
 8022ca8:	9006      	str	r0, [sp, #24]
 8022caa:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8022cae:	4630      	mov	r0, r6
    ((CoreEvent)CoreDragEvent_Initialize( CoreRoot_createDragEvent( _this ), aFinger, 
 8022cb0:	3701      	adds	r7, #1
 8022cb2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8022cb6:	9705      	str	r7, [sp, #20]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022cb8:	f7f7 f8c8 	bl	8019e4c <EwMovePointPos>
 8022cbc:	e896 0003 	ldmia.w	r6, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022cc0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8022cc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022cc4:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8022cc8:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022ccc:	e899 0006 	ldmia.w	r9, {r1, r2}
 8022cd0:	4630      	mov	r0, r6
 8022cd2:	9700      	str	r7, [sp, #0]
 8022cd4:	f7f7 f8ba 	bl	8019e4c <EwMovePointPos>
 8022cd8:	e896 0003 	ldmia.w	r6, {r0, r1}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022cdc:	f8da 2000 	ldr.w	r2, [sl]
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022ce0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8022ce4:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022ce8:	6c53      	ldr	r3, [r2, #68]	; 0x44
  _this->StrikeCount = aSequelCount;
 8022cea:	9a05      	ldr	r2, [sp, #20]
 8022cec:	62a2      	str	r2, [r4, #40]	; 0x28
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022cee:	9a07      	ldr	r2, [sp, #28]
  _this->Offset = aOffset;
 8022cf0:	9806      	ldr	r0, [sp, #24]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022cf2:	61a2      	str	r2, [r4, #24]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022cf4:	9a03      	ldr	r2, [sp, #12]
  _this->HoldPeriod = aHoldPeriod;
 8022cf6:	9904      	ldr	r1, [sp, #16]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022cf8:	6222      	str	r2, [r4, #32]
 8022cfa:	9a02      	ldr	r2, [sp, #8]
  _this->HoldPeriod = aHoldPeriod;
 8022cfc:	62e1      	str	r1, [r4, #44]	; 0x2c
  _this->Offset = aOffset;
 8022cfe:	e9c4 080c 	strd	r0, r8, [r4, #48]	; 0x30
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022d02:	f8c4 b01c 	str.w	fp, [r4, #28]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022d06:	6262      	str	r2, [r4, #36]	; 0x24
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022d08:	4621      	mov	r1, r4
 8022d0a:	4650      	mov	r0, sl
 8022d0c:	4798      	blx	r3
 8022d0e:	e787      	b.n	8022c20 <CoreRoot_DriveMultiTouchMovement+0x1d8>
 8022d10:	08037aa4 	.word	0x08037aa4
 8022d14:	08037b30 	.word	0x08037b30
 8022d18:	08037b6c 	.word	0x08037b6c
 8022d1c:	08037c20 	.word	0x08037c20

08022d20 <CoreRoot__DriveMultiTouchMovement>:
{
 8022d20:	b410      	push	{r4}
 8022d22:	b083      	sub	sp, #12
 8022d24:	466c      	mov	r4, sp
 8022d26:	e884 000c 	stmia.w	r4, {r2, r3}
  return CoreRoot_DriveMultiTouchMovement((CoreRoot)_this, aFinger, aPos );
 8022d2a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
 8022d2e:	b003      	add	sp, #12
 8022d30:	f85d 4b04 	ldr.w	r4, [sp], #4
  return CoreRoot_DriveMultiTouchMovement((CoreRoot)_this, aFinger, aPos );
 8022d34:	f7ff be88 	b.w	8022a48 <CoreRoot_DriveMultiTouchMovement>

08022d38 <CoreKeyEvent_IsCode>:
  switch ( aCodeOrCategory )
 8022d38:	f1a1 038d 	sub.w	r3, r1, #141	; 0x8d
 8022d3c:	2b07      	cmp	r3, #7
 8022d3e:	d844      	bhi.n	8022dca <CoreKeyEvent_IsCode+0x92>
 8022d40:	e8df f003 	tbb	[pc, r3]
 8022d44:	163b330c 	.word	0x163b330c
 8022d48:	042c2722 	.word	0x042c2722
      return (XBool)(( _this->CharCode != 0x0000 ) || ( _this->Code != CoreKeyCodeNoKey ));
 8022d4c:	8b83      	ldrh	r3, [r0, #28]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d131      	bne.n	8022db6 <CoreKeyEvent_IsCode+0x7e>
 8022d52:	6980      	ldr	r0, [r0, #24]
 8022d54:	3800      	subs	r0, #0
 8022d56:	bf18      	it	ne
 8022d58:	2001      	movne	r0, #1
 8022d5a:	4770      	bx	lr
        || (( _this->CharCode >= 'a' ) && ( _this->CharCode <= 'z' )));
 8022d5c:	8b80      	ldrh	r0, [r0, #28]
 8022d5e:	f020 0020 	bic.w	r0, r0, #32
 8022d62:	3841      	subs	r0, #65	; 0x41
 8022d64:	b280      	uxth	r0, r0
 8022d66:	2819      	cmp	r0, #25
 8022d68:	bf8c      	ite	hi
 8022d6a:	2000      	movhi	r0, #0
 8022d6c:	2001      	movls	r0, #1
      return (XBool)((( _this->CharCode >= 'A' ) && ( _this->CharCode <= 'Z' )) 
 8022d6e:	4770      	bx	lr
      return (XBool)(((( _this->CharCode >= 'A' ) && ( _this->CharCode <= 'F' )) 
 8022d70:	8b80      	ldrh	r0, [r0, #28]
        || (( _this->CharCode >= 'a' ) && ( _this->CharCode <= 'f' ))) || (( _this->CharCode 
 8022d72:	f020 0320 	bic.w	r3, r0, #32
 8022d76:	3b41      	subs	r3, #65	; 0x41
 8022d78:	2b05      	cmp	r3, #5
 8022d7a:	d91c      	bls.n	8022db6 <CoreKeyEvent_IsCode+0x7e>
 8022d7c:	3830      	subs	r0, #48	; 0x30
 8022d7e:	2809      	cmp	r0, #9
 8022d80:	bf8c      	ite	hi
 8022d82:	2000      	movhi	r0, #0
 8022d84:	2001      	movls	r0, #1
 8022d86:	4770      	bx	lr
      return (XBool)( _this->CharCode != 0x0000 );
 8022d88:	8b80      	ldrh	r0, [r0, #28]
 8022d8a:	3800      	subs	r0, #0
 8022d8c:	bf18      	it	ne
 8022d8e:	2001      	movne	r0, #1
 8022d90:	4770      	bx	lr
      return (XBool)(( _this->CharCode == 0x0000 ) && ( _this->Code != CoreKeyCodeNoKey ));
 8022d92:	8b83      	ldrh	r3, [r0, #28]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d0dc      	beq.n	8022d52 <CoreKeyEvent_IsCode+0x1a>
 8022d98:	2000      	movs	r0, #0
 8022d9a:	4770      	bx	lr
        || ( _this->Code == CoreKeyCodeUp )) || ( _this->Code == CoreKeyCodeDown ));
 8022d9c:	6980      	ldr	r0, [r0, #24]
 8022d9e:	3804      	subs	r0, #4
 8022da0:	2803      	cmp	r0, #3
 8022da2:	bf8c      	ite	hi
 8022da4:	2000      	movhi	r0, #0
 8022da6:	2001      	movls	r0, #1
      return (XBool)(((( _this->Code == CoreKeyCodeLeft ) || ( _this->Code == CoreKeyCodeRight )) 
 8022da8:	4770      	bx	lr
      return (XBool)(((( _this->CharCode >= 'A' ) && ( _this->CharCode <= 'Z' )) 
 8022daa:	8b80      	ldrh	r0, [r0, #28]
        || (( _this->CharCode >= 'a' ) && ( _this->CharCode <= 'z' ))) || (( _this->CharCode 
 8022dac:	f020 0320 	bic.w	r3, r0, #32
 8022db0:	3b41      	subs	r3, #65	; 0x41
 8022db2:	2b19      	cmp	r3, #25
 8022db4:	d8e2      	bhi.n	8022d7c <CoreKeyEvent_IsCode+0x44>
 8022db6:	2001      	movs	r0, #1
      return (XBool)(( _this->CharCode != 0x0000 ) || ( _this->Code != CoreKeyCodeNoKey ));
 8022db8:	4770      	bx	lr
      return (XBool)(( _this->CharCode >= '0' ) && ( _this->CharCode <= '9' ));
 8022dba:	8b80      	ldrh	r0, [r0, #28]
 8022dbc:	3830      	subs	r0, #48	; 0x30
 8022dbe:	b280      	uxth	r0, r0
 8022dc0:	2809      	cmp	r0, #9
 8022dc2:	bf8c      	ite	hi
 8022dc4:	2000      	movhi	r0, #0
 8022dc6:	2001      	movls	r0, #1
 8022dc8:	4770      	bx	lr
  return (XBool)( aCodeOrCategory == _this->Code );
 8022dca:	6980      	ldr	r0, [r0, #24]
 8022dcc:	1a43      	subs	r3, r0, r1
 8022dce:	4258      	negs	r0, r3
 8022dd0:	4158      	adcs	r0, r3
}
 8022dd2:	4770      	bx	lr

08022dd4 <CoreCursorEvent_InitializeDown>:
{
 8022dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022dd8:	b086      	sub	sp, #24
 8022dda:	ae04      	add	r6, sp, #16
 8022ddc:	e886 000c 	stmia.w	r6, {r2, r3}
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022de0:	ad02      	add	r5, sp, #8
 8022de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  _this->Finger = aFinger;
 8022de4:	6401      	str	r1, [r0, #64]	; 0x40
  _this->Down = 1;
 8022de6:	2201      	movs	r2, #1
{
 8022de8:	4604      	mov	r4, r0
  _this->Down = 1;
 8022dea:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022dee:	e896 0006 	ldmia.w	r6, {r1, r2}
 8022df2:	4628      	mov	r0, r5
 8022df4:	9300      	str	r3, [sp, #0]
{
 8022df6:	e9dd 730c 	ldrd	r7, r3, [sp, #48]	; 0x30
 8022dfa:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022dfe:	f7f7 f825 	bl	8019e4c <EwMovePointPos>
 8022e02:	e895 0003 	ldmia.w	r5, {r0, r1}
  _this->HittingPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e08:	9200      	str	r2, [sp, #0]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022e0a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8022e0e:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->HittingPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022e12:	e896 0006 	ldmia.w	r6, {r1, r2}
 8022e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e18:	4628      	mov	r0, r5
 8022e1a:	f7f7 f817 	bl	8019e4c <EwMovePointPos>
 8022e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8022e22:	f104 0230 	add.w	r2, r4, #48	; 0x30
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022e26:	ab10      	add	r3, sp, #64	; 0x40
  _this->HittingPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022e28:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022e2c:	e893 0003 	ldmia.w	r3, {r0, r1}
  _this->HoldPeriod = 0;
 8022e30:	2500      	movs	r5, #0
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022e32:	f104 0220 	add.w	r2, r4, #32
  _this->GlobalHittingPos = aGlobalCurrentPos;
 8022e36:	f104 0318 	add.w	r3, r4, #24
  _this->StrikeCount = aStrikeCount;
 8022e3a:	62a7      	str	r7, [r4, #40]	; 0x28
  _this->AutoDeflected = aAutoDeflected;
 8022e3c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
  _this->HoldPeriod = 0;
 8022e40:	62e5      	str	r5, [r4, #44]	; 0x2c
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022e42:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->GlobalHittingPos = aGlobalCurrentPos;
 8022e46:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8022e4a:	4620      	mov	r0, r4
 8022e4c:	b006      	add	sp, #24
 8022e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e52:	bf00      	nop

08022e54 <CoreRoot_DeflectCursor>:
{
 8022e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 0 ) 
 8022e58:	f8d0 5364 	ldr.w	r5, [r0, #868]	; 0x364
{
 8022e5c:	b097      	sub	sp, #92	; 0x5c
 8022e5e:	4688      	mov	r8, r1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022e60:	2d09      	cmp	r5, #9
{
 8022e62:	a90e      	add	r1, sp, #56	; 0x38
 8022e64:	e881 000c 	stmia.w	r1, {r2, r3}
 8022e68:	4604      	mov	r4, r0
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022e6a:	d905      	bls.n	8022e78 <CoreRoot_DeflectCursor+0x24>
 8022e6c:	f241 0244 	movw	r2, #4164	; 0x1044
 8022e70:	210a      	movs	r1, #10
 8022e72:	4628      	mov	r0, r5
 8022e74:	f7fd fd6a 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  if (( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 0 ) 
 8022e78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8022e7c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	f000 81b4 	beq.w	80231ec <CoreRoot_DeflectCursor+0x398>
      || ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 
 8022e84:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022e88:	2d09      	cmp	r5, #9
 8022e8a:	d80b      	bhi.n	8022ea4 <CoreRoot_DeflectCursor+0x50>
      || ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 
 8022e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022e92:	4598      	cmp	r8, r3
 8022e94:	f000 81aa 	beq.w	80231ec <CoreRoot_DeflectCursor+0x398>
  tmp = _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )];
 8022e98:	3516      	adds	r5, #22
 8022e9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022e9e:	f8d3 b004 	ldr.w	fp, [r3, #4]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022ea2:	e024      	b.n	8022eee <CoreRoot_DeflectCursor+0x9a>
 8022ea4:	4628      	mov	r0, r5
      || ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 
 8022ea6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8022eaa:	f241 0245 	movw	r2, #4165	; 0x1045
 8022eae:	210a      	movs	r1, #10
 8022eb0:	f7fd fd4c 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8022eb4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8022eb6:	4543      	cmp	r3, r8
 8022eb8:	f000 8198 	beq.w	80231ec <CoreRoot_DeflectCursor+0x398>
  tmp = _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )];
 8022ebc:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022ec0:	2d09      	cmp	r5, #9
 8022ec2:	d9e9      	bls.n	8022e98 <CoreRoot_DeflectCursor+0x44>
 8022ec4:	4628      	mov	r0, r5
 8022ec6:	f241 0249 	movw	r2, #4169	; 0x1049
 8022eca:	210a      	movs	r1, #10
 8022ecc:	f7fd fd3e 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  tmp = _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )];
 8022ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 8022ed4:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
  tmp = _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )];
 8022ed8:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022edc:	2d09      	cmp	r5, #9
 8022ede:	d905      	bls.n	8022eec <CoreRoot_DeflectCursor+0x98>
 8022ee0:	f241 024a 	movw	r2, #4170	; 0x104a
 8022ee4:	210a      	movs	r1, #10
 8022ee6:	4628      	mov	r0, r5
 8022ee8:	f7fd fd30 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8022eec:	3516      	adds	r5, #22
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 8022eee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8022ef2:	2100      	movs	r1, #0
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022ef4:	48bf      	ldr	r0, [pc, #764]	; (80231f4 <CoreRoot_DeflectCursor+0x3a0>)
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 8022ef6:	6069      	str	r1, [r5, #4]
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022ef8:	f7f6 fbac 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022efc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022f00:	f8d4 9364 	ldr.w	r9, [r4, #868]	; 0x364
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	bf16      	itet	ne
 8022f08:	2201      	movne	r2, #1
 8022f0a:	2200      	moveq	r2, #0
    event->Super1.Time = _this->currentEventTimestamp;
 8022f0c:	6103      	strne	r3, [r0, #16]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022f0e:	f1b9 0f09 	cmp.w	r9, #9
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8022f12:	4606      	mov	r6, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8022f14:	7502      	strb	r2, [r0, #20]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8022f16:	464f      	mov	r7, r9
 8022f18:	f200 8170 	bhi.w	80231fc <CoreRoot_DeflectCursor+0x3a8>
 8022f1c:	464d      	mov	r5, r9
  EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorSequelCounter[ EwCheckIndex( 
 8022f1e:	46aa      	mov	sl, r5
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022f20:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8022f24:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8022f28:	930a      	str	r3, [sp, #40]	; 0x28
  EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorSequelCounter[ EwCheckIndex( 
 8022f2a:	eb04 038a 	add.w	r3, r4, sl, lsl #2
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8022f2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8022f32:	3301      	adds	r3, #1
 8022f34:	930b      	str	r3, [sp, #44]	; 0x2c
{
 8022f36:	463b      	mov	r3, r7
    return aIndex;
 8022f38:	eb04 02c9 	add.w	r2, r4, r9, lsl #3
 8022f3c:	e9d2 0189 	ldrd	r0, r1, [r2, #548]	; 0x224
 8022f40:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8022f44:	aa10      	add	r2, sp, #64	; 0x40
 8022f46:	e882 0003 	stmia.w	r2, {r0, r1}
 8022f4a:	e9d5 016b 	ldrd	r0, r1, [r5, #428]	; 0x1ac
 8022f4e:	eb04 0cca 	add.w	ip, r4, sl, lsl #3
 8022f52:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8022f56:	e88a 0003 	stmia.w	sl, {r0, r1}
 8022f5a:	e9dc 019d 	ldrd	r0, r1, [ip, #628]	; 0x274
 8022f5e:	00db      	lsls	r3, r3, #3
 8022f60:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8022f64:	ad14      	add	r5, sp, #80	; 0x50
 8022f66:	00ff      	lsls	r7, r7, #3
 8022f68:	e885 0003 	stmia.w	r5, {r0, r1}
  _this->Down = 0;
 8022f6c:	eb04 0c03 	add.w	ip, r4, r3
 8022f70:	f507 7745 	add.w	r7, r7, #788	; 0x314
 8022f74:	19e1      	adds	r1, r4, r7
 8022f76:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022f7a:	58e3      	ldr	r3, [r4, r3]
 8022f7c:	6849      	ldr	r1, [r1, #4]
 8022f7e:	59e7      	ldr	r7, [r4, r7]
 8022f80:	9006      	str	r0, [sp, #24]
  _this->Finger = aFinger;
 8022f82:	f8c6 9040 	str.w	r9, [r6, #64]	; 0x40
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022f86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022f88:	9308      	str	r3, [sp, #32]
  _this->Down = 0;
 8022f8a:	f04f 0900 	mov.w	r9, #0
 8022f8e:	f886 9044 	strb.w	r9, [r6, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022f92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022f94:	9107      	str	r1, [sp, #28]
 8022f96:	ca06      	ldmia	r2, {r1, r2}
 8022f98:	9000      	str	r0, [sp, #0]
 8022f9a:	a80c      	add	r0, sp, #48	; 0x30
 8022f9c:	9709      	str	r7, [sp, #36]	; 0x24
 8022f9e:	f7f6 ff55 	bl	8019e4c <EwMovePointPos>
 8022fa2:	ab0c      	add	r3, sp, #48	; 0x30
 8022fa4:	e893 0003 	ldmia.w	r3, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022fa8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8022faa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8022fac:	f106 0238 	add.w	r2, r6, #56	; 0x38
 8022fb0:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022fb4:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8022fb8:	a80c      	add	r0, sp, #48	; 0x30
 8022fba:	9700      	str	r7, [sp, #0]
 8022fbc:	f7f6 ff46 	bl	8019e4c <EwMovePointPos>
 8022fc0:	ab0c      	add	r3, sp, #48	; 0x30
 8022fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
  _this->AutoDeflected = aAutoDeflected;
 8022fc6:	2201      	movs	r2, #1
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8022fc8:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8022fcc:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->AutoDeflected = aAutoDeflected;
 8022fd0:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022fd4:	9a08      	ldr	r2, [sp, #32]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022fd6:	f8db 3000 	ldr.w	r3, [fp]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022fda:	6232      	str	r2, [r6, #32]
  _this->HoldPeriod = aHoldPeriod;
 8022fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022fde:	9806      	ldr	r0, [sp, #24]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022fe0:	9907      	ldr	r1, [sp, #28]
 8022fe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  _this->HoldPeriod = aHoldPeriod;
 8022fe4:	62f2      	str	r2, [r6, #44]	; 0x2c
  _this->StrikeCount = aStrikeCount;
 8022fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fe8:	62b2      	str	r2, [r6, #40]	; 0x28
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8022fec:	6270      	str	r0, [r6, #36]	; 0x24
  _this->GlobalHittingPos = aGlobalHittingPos;
 8022fee:	61f1      	str	r1, [r6, #28]
 8022ff0:	61b7      	str	r7, [r6, #24]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8022ff2:	4631      	mov	r1, r6
 8022ff4:	4658      	mov	r0, fp
 8022ff6:	4798      	blx	r3
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8022ff8:	4649      	mov	r1, r9
 8022ffa:	487f      	ldr	r0, [pc, #508]	; (80231f8 <CoreRoot_DeflectCursor+0x3a4>)
 8022ffc:	f7f6 fb2a 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8023000:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8023004:	454b      	cmp	r3, r9
 8023006:	bf08      	it	eq
 8023008:	464a      	moveq	r2, r9
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 802300a:	f8d4 9364 	ldr.w	r9, [r4, #868]	; 0x364
    event->Super1.Time = _this->currentEventTimestamp;
 802300e:	bf1c      	itt	ne
 8023010:	6103      	strne	r3, [r0, #16]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8023012:	2201      	movne	r2, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023014:	f1b9 0f09 	cmp.w	r9, #9
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8023018:	4606      	mov	r6, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 802301a:	7502      	strb	r2, [r0, #20]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802301c:	464f      	mov	r7, r9
 802301e:	f200 814c 	bhi.w	80232ba <CoreRoot_DeflectCursor+0x466>
  CoreRoot_createCursorGrabEvent( _this ), _this->cursorFinger, _this->cursorSequelCounter[ 
 8023022:	eb04 0389 	add.w	r3, r4, r9, lsl #2
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8023026:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 802302a:	f103 0a01 	add.w	sl, r3, #1
    return aIndex;
 802302e:	00ff      	lsls	r7, r7, #3
 8023030:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8023034:	19e2      	adds	r2, r4, r7
  _this->Down = 0;
 8023036:	f44f 7380 	mov.w	r3, #256	; 0x100
 802303a:	6851      	ldr	r1, [r2, #4]
 802303c:	59e2      	ldr	r2, [r4, r7]
 802303e:	85b3      	strh	r3, [r6, #44]	; 0x2c
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8023040:	6823      	ldr	r3, [r4, #0]
  _this->Target = aTarget;
 8023042:	f8c6 b018 	str.w	fp, [r6, #24]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8023046:	e9c6 2107 	strd	r2, r1, [r6, #28]
  _this->StrikeCount = aStrikeCount;
 802304a:	e9c6 a909 	strd	sl, r9, [r6, #36]	; 0x24
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 802304e:	4631      	mov	r1, r6
 8023050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023052:	2218      	movs	r2, #24
 8023054:	4620      	mov	r0, r4
 8023056:	4798      	blx	r3
  pos = _this->cursorLastPos[ EwCheckIndex( _this->cursorFinger, 10 )];
 8023058:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802305c:	2e09      	cmp	r6, #9
 802305e:	d905      	bls.n	802306c <CoreRoot_DeflectCursor+0x218>
 8023060:	f241 0256 	movw	r2, #4182	; 0x1056
 8023064:	210a      	movs	r1, #10
 8023066:	4630      	mov	r0, r6
 8023068:	f7fd fc70 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  pos = _this->cursorLastPos[ EwCheckIndex( _this->cursorFinger, 10 )];
 802306c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8023070:	e9d6 01b1 	ldrd	r0, r1, [r6, #708]	; 0x2c4
 8023074:	e885 0003 	stmia.w	r5, {r0, r1}
  if ( aNewTarget != 0 )
 8023078:	f1b8 0f00 	cmp.w	r8, #0
 802307c:	f000 80a7 	beq.w	80231ce <CoreRoot_DeflectCursor+0x37a>
    grp = aNewTarget->Owner;
 8023080:	f8d8 6018 	ldr.w	r6, [r8, #24]
  while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8023084:	b966      	cbnz	r6, 80230a0 <CoreRoot_DeflectCursor+0x24c>
 8023086:	e09f      	b.n	80231c8 <CoreRoot_DeflectCursor+0x374>
    pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8023088:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 802308a:	9300      	str	r3, [sp, #0]
 802308c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 802308e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8023092:	4628      	mov	r0, r5
 8023094:	f7f6 fec8 	bl	8019e28 <EwMovePointNeg>
    grp = grp->Super2.Owner;
 8023098:	69b6      	ldr	r6, [r6, #24]
  while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 802309a:	2e00      	cmp	r6, #0
 802309c:	f000 8094 	beq.w	80231c8 <CoreRoot_DeflectCursor+0x374>
 80230a0:	42b4      	cmp	r4, r6
 80230a2:	d1f1      	bne.n	8023088 <CoreRoot_DeflectCursor+0x234>
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 80230a4:	4854      	ldr	r0, [pc, #336]	; (80231f8 <CoreRoot_DeflectCursor+0x3a4>)
 80230a6:	2100      	movs	r1, #0
 80230a8:	f7f6 fad4 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80230ac:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 80230b0:	f8d4 9364 	ldr.w	r9, [r4, #868]	; 0x364
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	bf16      	itet	ne
 80230b8:	2201      	movne	r2, #1
 80230ba:	2200      	moveq	r2, #0
    event->Super1.Time = _this->currentEventTimestamp;
 80230bc:	6103      	strne	r3, [r0, #16]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80230be:	f1b9 0f09 	cmp.w	r9, #9
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 80230c2:	4607      	mov	r7, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80230c4:	7502      	strb	r2, [r0, #20]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80230c6:	464e      	mov	r6, r9
 80230c8:	f200 810f 	bhi.w	80232ea <CoreRoot_DeflectCursor+0x496>
  CoreRoot_createCursorGrabEvent( _this ), _this->cursorFinger, _this->cursorSequelCounter[ 
 80230cc:	eb04 0389 	add.w	r3, r4, r9, lsl #2
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 80230d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80230d4:	f103 0a01 	add.w	sl, r3, #1
    return aIndex;
 80230d8:	00f6      	lsls	r6, r6, #3
 80230da:	f506 7631 	add.w	r6, r6, #708	; 0x2c4
 80230de:	19a2      	adds	r2, r4, r6
  _this->Down = 1;
 80230e0:	f240 1301 	movw	r3, #257	; 0x101
 80230e4:	6851      	ldr	r1, [r2, #4]
 80230e6:	59a2      	ldr	r2, [r4, r6]
 80230e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 80230ea:	6823      	ldr	r3, [r4, #0]
  _this->Target = aTarget;
 80230ec:	f8c7 8018 	str.w	r8, [r7, #24]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 80230f0:	e9c7 2107 	strd	r2, r1, [r7, #28]
  _this->StrikeCount = aStrikeCount;
 80230f4:	e9c7 a909 	strd	sl, r9, [r7, #36]	; 0x24
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 80230f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80230fa:	4639      	mov	r1, r7
 80230fc:	2218      	movs	r2, #24
 80230fe:	4620      	mov	r0, r4
 8023100:	4798      	blx	r3
  ticksCount = (XUInt32)EwGetTicks();
 8023102:	f006 fb5b 	bl	80297bc <EwGetTicks>
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = aNewTarget;
 8023106:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802310a:	2e09      	cmp	r6, #9
  ticksCount = (XUInt32)EwGetTicks();
 802310c:	4681      	mov	r9, r0
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802310e:	f200 8147 	bhi.w	80233a0 <CoreRoot_DeflectCursor+0x54c>
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = aNewTarget;
 8023112:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023116:	4637      	mov	r7, r6
 8023118:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
  _this->cursorHitOffset[ EwCheckIndex( _this->cursorFinger, 10 )] = aHitOffset;
 802311c:	ab0e      	add	r3, sp, #56	; 0x38
 802311e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023122:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8023126:	f507 771d 	add.w	r7, r7, #628	; 0x274
 802312a:	e887 0003 	stmia.w	r7, {r0, r1}
  _this->cursorHittingPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 802312e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023132:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8023136:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 802313a:	e883 0003 	stmia.w	r3, {r0, r1}
 802313e:	4637      	mov	r7, r6
  _this->cursorCurrentPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 8023140:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023144:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8023148:	f507 7709 	add.w	r7, r7, #548	; 0x224
 802314c:	e887 0003 	stmia.w	r7, {r0, r1}
  _this->cursorSequelCounter[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 8023150:	f106 032e 	add.w	r3, r6, #46	; 0x2e
 8023154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023158:	2200      	movs	r2, #0
 802315a:	605a      	str	r2, [r3, #4]
 802315c:	4637      	mov	r7, r6
  _this->cursorHoldPeriod[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 802315e:	3760      	adds	r7, #96	; 0x60
 8023160:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8023164:	2300      	movs	r3, #0
 8023166:	607b      	str	r3, [r7, #4]
  _this->cursorHittingTime[ EwCheckIndex( _this->cursorFinger, 10 )] = ticksCount;
 8023168:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802316c:	4637      	mov	r7, r6
 802316e:	f8c3 91fc 	str.w	r9, [r3, #508]	; 0x1fc
 8023172:	46b0      	mov	r8, r6
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )] = _this->cursorLastPos[ 
 8023174:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8023178:	e9d7 01b1 	ldrd	r0, r1, [r7, #708]	; 0x2c4
 802317c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8023180:	f506 7645 	add.w	r6, r6, #788	; 0x314
 8023184:	e886 0003 	stmia.w	r6, {r0, r1}
  CoreView__HandleEvent( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 8023188:	eb04 0888 	add.w	r8, r4, r8, lsl #2
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 802318c:	4819      	ldr	r0, [pc, #100]	; (80231f4 <CoreRoot_DeflectCursor+0x3a0>)
  CoreView__HandleEvent( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 802318e:	f8d8 a05c 	ldr.w	sl, [r8, #92]	; 0x5c
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8023192:	2100      	movs	r1, #0
 8023194:	f7f6 fa5e 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8023198:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 802319c:	f8d4 8364 	ldr.w	r8, [r4, #868]	; 0x364
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	bf16      	itet	ne
 80231a4:	2201      	movne	r2, #1
 80231a6:	2200      	moveq	r2, #0
    event->Super1.Time = _this->currentEventTimestamp;
 80231a8:	6103      	strne	r3, [r0, #16]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80231aa:	f1b8 0f09 	cmp.w	r8, #9
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 80231ae:	4607      	mov	r7, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80231b0:	7502      	strb	r2, [r0, #20]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80231b2:	f200 80b2 	bhi.w	802331a <CoreRoot_DeflectCursor+0x4c6>
  _this ), _this->cursorFinger, pos, _this->cursorSequelCounter[ EwCheckIndex( _this->cursorFinger, 
 80231b6:	eb04 0388 	add.w	r3, r4, r8, lsl #2
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 80231ba:	46c3      	mov	fp, r8
 80231bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80231c0:	f103 0901 	add.w	r9, r3, #1
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )])));
 80231c4:	465e      	mov	r6, fp
 80231c6:	e0ca      	b.n	802335e <CoreRoot_DeflectCursor+0x50a>
  if (( grp == 0 ) && ((CoreRoot)aNewTarget != _this ))
 80231c8:	4544      	cmp	r4, r8
 80231ca:	f43f af6b 	beq.w	80230a4 <CoreRoot_DeflectCursor+0x250>
    _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 80231ce:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80231d2:	2d09      	cmp	r5, #9
 80231d4:	d905      	bls.n	80231e2 <CoreRoot_DeflectCursor+0x38e>
 80231d6:	f241 0264 	movw	r2, #4196	; 0x1064
 80231da:	210a      	movs	r1, #10
 80231dc:	4628      	mov	r0, r5
 80231de:	f7fd fbb5 	bl	802094c <EwCheckIndex.part.0.constprop.0>
    _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 80231e2:	3516      	adds	r5, #22
 80231e4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80231e8:	2300      	movs	r3, #0
 80231ea:	6063      	str	r3, [r4, #4]
}
 80231ec:	b017      	add	sp, #92	; 0x5c
 80231ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f2:	bf00      	nop
 80231f4:	08037b30 	.word	0x08037b30
 80231f8:	08037b6c 	.word	0x08037b6c
 80231fc:	f241 024c 	movw	r2, #4172	; 0x104c
 8023200:	210a      	movs	r1, #10
 8023202:	4648      	mov	r0, r9
 8023204:	f7fd fba2 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  10 )], _this->cursorHittingPos[ EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorHoldPeriod[ 
 8023208:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802320c:	2d09      	cmp	r5, #9
 802320e:	462f      	mov	r7, r5
 8023210:	f67f ae85 	bls.w	8022f1e <CoreRoot_DeflectCursor+0xca>
 8023214:	f241 024d 	movw	r2, #4173	; 0x104d
 8023218:	210a      	movs	r1, #10
 802321a:	4628      	mov	r0, r5
 802321c:	f7fd fb96 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorSequelCounter[ EwCheckIndex( 
 8023220:	f8d4 a364 	ldr.w	sl, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023224:	f1ba 0f09 	cmp.w	sl, #9
 8023228:	4657      	mov	r7, sl
 802322a:	f67f ae79 	bls.w	8022f20 <CoreRoot_DeflectCursor+0xcc>
 802322e:	4650      	mov	r0, sl
 8023230:	f241 024e 	movw	r2, #4174	; 0x104e
 8023234:	210a      	movs	r1, #10
 8023236:	f7fd fb89 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 802323a:	eb04 038a 	add.w	r3, r4, sl, lsl #2
  EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorSequelCounter[ EwCheckIndex( 
 802323e:	f8d4 a364 	ldr.w	sl, [r4, #868]	; 0x364
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8023242:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8023246:	930a      	str	r3, [sp, #40]	; 0x28
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023248:	f1ba 0f09 	cmp.w	sl, #9
 802324c:	4657      	mov	r7, sl
 802324e:	f67f ae6c 	bls.w	8022f2a <CoreRoot_DeflectCursor+0xd6>
 8023252:	4650      	mov	r0, sl
 8023254:	f241 024e 	movw	r2, #4174	; 0x104e
 8023258:	210a      	movs	r1, #10
 802325a:	f7fd fb77 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorSequelCounter[ EwCheckIndex( 
 802325e:	eb04 038a 	add.w	r3, r4, sl, lsl #2
  _this->cursorFinger, 10 )] + 1, _this->cursorHitOffset[ EwCheckIndex( _this->cursorFinger, 
 8023262:	f8d4 a364 	ldr.w	sl, [r4, #868]	; 0x364
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8023266:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802326a:	f1ba 0f09 	cmp.w	sl, #9
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 802326e:	f103 0301 	add.w	r3, r3, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023272:	4657      	mov	r7, sl
  CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8023274:	930b      	str	r3, [sp, #44]	; 0x2c
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023276:	f67f ae5e 	bls.w	8022f36 <CoreRoot_DeflectCursor+0xe2>
 802327a:	f241 024f 	movw	r2, #4175	; 0x104f
 802327e:	210a      	movs	r1, #10
 8023280:	4650      	mov	r0, sl
 8023282:	f7fd fb63 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  10 )], 1, _this->cursorLastPos[ EwCheckIndex( _this->cursorFinger, 10 )], _this->cursorFirstPos[ 
 8023286:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802328a:	2b09      	cmp	r3, #9
 802328c:	f240 8128 	bls.w	80234e0 <CoreRoot_DeflectCursor+0x68c>
 8023290:	4618      	mov	r0, r3
 8023292:	f241 0250 	movw	r2, #4176	; 0x1050
 8023296:	210a      	movs	r1, #10
 8023298:	9306      	str	r3, [sp, #24]
 802329a:	f7fd fb57 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  EwCheckIndex( _this->cursorFinger, 10 )])));
 802329e:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80232a2:	9b06      	ldr	r3, [sp, #24]
 80232a4:	2f09      	cmp	r7, #9
 80232a6:	f67f ae47 	bls.w	8022f38 <CoreRoot_DeflectCursor+0xe4>
 80232aa:	f241 0251 	movw	r2, #4177	; 0x1051
 80232ae:	210a      	movs	r1, #10
 80232b0:	4638      	mov	r0, r7
 80232b2:	f7fd fb4b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80232b6:	9b06      	ldr	r3, [sp, #24]
 80232b8:	e63e      	b.n	8022f38 <CoreRoot_DeflectCursor+0xe4>
 80232ba:	f241 0254 	movw	r2, #4180	; 0x1054
 80232be:	210a      	movs	r1, #10
 80232c0:	4648      	mov	r0, r9
 80232c2:	f7fd fb43 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  CoreRoot_createCursorGrabEvent( _this ), _this->cursorFinger, _this->cursorSequelCounter[ 
 80232c6:	eb04 0389 	add.w	r3, r4, r9, lsl #2
  EwCheckIndex( _this->cursorFinger, 10 )] + 1, 1, tmp, _this->cursorLastPos[ EwCheckIndex( 
 80232ca:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 80232ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80232d2:	2f09      	cmp	r7, #9
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 80232d4:	f103 0a01 	add.w	sl, r3, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80232d8:	f67f aea9 	bls.w	802302e <CoreRoot_DeflectCursor+0x1da>
 80232dc:	f241 0254 	movw	r2, #4180	; 0x1054
 80232e0:	210a      	movs	r1, #10
 80232e2:	4638      	mov	r0, r7
 80232e4:	f7fd fb32 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80232e8:	e6a1      	b.n	802302e <CoreRoot_DeflectCursor+0x1da>
 80232ea:	f241 026a 	movw	r2, #4202	; 0x106a
 80232ee:	210a      	movs	r1, #10
 80232f0:	4648      	mov	r0, r9
 80232f2:	f7fd fb2b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  CoreRoot_createCursorGrabEvent( _this ), _this->cursorFinger, _this->cursorSequelCounter[ 
 80232f6:	eb04 0389 	add.w	r3, r4, r9, lsl #2
  EwCheckIndex( _this->cursorFinger, 10 )])), CoreViewStateEnabled | CoreViewStateTouchable );
 80232fa:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 80232fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023302:	2e09      	cmp	r6, #9
  CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 8023304:	f103 0a01 	add.w	sl, r3, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023308:	f67f aee6 	bls.w	80230d8 <CoreRoot_DeflectCursor+0x284>
 802330c:	f241 026b 	movw	r2, #4203	; 0x106b
 8023310:	210a      	movs	r1, #10
 8023312:	4630      	mov	r0, r6
 8023314:	f7fd fb1a 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8023318:	e6de      	b.n	80230d8 <CoreRoot_DeflectCursor+0x284>
 802331a:	f241 0279 	movw	r2, #4217	; 0x1079
 802331e:	210a      	movs	r1, #10
 8023320:	4640      	mov	r0, r8
 8023322:	f7fd fb13 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this ), _this->cursorFinger, pos, _this->cursorSequelCounter[ EwCheckIndex( _this->cursorFinger, 
 8023326:	eb04 0388 	add.w	r3, r4, r8, lsl #2
  10 )] + 1, _this->cursorHitOffset[ EwCheckIndex( _this->cursorFinger, 10 )], 1, 
 802332a:	f8d4 b364 	ldr.w	fp, [r4, #868]	; 0x364
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 802332e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023332:	f1bb 0f09 	cmp.w	fp, #9
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 8023336:	f103 0901 	add.w	r9, r3, #1
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802333a:	f67f af43 	bls.w	80231c4 <CoreRoot_DeflectCursor+0x370>
 802333e:	f241 027a 	movw	r2, #4218	; 0x107a
 8023342:	210a      	movs	r1, #10
 8023344:	4658      	mov	r0, fp
 8023346:	f7fd fb01 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )])));
 802334a:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802334e:	2e09      	cmp	r6, #9
 8023350:	d905      	bls.n	802335e <CoreRoot_DeflectCursor+0x50a>
 8023352:	f241 027b 	movw	r2, #4219	; 0x107b
 8023356:	210a      	movs	r1, #10
 8023358:	4630      	mov	r0, r6
 802335a:	f7fd faf7 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 802335e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8023362:	e9d6 01c5 	ldrd	r0, r1, [r6, #788]	; 0x314
 8023366:	ab04      	add	r3, sp, #16
 8023368:	e883 0003 	stmia.w	r3, {r0, r1}
 802336c:	eb04 04cb 	add.w	r4, r4, fp, lsl #3
 8023370:	e9d4 019d 	ldrd	r0, r1, [r4, #628]	; 0x274
 8023374:	2301      	movs	r3, #1
 8023376:	9303      	str	r3, [sp, #12]
 8023378:	ac01      	add	r4, sp, #4
 802337a:	e895 000c 	ldmia.w	r5, {r2, r3}
 802337e:	e884 0003 	stmia.w	r4, {r0, r1}
 8023382:	4641      	mov	r1, r8
 8023384:	f8cd 9000 	str.w	r9, [sp]
 8023388:	4638      	mov	r0, r7
 802338a:	f7ff fd23 	bl	8022dd4 <CoreCursorEvent_InitializeDown>
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 802338e:	f8da 3000 	ldr.w	r3, [sl]
 8023392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  10 )], ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( 
 8023394:	4601      	mov	r1, r0
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8023396:	4650      	mov	r0, sl
}
 8023398:	b017      	add	sp, #92	; 0x5c
 802339a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 802339e:	4718      	bx	r3
 80233a0:	4630      	mov	r0, r6
 80233a2:	f241 026e 	movw	r2, #4206	; 0x106e
 80233a6:	210a      	movs	r1, #10
 80233a8:	f7fd fad0 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80233ac:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = aNewTarget;
 80233b0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80233b4:	2f09      	cmp	r7, #9
  _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] = aNewTarget;
 80233b6:	f8c6 805c 	str.w	r8, [r6, #92]	; 0x5c
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80233ba:	f240 8093 	bls.w	80234e4 <CoreRoot_DeflectCursor+0x690>
 80233be:	4638      	mov	r0, r7
 80233c0:	210a      	movs	r1, #10
 80233c2:	f241 026f 	movw	r2, #4207	; 0x106f
 80233c6:	f7fd fac1 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->cursorHitOffset[ EwCheckIndex( _this->cursorFinger, 10 )] = aHitOffset;
 80233ca:	ab0e      	add	r3, sp, #56	; 0x38
 80233cc:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
 80233d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80233d4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80233d8:	f507 771d 	add.w	r7, r7, #628	; 0x274
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80233dc:	2e09      	cmp	r6, #9
  _this->cursorHitOffset[ EwCheckIndex( _this->cursorFinger, 10 )] = aHitOffset;
 80233de:	e887 0003 	stmia.w	r7, {r0, r1}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80233e2:	f67f aea4 	bls.w	802312e <CoreRoot_DeflectCursor+0x2da>
 80233e6:	4630      	mov	r0, r6
 80233e8:	210a      	movs	r1, #10
 80233ea:	f241 0270 	movw	r2, #4208	; 0x1070
 80233ee:	f7fd faad 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80233f2:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
  _this->cursorHittingPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 80233f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80233fa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80233fe:	f506 76d6 	add.w	r6, r6, #428	; 0x1ac
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023402:	2f09      	cmp	r7, #9
  _this->cursorHittingPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 8023404:	e886 0003 	stmia.w	r6, {r0, r1}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023408:	d96e      	bls.n	80234e8 <CoreRoot_DeflectCursor+0x694>
 802340a:	4638      	mov	r0, r7
 802340c:	210a      	movs	r1, #10
 802340e:	f241 0271 	movw	r2, #4209	; 0x1071
 8023412:	f7fd fa9b 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 8023416:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
  _this->cursorCurrentPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 802341a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802341e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8023422:	f507 7709 	add.w	r7, r7, #548	; 0x224
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023426:	2e09      	cmp	r6, #9
  _this->cursorCurrentPos[ EwCheckIndex( _this->cursorFinger, 10 )] = pos;
 8023428:	e887 0003 	stmia.w	r7, {r0, r1}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802342c:	f67f ae90 	bls.w	8023150 <CoreRoot_DeflectCursor+0x2fc>
 8023430:	4630      	mov	r0, r6
 8023432:	f241 0272 	movw	r2, #4210	; 0x1072
 8023436:	210a      	movs	r1, #10
 8023438:	f7fd fa88 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->cursorSequelCounter[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 802343c:	362e      	adds	r6, #46	; 0x2e
 802343e:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
 8023442:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8023446:	f04f 0800 	mov.w	r8, #0
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802344a:	2f09      	cmp	r7, #9
  _this->cursorSequelCounter[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 802344c:	f8c6 8004 	str.w	r8, [r6, #4]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023450:	d94c      	bls.n	80234ec <CoreRoot_DeflectCursor+0x698>
 8023452:	4638      	mov	r0, r7
 8023454:	f241 0273 	movw	r2, #4211	; 0x1073
 8023458:	210a      	movs	r1, #10
 802345a:	f7fd fa77 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->cursorHoldPeriod[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 802345e:	3760      	adds	r7, #96	; 0x60
 8023460:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
 8023464:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023468:	2e09      	cmp	r6, #9
  _this->cursorHoldPeriod[ EwCheckIndex( _this->cursorFinger, 10 )] = 0;
 802346a:	f8c7 8004 	str.w	r8, [r7, #4]
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802346e:	f67f ae7b 	bls.w	8023168 <CoreRoot_DeflectCursor+0x314>
 8023472:	4630      	mov	r0, r6
 8023474:	f241 0274 	movw	r2, #4212	; 0x1074
 8023478:	210a      	movs	r1, #10
 802347a:	f7fd fa67 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 802347e:	f8d4 7364 	ldr.w	r7, [r4, #868]	; 0x364
  _this->cursorHittingTime[ EwCheckIndex( _this->cursorFinger, 10 )] = ticksCount;
 8023482:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023486:	2f09      	cmp	r7, #9
  _this->cursorHittingTime[ EwCheckIndex( _this->cursorFinger, 10 )] = ticksCount;
 8023488:	f8c6 91fc 	str.w	r9, [r6, #508]	; 0x1fc
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802348c:	d930      	bls.n	80234f0 <CoreRoot_DeflectCursor+0x69c>
 802348e:	f241 0276 	movw	r2, #4214	; 0x1076
 8023492:	210a      	movs	r1, #10
 8023494:	4638      	mov	r0, r7
 8023496:	f7fd fa59 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )] = _this->cursorLastPos[ 
 802349a:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802349e:	2e09      	cmp	r6, #9
 80234a0:	d91c      	bls.n	80234dc <CoreRoot_DeflectCursor+0x688>
 80234a2:	4630      	mov	r0, r6
 80234a4:	210a      	movs	r1, #10
 80234a6:	f241 0275 	movw	r2, #4213	; 0x1075
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )] = _this->cursorLastPos[ 
 80234aa:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80234ae:	f7fd fa4d 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80234b2:	f8d4 8364 	ldr.w	r8, [r4, #868]	; 0x364
 80234b6:	e9d7 01b1 	ldrd	r0, r1, [r7, #708]	; 0x2c4
 80234ba:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80234be:	f506 7645 	add.w	r6, r6, #788	; 0x314
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80234c2:	f1b8 0f09 	cmp.w	r8, #9
  _this->cursorFirstPos[ EwCheckIndex( _this->cursorFinger, 10 )] = _this->cursorLastPos[ 
 80234c6:	e886 0003 	stmia.w	r6, {r0, r1}
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80234ca:	f67f ae5d 	bls.w	8023188 <CoreRoot_DeflectCursor+0x334>
 80234ce:	f241 0277 	movw	r2, #4215	; 0x1077
 80234d2:	210a      	movs	r1, #10
 80234d4:	4640      	mov	r0, r8
 80234d6:	f7fd fa39 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80234da:	e655      	b.n	8023188 <CoreRoot_DeflectCursor+0x334>
 80234dc:	46b0      	mov	r8, r6
 80234de:	e649      	b.n	8023174 <CoreRoot_DeflectCursor+0x320>
 80234e0:	461f      	mov	r7, r3
 80234e2:	e528      	b.n	8022f36 <CoreRoot_DeflectCursor+0xe2>
 80234e4:	463e      	mov	r6, r7
 80234e6:	e619      	b.n	802311c <CoreRoot_DeflectCursor+0x2c8>
 80234e8:	463e      	mov	r6, r7
 80234ea:	e629      	b.n	8023140 <CoreRoot_DeflectCursor+0x2ec>
 80234ec:	463e      	mov	r6, r7
 80234ee:	e636      	b.n	802315e <CoreRoot_DeflectCursor+0x30a>
 80234f0:	46b8      	mov	r8, r7
 80234f2:	463e      	mov	r6, r7
 80234f4:	e63e      	b.n	8023174 <CoreRoot_DeflectCursor+0x320>
 80234f6:	bf00      	nop

080234f8 <CoreRoot_RetargetCursorWithReason>:
{
 80234f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 0 )
 80234fc:	f8d0 5364 	ldr.w	r5, [r0, #868]	; 0x364
    aNewTarget = 0;
 8023500:	4288      	cmp	r0, r1
 8023502:	bf14      	ite	ne
 8023504:	4688      	movne	r8, r1
 8023506:	f04f 0800 	moveq.w	r8, #0
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 802350a:	2d09      	cmp	r5, #9
{
 802350c:	b08f      	sub	sp, #60	; 0x3c
 802350e:	4604      	mov	r4, r0
 8023510:	4617      	mov	r7, r2
 8023512:	4699      	mov	r9, r3
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023514:	d856      	bhi.n	80235c4 <CoreRoot_RetargetCursorWithReason+0xcc>
  if ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 0 )
 8023516:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 802351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802351c:	2b00      	cmp	r3, #0
 802351e:	d04e      	beq.n	80235be <CoreRoot_RetargetCursorWithReason+0xc6>
  hit = CoreView__CursorHitTest( _this, EwMoveRectPos( _Const000E, _this->cursorLastPos[ 
 8023520:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8023524:	e9d5 01b1 	ldrd	r0, r1, [r5, #708]	; 0x2c4
 8023528:	4e36      	ldr	r6, [pc, #216]	; (8023604 <CoreRoot_RetargetCursorWithReason+0x10c>)
 802352a:	ad06      	add	r5, sp, #24
 802352c:	68f3      	ldr	r3, [r6, #12]
 802352e:	aa01      	add	r2, sp, #4
 8023530:	e882 0003 	stmia.w	r2, {r0, r1}
 8023534:	4628      	mov	r0, r5
 8023536:	9300      	str	r3, [sp, #0]
 8023538:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 802353c:	f7f6 fe2b 	bl	801a196 <EwMoveRectPos>
 8023540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8023544:	ad0a      	add	r5, sp, #40	; 0x28
 8023546:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802354a:	f8d4 0364 	ldr.w	r0, [r4, #868]	; 0x364
  return ((CoreView)_this)->_.VMT->CursorHitTest((CoreView)_this, aArea, aFinger
 802354e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023550:	6823      	ldr	r3, [r4, #0]
 8023552:	f8cd 9010 	str.w	r9, [sp, #16]
 8023556:	e9cd 1000 	strd	r1, r0, [sp]
 802355a:	2201      	movs	r2, #1
 802355c:	f8cd 800c 	str.w	r8, [sp, #12]
 8023560:	9202      	str	r2, [sp, #8]
 8023562:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8023564:	4620      	mov	r0, r4
 8023566:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802356a:	47b0      	blx	r6
  if (( hit != 0 ) && ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 802356c:	4605      	mov	r5, r0
 802356e:	b1b8      	cbz	r0, 80235a0 <CoreRoot_RetargetCursorWithReason+0xa8>
 8023570:	f8d4 6364 	ldr.w	r6, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 8023574:	2e09      	cmp	r6, #9
 8023576:	d905      	bls.n	8023584 <CoreRoot_RetargetCursorWithReason+0x8c>
 8023578:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 802357c:	210a      	movs	r1, #10
 802357e:	4630      	mov	r0, r6
 8023580:	f7fd f9e4 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  if (( hit != 0 ) && ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 8023584:	eb04 0686 	add.w	r6, r4, r6, lsl #2
      10 )] != hit->View ))
 8023588:	6929      	ldr	r1, [r5, #16]
  if (( hit != 0 ) && ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 802358a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 802358c:	428b      	cmp	r3, r1
 802358e:	d016      	beq.n	80235be <CoreRoot_RetargetCursorWithReason+0xc6>
    CoreRoot_DeflectCursor( _this, hit->View, hit->Offset );
 8023590:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8023594:	4620      	mov	r0, r4
}
 8023596:	b00f      	add	sp, #60	; 0x3c
 8023598:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CoreRoot_DeflectCursor( _this, aFallbackTarget, _Const0000 );
 802359c:	f7ff bc5a 	b.w	8022e54 <CoreRoot_DeflectCursor>
  if (( hit == 0 ) && ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 80235a0:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80235a4:	2d09      	cmp	r5, #9
 80235a6:	d905      	bls.n	80235b4 <CoreRoot_RetargetCursorWithReason+0xbc>
 80235a8:	f241 0224 	movw	r2, #4132	; 0x1024
 80235ac:	210a      	movs	r1, #10
 80235ae:	4628      	mov	r0, r5
 80235b0:	f7fd f9cc 	bl	802094c <EwCheckIndex.part.0.constprop.0>
  if (( hit == 0 ) && ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 
 80235b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80235b8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80235ba:	42bb      	cmp	r3, r7
 80235bc:	d118      	bne.n	80235f0 <CoreRoot_RetargetCursorWithReason+0xf8>
}
 80235be:	b00f      	add	sp, #60	; 0x3c
 80235c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80235c4:	4628      	mov	r0, r5
  if ( _this->cursorTargetView[ EwCheckIndex( _this->cursorFinger, 10 )] == 0 )
 80235c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80235ca:	f241 0219 	movw	r2, #4121	; 0x1019
 80235ce:	210a      	movs	r1, #10
 80235d0:	f7fd f9bc 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80235d4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	d0f1      	beq.n	80235be <CoreRoot_RetargetCursorWithReason+0xc6>
  EwCheckIndex( _this->cursorFinger, 10 )]), _this->cursorFinger, 1, aNewTarget, 
 80235da:	f8d4 5364 	ldr.w	r5, [r4, #868]	; 0x364
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
 80235de:	2d09      	cmp	r5, #9
 80235e0:	d99e      	bls.n	8023520 <CoreRoot_RetargetCursorWithReason+0x28>
 80235e2:	f241 021d 	movw	r2, #4125	; 0x101d
 80235e6:	210a      	movs	r1, #10
 80235e8:	4628      	mov	r0, r5
 80235ea:	f7fd f9af 	bl	802094c <EwCheckIndex.part.0.constprop.0>
 80235ee:	e797      	b.n	8023520 <CoreRoot_RetargetCursorWithReason+0x28>
    CoreRoot_DeflectCursor( _this, aFallbackTarget, _Const0000 );
 80235f0:	4b05      	ldr	r3, [pc, #20]	; (8023608 <CoreRoot_RetargetCursorWithReason+0x110>)
 80235f2:	cb0c      	ldmia	r3, {r2, r3}
 80235f4:	4639      	mov	r1, r7
 80235f6:	4620      	mov	r0, r4
}
 80235f8:	b00f      	add	sp, #60	; 0x3c
 80235fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CoreRoot_DeflectCursor( _this, aFallbackTarget, _Const0000 );
 80235fe:	f7ff bc29 	b.w	8022e54 <CoreRoot_DeflectCursor>
 8023602:	bf00      	nop
 8023604:	08037b08 	.word	0x08037b08
 8023608:	08037aa4 	.word	0x08037aa4

0802360c <CoreSimpleTouchHandler_HandleEvent>:
{
 802360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023610:	468b      	mov	fp, r1
 8023612:	b08d      	sub	sp, #52	; 0x34
  CoreCursorEvent event1 = EwCastObject( aEvent, CoreCursorEvent );
 8023614:	49ab      	ldr	r1, [pc, #684]	; (80238c4 <CoreSimpleTouchHandler_HandleEvent+0x2b8>)
{
 8023616:	4604      	mov	r4, r0
  CoreCursorEvent event1 = EwCastObject( aEvent, CoreCursorEvent );
 8023618:	4658      	mov	r0, fp
 802361a:	f7f6 f927 	bl	801986c <EwCastObject>
  CoreDragEvent event2 = EwCastObject( aEvent, CoreDragEvent );
 802361e:	49aa      	ldr	r1, [pc, #680]	; (80238c8 <CoreSimpleTouchHandler_HandleEvent+0x2bc>)
  CoreCursorEvent event1 = EwCastObject( aEvent, CoreCursorEvent );
 8023620:	4605      	mov	r5, r0
  CoreDragEvent event2 = EwCastObject( aEvent, CoreDragEvent );
 8023622:	4658      	mov	r0, fp
 8023624:	f7f6 f922 	bl	801986c <EwCastObject>
  XBool inside = _this->Inside;
 8023628:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 802362c:	9303      	str	r3, [sp, #12]
  CoreDragEvent event2 = EwCastObject( aEvent, CoreDragEvent );
 802362e:	4606      	mov	r6, r0
  if (( event1 == 0 ) && ( event2 == 0 ))
 8023630:	2d00      	cmp	r5, #0
 8023632:	f000 8177 	beq.w	8023924 <CoreSimpleTouchHandler_HandleEvent+0x318>
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 8023636:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 802363a:	2f00      	cmp	r7, #0
 802363c:	f040 8128 	bne.w	8023890 <CoreSimpleTouchHandler_HandleEvent+0x284>
  hold = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 0 ));
 8023640:	46b8      	mov	r8, r7
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 8023642:	46b9      	mov	r9, r7
  timeout = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 
 8023644:	2300      	movs	r3, #0
 8023646:	9304      	str	r3, [sp, #16]
  if (((( _this->RetargetCondition & CoreRetargetReasonForeignPress ) == CoreRetargetReasonForeignPress ) 
 8023648:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  release = (XBool)(( event1 != 0 ) && !event1->Down );
 802364c:	fab7 f787 	clz	r7, r7
 8023650:	097f      	lsrs	r7, r7, #5
  if (((( _this->RetargetCondition & CoreRetargetReasonForeignPress ) == CoreRetargetReasonForeignPress ) 
 8023652:	069b      	lsls	r3, r3, #26
 8023654:	46ba      	mov	sl, r7
 8023656:	d506      	bpl.n	8023666 <CoreSimpleTouchHandler_HandleEvent+0x5a>
      && ( _this->state > 0 )) && ( _this->state < 33554432 ))
 8023658:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802365a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 802365e:	3b01      	subs	r3, #1
 8023660:	4293      	cmp	r3, r2
 8023662:	f0c0 8180 	bcc.w	8023966 <CoreSimpleTouchHandler_HandleEvent+0x35a>
  if ( press )
 8023666:	f1b9 0f00 	cmp.w	r9, #0
 802366a:	f000 816b 	beq.w	8023944 <CoreSimpleTouchHandler_HandleEvent+0x338>
    _this->state = _this->state | ( 1 << event1->Finger );
 802366e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8023670:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8023672:	2101      	movs	r1, #1
 8023674:	4081      	lsls	r1, r0
 8023676:	4319      	orrs	r1, r3
    for ( fingers = _this->state & 4095; fingers > 0; fingers = fingers >> 1 )
 8023678:	f3c1 030b 	ubfx	r3, r1, #0, #12
    _this->state = _this->state | ( 1 << event1->Finger );
 802367c:	66e1      	str	r1, [r4, #108]	; 0x6c
    for ( fingers = _this->state & 4095; fingers > 0; fingers = fingers >> 1 )
 802367e:	b14b      	cbz	r3, 8023694 <CoreSimpleTouchHandler_HandleEvent+0x88>
    XInt32 noOfFingers = 0;
 8023680:	2200      	movs	r2, #0
      if (( fingers & 1 ) != 0 )
 8023682:	f013 0f01 	tst.w	r3, #1
        noOfFingers = noOfFingers + 1;
 8023686:	bf18      	it	ne
 8023688:	3201      	addne	r2, #1
    for ( fingers = _this->state & 4095; fingers > 0; fingers = fingers >> 1 )
 802368a:	085b      	lsrs	r3, r3, #1
 802368c:	d1f9      	bne.n	8023682 <CoreSimpleTouchHandler_HandleEvent+0x76>
    if ( noOfFingers == 1 )
 802368e:	2a01      	cmp	r2, #1
 8023690:	f000 81a0 	beq.w	80239d4 <CoreSimpleTouchHandler_HandleEvent+0x3c8>
  if ( release )
 8023694:	2f00      	cmp	r7, #0
 8023696:	f000 811b 	beq.w	80238d0 <CoreSimpleTouchHandler_HandleEvent+0x2c4>
    _this->state = ( _this->state & ~( 1 << event1->Finger )) | 33554432;
 802369a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 802369c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 802369e:	2301      	movs	r3, #1
 80236a0:	4083      	lsls	r3, r0
 80236a2:	ea22 0203 	bic.w	r2, r2, r3
 80236a6:	f042 7300 	orr.w	r3, r2, #33554432	; 0x2000000
 80236aa:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ( release && event1->AutoDeflected )
 80236ac:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
 80236b0:	b111      	cbz	r1, 80236b8 <CoreSimpleTouchHandler_HandleEvent+0xac>
    _this->state = _this->state | 67108864;
 80236b2:	f042 63c0 	orr.w	r3, r2, #100663296	; 0x6000000
 80236b6:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ( release && (( _this->state & 4095 ) == 0 ))
 80236b8:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80236bc:	b902      	cbnz	r2, 80236c0 <CoreSimpleTouchHandler_HandleEvent+0xb4>
    _this->stateRetargetReason = 0;
 80236be:	66a2      	str	r2, [r4, #104]	; 0x68
  if ( release && (( _this->state & 16777215 ) == 0 ))
 80236c0:	f033 427f 	bics.w	r2, r3, #4278190080	; 0xff000000
 80236c4:	f040 8146 	bne.w	8023954 <CoreSimpleTouchHandler_HandleEvent+0x348>
    _this->state = 0;
 80236c8:	66e2      	str	r2, [r4, #108]	; 0x6c
  if ( hold && ( _this->state >= 67108864 ))
 80236ca:	fa5f f888 	uxtb.w	r8, r8
 80236ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if (( event1 != 0 ) && (( _this->state & ( 4096 << event1->Finger )) == 0 ))
 80236d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80236d4:	fa02 f000 	lsl.w	r0, r2, r0
 80236d8:	4218      	tst	r0, r3
 80236da:	f000 80ed 	beq.w	80238b8 <CoreSimpleTouchHandler_HandleEvent+0x2ac>
  if (( event2 != 0 ) && (( _this->state & ( 4096 << event2->Finger )) == 0 ))
 80236de:	b13e      	cbz	r6, 80236f0 <CoreSimpleTouchHandler_HandleEvent+0xe4>
 80236e0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80236e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80236e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80236e8:	408b      	lsls	r3, r1
 80236ea:	4213      	tst	r3, r2
 80236ec:	f000 80e4 	beq.w	80238b8 <CoreSimpleTouchHandler_HandleEvent+0x2ac>
  if ( release && (( _this->state & 16777216 ) == 0 ))
 80236f0:	f1ba 0f00 	cmp.w	sl, #0
 80236f4:	d003      	beq.n	80236fe <CoreSimpleTouchHandler_HandleEvent+0xf2>
 80236f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80236f8:	01db      	lsls	r3, r3, #7
 80236fa:	f140 80dd 	bpl.w	80238b8 <CoreSimpleTouchHandler_HandleEvent+0x2ac>
  if ((( press || drag ) || hold ) && (( _this->state < 16777216 ) || ( _this->state 
 80236fe:	f1b9 0f00 	cmp.w	r9, #0
 8023702:	d102      	bne.n	802370a <CoreSimpleTouchHandler_HandleEvent+0xfe>
 8023704:	2e00      	cmp	r6, #0
 8023706:	f000 8182 	beq.w	8023a0e <CoreSimpleTouchHandler_HandleEvent+0x402>
 802370a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802370c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8023710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8023714:	f080 80d0 	bcs.w	80238b8 <CoreSimpleTouchHandler_HandleEvent+0x2ac>
  if ( release )
 8023718:	f1ba 0f00 	cmp.w	sl, #0
 802371c:	d008      	beq.n	8023730 <CoreSimpleTouchHandler_HandleEvent+0x124>
    _this->state = _this->state & 3758100479U;
 802371e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  if ( release && (( _this->state & 16777215 ) == 0 ))
 8023720:	f3c2 030b 	ubfx	r3, r2, #0, #12
 8023724:	2b00      	cmp	r3, #0
 8023726:	f000 81a0 	beq.w	8023a6a <CoreSimpleTouchHandler_HandleEvent+0x45e>
    _this->state = _this->state & 3758100479U;
 802372a:	4b68      	ldr	r3, [pc, #416]	; (80238cc <CoreSimpleTouchHandler_HandleEvent+0x2c0>)
 802372c:	4013      	ands	r3, r2
 802372e:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ( event1 != 0 )
 8023730:	2d00      	cmp	r5, #0
 8023732:	f000 8171 	beq.w	8023a18 <CoreSimpleTouchHandler_HandleEvent+0x40c>
    _this->Down = (XBool)( press || hold );
 8023736:	f1b9 0f00 	cmp.w	r9, #0
 802373a:	bf18      	it	ne
 802373c:	f04f 0801 	movne.w	r8, #1
 8023740:	f884 80a4 	strb.w	r8, [r4, #164]	; 0xa4
    _this->Inside = CoreQuadView_IsPointInside((CoreQuadView)_this, event1->CurrentPos );
 8023744:	f105 0738 	add.w	r7, r5, #56	; 0x38
 8023748:	e897 0006 	ldmia.w	r7, {r1, r2}
 802374c:	4620      	mov	r0, r4
 802374e:	f7fe f8a5 	bl	802189c <CoreQuadView_IsPointInside>
 8023752:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    _this->HittingPos = event1->HittingPos;
 8023756:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
 802375a:	f104 0888 	add.w	r8, r4, #136	; 0x88
    _this->HoldPeriod = event1->HoldPeriod;
 802375e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    _this->HittingPos = event1->HittingPos;
 8023760:	e888 0003 	stmia.w	r8, {r0, r1}
    _this->CurrentPos = event1->CurrentPos;
 8023764:	e897 0003 	ldmia.w	r7, {r0, r1}
    _this->Offset = _Const0000;
 8023768:	2300      	movs	r3, #0
    _this->CurrentPos = event1->CurrentPos;
 802376a:	f104 0790 	add.w	r7, r4, #144	; 0x90
 802376e:	e887 0003 	stmia.w	r7, {r0, r1}
    _this->StrikeCount = event1->StrikeCount;
 8023772:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8023774:	67a1      	str	r1, [r4, #120]	; 0x78
    _this->Offset = _Const0000;
 8023776:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    _this->HoldPeriod = event1->HoldPeriod;
 802377a:	67e2      	str	r2, [r4, #124]	; 0x7c
    _this->AutoDeflected = event1->AutoDeflected;
 802377c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8023780:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
    _this->Time = event1->Super1.Time;
 8023784:	692b      	ldr	r3, [r5, #16]
    _this->Finger = event1->Finger;
 8023786:	6c29      	ldr	r1, [r5, #64]	; 0x40
    _this->Time = event1->Super1.Time;
 8023788:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
    if ( event1->Down && ( event1->HoldPeriod == 0 ))
 802378c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8023790:	b123      	cbz	r3, 802379c <CoreSimpleTouchHandler_HandleEvent+0x190>
      inside = 0;
 8023792:	2a00      	cmp	r2, #0
 8023794:	9b03      	ldr	r3, [sp, #12]
 8023796:	bf08      	it	eq
 8023798:	2300      	moveq	r3, #0
 802379a:	9303      	str	r3, [sp, #12]
  if ( event2 != 0 )
 802379c:	2e00      	cmp	r6, #0
 802379e:	f000 8123 	beq.w	80239e8 <CoreSimpleTouchHandler_HandleEvent+0x3dc>
    _this->Down = 1;
 80237a2:	2301      	movs	r3, #1
 80237a4:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    _this->Inside = CoreQuadView_IsPointInside((CoreQuadView)_this, event2->CurrentPos );
 80237a8:	f106 0940 	add.w	r9, r6, #64	; 0x40
 80237ac:	e899 0006 	ldmia.w	r9, {r1, r2}
 80237b0:	4620      	mov	r0, r4
 80237b2:	f7fe f873 	bl	802189c <CoreQuadView_IsPointInside>
 80237b6:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
 80237ba:	4603      	mov	r3, r0
    _this->HittingPos = event2->HittingPos;
 80237bc:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
    _this->HoldPeriod = event2->HoldPeriod;
 80237c0:	f8d6 c02c 	ldr.w	ip, [r6, #44]	; 0x2c
    _this->StrikeCount = event2->StrikeCount;
 80237c4:	f8d6 e028 	ldr.w	lr, [r6, #40]	; 0x28
    _this->HittingPos = event2->HittingPos;
 80237c8:	e888 0003 	stmia.w	r8, {r0, r1}
    _this->CurrentPos = event2->CurrentPos;
 80237cc:	e899 0003 	ldmia.w	r9, {r0, r1}
 80237d0:	e887 0003 	stmia.w	r7, {r0, r1}
    _this->Offset = event2->Offset;
 80237d4:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 80237d8:	f104 0280 	add.w	r2, r4, #128	; 0x80
    _this->Finger = event2->Finger;
 80237dc:	6cb7      	ldr	r7, [r6, #72]	; 0x48
    _this->Offset = event2->Offset;
 80237de:	e882 0003 	stmia.w	r2, {r0, r1}
    _this->AutoDeflected = 0;
 80237e2:	2200      	movs	r2, #0
 80237e4:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
    _this->Time = event2->Super1.Time;
 80237e8:	6932      	ldr	r2, [r6, #16]
    _this->StrikeCount = event2->StrikeCount;
 80237ea:	e9c4 ec1e 	strd	lr, ip, [r4, #120]	; 0x78
    _this->Time = event2->Super1.Time;
 80237ee:	e9c4 721c 	strd	r7, r2, [r4, #112]	; 0x70
  if ((( event1 != 0 ) && _this->Down ) && ( _this->HoldPeriod == 0 ))
 80237f2:	b12d      	cbz	r5, 8023800 <CoreSimpleTouchHandler_HandleEvent+0x1f4>
 80237f4:	f1bc 0f00 	cmp.w	ip, #0
 80237f8:	f000 8139 	beq.w	8023a6e <CoreSimpleTouchHandler_HandleEvent+0x462>
 80237fc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
  if (( _this->Down && _this->Inside ) && !inside )
 8023800:	2b00      	cmp	r3, #0
 8023802:	f000 80fa 	beq.w	80239fa <CoreSimpleTouchHandler_HandleEvent+0x3ee>
 8023806:	9b03      	ldr	r3, [sp, #12]
 8023808:	b993      	cbnz	r3, 8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
    EwSignal( _this->OnEnter, ((XObject)_this ));
 802380a:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 802380e:	4622      	mov	r2, r4
 8023810:	f7f7 fd03 	bl	801b21a <EwSignal>
  if ((( _this->Down && !_this->Inside ) && inside ) || (( !_this->Down && _this->Inside ) 
 8023814:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8023818:	2b00      	cmp	r3, #0
 802381a:	f000 818e 	beq.w	8023b3a <CoreSimpleTouchHandler_HandleEvent+0x52e>
 802381e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8023822:	b92b      	cbnz	r3, 8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
  if (( event1 != 0 ) && !_this->Down )
 8023824:	b125      	cbz	r5, 8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
 8023826:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 802382a:	2b00      	cmp	r3, #0
 802382c:	f000 8130 	beq.w	8023a90 <CoreSimpleTouchHandler_HandleEvent+0x484>
  if ( !!_this->RetargetCondition )
 8023830:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8023834:	2a00      	cmp	r2, #0
 8023836:	d03f      	beq.n	80238b8 <CoreSimpleTouchHandler_HandleEvent+0x2ac>
    if ((((( _this->RetargetCondition & CoreRetargetReasonLongPress ) == CoreRetargetReasonLongPress ) 
 8023838:	f012 0710 	ands.w	r7, r2, #16
 802383c:	d007      	beq.n	802384e <CoreSimpleTouchHandler_HandleEvent+0x242>
        && ( event1 != 0 )) && event1->Down ) && ( event1->HoldPeriod >= 1000 ))
 802383e:	2d00      	cmp	r5, #0
 8023840:	f000 8165 	beq.w	8023b0e <CoreSimpleTouchHandler_HandleEvent+0x502>
 8023844:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
 8023848:	2f00      	cmp	r7, #0
 802384a:	f040 812f 	bne.w	8023aac <CoreSimpleTouchHandler_HandleEvent+0x4a0>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeUp ) == CoreRetargetReasonWipeUp ) 
 802384e:	f012 0501 	ands.w	r5, r2, #1
 8023852:	f000 80e7 	beq.w	8023a24 <CoreSimpleTouchHandler_HandleEvent+0x418>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.Y - event2->GlobalHittingPos.Y ) 
 8023856:	2e00      	cmp	r6, #0
 8023858:	f000 8144 	beq.w	8023ae4 <CoreSimpleTouchHandler_HandleEvent+0x4d8>
 802385c:	69f1      	ldr	r1, [r6, #28]
        <= -_this->RetargetOffset ))
 802385e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.Y - event2->GlobalHittingPos.Y ) 
 8023862:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023864:	1a5b      	subs	r3, r3, r1
        <= -_this->RetargetOffset ))
 8023866:	4241      	negs	r1, r0
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.Y - event2->GlobalHittingPos.Y ) 
 8023868:	428b      	cmp	r3, r1
 802386a:	bfc8      	it	gt
 802386c:	463d      	movgt	r5, r7
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeDown ) == CoreRetargetReasonWipeDown ) 
 802386e:	0797      	lsls	r7, r2, #30
        <= -_this->RetargetOffset ))
 8023870:	4684      	mov	ip, r0
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeDown ) == CoreRetargetReasonWipeDown ) 
 8023872:	f140 8128 	bpl.w	8023ac6 <CoreSimpleTouchHandler_HandleEvent+0x4ba>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.Y - event2->GlobalHittingPos.Y ) 
 8023876:	459c      	cmp	ip, r3
 8023878:	f340 811f 	ble.w	8023aba <CoreSimpleTouchHandler_HandleEvent+0x4ae>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeLeft ) == CoreRetargetReasonWipeLeft ) 
 802387c:	0750      	lsls	r0, r2, #29
 802387e:	f100 80db 	bmi.w	8023a38 <CoreSimpleTouchHandler_HandleEvent+0x42c>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023882:	0713      	lsls	r3, r2, #28
 8023884:	d514      	bpl.n	80238b0 <CoreSimpleTouchHandler_HandleEvent+0x2a4>
 8023886:	6a33      	ldr	r3, [r6, #32]
 8023888:	69b2      	ldr	r2, [r6, #24]
 802388a:	462f      	mov	r7, r5
 802388c:	1a9b      	subs	r3, r3, r2
 802388e:	e124      	b.n	8023ada <CoreSimpleTouchHandler_HandleEvent+0x4ce>
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 8023890:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8023892:	2b00      	cmp	r3, #0
 8023894:	f000 8099 	beq.w	80239ca <CoreSimpleTouchHandler_HandleEvent+0x3be>
  hold = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 0 ));
 8023898:	f340 8149 	ble.w	8023b2e <CoreSimpleTouchHandler_HandleEvent+0x522>
 802389c:	f04f 0801 	mov.w	r8, #1
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 80238a0:	f04f 0900 	mov.w	r9, #0
  timeout = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 
 80238a4:	2b32      	cmp	r3, #50	; 0x32
 80238a6:	f77f aecd 	ble.w	8023644 <CoreSimpleTouchHandler_HandleEvent+0x38>
 80238aa:	2301      	movs	r3, #1
 80238ac:	9304      	str	r3, [sp, #16]
 80238ae:	e6cb      	b.n	8023648 <CoreSimpleTouchHandler_HandleEvent+0x3c>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 80238b0:	462f      	mov	r7, r5
    if ( !!reason )
 80238b2:	2f00      	cmp	r7, #0
 80238b4:	f040 80cd 	bne.w	8023a52 <CoreSimpleTouchHandler_HandleEvent+0x446>
      return 0;
 80238b8:	4626      	mov	r6, r4
}
 80238ba:	4630      	mov	r0, r6
 80238bc:	b00d      	add	sp, #52	; 0x34
 80238be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238c2:	bf00      	nop
 80238c4:	08037b30 	.word	0x08037b30
 80238c8:	08037c20 	.word	0x08037c20
 80238cc:	e0000fff 	.word	0xe0000fff
  if ( timeout && ( _this->state < 16777216 ))
 80238d0:	9b04      	ldr	r3, [sp, #16]
 80238d2:	b133      	cbz	r3, 80238e2 <CoreSimpleTouchHandler_HandleEvent+0x2d6>
 80238d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80238d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80238da:	d202      	bcs.n	80238e2 <CoreSimpleTouchHandler_HandleEvent+0x2d6>
    _this->state = _this->state | 67108864;
 80238dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80238e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ( hold && ( _this->state >= 67108864 ))
 80238e2:	f1b8 0f00 	cmp.w	r8, #0
 80238e6:	d032      	beq.n	802394e <CoreSimpleTouchHandler_HandleEvent+0x342>
 80238e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80238ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80238ee:	d309      	bcc.n	8023904 <CoreSimpleTouchHandler_HandleEvent+0x2f8>
  return ((CoreView)_this)->_.VMT->GetRoot((CoreView)_this );
 80238f0:	6823      	ldr	r3, [r4, #0]
 80238f2:	4620      	mov	r0, r4
 80238f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238f6:	4798      	blx	r3
    CoreRoot_RetargetCursorWithReason( CoreView__GetRoot( _this ), 0, 0, _this->stateRetargetReason );
 80238f8:	2200      	movs	r2, #0
 80238fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80238fc:	4611      	mov	r1, r2
 80238fe:	f7ff fdfb 	bl	80234f8 <CoreRoot_RetargetCursorWithReason>
 8023902:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8023904:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    release = 1;
 8023908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802390c:	bf0a      	itet	eq
 802390e:	f04f 0a01 	moveq.w	sl, #1
 8023912:	f04f 0801 	movne.w	r8, #1
 8023916:	f04f 0800 	moveq.w	r8, #0
  if (( event1 != 0 ) && (( _this->state & ( 4096 << event1->Finger )) == 0 ))
 802391a:	2d00      	cmp	r5, #0
 802391c:	f43f aedf 	beq.w	80236de <CoreSimpleTouchHandler_HandleEvent+0xd2>
 8023920:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8023922:	e6d4      	b.n	80236ce <CoreSimpleTouchHandler_HandleEvent+0xc2>
  if (( event1 == 0 ) && ( event2 == 0 ))
 8023924:	2800      	cmp	r0, #0
 8023926:	d0c8      	beq.n	80238ba <CoreSimpleTouchHandler_HandleEvent+0x2ae>
  if (((( _this->RetargetCondition & CoreRetargetReasonForeignPress ) == CoreRetargetReasonForeignPress ) 
 8023928:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 802392c:	069b      	lsls	r3, r3, #26
 802392e:	d50c      	bpl.n	802394a <CoreSimpleTouchHandler_HandleEvent+0x33e>
      && ( _this->state > 0 )) && ( _this->state < 33554432 ))
 8023930:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8023932:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8023936:	3b01      	subs	r3, #1
 8023938:	4293      	cmp	r3, r2
  release = (XBool)(( event1 != 0 ) && !event1->Down );
 802393a:	462f      	mov	r7, r5
      && ( _this->state > 0 )) && ( _this->state < 33554432 ))
 802393c:	d30f      	bcc.n	802395e <CoreSimpleTouchHandler_HandleEvent+0x352>
  hold = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 0 ));
 802393e:	46a8      	mov	r8, r5
      && ( _this->state > 0 )) && ( _this->state < 33554432 ))
 8023940:	46aa      	mov	sl, r5
  timeout = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 
 8023942:	9504      	str	r5, [sp, #16]
 8023944:	f04f 0900 	mov.w	r9, #0
 8023948:	e6a4      	b.n	8023694 <CoreSimpleTouchHandler_HandleEvent+0x88>
  if (((( _this->RetargetCondition & CoreRetargetReasonForeignPress ) == CoreRetargetReasonForeignPress ) 
 802394a:	46aa      	mov	sl, r5
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 802394c:	46a9      	mov	r9, r5
 802394e:	f04f 0800 	mov.w	r8, #0
 8023952:	e7e2      	b.n	802391a <CoreSimpleTouchHandler_HandleEvent+0x30e>
  if ( hold && ( _this->state >= 67108864 ))
 8023954:	f1b8 0f00 	cmp.w	r8, #0
 8023958:	f43f aeba 	beq.w	80236d0 <CoreSimpleTouchHandler_HandleEvent+0xc4>
 802395c:	e7c5      	b.n	80238ea <CoreSimpleTouchHandler_HandleEvent+0x2de>
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 802395e:	46a9      	mov	r9, r5
      && ( _this->state > 0 )) && ( _this->state < 33554432 ))
 8023960:	46aa      	mov	sl, r5
  hold = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 0 ));
 8023962:	46a8      	mov	r8, r5
  timeout = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 
 8023964:	9504      	str	r5, [sp, #16]
    CoreCursorGrabEvent event3 = EwCastObject( aEvent, CoreCursorGrabEvent );
 8023966:	4979      	ldr	r1, [pc, #484]	; (8023b4c <CoreSimpleTouchHandler_HandleEvent+0x540>)
 8023968:	4658      	mov	r0, fp
 802396a:	f7f5 ff7f 	bl	801986c <EwCastObject>
    if (((( event3 != 0 ) && event3->Down ) && ( event3->Target != (CoreView)_this )) 
 802396e:	2800      	cmp	r0, #0
 8023970:	f43f ae79 	beq.w	8023666 <CoreSimpleTouchHandler_HandleEvent+0x5a>
 8023974:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8023978:	2b00      	cmp	r3, #0
 802397a:	f43f ae74 	beq.w	8023666 <CoreSimpleTouchHandler_HandleEvent+0x5a>
 802397e:	6983      	ldr	r3, [r0, #24]
 8023980:	9005      	str	r0, [sp, #20]
 8023982:	42a3      	cmp	r3, r4
 8023984:	f43f ae6f 	beq.w	8023666 <CoreSimpleTouchHandler_HandleEvent+0x5a>
  return ((CoreView)_this)->_.VMT->GetExtent((CoreView)_this );
 8023988:	6823      	ldr	r3, [r4, #0]
 802398a:	a808      	add	r0, sp, #32
 802398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802398e:	4621      	mov	r1, r4
 8023990:	4798      	blx	r3
        && EwIsPointInRect( CoreView__GetExtent( _this ), CoreGroup_LocalPosition( 
 8023992:	9a05      	ldr	r2, [sp, #20]
 8023994:	69a1      	ldr	r1, [r4, #24]
 8023996:	f10d 0b18 	add.w	fp, sp, #24
 802399a:	e9d2 2307 	ldrd	r2, r3, [r2, #28]
 802399e:	4658      	mov	r0, fp
 80239a0:	f7fe fb5a 	bl	8022058 <CoreGroup_LocalPosition>
 80239a4:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80239a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80239ac:	ab08      	add	r3, sp, #32
 80239ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80239b0:	f7f6 fad5 	bl	8019f5e <EwIsPointInRect>
 80239b4:	2800      	cmp	r0, #0
 80239b6:	f43f ae56 	beq.w	8023666 <CoreSimpleTouchHandler_HandleEvent+0x5a>
      _this->state = _this->state | 67108864;
 80239ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      _this->stateRetargetReason = CoreRetargetReasonForeignPress;
 80239bc:	2220      	movs	r2, #32
      _this->state = _this->state | 67108864;
 80239be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
      _this->stateRetargetReason = CoreRetargetReasonForeignPress;
 80239c2:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
      return 0;
 80239c6:	2600      	movs	r6, #0
 80239c8:	e777      	b.n	80238ba <CoreSimpleTouchHandler_HandleEvent+0x2ae>
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 80239ca:	f04f 0901 	mov.w	r9, #1
  hold = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod > 0 ));
 80239ce:	f04f 0800 	mov.w	r8, #0
 80239d2:	e767      	b.n	80238a4 <CoreSimpleTouchHandler_HandleEvent+0x298>
      _this->state = ( _this->state | 16777216 ) | ( 4096 << event1->Finger );
 80239d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80239d8:	fa03 f000 	lsl.w	r0, r3, r0
 80239dc:	4301      	orrs	r1, r0
 80239de:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80239e2:	4691      	mov	r9, r2
 80239e4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80239e6:	e655      	b.n	8023694 <CoreSimpleTouchHandler_HandleEvent+0x88>
  if ((( event1 != 0 ) && _this->Down ) && ( _this->HoldPeriod == 0 ))
 80239e8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	f040 80a1 	bne.w	8023b34 <CoreSimpleTouchHandler_HandleEvent+0x528>
  if ((( _this->Down && !_this->Inside ) && inside ) || (( !_this->Down && _this->Inside ) 
 80239f2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d04a      	beq.n	8023a90 <CoreSimpleTouchHandler_HandleEvent+0x484>
 80239fa:	9b03      	ldr	r3, [sp, #12]
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	f43f af11 	beq.w	8023824 <CoreSimpleTouchHandler_HandleEvent+0x218>
    EwSignal( _this->OnLeave, ((XObject)_this ));
 8023a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023a06:	4622      	mov	r2, r4
 8023a08:	f7f7 fc07 	bl	801b21a <EwSignal>
 8023a0c:	e70a      	b.n	8023824 <CoreSimpleTouchHandler_HandleEvent+0x218>
  if ((( press || drag ) || hold ) && (( _this->state < 16777216 ) || ( _this->state 
 8023a0e:	f1b8 0f00 	cmp.w	r8, #0
 8023a12:	f43f ae81 	beq.w	8023718 <CoreSimpleTouchHandler_HandleEvent+0x10c>
 8023a16:	e678      	b.n	802370a <CoreSimpleTouchHandler_HandleEvent+0xfe>
  if ( event2 != 0 )
 8023a18:	b376      	cbz	r6, 8023a78 <CoreSimpleTouchHandler_HandleEvent+0x46c>
 8023a1a:	f104 0888 	add.w	r8, r4, #136	; 0x88
 8023a1e:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8023a22:	e6be      	b.n	80237a2 <CoreSimpleTouchHandler_HandleEvent+0x196>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeDown ) == CoreRetargetReasonWipeDown ) 
 8023a24:	0793      	lsls	r3, r2, #30
 8023a26:	d439      	bmi.n	8023a9c <CoreSimpleTouchHandler_HandleEvent+0x490>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeLeft ) == CoreRetargetReasonWipeLeft ) 
 8023a28:	0755      	lsls	r5, r2, #29
 8023a2a:	d561      	bpl.n	8023af0 <CoreSimpleTouchHandler_HandleEvent+0x4e4>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.X - event2->GlobalHittingPos.X ) 
 8023a2c:	2e00      	cmp	r6, #0
 8023a2e:	f43f af40 	beq.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
 8023a32:	f8d4 c098 	ldr.w	ip, [r4, #152]	; 0x98
 8023a36:	463d      	mov	r5, r7
 8023a38:	f1cc 0100 	rsb	r1, ip, #0
 8023a3c:	6a33      	ldr	r3, [r6, #32]
 8023a3e:	69b0      	ldr	r0, [r6, #24]
 8023a40:	1a1b      	subs	r3, r3, r0
 8023a42:	4299      	cmp	r1, r3
 8023a44:	db5e      	blt.n	8023b04 <CoreSimpleTouchHandler_HandleEvent+0x4f8>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023a46:	0712      	lsls	r2, r2, #28
 8023a48:	d563      	bpl.n	8023b12 <CoreSimpleTouchHandler_HandleEvent+0x506>
      reason = CoreRetargetReasonWipeRight;
 8023a4a:	459c      	cmp	ip, r3
 8023a4c:	bfcc      	ite	gt
 8023a4e:	2704      	movgt	r7, #4
 8023a50:	2708      	movle	r7, #8
  return ((CoreView)_this)->_.VMT->GetRoot((CoreView)_this );
 8023a52:	6823      	ldr	r3, [r4, #0]
      _this->stateRetargetReason = reason;
 8023a54:	66a7      	str	r7, [r4, #104]	; 0x68
  return ((CoreView)_this)->_.VMT->GetRoot((CoreView)_this );
 8023a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a58:	4620      	mov	r0, r4
 8023a5a:	4798      	blx	r3
      CoreRoot_RetargetCursorWithReason( CoreView__GetRoot( _this ), 0, ((CoreView)_this ), 
 8023a5c:	463b      	mov	r3, r7
 8023a5e:	4622      	mov	r2, r4
 8023a60:	2100      	movs	r1, #0
 8023a62:	4626      	mov	r6, r4
 8023a64:	f7ff fd48 	bl	80234f8 <CoreRoot_RetargetCursorWithReason>
 8023a68:	e727      	b.n	80238ba <CoreSimpleTouchHandler_HandleEvent+0x2ae>
    _this->state = 0;
 8023a6a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8023a6c:	e660      	b.n	8023730 <CoreSimpleTouchHandler_HandleEvent+0x124>
    EwSignal( _this->OnPress, ((XObject)_this ));
 8023a6e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 8023a72:	4622      	mov	r2, r4
 8023a74:	f7f7 fbd1 	bl	801b21a <EwSignal>
  if (( _this->Down && _this->Inside ) && !inside )
 8023a78:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8023a7c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8023a80:	2a00      	cmp	r2, #0
 8023a82:	f47f aebd 	bne.w	8023800 <CoreSimpleTouchHandler_HandleEvent+0x1f4>
  if ((( _this->Down && !_this->Inside ) && inside ) || (( !_this->Down && _this->Inside ) 
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d1b7      	bne.n	80239fa <CoreSimpleTouchHandler_HandleEvent+0x3ee>
  if (( event1 != 0 ) && !_this->Down )
 8023a8a:	2d00      	cmp	r5, #0
 8023a8c:	f43f aed0 	beq.w	8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
    EwSignal( _this->OnRelease, ((XObject)_this ));
 8023a90:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 8023a94:	4622      	mov	r2, r4
 8023a96:	f7f7 fbc0 	bl	801b21a <EwSignal>
 8023a9a:	e6c9      	b.n	8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.Y - event2->GlobalHittingPos.Y ) 
 8023a9c:	b32e      	cbz	r6, 8023aea <CoreSimpleTouchHandler_HandleEvent+0x4de>
 8023a9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023aa0:	69f1      	ldr	r1, [r6, #28]
 8023aa2:	f8d4 c098 	ldr.w	ip, [r4, #152]	; 0x98
 8023aa6:	463d      	mov	r5, r7
 8023aa8:	1a5b      	subs	r3, r3, r1
 8023aaa:	e6e4      	b.n	8023876 <CoreSimpleTouchHandler_HandleEvent+0x26a>
        && ( event1 != 0 )) && event1->Down ) && ( event1->HoldPeriod >= 1000 ))
 8023aac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      reason = CoreRetargetReasonLongPress;
 8023aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8023ab2:	bfb4      	ite	lt
 8023ab4:	2700      	movlt	r7, #0
 8023ab6:	2710      	movge	r7, #16
 8023ab8:	e6c9      	b.n	802384e <CoreSimpleTouchHandler_HandleEvent+0x242>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeLeft ) == CoreRetargetReasonWipeLeft ) 
 8023aba:	0757      	lsls	r7, r2, #29
 8023abc:	d52b      	bpl.n	8023b16 <CoreSimpleTouchHandler_HandleEvent+0x50a>
 8023abe:	f1cc 0100 	rsb	r1, ip, #0
      reason = CoreRetargetReasonWipeDown;
 8023ac2:	2502      	movs	r5, #2
 8023ac4:	e7ba      	b.n	8023a3c <CoreSimpleTouchHandler_HandleEvent+0x430>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeLeft ) == CoreRetargetReasonWipeLeft ) 
 8023ac6:	0757      	lsls	r7, r2, #29
 8023ac8:	d4b8      	bmi.n	8023a3c <CoreSimpleTouchHandler_HandleEvent+0x430>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023aca:	0712      	lsls	r2, r2, #28
 8023acc:	f57f aef0 	bpl.w	80238b0 <CoreSimpleTouchHandler_HandleEvent+0x2a4>
 8023ad0:	6a33      	ldr	r3, [r6, #32]
 8023ad2:	69b2      	ldr	r2, [r6, #24]
 8023ad4:	4684      	mov	ip, r0
 8023ad6:	462f      	mov	r7, r5
 8023ad8:	1a9b      	subs	r3, r3, r2
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.X - event2->GlobalHittingPos.X ) 
 8023ada:	4563      	cmp	r3, ip
 8023adc:	f6ff aee9 	blt.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
      reason = CoreRetargetReasonWipeRight;
 8023ae0:	2708      	movs	r7, #8
 8023ae2:	e7b6      	b.n	8023a52 <CoreSimpleTouchHandler_HandleEvent+0x446>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeDown ) == CoreRetargetReasonWipeDown ) 
 8023ae4:	0791      	lsls	r1, r2, #30
 8023ae6:	f57f aee4 	bpl.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeLeft ) == CoreRetargetReasonWipeLeft ) 
 8023aea:	0750      	lsls	r0, r2, #29
 8023aec:	f53f aee1 	bmi.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023af0:	0711      	lsls	r1, r2, #28
 8023af2:	f57f aede 	bpl.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.X - event2->GlobalHittingPos.X ) 
 8023af6:	2e00      	cmp	r6, #0
 8023af8:	f43f aedb 	beq.w	80238b2 <CoreSimpleTouchHandler_HandleEvent+0x2a6>
 8023afc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8023b00:	463d      	mov	r5, r7
 8023b02:	e7e5      	b.n	8023ad0 <CoreSimpleTouchHandler_HandleEvent+0x4c4>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023b04:	0712      	lsls	r2, r2, #28
 8023b06:	f57f aed3 	bpl.w	80238b0 <CoreSimpleTouchHandler_HandleEvent+0x2a4>
 8023b0a:	462f      	mov	r7, r5
 8023b0c:	e7e5      	b.n	8023ada <CoreSimpleTouchHandler_HandleEvent+0x4ce>
    XSet reason = 0;
 8023b0e:	462f      	mov	r7, r5
 8023b10:	e69d      	b.n	802384e <CoreSimpleTouchHandler_HandleEvent+0x242>
      reason = CoreRetargetReasonWipeLeft;
 8023b12:	2704      	movs	r7, #4
 8023b14:	e79d      	b.n	8023a52 <CoreSimpleTouchHandler_HandleEvent+0x446>
    if (((( _this->RetargetCondition & CoreRetargetReasonWipeRight ) == CoreRetargetReasonWipeRight ) 
 8023b16:	0715      	lsls	r5, r2, #28
 8023b18:	d507      	bpl.n	8023b2a <CoreSimpleTouchHandler_HandleEvent+0x51e>
        && ( event2 != 0 )) && (( event2->GlobalCurrentPos.X - event2->GlobalHittingPos.X ) 
 8023b1a:	6a37      	ldr	r7, [r6, #32]
 8023b1c:	69b3      	ldr	r3, [r6, #24]
 8023b1e:	1aff      	subs	r7, r7, r3
      reason = CoreRetargetReasonWipeRight;
 8023b20:	45bc      	cmp	ip, r7
 8023b22:	bfcc      	ite	gt
 8023b24:	2702      	movgt	r7, #2
 8023b26:	2708      	movle	r7, #8
 8023b28:	e793      	b.n	8023a52 <CoreSimpleTouchHandler_HandleEvent+0x446>
      reason = CoreRetargetReasonWipeDown;
 8023b2a:	2702      	movs	r7, #2
 8023b2c:	e791      	b.n	8023a52 <CoreSimpleTouchHandler_HandleEvent+0x446>
  press = (XBool)((( event1 != 0 ) && event1->Down ) && ( event1->HoldPeriod == 
 8023b2e:	f04f 0900 	mov.w	r9, #0
 8023b32:	e74c      	b.n	80239ce <CoreSimpleTouchHandler_HandleEvent+0x3c2>
 8023b34:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 8023b38:	e65c      	b.n	80237f4 <CoreSimpleTouchHandler_HandleEvent+0x1e8>
  if ((( _this->Down && !_this->Inside ) && inside ) || (( !_this->Down && _this->Inside ) 
 8023b3a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8023b3e:	2b00      	cmp	r3, #0
 8023b40:	f47f ae70 	bne.w	8023824 <CoreSimpleTouchHandler_HandleEvent+0x218>
  if (( event1 != 0 ) && !_this->Down )
 8023b44:	2d00      	cmp	r5, #0
 8023b46:	f43f ae73 	beq.w	8023830 <CoreSimpleTouchHandler_HandleEvent+0x224>
 8023b4a:	e7a1      	b.n	8023a90 <CoreSimpleTouchHandler_HandleEvent+0x484>
 8023b4c:	08037b6c 	.word	0x08037b6c

08023b50 <CoreSimpleTouchHandler_OnSetRetargetOffset>:
  _this->RetargetOffset = value;
 8023b50:	2901      	cmp	r1, #1
 8023b52:	bfb8      	it	lt
 8023b54:	2101      	movlt	r1, #1
 8023b56:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
}
 8023b5a:	4770      	bx	lr

08023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>:
  _this->MaxStrikeCount = value;
 8023b5c:	2901      	cmp	r1, #1
 8023b5e:	bfb8      	it	lt
 8023b60:	2101      	movlt	r1, #1
 8023b62:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
 8023b66:	4770      	bx	lr

08023b68 <CoreSimpleTouchHandler_OnSetEnabled>:
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8023b68:	6803      	ldr	r3, [r0, #0]
  if ( value )
 8023b6a:	b119      	cbz	r1, 8023b74 <CoreSimpleTouchHandler_OnSetEnabled+0xc>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8023b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023b6e:	2200      	movs	r2, #0
 8023b70:	2110      	movs	r1, #16
 8023b72:	4718      	bx	r3
 8023b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023b76:	2210      	movs	r2, #16
 8023b78:	4718      	bx	r3
 8023b7a:	bf00      	nop

08023b7c <CoreKeyPressHandler_Init>:
{
 8023b7c:	b510      	push	{r4, lr}
  group = EwCastObject( _this->_.XObject._.Link, CoreGroup );
 8023b7e:	4908      	ldr	r1, [pc, #32]	; (8023ba0 <CoreKeyPressHandler_Init+0x24>)
{
 8023b80:	4604      	mov	r4, r0
  group = EwCastObject( _this->_.XObject._.Link, CoreGroup );
 8023b82:	6880      	ldr	r0, [r0, #8]
 8023b84:	f7f5 fe72 	bl	801986c <EwCastObject>
  if ( group == 0 )
 8023b88:	b118      	cbz	r0, 8023b92 <CoreKeyPressHandler_Init+0x16>
  _this->next = group->keyHandlers;
 8023b8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8023b8c:	6123      	str	r3, [r4, #16]
  group->keyHandlers = _this;
 8023b8e:	6404      	str	r4, [r0, #64]	; 0x40
}
 8023b90:	bd10      	pop	{r4, pc}
    EwThrow( EwLoadString( &_Const000F ));
 8023b92:	4804      	ldr	r0, [pc, #16]	; (8023ba4 <CoreKeyPressHandler_Init+0x28>)
 8023b94:	f7f8 fc4c 	bl	801c430 <EwLoadString>
}
 8023b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    EwThrow( EwLoadString( &_Const000F ));
 8023b9c:	f7f5 b878 	b.w	8018c90 <EwThrow>
 8023ba0:	08037c98 	.word	0x08037c98
 8023ba4:	08037b18 	.word	0x08037b18

08023ba8 <CoreKeyPressHandler__Init>:
{
 8023ba8:	b538      	push	{r3, r4, r5, lr}
 8023baa:	4604      	mov	r4, r0
 8023bac:	4615      	mov	r5, r2
  XObject__Init( &_this->_.Super, aLink, aArg );
 8023bae:	f7f5 fd45 	bl	801963c <XObject__Init>
  _this->Enabled = 1;
 8023bb2:	2201      	movs	r2, #1
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreKeyPressHandler );
 8023bb4:	4b06      	ldr	r3, [pc, #24]	; (8023bd0 <CoreKeyPressHandler__Init+0x28>)
  _this->Enabled = 1;
 8023bb6:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  _this->Filter = CoreKeyCodeAnyKey;
 8023bba:	2194      	movs	r1, #148	; 0x94
 8023bbc:	6321      	str	r1, [r4, #48]	; 0x30
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreKeyPressHandler );
 8023bbe:	60e3      	str	r3, [r4, #12]
  CoreKeyPressHandler_Init( _this, aArg );
 8023bc0:	4629      	mov	r1, r5
  _this->_.VMT = EW_CLASS( CoreKeyPressHandler );
 8023bc2:	6023      	str	r3, [r4, #0]
  CoreKeyPressHandler_Init( _this, aArg );
 8023bc4:	4620      	mov	r0, r4
}
 8023bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreKeyPressHandler_Init( _this, aArg );
 8023bca:	f7ff bfd7 	b.w	8023b7c <CoreKeyPressHandler_Init>
 8023bce:	bf00      	nop
 8023bd0:	08037d50 	.word	0x08037d50

08023bd4 <CoreKeyPressHandler_HandleEvent>:
{
 8023bd4:	b538      	push	{r3, r4, r5, lr}
  if (( aEvent != 0 ) && CoreKeyEvent_IsCode( aEvent, _this->Filter ))
 8023bd6:	460d      	mov	r5, r1
 8023bd8:	b1e1      	cbz	r1, 8023c14 <CoreKeyPressHandler_HandleEvent+0x40>
 8023bda:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8023bdc:	4604      	mov	r4, r0
 8023bde:	4628      	mov	r0, r5
 8023be0:	f7ff f8aa 	bl	8022d38 <CoreKeyEvent_IsCode>
 8023be4:	b1a8      	cbz	r0, 8023c12 <CoreKeyPressHandler_HandleEvent+0x3e>
    _this->Down = aEvent->Down;
 8023be6:	7fab      	ldrb	r3, [r5, #30]
 8023be8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    _this->Code = aEvent->Code;
 8023bec:	69a8      	ldr	r0, [r5, #24]
    _this->CharCode = aEvent->CharCode;
 8023bee:	8ba9      	ldrh	r1, [r5, #28]
    _this->Time = aEvent->Super1.Time;
 8023bf0:	692a      	ldr	r2, [r5, #16]
 8023bf2:	62a2      	str	r2, [r4, #40]	; 0x28
    _this->Code = aEvent->Code;
 8023bf4:	6360      	str	r0, [r4, #52]	; 0x34
    _this->CharCode = aEvent->CharCode;
 8023bf6:	8721      	strh	r1, [r4, #56]	; 0x38
    if ( aEvent->Down )
 8023bf8:	b1ab      	cbz	r3, 8023c26 <CoreKeyPressHandler_HandleEvent+0x52>
      _this->RepetitionCount = _this->pressCounter;
 8023bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
      _this->Repetition = (XBool)( _this->pressCounter > 0 );
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	bfcc      	ite	gt
 8023c02:	2201      	movgt	r2, #1
 8023c04:	2200      	movle	r2, #0
 8023c06:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      if ( !_this->Repetition )
 8023c0a:	dd05      	ble.n	8023c18 <CoreKeyPressHandler_HandleEvent+0x44>
      _this->pressCounter = _this->pressCounter + 1;
 8023c0c:	3301      	adds	r3, #1
 8023c0e:	6263      	str	r3, [r4, #36]	; 0x24
      return 1;
 8023c10:	2001      	movs	r0, #1
}
 8023c12:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
 8023c14:	4608      	mov	r0, r1
}
 8023c16:	bd38      	pop	{r3, r4, r5, pc}
        EwSignal( _this->OnPress, ((XObject)_this ));
 8023c18:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8023c1c:	4622      	mov	r2, r4
 8023c1e:	f7f7 fafc 	bl	801b21a <EwSignal>
 8023c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023c24:	e7f2      	b.n	8023c0c <CoreKeyPressHandler_HandleEvent+0x38>
      _this->Repetition = (XBool)( _this->pressCounter > 1 );
 8023c26:	6a62      	ldr	r2, [r4, #36]	; 0x24
      _this->pressCounter = 0;
 8023c28:	6263      	str	r3, [r4, #36]	; 0x24
      _this->Repetition = (XBool)( _this->pressCounter > 1 );
 8023c2a:	2a01      	cmp	r2, #1
 8023c2c:	bfd4      	ite	le
 8023c2e:	2300      	movle	r3, #0
 8023c30:	2301      	movgt	r3, #1
      _this->RepetitionCount = _this->pressCounter - 1;
 8023c32:	3a01      	subs	r2, #1
      EwSignal( _this->OnRelease, ((XObject)_this ));
 8023c34:	6960      	ldr	r0, [r4, #20]
      _this->RepetitionCount = _this->pressCounter - 1;
 8023c36:	62e2      	str	r2, [r4, #44]	; 0x2c
      EwSignal( _this->OnRelease, ((XObject)_this ));
 8023c38:	69a1      	ldr	r1, [r4, #24]
      _this->Repetition = (XBool)( _this->pressCounter > 1 );
 8023c3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      EwSignal( _this->OnRelease, ((XObject)_this ));
 8023c3e:	4622      	mov	r2, r4
 8023c40:	f7f7 faeb 	bl	801b21a <EwSignal>
 8023c44:	2001      	movs	r0, #1
}
 8023c46:	bd38      	pop	{r3, r4, r5, pc}

08023c48 <CoreGroup_processKeyHandlers>:
{
 8023c48:	b538      	push	{r3, r4, r5, lr}
 8023c4a:	4604      	mov	r4, r0
  CoreKeyEvent keyEvent = EwCastObject( aEvent, CoreKeyEvent );
 8023c4c:	4608      	mov	r0, r1
 8023c4e:	490c      	ldr	r1, [pc, #48]	; (8023c80 <CoreGroup_processKeyHandlers+0x38>)
 8023c50:	f7f5 fe0c 	bl	801986c <EwCastObject>
  CoreKeyPressHandler handler = _this->keyHandlers;
 8023c54:	6c24      	ldr	r4, [r4, #64]	; 0x40
  if ( keyEvent == 0 )
 8023c56:	b180      	cbz	r0, 8023c7a <CoreGroup_processKeyHandlers+0x32>
  while (( handler != 0 ) && ( !handler->Enabled || !CoreKeyPressHandler_HandleEvent( 
 8023c58:	4605      	mov	r5, r0
 8023c5a:	b914      	cbnz	r4, 8023c62 <CoreGroup_processKeyHandlers+0x1a>
 8023c5c:	e00d      	b.n	8023c7a <CoreGroup_processKeyHandlers+0x32>
    handler = handler->next;
 8023c5e:	6924      	ldr	r4, [r4, #16]
  while (( handler != 0 ) && ( !handler->Enabled || !CoreKeyPressHandler_HandleEvent( 
 8023c60:	b15c      	cbz	r4, 8023c7a <CoreGroup_processKeyHandlers+0x32>
 8023c62:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	d0f9      	beq.n	8023c5e <CoreGroup_processKeyHandlers+0x16>
 8023c6a:	4629      	mov	r1, r5
 8023c6c:	4620      	mov	r0, r4
 8023c6e:	f7ff ffb1 	bl	8023bd4 <CoreKeyPressHandler_HandleEvent>
 8023c72:	2800      	cmp	r0, #0
 8023c74:	d0f3      	beq.n	8023c5e <CoreGroup_processKeyHandlers+0x16>
}
 8023c76:	4620      	mov	r0, r4
 8023c78:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8023c7a:	2400      	movs	r4, #0
}
 8023c7c:	4620      	mov	r0, r4
 8023c7e:	bd38      	pop	{r3, r4, r5, pc}
 8023c80:	08037d14 	.word	0x08037d14

08023c84 <CoreGroup_DispatchEvent>:
{
 8023c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CoreView view = _this->Focus;
 8023c86:	6d07      	ldr	r7, [r0, #80]	; 0x50
{
 8023c88:	4604      	mov	r4, r0
 8023c8a:	460d      	mov	r5, r1
  CoreGroup grp = EwCastObject( view, CoreGroup );
 8023c8c:	4638      	mov	r0, r7
 8023c8e:	4928      	ldr	r1, [pc, #160]	; (8023d30 <CoreGroup_DispatchEvent+0xac>)
 8023c90:	f7f5 fdec 	bl	801986c <EwCastObject>
  XBool lock = (XBool)(( _this->fadersQueue != 0 ) && (( _this->fadersQueue->current 
 8023c94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  CoreGroup grp = EwCastObject( view, CoreGroup );
 8023c96:	4606      	mov	r6, r0
  XBool lock = (XBool)(( _this->fadersQueue != 0 ) && (( _this->fadersQueue->current 
 8023c98:	b113      	cbz	r3, 8023ca0 <CoreGroup_DispatchEvent+0x1c>
 8023c9a:	691a      	ldr	r2, [r3, #16]
 8023c9c:	b1ea      	cbz	r2, 8023cda <CoreGroup_DispatchEvent+0x56>
 8023c9e:	2301      	movs	r3, #1
  if (( view != 0 ) && (((( view->viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 8023ca0:	b30f      	cbz	r7, 8023ce6 <CoreGroup_DispatchEvent+0x62>
      || (( view->viewState & CoreViewStatePendingFader ) == CoreViewStatePendingFader )))
 8023ca2:	6a3a      	ldr	r2, [r7, #32]
  if (( view != 0 ) && (((( view->viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 8023ca4:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
  if (( _this->dialogStack != 0 ) && !lock )
 8023ca8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (( view != 0 ) && (((( view->viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 8023caa:	d00b      	beq.n	8023cc4 <CoreGroup_DispatchEvent+0x40>
  if (( _this->dialogStack != 0 ) && !lock )
 8023cac:	2a00      	cmp	r2, #0
 8023cae:	d031      	beq.n	8023d14 <CoreGroup_DispatchEvent+0x90>
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d12f      	bne.n	8023d14 <CoreGroup_DispatchEvent+0x90>
    handled = CoreGroup__DispatchEvent( _this->dialogStack->group, aEvent );
 8023cb4:	6910      	ldr	r0, [r2, #16]
  return ((CoreGroup)_this)->_.VMT->DispatchEvent((CoreGroup)_this, aEvent );
 8023cb6:	6803      	ldr	r3, [r0, #0]
 8023cb8:	4629      	mov	r1, r5
 8023cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023cbc:	4798      	blx	r3
  if (( handled == 0 ) && ( grp != 0 ))
 8023cbe:	2800      	cmp	r0, #0
 8023cc0:	d028      	beq.n	8023d14 <CoreGroup_DispatchEvent+0x90>
}
 8023cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (( _this->dialogStack != 0 ) && !lock )
 8023cc4:	b102      	cbz	r2, 8023cc8 <CoreGroup_DispatchEvent+0x44>
 8023cc6:	b18b      	cbz	r3, 8023cec <CoreGroup_DispatchEvent+0x68>
  if (( handled == 0 ) && ( grp != 0 ))
 8023cc8:	b1d6      	cbz	r6, 8023d00 <CoreGroup_DispatchEvent+0x7c>
  return ((CoreGroup)_this)->_.VMT->DispatchEvent((CoreGroup)_this, aEvent );
 8023cca:	6833      	ldr	r3, [r6, #0]
 8023ccc:	4630      	mov	r0, r6
 8023cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023cd0:	4629      	mov	r1, r5
 8023cd2:	4798      	blx	r3
  if (( handled == 0 ) && ( grp != 0 ))
 8023cd4:	2800      	cmp	r0, #0
 8023cd6:	d1f4      	bne.n	8023cc2 <CoreGroup_DispatchEvent+0x3e>
 8023cd8:	e01c      	b.n	8023d14 <CoreGroup_DispatchEvent+0x90>
    != 0 ) || ( _this->fadersQueue->first != 0 )));
 8023cda:	699b      	ldr	r3, [r3, #24]
 8023cdc:	3b00      	subs	r3, #0
 8023cde:	bf18      	it	ne
 8023ce0:	2301      	movne	r3, #1
  if (( view != 0 ) && (((( view->viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 8023ce2:	2f00      	cmp	r7, #0
 8023ce4:	d1dd      	bne.n	8023ca2 <CoreGroup_DispatchEvent+0x1e>
  if (( _this->dialogStack != 0 ) && !lock )
 8023ce6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8023ce8:	b192      	cbz	r2, 8023d10 <CoreGroup_DispatchEvent+0x8c>
 8023cea:	b98b      	cbnz	r3, 8023d10 <CoreGroup_DispatchEvent+0x8c>
    handled = CoreGroup__DispatchEvent( _this->dialogStack->group, aEvent );
 8023cec:	6910      	ldr	r0, [r2, #16]
  return ((CoreGroup)_this)->_.VMT->DispatchEvent((CoreGroup)_this, aEvent );
 8023cee:	6803      	ldr	r3, [r0, #0]
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023cf4:	4798      	blx	r3
  if (( handled == 0 ) && ( grp != 0 ))
 8023cf6:	2800      	cmp	r0, #0
 8023cf8:	d1e3      	bne.n	8023cc2 <CoreGroup_DispatchEvent+0x3e>
 8023cfa:	2e00      	cmp	r6, #0
 8023cfc:	d1e5      	bne.n	8023cca <CoreGroup_DispatchEvent+0x46>
    if (( handled == 0 ) && ( view != 0 ))
 8023cfe:	b14f      	cbz	r7, 8023d14 <CoreGroup_DispatchEvent+0x90>
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8023d00:	683b      	ldr	r3, [r7, #0]
 8023d02:	4638      	mov	r0, r7
 8023d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023d06:	4629      	mov	r1, r5
 8023d08:	4798      	blx	r3
  if (( handled == 0 ) && ( grp != 0 ))
 8023d0a:	2800      	cmp	r0, #0
 8023d0c:	d1d9      	bne.n	8023cc2 <CoreGroup_DispatchEvent+0x3e>
 8023d0e:	e001      	b.n	8023d14 <CoreGroup_DispatchEvent+0x90>
 8023d10:	2e00      	cmp	r6, #0
 8023d12:	d1da      	bne.n	8023cca <CoreGroup_DispatchEvent+0x46>
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8023d14:	6823      	ldr	r3, [r4, #0]
 8023d16:	4629      	mov	r1, r5
 8023d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023d1a:	4620      	mov	r0, r4
 8023d1c:	4798      	blx	r3
  if ( handled == 0 )
 8023d1e:	2800      	cmp	r0, #0
 8023d20:	d1cf      	bne.n	8023cc2 <CoreGroup_DispatchEvent+0x3e>
    handled = CoreGroup_processKeyHandlers( _this, aEvent );
 8023d22:	4629      	mov	r1, r5
 8023d24:	4620      	mov	r0, r4
}
 8023d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    handled = CoreGroup_processKeyHandlers( _this, aEvent );
 8023d2a:	f7ff bf8d 	b.w	8023c48 <CoreGroup_processKeyHandlers>
 8023d2e:	bf00      	nop
 8023d30:	08037c98 	.word	0x08037c98

08023d34 <CoreRoot_DispatchEvent>:
{
 8023d34:	b510      	push	{r4, lr}
 8023d36:	4604      	mov	r4, r0
  if ( aEvent != 0 )
 8023d38:	b141      	cbz	r1, 8023d4c <CoreRoot_DispatchEvent+0x18>
    aEvent->IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8023d3a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	bf14      	ite	ne
 8023d42:	2201      	movne	r2, #1
 8023d44:	2200      	moveq	r2, #0
 8023d46:	750a      	strb	r2, [r1, #20]
      aEvent->Time = _this->currentEventTimestamp;
 8023d48:	bf18      	it	ne
 8023d4a:	610b      	strne	r3, [r1, #16]
  handled = CoreGroup_DispatchEvent((CoreGroup)_this, aEvent );
 8023d4c:	4620      	mov	r0, r4
 8023d4e:	f7ff ff99 	bl	8023c84 <CoreGroup_DispatchEvent>
  _this->currentEventTimestamp = 0;
 8023d52:	2300      	movs	r3, #0
 8023d54:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
 8023d58:	bd10      	pop	{r4, pc}
 8023d5a:	bf00      	nop

08023d5c <CoreGroup_BroadcastEvent>:
{
 8023d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CoreView view = _this->last;
 8023d60:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
 8023d62:	4680      	mov	r8, r0
 8023d64:	460d      	mov	r5, r1
  while (( view != 0 ) && ( handled == 0 ))
 8023d66:	b154      	cbz	r4, 8023d7e <CoreGroup_BroadcastEvent+0x22>
      CoreGroup grp = EwCastObject( view, CoreGroup );
 8023d68:	4e19      	ldr	r6, [pc, #100]	; (8023dd0 <CoreGroup_BroadcastEvent+0x74>)
 8023d6a:	4617      	mov	r7, r2
    if ( !aFilter || EwSetContains( view->viewState, aFilter ))
 8023d6c:	4639      	mov	r1, r7
 8023d6e:	b19f      	cbz	r7, 8023d98 <CoreGroup_BroadcastEvent+0x3c>
 8023d70:	6a20      	ldr	r0, [r4, #32]
 8023d72:	f7f6 fdbd 	bl	801a8f0 <EwSetContains>
 8023d76:	b978      	cbnz	r0, 8023d98 <CoreGroup_BroadcastEvent+0x3c>
    view = view->prev;
 8023d78:	6964      	ldr	r4, [r4, #20]
  while (( view != 0 ) && ( handled == 0 ))
 8023d7a:	2c00      	cmp	r4, #0
 8023d7c:	d1f6      	bne.n	8023d6c <CoreGroup_BroadcastEvent+0x10>
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8023d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8023d82:	4629      	mov	r1, r5
 8023d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023d86:	4640      	mov	r0, r8
 8023d88:	4798      	blx	r3
  if ( handled == 0 )
 8023d8a:	b998      	cbnz	r0, 8023db4 <CoreGroup_BroadcastEvent+0x58>
    handled = CoreGroup_processKeyHandlers( _this, aEvent );
 8023d8c:	4629      	mov	r1, r5
 8023d8e:	4640      	mov	r0, r8
}
 8023d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    handled = CoreGroup_processKeyHandlers( _this, aEvent );
 8023d94:	f7ff bf58 	b.w	8023c48 <CoreGroup_processKeyHandlers>
      CoreGroup grp = EwCastObject( view, CoreGroup );
 8023d98:	4631      	mov	r1, r6
 8023d9a:	4620      	mov	r0, r4
 8023d9c:	f7f5 fd66 	bl	801986c <EwCastObject>
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8023da0:	463a      	mov	r2, r7
 8023da2:	4629      	mov	r1, r5
      if ( grp != 0 )
 8023da4:	b140      	cbz	r0, 8023db8 <CoreGroup_BroadcastEvent+0x5c>
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8023da6:	6803      	ldr	r3, [r0, #0]
 8023da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023daa:	4798      	blx	r3
    view = view->prev;
 8023dac:	6964      	ldr	r4, [r4, #20]
  while (( view != 0 ) && ( handled == 0 ))
 8023dae:	b154      	cbz	r4, 8023dc6 <CoreGroup_BroadcastEvent+0x6a>
 8023db0:	2800      	cmp	r0, #0
 8023db2:	d0db      	beq.n	8023d6c <CoreGroup_BroadcastEvent+0x10>
}
 8023db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8023db8:	6823      	ldr	r3, [r4, #0]
 8023dba:	4620      	mov	r0, r4
 8023dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023dbe:	4798      	blx	r3
    view = view->prev;
 8023dc0:	6964      	ldr	r4, [r4, #20]
  while (( view != 0 ) && ( handled == 0 ))
 8023dc2:	2c00      	cmp	r4, #0
 8023dc4:	d1f4      	bne.n	8023db0 <CoreGroup_BroadcastEvent+0x54>
  if ( handled == 0 )
 8023dc6:	2800      	cmp	r0, #0
 8023dc8:	d0d9      	beq.n	8023d7e <CoreGroup_BroadcastEvent+0x22>
}
 8023dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dce:	bf00      	nop
 8023dd0:	08037c98 	.word	0x08037c98

08023dd4 <CoreRoot_BroadcastEvent>:
{
 8023dd4:	b510      	push	{r4, lr}
 8023dd6:	4604      	mov	r4, r0
  if ( aEvent != 0 )
 8023dd8:	b141      	cbz	r1, 8023dec <CoreRoot_BroadcastEvent+0x18>
    aEvent->IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8023dda:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	bf14      	ite	ne
 8023de2:	2001      	movne	r0, #1
 8023de4:	2000      	moveq	r0, #0
 8023de6:	7508      	strb	r0, [r1, #20]
      aEvent->Time = _this->currentEventTimestamp;
 8023de8:	bf18      	it	ne
 8023dea:	610b      	strne	r3, [r1, #16]
  handled = CoreGroup_BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8023dec:	4620      	mov	r0, r4
 8023dee:	f7ff ffb5 	bl	8023d5c <CoreGroup_BroadcastEvent>
  _this->currentEventTimestamp = 0;
 8023df2:	2300      	movs	r3, #0
 8023df4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
 8023df8:	bd10      	pop	{r4, pc}
 8023dfa:	bf00      	nop

08023dfc <CoreTaskQueue_completeTask>:
{
 8023dfc:	b570      	push	{r4, r5, r6, lr}
  if ( _this->current == 0 )
 8023dfe:	6905      	ldr	r5, [r0, #16]
{
 8023e00:	b082      	sub	sp, #8
  if ( _this->current == 0 )
 8023e02:	b1b5      	cbz	r5, 8023e32 <CoreTaskQueue_completeTask+0x36>
 8023e04:	4604      	mov	r4, r0
  _this->current->queue = 0;
 8023e06:	2300      	movs	r3, #0
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023e08:	466e      	mov	r6, sp
  _this->current->queue = 0;
 8023e0a:	612b      	str	r3, [r5, #16]
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023e0c:	4630      	mov	r0, r6
  _this->current = 0;
 8023e0e:	6123      	str	r3, [r4, #16]
  EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023e10:	4621      	mov	r1, r4
 8023e12:	4a09      	ldr	r2, [pc, #36]	; (8023e38 <CoreTaskQueue_completeTask+0x3c>)
 8023e14:	f7f7 f9de 	bl	801b1d4 <EwNewSlot>
 8023e18:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023e1c:	4622      	mov	r2, r4
 8023e1e:	f7f7 fa07 	bl	801b230 <EwPostSignal>
  ((CoreTask)_this)->_.VMT->OnComplete((CoreTask)_this, aQueue );
 8023e22:	682b      	ldr	r3, [r5, #0]
 8023e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e26:	4621      	mov	r1, r4
 8023e28:	4628      	mov	r0, r5
}
 8023e2a:	b002      	add	sp, #8
 8023e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ((CoreTask)_this)->_.VMT->OnComplete((CoreTask)_this, aQueue );
 8023e30:	4718      	bx	r3
}
 8023e32:	b002      	add	sp, #8
 8023e34:	bd70      	pop	{r4, r5, r6, pc}
 8023e36:	bf00      	nop
 8023e38:	0801f835 	.word	0x0801f835

08023e3c <CoreTask_Complete>:
  if (( _this->queue != 0 ) && ( _this->queue->current == _this ))
 8023e3c:	6903      	ldr	r3, [r0, #16]
 8023e3e:	b113      	cbz	r3, 8023e46 <CoreTask_Complete+0xa>
 8023e40:	691a      	ldr	r2, [r3, #16]
 8023e42:	4282      	cmp	r2, r0
 8023e44:	d000      	beq.n	8023e48 <CoreTask_Complete+0xc>
}
 8023e46:	4770      	bx	lr
    CoreTaskQueue_completeTask( _this->queue );
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f7ff bfd7 	b.w	8023dfc <CoreTaskQueue_completeTask>
 8023e4e:	bf00      	nop

08023e50 <CoreTaskQueue_CancelTask>:
  if (( aTask == 0 ) || ( aTask->queue == 0 ))
 8023e50:	b1e9      	cbz	r1, 8023e8e <CoreTaskQueue_CancelTask+0x3e>
{
 8023e52:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (( aTask == 0 ) || ( aTask->queue == 0 ))
 8023e54:	690c      	ldr	r4, [r1, #16]
{
 8023e56:	b083      	sub	sp, #12
  if (( aTask == 0 ) || ( aTask->queue == 0 ))
 8023e58:	b17c      	cbz	r4, 8023e7a <CoreTaskQueue_CancelTask+0x2a>
  if ( aTask->queue != _this )
 8023e5a:	4284      	cmp	r4, r0
 8023e5c:	d10f      	bne.n	8023e7e <CoreTaskQueue_CancelTask+0x2e>
  if ( _this->current == aTask )
 8023e5e:	6925      	ldr	r5, [r4, #16]
 8023e60:	428d      	cmp	r5, r1
 8023e62:	d019      	beq.n	8023e98 <CoreTaskQueue_CancelTask+0x48>
      aTask->next->prev = aTask->prev;
 8023e64:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    if ( aTask->next != 0 )
 8023e68:	b1a3      	cbz	r3, 8023e94 <CoreTaskQueue_CancelTask+0x44>
      aTask->next->prev = aTask->prev;
 8023e6a:	615a      	str	r2, [r3, #20]
 8023e6c:	694a      	ldr	r2, [r1, #20]
    if ( aTask->prev != 0 )
 8023e6e:	b17a      	cbz	r2, 8023e90 <CoreTaskQueue_CancelTask+0x40>
      aTask->prev->next = aTask->next;
 8023e70:	6193      	str	r3, [r2, #24]
    aTask->prev = 0;
 8023e72:	2300      	movs	r3, #0
    aTask->next = 0;
 8023e74:	e9c1 3305 	strd	r3, r3, [r1, #20]
  aTask->queue = 0;
 8023e78:	610b      	str	r3, [r1, #16]
}
 8023e7a:	b003      	add	sp, #12
 8023e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EwThrow( EwLoadString( &_Const0010 ));
 8023e7e:	4811      	ldr	r0, [pc, #68]	; (8023ec4 <CoreTaskQueue_CancelTask+0x74>)
 8023e80:	f7f8 fad6 	bl	801c430 <EwLoadString>
}
 8023e84:	b003      	add	sp, #12
 8023e86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwThrow( EwLoadString( &_Const0010 ));
 8023e8a:	f7f4 bf01 	b.w	8018c90 <EwThrow>
 8023e8e:	4770      	bx	lr
      _this->first = aTask->next;
 8023e90:	6183      	str	r3, [r0, #24]
 8023e92:	e7ee      	b.n	8023e72 <CoreTaskQueue_CancelTask+0x22>
      _this->last = aTask->prev;
 8023e94:	6142      	str	r2, [r0, #20]
 8023e96:	e7ea      	b.n	8023e6e <CoreTaskQueue_CancelTask+0x1e>
    _this->current = 0;
 8023e98:	2700      	movs	r7, #0
    EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023e9a:	466e      	mov	r6, sp
 8023e9c:	4630      	mov	r0, r6
 8023e9e:	4621      	mov	r1, r4
 8023ea0:	4a09      	ldr	r2, [pc, #36]	; (8023ec8 <CoreTaskQueue_CancelTask+0x78>)
    _this->current = 0;
 8023ea2:	6127      	str	r7, [r4, #16]
    EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023ea4:	f7f7 f996 	bl	801b1d4 <EwNewSlot>
 8023ea8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023eac:	4622      	mov	r2, r4
 8023eae:	f7f7 f9bf 	bl	801b230 <EwPostSignal>
  ((CoreTask)_this)->_.VMT->OnCancel((CoreTask)_this, aQueue );
 8023eb2:	682b      	ldr	r3, [r5, #0]
  aTask->queue = 0;
 8023eb4:	612f      	str	r7, [r5, #16]
  ((CoreTask)_this)->_.VMT->OnCancel((CoreTask)_this, aQueue );
 8023eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eb8:	4621      	mov	r1, r4
 8023eba:	4628      	mov	r0, r5
}
 8023ebc:	b003      	add	sp, #12
 8023ebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  ((CoreTask)_this)->_.VMT->OnCancel((CoreTask)_this, aQueue );
 8023ec2:	4718      	bx	r3
 8023ec4:	08037b20 	.word	0x08037b20
 8023ec8:	0801f835 	.word	0x0801f835

08023ecc <CoreTask_OnStart>:
{
 8023ecc:	4601      	mov	r1, r0
  if ( _this->queue != 0 )
 8023ece:	6900      	ldr	r0, [r0, #16]
 8023ed0:	b108      	cbz	r0, 8023ed6 <CoreTask_OnStart+0xa>
    CoreTaskQueue_CancelTask( _this->queue, _this );
 8023ed2:	f7ff bfbd 	b.w	8023e50 <CoreTaskQueue_CancelTask>
}
 8023ed6:	4770      	bx	lr

08023ed8 <CoreTaskQueue_ScheduleTask>:
  if ( aTask == 0 )
 8023ed8:	b309      	cbz	r1, 8023f1e <CoreTaskQueue_ScheduleTask+0x46>
{
 8023eda:	b530      	push	{r4, r5, lr}
  if ( aTask->queue != 0 )
 8023edc:	690b      	ldr	r3, [r1, #16]
{
 8023ede:	b083      	sub	sp, #12
  if ( aTask->queue != 0 )
 8023ee0:	b98b      	cbnz	r3, 8023f06 <CoreTaskQueue_ScheduleTask+0x2e>
  aTask->queue = _this;
 8023ee2:	4604      	mov	r4, r0
 8023ee4:	6108      	str	r0, [r1, #16]
  if ( aWithPriority )
 8023ee6:	b142      	cbz	r2, 8023efa <CoreTaskQueue_ScheduleTask+0x22>
    aTask->next = _this->first;
 8023ee8:	6983      	ldr	r3, [r0, #24]
 8023eea:	618b      	str	r3, [r1, #24]
    if ( _this->first != 0 )
 8023eec:	b19b      	cbz	r3, 8023f16 <CoreTaskQueue_ScheduleTask+0x3e>
      _this->first->prev = aTask;
 8023eee:	6159      	str	r1, [r3, #20]
    _this->first = aTask;
 8023ef0:	61a1      	str	r1, [r4, #24]
  if ( _this->current == 0 )
 8023ef2:	6923      	ldr	r3, [r4, #16]
 8023ef4:	b1a3      	cbz	r3, 8023f20 <CoreTaskQueue_ScheduleTask+0x48>
}
 8023ef6:	b003      	add	sp, #12
 8023ef8:	bd30      	pop	{r4, r5, pc}
    aTask->prev = _this->last;
 8023efa:	6943      	ldr	r3, [r0, #20]
 8023efc:	614b      	str	r3, [r1, #20]
    if ( _this->last != 0 )
 8023efe:	b163      	cbz	r3, 8023f1a <CoreTaskQueue_ScheduleTask+0x42>
      _this->last->next = aTask;
 8023f00:	6199      	str	r1, [r3, #24]
    _this->last = aTask;
 8023f02:	6161      	str	r1, [r4, #20]
 8023f04:	e7f5      	b.n	8023ef2 <CoreTaskQueue_ScheduleTask+0x1a>
    EwThrow( EwLoadString( &_Const0011 ));
 8023f06:	480d      	ldr	r0, [pc, #52]	; (8023f3c <CoreTaskQueue_ScheduleTask+0x64>)
 8023f08:	f7f8 fa92 	bl	801c430 <EwLoadString>
}
 8023f0c:	b003      	add	sp, #12
 8023f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    EwThrow( EwLoadString( &_Const0011 ));
 8023f12:	f7f4 bebd 	b.w	8018c90 <EwThrow>
      _this->last = aTask;
 8023f16:	6141      	str	r1, [r0, #20]
 8023f18:	e7ea      	b.n	8023ef0 <CoreTaskQueue_ScheduleTask+0x18>
      _this->first = aTask;
 8023f1a:	6181      	str	r1, [r0, #24]
 8023f1c:	e7f1      	b.n	8023f02 <CoreTaskQueue_ScheduleTask+0x2a>
 8023f1e:	4770      	bx	lr
    EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023f20:	466d      	mov	r5, sp
 8023f22:	4628      	mov	r0, r5
 8023f24:	4621      	mov	r1, r4
 8023f26:	4a06      	ldr	r2, [pc, #24]	; (8023f40 <CoreTaskQueue_ScheduleTask+0x68>)
 8023f28:	f7f7 f954 	bl	801b1d4 <EwNewSlot>
 8023f2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023f30:	4622      	mov	r2, r4
}
 8023f32:	b003      	add	sp, #12
 8023f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    EwPostSignal( EwNewSlot( _this, CoreTaskQueue_onPreDispatchNext1 ), ((XObject)_this ));
 8023f38:	f7f7 b97a 	b.w	801b230 <EwPostSignal>
 8023f3c:	08037b28 	.word	0x08037b28
 8023f40:	0801f835 	.word	0x0801f835

08023f44 <CoreGroup_FadeGroup>:
{
 8023f44:	b082      	sub	sp, #8
 8023f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f48:	b083      	sub	sp, #12
 8023f4a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023f4e:	9309      	str	r3, [sp, #36]	; 0x24
  if ( aGroup == 0 )
 8023f50:	2900      	cmp	r1, #0
 8023f52:	d05c      	beq.n	802400e <CoreGroup_FadeGroup+0xca>
  if ( aFader == 0 )
 8023f54:	2a00      	cmp	r2, #0
 8023f56:	d05f      	beq.n	8024018 <CoreGroup_FadeGroup+0xd4>
  if ((( aFader->Group != 0 ) || ( aFader->Owner != 0 )) || ( aFader->task != 0 ))
 8023f58:	6a13      	ldr	r3, [r2, #32]
 8023f5a:	b91b      	cbnz	r3, 8023f64 <CoreGroup_FadeGroup+0x20>
 8023f5c:	69d3      	ldr	r3, [r2, #28]
 8023f5e:	b90b      	cbnz	r3, 8023f64 <CoreGroup_FadeGroup+0x20>
 8023f60:	6913      	ldr	r3, [r2, #16]
 8023f62:	b143      	cbz	r3, 8023f76 <CoreGroup_FadeGroup+0x32>
    EwThrow( EwLoadString( &_Const0005 ));
 8023f64:	4832      	ldr	r0, [pc, #200]	; (8024030 <CoreGroup_FadeGroup+0xec>)
 8023f66:	f7f8 fa63 	bl	801c430 <EwLoadString>
}
 8023f6a:	b003      	add	sp, #12
 8023f6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023f70:	b002      	add	sp, #8
    EwThrow( EwLoadString( &_Const0005 ));
 8023f72:	f7f4 be8d 	b.w	8018c90 <EwThrow>
  if (( aGroup->Super2.Owner != 0 ) && ( aGroup->Super2.Owner != _this ))
 8023f76:	698b      	ldr	r3, [r1, #24]
 8023f78:	4605      	mov	r5, r0
 8023f7a:	460c      	mov	r4, r1
 8023f7c:	b10b      	cbz	r3, 8023f82 <CoreGroup_FadeGroup+0x3e>
 8023f7e:	4283      	cmp	r3, r0
 8023f80:	d14c      	bne.n	802401c <CoreGroup_FadeGroup+0xd8>
  if ( _this->fadersQueue == 0 )
 8023f82:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8023f84:	2900      	cmp	r1, #0
 8023f86:	d04b      	beq.n	8024020 <CoreGroup_FadeGroup+0xdc>
  aFader->onCancel = aCancel;
 8023f88:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 8023f8c:	f102 0324 	add.w	r3, r2, #36	; 0x24
  aFader->Owner = _this;
 8023f90:	61d5      	str	r5, [r2, #28]
  aFader->Group = aGroup;
 8023f92:	6214      	str	r4, [r2, #32]
  aFader->onCancel = aCancel;
 8023f94:	e883 0003 	stmia.w	r3, {r0, r1}
  aFader->onComplete = aComplete;
 8023f98:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
  if ( aGroup->pendingFader != 0 )
 8023f9c:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
  aFader->onComplete = aComplete;
 8023f9e:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8023fa2:	e883 0003 	stmia.w	r3, {r0, r1}
  if ( aGroup->pendingFader != 0 )
 8023fa6:	b12f      	cbz	r7, 8023fb4 <CoreGroup_FadeGroup+0x70>
    EffectsFaderTask_RemoveFader( aGroup->pendingFader->task, aGroup->pendingFader );
 8023fa8:	6938      	ldr	r0, [r7, #16]
 8023faa:	9201      	str	r2, [sp, #4]
 8023fac:	4639      	mov	r1, r7
 8023fae:	f001 f927 	bl	8025200 <EffectsFaderTask_RemoveFader>
 8023fb2:	9a01      	ldr	r2, [sp, #4]
  aGroup->Super2.viewState = aGroup->Super2.viewState | CoreViewStatePendingFader;
 8023fb4:	6a23      	ldr	r3, [r4, #32]
  aGroup->pendingFader = aFader;
 8023fb6:	64e2      	str	r2, [r4, #76]	; 0x4c
  aGroup->Super2.viewState = aGroup->Super2.viewState | CoreViewStatePendingFader;
 8023fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023fbc:	6223      	str	r3, [r4, #32]
  if (( aCombine && ( _this->fadersQueue->last != 0 )) && !CoreTask_IsCurrent( _this->fadersQueue->last ))
 8023fbe:	b19e      	cbz	r6, 8023fe8 <CoreGroup_FadeGroup+0xa4>
 8023fc0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8023fc2:	6958      	ldr	r0, [r3, #20]
 8023fc4:	b180      	cbz	r0, 8023fe8 <CoreGroup_FadeGroup+0xa4>
  return (XBool)(( _this->queue != 0 ) && ( _this->queue->current == _this ));
 8023fc6:	6903      	ldr	r3, [r0, #16]
 8023fc8:	b113      	cbz	r3, 8023fd0 <CoreGroup_FadeGroup+0x8c>
 8023fca:	691b      	ldr	r3, [r3, #16]
 8023fcc:	4298      	cmp	r0, r3
 8023fce:	d00b      	beq.n	8023fe8 <CoreGroup_FadeGroup+0xa4>
    EffectsFaderTask_AddFader( EwCastObject( _this->fadersQueue->last, EffectsFaderTask ), 
 8023fd0:	4918      	ldr	r1, [pc, #96]	; (8024034 <CoreGroup_FadeGroup+0xf0>)
 8023fd2:	9201      	str	r2, [sp, #4]
 8023fd4:	f7f5 fc4a 	bl	801986c <EwCastObject>
 8023fd8:	9a01      	ldr	r2, [sp, #4]
 8023fda:	4611      	mov	r1, r2
}
 8023fdc:	b003      	add	sp, #12
 8023fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023fe2:	b002      	add	sp, #8
    EffectsFaderTask_AddFader( EwCastObject( _this->fadersQueue->last, EffectsFaderTask ), 
 8023fe4:	f001 b94a 	b.w	802527c <EffectsFaderTask_AddFader>
    EffectsFaderTask task = EwNewObject( EffectsFaderTask, 0 );
 8023fe8:	2100      	movs	r1, #0
 8023fea:	4812      	ldr	r0, [pc, #72]	; (8024034 <CoreGroup_FadeGroup+0xf0>)
 8023fec:	9201      	str	r2, [sp, #4]
 8023fee:	f7f5 fb31 	bl	8019654 <EwNewObjectIndirect>
    EffectsFaderTask_AddFader( task, aFader );
 8023ff2:	9a01      	ldr	r2, [sp, #4]
 8023ff4:	4611      	mov	r1, r2
    EffectsFaderTask task = EwNewObject( EffectsFaderTask, 0 );
 8023ff6:	4604      	mov	r4, r0
    EffectsFaderTask_AddFader( task, aFader );
 8023ff8:	f001 f940 	bl	802527c <EffectsFaderTask_AddFader>
    CoreTaskQueue_ScheduleTask( _this->fadersQueue, ((CoreTask)task ), 0 );
 8023ffc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8023ffe:	4621      	mov	r1, r4
 8024000:	2200      	movs	r2, #0
}
 8024002:	b003      	add	sp, #12
 8024004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024008:	b002      	add	sp, #8
    CoreTaskQueue_ScheduleTask( _this->fadersQueue, ((CoreTask)task ), 0 );
 802400a:	f7ff bf65 	b.w	8023ed8 <CoreTaskQueue_ScheduleTask>
}
 802400e:	b003      	add	sp, #12
 8024010:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024014:	b002      	add	sp, #8
 8024016:	4770      	bx	lr
    EwThrow( EwLoadString( &_Const0004 ));
 8024018:	4807      	ldr	r0, [pc, #28]	; (8024038 <CoreGroup_FadeGroup+0xf4>)
 802401a:	e7a4      	b.n	8023f66 <CoreGroup_FadeGroup+0x22>
    EwThrow( EwLoadString( &_Const0006 ));
 802401c:	4807      	ldr	r0, [pc, #28]	; (802403c <CoreGroup_FadeGroup+0xf8>)
 802401e:	e7a2      	b.n	8023f66 <CoreGroup_FadeGroup+0x22>
    _this->fadersQueue = EwNewObject( CoreTaskQueue, 0 );
 8024020:	4807      	ldr	r0, [pc, #28]	; (8024040 <CoreGroup_FadeGroup+0xfc>)
 8024022:	9201      	str	r2, [sp, #4]
 8024024:	f7f5 fb16 	bl	8019654 <EwNewObjectIndirect>
 8024028:	9a01      	ldr	r2, [sp, #4]
 802402a:	64a8      	str	r0, [r5, #72]	; 0x48
 802402c:	e7ac      	b.n	8023f88 <CoreGroup_FadeGroup+0x44>
 802402e:	bf00      	nop
 8024030:	08037ac4 	.word	0x08037ac4
 8024034:	08038368 	.word	0x08038368
 8024038:	08037abc 	.word	0x08037abc
 802403c:	08037acc 	.word	0x08037acc
 8024040:	08038090 	.word	0x08038090

08024044 <CoreGroup_PresentDialog>:
{
 8024044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024048:	b08f      	sub	sp, #60	; 0x3c
  if ( aDialogGroup == 0 )
 802404a:	460c      	mov	r4, r1
{
 802404c:	991a      	ldr	r1, [sp, #104]	; 0x68
 802404e:	910d      	str	r1, [sp, #52]	; 0x34
 8024050:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8024052:	910b      	str	r1, [sp, #44]	; 0x2c
 8024054:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 8024058:	910c      	str	r1, [sp, #48]	; 0x30
 802405a:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
  if ( aDialogGroup == 0 )
 802405e:	2c00      	cmp	r4, #0
 8024060:	f000 80bc 	beq.w	80241dc <CoreGroup_PresentDialog+0x198>
  if (( _this->dialogStack != 0 ) && ( _this->dialogStack->group == aDialogGroup ))
 8024064:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8024066:	4605      	mov	r5, r0
 8024068:	4690      	mov	r8, r2
 802406a:	461f      	mov	r7, r3
 802406c:	b119      	cbz	r1, 8024076 <CoreGroup_PresentDialog+0x32>
 802406e:	690e      	ldr	r6, [r1, #16]
 8024070:	42a6      	cmp	r6, r4
 8024072:	f000 809b 	beq.w	80241ac <CoreGroup_PresentDialog+0x168>
  if ((( aDialogGroup->Super2.viewState & CoreViewStateDialog ) == CoreViewStateDialog ))
 8024076:	6a21      	ldr	r1, [r4, #32]
 8024078:	f411 3180 	ands.w	r1, r1, #65536	; 0x10000
 802407c:	f040 808e 	bne.w	802419c <CoreGroup_PresentDialog+0x158>
  dialog = EwNewObject( CoreDialogContext, 0 );
 8024080:	486b      	ldr	r0, [pc, #428]	; (8024230 <CoreGroup_PresentDialog+0x1ec>)
 8024082:	f7f5 fae7 	bl	8019654 <EwNewObjectIndirect>
  if (( _this->dialogStack != 0 ) && ( _this->dialogStack->overlayTransition == 
 8024086:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
  dialog = EwNewObject( CoreDialogContext, 0 );
 802408a:	4606      	mov	r6, r0
  if (( _this->dialogStack != 0 ) && ( _this->dialogStack->overlayTransition == 
 802408c:	f1bb 0f00 	cmp.w	fp, #0
 8024090:	d00b      	beq.n	80240aa <CoreGroup_PresentDialog+0x66>
 8024092:	f8db b020 	ldr.w	fp, [fp, #32]
 8024096:	f1bb 0f00 	cmp.w	fp, #0
 802409a:	f000 80b2 	beq.w	8024202 <CoreGroup_PresentDialog+0x1be>
  if (( _this->dialogStack != 0 ) && ( aOverrideOverlayTransition != 0 ))
 802409e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240a0:	461a      	mov	r2, r3
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	bf08      	it	eq
 80240a6:	465a      	moveq	r2, fp
 80240a8:	4693      	mov	fp, r2
  if ( aPresentTransition == 0 )
 80240aa:	f1b8 0f00 	cmp.w	r8, #0
 80240ae:	f000 80a2 	beq.w	80241f6 <CoreGroup_PresentDialog+0x1b2>
  if ( _this->Focus == (CoreView)aDialogGroup )
 80240b2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  dialog->overrideRestoreTransition = aOverrideRestoreTransition;
 80240b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240b6:	6273      	str	r3, [r6, #36]	; 0x24
  if ( aRestoreTransition == 0 )
 80240b8:	f1ba 0f00 	cmp.w	sl, #0
 80240bc:	bf08      	it	eq
 80240be:	46ca      	moveq	sl, r9
    aOverlayTransition = aRestoreTransition;
 80240c0:	f1b9 0f00 	cmp.w	r9, #0
 80240c4:	bf08      	it	eq
 80240c6:	46d1      	moveq	r9, sl
    aDismissTransition = aPresentTransition;
 80240c8:	2f00      	cmp	r7, #0
 80240ca:	bf08      	it	eq
 80240cc:	4647      	moveq	r7, r8
  if ( _this->Focus == (CoreView)aDialogGroup )
 80240ce:	42a2      	cmp	r2, r4
  dialog->restoreTransition = aRestoreTransition;
 80240d0:	f8c6 a01c 	str.w	sl, [r6, #28]
  dialog->overlayTransition = aOverlayTransition;
 80240d4:	f8c6 9020 	str.w	r9, [r6, #32]
  dialog->dismissTransition = aDismissTransition;
 80240d8:	61b7      	str	r7, [r6, #24]
  if ( _this->Focus == (CoreView)aDialogGroup )
 80240da:	f000 8082 	beq.w	80241e2 <CoreGroup_PresentDialog+0x19e>
  if ( _this->dialogStack != 0 )
 80240de:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80240e0:	b12a      	cbz	r2, 80240ee <CoreGroup_PresentDialog+0xaa>
    CoreView__ChangeViewState( _this->dialogStack->group, 0, CoreViewStateFocused );
 80240e2:	6910      	ldr	r0, [r2, #16]
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80240e4:	6802      	ldr	r2, [r0, #0]
 80240e6:	2100      	movs	r1, #0
 80240e8:	6d97      	ldr	r7, [r2, #88]	; 0x58
 80240ea:	2240      	movs	r2, #64	; 0x40
 80240ec:	47b8      	blx	r7
  if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ) 
 80240ee:	6a2a      	ldr	r2, [r5, #32]
 80240f0:	0652      	lsls	r2, r2, #25
 80240f2:	d435      	bmi.n	8024160 <CoreGroup_PresentDialog+0x11c>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80240f4:	6821      	ldr	r1, [r4, #0]
 80240f6:	2200      	movs	r2, #0
 80240f8:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 80240fa:	4620      	mov	r0, r4
 80240fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8024100:	47b8      	blx	r7
  dialog->next = _this->dialogStack;
 8024102:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8024104:	e9c6 4204 	strd	r4, r2, [r6, #16]
  _this->dialogStack = dialog;
 8024108:	646e      	str	r6, [r5, #68]	; 0x44
  if ( overlayTransition != 0 )
 802410a:	f1bb 0f00 	cmp.w	fp, #0
 802410e:	d037      	beq.n	8024180 <CoreGroup_PresentDialog+0x13c>
    CoreGroup_FadeGroup( _this, _this->dialogStack->next->group, EffectsTransition__CreateOverlayFader( 
 8024110:	4658      	mov	r0, fp
 8024112:	6916      	ldr	r6, [r2, #16]
 8024114:	f001 f870 	bl	80251f8 <EffectsTransition__CreateOverlayFader>
 8024118:	4b46      	ldr	r3, [pc, #280]	; (8024234 <CoreGroup_PresentDialog+0x1f0>)
 802411a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802411c:	9103      	str	r1, [sp, #12]
 802411e:	4602      	mov	r2, r0
 8024120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024124:	ab01      	add	r3, sp, #4
 8024126:	e883 0003 	stmia.w	r3, {r0, r1}
 802412a:	4603      	mov	r3, r0
 802412c:	9100      	str	r1, [sp, #0]
 802412e:	4628      	mov	r0, r5
 8024130:	4631      	mov	r1, r6
 8024132:	f7ff ff07 	bl	8023f44 <CoreGroup_FadeGroup>
    CoreGroup_FadeGroup( _this, aDialogGroup, EffectsTransition__CreatePresentFader( 
 8024136:	4640      	mov	r0, r8
 8024138:	f001 f852 	bl	80251e0 <EffectsTransition__CreatePresentFader>
 802413c:	4602      	mov	r2, r0
 802413e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8024142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024144:	9318      	str	r3, [sp, #96]	; 0x60
 8024146:	2601      	movs	r6, #1
 8024148:	ab19      	add	r3, sp, #100	; 0x64
 802414a:	e883 0003 	stmia.w	r3, {r0, r1}
 802414e:	961b      	str	r6, [sp, #108]	; 0x6c
    CoreGroup_FadeGroup( _this, aDialogGroup, EffectsTransition__CreatePresentFader( 
 8024150:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024152:	4621      	mov	r1, r4
 8024154:	4628      	mov	r0, r5
}
 8024156:	b00f      	add	sp, #60	; 0x3c
 8024158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CoreGroup_FadeGroup( _this, aDialogGroup, EffectsTransition__CreatePresentFader( 
 802415c:	f7ff bef2 	b.w	8023f44 <CoreGroup_FadeGroup>
      && (( aDialogGroup->Super2.viewState & CoreViewStateFocusable ) == CoreViewStateFocusable ))
 8024160:	6a22      	ldr	r2, [r4, #32]
 8024162:	0753      	lsls	r3, r2, #29
 8024164:	d5c6      	bpl.n	80240f4 <CoreGroup_PresentDialog+0xb0>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8024166:	6822      	ldr	r2, [r4, #0]
 8024168:	4933      	ldr	r1, [pc, #204]	; (8024238 <CoreGroup_PresentDialog+0x1f4>)
 802416a:	6d97      	ldr	r7, [r2, #88]	; 0x58
 802416c:	4620      	mov	r0, r4
 802416e:	2200      	movs	r2, #0
 8024170:	47b8      	blx	r7
  dialog->next = _this->dialogStack;
 8024172:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8024174:	e9c6 4204 	strd	r4, r2, [r6, #16]
  _this->dialogStack = dialog;
 8024178:	646e      	str	r6, [r5, #68]	; 0x44
  if ( overlayTransition != 0 )
 802417a:	f1bb 0f00 	cmp.w	fp, #0
 802417e:	d1c7      	bne.n	8024110 <CoreGroup_PresentDialog+0xcc>
    CoreGroup_FadeGroup( _this, aDialogGroup, EffectsTransition__CreatePresentFader( 
 8024180:	4640      	mov	r0, r8
 8024182:	f001 f82d 	bl	80251e0 <EffectsTransition__CreatePresentFader>
 8024186:	4602      	mov	r2, r0
 8024188:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 802418c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802418e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024190:	931b      	str	r3, [sp, #108]	; 0x6c
 8024192:	ab19      	add	r3, sp, #100	; 0x64
 8024194:	e883 0003 	stmia.w	r3, {r0, r1}
 8024198:	9618      	str	r6, [sp, #96]	; 0x60
 802419a:	e7d9      	b.n	8024150 <CoreGroup_PresentDialog+0x10c>
    EwThrow( EwLoadString( &_Const0003 ));
 802419c:	4827      	ldr	r0, [pc, #156]	; (802423c <CoreGroup_PresentDialog+0x1f8>)
 802419e:	f7f8 f947 	bl	801c430 <EwLoadString>
}
 80241a2:	b00f      	add	sp, #60	; 0x3c
 80241a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    EwThrow( EwLoadString( &_Const0003 ));
 80241a8:	f7f4 bd72 	b.w	8018c90 <EwThrow>
    CoreGroup_SwitchToDialog( _this, aDialogGroup, aPresentTransition, aDismissTransition, 
 80241ac:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 80241b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80241b2:	9409      	str	r4, [sp, #36]	; 0x24
 80241b4:	ac07      	add	r4, sp, #28
 80241b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80241ba:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80241be:	ac05      	add	r4, sp, #20
 80241c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80241c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80241c6:	9104      	str	r1, [sp, #16]
 80241c8:	2700      	movs	r7, #0
 80241ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80241cc:	9103      	str	r1, [sp, #12]
 80241ce:	e9cd 9a00 	strd	r9, sl, [sp]
 80241d2:	4631      	mov	r1, r6
 80241d4:	4628      	mov	r0, r5
 80241d6:	9702      	str	r7, [sp, #8]
 80241d8:	f000 f836 	bl	8024248 <CoreGroup_SwitchToDialog>
}
 80241dc:	b00f      	add	sp, #60	; 0x3c
 80241de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 80241e2:	682a      	ldr	r2, [r5, #0]
 80241e4:	2100      	movs	r1, #0
 80241e6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80241e8:	4628      	mov	r0, r5
 80241ea:	4790      	blx	r2
  if ( _this->dialogStack != 0 )
 80241ec:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80241ee:	2a00      	cmp	r2, #0
 80241f0:	f47f af77 	bne.w	80240e2 <CoreGroup_PresentDialog+0x9e>
 80241f4:	e77b      	b.n	80240ee <CoreGroup_PresentDialog+0xaa>
    aPresentTransition = ((EffectsTransition)EwGetAutoObject( &EffectsShowHideCentered, 
 80241f6:	4912      	ldr	r1, [pc, #72]	; (8024240 <CoreGroup_PresentDialog+0x1fc>)
 80241f8:	4812      	ldr	r0, [pc, #72]	; (8024244 <CoreGroup_PresentDialog+0x200>)
 80241fa:	f7f5 fad5 	bl	80197a8 <EwGetAutoObject>
 80241fe:	4680      	mov	r8, r0
 8024200:	e757      	b.n	80240b2 <CoreGroup_PresentDialog+0x6e>
    if ( aOverrideRestoreTransition == 0 )
 8024202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024204:	b143      	cbz	r3, 8024218 <CoreGroup_PresentDialog+0x1d4>
    if ( aOverrideOverlayTransition == 0 )
 8024206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024208:	b153      	cbz	r3, 8024220 <CoreGroup_PresentDialog+0x1dc>
  if (( _this->dialogStack != 0 ) && ( aOverrideOverlayTransition != 0 ))
 802420a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if ( aPresentTransition == 0 )
 802420e:	f1b8 0f00 	cmp.w	r8, #0
 8024212:	f47f af4e 	bne.w	80240b2 <CoreGroup_PresentDialog+0x6e>
 8024216:	e7ee      	b.n	80241f6 <CoreGroup_PresentDialog+0x1b2>
    if ( aOverrideOverlayTransition == 0 )
 8024218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802421a:	b10b      	cbz	r3, 8024220 <CoreGroup_PresentDialog+0x1dc>
 802421c:	930b      	str	r3, [sp, #44]	; 0x2c
 802421e:	e7f4      	b.n	802420a <CoreGroup_PresentDialog+0x1c6>
 8024220:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  if ( aPresentTransition == 0 )
 8024224:	f1b8 0f00 	cmp.w	r8, #0
 8024228:	f47f af43 	bne.w	80240b2 <CoreGroup_PresentDialog+0x6e>
 802422c:	e7e3      	b.n	80241f6 <CoreGroup_PresentDialog+0x1b2>
 802422e:	bf00      	nop
 8024230:	08037be4 	.word	0x08037be4
 8024234:	08036b64 	.word	0x08036b64
 8024238:	00010040 	.word	0x00010040
 802423c:	08037ab4 	.word	0x08037ab4
 8024240:	080383b4 	.word	0x080383b4
 8024244:	080382ac 	.word	0x080382ac

08024248 <CoreGroup_SwitchToDialog>:
{
 8024248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802424c:	b093      	sub	sp, #76	; 0x4c
  if ( _this->dialogStack == 0 )
 802424e:	6c46      	ldr	r6, [r0, #68]	; 0x44
{
 8024250:	920b      	str	r2, [sp, #44]	; 0x2c
 8024252:	4604      	mov	r4, r0
 8024254:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024256:	900c      	str	r0, [sp, #48]	; 0x30
 8024258:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802425a:	900d      	str	r0, [sp, #52]	; 0x34
 802425c:	9820      	ldr	r0, [sp, #128]	; 0x80
 802425e:	9010      	str	r0, [sp, #64]	; 0x40
 8024260:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
 8024264:	900e      	str	r0, [sp, #56]	; 0x38
 8024266:	e9dd 9a1c 	ldrd	r9, sl, [sp, #112]	; 0x70
 802426a:	4688      	mov	r8, r1
 802426c:	930f      	str	r3, [sp, #60]	; 0x3c
  if ( _this->dialogStack == 0 )
 802426e:	2e00      	cmp	r6, #0
 8024270:	f000 80ee 	beq.w	8024450 <CoreGroup_SwitchToDialog+0x208>
  if ((( aDialogGroup->Super2.viewState & CoreViewStateDialog ) == CoreViewStateDialog ) 
 8024274:	6a0b      	ldr	r3, [r1, #32]
 8024276:	03d9      	lsls	r1, r3, #15
 8024278:	d503      	bpl.n	8024282 <CoreGroup_SwitchToDialog+0x3a>
      && ( _this->dialogStack->group != aDialogGroup ))
 802427a:	6933      	ldr	r3, [r6, #16]
 802427c:	4543      	cmp	r3, r8
 802427e:	f040 809a 	bne.w	80243b6 <CoreGroup_SwitchToDialog+0x16e>
  newDialog = EwNewObject( CoreDialogContext, 0 );
 8024282:	4886      	ldr	r0, [pc, #536]	; (802449c <CoreGroup_SwitchToDialog+0x254>)
  nextDialog = oldDialog->next;
 8024284:	f8d6 b014 	ldr.w	fp, [r6, #20]
  newDialog = EwNewObject( CoreDialogContext, 0 );
 8024288:	2100      	movs	r1, #0
 802428a:	f7f5 f9e3 	bl	8019654 <EwNewObjectIndirect>
  dismissTransition = oldDialog->dismissTransition;
 802428e:	69b3      	ldr	r3, [r6, #24]
  newDialog = EwNewObject( CoreDialogContext, 0 );
 8024290:	4605      	mov	r5, r0
  if ( nextDialog != 0 )
 8024292:	f1bb 0f00 	cmp.w	fp, #0
 8024296:	f000 8096 	beq.w	80243c6 <CoreGroup_SwitchToDialog+0x17e>
  if (( nextDialog != 0 ) && ( oldDialog->overrideRestoreTransition != 0 ))
 802429a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    restoreTransition = nextDialog->restoreTransition;
 802429c:	f8db 101c 	ldr.w	r1, [fp, #28]
    overlayTransition = nextDialog->overlayTransition;
 80242a0:	f8db 2020 	ldr.w	r2, [fp, #32]
    restoreTransition = nextDialog->restoreTransition;
 80242a4:	4607      	mov	r7, r0
 80242a6:	2800      	cmp	r0, #0
 80242a8:	bf08      	it	eq
 80242aa:	460f      	moveq	r7, r1
    overlayTransition = nextDialog->overlayTransition;
 80242ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    restoreTransition = nextDialog->restoreTransition;
 80242ae:	9711      	str	r7, [sp, #68]	; 0x44
    overlayTransition = nextDialog->overlayTransition;
 80242b0:	4608      	mov	r0, r1
 80242b2:	2900      	cmp	r1, #0
 80242b4:	bf08      	it	eq
 80242b6:	4610      	moveq	r0, r2
 80242b8:	900d      	str	r0, [sp, #52]	; 0x34
  dismissTransition = oldDialog->dismissTransition;
 80242ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80242bc:	4611      	mov	r1, r2
 80242be:	2a00      	cmp	r2, #0
 80242c0:	bf08      	it	eq
 80242c2:	4619      	moveq	r1, r3
  if ( aPresentTransition == 0 )
 80242c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  dismissTransition = oldDialog->dismissTransition;
 80242c6:	910c      	str	r1, [sp, #48]	; 0x30
  if ( aPresentTransition == 0 )
 80242c8:	2b00      	cmp	r3, #0
 80242ca:	f000 80bb 	beq.w	8024444 <CoreGroup_SwitchToDialog+0x1fc>
    aDismissTransition = aPresentTransition;
 80242ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  newDialog->next = _this->dialogStack->next;
 80242d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  newDialog->overrideRestoreTransition = aOverrideRestoreTransition;
 80242d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aDismissTransition = aPresentTransition;
 80242d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  newDialog->overrideRestoreTransition = aOverrideRestoreTransition;
 80242d6:	626a      	str	r2, [r5, #36]	; 0x24
    aDismissTransition = aPresentTransition;
 80242d8:	460f      	mov	r7, r1
  if ( _this->Focus == (CoreView)aDialogGroup )
 80242da:	6d22      	ldr	r2, [r4, #80]	; 0x50
    aDismissTransition = aPresentTransition;
 80242dc:	2900      	cmp	r1, #0
 80242de:	bf08      	it	eq
 80242e0:	4607      	moveq	r7, r0
  if ( aRestoreTransition == 0 )
 80242e2:	f1ba 0f00 	cmp.w	sl, #0
 80242e6:	bf08      	it	eq
 80242e8:	46ca      	moveq	sl, r9
  newDialog->next = _this->dialogStack->next;
 80242ea:	6958      	ldr	r0, [r3, #20]
  newDialog->restoreTransition = aRestoreTransition;
 80242ec:	f8c5 a01c 	str.w	sl, [r5, #28]
    aOverlayTransition = aRestoreTransition;
 80242f0:	f1b9 0f00 	cmp.w	r9, #0
 80242f4:	bf08      	it	eq
 80242f6:	46d1      	moveq	r9, sl
  _this->dialogStack->next = 0;
 80242f8:	2100      	movs	r1, #0
  if ( _this->Focus == (CoreView)aDialogGroup )
 80242fa:	4542      	cmp	r2, r8
  newDialog->next = _this->dialogStack->next;
 80242fc:	e9c5 8004 	strd	r8, r0, [r5, #16]
  newDialog->overlayTransition = aOverlayTransition;
 8024300:	f8c5 9020 	str.w	r9, [r5, #32]
  newDialog->dismissTransition = aDismissTransition;
 8024304:	61af      	str	r7, [r5, #24]
  _this->dialogStack->next = 0;
 8024306:	6159      	str	r1, [r3, #20]
  _this->dialogStack = newDialog;
 8024308:	6465      	str	r5, [r4, #68]	; 0x44
  if ( _this->Focus == (CoreView)aDialogGroup )
 802430a:	d06a      	beq.n	80243e2 <CoreGroup_SwitchToDialog+0x19a>
  CoreView__ChangeViewState( oldDialog->group, 0, CoreViewStateDialog | CoreViewStateFocused );
 802430c:	6930      	ldr	r0, [r6, #16]
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 802430e:	4a64      	ldr	r2, [pc, #400]	; (80244a0 <CoreGroup_SwitchToDialog+0x258>)
 8024310:	6803      	ldr	r3, [r0, #0]
 8024312:	2100      	movs	r1, #0
 8024314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024316:	4798      	blx	r3
  if ((( _this->Super2.viewState & CoreViewStateFocused ) == CoreViewStateFocused ) 
 8024318:	6a23      	ldr	r3, [r4, #32]
 802431a:	065a      	lsls	r2, r3, #25
 802431c:	d503      	bpl.n	8024326 <CoreGroup_SwitchToDialog+0xde>
      && (( aDialogGroup->Super2.viewState & CoreViewStateFocusable ) == CoreViewStateFocusable ))
 802431e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8024322:	075b      	lsls	r3, r3, #29
 8024324:	d462      	bmi.n	80243ec <CoreGroup_SwitchToDialog+0x1a4>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 8024326:	f8d8 3000 	ldr.w	r3, [r8]
 802432a:	4640      	mov	r0, r8
 802432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802432e:	2200      	movs	r2, #0
 8024330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8024334:	4798      	blx	r3
  if ( overlayTransition != 0 )
 8024336:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024338:	2800      	cmp	r0, #0
 802433a:	d049      	beq.n	80243d0 <CoreGroup_SwitchToDialog+0x188>
    CoreGroup_FadeGroup( _this, nextDialog->group, EffectsTransition__CreateOverlayFader( 
 802433c:	f8df a168 	ldr.w	sl, [pc, #360]	; 80244a8 <CoreGroup_SwitchToDialog+0x260>
 8024340:	f8db b010 	ldr.w	fp, [fp, #16]
 8024344:	f000 ff58 	bl	80251f8 <EffectsTransition__CreateOverlayFader>
      CoreGroup_FadeGroup( _this, nextDialog->group, EffectsTransition__CreateRestoreFader( 
 8024348:	4602      	mov	r2, r0
 802434a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 802434e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024350:	9303      	str	r3, [sp, #12]
 8024352:	f10d 0904 	add.w	r9, sp, #4
 8024356:	e889 0003 	stmia.w	r9, {r0, r1}
 802435a:	4603      	mov	r3, r0
 802435c:	4688      	mov	r8, r1
 802435e:	9100      	str	r1, [sp, #0]
 8024360:	4620      	mov	r0, r4
 8024362:	4659      	mov	r1, fp
 8024364:	f7ff fdee 	bl	8023f44 <CoreGroup_FadeGroup>
      CoreGroup_FadeGroup( _this, oldDialog->group, EffectsTransition__CreateDismissFader( 
 8024368:	980c      	ldr	r0, [sp, #48]	; 0x30
 802436a:	6937      	ldr	r7, [r6, #16]
 802436c:	f000 ff3c 	bl	80251e8 <EffectsTransition__CreateDismissFader>
 8024370:	4602      	mov	r2, r0
 8024372:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024376:	2601      	movs	r6, #1
 8024378:	4603      	mov	r3, r0
 802437a:	9603      	str	r6, [sp, #12]
 802437c:	e889 0003 	stmia.w	r9, {r0, r1}
 8024380:	4639      	mov	r1, r7
 8024382:	4620      	mov	r0, r4
 8024384:	f8cd 8000 	str.w	r8, [sp]
 8024388:	f7ff fddc 	bl	8023f44 <CoreGroup_FadeGroup>
      CoreGroup_FadeGroup( _this, newDialog->group, EffectsTransition__CreatePresentFader( 
 802438c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802438e:	692d      	ldr	r5, [r5, #16]
 8024390:	f000 ff26 	bl	80251e0 <EffectsTransition__CreatePresentFader>
 8024394:	4602      	mov	r2, r0
 8024396:	e9dd 0123 	ldrd	r0, r1, [sp, #140]	; 0x8c
 802439a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 802439c:	961f      	str	r6, [sp, #124]	; 0x7c
 802439e:	ab1d      	add	r3, sp, #116	; 0x74
 80243a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80243a4:	971c      	str	r7, [sp, #112]	; 0x70
        CoreGroup_FadeGroup( _this, newDialog->group, EffectsTransition__CreatePresentFader( 
 80243a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80243a8:	4629      	mov	r1, r5
 80243aa:	4620      	mov	r0, r4
}
 80243ac:	b013      	add	sp, #76	; 0x4c
 80243ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CoreGroup_FadeGroup( _this, newDialog->group, EffectsTransition__CreatePresentFader( 
 80243b2:	f7ff bdc7 	b.w	8023f44 <CoreGroup_FadeGroup>
    EwThrow( EwLoadString( &_Const0003 ));
 80243b6:	483b      	ldr	r0, [pc, #236]	; (80244a4 <CoreGroup_SwitchToDialog+0x25c>)
 80243b8:	f7f8 f83a 	bl	801c430 <EwLoadString>
}
 80243bc:	b013      	add	sp, #76	; 0x4c
 80243be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    EwThrow( EwLoadString( &_Const0003 ));
 80243c2:	f7f4 bc65 	b.w	8018c90 <EwThrow>
  restoreTransition = 0;
 80243c6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  overlayTransition = 0;
 80243ca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80243ce:	e774      	b.n	80242ba <CoreGroup_SwitchToDialog+0x72>
    if ( restoreTransition != 0 )
 80243d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80243d2:	b198      	cbz	r0, 80243fc <CoreGroup_SwitchToDialog+0x1b4>
      CoreGroup_FadeGroup( _this, nextDialog->group, EffectsTransition__CreateRestoreFader( 
 80243d4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80244a8 <CoreGroup_SwitchToDialog+0x260>
 80243d8:	f8db b010 	ldr.w	fp, [fp, #16]
 80243dc:	f000 ff08 	bl	80251f0 <EffectsTransition__CreateRestoreFader>
 80243e0:	e7b2      	b.n	8024348 <CoreGroup_SwitchToDialog+0x100>
  ((CoreGroup)_this)->_.VMT->OnSetFocus((CoreGroup)_this, value );
 80243e2:	6823      	ldr	r3, [r4, #0]
 80243e4:	4620      	mov	r0, r4
 80243e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80243e8:	4798      	blx	r3
}
 80243ea:	e78f      	b.n	802430c <CoreGroup_SwitchToDialog+0xc4>
  ((CoreView)_this)->_.VMT->ChangeViewState((CoreView)_this, aSetState, aClearState );
 80243ec:	f8d8 3000 	ldr.w	r3, [r8]
 80243f0:	492b      	ldr	r1, [pc, #172]	; (80244a0 <CoreGroup_SwitchToDialog+0x258>)
 80243f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80243f4:	4640      	mov	r0, r8
 80243f6:	2200      	movs	r2, #0
 80243f8:	4798      	blx	r3
}
 80243fa:	e79c      	b.n	8024336 <CoreGroup_SwitchToDialog+0xee>
      if ( dismissTransition != 0 )
 80243fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80243fe:	2800      	cmp	r0, #0
 8024400:	d03d      	beq.n	802447e <CoreGroup_SwitchToDialog+0x236>
        CoreGroup_FadeGroup( _this, oldDialog->group, EffectsTransition__CreateDismissFader( 
 8024402:	6936      	ldr	r6, [r6, #16]
 8024404:	f000 fef0 	bl	80251e8 <EffectsTransition__CreateDismissFader>
 8024408:	4b27      	ldr	r3, [pc, #156]	; (80244a8 <CoreGroup_SwitchToDialog+0x260>)
 802440a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802440c:	9103      	str	r1, [sp, #12]
 802440e:	4602      	mov	r2, r0
 8024410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024414:	ab01      	add	r3, sp, #4
 8024416:	e883 0003 	stmia.w	r3, {r0, r1}
 802441a:	4603      	mov	r3, r0
 802441c:	9100      	str	r1, [sp, #0]
 802441e:	4620      	mov	r0, r4
 8024420:	4631      	mov	r1, r6
 8024422:	f7ff fd8f 	bl	8023f44 <CoreGroup_FadeGroup>
        CoreGroup_FadeGroup( _this, newDialog->group, EffectsTransition__CreatePresentFader( 
 8024426:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024428:	692d      	ldr	r5, [r5, #16]
 802442a:	f000 fed9 	bl	80251e0 <EffectsTransition__CreatePresentFader>
 802442e:	4602      	mov	r2, r0
 8024430:	e9dd 0123 	ldrd	r0, r1, [sp, #140]	; 0x8c
 8024434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024436:	931c      	str	r3, [sp, #112]	; 0x70
 8024438:	2601      	movs	r6, #1
 802443a:	ab1d      	add	r3, sp, #116	; 0x74
 802443c:	e883 0003 	stmia.w	r3, {r0, r1}
 8024440:	961f      	str	r6, [sp, #124]	; 0x7c
 8024442:	e7b0      	b.n	80243a6 <CoreGroup_SwitchToDialog+0x15e>
    aPresentTransition = ((EffectsTransition)EwGetAutoObject( &EffectsShowHideCentered, 
 8024444:	4919      	ldr	r1, [pc, #100]	; (80244ac <CoreGroup_SwitchToDialog+0x264>)
 8024446:	481a      	ldr	r0, [pc, #104]	; (80244b0 <CoreGroup_SwitchToDialog+0x268>)
 8024448:	f7f5 f9ae 	bl	80197a8 <EwGetAutoObject>
 802444c:	900b      	str	r0, [sp, #44]	; 0x2c
 802444e:	e73e      	b.n	80242ce <CoreGroup_SwitchToDialog+0x86>
    CoreGroup_PresentDialog( _this, aDialogGroup, aPresentTransition, aDismissTransition, 
 8024450:	e9dd 0123 	ldrd	r0, r1, [sp, #140]	; 0x8c
 8024454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024456:	9508      	str	r5, [sp, #32]
 8024458:	ad06      	add	r5, sp, #24
 802445a:	e885 0003 	stmia.w	r5, {r0, r1}
 802445e:	e9dd 0121 	ldrd	r0, r1, [sp, #132]	; 0x84
 8024462:	ad04      	add	r5, sp, #16
 8024464:	e885 0003 	stmia.w	r5, {r0, r1}
 8024468:	e9cd 6602 	strd	r6, r6, [sp, #8]
 802446c:	e9cd 9a00 	strd	r9, sl, [sp]
 8024470:	4641      	mov	r1, r8
 8024472:	4620      	mov	r0, r4
 8024474:	f7ff fde6 	bl	8024044 <CoreGroup_PresentDialog>
}
 8024478:	b013      	add	sp, #76	; 0x4c
 802447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CoreGroup_FadeGroup( _this, newDialog->group, EffectsTransition__CreatePresentFader( 
 802447e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024480:	692d      	ldr	r5, [r5, #16]
 8024482:	f000 fead 	bl	80251e0 <EffectsTransition__CreatePresentFader>
 8024486:	4602      	mov	r2, r0
 8024488:	e9dd 0123 	ldrd	r0, r1, [sp, #140]	; 0x8c
 802448c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802448e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8024490:	931f      	str	r3, [sp, #124]	; 0x7c
 8024492:	ab1d      	add	r3, sp, #116	; 0x74
 8024494:	e883 0003 	stmia.w	r3, {r0, r1}
 8024498:	961c      	str	r6, [sp, #112]	; 0x70
 802449a:	e784      	b.n	80243a6 <CoreGroup_SwitchToDialog+0x15e>
 802449c:	08037be4 	.word	0x08037be4
 80244a0:	00010040 	.word	0x00010040
 80244a4:	08037ab4 	.word	0x08037ab4
 80244a8:	08036b64 	.word	0x08036b64
 80244ac:	080383b4 	.word	0x080383b4
 80244b0:	080382ac 	.word	0x080382ac

080244b4 <CoreTask__Complete>:
  ((CoreTask)_this)->_.VMT->Complete((CoreTask)_this );
 80244b4:	6803      	ldr	r3, [r0, #0]
 80244b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244b8:	4718      	bx	r3
 80244ba:	bf00      	nop

080244bc <CoreTask_Cancel>:
{
 80244bc:	4601      	mov	r1, r0
  if ( _this->queue != 0 )
 80244be:	6900      	ldr	r0, [r0, #16]
 80244c0:	b108      	cbz	r0, 80244c6 <CoreTask_Cancel+0xa>
    CoreTaskQueue_CancelTask( _this->queue, _this );
 80244c2:	f7ff bcc5 	b.w	8023e50 <CoreTaskQueue_CancelTask>
}
 80244c6:	4770      	bx	lr

080244c8 <CoreTask_IsCurrent>:
  return (XBool)(( _this->queue != 0 ) && ( _this->queue->current == _this ));
 80244c8:	6903      	ldr	r3, [r0, #16]
 80244ca:	b12b      	cbz	r3, 80244d8 <CoreTask_IsCurrent+0x10>
 80244cc:	691a      	ldr	r2, [r3, #16]
 80244ce:	1a10      	subs	r0, r2, r0
 80244d0:	fab0 f080 	clz	r0, r0
 80244d4:	0940      	lsrs	r0, r0, #5
 80244d6:	4770      	bx	lr
 80244d8:	4618      	mov	r0, r3
}
 80244da:	4770      	bx	lr

080244dc <CoreTimer_restart>:
{
 80244dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmp = _this->timer;
 80244de:	6986      	ldr	r6, [r0, #24]
{
 80244e0:	4604      	mov	r4, r0
 80244e2:	460d      	mov	r5, r1
 80244e4:	4617      	mov	r7, r2
  if (( tmp == 0 ) && (( aBegin > 0 ) || ( aPeriod > 0 )))
 80244e6:	b15e      	cbz	r6, 8024500 <CoreTimer_restart+0x24>
      EwResetTimer((XTimer*)tmp );
 80244e8:	4630      	mov	r0, r6
 80244ea:	f7f8 fe15 	bl	801d118 <EwResetTimer>
      EwStartTimer((XTimer*)tmp, aBegin, aPeriod );
 80244ee:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 80244f2:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 80244f6:	4630      	mov	r0, r6
 80244f8:	f7f8 fe3e 	bl	801d178 <EwStartTimer>
  _this->timer = tmp;
 80244fc:	61a6      	str	r6, [r4, #24]
}
 80244fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (( tmp == 0 ) && (( aBegin > 0 ) || ( aPeriod > 0 )))
 8024500:	2900      	cmp	r1, #0
 8024502:	dc01      	bgt.n	8024508 <CoreTimer_restart+0x2c>
 8024504:	2a00      	cmp	r2, #0
 8024506:	ddf9      	ble.n	80244fc <CoreTimer_restart+0x20>
      tmp = (XHandle)(void*)EwCreateTimer( TimerProc, (XHandle)(void*)this );
 8024508:	4803      	ldr	r0, [pc, #12]	; (8024518 <CoreTimer_restart+0x3c>)
 802450a:	4621      	mov	r1, r4
 802450c:	f7f8 fdc2 	bl	801d094 <EwCreateTimer>
  if ( tmp != 0 )
 8024510:	2800      	cmp	r0, #0
 8024512:	d0f3      	beq.n	80244fc <CoreTimer_restart+0x20>
      tmp = (XHandle)(void*)EwCreateTimer( TimerProc, (XHandle)(void*)this );
 8024514:	4606      	mov	r6, r0
 8024516:	e7e7      	b.n	80244e8 <CoreTimer_restart+0xc>
 8024518:	0801f561 	.word	0x0801f561

0802451c <CoreRoot__Init>:
{
 802451c:	b570      	push	{r4, r5, r6, lr}
 802451e:	4604      	mov	r4, r0
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreRoot );
 8024520:	4d17      	ldr	r5, [pc, #92]	; (8024580 <CoreRoot__Init+0x64>)
{
 8024522:	b082      	sub	sp, #8
  CoreTimer__Init( &_this->cursorHoldTimer, &_this->_.XObject, 0 );
 8024524:	f100 0688 	add.w	r6, r0, #136	; 0x88
  CoreGroup__Init( &_this->_.Super, aLink, aArg );
 8024528:	f7fd fdc8 	bl	80220bc <CoreGroup__Init>
  XObject__Init( &_this->_.Super, aLink, aArg );
 802452c:	4630      	mov	r0, r6
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreRoot );
 802452e:	60e5      	str	r5, [r4, #12]
  XObject__Init( &_this->_.Super, aLink, aArg );
 8024530:	4621      	mov	r1, r4
 8024532:	2200      	movs	r2, #0
 8024534:	f7f5 f882 	bl	801963c <XObject__Init>
  if ( _this->Enabled )
 8024538:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreTimer );
 802453c:	4b11      	ldr	r3, [pc, #68]	; (8024584 <CoreRoot__Init+0x68>)
  _this->_.VMT = EW_CLASS( CoreRoot );
 802453e:	6025      	str	r5, [r4, #0]
  _this->hasRootFocus = 1;
 8024540:	2001      	movs	r0, #1
  _this->Super3.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFocusable 
 8024542:	257f      	movs	r5, #127	; 0x7f
  _this->Period = value;
 8024544:	2232      	movs	r2, #50	; 0x32
  _this->Super3.viewState = CoreViewStateAlphaBlended | CoreViewStateEnabled | CoreViewStateFocusable 
 8024546:	6225      	str	r5, [r4, #32]
  _this->hasRootFocus = 1;
 8024548:	f884 03fe 	strb.w	r0, [r4, #1022]	; 0x3fe
  _this->_.XObject._.GCT = EW_CLASS_GCT( CoreTimer );
 802454c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  _this->_.VMT = EW_CLASS( CoreTimer );
 8024550:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  _this->Period = value;
 8024554:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  if ( _this->Enabled )
 8024558:	b961      	cbnz	r1, 8024574 <CoreRoot__Init+0x58>
  _this->cursorHoldTimer.OnTrigger = EwNewSlot( _this, CoreRoot_cursorHoldTimerProc );
 802455a:	466d      	mov	r5, sp
 802455c:	4628      	mov	r0, r5
 802455e:	4621      	mov	r1, r4
 8024560:	4a09      	ldr	r2, [pc, #36]	; (8024588 <CoreRoot__Init+0x6c>)
 8024562:	f7f6 fe37 	bl	801b1d4 <EwNewSlot>
 8024566:	e895 0003 	ldmia.w	r5, {r0, r1}
 802456a:	3498      	adds	r4, #152	; 0x98
 802456c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024570:	b002      	add	sp, #8
 8024572:	bd70      	pop	{r4, r5, r6, pc}
    CoreTimer_restart( _this, _this->Begin, value );
 8024574:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8024578:	4630      	mov	r0, r6
 802457a:	f7ff ffaf 	bl	80244dc <CoreTimer_restart>
 802457e:	e7ec      	b.n	802455a <CoreRoot__Init+0x3e>
 8024580:	08037f68 	.word	0x08037f68
 8024584:	080380cc 	.word	0x080380cc
 8024588:	08024601 	.word	0x08024601

0802458c <CoreTimer_OnSetPeriod>:
{
 802458c:	b410      	push	{r4}
  if ( value == _this->Period )
 802458e:	6a04      	ldr	r4, [r0, #32]
 8024590:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
 8024594:	4294      	cmp	r4, r2
 8024596:	d003      	beq.n	80245a0 <CoreTimer_OnSetPeriod+0x14>
  if ( _this->Enabled )
 8024598:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
  _this->Period = value;
 802459c:	6202      	str	r2, [r0, #32]
  if ( _this->Enabled )
 802459e:	b911      	cbnz	r1, 80245a6 <CoreTimer_OnSetPeriod+0x1a>
}
 80245a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80245a4:	4770      	bx	lr
    CoreTimer_restart( _this, _this->Begin, value );
 80245a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
}
 80245a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    CoreTimer_restart( _this, _this->Begin, value );
 80245ac:	f7ff bf96 	b.w	80244dc <CoreTimer_restart>

080245b0 <CoreTimer_OnSetBegin>:
  if ( value == _this->Begin )
 80245b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80245b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80245b6:	428a      	cmp	r2, r1
 80245b8:	d003      	beq.n	80245c2 <CoreTimer_OnSetBegin+0x12>
  if ( _this->Enabled )
 80245ba:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
  _this->Begin = value;
 80245be:	6241      	str	r1, [r0, #36]	; 0x24
  if ( _this->Enabled )
 80245c0:	b902      	cbnz	r2, 80245c4 <CoreTimer_OnSetBegin+0x14>
}
 80245c2:	4770      	bx	lr
    CoreTimer_restart( _this, value, _this->Period );
 80245c4:	6a02      	ldr	r2, [r0, #32]
 80245c6:	f7ff bf89 	b.w	80244dc <CoreTimer_restart>
 80245ca:	bf00      	nop

080245cc <CoreTimer_OnSetEnabled>:
  if ( value == _this->Enabled )
 80245cc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80245d0:	428b      	cmp	r3, r1
 80245d2:	d013      	beq.n	80245fc <CoreTimer_OnSetEnabled+0x30>
{
 80245d4:	b510      	push	{r4, lr}
 80245d6:	460a      	mov	r2, r1
 80245d8:	4604      	mov	r4, r0
  _this->Enabled = value;
 80245da:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
  if ( value )
 80245de:	b929      	cbnz	r1, 80245ec <CoreTimer_OnSetEnabled+0x20>
    CoreTimer_restart( _this, 0, 0 );
 80245e0:	f7ff ff7c 	bl	80244dc <CoreTimer_restart>
  ticksCount = (XUInt32)EwGetTicks();
 80245e4:	f005 f8ea 	bl	80297bc <EwGetTicks>
  _this->Time = CoreTimer_GetCurrentTime( _this );
 80245e8:	61e0      	str	r0, [r4, #28]
}
 80245ea:	bd10      	pop	{r4, pc}
    CoreTimer_restart( _this, _this->Begin, _this->Period );
 80245ec:	e9d0 2108 	ldrd	r2, r1, [r0, #32]
 80245f0:	f7ff ff74 	bl	80244dc <CoreTimer_restart>
  ticksCount = (XUInt32)EwGetTicks();
 80245f4:	f005 f8e2 	bl	80297bc <EwGetTicks>
  _this->Time = CoreTimer_GetCurrentTime( _this );
 80245f8:	61e0      	str	r0, [r4, #28]
}
 80245fa:	bd10      	pop	{r4, pc}
 80245fc:	4770      	bx	lr
 80245fe:	bf00      	nop

08024600 <CoreRoot_cursorHoldTimerProc>:
{
 8024600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024604:	b097      	sub	sp, #92	; 0x5c
  found = 0;
 8024606:	2700      	movs	r7, #0
 8024608:	f100 0380 	add.w	r3, r0, #128	; 0x80
{
 802460c:	4682      	mov	sl, r0
  found = 0;
 802460e:	9705      	str	r7, [sp, #20]
 8024610:	f100 0858 	add.w	r8, r0, #88	; 0x58
 8024614:	4681      	mov	r9, r0
 8024616:	9304      	str	r3, [sp, #16]
      XPoint pos = _this->cursorLastPos[ EwCheckIndex( i, 10 )];
 8024618:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 802461c:	9703      	str	r7, [sp, #12]
 802461e:	e008      	b.n	8024632 <CoreRoot_cursorHoldTimerProc+0x32>
  for ( i = 0; i < 10; i = i + 1 )
 8024620:	9b03      	ldr	r3, [sp, #12]
 8024622:	3301      	adds	r3, #1
 8024624:	9303      	str	r3, [sp, #12]
 8024626:	9b04      	ldr	r3, [sp, #16]
 8024628:	4598      	cmp	r8, r3
 802462a:	f109 0908 	add.w	r9, r9, #8
 802462e:	f000 812a 	beq.w	8024886 <CoreRoot_cursorHoldTimerProc+0x286>
    if ( _this->cursorTargetView[ EwCheckIndex( i, 10 )] != 0 )
 8024632:	f858 5f04 	ldr.w	r5, [r8, #4]!
 8024636:	2d00      	cmp	r5, #0
 8024638:	d0f2      	beq.n	8024620 <CoreRoot_cursorHoldTimerProc+0x20>
      XPoint pos = _this->cursorLastPos[ EwCheckIndex( i, 10 )];
 802463a:	e9d9 01b1 	ldrd	r0, r1, [r9, #708]	; 0x2c4
      CoreGroup grp = _this->cursorTargetView[ EwCheckIndex( i, 10 )]->Owner;
 802463e:	69ac      	ldr	r4, [r5, #24]
      XPoint pos = _this->cursorLastPos[ EwCheckIndex( i, 10 )];
 8024640:	e88b 0003 	stmia.w	fp, {r0, r1}
      while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8024644:	b1ac      	cbz	r4, 8024672 <CoreRoot_cursorHoldTimerProc+0x72>
 8024646:	45a2      	cmp	sl, r4
 8024648:	f000 80a9 	beq.w	802479e <CoreRoot_cursorHoldTimerProc+0x19e>
 802464c:	9f03      	ldr	r7, [sp, #12]
 802464e:	e002      	b.n	8024656 <CoreRoot_cursorHoldTimerProc+0x56>
 8024650:	45a2      	cmp	sl, r4
 8024652:	f000 80a1 	beq.w	8024798 <CoreRoot_cursorHoldTimerProc+0x198>
        pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8024656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8024658:	9300      	str	r3, [sp, #0]
 802465a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802465c:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024660:	4658      	mov	r0, fp
 8024662:	f7f5 fbe1 	bl	8019e28 <EwMovePointNeg>
        grp = grp->Super2.Owner;
 8024666:	69a4      	ldr	r4, [r4, #24]
      while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8024668:	2c00      	cmp	r4, #0
 802466a:	d1f1      	bne.n	8024650 <CoreRoot_cursorHoldTimerProc+0x50>
 802466c:	f8d8 5000 	ldr.w	r5, [r8]
 8024670:	9703      	str	r7, [sp, #12]
      if (( grp == 0 ) && ((CoreRoot)_this->cursorTargetView[ EwCheckIndex( i, 10 )] 
 8024672:	45aa      	cmp	sl, r5
 8024674:	f000 8093 	beq.w	802479e <CoreRoot_cursorHoldTimerProc+0x19e>
        _this->cursorFinger = i;
 8024678:	9b03      	ldr	r3, [sp, #12]
 802467a:	f8ca 3364 	str.w	r3, [sl, #868]	; 0x364
        _this->cursorTargetView[ EwCheckIndex( i, 10 )] = 0;
 802467e:	2100      	movs	r1, #0
 8024680:	f8c8 1000 	str.w	r1, [r8]
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024684:	4886      	ldr	r0, [pc, #536]	; (80248a0 <CoreRoot_cursorHoldTimerProc+0x2a0>)
 8024686:	f7f4 ffe5 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 802468a:	f8da 30b8 	ldr.w	r3, [sl, #184]	; 0xb8
 802468e:	f8d9 62c8 	ldr.w	r6, [r9, #712]	; 0x2c8
 8024692:	960a      	str	r6, [sp, #40]	; 0x28
 8024694:	2b00      	cmp	r3, #0
 8024696:	bf14      	ite	ne
 8024698:	2201      	movne	r2, #1
 802469a:	2200      	moveq	r2, #0
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 802469c:	4604      	mov	r4, r0
    event->Super1.Time = _this->currentEventTimestamp;
 802469e:	bf18      	it	ne
 80246a0:	6103      	strne	r3, [r0, #16]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80246a2:	7502      	strb	r2, [r0, #20]
    return aIndex;
 80246a4:	e9d9 0189 	ldrd	r0, r1, [r9, #548]	; 0x224
 80246a8:	aa10      	add	r2, sp, #64	; 0x40
 80246aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80246ae:	e9d9 016b 	ldrd	r0, r1, [r9, #428]	; 0x1ac
        CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80246b2:	f8d8 7128 	ldr.w	r7, [r8, #296]	; 0x128
 80246b6:	9706      	str	r7, [sp, #24]
 80246b8:	af12      	add	r7, sp, #72	; 0x48
 80246ba:	e887 0003 	stmia.w	r7, {r0, r1}
 80246be:	e9d9 019d 	ldrd	r0, r1, [r9, #628]	; 0x274
 80246c2:	f8d9 32c4 	ldr.w	r3, [r9, #708]	; 0x2c4
 80246c6:	9308      	str	r3, [sp, #32]
 80246c8:	af16      	add	r7, sp, #88	; 0x58
 80246ca:	e907 0003 	stmdb	r7, {r0, r1}
 80246ce:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
 80246d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80246d4:	f8d9 3318 	ldr.w	r3, [r9, #792]	; 0x318
 80246d8:	9309      	str	r3, [sp, #36]	; 0x24
  _this->Finger = aFinger;
 80246da:	9b03      	ldr	r3, [sp, #12]
        CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80246dc:	f8d8 c060 	ldr.w	ip, [r8, #96]	; 0x60
  _this->Finger = aFinger;
 80246e0:	6423      	str	r3, [r4, #64]	; 0x40
  _this->Down = 0;
 80246e2:	f04f 0100 	mov.w	r1, #0
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80246e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  _this->Down = 0;
 80246e8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80246ec:	ae0c      	add	r6, sp, #48	; 0x30
 80246ee:	9300      	str	r3, [sp, #0]
        CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80246f0:	f10c 0701 	add.w	r7, ip, #1
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80246f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80246f6:	4630      	mov	r0, r6
 80246f8:	ca06      	ldmia	r2, {r1, r2}
        CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80246fa:	9707      	str	r7, [sp, #28]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80246fc:	f7f5 fba6 	bl	8019e4c <EwMovePointPos>
 8024700:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024704:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8024708:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 802470c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802470e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024710:	a812      	add	r0, sp, #72	; 0x48
 8024712:	e890 0006 	ldmia.w	r0, {r1, r2}
 8024716:	4630      	mov	r0, r6
 8024718:	9700      	str	r7, [sp, #0]
 802471a:	f7f5 fb97 	bl	8019e4c <EwMovePointPos>
 802471e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024722:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8024726:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->AutoDeflected = aAutoDeflected;
 802472a:	f04f 0100 	mov.w	r1, #0
 802472e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024732:	9a08      	ldr	r2, [sp, #32]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024734:	682b      	ldr	r3, [r5, #0]
  _this->StrikeCount = aStrikeCount;
 8024736:	9f07      	ldr	r7, [sp, #28]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024738:	6222      	str	r2, [r4, #32]
  _this->GlobalHittingPos = aGlobalHittingPos;
 802473a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 802473c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  _this->StrikeCount = aStrikeCount;
 802473e:	62a7      	str	r7, [r4, #40]	; 0x28
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024740:	61a2      	str	r2, [r4, #24]
  _this->HoldPeriod = aHoldPeriod;
 8024742:	9f06      	ldr	r7, [sp, #24]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024746:	61e2      	str	r2, [r4, #28]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  _this->HoldPeriod = aHoldPeriod;
 802474a:	62e7      	str	r7, [r4, #44]	; 0x2c
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 802474c:	6266      	str	r6, [r4, #36]	; 0x24
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 802474e:	4621      	mov	r1, r4
 8024750:	4628      	mov	r0, r5
 8024752:	4798      	blx	r3
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8024754:	2100      	movs	r1, #0
 8024756:	4853      	ldr	r0, [pc, #332]	; (80248a4 <CoreRoot_cursorHoldTimerProc+0x2a4>)
 8024758:	f7f4 ff7c 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 802475c:	f8da 30b8 	ldr.w	r3, [sl, #184]	; 0xb8
 8024760:	2b00      	cmp	r3, #0
 8024762:	bf14      	ite	ne
 8024764:	2201      	movne	r2, #1
 8024766:	2200      	moveq	r2, #0
 8024768:	7502      	strb	r2, [r0, #20]
    event->Super1.Time = _this->currentEventTimestamp;
 802476a:	bf18      	it	ne
 802476c:	6103      	strne	r3, [r0, #16]
    return aIndex;
 802476e:	e9d9 41b1 	ldrd	r4, r1, [r9, #708]	; 0x2c4
        CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8024772:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  _this->Down = 0;
 8024776:	2200      	movs	r2, #0
 8024778:	8582      	strh	r2, [r0, #44]	; 0x2c
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 802477a:	f8da 2000 	ldr.w	r2, [sl]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 802477e:	61c4      	str	r4, [r0, #28]
        CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8024780:	3301      	adds	r3, #1
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024782:	e9c0 1308 	strd	r1, r3, [r0, #32]
  _this->Finger = aFinger;
 8024786:	9b03      	ldr	r3, [sp, #12]
 8024788:	6283      	str	r3, [r0, #40]	; 0x28
  _this->Target = aTarget;
 802478a:	6185      	str	r5, [r0, #24]
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 802478c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 802478e:	4601      	mov	r1, r0
 8024790:	2218      	movs	r2, #24
 8024792:	4650      	mov	r0, sl
 8024794:	4798      	blx	r3
 8024796:	e743      	b.n	8024620 <CoreRoot_cursorHoldTimerProc+0x20>
 8024798:	f8d8 5000 	ldr.w	r5, [r8]
 802479c:	9703      	str	r7, [sp, #12]
        - _this->cursorHittingTime[ EwCheckIndex( i, 10 )]);
 802479e:	f8d8 21a0 	ldr.w	r2, [r8, #416]	; 0x1a0
 80247a2:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 80247a6:	483e      	ldr	r0, [pc, #248]	; (80248a0 <CoreRoot_cursorHoldTimerProc+0x2a0>)
        - _this->cursorHittingTime[ EwCheckIndex( i, 10 )]);
 80247a8:	1a9b      	subs	r3, r3, r2
        if ( _this->cursorHoldPeriod[ EwCheckIndex( i, 10 )] < 10 )
 80247aa:	2b09      	cmp	r3, #9
          _this->cursorHoldPeriod[ EwCheckIndex( i, 10 )] = 10;
 80247ac:	bfd8      	it	le
 80247ae:	230a      	movle	r3, #10
 80247b0:	f8c8 3128 	str.w	r3, [r8, #296]	; 0x128
        _this->cursorFinger = i;
 80247b4:	9b03      	ldr	r3, [sp, #12]
 80247b6:	f8ca 3364 	str.w	r3, [sl, #868]	; 0x364
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 80247ba:	2100      	movs	r1, #0
 80247bc:	f7f4 ff4a 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80247c0:	f8da 30b8 	ldr.w	r3, [sl, #184]	; 0xb8
 80247c4:	f8d9 62c4 	ldr.w	r6, [r9, #708]	; 0x2c4
 80247c8:	960a      	str	r6, [sp, #40]	; 0x28
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	bf14      	ite	ne
 80247ce:	2201      	movne	r2, #1
 80247d0:	2200      	moveq	r2, #0
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 80247d2:	4604      	mov	r4, r0
    event->Super1.Time = _this->currentEventTimestamp;
 80247d4:	bf18      	it	ne
 80247d6:	6103      	strne	r3, [r0, #16]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80247d8:	7502      	strb	r2, [r0, #20]
    return aIndex;
 80247da:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80247de:	aa10      	add	r2, sp, #64	; 0x40
 80247e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80247e4:	e9d9 016b 	ldrd	r0, r1, [r9, #428]	; 0x1ac
 80247e8:	af12      	add	r7, sp, #72	; 0x48
 80247ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80247ee:	e9d9 019d 	ldrd	r0, r1, [r9, #628]	; 0x274
        ((CoreEvent)CoreCursorEvent_InitializeHold( CoreRoot_createCursorEvent( 
 80247f2:	f8d8 3128 	ldr.w	r3, [r8, #296]	; 0x128
 80247f6:	9305      	str	r3, [sp, #20]
 80247f8:	af16      	add	r7, sp, #88	; 0x58
 80247fa:	e907 0003 	stmdb	r7, {r0, r1}
 80247fe:	f8d9 32c8 	ldr.w	r3, [r9, #712]	; 0x2c8
 8024802:	9307      	str	r3, [sp, #28]
 8024804:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
 8024808:	9308      	str	r3, [sp, #32]
  _this->Finger = aFinger;
 802480a:	9b03      	ldr	r3, [sp, #12]
        ((CoreEvent)CoreCursorEvent_InitializeHold( CoreRoot_createCursorEvent( 
 802480c:	f8d8 c060 	ldr.w	ip, [r8, #96]	; 0x60
 8024810:	f8d9 6318 	ldr.w	r6, [r9, #792]	; 0x318
  _this->Finger = aFinger;
 8024814:	6423      	str	r3, [r4, #64]	; 0x40
  _this->Down = 1;
 8024816:	f04f 0101 	mov.w	r1, #1
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 802481a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802481c:	9609      	str	r6, [sp, #36]	; 0x24
  _this->Down = 1;
 802481e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8024822:	ae0c      	add	r6, sp, #48	; 0x30
 8024824:	9300      	str	r3, [sp, #0]
        ((CoreEvent)CoreCursorEvent_InitializeHold( CoreRoot_createCursorEvent( 
 8024826:	f10c 0701 	add.w	r7, ip, #1
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 802482a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802482c:	4630      	mov	r0, r6
 802482e:	ca06      	ldmia	r2, {r1, r2}
        ((CoreEvent)CoreCursorEvent_InitializeHold( CoreRoot_createCursorEvent( 
 8024830:	9706      	str	r7, [sp, #24]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8024832:	f7f5 fb0b 	bl	8019e4c <EwMovePointPos>
 8024836:	e896 0003 	ldmia.w	r6, {r0, r1}
 802483a:	f104 0238 	add.w	r2, r4, #56	; 0x38
 802483e:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8024842:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8024844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024846:	a912      	add	r1, sp, #72	; 0x48
 8024848:	c906      	ldmia	r1, {r1, r2}
 802484a:	4630      	mov	r0, r6
 802484c:	9700      	str	r7, [sp, #0]
 802484e:	f7f5 fafd 	bl	8019e4c <EwMovePointPos>
 8024852:	e896 0003 	ldmia.w	r6, {r0, r1}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024856:	682a      	ldr	r2, [r5, #0]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024858:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  _this->StrikeCount = aStrikeCount;
 802485a:	9f06      	ldr	r7, [sp, #24]
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 802485c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8024860:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024864:	6c53      	ldr	r3, [r2, #68]	; 0x44
  _this->HoldPeriod = aHoldPeriod;
 8024866:	9a05      	ldr	r2, [sp, #20]
 8024868:	62e2      	str	r2, [r4, #44]	; 0x2c
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 802486a:	9a07      	ldr	r2, [sp, #28]
 802486c:	6226      	str	r6, [r4, #32]
 802486e:	6262      	str	r2, [r4, #36]	; 0x24
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024870:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024872:	9a08      	ldr	r2, [sp, #32]
  _this->StrikeCount = aStrikeCount;
 8024874:	62a7      	str	r7, [r4, #40]	; 0x28
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024876:	61a2      	str	r2, [r4, #24]
 8024878:	61e6      	str	r6, [r4, #28]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 802487a:	4621      	mov	r1, r4
 802487c:	4628      	mov	r0, r5
 802487e:	4798      	blx	r3
        found = 1;
 8024880:	2301      	movs	r3, #1
 8024882:	9305      	str	r3, [sp, #20]
 8024884:	e6cc      	b.n	8024620 <CoreRoot_cursorHoldTimerProc+0x20>
  if ( !found )
 8024886:	9b05      	ldr	r3, [sp, #20]
 8024888:	b113      	cbz	r3, 8024890 <CoreRoot_cursorHoldTimerProc+0x290>
}
 802488a:	b017      	add	sp, #92	; 0x5c
 802488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    CoreTimer_OnSetEnabled( &_this->cursorHoldTimer, 0 );
 8024890:	4619      	mov	r1, r3
 8024892:	f10a 0088 	add.w	r0, sl, #136	; 0x88
}
 8024896:	b017      	add	sp, #92	; 0x5c
 8024898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CoreTimer_OnSetEnabled( &_this->cursorHoldTimer, 0 );
 802489c:	f7ff be96 	b.w	80245cc <CoreTimer_OnSetEnabled>
 80248a0:	08037b30 	.word	0x08037b30
 80248a4:	08037b6c 	.word	0x08037b6c

080248a8 <CoreRoot_DriveMultiTouchHitting>:
{
 80248a8:	b082      	sub	sp, #8
 80248aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248ae:	b09f      	sub	sp, #124	; 0x7c
  if (( aFinger < 0 ) || ( aFinger > 9 ))
 80248b0:	2a09      	cmp	r2, #9
{
 80248b2:	4604      	mov	r4, r0
 80248b4:	9329      	str	r3, [sp, #164]	; 0xa4
  if (( aFinger < 0 ) || ( aFinger > 9 ))
 80248b6:	d831      	bhi.n	802491c <CoreRoot_DriveMultiTouchHitting+0x74>
  ticksCount = _this->currentEventTimestamp;
 80248b8:	f8d0 90b8 	ldr.w	r9, [r0, #184]	; 0xb8
  if ( ticksCount == 0 )
 80248bc:	4615      	mov	r5, r2
 80248be:	4688      	mov	r8, r1
 80248c0:	f1b9 0f00 	cmp.w	r9, #0
 80248c4:	d032      	beq.n	802492c <CoreRoot_DriveMultiTouchHitting+0x84>
 80248c6:	46ca      	mov	sl, r9
  CoreRoot_DriveMultiTouchMovement( _this, aFinger, aPos );
 80248c8:	af29      	add	r7, sp, #164	; 0xa4
 80248ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80248ce:	4629      	mov	r1, r5
  aPos = _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )];
 80248d0:	f105 0658 	add.w	r6, r5, #88	; 0x58
  CoreRoot_DriveMultiTouchMovement( _this, aFinger, aPos );
 80248d4:	4620      	mov	r0, r4
 80248d6:	9708      	str	r7, [sp, #32]
 80248d8:	f7fe f8b6 	bl	8022a48 <CoreRoot_DriveMultiTouchMovement>
  aPos = _this->cursorLastPos[ EwCheckIndex( aFinger, 10 )];
 80248dc:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80248e0:	00f6      	lsls	r6, r6, #3
 80248e2:	1d33      	adds	r3, r6, #4
 80248e4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
 80248e8:	f854 b003 	ldr.w	fp, [r4, r3]
 80248ec:	4423      	add	r3, r4
 80248ee:	e887 0003 	stmia.w	r7, {r0, r1}
 80248f2:	6859      	ldr	r1, [r3, #4]
 80248f4:	9107      	str	r1, [sp, #28]
  _this->currentEventTimestamp = savedCurrentEventTimestamp;
 80248f6:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  if ( aDown )
 80248fa:	f1b8 0f00 	cmp.w	r8, #0
 80248fe:	d01b      	beq.n	8024938 <CoreRoot_DriveMultiTouchHitting+0x90>
    _this->cursorFirstPos[ EwCheckIndex( aFinger, 10 )] = aPos;
 8024900:	f106 0354 	add.w	r3, r6, #84	; 0x54
 8024904:	18e2      	adds	r2, r4, r3
 8024906:	f844 b003 	str.w	fp, [r4, r3]
 802490a:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
 802490e:	6051      	str	r1, [r2, #4]
  if ( aDown && ( _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] == 0 ))
 8024910:	f8da 805c 	ldr.w	r8, [sl, #92]	; 0x5c
 8024914:	f1b8 0f00 	cmp.w	r8, #0
 8024918:	f000 80cd 	beq.w	8024ab6 <CoreRoot_DriveMultiTouchHitting+0x20e>
    _this->currentEventTimestamp = 0;
 802491c:	2000      	movs	r0, #0
 802491e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
}
 8024922:	b01f      	add	sp, #124	; 0x7c
 8024924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024928:	b002      	add	sp, #8
 802492a:	4770      	bx	lr
    ticksCount = (XUInt32)EwGetTicks();
 802492c:	f004 ff46 	bl	80297bc <EwGetTicks>
 8024930:	f8d4 a0b8 	ldr.w	sl, [r4, #184]	; 0xb8
 8024934:	4681      	mov	r9, r0
 8024936:	e7c7      	b.n	80248c8 <CoreRoot_DriveMultiTouchHitting+0x20>
    return aIndex;
 8024938:	eb04 0985 	add.w	r9, r4, r5, lsl #2
  if ( !aDown && ( _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] != 0 ))
 802493c:	f8d9 805c 	ldr.w	r8, [r9, #92]	; 0x5c
 8024940:	f1b8 0f00 	cmp.w	r8, #0
 8024944:	d0ea      	beq.n	802491c <CoreRoot_DriveMultiTouchHitting+0x74>
    CoreGroup grp = _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )]->Owner;
 8024946:	f8d8 7018 	ldr.w	r7, [r8, #24]
    while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 802494a:	b1d7      	cbz	r7, 8024982 <CoreRoot_DriveMultiTouchHitting+0xda>
 802494c:	42bc      	cmp	r4, r7
    XPoint pos = aPos;
 802494e:	9b07      	ldr	r3, [sp, #28]
 8024950:	465a      	mov	r2, fp
    while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8024952:	d01b      	beq.n	802498c <CoreRoot_DriveMultiTouchHitting+0xe4>
 8024954:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8024958:	e002      	b.n	8024960 <CoreRoot_DriveMultiTouchHitting+0xb8>
 802495a:	42bc      	cmp	r4, r7
 802495c:	f000 81bf 	beq.w	8024cde <CoreRoot_DriveMultiTouchHitting+0x436>
      pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8024960:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8024964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024966:	9100      	str	r1, [sp, #0]
 8024968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802496a:	e898 0006 	ldmia.w	r8, {r1, r2}
 802496e:	4640      	mov	r0, r8
 8024970:	f7f5 fa5a 	bl	8019e28 <EwMovePointNeg>
      grp = grp->Super2.Owner;
 8024974:	69bf      	ldr	r7, [r7, #24]
      pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8024976:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 802497a:	2f00      	cmp	r7, #0
 802497c:	d1ed      	bne.n	802495a <CoreRoot_DriveMultiTouchHitting+0xb2>
 802497e:	f8d9 805c 	ldr.w	r8, [r9, #92]	; 0x5c
      pos = _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )];
 8024982:	f1a6 039c 	sub.w	r3, r6, #156	; 0x9c
 8024986:	18e1      	adds	r1, r4, r3
 8024988:	58e2      	ldr	r2, [r4, r3]
 802498a:	684b      	ldr	r3, [r1, #4]
    _this->cursorFinger = aFinger;
 802498c:	f8c4 5364 	str.w	r5, [r4, #868]	; 0x364
    _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] = 0;
 8024990:	2100      	movs	r1, #0
 8024992:	f8c9 105c 	str.w	r1, [r9, #92]	; 0x5c
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024996:	489b      	ldr	r0, [pc, #620]	; (8024c04 <CoreRoot_DriveMultiTouchHitting+0x35c>)
 8024998:	e9cd 3208 	strd	r3, r2, [sp, #32]
 802499c:	f7f4 fe5a 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80249a0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 80249a4:	4607      	mov	r7, r0
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80249a6:	2900      	cmp	r1, #0
 80249a8:	bf14      	ite	ne
 80249aa:	2001      	movne	r0, #1
 80249ac:	2000      	moveq	r0, #0
  if ( _this->currentEventTimestamp != 0 )
 80249ae:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 80249b2:	7538      	strb	r0, [r7, #20]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80249b4:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    event->Super1.Time = _this->currentEventTimestamp;
 80249b8:	bf18      	it	ne
 80249ba:	6139      	strne	r1, [r7, #16]
 80249bc:	4684      	mov	ip, r0
 80249be:	e9d0 016b 	ldrd	r0, r1, [r0, #428]	; 0x1ac
 80249c2:	9214      	str	r2, [sp, #80]	; 0x50
 80249c4:	aa16      	add	r2, sp, #88	; 0x58
 80249c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80249ca:	e9dc 019d 	ldrd	r0, r1, [ip, #628]	; 0x274
 80249ce:	9315      	str	r3, [sp, #84]	; 0x54
 80249d0:	ab1a      	add	r3, sp, #104	; 0x68
 80249d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80249d6:	3654      	adds	r6, #84	; 0x54
 80249d8:	19a3      	adds	r3, r4, r6
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80249da:	f8d9 c0bc 	ldr.w	ip, [r9, #188]	; 0xbc
 80249de:	59a0      	ldr	r0, [r4, r6]
 80249e0:	685b      	ldr	r3, [r3, #4]
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80249e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80249e4:	f8d9 6184 	ldr.w	r6, [r9, #388]	; 0x184
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80249e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80249ea:	9308      	str	r3, [sp, #32]
  _this->Down = 0;
 80249ec:	f04f 0a00 	mov.w	sl, #0
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 80249f0:	f10c 0c01 	add.w	ip, ip, #1
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80249f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80249f6:	900b      	str	r0, [sp, #44]	; 0x2c
  _this->Finger = aFinger;
 80249f8:	643d      	str	r5, [r7, #64]	; 0x40
  _this->Down = 0;
 80249fa:	f887 a044 	strb.w	sl, [r7, #68]	; 0x44
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 80249fe:	a80c      	add	r0, sp, #48	; 0x30
 8024a00:	9100      	str	r1, [sp, #0]
 8024a02:	9914      	ldr	r1, [sp, #80]	; 0x50
    CoreView__HandleEvent( tmp, ((CoreEvent)CoreCursorEvent_InitializeUp( CoreRoot_createCursorEvent( 
 8024a04:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8024a08:	9609      	str	r6, [sp, #36]	; 0x24
  _this->CurrentPos = EwMovePointPos( aCurrentPos, aHitOffset );
 8024a0a:	f7f5 fa1f 	bl	8019e4c <EwMovePointPos>
 8024a0e:	ab0c      	add	r3, sp, #48	; 0x30
 8024a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8024a18:	e882 0003 	stmia.w	r2, {r0, r1}
  _this->HittingPos = EwMovePointPos( aHittingPos, aHitOffset );
 8024a1c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8024a1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024a20:	a916      	add	r1, sp, #88	; 0x58
 8024a22:	c906      	ldmia	r1, {r1, r2}
 8024a24:	a80c      	add	r0, sp, #48	; 0x30
 8024a26:	9600      	str	r6, [sp, #0]
 8024a28:	f7f5 fa10 	bl	8019e4c <EwMovePointPos>
 8024a2c:	ab0c      	add	r3, sp, #48	; 0x30
 8024a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024a36:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024a3a:	9a08      	ldr	r2, [sp, #32]
  _this->AutoDeflected = aAutoDeflected;
 8024a3c:	f887 a045 	strb.w	sl, [r7, #69]	; 0x45
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024a40:	f8d8 3000 	ldr.w	r3, [r8]
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024a44:	61fa      	str	r2, [r7, #28]
  _this->StrikeCount = aStrikeCount;
 8024a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024a48:	980b      	ldr	r0, [sp, #44]	; 0x2c
  _this->HoldPeriod = aHoldPeriod;
 8024a4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  _this->StrikeCount = aStrikeCount;
 8024a4c:	62ba      	str	r2, [r7, #40]	; 0x28
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024a4e:	9a07      	ldr	r2, [sp, #28]
 8024a50:	627a      	str	r2, [r7, #36]	; 0x24
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  _this->GlobalHittingPos = aGlobalHittingPos;
 8024a54:	61b8      	str	r0, [r7, #24]
  _this->HoldPeriod = aHoldPeriod;
 8024a56:	62fe      	str	r6, [r7, #44]	; 0x2c
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024a58:	4639      	mov	r1, r7
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024a5a:	f8c7 b020 	str.w	fp, [r7, #32]
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024a5e:	4640      	mov	r0, r8
 8024a60:	4798      	blx	r3
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8024a62:	4651      	mov	r1, sl
 8024a64:	4868      	ldr	r0, [pc, #416]	; (8024c08 <CoreRoot_DriveMultiTouchHitting+0x360>)
 8024a66:	f7f4 fdf5 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024a6a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8024a6e:	4553      	cmp	r3, sl
    event->Super1.Time = _this->currentEventTimestamp;
 8024a70:	bf18      	it	ne
 8024a72:	6103      	strne	r3, [r0, #16]
    CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8024a74:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
  _this->Down = 0;
 8024a78:	f04f 0600 	mov.w	r6, #0
 8024a7c:	8586      	strh	r6, [r0, #44]	; 0x2c
    CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeUp( 
 8024a7e:	f103 0301 	add.w	r3, r3, #1
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024a82:	bf14      	ite	ne
 8024a84:	2201      	movne	r2, #1
 8024a86:	4652      	moveq	r2, sl
  _this->StrikeCount = aStrikeCount;
 8024a88:	6243      	str	r3, [r0, #36]	; 0x24
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8024a8a:	6823      	ldr	r3, [r4, #0]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024a8c:	7502      	strb	r2, [r0, #20]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024a8e:	9a07      	ldr	r2, [sp, #28]
  _this->Finger = aFinger;
 8024a90:	6285      	str	r5, [r0, #40]	; 0x28
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8024a92:	4601      	mov	r1, r0
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024a94:	f8c0 b01c 	str.w	fp, [r0, #28]
 8024a98:	6202      	str	r2, [r0, #32]
  _this->Target = aTarget;
 8024a9a:	f8c0 8018 	str.w	r8, [r0, #24]
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8024a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024aa0:	2218      	movs	r2, #24
 8024aa2:	4620      	mov	r0, r4
 8024aa4:	4798      	blx	r3
    return 1;
 8024aa6:	2001      	movs	r0, #1
    _this->currentEventTimestamp = 0;
 8024aa8:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
}
 8024aac:	b01f      	add	sp, #124	; 0x7c
 8024aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ab2:	b002      	add	sp, #8
 8024ab4:	4770      	bx	lr
    if ( EwIsPointInRect( _this->cursorSequelArea[ EwCheckIndex( aFinger, 10 )], 
 8024ab6:	9b08      	ldr	r3, [sp, #32]
 8024ab8:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8024abc:	912a      	str	r1, [sp, #168]	; 0xa8
 8024abe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024ac2:	f105 030e 	add.w	r3, r5, #14
 8024ac6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8024aca:	461f      	mov	r7, r3
 8024acc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8024ad0:	3304      	adds	r3, #4
 8024ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024ad4:	f7f5 fa43 	bl	8019f5e <EwIsPointInRect>
 8024ad8:	b148      	cbz	r0, 8024aee <CoreRoot_DriveMultiTouchHitting+0x246>
        aPos ) && (( ticksCount - _this->cursorHittingTime[ EwCheckIndex( aFinger, 
 8024ada:	f8da 31fc 	ldr.w	r3, [sl, #508]	; 0x1fc
 8024ade:	eba9 0303 	sub.w	r3, r9, r3
 8024ae2:	2bfa      	cmp	r3, #250	; 0xfa
      EwCheckIndex( aFinger, 10 )] + 1;
 8024ae4:	bf96      	itet	ls
 8024ae6:	f8da 00bc 	ldrls.w	r0, [sl, #188]	; 0xbc
      _this->cursorSequelCounter[ EwCheckIndex( aFinger, 10 )] = 0;
 8024aea:	4640      	movhi	r0, r8
      EwCheckIndex( aFinger, 10 )] + 1;
 8024aec:	3001      	addls	r0, #1
    _this->cursorSequelArea[ EwCheckIndex( aFinger, 10 )] = EwMoveRectPos( _Const000E, 
 8024aee:	9a08      	ldr	r2, [sp, #32]
 8024af0:	4b46      	ldr	r3, [pc, #280]	; (8024c0c <CoreRoot_DriveMultiTouchHitting+0x364>)
 8024af2:	f8ca 00bc 	str.w	r0, [sl, #188]	; 0xbc
 8024af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024afa:	68da      	ldr	r2, [r3, #12]
 8024afc:	9209      	str	r2, [sp, #36]	; 0x24
 8024afe:	aa01      	add	r2, sp, #4
 8024b00:	920a      	str	r2, [sp, #40]	; 0x28
 8024b02:	e882 0003 	stmia.w	r2, {r0, r1}
 8024b06:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b0c:	9100      	str	r1, [sp, #0]
 8024b0e:	4640      	mov	r0, r8
 8024b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024b12:	f7f5 fb40 	bl	801a196 <EwMoveRectPos>
 8024b16:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8024b1a:	eb04 1c07 	add.w	ip, r4, r7, lsl #4
 8024b1e:	f10c 0c04 	add.w	ip, ip, #4
 8024b22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hit = CoreView__CursorHitTest( _this, EwMoveRectPos( _Const000E, aPos ), aFinger, 
 8024b26:	9b08      	ldr	r3, [sp, #32]
 8024b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    _this->cursorHittingTime[ EwCheckIndex( aFinger, 10 )] = ticksCount;
 8024b2a:	f8ca 91fc 	str.w	r9, [sl, #508]	; 0x1fc
    hit = CoreView__CursorHitTest( _this, EwMoveRectPos( _Const000E, aPos ), aFinger, 
 8024b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024b32:	e882 0003 	stmia.w	r2, {r0, r1}
 8024b36:	4b35      	ldr	r3, [pc, #212]	; (8024c0c <CoreRoot_DriveMultiTouchHitting+0x364>)
 8024b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b3a:	9100      	str	r1, [sp, #0]
 8024b3c:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8024b40:	4640      	mov	r0, r8
 8024b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024b44:	f7f5 fb27 	bl	801a196 <EwMoveRectPos>
    return aIndex;
 8024b48:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8024b4c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8024b50:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
  return ((CoreView)_this)->_.VMT->CursorHitTest((CoreView)_this, aArea, aFinger
 8024b54:	f04f 0800 	mov.w	r8, #0
    hit = CoreView__CursorHitTest( _this, EwMoveRectPos( _Const000E, aPos ), aFinger, 
 8024b58:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
  return ((CoreView)_this)->_.VMT->CursorHitTest((CoreView)_this, aArea, aFinger
 8024b5c:	6822      	ldr	r2, [r4, #0]
 8024b5e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8024b60:	9501      	str	r5, [sp, #4]
 8024b62:	e9cd 8803 	strd	r8, r8, [sp, #12]
    hit = CoreView__CursorHitTest( _this, EwMoveRectPos( _Const000E, aPos ), aFinger, 
 8024b66:	3301      	adds	r3, #1
  return ((CoreView)_this)->_.VMT->CursorHitTest((CoreView)_this, aArea, aFinger
 8024b68:	9100      	str	r1, [sp, #0]
 8024b6a:	9302      	str	r3, [sp, #8]
 8024b6c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8024b6e:	4620      	mov	r0, r4
 8024b70:	461f      	mov	r7, r3
 8024b72:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8024b76:	47b8      	blx	r7
    if ( hit != 0 )
 8024b78:	2800      	cmp	r0, #0
 8024b7a:	f000 80b3 	beq.w	8024ce4 <CoreRoot_DriveMultiTouchHitting+0x43c>
  CoreCursorGrabEvent event = EwNewObject( CoreCursorGrabEvent, 0 );
 8024b7e:	4641      	mov	r1, r8
 8024b80:	9009      	str	r0, [sp, #36]	; 0x24
 8024b82:	4821      	ldr	r0, [pc, #132]	; (8024c08 <CoreRoot_DriveMultiTouchHitting+0x360>)
 8024b84:	f7f4 fd66 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024b88:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
  if ( _this->currentEventTimestamp != 0 )
 8024b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
      CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 8024b8e:	9309      	str	r3, [sp, #36]	; 0x24
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024b90:	4542      	cmp	r2, r8
 8024b92:	bf0c      	ite	eq
 8024b94:	4641      	moveq	r1, r8
 8024b96:	2101      	movne	r1, #1
  _this->Down = 1;
 8024b98:	f04f 0c01 	mov.w	ip, #1
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024b9c:	7501      	strb	r1, [r0, #20]
    event->Super1.Time = _this->currentEventTimestamp;
 8024b9e:	bf18      	it	ne
 8024ba0:	6102      	strne	r2, [r0, #16]
      CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 8024ba2:	6919      	ldr	r1, [r3, #16]
 8024ba4:	f8da 20bc 	ldr.w	r2, [sl, #188]	; 0xbc
  _this->Down = 1;
 8024ba8:	f8a0 c02c 	strh.w	ip, [r0, #44]	; 0x2c
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8024bac:	f8d4 c000 	ldr.w	ip, [r4]
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024bb0:	9b07      	ldr	r3, [sp, #28]
  _this->Target = aTarget;
 8024bb2:	6181      	str	r1, [r0, #24]
      CoreGroup__BroadcastEvent( _this, ((CoreEvent)CoreCursorGrabEvent_InitializeDown( 
 8024bb4:	3201      	adds	r2, #1
  _this->Finger = aFinger;
 8024bb6:	e9c0 2509 	strd	r2, r5, [r0, #36]	; 0x24
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024bba:	6203      	str	r3, [r0, #32]
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8024bbc:	4601      	mov	r1, r0
 8024bbe:	f8dc 806c 	ldr.w	r8, [ip, #108]	; 0x6c
  _this->GlobalCurrentPos = aGlobalCurrentPos;
 8024bc2:	f8c0 b01c 	str.w	fp, [r0, #28]
  return ((CoreGroup)_this)->_.VMT->BroadcastEvent((CoreGroup)_this, aEvent, aFilter );
 8024bc6:	2218      	movs	r2, #24
 8024bc8:	4620      	mov	r0, r4
 8024bca:	47c0      	blx	r8
      _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] = hit->View;
 8024bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bce:	6919      	ldr	r1, [r3, #16]
 8024bd0:	f8ca 105c 	str.w	r1, [sl, #92]	; 0x5c
    grp = hit->View->Owner;
 8024bd4:	f8d1 8018 	ldr.w	r8, [r1, #24]
      _this->cursorHitOffset[ EwCheckIndex( aFinger, 10 )] = hit->Offset;
 8024bd8:	f105 024e 	add.w	r2, r5, #78	; 0x4e
 8024bdc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8024be0:	4617      	mov	r7, r2
 8024be2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8024be6:	1d13      	adds	r3, r2, #4
 8024be8:	e883 0003 	stmia.w	r3, {r0, r1}
    while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8024bec:	f1b8 0f00 	cmp.w	r8, #0
 8024bf0:	d022      	beq.n	8024c38 <CoreRoot_DriveMultiTouchHitting+0x390>
 8024bf2:	4544      	cmp	r4, r8
 8024bf4:	d020      	beq.n	8024c38 <CoreRoot_DriveMultiTouchHitting+0x390>
 8024bf6:	4621      	mov	r1, r4
 8024bf8:	9a07      	ldr	r2, [sp, #28]
 8024bfa:	4644      	mov	r4, r8
 8024bfc:	465b      	mov	r3, fp
 8024bfe:	4688      	mov	r8, r1
 8024c00:	e008      	b.n	8024c14 <CoreRoot_DriveMultiTouchHitting+0x36c>
 8024c02:	bf00      	nop
 8024c04:	08037b30 	.word	0x08037b30
 8024c08:	08037b6c 	.word	0x08037b6c
 8024c0c:	08037b08 	.word	0x08037b08
 8024c10:	45a0      	cmp	r8, r4
 8024c12:	d00e      	beq.n	8024c32 <CoreRoot_DriveMultiTouchHitting+0x38a>
      pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8024c14:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
 8024c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8024c1a:	9100      	str	r1, [sp, #0]
 8024c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024c1e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8024c22:	4648      	mov	r0, r9
 8024c24:	f7f5 f900 	bl	8019e28 <EwMovePointNeg>
      grp = grp->Super2.Owner;
 8024c28:	69a4      	ldr	r4, [r4, #24]
      pos = EwMovePointNeg( pos, grp->Super1.Bounds.Point1 );
 8024c2a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	; 0x68
    while (( grp != 0 ) && ((CoreRoot)grp != _this ))
 8024c2e:	2c00      	cmp	r4, #0
 8024c30:	d1ee      	bne.n	8024c10 <CoreRoot_DriveMultiTouchHitting+0x368>
 8024c32:	469b      	mov	fp, r3
 8024c34:	9207      	str	r2, [sp, #28]
 8024c36:	4644      	mov	r4, r8
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c38:	f1a6 039c 	sub.w	r3, r6, #156	; 0x9c
    _this->cursorHittingPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c3c:	f5a6 728a 	sub.w	r2, r6, #276	; 0x114
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c40:	eb04 0c03 	add.w	ip, r4, r3
    _this->cursorHittingPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c44:	18a1      	adds	r1, r4, r2
 8024c46:	f844 b002 	str.w	fp, [r4, r2]
    _this->cursorHoldPeriod[ EwCheckIndex( aFinger, 10 )] = 0;
 8024c4a:	2600      	movs	r6, #0
    _this->cursorHittingPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c4c:	9a07      	ldr	r2, [sp, #28]
 8024c4e:	604a      	str	r2, [r1, #4]
    CoreTimer_OnSetEnabled( &_this->cursorHoldTimer, 1 );
 8024c50:	f104 0088 	add.w	r0, r4, #136	; 0x88
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c54:	f844 b003 	str.w	fp, [r4, r3]
    CoreTimer_OnSetEnabled( &_this->cursorHoldTimer, 1 );
 8024c58:	2101      	movs	r1, #1
    _this->cursorCurrentPos[ EwCheckIndex( aFinger, 10 )] = pos;
 8024c5a:	f8cc 2004 	str.w	r2, [ip, #4]
    _this->cursorHoldPeriod[ EwCheckIndex( aFinger, 10 )] = 0;
 8024c5e:	f8ca 6184 	str.w	r6, [sl, #388]	; 0x184
    CoreTimer_OnSetEnabled( &_this->cursorHoldTimer, 1 );
 8024c62:	f7ff fcb3 	bl	80245cc <CoreTimer_OnSetEnabled>
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024c66:	4631      	mov	r1, r6
    _this->cursorFinger = aFinger;
 8024c68:	f8c4 5364 	str.w	r5, [r4, #868]	; 0x364
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024c6c:	4822      	ldr	r0, [pc, #136]	; (8024cf8 <CoreRoot_DriveMultiTouchHitting+0x450>)
    CoreView__HandleEvent( _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )], 
 8024c6e:	f8da 605c 	ldr.w	r6, [sl, #92]	; 0x5c
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024c72:	f7f4 fcef 	bl	8019654 <EwNewObjectIndirect>
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024c76:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( _this ), 
 8024c7a:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024c7e:	2b00      	cmp	r3, #0
    event->Super1.Time = _this->currentEventTimestamp;
 8024c80:	bf18      	it	ne
 8024c82:	6103      	strne	r3, [r0, #16]
    ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( _this ), 
 8024c84:	9b08      	ldr	r3, [sp, #32]
  event->Super1.IsTimeExact = (XBool)( _this->currentEventTimestamp != 0 );
 8024c86:	bf14      	ite	ne
 8024c88:	2201      	movne	r2, #1
 8024c8a:	2200      	moveq	r2, #0
 8024c8c:	7502      	strb	r2, [r0, #20]
  CoreCursorEvent event = EwNewObject( CoreCursorEvent, 0 );
 8024c8e:	4684      	mov	ip, r0
    ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( _this ), 
 8024c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024c94:	ab04      	add	r3, sp, #16
 8024c96:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8024c9a:	f8da 70bc 	ldr.w	r7, [sl, #188]	; 0xbc
 8024c9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8024ca2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
 8024ca6:	9b07      	ldr	r3, [sp, #28]
 8024ca8:	931b      	str	r3, [sp, #108]	; 0x6c
 8024caa:	f107 0e01 	add.w	lr, r7, #1
 8024cae:	f04f 0800 	mov.w	r8, #0
 8024cb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8024cb8:	e899 000c 	ldmia.w	r9, {r2, r3}
 8024cbc:	e887 0003 	stmia.w	r7, {r0, r1}
 8024cc0:	f8cd e000 	str.w	lr, [sp]
 8024cc4:	4629      	mov	r1, r5
 8024cc6:	4660      	mov	r0, ip
 8024cc8:	f7fe f884 	bl	8022dd4 <CoreCursorEvent_InitializeDown>
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024ccc:	6833      	ldr	r3, [r6, #0]
    ((CoreEvent)CoreCursorEvent_InitializeDown( CoreRoot_createCursorEvent( _this ), 
 8024cce:	4601      	mov	r1, r0
  return ((CoreView)_this)->_.VMT->HandleEvent((CoreView)_this, aEvent );
 8024cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024cd2:	4630      	mov	r0, r6
 8024cd4:	4798      	blx	r3
    _this->currentEventTimestamp = 0;
 8024cd6:	f8c4 80b8 	str.w	r8, [r4, #184]	; 0xb8
    return 1;
 8024cda:	2001      	movs	r0, #1
 8024cdc:	e621      	b.n	8024922 <CoreRoot_DriveMultiTouchHitting+0x7a>
 8024cde:	f8d9 805c 	ldr.w	r8, [r9, #92]	; 0x5c
 8024ce2:	e653      	b.n	802498c <CoreRoot_DriveMultiTouchHitting+0xe4>
    return aIndex;
 8024ce4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
      _this->cursorTargetView[ EwCheckIndex( aFinger, 10 )] = 0;
 8024ce8:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
      _this->cursorHitOffset[ EwCheckIndex( aFinger, 10 )] = _Const0000;
 8024cec:	e9c5 009d 	strd	r0, r0, [r5, #628]	; 0x274
      _this->currentEventTimestamp = 0;
 8024cf0:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
      return 0;
 8024cf4:	e615      	b.n	8024922 <CoreRoot_DriveMultiTouchHitting+0x7a>
 8024cf6:	bf00      	nop
 8024cf8:	08037b30 	.word	0x08037b30

08024cfc <CoreRoot__DriveMultiTouchHitting>:
{
 8024cfc:	b082      	sub	sp, #8
 8024cfe:	b510      	push	{r4, lr}
 8024d00:	b082      	sub	sp, #8
  return CoreRoot_DriveMultiTouchHitting((CoreRoot)_this, aDown, aFinger, aPos );
 8024d02:	9c06      	ldr	r4, [sp, #24]
 8024d04:	9400      	str	r4, [sp, #0]
{
 8024d06:	9305      	str	r3, [sp, #20]
  return CoreRoot_DriveMultiTouchHitting((CoreRoot)_this, aDown, aFinger, aPos );
 8024d08:	f7ff fdce 	bl	80248a8 <CoreRoot_DriveMultiTouchHitting>
}
 8024d0c:	b002      	add	sp, #8
 8024d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d12:	b002      	add	sp, #8
 8024d14:	4770      	bx	lr
 8024d16:	bf00      	nop

08024d18 <CoreTimer_Trigger>:
{
 8024d18:	b510      	push	{r4, lr}
 8024d1a:	4604      	mov	r4, r0
  ticksCount = (XUInt32)EwGetTicks();
 8024d1c:	f004 fd4e 	bl	80297bc <EwGetTicks>
  if ( _this->Period == 0 )
 8024d20:	6a21      	ldr	r1, [r4, #32]
  _this->Time = CoreTimer_GetCurrentTime( _this );
 8024d22:	61e0      	str	r0, [r4, #28]
  if ( _this->Period == 0 )
 8024d24:	b131      	cbz	r1, 8024d34 <CoreTimer_Trigger+0x1c>
  EwSignal( _this->OnTrigger, ((XObject)_this ));
 8024d26:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8024d2a:	4622      	mov	r2, r4
}
 8024d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EwSignal( _this->OnTrigger, ((XObject)_this ));
 8024d30:	f7f6 ba73 	b.w	801b21a <EwSignal>
    CoreTimer_OnSetEnabled( _this, 0 );
 8024d34:	4620      	mov	r0, r4
 8024d36:	f7ff fc49 	bl	80245cc <CoreTimer_OnSetEnabled>
  EwSignal( _this->OnTrigger, ((XObject)_this ));
 8024d3a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8024d3e:	4622      	mov	r2, r4
}
 8024d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EwSignal( _this->OnTrigger, ((XObject)_this ));
 8024d44:	f7f6 ba69 	b.w	801b21a <EwSignal>

08024d48 <EffectsFader_IsFinished>:
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return 1;
}
 8024d48:	2001      	movs	r0, #1
 8024d4a:	4770      	bx	lr

08024d4c <EffectsFader_OnEnd>:
   evaluate the properties @UseCurrentState, @AssignFocus and @RestackTopmost. */
void EffectsFader_OnEnd( EffectsFader _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
}
 8024d4c:	4770      	bx	lr
 8024d4e:	bf00      	nop

08024d50 <EffectsVisibilityFader_IsFinished>:
   This method should therefore be overridden in derived classes to evaluate the 
   state of animation effects used inside the fader. */
XBool EffectsVisibilityFader_IsFinished( EffectsVisibilityFader _this )
{
  return _this->finished;
}
 8024d50:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8024d54:	4770      	bx	lr
 8024d56:	bf00      	nop

08024d58 <EffectsTransition_CreatePresentFader>:
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return 0;
}
 8024d58:	2000      	movs	r0, #0
 8024d5a:	4770      	bx	lr

08024d5c <EffectsTransition_CreateRestoreFader>:

/* Wrapper function for the virtual method : 'Effects::Transition.CreatePresentFader()' */
EffectsFader EffectsTransition__CreatePresentFader( void* _this )
{
  return ((EffectsTransition)_this)->_.VMT->CreatePresentFader((EffectsTransition)_this );
 8024d5c:	6803      	ldr	r3, [r0, #0]
 8024d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024d60:	4718      	bx	r3
 8024d62:	bf00      	nop

08024d64 <EffectsTransition_CreateOverlayFader>:
}

/* Wrapper function for the virtual method : 'Effects::Transition.CreateDismissFader()' */
EffectsFader EffectsTransition__CreateDismissFader( void* _this )
{
  return ((EffectsTransition)_this)->_.VMT->CreateDismissFader((EffectsTransition)_this );
 8024d64:	6803      	ldr	r3, [r0, #0]
 8024d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024d68:	4718      	bx	r3
 8024d6a:	bf00      	nop

08024d6c <EffectsShowHideTransition_CreateRestoreFader>:
   visible state) of a GUI component, which has been obscured (overlaid) by other 
   GUI components during the user navigates in the GUI system. The method has to 
   be overridden and implemented in derived classes. The actual implementation of 
   this method redirects the operation to the method @CreatePresentFader(). */
EffectsFader EffectsShowHideTransition_CreateRestoreFader( EffectsShowHideTransition _this )
{
 8024d6c:	b508      	push	{r3, lr}
  return ((EffectsTransition)_this)->_.VMT->CreatePresentFader((EffectsTransition)_this );
 8024d6e:	6803      	ldr	r3, [r0, #0]
 8024d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024d72:	4798      	blx	r3
  EffectsFader fader = EffectsTransition_CreateRestoreFader((EffectsTransition)_this );

  fader->RestackTopmost = 0;
 8024d74:	2100      	movs	r1, #0
  fader->Enabled = 1;
 8024d76:	2201      	movs	r2, #1
  fader->RestackTopmost = 0;
 8024d78:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
  fader->Enabled = 1;
 8024d7c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return fader;
}
 8024d80:	bd08      	pop	{r3, pc}
 8024d82:	bf00      	nop

08024d84 <EffectsFader__Init>:
{
 8024d84:	b510      	push	{r4, lr}
 8024d86:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8024d88:	f7f4 fc58 	bl	801963c <XObject__Init>
  _this->AssignFocus = 1;
 8024d8c:	f240 1201 	movw	r2, #257	; 0x101
  _this->RemoveIfHidden = 1;
 8024d90:	2301      	movs	r3, #1
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsFader );
 8024d92:	4905      	ldr	r1, [pc, #20]	; (8024da8 <EffectsFader__Init+0x24>)
  _this->AssignFocus = 1;
 8024d94:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
  _this->Visible = 1;
 8024d98:	87a2      	strh	r2, [r4, #60]	; 0x3c
  _this->RemoveIfHidden = 1;
 8024d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  _this->UseCurrentState = 1;
 8024d9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsFader );
 8024da2:	60e1      	str	r1, [r4, #12]
  _this->_.VMT = EW_CLASS( EffectsFader );
 8024da4:	6021      	str	r1, [r4, #0]
}
 8024da6:	bd10      	pop	{r4, pc}
 8024da8:	08038320 	.word	0x08038320

08024dac <EffectsVisibilityFader__Init>:
{
 8024dac:	b510      	push	{r4, lr}
 8024dae:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8024db0:	f7f4 fc44 	bl	801963c <XObject__Init>
  _this->AssignFocus = 1;
 8024db4:	f240 1101 	movw	r1, #257	; 0x101
  _this->RemoveIfHidden = 1;
 8024db8:	2201      	movs	r2, #1
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsVisibilityFader );
 8024dba:	4b05      	ldr	r3, [pc, #20]	; (8024dd0 <EffectsVisibilityFader__Init+0x24>)
  _this->AssignFocus = 1;
 8024dbc:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
  _this->Visible = 1;
 8024dc0:	87a1      	strh	r1, [r4, #60]	; 0x3c
  _this->RemoveIfHidden = 1;
 8024dc2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  _this->UseCurrentState = 1;
 8024dc6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsVisibilityFader );
 8024dca:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( EffectsVisibilityFader );
 8024dcc:	6023      	str	r3, [r4, #0]
}
 8024dce:	bd10      	pop	{r4, pc}
 8024dd0:	0803844c 	.word	0x0803844c

08024dd4 <EffectsTransition__Init>:
{
 8024dd4:	b510      	push	{r4, lr}
 8024dd6:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8024dd8:	f7f4 fc30 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsTransition );
 8024ddc:	4b01      	ldr	r3, [pc, #4]	; (8024de4 <EffectsTransition__Init+0x10>)
 8024dde:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( EffectsTransition );
 8024de0:	6023      	str	r3, [r4, #0]
}
 8024de2:	bd10      	pop	{r4, pc}
 8024de4:	08038400 	.word	0x08038400

08024de8 <EffectsShowHideTransition__Init>:
{
 8024de8:	b510      	push	{r4, lr}
 8024dea:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8024dec:	f7f4 fc26 	bl	801963c <XObject__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsShowHideTransition );
 8024df0:	4b01      	ldr	r3, [pc, #4]	; (8024df8 <EffectsShowHideTransition__Init+0x10>)
 8024df2:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( EffectsShowHideTransition );
 8024df4:	6023      	str	r3, [r4, #0]
}
 8024df6:	bd10      	pop	{r4, pc}
 8024df8:	080383b4 	.word	0x080383b4

08024dfc <EffectsFader__ReInit>:
  XObject__ReInit( &_this->_.Super );
 8024dfc:	f7f4 bc24 	b.w	8019648 <XObject__ReInit>

08024e00 <EffectsVisibilityFader__ReInit>:
 8024e00:	f7f4 bc22 	b.w	8019648 <XObject__ReInit>

08024e04 <EffectsTransition__ReInit>:
  XObject__ReInit( &_this->_.Super );
 8024e04:	f7f4 bc20 	b.w	8019648 <XObject__ReInit>

08024e08 <EffectsShowHideTransition__ReInit>:
 8024e08:	f7f4 bc1e 	b.w	8019648 <XObject__ReInit>

08024e0c <EffectsFader__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8024e0c:	4b01      	ldr	r3, [pc, #4]	; (8024e14 <EffectsFader__Done+0x8>)
 8024e0e:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 8024e10:	f7f4 bc1b 	b.w	801964a <XObject__Done>
 8024e14:	08036b2c 	.word	0x08036b2c

08024e18 <EffectsVisibilityFader__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8024e18:	4b01      	ldr	r3, [pc, #4]	; (8024e20 <EffectsVisibilityFader__Done+0x8>)
 8024e1a:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 8024e1c:	f7f4 bc15 	b.w	801964a <XObject__Done>
 8024e20:	08036b2c 	.word	0x08036b2c

08024e24 <EffectsTransition__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8024e24:	4b01      	ldr	r3, [pc, #4]	; (8024e2c <EffectsTransition__Done+0x8>)
 8024e26:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 8024e28:	f7f4 bc0f 	b.w	801964a <XObject__Done>
 8024e2c:	08036b2c 	.word	0x08036b2c

08024e30 <EffectsShowHideTransition__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8024e30:	4b01      	ldr	r3, [pc, #4]	; (8024e38 <EffectsShowHideTransition__Done+0x8>)
 8024e32:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 8024e34:	f7f4 bc09 	b.w	801964a <XObject__Done>
 8024e38:	08036b2c 	.word	0x08036b2c

08024e3c <EffectsVisibilityFader_OnStart>:
{
 8024e3c:	b570      	push	{r4, r5, r6, lr}
  if ( _this->Super1.Enabled )
 8024e3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8024e42:	b088      	sub	sp, #32
 8024e44:	4604      	mov	r4, r0
  if ( _this->Super1.Enabled )
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	d137      	bne.n	8024eba <EffectsVisibilityFader_OnStart+0x7e>
  if (( _this->Super1.Visible || _this->Super1.AddToOwner ) && ( _this->Super1.Group->Super2.Owner 
 8024e4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024e4c:	6a25      	ldr	r5, [r4, #32]
 8024e4e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8024e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8024e56:	b113      	cbz	r3, 8024e5e <EffectsVisibilityFader_OnStart+0x22>
 8024e58:	69ae      	ldr	r6, [r5, #24]
 8024e5a:	2e00      	cmp	r6, #0
 8024e5c:	d06c      	beq.n	8024f38 <EffectsVisibilityFader_OnStart+0xfc>
  if ( _this->Super1.Visible && _this->Super1.RestackTopmost )
 8024e5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8024e62:	b303      	cbz	r3, 8024ea6 <EffectsVisibilityFader_OnStart+0x6a>
 8024e64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	d14a      	bne.n	8024f02 <EffectsVisibilityFader_OnStart+0xc6>
  if ( _this->Super1.Visible && _this->Super1.AssignFocus )
 8024e6c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8024e70:	2b00      	cmp	r3, #0
 8024e72:	d153      	bne.n	8024f1c <EffectsVisibilityFader_OnStart+0xe0>
  if ( _this->Super1.Visible && !_this->Super1.UseCurrentState )
 8024e74:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8024e78:	b323      	cbz	r3, 8024ec4 <EffectsVisibilityFader_OnStart+0x88>
    CoreGroup__OnSetOpacity( _this->Super1.Group, 255 );
 8024e7a:	4628      	mov	r0, r5
 8024e7c:	21ff      	movs	r1, #255	; 0xff
 8024e7e:	f7fd f8dd 	bl	802203c <CoreGroup__OnSetOpacity>
    CoreGroup_OnSetVisible( _this->Super1.Group, 1 );
 8024e82:	6a20      	ldr	r0, [r4, #32]
 8024e84:	2101      	movs	r1, #1
 8024e86:	f7fd f8dd 	bl	8022044 <CoreGroup_OnSetVisible>
  if ( !_this->Super1.Visible && ( _this->Super1.Owner->Focus == (CoreView)_this->Super1.Group ))
 8024e8a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8024e8e:	b14b      	cbz	r3, 8024ea4 <EffectsVisibilityFader_OnStart+0x68>
  if ( _this->task != 0 )
 8024e90:	6920      	ldr	r0, [r4, #16]
  _this->finished = 1;
 8024e92:	2301      	movs	r3, #1
 8024e94:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  if ( _this->task != 0 )
 8024e98:	b168      	cbz	r0, 8024eb6 <EffectsVisibilityFader_OnStart+0x7a>
}
 8024e9a:	b008      	add	sp, #32
 8024e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    CoreTask__Complete( _this->task );
 8024ea0:	f7ff bb08 	b.w	80244b4 <CoreTask__Complete>
 8024ea4:	6a25      	ldr	r5, [r4, #32]
  if ( !_this->Super1.Visible && ( _this->Super1.Owner->Focus == (CoreView)_this->Super1.Group ))
 8024ea6:	69e0      	ldr	r0, [r4, #28]
 8024ea8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8024eaa:	42ab      	cmp	r3, r5
 8024eac:	d1f0      	bne.n	8024e90 <EffectsVisibilityFader_OnStart+0x54>
    CoreGroup__OnSetFocus( _this->Super1.Owner, 0 );
 8024eae:	2100      	movs	r1, #0
 8024eb0:	f7fd f8b6 	bl	8022020 <CoreGroup__OnSetFocus>
 8024eb4:	e7ec      	b.n	8024e90 <EffectsVisibilityFader_OnStart+0x54>
}
 8024eb6:	b008      	add	sp, #32
 8024eb8:	bd70      	pop	{r4, r5, r6, pc}
    CoreGroup_OnSetEnabled( _this->Super1.Group, 1 );
 8024eba:	6a00      	ldr	r0, [r0, #32]
 8024ebc:	2101      	movs	r1, #1
 8024ebe:	f7fd f8b3 	bl	8022028 <CoreGroup_OnSetEnabled>
 8024ec2:	e7c2      	b.n	8024e4a <EffectsVisibilityFader_OnStart+0xe>
    CoreRectView__OnSetBounds( _this->Super1.Group, EwSetRectOrigin( _this->Super1.Group->Super1.Bounds, 
 8024ec4:	e9d4 0111 	ldrd	r0, r1, [r4, #68]	; 0x44
 8024ec8:	ab01      	add	r3, sp, #4
 8024eca:	e883 0003 	stmia.w	r3, {r0, r1}
 8024ece:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8024ed0:	9300      	str	r3, [sp, #0]
 8024ed2:	ae04      	add	r6, sp, #16
 8024ed4:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8024ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024eda:	4630      	mov	r0, r6
 8024edc:	f7f5 f9de 	bl	801a29c <EwSetRectOrigin>
 8024ee0:	9b07      	ldr	r3, [sp, #28]
 8024ee2:	9300      	str	r3, [sp, #0]
 8024ee4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8024ee8:	4628      	mov	r0, r5
 8024eea:	f7fc fe35 	bl	8021b58 <CoreRectView__OnSetBounds>
  if ( _this->Super1.Visible )
 8024eee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8024ef2:	6a25      	ldr	r5, [r4, #32]
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	d1c0      	bne.n	8024e7a <EffectsVisibilityFader_OnStart+0x3e>
  if ( !_this->Super1.Visible && ( _this->Super1.Owner->Focus == (CoreView)_this->Super1.Group ))
 8024ef8:	69e0      	ldr	r0, [r4, #28]
 8024efa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8024efc:	42ab      	cmp	r3, r5
 8024efe:	d1c7      	bne.n	8024e90 <EffectsVisibilityFader_OnStart+0x54>
 8024f00:	e7d5      	b.n	8024eae <EffectsVisibilityFader_OnStart+0x72>
    CoreGroup_RestackTop( _this->Super1.Group->Super2.Owner, ((CoreView)_this->Super1.Group ));
 8024f02:	69a8      	ldr	r0, [r5, #24]
 8024f04:	4629      	mov	r1, r5
 8024f06:	f7fd f8ff 	bl	8022108 <CoreGroup_RestackTop>
  if ( _this->Super1.Visible && _this->Super1.AssignFocus )
 8024f0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8024f0e:	6a25      	ldr	r5, [r4, #32]
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	d0c8      	beq.n	8024ea6 <EffectsVisibilityFader_OnStart+0x6a>
 8024f14:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d0ab      	beq.n	8024e74 <EffectsVisibilityFader_OnStart+0x38>
    CoreGroup__OnSetFocus( _this->Super1.Group->Super2.Owner, ((CoreView)_this->Super1.Group ));
 8024f1c:	69a8      	ldr	r0, [r5, #24]
 8024f1e:	4629      	mov	r1, r5
 8024f20:	f7fd f87e 	bl	8022020 <CoreGroup__OnSetFocus>
  if ( _this->Super1.Visible && !_this->Super1.UseCurrentState )
 8024f24:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8024f28:	6a25      	ldr	r5, [r4, #32]
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	d0bb      	beq.n	8024ea6 <EffectsVisibilityFader_OnStart+0x6a>
 8024f2e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	d1a1      	bne.n	8024e7a <EffectsVisibilityFader_OnStart+0x3e>
 8024f36:	e7c5      	b.n	8024ec4 <EffectsVisibilityFader_OnStart+0x88>
    CoreGroup_OnSetVisible( _this->Super1.Group, 0 );
 8024f38:	4628      	mov	r0, r5
 8024f3a:	4631      	mov	r1, r6
 8024f3c:	f7fd f882 	bl	8022044 <CoreGroup_OnSetVisible>
    CoreGroup_Add( _this->Super1.Owner, ((CoreView)_this->Super1.Group ), 0 );
 8024f40:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8024f44:	4632      	mov	r2, r6
 8024f46:	f7fd f9fb 	bl	8022340 <CoreGroup_Add>
 8024f4a:	6a25      	ldr	r5, [r4, #32]
 8024f4c:	e787      	b.n	8024e5e <EffectsVisibilityFader_OnStart+0x22>
 8024f4e:	bf00      	nop

08024f50 <EffectsShowHideTransition_CreateDismissFader>:
{
 8024f50:	b508      	push	{r3, lr}
  fader = EwNewObject( EffectsVisibilityFader, 0 );
 8024f52:	2100      	movs	r1, #0
 8024f54:	4804      	ldr	r0, [pc, #16]	; (8024f68 <EffectsShowHideTransition_CreateDismissFader+0x18>)
 8024f56:	f7f4 fb7d 	bl	8019654 <EwNewObjectIndirect>
  fader->Super1.Visible = 0;
 8024f5a:	2100      	movs	r1, #0
  fader->Super1.RemoveIfHidden = 1;
 8024f5c:	2201      	movs	r2, #1
  fader->Super1.Visible = 0;
 8024f5e:	8781      	strh	r1, [r0, #60]	; 0x3c
  fader->Super1.RemoveIfHidden = 1;
 8024f60:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
}
 8024f64:	bd08      	pop	{r3, pc}
 8024f66:	bf00      	nop
 8024f68:	0803844c 	.word	0x0803844c

08024f6c <EffectsShowHideTransition_CreateOverlayFader>:
   to the caller. Typically, the created fader is used to temporarily hide (to overlay) 
   a GUI component when the user navigates a deeper level in the GUI system. The 
   method has to be overridden and implemented in derived classes. The actual implementation 
   of this method redirects the operation to the method @CreateDismissFader(). */
EffectsFader EffectsShowHideTransition_CreateOverlayFader( EffectsShowHideTransition _this )
{
 8024f6c:	b510      	push	{r4, lr}
  EffectsVisibilityFader fader;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  fader = EwNewObject( EffectsVisibilityFader, 0 );
 8024f6e:	2100      	movs	r1, #0
 8024f70:	4806      	ldr	r0, [pc, #24]	; (8024f8c <EffectsShowHideTransition_CreateOverlayFader+0x20>)
 8024f72:	f7f4 fb6f 	bl	8019654 <EwNewObjectIndirect>
  fader->Super1.Visible = 0;
 8024f76:	f44f 7480 	mov.w	r4, #256	; 0x100
  fader->Super1.Enabled = 1;
  fader->Super1.AddToOwner = 1;
 8024f7a:	2101      	movs	r1, #1
  fader->Super1.RemoveIfHidden = 0;
 8024f7c:	2200      	movs	r2, #0
  fader->Super1.Visible = 0;
 8024f7e:	8784      	strh	r4, [r0, #60]	; 0x3c
  fader->Super1.AddToOwner = 1;
 8024f80:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
  fader->Super1.RemoveIfHidden = 0;
 8024f84:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  return ((EffectsFader)fader );
}
 8024f88:	bd10      	pop	{r4, pc}
 8024f8a:	bf00      	nop
 8024f8c:	0803844c 	.word	0x0803844c

08024f90 <EffectsShowHideTransition_CreatePresentFader>:
{
 8024f90:	b570      	push	{r4, r5, r6, lr}
  EffectsVisibilityFader fader = EwNewObject( EffectsVisibilityFader, 0 );
 8024f92:	2100      	movs	r1, #0
{
 8024f94:	b082      	sub	sp, #8
 8024f96:	4606      	mov	r6, r0
  EffectsVisibilityFader fader = EwNewObject( EffectsVisibilityFader, 0 );
 8024f98:	480e      	ldr	r0, [pc, #56]	; (8024fd4 <EffectsShowHideTransition_CreatePresentFader+0x44>)
 8024f9a:	f7f4 fb5b 	bl	8019654 <EwNewObjectIndirect>
 8024f9e:	4604      	mov	r4, r0
  fader->Super1.UseCurrentState = 0;
 8024fa0:	2300      	movs	r3, #0
  fader->Super1.OnInitialize = EwNewSlot( _this, EffectsShowHideTransition_onInitializeIn );
 8024fa2:	466d      	mov	r5, sp
  fader->Super1.AssignFocus = 0;
 8024fa4:	f44f 7080 	mov.w	r0, #256	; 0x100
  fader->Super1.Visible = 1;
 8024fa8:	f240 1201 	movw	r2, #257	; 0x101
  fader->Super1.OnInitialize = EwNewSlot( _this, EffectsShowHideTransition_onInitializeIn );
 8024fac:	4631      	mov	r1, r6
  fader->Super1.AssignFocus = 0;
 8024fae:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  fader->Super1.Visible = 1;
 8024fb2:	87a2      	strh	r2, [r4, #60]	; 0x3c
  fader->Super1.UseCurrentState = 0;
 8024fb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  fader->Super1.OnInitialize = EwNewSlot( _this, EffectsShowHideTransition_onInitializeIn );
 8024fb8:	4628      	mov	r0, r5
 8024fba:	4a07      	ldr	r2, [pc, #28]	; (8024fd8 <EffectsShowHideTransition_CreatePresentFader+0x48>)
 8024fbc:	f7f6 f90a 	bl	801b1d4 <EwNewSlot>
 8024fc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024fc4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8024fc8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8024fcc:	4620      	mov	r0, r4
 8024fce:	b002      	add	sp, #8
 8024fd0:	bd70      	pop	{r4, r5, r6, pc}
 8024fd2:	bf00      	nop
 8024fd4:	0803844c 	.word	0x0803844c
 8024fd8:	08024fdd 	.word	0x08024fdd

08024fdc <EffectsShowHideTransition_onInitializeIn>:

/* 'C' function for method : 'Effects::ShowHideTransition.onInitializeIn()' */
void EffectsShowHideTransition_onInitializeIn( EffectsShowHideTransition _this, 
  XObject sender )
{
 8024fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  XPoint pos;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  fader = EwCastObject( sender, EffectsVisibilityFader );
 8024fde:	4608      	mov	r0, r1
{
 8024fe0:	b089      	sub	sp, #36	; 0x24
  fader = EwCastObject( sender, EffectsVisibilityFader );
 8024fe2:	491a      	ldr	r1, [pc, #104]	; (802504c <EffectsShowHideTransition_onInitializeIn+0x70>)
 8024fe4:	f7f4 fc42 	bl	801986c <EwCastObject>
  bounds = EwGetRectORect( fader->Super1.Owner->Super1.Bounds );
 8024fe8:	69c3      	ldr	r3, [r0, #28]
 8024fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8024fec:	9200      	str	r2, [sp, #0]
  fader = EwCastObject( sender, EffectsVisibilityFader );
 8024fee:	4605      	mov	r5, r0
  bounds = EwGetRectORect( fader->Super1.Owner->Super1.Bounds );
 8024ff0:	ac04      	add	r4, sp, #16
 8024ff2:	3328      	adds	r3, #40	; 0x28
 8024ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024ff6:	4620      	mov	r0, r4
 8024ff8:	f7f5 f910 	bl	801a21c <EwGetRectORect>
  size = EwGetRectSize( fader->Super1.Group->Super1.Bounds );
 8024ffc:	6a2b      	ldr	r3, [r5, #32]
  bounds = EwGetRectORect( fader->Super1.Owner->Super1.Bounds );
 8024ffe:	9f04      	ldr	r7, [sp, #16]
  size = EwGetRectSize( fader->Super1.Group->Super1.Bounds );
 8025000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025002:	9200      	str	r2, [sp, #0]
 8025004:	3328      	adds	r3, #40	; 0x28
 8025006:	a802      	add	r0, sp, #8
 8025008:	cb0e      	ldmia	r3, {r1, r2, r3}
  bounds = EwGetRectORect( fader->Super1.Owner->Super1.Bounds );
 802500a:	9e05      	ldr	r6, [sp, #20]
  size = EwGetRectSize( fader->Super1.Group->Super1.Bounds );
 802500c:	f7f5 f8f7 	bl	801a1fe <EwGetRectSize>
  pos = bounds.Point1;
  pos.X = (( bounds.Point1.X + ( EwGetRectW( bounds ) / 2 )) - ( size.X / 2 ));
 8025010:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025014:	f7f5 f8de 	bl	801a1d4 <EwGetRectW>
 8025018:	9b02      	ldr	r3, [sp, #8]
 802501a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802501e:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8025022:	eb07 0760 	add.w	r7, r7, r0, asr #1
  pos.Y = (( bounds.Point1.Y + ( EwGetRectH( bounds ) / 2 )) - ( size.Y / 2 ));
 8025026:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  pos.X = (( bounds.Point1.X + ( EwGetRectW( bounds ) / 2 )) - ( size.X / 2 ));
 802502a:	eba7 076c 	sub.w	r7, r7, ip, asr #1
  pos.Y = (( bounds.Point1.Y + ( EwGetRectH( bounds ) / 2 )) - ( size.Y / 2 ));
 802502e:	f7f5 f8c9 	bl	801a1c4 <EwGetRectH>
 8025032:	9b03      	ldr	r3, [sp, #12]
  fader->Position = pos;
 8025034:	646f      	str	r7, [r5, #68]	; 0x44
  pos.Y = (( bounds.Point1.Y + ( EwGetRectH( bounds ) / 2 )) - ( size.Y / 2 ));
 8025036:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802503a:	eb06 0660 	add.w	r6, r6, r0, asr #1
 802503e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8025042:	eba6 0663 	sub.w	r6, r6, r3, asr #1
  fader->Position = pos;
 8025046:	64ae      	str	r6, [r5, #72]	; 0x48
}
 8025048:	b009      	add	sp, #36	; 0x24
 802504a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802504c:	0803844c 	.word	0x0803844c

08025050 <EffectsEffectTimerClass__Init>:
  EffectsShowHideTransition_CreateOverlayFader,
EW_END_OF_CLASS( EffectsShowHideTransition )

/* Initializer for the class 'Effects::EffectTimerClass' */
void EffectsEffectTimerClass__Init( EffectsEffectTimerClass _this, XObject aLink, XHandle aArg )
{
 8025050:	b510      	push	{r4, lr}
 8025052:	4604      	mov	r4, r0
  /* At first initialize the super class ... */
  CoreTimer__Init( &_this->_.Super, aLink, aArg );
 8025054:	f7fa fb1a 	bl	801f68c <CoreTimer__Init>

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsEffectTimerClass );
 8025058:	4b01      	ldr	r3, [pc, #4]	; (8025060 <EffectsEffectTimerClass__Init+0x10>)
 802505a:	60e3      	str	r3, [r4, #12]

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( EffectsEffectTimerClass );
 802505c:	6023      	str	r3, [r4, #0]
}
 802505e:	bd10      	pop	{r4, pc}
 8025060:	080382e0 	.word	0x080382e0

08025064 <EffectsEffectTimerClass__ReInit>:

/* Re-Initializer for the class 'Effects::EffectTimerClass' */
void EffectsEffectTimerClass__ReInit( EffectsEffectTimerClass _this )
{
  /* At first re-initialize the super class ... */
  CoreTimer__ReInit( &_this->_.Super );
 8025064:	f7fa bb46 	b.w	801f6f4 <CoreTimer__ReInit>

08025068 <EffectsEffectTimerClass__Done>:

/* Finalizer method for the class 'Effects::EffectTimerClass' */
void EffectsEffectTimerClass__Done( EffectsEffectTimerClass _this )
{
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( CoreTimer );
 8025068:	4b01      	ldr	r3, [pc, #4]	; (8025070 <EffectsEffectTimerClass__Done+0x8>)
 802506a:	6003      	str	r3, [r0, #0]

  /* Don't forget to deinitialize the super class ... */
  CoreTimer__Done( &_this->_.Super );
 802506c:	f7fb ba8e 	b.w	802058c <CoreTimer__Done>
 8025070:	080380cc 	.word	0x080380cc

08025074 <EffectsEffectTimerClass_Trigger>:
/* The method Trigger() will be invoked when the timer is expired (when the interval 
   defined in @Begin or @Period is elapsed). The method can be overridden and implemented 
   in derived classes. The default implementation of this method sends a signal 
   to the slot method stored in the @OnTrigger property. */
void EffectsEffectTimerClass_Trigger( EffectsEffectTimerClass _this )
{
 8025074:	b510      	push	{r4, lr}
 8025076:	4604      	mov	r4, r0
  CoreTimer_Trigger((CoreTimer)_this );
 8025078:	f7ff fe4e 	bl	8024d18 <CoreTimer_Trigger>
  EwNotifyObjObservers((XObject)_this, 0 );
 802507c:	4620      	mov	r0, r4
 802507e:	2100      	movs	r1, #0
}
 8025080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EwNotifyObjObservers((XObject)_this, 0 );
 8025084:	f7f6 baf8 	b.w	801b678 <EwNotifyObjObservers>

08025088 <EffectsEffectTimer__Init>:
   autoobject by a variant you can specify another resolution to drive the animations. */
EW_DEFINE_AUTOOBJECT( EffectsEffectTimer, EffectsEffectTimerClass )

/* Initializer for the auto object 'Effects::EffectTimer' */
void EffectsEffectTimer__Init( EffectsEffectTimerClass _this )
{
 8025088:	b510      	push	{r4, lr}
  CoreTimer_OnSetPeriod((CoreTimer)_this, 15 );
 802508a:	210f      	movs	r1, #15
{
 802508c:	4604      	mov	r4, r0
  CoreTimer_OnSetPeriod((CoreTimer)_this, 15 );
 802508e:	f7ff fa7d 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetEnabled((CoreTimer)_this, 1 );
 8025092:	4620      	mov	r0, r4
 8025094:	2101      	movs	r1, #1
}
 8025096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreTimer_OnSetEnabled((CoreTimer)_this, 1 );
 802509a:	f7ff ba97 	b.w	80245cc <CoreTimer_OnSetEnabled>
 802509e:	bf00      	nop

080250a0 <EffectsFaderTask__Init>:
EW_DEFINE_AUTOOBJECT_VARIANTS( EffectsEffectTimer )
EW_END_OF_AUTOOBJECT_VARIANTS( EffectsEffectTimer )

/* Initializer for the class 'Effects::FaderTask' */
void EffectsFaderTask__Init( EffectsFaderTask _this, XObject aLink, XHandle aArg )
{
 80250a0:	b510      	push	{r4, lr}
 80250a2:	4604      	mov	r4, r0
  /* At first initialize the super class ... */
  CoreTask__Init( &_this->_.Super, aLink, aArg );
 80250a4:	f7fa fae8 	bl	801f678 <CoreTask__Init>

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( EffectsFaderTask );
 80250a8:	4b01      	ldr	r3, [pc, #4]	; (80250b0 <EffectsFaderTask__Init+0x10>)
 80250aa:	60e3      	str	r3, [r4, #12]

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( EffectsFaderTask );
 80250ac:	6023      	str	r3, [r4, #0]
}
 80250ae:	bd10      	pop	{r4, pc}
 80250b0:	08038368 	.word	0x08038368

080250b4 <EffectsFaderTask__ReInit>:

/* Re-Initializer for the class 'Effects::FaderTask' */
void EffectsFaderTask__ReInit( EffectsFaderTask _this )
{
  /* At first re-initialize the super class ... */
  CoreTask__ReInit( &_this->_.Super );
 80250b4:	f7fa bb1a 	b.w	801f6ec <CoreTask__ReInit>

080250b8 <EffectsFaderTask__Done>:

/* Finalizer method for the class 'Effects::FaderTask' */
void EffectsFaderTask__Done( EffectsFaderTask _this )
{
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( CoreTask );
 80250b8:	4b01      	ldr	r3, [pc, #4]	; (80250c0 <EffectsFaderTask__Done+0x8>)
 80250ba:	6003      	str	r3, [r0, #0]

  /* Don't forget to deinitialize the super class ... */
  CoreTask__Done( &_this->_.Super );
 80250bc:	f7fa bb8c 	b.w	801f7d8 <CoreTask__Done>
 80250c0:	08038044 	.word	0x08038044

080250c4 <EffectsFaderTask_OnCancel>:
   preceding @OnStart() method.
   To cancel a task you should call explicitly the method @Cancel(). The parameter 
   aQueue refers to the queue this task belonged to. It can be used e.g. to schedule 
   again a task to the same queue, etc. */
void EffectsFaderTask_OnCancel( EffectsFaderTask _this, CoreTaskQueue aQueue )
{
 80250c4:	b538      	push	{r3, r4, r5, lr}
  EffectsFader fader;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aQueue );

  fader = _this->first;
 80250c6:	6a04      	ldr	r4, [r0, #32]
{
 80250c8:	4605      	mov	r5, r0

  while ( fader != 0 )
 80250ca:	b13c      	cbz	r4, 80250dc <EffectsFaderTask_OnCancel+0x18>
  {
    EwPostSignal( fader->onCancel, ((XObject)fader ));
 80250cc:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
 80250d0:	4622      	mov	r2, r4
 80250d2:	f7f6 f8ad 	bl	801b230 <EwPostSignal>
    fader = fader->next;
 80250d6:	69a4      	ldr	r4, [r4, #24]
  while ( fader != 0 )
 80250d8:	2c00      	cmp	r4, #0
 80250da:	d1f7      	bne.n	80250cc <EffectsFaderTask_OnCancel+0x8>
  }

  _this->first = 0;
 80250dc:	2300      	movs	r3, #0
  _this->last = 0;
 80250de:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
 80250e2:	bd38      	pop	{r3, r4, r5, pc}

080250e4 <EffectsFaderTask_OnComplete>:
{
 80250e4:	b538      	push	{r3, r4, r5, lr}
  fader = _this->first;
 80250e6:	6a04      	ldr	r4, [r0, #32]
  while ( fader != 0 )
 80250e8:	b1b4      	cbz	r4, 8025118 <EffectsFaderTask_OnComplete+0x34>
 80250ea:	4605      	mov	r5, r0
  ((EffectsFader)_this)->_.VMT->OnEnd((EffectsFader)_this );
 80250ec:	6823      	ldr	r3, [r4, #0]
 80250ee:	4620      	mov	r0, r4
 80250f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80250f2:	4798      	blx	r3
    fader->Group->Super2.viewState = fader->Group->Super2.viewState & ~CoreViewStateRunningFader;
 80250f4:	6a22      	ldr	r2, [r4, #32]
    fader = fader->next;
 80250f6:	69a4      	ldr	r4, [r4, #24]
    fader->Group->Super2.viewState = fader->Group->Super2.viewState & ~CoreViewStateRunningFader;
 80250f8:	6a13      	ldr	r3, [r2, #32]
 80250fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80250fe:	6213      	str	r3, [r2, #32]
  while ( fader != 0 )
 8025100:	2c00      	cmp	r4, #0
 8025102:	d1f3      	bne.n	80250ec <EffectsFaderTask_OnComplete+0x8>
  fader = _this->first;
 8025104:	6a2c      	ldr	r4, [r5, #32]
  while ( fader != 0 )
 8025106:	b13c      	cbz	r4, 8025118 <EffectsFaderTask_OnComplete+0x34>
    EwPostSignal( fader->onComplete, ((XObject)fader ));
 8025108:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 802510c:	4622      	mov	r2, r4
 802510e:	f7f6 f88f 	bl	801b230 <EwPostSignal>
    fader = fader->next;
 8025112:	69a4      	ldr	r4, [r4, #24]
  while ( fader != 0 )
 8025114:	2c00      	cmp	r4, #0
 8025116:	d1f7      	bne.n	8025108 <EffectsFaderTask_OnComplete+0x24>
}
 8025118:	bd38      	pop	{r3, r4, r5, pc}
 802511a:	bf00      	nop

0802511c <EffectsFaderTask_OnStart>:
   to be called again after a short delay. At the end of the task, after the last 
   step is terminated, don't forget to call @Complete().
   The parameter aQueue refers to the queue this task belongs to. It can be used 
   to schedule more task to execute later. */
void EffectsFaderTask_OnStart( EffectsFaderTask _this, CoreTaskQueue aQueue )
{
 802511c:	b538      	push	{r3, r4, r5, lr}
  EffectsFader fader;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aQueue );

  if ( _this->first == 0 )
 802511e:	6a04      	ldr	r4, [r0, #32]
 8025120:	b1cc      	cbz	r4, 8025156 <EffectsFaderTask_OnStart+0x3a>
{
 8025122:	4622      	mov	r2, r4

  while ( fader != 0 )
  {
    fader->Group->Super2.viewState = ( fader->Group->Super2.viewState | CoreViewStateRunningFader ) 
    & ~CoreViewStatePendingFader;
    fader->Group->pendingFader = 0;
 8025124:	2000      	movs	r0, #0
    fader->Group->Super2.viewState = ( fader->Group->Super2.viewState | CoreViewStateRunningFader ) 
 8025126:	6a11      	ldr	r1, [r2, #32]
    fader = fader->next;
 8025128:	6992      	ldr	r2, [r2, #24]
    & ~CoreViewStatePendingFader;
 802512a:	6a0b      	ldr	r3, [r1, #32]
    fader->Group->pendingFader = 0;
 802512c:	64c8      	str	r0, [r1, #76]	; 0x4c
    & ~CoreViewStatePendingFader;
 802512e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8025132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    fader->Group->Super2.viewState = ( fader->Group->Super2.viewState | CoreViewStateRunningFader ) 
 8025136:	620b      	str	r3, [r1, #32]
  while ( fader != 0 )
 8025138:	2a00      	cmp	r2, #0
 802513a:	d1f4      	bne.n	8025126 <EffectsFaderTask_OnStart+0xa>

  fader = _this->first;

  while ( fader != 0 )
  {
    EwSignal( fader->OnInitialize, ((XObject)fader ));
 802513c:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
 8025140:	4622      	mov	r2, r4
 8025142:	f7f6 f86a 	bl	801b21a <EwSignal>
  ((EffectsFader)_this)->_.VMT->OnStart((EffectsFader)_this );
 8025146:	6823      	ldr	r3, [r4, #0]
 8025148:	4620      	mov	r0, r4
 802514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802514c:	4798      	blx	r3
    EffectsFader__OnStart( fader );
    fader = fader->next;
 802514e:	69a4      	ldr	r4, [r4, #24]
  while ( fader != 0 )
 8025150:	2c00      	cmp	r4, #0
 8025152:	d1f3      	bne.n	802513c <EffectsFaderTask_OnStart+0x20>
  }
}
 8025154:	bd38      	pop	{r3, r4, r5, pc}
    CoreTask__Complete( _this );
 8025156:	4605      	mov	r5, r0
 8025158:	f7ff f9ac 	bl	80244b4 <CoreTask__Complete>
  fader = _this->first;
 802515c:	6a2c      	ldr	r4, [r5, #32]
  while ( fader != 0 )
 802515e:	2c00      	cmp	r4, #0
 8025160:	d1df      	bne.n	8025122 <EffectsFaderTask_OnStart+0x6>
}
 8025162:	bd38      	pop	{r3, r4, r5, pc}

08025164 <EffectsFaderTask_Complete>:
   Thereupon the next available task in the queue can be executed. This method is 
   usually called in context of the @OnStart() or @OnContinue() method when the 
   task has finalized its work. Calling the method for a not current task has no 
   effect. */
void EffectsFaderTask_Complete( EffectsFaderTask _this )
{
 8025164:	b538      	push	{r3, r4, r5, lr}
  EffectsFader fader = _this->first;
 8025166:	6a04      	ldr	r4, [r0, #32]
{
 8025168:	4605      	mov	r5, r0

  while (( fader != 0 ) && EffectsFader__IsFinished( fader ))
 802516a:	b914      	cbnz	r4, 8025172 <EffectsFaderTask_Complete+0xe>
 802516c:	e008      	b.n	8025180 <EffectsFaderTask_Complete+0x1c>
    fader = fader->next;
 802516e:	69a4      	ldr	r4, [r4, #24]
  while (( fader != 0 ) && EffectsFader__IsFinished( fader ))
 8025170:	b134      	cbz	r4, 8025180 <EffectsFaderTask_Complete+0x1c>
  return ((EffectsFader)_this)->_.VMT->IsFinished((EffectsFader)_this );
 8025172:	6823      	ldr	r3, [r4, #0]
 8025174:	4620      	mov	r0, r4
 8025176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025178:	4798      	blx	r3
  while (( fader != 0 ) && EffectsFader__IsFinished( fader ))
 802517a:	2800      	cmp	r0, #0
 802517c:	d1f7      	bne.n	802516e <EffectsFaderTask_Complete+0xa>

  if ( fader == 0 )
    CoreTask_Complete((CoreTask)_this );
}
 802517e:	bd38      	pop	{r3, r4, r5, pc}
    CoreTask_Complete((CoreTask)_this );
 8025180:	4628      	mov	r0, r5
}
 8025182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CoreTask_Complete((CoreTask)_this );
 8025186:	f7fe be59 	b.w	8023e3c <CoreTask_Complete>
 802518a:	bf00      	nop

0802518c <EffectsVisibilityFader_OnEnd>:
  if ( !_this->Super1.Visible && ( _this->Super1.Group->Super2.Owner != 0 ))
 802518c:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
{
 8025190:	b510      	push	{r4, lr}
 8025192:	4604      	mov	r4, r0
  if ( !_this->Super1.Visible && ( _this->Super1.Group->Super2.Owner != 0 ))
 8025194:	b979      	cbnz	r1, 80251b6 <EffectsVisibilityFader_OnEnd+0x2a>
 8025196:	6a00      	ldr	r0, [r0, #32]
 8025198:	6983      	ldr	r3, [r0, #24]
 802519a:	b163      	cbz	r3, 80251b6 <EffectsVisibilityFader_OnEnd+0x2a>
    CoreGroup_OnSetVisible( _this->Super1.Group, 0 );
 802519c:	f7fc ff52 	bl	8022044 <CoreGroup_OnSetVisible>
  if (( !_this->Super1.Visible && _this->Super1.RemoveIfHidden ) && ( _this->Super1.Group->Super2.Owner 
 80251a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80251a4:	b93b      	cbnz	r3, 80251b6 <EffectsVisibilityFader_OnEnd+0x2a>
 80251a6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80251aa:	b123      	cbz	r3, 80251b6 <EffectsVisibilityFader_OnEnd+0x2a>
 80251ac:	6a21      	ldr	r1, [r4, #32]
 80251ae:	6988      	ldr	r0, [r1, #24]
 80251b0:	b108      	cbz	r0, 80251b6 <EffectsVisibilityFader_OnEnd+0x2a>
    CoreGroup_Remove( _this->Super1.Group->Super2.Owner, ((CoreView)_this->Super1.Group ));
 80251b2:	f7fd f831 	bl	8022218 <CoreGroup_Remove>
  if ( !_this->Super1.Enabled )
 80251b6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80251ba:	b101      	cbz	r1, 80251be <EffectsVisibilityFader_OnEnd+0x32>
}
 80251bc:	bd10      	pop	{r4, pc}
    CoreGroup_OnSetEnabled( _this->Super1.Group, 0 );
 80251be:	6a20      	ldr	r0, [r4, #32]
}
 80251c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreGroup_OnSetEnabled( _this->Super1.Group, 0 );
 80251c4:	f7fc bf30 	b.w	8022028 <CoreGroup_OnSetEnabled>

080251c8 <EffectsTransition_CreateDismissFader>:
 80251c8:	2000      	movs	r0, #0
 80251ca:	4770      	bx	lr

080251cc <EffectsShowHideCentered__Init>:
 80251cc:	4770      	bx	lr
 80251ce:	bf00      	nop

080251d0 <EffectsFader_Complete>:
  if ( _this->task != 0 )
 80251d0:	6900      	ldr	r0, [r0, #16]
 80251d2:	b108      	cbz	r0, 80251d8 <EffectsFader_Complete+0x8>
    CoreTask__Complete( _this->task );
 80251d4:	f7ff b96e 	b.w	80244b4 <CoreTask__Complete>
}
 80251d8:	4770      	bx	lr
 80251da:	bf00      	nop

080251dc <EffectsFader_OnStart>:
 80251dc:	f7ff bff8 	b.w	80251d0 <EffectsFader_Complete>

080251e0 <EffectsTransition__CreatePresentFader>:
  return ((EffectsTransition)_this)->_.VMT->CreatePresentFader((EffectsTransition)_this );
 80251e0:	6803      	ldr	r3, [r0, #0]
 80251e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251e4:	4718      	bx	r3
 80251e6:	bf00      	nop

080251e8 <EffectsTransition__CreateDismissFader>:
  return ((EffectsTransition)_this)->_.VMT->CreateDismissFader((EffectsTransition)_this );
 80251e8:	6803      	ldr	r3, [r0, #0]
 80251ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80251ec:	4718      	bx	r3
 80251ee:	bf00      	nop

080251f0 <EffectsTransition__CreateRestoreFader>:
  return ((EffectsTransition)_this)->_.VMT->CreateRestoreFader((EffectsTransition)_this );
 80251f0:	6803      	ldr	r3, [r0, #0]
 80251f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80251f4:	4718      	bx	r3
 80251f6:	bf00      	nop

080251f8 <EffectsTransition__CreateOverlayFader>:
  return ((EffectsTransition)_this)->_.VMT->CreateOverlayFader((EffectsTransition)_this );
 80251f8:	6803      	ldr	r3, [r0, #0]
 80251fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80251fc:	4718      	bx	r3
 80251fe:	bf00      	nop

08025200 <EffectsFaderTask_RemoveFader>:

/* 'C' function for method : 'Effects::FaderTask.RemoveFader()' */
void EffectsFaderTask_RemoveFader( EffectsFaderTask _this, EffectsFader aFader )
{
  if ( aFader == 0 )
 8025200:	b329      	cbz	r1, 802524e <EffectsFaderTask_RemoveFader+0x4e>
{
 8025202:	b538      	push	{r3, r4, r5, lr}
 8025204:	460c      	mov	r4, r1
 8025206:	4605      	mov	r5, r0
    return;

  if ( CoreTask_IsCurrent((CoreTask)_this ))
 8025208:	f7ff f95e 	bl	80244c8 <CoreTask_IsCurrent>
 802520c:	bb00      	cbnz	r0, 8025250 <EffectsFaderTask_RemoveFader+0x50>
  {
    EwThrow( EwLoadString( &_Const0000 ));
    return;
  }

  if ( aFader->task != _this )
 802520e:	6923      	ldr	r3, [r4, #16]
 8025210:	42ab      	cmp	r3, r5
 8025212:	d115      	bne.n	8025240 <EffectsFaderTask_RemoveFader+0x40>
    EwThrow( EwLoadString( &_Const0001 ));
    return;
  }

  if ( aFader->next != 0 )
    aFader->next->prev = aFader->prev;
 8025214:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
  if ( aFader->next != 0 )
 8025218:	b30b      	cbz	r3, 802525e <EffectsFaderTask_RemoveFader+0x5e>
    aFader->next->prev = aFader->prev;
 802521a:	615a      	str	r2, [r3, #20]
 802521c:	6962      	ldr	r2, [r4, #20]
  else
    _this->last = aFader->prev;

  if ( aFader->prev != 0 )
 802521e:	b30a      	cbz	r2, 8025264 <EffectsFaderTask_RemoveFader+0x64>
    aFader->prev->next = aFader->next;
 8025220:	6193      	str	r3, [r2, #24]

  aFader->task = 0;
  aFader->next = 0;
  aFader->prev = 0;

  if ( aFader->Group != 0 )
 8025222:	6a22      	ldr	r2, [r4, #32]
  aFader->task = 0;
 8025224:	2300      	movs	r3, #0
  aFader->prev = 0;
 8025226:	e9c4 3305 	strd	r3, r3, [r4, #20]
  aFader->task = 0;
 802522a:	6123      	str	r3, [r4, #16]
  if ( aFader->Group != 0 )
 802522c:	b102      	cbz	r2, 8025230 <EffectsFaderTask_RemoveFader+0x30>
    aFader->Group->pendingFader = 0;
 802522e:	64d3      	str	r3, [r2, #76]	; 0x4c

  EwPostSignal( aFader->onCancel, ((XObject)aFader ));
 8025230:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
 8025234:	4622      	mov	r2, r4
 8025236:	f7f5 fffb 	bl	801b230 <EwPostSignal>

  if ( _this->first == 0 )
 802523a:	6a2b      	ldr	r3, [r5, #32]
 802523c:	b1a3      	cbz	r3, 8025268 <EffectsFaderTask_RemoveFader+0x68>
    CoreTask_Cancel((CoreTask)_this );
}
 802523e:	bd38      	pop	{r3, r4, r5, pc}
    EwThrow( EwLoadString( &_Const0001 ));
 8025240:	480c      	ldr	r0, [pc, #48]	; (8025274 <EffectsFaderTask_RemoveFader+0x74>)
 8025242:	f7f7 f8f5 	bl	801c430 <EwLoadString>
}
 8025246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    EwThrow( EwLoadString( &_Const0001 ));
 802524a:	f7f3 bd21 	b.w	8018c90 <EwThrow>
 802524e:	4770      	bx	lr
    EwThrow( EwLoadString( &_Const0000 ));
 8025250:	4809      	ldr	r0, [pc, #36]	; (8025278 <EffectsFaderTask_RemoveFader+0x78>)
 8025252:	f7f7 f8ed 	bl	801c430 <EwLoadString>
}
 8025256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    EwThrow( EwLoadString( &_Const0000 ));
 802525a:	f7f3 bd19 	b.w	8018c90 <EwThrow>
    _this->last = aFader->prev;
 802525e:	61ea      	str	r2, [r5, #28]
  if ( aFader->prev != 0 )
 8025260:	2a00      	cmp	r2, #0
 8025262:	d1dd      	bne.n	8025220 <EffectsFaderTask_RemoveFader+0x20>
    _this->first = aFader->next;
 8025264:	622b      	str	r3, [r5, #32]
 8025266:	e7dc      	b.n	8025222 <EffectsFaderTask_RemoveFader+0x22>
    CoreTask_Cancel((CoreTask)_this );
 8025268:	4628      	mov	r0, r5
}
 802526a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CoreTask_Cancel((CoreTask)_this );
 802526e:	f7ff b925 	b.w	80244bc <CoreTask_Cancel>
 8025272:	bf00      	nop
 8025274:	080382c0 	.word	0x080382c0
 8025278:	080382b8 	.word	0x080382b8

0802527c <EffectsFaderTask_AddFader>:

/* 'C' function for method : 'Effects::FaderTask.AddFader()' */
void EffectsFaderTask_AddFader( EffectsFaderTask _this, EffectsFader aFader )
{
  if ( aFader == 0 )
 802527c:	b1b1      	cbz	r1, 80252ac <EffectsFaderTask_AddFader+0x30>
{
 802527e:	b538      	push	{r3, r4, r5, lr}
 8025280:	460c      	mov	r4, r1
 8025282:	4605      	mov	r5, r0
    return;

  if ( CoreTask_IsCurrent((CoreTask)_this ))
 8025284:	f7ff f920 	bl	80244c8 <CoreTask_IsCurrent>
 8025288:	b988      	cbnz	r0, 80252ae <EffectsFaderTask_AddFader+0x32>
  {
    EwThrow( EwLoadString( &_Const0002 ));
    return;
  }

  if ( aFader->task != 0 )
 802528a:	6923      	ldr	r3, [r4, #16]
 802528c:	b93b      	cbnz	r3, 802529e <EffectsFaderTask_AddFader+0x22>
  {
    EwThrow( EwLoadString( &_Const0003 ));
    return;
  }

  aFader->prev = _this->last;
 802528e:	69ea      	ldr	r2, [r5, #28]
  aFader->next = 0;
 8025290:	e9c4 2305 	strd	r2, r3, [r4, #20]

  if ( _this->last != 0 )
 8025294:	b192      	cbz	r2, 80252bc <EffectsFaderTask_AddFader+0x40>
    _this->last->next = aFader;
 8025296:	6194      	str	r4, [r2, #24]
  else
    _this->first = aFader;

  _this->last = aFader;
 8025298:	61ec      	str	r4, [r5, #28]
  aFader->task = _this;
 802529a:	6125      	str	r5, [r4, #16]
}
 802529c:	bd38      	pop	{r3, r4, r5, pc}
    EwThrow( EwLoadString( &_Const0003 ));
 802529e:	4809      	ldr	r0, [pc, #36]	; (80252c4 <EffectsFaderTask_AddFader+0x48>)
 80252a0:	f7f7 f8c6 	bl	801c430 <EwLoadString>
}
 80252a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    EwThrow( EwLoadString( &_Const0003 ));
 80252a8:	f7f3 bcf2 	b.w	8018c90 <EwThrow>
 80252ac:	4770      	bx	lr
    EwThrow( EwLoadString( &_Const0002 ));
 80252ae:	4806      	ldr	r0, [pc, #24]	; (80252c8 <EffectsFaderTask_AddFader+0x4c>)
 80252b0:	f7f7 f8be 	bl	801c430 <EwLoadString>
}
 80252b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    EwThrow( EwLoadString( &_Const0002 ));
 80252b8:	f7f3 bcea 	b.w	8018c90 <EwThrow>
    _this->first = aFader;
 80252bc:	622c      	str	r4, [r5, #32]
  _this->last = aFader;
 80252be:	61ec      	str	r4, [r5, #28]
  aFader->task = _this;
 80252c0:	6125      	str	r5, [r4, #16]
}
 80252c2:	bd38      	pop	{r3, r4, r5, pc}
 80252c4:	080382d0 	.word	0x080382d0
 80252c8:	080382c8 	.word	0x080382c8

080252cc <GraphicsCanvas__Init>:
static const XStringRes _Const0005 = { _StringsDefault0, 0x0073 };
static const XStringRes _Const0006 = { _StringsDefault0, 0x00B5 };

/* Initializer for the class 'Graphics::Canvas' */
void GraphicsCanvas__Init( GraphicsCanvas _this, XObject aLink, XHandle aArg )
{
 80252cc:	b510      	push	{r4, lr}
 80252ce:	4604      	mov	r4, r0
  /* At first initialize the super class ... */
  ResourcesBitmap__Init( &_this->_.Super, aLink, aArg );
 80252d0:	f000 fb66 	bl	80259a0 <ResourcesBitmap__Init>

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( GraphicsCanvas );
 80252d4:	4b03      	ldr	r3, [pc, #12]	; (80252e4 <GraphicsCanvas__Init+0x18>)
 80252d6:	60e3      	str	r3, [r4, #12]
void GraphicsCanvas_Init( GraphicsCanvas _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  _this->Super1.Mutable = 1;
 80252d8:	2201      	movs	r2, #1
 80252da:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  _this->_.VMT = EW_CLASS( GraphicsCanvas );
 80252de:	6023      	str	r3, [r4, #0]
}
 80252e0:	bd10      	pop	{r4, pc}
 80252e2:	bf00      	nop
 80252e4:	08038518 	.word	0x08038518

080252e8 <GraphicsCanvas__ReInit>:
  ResourcesBitmap__ReInit( &_this->_.Super );
 80252e8:	f000 baf4 	b.w	80258d4 <ResourcesBitmap__ReInit>

080252ec <GraphicsCanvas_OnSetFrameSize>:
}

/* 'C' function for method : 'Graphics::Canvas.OnSetFrameSize()' */
void GraphicsCanvas_OnSetFrameSize( GraphicsCanvas _this, XPoint value )
{
 80252ec:	b570      	push	{r4, r5, r6, lr}
 80252ee:	b082      	sub	sp, #8
 80252f0:	466b      	mov	r3, sp
  XHandle handle;

  if (( value.X <= 0 ) || ( value.Y <= 0 ))
 80252f2:	2900      	cmp	r1, #0
{
 80252f4:	e883 0006 	stmia.w	r3, {r1, r2}
 80252f8:	4604      	mov	r4, r0
  if (( value.X <= 0 ) || ( value.Y <= 0 ))
 80252fa:	dd21      	ble.n	8025340 <GraphicsCanvas_OnSetFrameSize+0x54>
 80252fc:	2a00      	cmp	r2, #0
 80252fe:	460e      	mov	r6, r1
 8025300:	4615      	mov	r5, r2
 8025302:	dd1d      	ble.n	8025340 <GraphicsCanvas_OnSetFrameSize+0x54>
    value = _Const0000;

  if ( !EwCompPoint( value, _this->Super1.FrameSize ))
 8025304:	e9cd 6500 	strd	r6, r5, [sp]
 8025308:	e893 0003 	ldmia.w	r3, {r0, r1}
 802530c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8025310:	f7f4 fd6b 	bl	8019dea <EwCompPoint>
 8025314:	b190      	cbz	r0, 802533c <GraphicsCanvas_OnSetFrameSize+0x50>
    return;

  if ( _this->attached )
 8025316:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 802531a:	b9d3      	cbnz	r3, 8025352 <GraphicsCanvas_OnSetFrameSize+0x66>
  {
    EwThrow( EwLoadString( &_Const0001 ));
    return;
  }

  _this->Super1.FrameSize = value;
 802531c:	e9c4 6508 	strd	r6, r5, [r4, #32]
  _this->Super1.Animated = (XBool)(((( _this->Super1.FrameSize.X > 0 ) && ( _this->Super1.FrameSize.Y 
  > 0 )) && ( _this->Super1.FrameDelay > 0 )) && ( _this->Super1.NoOfFrames > 1 ));
 8025320:	b146      	cbz	r6, 8025334 <GraphicsCanvas_OnSetFrameSize+0x48>
  _this->Super1.Animated = (XBool)(((( _this->Super1.FrameSize.X > 0 ) && ( _this->Super1.FrameSize.Y 
 8025322:	b13d      	cbz	r5, 8025334 <GraphicsCanvas_OnSetFrameSize+0x48>
  > 0 )) && ( _this->Super1.FrameDelay > 0 )) && ( _this->Super1.NoOfFrames > 1 ));
 8025324:	69a2      	ldr	r2, [r4, #24]
 8025326:	2a00      	cmp	r2, #0
 8025328:	dd04      	ble.n	8025334 <GraphicsCanvas_OnSetFrameSize+0x48>
 802532a:	69e3      	ldr	r3, [r4, #28]
 802532c:	2b01      	cmp	r3, #1
 802532e:	bfd4      	ite	le
 8025330:	2300      	movle	r3, #0
 8025332:	2301      	movgt	r3, #1

  if ( _this->Super1.bitmap == 0 )
 8025334:	6960      	ldr	r0, [r4, #20]
  _this->Super1.Animated = (XBool)(((( _this->Super1.FrameSize.X > 0 ) && ( _this->Super1.FrameSize.Y 
 8025336:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if ( _this->Super1.bitmap == 0 )
 802533a:	b920      	cbnz	r0, 8025346 <GraphicsCanvas_OnSetFrameSize+0x5a>
    return;

  handle = _this->Super1.bitmap;
  EwFreeBitmap((XBitmap*)handle );
  _this->Super1.bitmap = 0;
}
 802533c:	b002      	add	sp, #8
 802533e:	bd70      	pop	{r4, r5, r6, pc}
    value = _Const0000;
 8025340:	2500      	movs	r5, #0
 8025342:	462e      	mov	r6, r5
 8025344:	e7de      	b.n	8025304 <GraphicsCanvas_OnSetFrameSize+0x18>
  EwFreeBitmap((XBitmap*)handle );
 8025346:	f7e2 fa61 	bl	800780c <EwFreeBitmap>
  _this->Super1.bitmap = 0;
 802534a:	2300      	movs	r3, #0
 802534c:	6163      	str	r3, [r4, #20]
}
 802534e:	b002      	add	sp, #8
 8025350:	bd70      	pop	{r4, r5, r6, pc}
    EwThrow( EwLoadString( &_Const0001 ));
 8025352:	4804      	ldr	r0, [pc, #16]	; (8025364 <GraphicsCanvas_OnSetFrameSize+0x78>)
 8025354:	f7f7 f86c 	bl	801c430 <EwLoadString>
}
 8025358:	b002      	add	sp, #8
 802535a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    EwThrow( EwLoadString( &_Const0001 ));
 802535e:	f7f3 bc97 	b.w	8018c90 <EwThrow>
 8025362:	bf00      	nop
 8025364:	080384f4 	.word	0x080384f4

08025368 <GraphicsCanvas__Done>:
  if ( _this->attached )
 8025368:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 802536c:	b153      	cbz	r3, 8025384 <GraphicsCanvas__Done+0x1c>
  {
    EwThrow( EwLoadString( &_Const0004 ));
    return 0;
  }

  _this->Super1.bitmap = 0;
 802536e:	2300      	movs	r3, #0
  _this->attached = 0;
  _this->Super1.FrameSize = _Const0000;
 8025370:	e9c0 3308 	strd	r3, r3, [r0, #32]
  _this->Super1.FrameDelay = 0;
  _this->Super1.NoOfFrames = 1;
 8025374:	2201      	movs	r2, #1
  _this->Super1.bitmap = 0;
 8025376:	6143      	str	r3, [r0, #20]
  _this->attached = 0;
 8025378:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  _this->Super1.FrameDelay = 0;
 802537c:	6183      	str	r3, [r0, #24]
  _this->Super1.Animated = 0;
 802537e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _this->Super1.NoOfFrames = 1;
 8025382:	61c2      	str	r2, [r0, #28]
  _this->_.Super._.VMT = EW_CLASS( ResourcesBitmap );
 8025384:	4b01      	ldr	r3, [pc, #4]	; (802538c <GraphicsCanvas__Done+0x24>)
 8025386:	6003      	str	r3, [r0, #0]
  ResourcesBitmap__Done( &_this->_.Super );
 8025388:	f000 baa8 	b.w	80258dc <ResourcesBitmap__Done>
 802538c:	08038640 	.word	0x08038640

08025390 <GraphicsCanvas__DetachBitmap>:
  return _this;
}

/* Wrapper function for the non virtual method : 'Graphics::Canvas.DetachBitmap()' */
GraphicsCanvas GraphicsCanvas__DetachBitmap( void* _this )
{
 8025390:	b510      	push	{r4, lr}
  if ( !_this->attached )
 8025392:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8025396:	b15c      	cbz	r4, 80253b0 <GraphicsCanvas__DetachBitmap+0x20>
  _this->Super1.bitmap = 0;
 8025398:	2300      	movs	r3, #0
  _this->Super1.NoOfFrames = 1;
 802539a:	2201      	movs	r2, #1
  _this->attached = 0;
 802539c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  _this->Super1.FrameSize = _Const0000;
 80253a0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  _this->Super1.bitmap = 0;
 80253a4:	6143      	str	r3, [r0, #20]
  _this->Super1.FrameDelay = 0;
 80253a6:	6183      	str	r3, [r0, #24]
  _this->Super1.Animated = 0;
 80253a8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _this->Super1.NoOfFrames = 1;
 80253ac:	61c2      	str	r2, [r0, #28]
  return GraphicsCanvas_DetachBitmap((GraphicsCanvas)_this );
}
 80253ae:	bd10      	pop	{r4, pc}
    EwThrow( EwLoadString( &_Const0004 ));
 80253b0:	4803      	ldr	r0, [pc, #12]	; (80253c0 <GraphicsCanvas__DetachBitmap+0x30>)
 80253b2:	f7f7 f83d 	bl	801c430 <EwLoadString>
 80253b6:	f7f3 fc6b 	bl	8018c90 <EwThrow>
 80253ba:	4620      	mov	r0, r4
}
 80253bc:	bd10      	pop	{r4, pc}
 80253be:	bf00      	nop
 80253c0:	08038500 	.word	0x08038500

080253c4 <GraphicsCanvas_AttachBitmap>:
{
  XInt32 noOfFrames;
  XPoint frameSize;
  XInt32 frameDelay;

  if ( _this->Super1.bitmap != 0 )
 80253c4:	6943      	ldr	r3, [r0, #20]
{
 80253c6:	b570      	push	{r4, r5, r6, lr}
  if ( _this->Super1.bitmap != 0 )
 80253c8:	b9ab      	cbnz	r3, 80253f6 <GraphicsCanvas_AttachBitmap+0x32>
  {
    EwThrow( EwLoadString( &_Const0005 ));
    return 0;
  }

  if ( aBitmap == 0 )
 80253ca:	b199      	cbz	r1, 80253f4 <GraphicsCanvas_AttachBitmap+0x30>
    return _this;

  _this->Super1.bitmap = aBitmap;
  _this->attached = 1;
 80253cc:	2201      	movs	r2, #1
 80253ce:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  {
    XBitmap* bmp = (XBitmap*)aBitmap;

    noOfFrames = bmp->NoOfVirtFrames;
    frameSize  = bmp->FrameSize;
    frameDelay = bmp->FrameDelay;
 80253d2:	68ca      	ldr	r2, [r1, #12]
    noOfFrames = bmp->NoOfVirtFrames;
 80253d4:	694c      	ldr	r4, [r1, #20]
    frameSize  = bmp->FrameSize;
 80253d6:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
  }
  _this->Super1.NoOfFrames = noOfFrames;
  _this->Super1.FrameSize = frameSize;
  _this->Super1.FrameDelay = frameDelay;
  _this->Super1.Animated = (XBool)(( _this->Super1.FrameDelay > 0 ) && ( _this->Super1.NoOfFrames 
 80253da:	2a00      	cmp	r2, #0
  _this->Super1.FrameDelay = frameDelay;
 80253dc:	e9c0 1205 	strd	r1, r2, [r0, #20]
  _this->Super1.FrameSize = frameSize;
 80253e0:	e9c0 4607 	strd	r4, r6, [r0, #28]
 80253e4:	6245      	str	r5, [r0, #36]	; 0x24
  _this->Super1.Animated = (XBool)(( _this->Super1.FrameDelay > 0 ) && ( _this->Super1.NoOfFrames 
 80253e6:	dd03      	ble.n	80253f0 <GraphicsCanvas_AttachBitmap+0x2c>
 80253e8:	2c01      	cmp	r4, #1
 80253ea:	bfd4      	ite	le
 80253ec:	2300      	movle	r3, #0
 80253ee:	2301      	movgt	r3, #1
 80253f0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  > 1 ));
  return _this;
}
 80253f4:	bd70      	pop	{r4, r5, r6, pc}
    EwThrow( EwLoadString( &_Const0005 ));
 80253f6:	4803      	ldr	r0, [pc, #12]	; (8025404 <GraphicsCanvas_AttachBitmap+0x40>)
 80253f8:	f7f7 f81a 	bl	801c430 <EwLoadString>
 80253fc:	f7f3 fc48 	bl	8018c90 <EwThrow>
 8025400:	2000      	movs	r0, #0
}
 8025402:	bd70      	pop	{r4, r5, r6, pc}
 8025404:	08038508 	.word	0x08038508

08025408 <GraphicsCanvas__AttachBitmap>:

/* Wrapper function for the non virtual method : 'Graphics::Canvas.AttachBitmap()' */
GraphicsCanvas GraphicsCanvas__AttachBitmap( void* _this, XHandle aBitmap )
{
  return GraphicsCanvas_AttachBitmap((GraphicsCanvas)_this, aBitmap );
 8025408:	f7ff bfdc 	b.w	80253c4 <GraphicsCanvas_AttachBitmap>

0802540c <GraphicsCanvas_DrawText>:
   drawn pixel will overwrite the old content. */
void GraphicsCanvas_DrawText( GraphicsCanvas _this, XRect aClip, ResourcesFont aFont, 
  XString aString, XInt32 aOffset, XInt32 aCount, XRect aDstRect, XPoint aSrcPos, 
  XInt32 aMinWidth, XEnum aOrientation, XColor aColorTL, XColor aColorTR, XColor 
  aColorBR, XColor aColorBL, XBool aBlend )
{
 802540c:	b084      	sub	sp, #16
 802540e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  XInt32 dstFrameNo;
  XHandle dstBitmap;
  XHandle srcFont;
  XRect tempRect;

  if ( _this->Super1.bitmap == 0 )
 8025412:	f8d0 c014 	ldr.w	ip, [r0, #20]
{
 8025416:	b087      	sub	sp, #28
 8025418:	ac11      	add	r4, sp, #68	; 0x44
 802541a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 802541e:	e9dd 6815 	ldrd	r6, r8, [sp, #84]	; 0x54
 8025422:	e9dd 7a17 	ldrd	r7, sl, [sp, #92]	; 0x5c
 8025426:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 802542a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802542c:	f89d b094 	ldrb.w	fp, [sp, #148]	; 0x94
 8025430:	4605      	mov	r5, r0
  if ( _this->Super1.bitmap == 0 )
 8025432:	f1bc 0f00 	cmp.w	ip, #0
 8025436:	d030      	beq.n	802549a <GraphicsCanvas_DrawText+0x8e>
    return;

  if ( aOffset < 0 )
    aOffset = 0;

  if ((( aFont == 0 ) || ( aFont->font == 0 )) || (( aOffset > 0 ) && ( aOffset 
 8025438:	2e00      	cmp	r6, #0
 802543a:	d037      	beq.n	80254ac <GraphicsCanvas_DrawText+0xa0>
 802543c:	f8d6 e014 	ldr.w	lr, [r6, #20]
 8025440:	f1be 0f00 	cmp.w	lr, #0
 8025444:	d032      	beq.n	80254ac <GraphicsCanvas_DrawText+0xa0>
 8025446:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802544a:	2f00      	cmp	r7, #0
 802544c:	9200      	str	r2, [sp, #0]
 802544e:	dc34      	bgt.n	80254ba <GraphicsCanvas_DrawText+0xae>
      >= EwGetStringLength( aString ))))
    return;

  orient = 0;

  if ( aOrientation == ViewsOrientationRotated_90 )
 8025450:	2b01      	cmp	r3, #1
 8025452:	d03f      	beq.n	80254d4 <GraphicsCanvas_DrawText+0xc8>
    orient = 90;
  else
    if ( aOrientation == ViewsOrientationRotated_180 )
 8025454:	2b02      	cmp	r3, #2
 8025456:	d02e      	beq.n	80254b6 <GraphicsCanvas_DrawText+0xaa>
      orient = 180;
    else
      if ( aOrientation == ViewsOrientationRotated_270 )
        orient = 270;
 8025458:	2b03      	cmp	r3, #3
 802545a:	bf14      	ite	ne
 802545c:	2700      	movne	r7, #0
 802545e:	f44f 7787 	moveq.w	r7, #270	; 0x10e

  dstFrameNo = _this->DstFrameNr;
  dstBitmap = _this->Super1.bitmap;
  srcFont = aFont->font;
  tempRect = aClip;
 8025462:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025466:	ac02      	add	r4, sp, #8
 8025468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  {
    EwDrawText((XBitmap*)dstBitmap, (XFont*)srcFont, aString + aOffset, aCount,
 802546c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  dstFrameNo = _this->DstFrameNr;
 8025470:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    EwDrawText((XBitmap*)dstBitmap, (XFont*)srcFont, aString + aOffset, aCount,
 8025472:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8025476:	ad15      	add	r5, sp, #84	; 0x54
 8025478:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802547c:	9a00      	ldr	r2, [sp, #0]
 802547e:	9414      	str	r4, [sp, #80]	; 0x50
 8025480:	4653      	mov	r3, sl
 8025482:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 8025486:	4671      	mov	r1, lr
 8025488:	4660      	mov	r0, ip
 802548a:	e9cd 971f 	strd	r9, r7, [sp, #124]	; 0x7c
                dstFrameNo, tempRect, aDstRect, aSrcPos, aMinWidth, orient, aColorTL, aColorTR,
                aColorBR, aColorBL, aBlend );
  }
}
 802548e:	b007      	add	sp, #28
 8025490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025494:	b004      	add	sp, #16
    EwDrawText((XBitmap*)dstBitmap, (XFont*)srcFont, aString + aOffset, aCount,
 8025496:	f7e7 ba1b 	b.w	800c8d0 <EwDrawText>
    ResourcesBitmap__Update( _this );
 802549a:	9300      	str	r3, [sp, #0]
 802549c:	f000 fabc 	bl	8025a18 <ResourcesBitmap__Update>
  if ( _this->Super1.bitmap == 0 )
 80254a0:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80254a4:	9b00      	ldr	r3, [sp, #0]
 80254a6:	f1bc 0f00 	cmp.w	ip, #0
 80254aa:	d1c5      	bne.n	8025438 <GraphicsCanvas_DrawText+0x2c>
}
 80254ac:	b007      	add	sp, #28
 80254ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254b2:	b004      	add	sp, #16
 80254b4:	4770      	bx	lr
      orient = 180;
 80254b6:	27b4      	movs	r7, #180	; 0xb4
 80254b8:	e7d3      	b.n	8025462 <GraphicsCanvas_DrawText+0x56>
      >= EwGetStringLength( aString ))))
 80254ba:	4640      	mov	r0, r8
 80254bc:	9301      	str	r3, [sp, #4]
 80254be:	f7f7 f957 	bl	801c770 <EwGetStringLength>
  if ((( aFont == 0 ) || ( aFont->font == 0 )) || (( aOffset > 0 ) && ( aOffset 
 80254c2:	9a00      	ldr	r2, [sp, #0]
 80254c4:	4290      	cmp	r0, r2
 80254c6:	ddf1      	ble.n	80254ac <GraphicsCanvas_DrawText+0xa0>
 80254c8:	f8d6 e014 	ldr.w	lr, [r6, #20]
 80254cc:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80254d0:	9b01      	ldr	r3, [sp, #4]
 80254d2:	e7bd      	b.n	8025450 <GraphicsCanvas_DrawText+0x44>
    orient = 90;
 80254d4:	275a      	movs	r7, #90	; 0x5a
 80254d6:	e7c4      	b.n	8025462 <GraphicsCanvas_DrawText+0x56>

080254d8 <GraphicsCanvas_DrawBitmapFrame>:
   If aBlend is 'true', the drawn pixel are alpha-blended with the background, otherwise 
   the drawn pixel will overwrite the old content. */
void GraphicsCanvas_DrawBitmapFrame( GraphicsCanvas _this, XRect aClip, ResourcesBitmap 
  aBitmap, XInt32 aFrameNr, XRect aDstRect, XSet aEdges, XColor aColorTL, XColor 
  aColorTR, XColor aColorBR, XColor aColorBL, XBool aBlend )
{
 80254d8:	b084      	sub	sp, #16
 80254da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  XBool top;
  XBool right;
  XBool bottom;
  XBool interior;

  if ( _this->Super1.bitmap == 0 )
 80254de:	f8d0 9014 	ldr.w	r9, [r0, #20]
{
 80254e2:	b09b      	sub	sp, #108	; 0x6c
 80254e4:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80254e8:	e888 000e 	stmia.w	r8, {r1, r2, r3}
 80254ec:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80254ee:	f89d 40d0 	ldrb.w	r4, [sp, #208]	; 0xd0
 80254f2:	4605      	mov	r5, r0
  if ( _this->Super1.bitmap == 0 )
 80254f4:	f1b9 0f00 	cmp.w	r9, #0
 80254f8:	d052      	beq.n	80255a0 <GraphicsCanvas_DrawBitmapFrame+0xc8>
    ResourcesBitmap__Update( _this );

  if ( _this->Super1.bitmap == 0 )
    return;

  if ((((( aBitmap == 0 ) || ( aBitmap->bitmap == 0 )) || !aEdges ) || ( aFrameNr 
 80254fa:	2e00      	cmp	r6, #0
 80254fc:	d04b      	beq.n	8025596 <GraphicsCanvas_DrawBitmapFrame+0xbe>
 80254fe:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8025502:	f1ba 0f00 	cmp.w	sl, #0
 8025506:	d046      	beq.n	8025596 <GraphicsCanvas_DrawBitmapFrame+0xbe>
 8025508:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802550a:	2b00      	cmp	r3, #0
 802550c:	d043      	beq.n	8025596 <GraphicsCanvas_DrawBitmapFrame+0xbe>
 802550e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025510:	2b00      	cmp	r3, #0
 8025512:	db40      	blt.n	8025596 <GraphicsCanvas_DrawBitmapFrame+0xbe>
      < 0 )) || ( aFrameNr >= aBitmap->NoOfFrames ))
 8025514:	69f3      	ldr	r3, [r6, #28]
 8025516:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025518:	4293      	cmp	r3, r2
 802551a:	dd3c      	ble.n	8025596 <GraphicsCanvas_DrawBitmapFrame+0xbe>
    return;

  dstBitmap = _this->Super1.bitmap;
  srcBitmap = aBitmap->bitmap;
  dstFrameNo = _this->DstFrameNr;
  srcRect = EwNewRect2Point( _Const0000, aBitmap->FrameSize );
 802551c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802551e:	4b26      	ldr	r3, [pc, #152]	; (80255b8 <GraphicsCanvas_DrawBitmapFrame+0xe0>)
 8025520:	9200      	str	r2, [sp, #0]
 8025522:	af16      	add	r7, sp, #88	; 0x58
 8025524:	e893 0006 	ldmia.w	r3, {r1, r2}
 8025528:	4638      	mov	r0, r7
 802552a:	6a33      	ldr	r3, [r6, #32]
  dstFrameNo = _this->DstFrameNr;
 802552c:	f8d5 b03c 	ldr.w	fp, [r5, #60]	; 0x3c
  srcRect = EwNewRect2Point( _Const0000, aBitmap->FrameSize );
 8025530:	f7f4 fcd5 	bl	8019ede <EwNewRect2Point>
  top = (( aEdges & GraphicsEdgesTop ) == GraphicsEdgesTop );
  right = (( aEdges & GraphicsEdgesRight ) == GraphicsEdgesRight );
  bottom = (( aEdges & GraphicsEdgesBottom ) == GraphicsEdgesBottom );
  interior = (( aEdges & GraphicsEdgesInterior ) == GraphicsEdgesInterior );
  {
    EwDrawBitmapFrame((XBitmap*)dstBitmap, (XBitmap*)srcBitmap, dstFrameNo, aFrameNr,
 8025534:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8025538:	e9dd 6732 	ldrd	r6, r7, [sp, #200]	; 0xc8
 802553c:	e9cd 7414 	strd	r7, r4, [sp, #80]	; 0x50
 8025540:	9613      	str	r6, [sp, #76]	; 0x4c
 8025542:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8025544:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8025546:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8025548:	9512      	str	r5, [sp, #72]	; 0x48
 802554a:	f3c6 07c0 	ubfx	r7, r6, #3, #1
 802554e:	f3c6 0580 	ubfx	r5, r6, #2, #1
 8025552:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8025556:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8025558:	9611      	str	r6, [sp, #68]	; 0x44
 802555a:	9410      	str	r4, [sp, #64]	; 0x40
 802555c:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 802555e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8025560:	970f      	str	r7, [sp, #60]	; 0x3c
 8025562:	f004 0401 	and.w	r4, r4, #1
 8025566:	f3c6 0640 	ubfx	r6, r6, #1, #1
 802556a:	af08      	add	r7, sp, #32
 802556c:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
 8025570:	950e      	str	r5, [sp, #56]	; 0x38
 8025572:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8025576:	ad2b      	add	r5, sp, #172	; 0xac
 8025578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802557c:	ac04      	add	r4, sp, #16
 802557e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8025582:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8025586:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 802558a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802558c:	465a      	mov	r2, fp
 802558e:	4651      	mov	r1, sl
 8025590:	4648      	mov	r0, r9
 8025592:	f7e7 ffdf 	bl	800d554 <EwDrawBitmapFrame>
                       aClip, aDstRect, srcRect, left, top, right, bottom,
                       interior, aColorTL, aColorTR, aColorBR, aColorBL, aBlend );
  }
}
 8025596:	b01b      	add	sp, #108	; 0x6c
 8025598:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802559c:	b004      	add	sp, #16
 802559e:	4770      	bx	lr
    ResourcesBitmap__Update( _this );
 80255a0:	f000 fa3a 	bl	8025a18 <ResourcesBitmap__Update>
  if ( _this->Super1.bitmap == 0 )
 80255a4:	f8d5 9014 	ldr.w	r9, [r5, #20]
 80255a8:	f1b9 0f00 	cmp.w	r9, #0
 80255ac:	d1a5      	bne.n	80254fa <GraphicsCanvas_DrawBitmapFrame+0x22>
}
 80255ae:	b01b      	add	sp, #108	; 0x6c
 80255b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255b4:	b004      	add	sp, #16
 80255b6:	4770      	bx	lr
 80255b8:	080384ec 	.word	0x080384ec

080255bc <GraphicsCanvas_ScaleBitmap>:
   the bi-linear filter. If aFilter is 'true', the source bitmap pixel will be bi-linear 
   filtered in order to get better output. */
void GraphicsCanvas_ScaleBitmap( GraphicsCanvas _this, XRect aClip, ResourcesBitmap 
  aBitmap, XInt32 aFrameNr, XRect aDstRect, XRect aSrcRect, XColor aColorTL, XColor 
  aColorTR, XColor aColorBR, XColor aColorBL, XBool aBlend, XBool aFilter )
{
 80255bc:	b084      	sub	sp, #16
 80255be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  XFloat bottom;
  XHandle dstBitmap;
  XHandle srcBitmap;
  XInt32 dstFrameNo;

  if ( _this->Super1.bitmap == 0 )
 80255c2:	f8d0 c014 	ldr.w	ip, [r0, #20]
{
 80255c6:	b08f      	sub	sp, #60	; 0x3c
 80255c8:	ad17      	add	r5, sp, #92	; 0x5c
 80255ca:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80255ce:	e9dd 681b 	ldrd	r6, r8, [sp, #108]	; 0x6c
 80255d2:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 80255d6:	f89d 70a8 	ldrb.w	r7, [sp, #168]	; 0xa8
 80255da:	4604      	mov	r4, r0
  if ( _this->Super1.bitmap == 0 )
 80255dc:	f1bc 0f00 	cmp.w	ip, #0
 80255e0:	d072      	beq.n	80256c8 <GraphicsCanvas_ScaleBitmap+0x10c>
    ResourcesBitmap__Update( _this );

  if ( _this->Super1.bitmap == 0 )
    return;

  if (((( aBitmap == 0 ) || ( aBitmap->bitmap == 0 )) || ( aFrameNr < 0 )) || ( 
 80255e2:	2e00      	cmp	r6, #0
 80255e4:	d06b      	beq.n	80256be <GraphicsCanvas_ScaleBitmap+0x102>
 80255e6:	f8d6 e014 	ldr.w	lr, [r6, #20]
 80255ea:	f1be 0f00 	cmp.w	lr, #0
 80255ee:	d066      	beq.n	80256be <GraphicsCanvas_ScaleBitmap+0x102>
 80255f0:	f1b8 0f00 	cmp.w	r8, #0
 80255f4:	db63      	blt.n	80256be <GraphicsCanvas_ScaleBitmap+0x102>
 80255f6:	69f3      	ldr	r3, [r6, #28]
 80255f8:	4543      	cmp	r3, r8
 80255fa:	dd60      	ble.n	80256be <GraphicsCanvas_ScaleBitmap+0x102>
      aFrameNr >= aBitmap->NoOfFrames ))
    return;

  top = (XFloat)aDstRect.Point1.Y;
  left = (XFloat)aDstRect.Point1.X;
 80255fc:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
  right = (XFloat)aDstRect.Point2.X;
  bottom = (XFloat)aDstRect.Point2.Y;

  if ((((( right - left ) > 4096.000000f ) || (( right - left ) < -4096.000000f )) 
 8025600:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80256e0 <GraphicsCanvas_ScaleBitmap+0x124>
  left = (XFloat)aDstRect.Point1.X;
 8025604:	eef8 4ae7 	vcvt.f32.s32	s9, s15
  right = (XFloat)aDstRect.Point2.X;
 8025608:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 802560c:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
  if ((((( right - left ) > 4096.000000f ) || (( right - left ) < -4096.000000f )) 
 8025610:	ee73 7a64 	vsub.f32	s15, s6, s9
 8025614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802561c:	dc1a      	bgt.n	8025654 <GraphicsCanvas_ScaleBitmap+0x98>
 802561e:	eddf 6a31 	vldr	s13, [pc, #196]	; 80256e4 <GraphicsCanvas_ScaleBitmap+0x128>
 8025622:	eef4 7ae6 	vcmpe.f32	s15, s13
 8025626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802562a:	d413      	bmi.n	8025654 <GraphicsCanvas_ScaleBitmap+0x98>
  top = (XFloat)aDstRect.Point1.Y;
 802562c:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8025630:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
  bottom = (XFloat)aDstRect.Point2.Y;
 8025634:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8025638:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
      || (( bottom - top ) > 4096.000000f )) || (( bottom - top ) < -4096.000000f ))
 802563c:	ee75 7a42 	vsub.f32	s15, s10, s4
 8025640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025648:	dc04      	bgt.n	8025654 <GraphicsCanvas_ScaleBitmap+0x98>
 802564a:	eef4 7ae6 	vcmpe.f32	s15, s13
 802564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025652:	d50a      	bpl.n	802566a <GraphicsCanvas_ScaleBitmap+0xae>
  {
    EwTrace( "%s", EwLoadString( &_Const0006 ));
 8025654:	4824      	ldr	r0, [pc, #144]	; (80256e8 <GraphicsCanvas_ScaleBitmap+0x12c>)
 8025656:	f7f6 feeb 	bl	801c430 <EwLoadString>
 802565a:	4601      	mov	r1, r0
 802565c:	4823      	ldr	r0, [pc, #140]	; (80256ec <GraphicsCanvas_ScaleBitmap+0x130>)
    EwWarpBitmap((XBitmap*)dstBitmap, (XBitmap*)srcBitmap, dstFrameNo, aFrameNr, aClip,
                  left,  top,    1.0f, right, top,    1.0f,
                  right, bottom, 1.0f, left,  bottom, 1.0f,
                  aSrcRect, aColorTL, aColorTR, aColorBR, aColorBL, aBlend, aFilter );
  }
}
 802565e:	b00f      	add	sp, #60	; 0x3c
 8025660:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025664:	b004      	add	sp, #16
    EwTrace( "%s", EwLoadString( &_Const0006 ));
 8025666:	f7f3 b91c 	b.w	80188a2 <EwTrace>
    EwWarpBitmap((XBitmap*)dstBitmap, (XBitmap*)srcBitmap, dstFrameNo, aFrameNr, aClip,
 802566a:	ab21      	add	r3, sp, #132	; 0x84
 802566c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802566e:	970d      	str	r7, [sp, #52]	; 0x34
 8025670:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8025672:	970b      	str	r7, [sp, #44]	; 0x2c
 8025674:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025676:	9f26      	ldr	r7, [sp, #152]	; 0x98
 8025678:	960a      	str	r6, [sp, #40]	; 0x28
 802567a:	9709      	str	r7, [sp, #36]	; 0x24
 802567c:	9e25      	ldr	r6, [sp, #148]	; 0x94
 802567e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8025682:	af04      	add	r7, sp, #16
 8025684:	9608      	str	r6, [sp, #32]
 8025686:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 802568a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802568e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8025692:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8025696:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8025698:	eeb0 4a65 	vmov.f32	s8, s11
 802569c:	4643      	mov	r3, r8
 802569e:	4671      	mov	r1, lr
 80256a0:	4660      	mov	r0, ip
 80256a2:	eef0 2a65 	vmov.f32	s5, s11
 80256a6:	eeb0 1a65 	vmov.f32	s2, s11
 80256aa:	eef0 3a45 	vmov.f32	s7, s10
 80256ae:	eeb0 0a64 	vmov.f32	s0, s9
 80256b2:	eef0 1a43 	vmov.f32	s3, s6
 80256b6:	eef0 0a42 	vmov.f32	s1, s4
 80256ba:	f7e6 fb8f 	bl	800bddc <EwWarpBitmap>
}
 80256be:	b00f      	add	sp, #60	; 0x3c
 80256c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80256c4:	b004      	add	sp, #16
 80256c6:	4770      	bx	lr
    ResourcesBitmap__Update( _this );
 80256c8:	f000 f9a6 	bl	8025a18 <ResourcesBitmap__Update>
  if ( _this->Super1.bitmap == 0 )
 80256cc:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80256d0:	f1bc 0f00 	cmp.w	ip, #0
 80256d4:	d185      	bne.n	80255e2 <GraphicsCanvas_ScaleBitmap+0x26>
}
 80256d6:	b00f      	add	sp, #60	; 0x3c
 80256d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80256dc:	b004      	add	sp, #16
 80256de:	4770      	bx	lr
 80256e0:	45800000 	.word	0x45800000
 80256e4:	c5800000 	.word	0xc5800000
 80256e8:	08038510 	.word	0x08038510
 80256ec:	080384d4 	.word	0x080384d4

080256f0 <GraphicsCanvas_CopyBitmap>:
   is 'true', the drawn pixel are alpha-blended with the background, otherwise the 
   drawn pixel will overwrite the old content. */
void GraphicsCanvas_CopyBitmap( GraphicsCanvas _this, XRect aClip, ResourcesBitmap 
  aBitmap, XInt32 aFrameNr, XRect aDstRect, XPoint aSrcPos, XColor aColorTL, XColor 
  aColorTR, XColor aColorBR, XColor aColorBL, XBool aBlend )
{
 80256f0:	b084      	sub	sp, #16
 80256f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  XHandle dstBitmap;
  XHandle srcBitmap;
  XInt32 dstFrameNr;

  if ( _this->Super1.bitmap == 0 )
 80256f6:	6947      	ldr	r7, [r0, #20]
{
 80256f8:	b090      	sub	sp, #64	; 0x40
 80256fa:	ac17      	add	r4, sp, #92	; 0x5c
 80256fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8025700:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8025702:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8025706:	4605      	mov	r5, r0
  if ( _this->Super1.bitmap == 0 )
 8025708:	b18f      	cbz	r7, 802572e <GraphicsCanvas_CopyBitmap+0x3e>
    ResourcesBitmap__Update( _this );

  if ( _this->Super1.bitmap == 0 )
    return;

  if (((( aBitmap == 0 ) || ( aBitmap->bitmap == 0 )) || ( aFrameNr < 0 )) || ( 
 802570a:	b15e      	cbz	r6, 8025724 <GraphicsCanvas_CopyBitmap+0x34>
 802570c:	f8d6 e014 	ldr.w	lr, [r6, #20]
 8025710:	f1be 0f00 	cmp.w	lr, #0
 8025714:	d006      	beq.n	8025724 <GraphicsCanvas_CopyBitmap+0x34>
 8025716:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025718:	2b00      	cmp	r3, #0
 802571a:	db03      	blt.n	8025724 <GraphicsCanvas_CopyBitmap+0x34>
 802571c:	69f3      	ldr	r3, [r6, #28]
 802571e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025720:	4293      	cmp	r3, r2
 8025722:	dc0e      	bgt.n	8025742 <GraphicsCanvas_CopyBitmap+0x52>
  {
    EwCopyBitmap((XBitmap*)dstBitmap, (XBitmap*)srcBitmap, dstFrameNr, aFrameNr,
                  aClip, aDstRect, aSrcPos, aColorTL, aColorTR, aColorBR, aColorBL,
                  aBlend );
  }
}
 8025724:	b010      	add	sp, #64	; 0x40
 8025726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802572a:	b004      	add	sp, #16
 802572c:	4770      	bx	lr
    ResourcesBitmap__Update( _this );
 802572e:	f000 f973 	bl	8025a18 <ResourcesBitmap__Update>
  if ( _this->Super1.bitmap == 0 )
 8025732:	696f      	ldr	r7, [r5, #20]
 8025734:	2f00      	cmp	r7, #0
 8025736:	d1e8      	bne.n	802570a <GraphicsCanvas_CopyBitmap+0x1a>
}
 8025738:	b010      	add	sp, #64	; 0x40
 802573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802573e:	b004      	add	sp, #16
 8025740:	4770      	bx	lr
    EwCopyBitmap((XBitmap*)dstBitmap, (XBitmap*)srcBitmap, dstFrameNr, aFrameNr,
 8025742:	e9dd 6325 	ldrd	r6, r3, [sp, #148]	; 0x94
 8025746:	e9dd 0121 	ldrd	r0, r1, [sp, #132]	; 0x84
 802574a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802574c:	920b      	str	r2, [sp, #44]	; 0x2c
 802574e:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
 8025752:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025754:	960c      	str	r6, [sp, #48]	; 0x30
 8025756:	ab08      	add	r3, sp, #32
 8025758:	920a      	str	r2, [sp, #40]	; 0x28
 802575a:	e883 0003 	stmia.w	r3, {r0, r1}
 802575e:	ae1d      	add	r6, sp, #116	; 0x74
 8025760:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8025764:	ae04      	add	r6, sp, #16
 8025766:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 802576a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802576e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8025772:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025774:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8025776:	4671      	mov	r1, lr
 8025778:	4638      	mov	r0, r7
 802577a:	f7e5 fdc9 	bl	800b310 <EwCopyBitmap>
}
 802577e:	b010      	add	sp, #64	; 0x40
 8025780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025784:	b004      	add	sp, #16
 8025786:	4770      	bx	lr

08025788 <GraphicsCanvas_FillRectangle>:
   are combined with the pixel already existing in the destination bitmap. If aBlend 
   is 'true', the drawn pixel are alpha-blended with the background, otherwise the 
   drawn pixel will overwrite the old content. */
void GraphicsCanvas_FillRectangle( GraphicsCanvas _this, XRect aClip, XRect aDstRect, 
  XColor aColorTL, XColor aColorTR, XColor aColorBR, XColor aColorBL, XBool aBlend )
{
 8025788:	b084      	sub	sp, #16
 802578a:	b5f0      	push	{r4, r5, r6, r7, lr}
  XHandle dstBitmap;
  XInt32 dstFrameNo;

  if ( _this->Super1.bitmap == 0 )
 802578c:	f8d0 c014 	ldr.w	ip, [r0, #20]
{
 8025790:	b08d      	sub	sp, #52	; 0x34
 8025792:	ad13      	add	r5, sp, #76	; 0x4c
 8025794:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8025798:	f89d 607c 	ldrb.w	r6, [sp, #124]	; 0x7c
 802579c:	4604      	mov	r4, r0
  if ( _this->Super1.bitmap == 0 )
 802579e:	f1bc 0f00 	cmp.w	ip, #0
 80257a2:	d01c      	beq.n	80257de <GraphicsCanvas_FillRectangle+0x56>
    return;

  dstBitmap = _this->Super1.bitmap;
  dstFrameNo = _this->DstFrameNr;
  {
    EwFillRectangle((XBitmap*)dstBitmap, dstFrameNo, aClip, aDstRect, aColorTL, aColorTR,
 80257a4:	ab17      	add	r3, sp, #92	; 0x5c
 80257a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80257a8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80257aa:	960a      	str	r6, [sp, #40]	; 0x28
 80257ac:	9709      	str	r7, [sp, #36]	; 0x24
 80257ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80257b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80257b2:	9608      	str	r6, [sp, #32]
 80257b4:	9707      	str	r7, [sp, #28]
 80257b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80257b8:	9606      	str	r6, [sp, #24]
 80257ba:	af02      	add	r7, sp, #8
 80257bc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80257c0:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 80257c4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80257c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80257cc:	4660      	mov	r0, ip
 80257ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80257d0:	f7e2 fd78 	bl	80082c4 <EwFillRectangle>
                     aColorBR, aColorBL, aBlend );
  }
}
 80257d4:	b00d      	add	sp, #52	; 0x34
 80257d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80257da:	b004      	add	sp, #16
 80257dc:	4770      	bx	lr
    ResourcesBitmap__Update( _this );
 80257de:	f000 f91b 	bl	8025a18 <ResourcesBitmap__Update>
  if ( _this->Super1.bitmap == 0 )
 80257e2:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80257e6:	f1bc 0f00 	cmp.w	ip, #0
 80257ea:	d1db      	bne.n	80257a4 <GraphicsCanvas_FillRectangle+0x1c>
}
 80257ec:	b00d      	add	sp, #52	; 0x34
 80257ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80257f2:	b004      	add	sp, #16
 80257f4:	4770      	bx	lr
 80257f6:	bf00      	nop

080257f8 <GraphicsCanvas_Update>:
{
 80257f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((( _this->Super1.bitmap == 0 ) && ( _this->Super1.FrameSize.X > 0 )) && ( 
 80257fc:	6942      	ldr	r2, [r0, #20]
{
 80257fe:	b091      	sub	sp, #68	; 0x44
 8025800:	4605      	mov	r5, r0
  if ((( _this->Super1.bitmap == 0 ) && ( _this->Super1.FrameSize.X > 0 )) && ( 
 8025802:	b92a      	cbnz	r2, 8025810 <GraphicsCanvas_Update+0x18>
 8025804:	6a03      	ldr	r3, [r0, #32]
 8025806:	2b00      	cmp	r3, #0
 8025808:	dd02      	ble.n	8025810 <GraphicsCanvas_Update+0x18>
 802580a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802580c:	2b00      	cmp	r3, #0
 802580e:	dc0d      	bgt.n	802582c <GraphicsCanvas_Update+0x34>
 8025810:	f105 042c 	add.w	r4, r5, #44	; 0x2c
  if ( !EwIsRectEmpty( _this->InvalidArea ))
 8025814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025818:	f7f4 fbb8 	bl	8019f8c <EwIsRectEmpty>
 802581c:	b918      	cbnz	r0, 8025826 <GraphicsCanvas_Update+0x2e>
    _this->InvalidArea = _Const0003;
 802581e:	62e8      	str	r0, [r5, #44]	; 0x2c
 8025820:	e9c4 0001 	strd	r0, r0, [r4, #4]
 8025824:	60e0      	str	r0, [r4, #12]
}
 8025826:	b011      	add	sp, #68	; 0x44
 8025828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    XPoint frameSize = _this->Super1.FrameSize;
 802582c:	e9d0 0108 	ldrd	r0, r1, [r0, #32]
      handle = (XHandle)EwCreateBitmap( EW_PIXEL_FORMAT_NATIVE, frameSize, 
 8025830:	69eb      	ldr	r3, [r5, #28]
 8025832:	9300      	str	r3, [sp, #0]
    XPoint frameSize = _this->Super1.FrameSize;
 8025834:	ac0e      	add	r4, sp, #56	; 0x38
 8025836:	e884 0003 	stmia.w	r4, {r0, r1}
      handle = (XHandle)EwCreateBitmap( EW_PIXEL_FORMAT_NATIVE, frameSize, 
 802583a:	69ab      	ldr	r3, [r5, #24]
 802583c:	4610      	mov	r0, r2
 802583e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025842:	f7e2 f831 	bl	80078a8 <EwCreateBitmap>
    _this->Super1.bitmap = handle;
 8025846:	6168      	str	r0, [r5, #20]
    if ( _this->Super1.bitmap == 0 )
 8025848:	b920      	cbnz	r0, 8025854 <GraphicsCanvas_Update+0x5c>
      _this->Super1.NoOfFrames = 1;
 802584a:	2301      	movs	r3, #1
      _this->Super1.FrameSize = _Const0000;
 802584c:	e9c5 0008 	strd	r0, r0, [r5, #32]
      _this->Super1.NoOfFrames = 1;
 8025850:	e9c5 0306 	strd	r0, r3, [r5, #24]
    _this->InvalidArea = EwNewRect2Point( _Const0000, _this->Super1.FrameSize );
 8025854:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8025856:	4b1c      	ldr	r3, [pc, #112]	; (80258c8 <GraphicsCanvas_Update+0xd0>)
 8025858:	9200      	str	r2, [sp, #0]
 802585a:	ac0a      	add	r4, sp, #40	; 0x28
 802585c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8025860:	4620      	mov	r0, r4
 8025862:	6a2b      	ldr	r3, [r5, #32]
 8025864:	f7f4 fb3b 	bl	8019ede <EwNewRect2Point>
 8025868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    if ( !!_this->Super1.bitmap )
 802586c:	696e      	ldr	r6, [r5, #20]
    _this->InvalidArea = EwNewRect2Point( _Const0000, _this->Super1.FrameSize );
 802586e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
 8025872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if ( !!_this->Super1.bitmap )
 8025876:	2e00      	cmp	r6, #0
 8025878:	d0cc      	beq.n	8025814 <GraphicsCanvas_Update+0x1c>
      for ( _this->DstFrameNr = _this->Super1.NoOfFrames - 1; _this->DstFrameNr 
 802587a:	69eb      	ldr	r3, [r5, #28]
      XInt32 dstFrameNr = _this->DstFrameNr;
 802587c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
      for ( _this->DstFrameNr = _this->Super1.NoOfFrames - 1; _this->DstFrameNr 
 8025880:	3b01      	subs	r3, #1
 8025882:	2b00      	cmp	r3, #0
 8025884:	63eb      	str	r3, [r5, #60]	; 0x3c
 8025886:	db1b      	blt.n	80258c0 <GraphicsCanvas_Update+0xc8>
 8025888:	4b10      	ldr	r3, [pc, #64]	; (80258cc <GraphicsCanvas_Update+0xd4>)
        GraphicsCanvas_FillRectangle( _this, _this->InvalidArea, _this->InvalidArea, 
 802588a:	681f      	ldr	r7, [r3, #0]
 802588c:	ae01      	add	r6, sp, #4
 802588e:	f04f 0800 	mov.w	r8, #0
 8025892:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025896:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 802589a:	9705      	str	r7, [sp, #20]
 802589c:	e9cd 7808 	strd	r7, r8, [sp, #32]
 80258a0:	e9cd 7706 	strd	r7, r7, [sp, #24]
 80258a4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80258a8:	f8cd c000 	str.w	ip, [sp]
 80258ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80258b0:	4628      	mov	r0, r5
 80258b2:	f7ff ff69 	bl	8025788 <GraphicsCanvas_FillRectangle>
           >= 0; _this->DstFrameNr-- )
 80258b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80258b8:	3b01      	subs	r3, #1
      for ( _this->DstFrameNr = _this->Super1.NoOfFrames - 1; _this->DstFrameNr 
 80258ba:	2b00      	cmp	r3, #0
           >= 0; _this->DstFrameNr-- )
 80258bc:	63eb      	str	r3, [r5, #60]	; 0x3c
      for ( _this->DstFrameNr = _this->Super1.NoOfFrames - 1; _this->DstFrameNr 
 80258be:	dae8      	bge.n	8025892 <GraphicsCanvas_Update+0x9a>
      _this->DstFrameNr = dstFrameNr;
 80258c0:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
 80258c4:	e7a6      	b.n	8025814 <GraphicsCanvas_Update+0x1c>
 80258c6:	bf00      	nop
 80258c8:	080384ec 	.word	0x080384ec
 80258cc:	080384fc 	.word	0x080384fc

080258d0 <ResourcesBitmap_Update>:
/* 'C' function for method : 'Resources::Bitmap.Update()' */
void ResourcesBitmap_Update( ResourcesBitmap _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
}
 80258d0:	4770      	bx	lr
 80258d2:	bf00      	nop

080258d4 <ResourcesBitmap__ReInit>:
  CoreResource__ReInit( &_this->_.Super );
 80258d4:	f7f9 bf0c 	b.w	801f6f0 <CoreResource__ReInit>

080258d8 <ResourcesFont__ReInit>:

/* Re-Initializer for the class 'Resources::Font' */
void ResourcesFont__ReInit( ResourcesFont _this )
{
  /* At first re-initialize the super class ... */
  CoreResource__ReInit( &_this->_.Super );
 80258d8:	f7f9 bf0a 	b.w	801f6f0 <CoreResource__ReInit>

080258dc <ResourcesBitmap__Done>:
{
 80258dc:	b510      	push	{r4, lr}
 80258de:	4604      	mov	r4, r0
  if ( _this->bitmap == 0 )
 80258e0:	6940      	ldr	r0, [r0, #20]
 80258e2:	b150      	cbz	r0, 80258fa <ResourcesBitmap__Done+0x1e>
  EwFreeBitmap((XBitmap*)handle );
 80258e4:	f7e1 ff92 	bl	800780c <EwFreeBitmap>
  _this->bitmap = 0;
 80258e8:	2300      	movs	r3, #0
  _this->FrameSize = _Const0000;
 80258ea:	e9c4 3308 	strd	r3, r3, [r4, #32]
  _this->NoOfFrames = 1;
 80258ee:	2201      	movs	r2, #1
  _this->bitmap = 0;
 80258f0:	6163      	str	r3, [r4, #20]
  _this->FrameDelay = 0;
 80258f2:	61a3      	str	r3, [r4, #24]
  _this->Animated = 0;
 80258f4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _this->NoOfFrames = 1;
 80258f8:	61e2      	str	r2, [r4, #28]
  _this->_.Super._.VMT = EW_CLASS( CoreResource );
 80258fa:	4b03      	ldr	r3, [pc, #12]	; (8025908 <ResourcesBitmap__Done+0x2c>)
 80258fc:	6023      	str	r3, [r4, #0]
  CoreResource__Done( &_this->_.Super );
 80258fe:	4620      	mov	r0, r4
}
 8025900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreResource__Done( &_this->_.Super );
 8025904:	f7fa be1c 	b.w	8020540 <CoreResource__Done>
 8025908:	08037f2c 	.word	0x08037f2c

0802590c <ResourcesBitmap_OnSetFrameSize>:
{
 802590c:	b500      	push	{lr}
 802590e:	b083      	sub	sp, #12
 8025910:	ab02      	add	r3, sp, #8
    EwThrow( EwLoadString( &_Const0001 ));
 8025912:	4805      	ldr	r0, [pc, #20]	; (8025928 <ResourcesBitmap_OnSetFrameSize+0x1c>)
{
 8025914:	e903 0006 	stmdb	r3, {r1, r2}
    EwThrow( EwLoadString( &_Const0001 ));
 8025918:	f7f6 fd8a 	bl	801c430 <EwLoadString>
}
 802591c:	b003      	add	sp, #12
 802591e:	f85d eb04 	ldr.w	lr, [sp], #4
    EwThrow( EwLoadString( &_Const0001 ));
 8025922:	f7f3 b9b5 	b.w	8018c90 <EwThrow>
 8025926:	bf00      	nop
 8025928:	080385c8 	.word	0x080385c8

0802592c <ResourcesFont__Done>:
}

/* Finalizer method for the class 'Resources::Font' */
void ResourcesFont__Done( ResourcesFont _this )
{
 802592c:	b510      	push	{r4, lr}
 802592e:	4604      	mov	r4, r0
/* 'C' function for method : 'Resources::Font.freeFont()' */
void ResourcesFont_freeFont( ResourcesFont _this )
{
  XHandle handle;

  if ( _this->font == 0 )
 8025930:	6940      	ldr	r0, [r0, #20]
 8025932:	b130      	cbz	r0, 8025942 <ResourcesFont__Done+0x16>
    return;

  handle = _this->font;
  EwFreeFont((XFont*)handle );
 8025934:	f7e2 fb4a 	bl	8007fcc <EwFreeFont>
  _this->font = 0;
 8025938:	2300      	movs	r3, #0
  _this->Ascent = 0;
  _this->Descent = 0;
 802593a:	e9c4 3307 	strd	r3, r3, [r4, #28]
  _this->font = 0;
 802593e:	6163      	str	r3, [r4, #20]
  _this->Leading = 0;
 8025940:	61a3      	str	r3, [r4, #24]
  _this->_.Super._.VMT = EW_CLASS( CoreResource );
 8025942:	4b03      	ldr	r3, [pc, #12]	; (8025950 <ResourcesFont__Done+0x24>)
 8025944:	6023      	str	r3, [r4, #0]
  CoreResource__Done( &_this->_.Super );
 8025946:	4620      	mov	r0, r4
}
 8025948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreResource__Done( &_this->_.Super );
 802594c:	f7fa bdf8 	b.w	8020540 <CoreResource__Done>
 8025950:	08037f2c 	.word	0x08037f2c

08025954 <ResourcesBitmap_Init.part.0>:
void ResourcesBitmap_Init( ResourcesBitmap _this, XHandle aArg )
 8025954:	b538      	push	{r3, r4, r5, lr}
 8025956:	4604      	mov	r4, r0
    XBitmap* bmp = EwLoadBitmap((const XBmpRes*)aArg );
 8025958:	4608      	mov	r0, r1
 802595a:	f7e1 ffe5 	bl	8007928 <EwLoadBitmap>
    if ( bmp )
 802595e:	b1a8      	cbz	r0, 802598c <ResourcesBitmap_Init.part.0+0x38>
      frameDelay = bmp->FrameDelay;
 8025960:	68c2      	ldr	r2, [r0, #12]
      noOfFrames = bmp->NoOfVirtFrames;
 8025962:	6943      	ldr	r3, [r0, #20]
      frameSize  = bmp->FrameSize;
 8025964:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  _this->Animated = (XBool)((( _this->bitmap != 0 ) && ( _this->FrameDelay > 0 )) 
 8025968:	2a00      	cmp	r2, #0
  _this->NoOfFrames = noOfFrames;
 802596a:	e9c4 2306 	strd	r2, r3, [r4, #24]
  _this->FrameSize = frameSize;
 802596e:	6265      	str	r5, [r4, #36]	; 0x24
 8025970:	6221      	str	r1, [r4, #32]
  _this->bitmap = handle;
 8025972:	6160      	str	r0, [r4, #20]
  _this->Animated = (XBool)((( _this->bitmap != 0 ) && ( _this->FrameDelay > 0 )) 
 8025974:	dd06      	ble.n	8025984 <ResourcesBitmap_Init.part.0+0x30>
 8025976:	2b01      	cmp	r3, #1
 8025978:	bfd4      	ite	le
 802597a:	2300      	movle	r3, #0
 802597c:	2301      	movgt	r3, #1
 802597e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8025982:	bd38      	pop	{r3, r4, r5, pc}
 8025984:	2300      	movs	r3, #0
  _this->Animated = (XBool)((( _this->bitmap != 0 ) && ( _this->FrameDelay > 0 )) 
 8025986:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 802598a:	bd38      	pop	{r3, r4, r5, pc}
  _this->FrameDelay = frameDelay;
 802598c:	4603      	mov	r3, r0
  _this->NoOfFrames = noOfFrames;
 802598e:	2201      	movs	r2, #1
  _this->Animated = (XBool)((( _this->bitmap != 0 ) && ( _this->FrameDelay > 0 )) 
 8025990:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _this->FrameSize = frameSize;
 8025994:	e9c4 0008 	strd	r0, r0, [r4, #32]
  _this->bitmap = handle;
 8025998:	6160      	str	r0, [r4, #20]
  _this->FrameDelay = frameDelay;
 802599a:	61a0      	str	r0, [r4, #24]
  _this->NoOfFrames = noOfFrames;
 802599c:	61e2      	str	r2, [r4, #28]
}
 802599e:	bd38      	pop	{r3, r4, r5, pc}

080259a0 <ResourcesBitmap__Init>:
{
 80259a0:	b538      	push	{r3, r4, r5, lr}
 80259a2:	4604      	mov	r4, r0
 80259a4:	4615      	mov	r5, r2
  CoreResource__Init( &_this->_.Super, aLink, aArg );
 80259a6:	f7fa fddd 	bl	8020564 <CoreResource__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( ResourcesBitmap );
 80259aa:	4b06      	ldr	r3, [pc, #24]	; (80259c4 <ResourcesBitmap__Init+0x24>)
 80259ac:	60e3      	str	r3, [r4, #12]
  _this->NoOfFrames = 1;
 80259ae:	2201      	movs	r2, #1
 80259b0:	61e2      	str	r2, [r4, #28]
  _this->_.VMT = EW_CLASS( ResourcesBitmap );
 80259b2:	6023      	str	r3, [r4, #0]
  if ( aArg == 0 )
 80259b4:	b905      	cbnz	r5, 80259b8 <ResourcesBitmap__Init+0x18>
}
 80259b6:	bd38      	pop	{r3, r4, r5, pc}
 80259b8:	4629      	mov	r1, r5
 80259ba:	4620      	mov	r0, r4
 80259bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80259c0:	f7ff bfc8 	b.w	8025954 <ResourcesBitmap_Init.part.0>
 80259c4:	08038640 	.word	0x08038640

080259c8 <ResourcesFont_loadFont.part.0>:
}

/* 'C' function for method : 'Resources::Font.loadFont()' */
void ResourcesFont_loadFont( ResourcesFont _this, XHandle aFontResource )
 80259c8:	b510      	push	{r4, lr}
 80259ca:	4604      	mov	r4, r0
  ascent = 0;
  descent = 0;
  leading = 0;
  {
    /* aFontResource is a pointer to a memory where the font resource is stored. */
    XFont* font = EwLoadFont((const XFntRes*)aFontResource );
 80259cc:	4608      	mov	r0, r1
 80259ce:	f7e2 fa8d 	bl	8007eec <EwLoadFont>

    /* After the font has been loaded query its ascent and descent. */
    if ( font )
 80259d2:	b138      	cbz	r0, 80259e4 <ResourcesFont_loadFont.part.0+0x1c>
    {
      ascent  = font->Ascent;
      descent = font->Descent;
 80259d4:	e9d0 1200 	ldrd	r1, r2, [r0]
      leading = font->Leading;
 80259d8:	6883      	ldr	r3, [r0, #8]
    handle = (XHandle)(void*)font;
  }
  _this->font = handle;
  _this->Ascent = ascent;
  _this->Descent = descent;
  _this->Leading = leading;
 80259da:	61a3      	str	r3, [r4, #24]
  _this->Descent = descent;
 80259dc:	e9c4 2107 	strd	r2, r1, [r4, #28]
  _this->font = handle;
 80259e0:	6160      	str	r0, [r4, #20]
}
 80259e2:	bd10      	pop	{r4, pc}
  leading = 0;
 80259e4:	4603      	mov	r3, r0
  descent = 0;
 80259e6:	4602      	mov	r2, r0
  ascent = 0;
 80259e8:	4601      	mov	r1, r0
  _this->Descent = descent;
 80259ea:	e9c4 2107 	strd	r2, r1, [r4, #28]
  _this->font = handle;
 80259ee:	6160      	str	r0, [r4, #20]
  _this->Leading = leading;
 80259f0:	61a3      	str	r3, [r4, #24]
}
 80259f2:	bd10      	pop	{r4, pc}

080259f4 <ResourcesFont__Init>:
{
 80259f4:	b538      	push	{r3, r4, r5, lr}
 80259f6:	4604      	mov	r4, r0
 80259f8:	4615      	mov	r5, r2
  CoreResource__Init( &_this->_.Super, aLink, aArg );
 80259fa:	f7fa fdb3 	bl	8020564 <CoreResource__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( ResourcesFont );
 80259fe:	4b05      	ldr	r3, [pc, #20]	; (8025a14 <ResourcesFont__Init+0x20>)
 8025a00:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( ResourcesFont );
 8025a02:	6023      	str	r3, [r4, #0]
  if ( aFontResource == 0 )
 8025a04:	b905      	cbnz	r5, 8025a08 <ResourcesFont__Init+0x14>
}
 8025a06:	bd38      	pop	{r3, r4, r5, pc}
 8025a08:	4629      	mov	r1, r5
 8025a0a:	4620      	mov	r0, r4
 8025a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025a10:	f7ff bfda 	b.w	80259c8 <ResourcesFont_loadFont.part.0>
 8025a14:	08038684 	.word	0x08038684

08025a18 <ResourcesBitmap__Update>:
  ((ResourcesBitmap)_this)->_.VMT->Update((ResourcesBitmap)_this );
 8025a18:	6803      	ldr	r3, [r0, #0]
 8025a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a1c:	4718      	bx	r3
 8025a1e:	bf00      	nop

08025a20 <ResourcesFont_GetFlowTextAdvance>:
XInt32 ResourcesFont_GetFlowTextAdvance( ResourcesFont _this, XString aFlowString )
{
  XHandle handle;
  XInt32 advance;

  if ( _this->font == 0 )
 8025a20:	6940      	ldr	r0, [r0, #20]
 8025a22:	b900      	cbnz	r0, 8025a26 <ResourcesFont_GetFlowTextAdvance+0x6>

  handle = _this->font;
  advance = 0;
  advance = EwGetFlowTextAdvance((XFont*)handle, aFlowString );
  return advance;
}
 8025a24:	4770      	bx	lr
  advance = EwGetFlowTextAdvance((XFont*)handle, aFlowString );
 8025a26:	f7e9 b910 	b.w	800ec4a <EwGetFlowTextAdvance>
 8025a2a:	bf00      	nop

08025a2c <ResourcesFont_ParseFlowString>:

/* 'C' function for method : 'Resources::Font.ParseFlowString()' */
XString ResourcesFont_ParseFlowString( ResourcesFont _this, XString aString, XInt32 
  aOffset, XInt32 aWidth, XInt32 aMaxNoOfRows, XHandle aBidi )
{
 8025a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025a30:	4605      	mov	r5, r0
  XString result;

  if ( aOffset < 0 )
    aOffset = 0;

  if (( _this->font == 0 ) || (( aOffset > 0 ) && ( aOffset >= EwGetStringLength( 
 8025a32:	6940      	ldr	r0, [r0, #20]
{
 8025a34:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  if (( _this->font == 0 ) || (( aOffset > 0 ) && ( aOffset >= EwGetStringLength( 
 8025a38:	b1a8      	cbz	r0, 8025a66 <ResourcesFont_ParseFlowString+0x3a>
 8025a3a:	2a00      	cmp	r2, #0
 8025a3c:	460e      	mov	r6, r1
 8025a3e:	461f      	mov	r7, r3
 8025a40:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 8025a44:	dd05      	ble.n	8025a52 <ResourcesFont_ParseFlowString+0x26>
 8025a46:	4608      	mov	r0, r1
 8025a48:	f7f6 fe92 	bl	801c770 <EwGetStringLength>
 8025a4c:	4550      	cmp	r0, sl
 8025a4e:	dd0a      	ble.n	8025a66 <ResourcesFont_ParseFlowString+0x3a>
 8025a50:	6968      	ldr	r0, [r5, #20]
      aString ))))
    return 0;

  handle = _this->font;
  result = 0;
  result = EwParseFlowString((XFont*)handle, aString + aOffset, aWidth, aMaxNoOfRows, aBidi );
 8025a52:	f8cd 9020 	str.w	r9, [sp, #32]
 8025a56:	4643      	mov	r3, r8
 8025a58:	463a      	mov	r2, r7
 8025a5a:	eb06 014a 	add.w	r1, r6, sl, lsl #1
  return result;
}
 8025a5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  result = EwParseFlowString((XFont*)handle, aString + aOffset, aWidth, aMaxNoOfRows, aBidi );
 8025a62:	f7e8 be2d 	b.w	800e6c0 <EwParseFlowString>
}
 8025a66:	2000      	movs	r0, #0
 8025a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025a6c <ResourcesFont_GetTextAdvance>:
   is zero, the calculation starts with the first sign. The parameter aCount determines 
   the max. number of following sigs to calculate the advance value. If aCount is 
   -1, all signs until the end of the string will be evaluated. */
XInt32 ResourcesFont_GetTextAdvance( ResourcesFont _this, XString aString, XInt32 
  aOffset, XInt32 aCount )
{
 8025a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a6e:	4604      	mov	r4, r0
  XInt32 advance;

  if ( aOffset < 0 )
    aOffset = 0;

  if (( _this->font == 0 ) || (( aOffset > 0 ) && ( aOffset >= EwGetStringLength( 
 8025a70:	6940      	ldr	r0, [r0, #20]
 8025a72:	b190      	cbz	r0, 8025a9a <ResourcesFont_GetTextAdvance+0x2e>
 8025a74:	2a00      	cmp	r2, #0
 8025a76:	460d      	mov	r5, r1
 8025a78:	461e      	mov	r6, r3
 8025a7a:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 8025a7e:	dd05      	ble.n	8025a8c <ResourcesFont_GetTextAdvance+0x20>
 8025a80:	4608      	mov	r0, r1
 8025a82:	f7f6 fe75 	bl	801c770 <EwGetStringLength>
 8025a86:	42b8      	cmp	r0, r7
 8025a88:	dd07      	ble.n	8025a9a <ResourcesFont_GetTextAdvance+0x2e>
 8025a8a:	6960      	ldr	r0, [r4, #20]
      aString ))))
    return 0;

  handle = _this->font;
  advance = 0;
  advance = EwGetTextAdvance((XFont*)handle, aString + aOffset, aCount );
 8025a8c:	4632      	mov	r2, r6
 8025a8e:	eb05 0147 	add.w	r1, r5, r7, lsl #1
  return advance;
}
 8025a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  advance = EwGetTextAdvance((XFont*)handle, aString + aOffset, aCount );
 8025a96:	f7e6 beb8 	b.w	800c80a <EwGetTextAdvance>
}
 8025a9a:	2000      	movs	r0, #0
 8025a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a9e:	bf00      	nop

08025aa0 <TemplatesPushButton__Init>:
#include "_TemplatesPushButton.h"
#include "Templates.h"

/* Initializer for the class 'Templates::PushButton' */
void TemplatesPushButton__Init( TemplatesPushButton _this, XObject aLink, XHandle aArg )
{
 8025aa0:	b510      	push	{r4, lr}
 8025aa2:	4604      	mov	r4, r0
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_.Super, aLink, aArg );
 8025aa4:	f7fc fb0a 	bl	80220bc <CoreGroup__Init>

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( TemplatesPushButton );
 8025aa8:	4b01      	ldr	r3, [pc, #4]	; (8025ab0 <TemplatesPushButton__Init+0x10>)
 8025aaa:	60e3      	str	r3, [r4, #12]

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( TemplatesPushButton );
 8025aac:	6023      	str	r3, [r4, #0]
}
 8025aae:	bd10      	pop	{r4, pc}
 8025ab0:	080386e8 	.word	0x080386e8

08025ab4 <TemplatesPushButton__ReInit>:

/* Re-Initializer for the class 'Templates::PushButton' */
void TemplatesPushButton__ReInit( TemplatesPushButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_.Super );
 8025ab4:	f7f9 be00 	b.w	801f6b8 <CoreGroup__ReInit>

08025ab8 <TemplatesPushButton__Done>:

/* Finalizer method for the class 'Templates::PushButton' */
void TemplatesPushButton__Done( TemplatesPushButton _this )
{
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 8025ab8:	4b01      	ldr	r3, [pc, #4]	; (8025ac0 <TemplatesPushButton__Done+0x8>)
 8025aba:	6003      	str	r3, [r0, #0]

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_.Super );
 8025abc:	f7f9 be3e 	b.w	801f73c <CoreGroup__Done>
 8025ac0:	08037c98 	.word	0x08037c98

08025ac4 <ViewsText_preOnUpdateSlot>:
void ViewsText_preOnUpdateSlot( ViewsText _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}
 8025ac4:	4770      	bx	lr
 8025ac6:	bf00      	nop

08025ac8 <ViewsRectangle__Init>:
{
 8025ac8:	b510      	push	{r4, lr}
 8025aca:	4604      	mov	r4, r0
  CoreRectView__Init( &_this->_.Super, aLink, aArg );
 8025acc:	f7f9 fd82 	bl	801f5d4 <CoreRectView__Init>
  _this->Color = _Const0000;
 8025ad0:	4a03      	ldr	r2, [pc, #12]	; (8025ae0 <ViewsRectangle__Init+0x18>)
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsRectangle );
 8025ad2:	4b04      	ldr	r3, [pc, #16]	; (8025ae4 <ViewsRectangle__Init+0x1c>)
  _this->Color = _Const0000;
 8025ad4:	6812      	ldr	r2, [r2, #0]
 8025ad6:	63a2      	str	r2, [r4, #56]	; 0x38
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsRectangle );
 8025ad8:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( ViewsRectangle );
 8025ada:	6023      	str	r3, [r4, #0]
}
 8025adc:	bd10      	pop	{r4, pc}
 8025ade:	bf00      	nop
 8025ae0:	080387ac 	.word	0x080387ac
 8025ae4:	08038888 	.word	0x08038888

08025ae8 <ViewsFrame__Init>:
{
 8025ae8:	b510      	push	{r4, lr}
 8025aea:	4604      	mov	r4, r0
  CoreRectView__Init( &_this->_.Super, aLink, aArg );
 8025aec:	f7f9 fd72 	bl	801f5d4 <CoreRectView__Init>
  _this->Color = _Const0000;
 8025af0:	4a04      	ldr	r2, [pc, #16]	; (8025b04 <ViewsFrame__Init+0x1c>)
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsFrame );
 8025af2:	4b05      	ldr	r3, [pc, #20]	; (8025b08 <ViewsFrame__Init+0x20>)
  _this->Color = _Const0000;
 8025af4:	6812      	ldr	r2, [r2, #0]
 8025af6:	6462      	str	r2, [r4, #68]	; 0x44
  _this->animFrameNumber = -1;
 8025af8:	f04f 32ff 	mov.w	r2, #4294967295
 8025afc:	6422      	str	r2, [r4, #64]	; 0x40
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsFrame );
 8025afe:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( ViewsFrame );
 8025b00:	6023      	str	r3, [r4, #0]
}
 8025b02:	bd10      	pop	{r4, pc}
 8025b04:	080387ac 	.word	0x080387ac
 8025b08:	080387c0 	.word	0x080387c0

08025b0c <ViewsImage__Init>:
{
 8025b0c:	b510      	push	{r4, lr}
 8025b0e:	4604      	mov	r4, r0
  CoreRectView__Init( &_this->_.Super, aLink, aArg );
 8025b10:	f7f9 fd60 	bl	801f5d4 <CoreRectView__Init>
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsImage );
 8025b14:	4b01      	ldr	r3, [pc, #4]	; (8025b1c <ViewsImage__Init+0x10>)
 8025b16:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( ViewsImage );
 8025b18:	6023      	str	r3, [r4, #0]
}
 8025b1a:	bd10      	pop	{r4, pc}
 8025b1c:	08038824 	.word	0x08038824

08025b20 <ViewsText__Init>:
{
 8025b20:	b510      	push	{r4, lr}
 8025b22:	4604      	mov	r4, r0
  CoreRectView__Init( &_this->_.Super, aLink, aArg );
 8025b24:	f7f9 fd56 	bl	801f5d4 <CoreRectView__Init>
  _this->Color = _Const0000;
 8025b28:	4a04      	ldr	r2, [pc, #16]	; (8025b3c <ViewsText__Init+0x1c>)
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsText );
 8025b2a:	4b05      	ldr	r3, [pc, #20]	; (8025b40 <ViewsText__Init+0x20>)
  _this->Color = _Const0000;
 8025b2c:	6812      	ldr	r2, [r2, #0]
 8025b2e:	6562      	str	r2, [r4, #84]	; 0x54
  _this->Alignment = ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter;
 8025b30:	2212      	movs	r2, #18
 8025b32:	6522      	str	r2, [r4, #80]	; 0x50
  _this->_.XObject._.GCT = EW_CLASS_GCT( ViewsText );
 8025b34:	60e3      	str	r3, [r4, #12]
  _this->_.VMT = EW_CLASS( ViewsText );
 8025b36:	6023      	str	r3, [r4, #0]
}
 8025b38:	bd10      	pop	{r4, pc}
 8025b3a:	bf00      	nop
 8025b3c:	080387ac 	.word	0x080387ac
 8025b40:	080388ec 	.word	0x080388ec

08025b44 <ViewsRectangle__ReInit>:
  CoreRectView__ReInit( &_this->_.Super );
 8025b44:	f7f9 bdb6 	b.w	801f6b4 <CoreRectView__ReInit>

08025b48 <ViewsFrame__ReInit>:
  CoreRectView__ReInit( &_this->_.Super );
 8025b48:	f7f9 bdb4 	b.w	801f6b4 <CoreRectView__ReInit>

08025b4c <ViewsImage__ReInit>:
  CoreRectView__ReInit( &_this->_.Super );
 8025b4c:	f7f9 bdb2 	b.w	801f6b4 <CoreRectView__ReInit>

08025b50 <ViewsText__ReInit>:
  CoreRectView__ReInit( &_this->_.Super );
 8025b50:	f7f9 bdb0 	b.w	801f6b4 <CoreRectView__ReInit>

08025b54 <ViewsRectangle__Done>:
  _this->_.Super._.VMT = EW_CLASS( CoreRectView );
 8025b54:	4b01      	ldr	r3, [pc, #4]	; (8025b5c <ViewsRectangle__Done+0x8>)
 8025b56:	6003      	str	r3, [r0, #0]
  CoreRectView__Done( &_this->_.Super );
 8025b58:	f7f9 bdea 	b.w	801f730 <CoreRectView__Done>
 8025b5c:	08037ec8 	.word	0x08037ec8

08025b60 <ViewsFrame__Done>:
  _this->_.Super._.VMT = EW_CLASS( CoreRectView );
 8025b60:	4b01      	ldr	r3, [pc, #4]	; (8025b68 <ViewsFrame__Done+0x8>)
 8025b62:	6003      	str	r3, [r0, #0]
  CoreRectView__Done( &_this->_.Super );
 8025b64:	f7f9 bde4 	b.w	801f730 <CoreRectView__Done>
 8025b68:	08037ec8 	.word	0x08037ec8

08025b6c <ViewsImage__Done>:
  _this->_.Super._.VMT = EW_CLASS( CoreRectView );
 8025b6c:	4b01      	ldr	r3, [pc, #4]	; (8025b74 <ViewsImage__Done+0x8>)
 8025b6e:	6003      	str	r3, [r0, #0]
  CoreRectView__Done( &_this->_.Super );
 8025b70:	f7f9 bdde 	b.w	801f730 <CoreRectView__Done>
 8025b74:	08037ec8 	.word	0x08037ec8

08025b78 <ViewsRectangle_Draw>:
{
 8025b78:	b082      	sub	sp, #8
 8025b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b7e:	b093      	sub	sp, #76	; 0x4c
 8025b80:	468a      	mov	sl, r1
 8025b82:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
  XColor c = _this->Color;
 8025b86:	f890 b038 	ldrb.w	fp, [r0, #56]	; 0x38
 8025b8a:	f890 7039 	ldrb.w	r7, [r0, #57]	; 0x39
 8025b8e:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
 8025b92:	f890 403b 	ldrb.w	r4, [r0, #59]	; 0x3b
{
 8025b96:	a91c      	add	r1, sp, #112	; 0x70
 8025b98:	e881 000c 	stmia.w	r1, {r2, r3}
 8025b9c:	4684      	mov	ip, r0
 8025b9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  aBlend = (XBool)( aBlend && (( _this->Super2.viewState & CoreViewStateAlphaBlended ) 
 8025ba0:	f1b9 0f00 	cmp.w	r9, #0
 8025ba4:	d002      	beq.n	8025bac <ViewsRectangle_Draw+0x34>
 8025ba6:	6a02      	ldr	r2, [r0, #32]
 8025ba8:	f3c2 0940 	ubfx	r9, r2, #1, #1
  GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( _this->Super1.Bounds, 
 8025bac:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  aOpacity = aOpacity + 1;
 8025bb0:	3301      	adds	r3, #1
  if ( aOpacity < 256 )
 8025bb2:	2bff      	cmp	r3, #255	; 0xff
  GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( _this->Super1.Bounds, 
 8025bb4:	f10d 0804 	add.w	r8, sp, #4
    ctl.Alpha = (XUInt8)(( aOpacity * ctl.Alpha ) >> 8 );
 8025bb8:	bfd8      	it	le
 8025bba:	435c      	mulle	r4, r3
  ctl = ctr = cbl = cbr = c;
 8025bbc:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
  GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( _this->Super1.Bounds, 
 8025bc0:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
  ctl = ctr = cbl = cbr = c;
 8025bc4:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8025bc8:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
  GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( _this->Super1.Bounds, 
 8025bcc:	e888 0003 	stmia.w	r8, {r0, r1}
 8025bd0:	ad0e      	add	r5, sp, #56	; 0x38
 8025bd2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8025bd6:	9300      	str	r3, [sp, #0]
 8025bd8:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8025bdc:	4628      	mov	r0, r5
    ctl.Alpha = (XUInt8)(( aOpacity * ctl.Alpha ) >> 8 );
 8025bde:	bfd8      	it	le
 8025be0:	f3c4 2407 	ubfxle	r4, r4, #8, #8
  GraphicsCanvas_FillRectangle( aCanvas, aClip, EwMoveRectPos( _this->Super1.Bounds, 
 8025be4:	f7f4 fad7 	bl	801a196 <EwMoveRectPos>
 8025be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025bec:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
 8025bf0:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8025bf4:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
 8025bf8:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 8025bfc:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 8025c00:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
 8025c04:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
 8025c08:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
 8025c0c:	f88d 7035 	strb.w	r7, [sp, #53]	; 0x35
 8025c10:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
 8025c14:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
 8025c18:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
 8025c1c:	f88d 6032 	strb.w	r6, [sp, #50]	; 0x32
 8025c20:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8025c24:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8025c28:	e9cd 7908 	strd	r7, r9, [sp, #32]
 8025c2c:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8025c30:	9405      	str	r4, [sp, #20]
 8025c32:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8025c36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025c38:	9300      	str	r3, [sp, #0]
 8025c3a:	ab1c      	add	r3, sp, #112	; 0x70
 8025c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025c3e:	4650      	mov	r0, sl
 8025c40:	f7ff fda2 	bl	8025788 <GraphicsCanvas_FillRectangle>
}
 8025c44:	b013      	add	sp, #76	; 0x4c
 8025c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c4a:	b002      	add	sp, #8
 8025c4c:	4770      	bx	lr
 8025c4e:	bf00      	nop

08025c50 <ViewsFrame_observerSlot>:
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 8025c50:	6982      	ldr	r2, [r0, #24]
 8025c52:	b112      	cbz	r2, 8025c5a <ViewsFrame_observerSlot+0xa>
 8025c54:	6a03      	ldr	r3, [r0, #32]
 8025c56:	07db      	lsls	r3, r3, #31
 8025c58:	d400      	bmi.n	8025c5c <ViewsFrame_observerSlot+0xc>
 8025c5a:	4770      	bx	lr
{
 8025c5c:	b500      	push	{lr}
 8025c5e:	b083      	sub	sp, #12
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8025c60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8025c62:	9300      	str	r3, [sp, #0]
 8025c64:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8025c68:	4610      	mov	r0, r2
 8025c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025c6c:	f7fc fa3a 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 8025c70:	b003      	add	sp, #12
 8025c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8025c76:	bf00      	nop

08025c78 <ViewsFrame_Draw>:
{
 8025c78:	b082      	sub	sp, #8
 8025c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  XInt32 frameNr = _this->FrameNumber;
 8025c7e:	6c86      	ldr	r6, [r0, #72]	; 0x48
{
 8025c80:	b099      	sub	sp, #100	; 0x64
 8025c82:	4604      	mov	r4, r0
  if (( _this->Bitmap == 0 ) || ( frameNr >= _this->Bitmap->NoOfFrames ))
 8025c84:	e9d0 050f 	ldrd	r0, r5, [r0, #60]	; 0x3c
{
 8025c88:	910f      	str	r1, [sp, #60]	; 0x3c
 8025c8a:	a922      	add	r1, sp, #136	; 0x88
 8025c8c:	e881 000c 	stmia.w	r1, {r2, r3}
 8025c90:	f89d 70a4 	ldrb.w	r7, [sp, #164]	; 0xa4
  if ( _this->animFrameNumber >= 0 )
 8025c94:	ea16 0625 	ands.w	r6, r6, r5, asr #32
 8025c98:	bf38      	it	cc
 8025c9a:	462e      	movcc	r6, r5
  if (( _this->Bitmap == 0 ) || ( frameNr >= _this->Bitmap->NoOfFrames ))
 8025c9c:	b110      	cbz	r0, 8025ca4 <ViewsFrame_Draw+0x2c>
 8025c9e:	69c3      	ldr	r3, [r0, #28]
 8025ca0:	42b3      	cmp	r3, r6
 8025ca2:	dc04      	bgt.n	8025cae <ViewsFrame_Draw+0x36>
}
 8025ca4:	b019      	add	sp, #100	; 0x64
 8025ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025caa:	b002      	add	sp, #8
 8025cac:	4770      	bx	lr
  ResourcesBitmap__Update( _this->Bitmap );
 8025cae:	f7ff feb3 	bl	8025a18 <ResourcesBitmap__Update>
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025cb2:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8025cb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025cb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  c = _this->Color;
 8025cba:	f894 b044 	ldrb.w	fp, [r4, #68]	; 0x44
 8025cbe:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8025cc2:	f894 9046 	ldrb.w	r9, [r4, #70]	; 0x46
 8025cc6:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025cca:	f10d 0c04 	add.w	ip, sp, #4
 8025cce:	e88c 0003 	stmia.w	ip, {r0, r1}
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8025cd2:	1c5d      	adds	r5, r3, #1
 8025cd4:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025cd8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8025cdc:	9200      	str	r2, [sp, #0]
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8025cde:	122d      	asrs	r5, r5, #8
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025ce2:	a814      	add	r0, sp, #80	; 0x50
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8025ce4:	3501      	adds	r5, #1
  r = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8025ce6:	f7f4 fa56 	bl	801a196 <EwMoveRectPos>
  aBlend = (XBool)( aBlend && (( _this->Super2.viewState & CoreViewStateAlphaBlended ) 
 8025cea:	b117      	cbz	r7, 8025cf2 <ViewsFrame_Draw+0x7a>
 8025cec:	6a27      	ldr	r7, [r4, #32]
 8025cee:	f3c7 0740 	ubfx	r7, r7, #1, #1
  if ( opacity < 256 )
 8025cf2:	2dff      	cmp	r5, #255	; 0xff
    ctl.Alpha = (XUInt8)(( ctl.Alpha * opacity ) >> 8 );
 8025cf4:	bfdc      	itt	le
 8025cf6:	fb05 f808 	mulle.w	r8, r5, r8
 8025cfa:	f3c8 2807 	ubfxle	r8, r8, #8, #8
  GraphicsCanvas_DrawBitmapFrame( aCanvas, aClip, _this->Bitmap, frameNr, r, GraphicsEdgesBottom 
 8025cfe:	ab14      	add	r3, sp, #80	; 0x50
 8025d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025d02:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
 8025d06:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
 8025d0a:	f88d 904e 	strb.w	r9, [sp, #78]	; 0x4e
 8025d0e:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8025d12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025d14:	970c      	str	r7, [sp, #48]	; 0x30
 8025d16:	f88d b048 	strb.w	fp, [sp, #72]	; 0x48
 8025d1a:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
 8025d1e:	f88d 904a 	strb.w	r9, [sp, #74]	; 0x4a
 8025d22:	f88d 804b 	strb.w	r8, [sp, #75]	; 0x4b
 8025d26:	6be4      	ldr	r4, [r4, #60]	; 0x3c
  ctl = ctr = cbl = cbr = c;
 8025d28:	f88d b040 	strb.w	fp, [sp, #64]	; 0x40
 8025d2c:	f88d a041 	strb.w	sl, [sp, #65]	; 0x41
 8025d30:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
  GraphicsCanvas_DrawBitmapFrame( aCanvas, aClip, _this->Bitmap, frameNr, r, GraphicsEdgesBottom 
 8025d34:	f88d 8043 	strb.w	r8, [sp, #67]	; 0x43
 8025d38:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
 8025d3c:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
 8025d40:	f88d 9046 	strb.w	r9, [sp, #70]	; 0x46
 8025d44:	f88d 8047 	strb.w	r8, [sp, #71]	; 0x47
 8025d48:	950b      	str	r5, [sp, #44]	; 0x2c
 8025d4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025d4c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025d4e:	950a      	str	r5, [sp, #40]	; 0x28
 8025d50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025d52:	9509      	str	r5, [sp, #36]	; 0x24
 8025d54:	f04f 0c1f 	mov.w	ip, #31
 8025d58:	ad03      	add	r5, sp, #12
 8025d5a:	e9cd c707 	strd	ip, r7, [sp, #28]
 8025d5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8025d62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025d64:	9300      	str	r3, [sp, #0]
 8025d66:	9602      	str	r6, [sp, #8]
 8025d68:	9401      	str	r4, [sp, #4]
 8025d6a:	ab22      	add	r3, sp, #136	; 0x88
 8025d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025d6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025d70:	f7ff fbb2 	bl	80254d8 <GraphicsCanvas_DrawBitmapFrame>
}
 8025d74:	b019      	add	sp, #100	; 0x64
 8025d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d7a:	b002      	add	sp, #8
 8025d7c:	4770      	bx	lr
 8025d7e:	bf00      	nop

08025d80 <ViewsFrame_timerSlot>:
{
 8025d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( _this->Bitmap != 0 )
 8025d82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8025d84:	b085      	sub	sp, #20
 8025d86:	4604      	mov	r4, r0
  if ( _this->Bitmap != 0 )
 8025d88:	b32b      	cbz	r3, 8025dd6 <ViewsFrame_timerSlot+0x56>
    period = _this->Bitmap->NoOfFrames * _this->Bitmap->FrameDelay;
 8025d8a:	e9d3 5106 	ldrd	r5, r1, [r3, #24]
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025d8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    period = _this->Bitmap->NoOfFrames * _this->Bitmap->FrameDelay;
 8025d90:	fb05 f201 	mul.w	r2, r5, r1
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025d94:	b1eb      	cbz	r3, 8025dd2 <ViewsFrame_timerSlot+0x52>
  frameNr = _this->animFrameNumber;
 8025d96:	6c00      	ldr	r0, [r0, #64]	; 0x40
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025d98:	2800      	cmp	r0, #0
 8025d9a:	db2f      	blt.n	8025dfc <ViewsFrame_timerSlot+0x7c>
  if (( _this->timer != 0 ) && ( period > 0 ))
 8025d9c:	2a00      	cmp	r2, #0
 8025d9e:	dd3d      	ble.n	8025e1c <ViewsFrame_timerSlot+0x9c>
 8025da0:	69de      	ldr	r6, [r3, #28]
 8025da2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    XInt32 time = (XInt32)( _this->timer->Time - _this->startTime );
 8025da4:	1af3      	subs	r3, r6, r3
    if ( time >= period )
 8025da6:	429a      	cmp	r2, r3
    frameNr = time / _this->Bitmap->FrameDelay;
 8025da8:	fb93 f5f5 	sdiv	r5, r3, r5
    if ( time >= period )
 8025dac:	dc09      	bgt.n	8025dc2 <ViewsFrame_timerSlot+0x42>
      _this->startTime = _this->timer->Time - ( time % period );
 8025dae:	fb93 f7f2 	sdiv	r7, r3, r2
      frameNr = frameNr % _this->Bitmap->NoOfFrames;
 8025db2:	fb95 fcf1 	sdiv	ip, r5, r1
      _this->startTime = _this->timer->Time - ( time % period );
 8025db6:	fb02 3317 	mls	r3, r2, r7, r3
 8025dba:	1af6      	subs	r6, r6, r3
 8025dbc:	64e6      	str	r6, [r4, #76]	; 0x4c
      frameNr = frameNr % _this->Bitmap->NoOfFrames;
 8025dbe:	fb01 551c 	mls	r5, r1, ip, r5
  if ((( frameNr != _this->animFrameNumber ) && ( _this->Super2.Owner != 0 )) && 
 8025dc2:	4285      	cmp	r5, r0
 8025dc4:	d004      	beq.n	8025dd0 <ViewsFrame_timerSlot+0x50>
 8025dc6:	69a0      	ldr	r0, [r4, #24]
 8025dc8:	b110      	cbz	r0, 8025dd0 <ViewsFrame_timerSlot+0x50>
      (( _this->Super2.viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8025dca:	6a23      	ldr	r3, [r4, #32]
  if ((( frameNr != _this->animFrameNumber ) && ( _this->Super2.Owner != 0 )) && 
 8025dcc:	07db      	lsls	r3, r3, #31
 8025dce:	d41d      	bmi.n	8025e0c <ViewsFrame_timerSlot+0x8c>
  _this->animFrameNumber = frameNr;
 8025dd0:	6425      	str	r5, [r4, #64]	; 0x40
}
 8025dd2:	b005      	add	sp, #20
 8025dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (( _this->timer != 0 ) && ( period > 0 ))
 8025dd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025dd8:	2b00      	cmp	r3, #0
 8025dda:	d0fa      	beq.n	8025dd2 <ViewsFrame_timerSlot+0x52>
    EwDetachObjObserver( EwNewSlot( _this, ViewsFrame_timerSlot ), (XObject)_this->timer, 
 8025ddc:	ad02      	add	r5, sp, #8
 8025dde:	4628      	mov	r0, r5
 8025de0:	4621      	mov	r1, r4
 8025de2:	4a10      	ldr	r2, [pc, #64]	; (8025e24 <ViewsFrame_timerSlot+0xa4>)
 8025de4:	f7f5 f9f6 	bl	801b1d4 <EwNewSlot>
 8025de8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025dec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8025dee:	2300      	movs	r3, #0
 8025df0:	f7f5 fbb2 	bl	801b558 <EwDetachObjObserver>
    _this->timer = 0;
 8025df4:	2300      	movs	r3, #0
 8025df6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8025df8:	b005      	add	sp, #20
 8025dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025dfc:	2a00      	cmp	r2, #0
 8025dfe:	dd0d      	ble.n	8025e1c <ViewsFrame_timerSlot+0x9c>
    _this->startTime = _this->timer->Time - ( _this->FrameNumber * _this->Bitmap->FrameDelay );
 8025e00:	69de      	ldr	r6, [r3, #28]
 8025e02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8025e04:	fb03 6315 	mls	r3, r3, r5, r6
 8025e08:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (( _this->timer != 0 ) && ( period > 0 ))
 8025e0a:	e7cb      	b.n	8025da4 <ViewsFrame_timerSlot+0x24>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8025e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025e0e:	9300      	str	r3, [sp, #0]
 8025e10:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8025e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025e16:	f7fc f965 	bl	80220e4 <CoreGroup__InvalidateArea>
 8025e1a:	e7d9      	b.n	8025dd0 <ViewsFrame_timerSlot+0x50>
  if (( period == 0 ) && ( _this->timer != 0 ))
 8025e1c:	2a00      	cmp	r2, #0
 8025e1e:	d0dd      	beq.n	8025ddc <ViewsFrame_timerSlot+0x5c>
 8025e20:	e7d7      	b.n	8025dd2 <ViewsFrame_timerSlot+0x52>
 8025e22:	bf00      	nop
 8025e24:	08025d81 	.word	0x08025d81

08025e28 <ViewsImage_timerSlot>:
{
 8025e28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( _this->Bitmap != 0 )
 8025e2a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8025e2c:	b085      	sub	sp, #20
 8025e2e:	4604      	mov	r4, r0
  if ( _this->Bitmap != 0 )
 8025e30:	b32b      	cbz	r3, 8025e7e <ViewsImage_timerSlot+0x56>
    period = _this->Bitmap->NoOfFrames * _this->Bitmap->FrameDelay;
 8025e32:	e9d3 5106 	ldrd	r5, r1, [r3, #24]
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025e36:	6b82      	ldr	r2, [r0, #56]	; 0x38
    period = _this->Bitmap->NoOfFrames * _this->Bitmap->FrameDelay;
 8025e38:	fb05 f301 	mul.w	r3, r5, r1
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025e3c:	b1ea      	cbz	r2, 8025e7a <ViewsImage_timerSlot+0x52>
  frameNr = _this->animFrameNumber;
 8025e3e:	6c40      	ldr	r0, [r0, #68]	; 0x44
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025e40:	2800      	cmp	r0, #0
 8025e42:	db2f      	blt.n	8025ea4 <ViewsImage_timerSlot+0x7c>
  if (( _this->timer != 0 ) && ( period > 0 ))
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	dd3b      	ble.n	8025ec0 <ViewsImage_timerSlot+0x98>
 8025e48:	69d6      	ldr	r6, [r2, #28]
 8025e4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025e4c:	1ab2      	subs	r2, r6, r2
    if ( time >= period )
 8025e4e:	4293      	cmp	r3, r2
 8025e50:	fb92 f5f5 	sdiv	r5, r2, r5
 8025e54:	dc09      	bgt.n	8025e6a <ViewsImage_timerSlot+0x42>
      _this->startTime = _this->timer->Time - ( time % period );
 8025e56:	fb92 f7f3 	sdiv	r7, r2, r3
 8025e5a:	fb03 2317 	mls	r3, r3, r7, r2
 8025e5e:	1af6      	subs	r6, r6, r3
 8025e60:	6426      	str	r6, [r4, #64]	; 0x40
      frameNr = frameNr % _this->Bitmap->NoOfFrames;
 8025e62:	fb95 f3f1 	sdiv	r3, r5, r1
 8025e66:	fb01 5513 	mls	r5, r1, r3, r5
  if ((( frameNr != _this->animFrameNumber ) && ( _this->Super2.Owner != 0 )) && 
 8025e6a:	4285      	cmp	r5, r0
 8025e6c:	d004      	beq.n	8025e78 <ViewsImage_timerSlot+0x50>
 8025e6e:	69a0      	ldr	r0, [r4, #24]
 8025e70:	b110      	cbz	r0, 8025e78 <ViewsImage_timerSlot+0x50>
      (( _this->Super2.viewState & CoreViewStateVisible ) == CoreViewStateVisible ))
 8025e72:	6a23      	ldr	r3, [r4, #32]
  if ((( frameNr != _this->animFrameNumber ) && ( _this->Super2.Owner != 0 )) && 
 8025e74:	07db      	lsls	r3, r3, #31
 8025e76:	d41b      	bmi.n	8025eb0 <ViewsImage_timerSlot+0x88>
  _this->animFrameNumber = frameNr;
 8025e78:	6465      	str	r5, [r4, #68]	; 0x44
}
 8025e7a:	b005      	add	sp, #20
 8025e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (( _this->timer != 0 ) && ( period > 0 ))
 8025e7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d0fa      	beq.n	8025e7a <ViewsImage_timerSlot+0x52>
    EwDetachObjObserver( EwNewSlot( _this, ViewsImage_timerSlot ), (XObject)_this->timer, 
 8025e84:	ad02      	add	r5, sp, #8
 8025e86:	4628      	mov	r0, r5
 8025e88:	4621      	mov	r1, r4
 8025e8a:	4a0f      	ldr	r2, [pc, #60]	; (8025ec8 <ViewsImage_timerSlot+0xa0>)
 8025e8c:	f7f5 f9a2 	bl	801b1d4 <EwNewSlot>
 8025e90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025e94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8025e96:	2300      	movs	r3, #0
 8025e98:	f7f5 fb5e 	bl	801b558 <EwDetachObjObserver>
    _this->timer = 0;
 8025e9c:	2300      	movs	r3, #0
 8025e9e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8025ea0:	b005      	add	sp, #20
 8025ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((( _this->timer != 0 ) && ( _this->animFrameNumber < 0 )) && ( period > 0 ))
 8025ea4:	2b00      	cmp	r3, #0
 8025ea6:	dd0b      	ble.n	8025ec0 <ViewsImage_timerSlot+0x98>
    _this->startTime = _this->timer->Time;
 8025ea8:	69d3      	ldr	r3, [r2, #28]
 8025eaa:	6423      	str	r3, [r4, #64]	; 0x40
 8025eac:	2500      	movs	r5, #0
 8025eae:	e7de      	b.n	8025e6e <ViewsImage_timerSlot+0x46>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8025eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025eb2:	9300      	str	r3, [sp, #0]
 8025eb4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8025eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025eba:	f7fc f913 	bl	80220e4 <CoreGroup__InvalidateArea>
 8025ebe:	e7db      	b.n	8025e78 <ViewsImage_timerSlot+0x50>
  if (( period == 0 ) && ( _this->timer != 0 ))
 8025ec0:	2b00      	cmp	r3, #0
 8025ec2:	d0df      	beq.n	8025e84 <ViewsImage_timerSlot+0x5c>
 8025ec4:	e7d9      	b.n	8025e7a <ViewsImage_timerSlot+0x52>
 8025ec6:	bf00      	nop
 8025ec8:	08025e29 	.word	0x08025e29

08025ecc <ViewsText_preReparseSlot>:

/* 'C' function for method : 'Views::Text.preReparseSlot()' */
void ViewsText_preReparseSlot( ViewsText _this, XObject sender )
{
 8025ecc:	b530      	push	{r4, r5, lr}
 8025ece:	b083      	sub	sp, #12
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwPostSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 8025ed0:	466d      	mov	r5, sp
{
 8025ed2:	4604      	mov	r4, r0
  EwPostSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 8025ed4:	4601      	mov	r1, r0
 8025ed6:	4a06      	ldr	r2, [pc, #24]	; (8025ef0 <ViewsText_preReparseSlot+0x24>)
 8025ed8:	4628      	mov	r0, r5
 8025eda:	f7f5 f97b 	bl	801b1d4 <EwNewSlot>
 8025ede:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025ee2:	4622      	mov	r2, r4
}
 8025ee4:	b003      	add	sp, #12
 8025ee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 8025eea:	f7f5 b9a1 	b.w	801b230 <EwPostSignal>
 8025eee:	bf00      	nop
 8025ef0:	080270d5 	.word	0x080270d5

08025ef4 <ViewsText_OnSetBounds>:
{
 8025ef4:	b084      	sub	sp, #16
 8025ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ef8:	b08f      	sub	sp, #60	; 0x3c
 8025efa:	ac15      	add	r4, sp, #84	; 0x54
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 8025efc:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 8025f00:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8025f04:	4606      	mov	r6, r0
  if ( !EwCompRect( value, _this->Super1.Bounds ))
 8025f06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025f0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8025f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025f12:	f7f3 fffc 	bl	8019f0e <EwCompRect>
 8025f16:	b920      	cbnz	r0, 8025f22 <ViewsText_OnSetBounds+0x2e>
}
 8025f18:	b00f      	add	sp, #60	; 0x3c
 8025f1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025f1e:	b004      	add	sp, #16
 8025f20:	4770      	bx	lr
  resized = (XBool)( EwGetRectW( _this->Super1.Bounds ) != EwGetRectW( value ));
 8025f22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025f26:	f7f4 f955 	bl	801a1d4 <EwGetRectW>
 8025f2a:	4607      	mov	r7, r0
 8025f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8025f30:	f7f4 f950 	bl	801a1d4 <EwGetRectW>
  if ((( resized && _this->WrapText ) && _this->reparsed ) && !(( _this->Super2.viewState 
 8025f34:	4287      	cmp	r7, r0
 8025f36:	d030      	beq.n	8025f9a <ViewsText_OnSetBounds+0xa6>
 8025f38:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8025f3c:	b36b      	cbz	r3, 8025f9a <ViewsText_OnSetBounds+0xa6>
 8025f3e:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 8025f42:	b133      	cbz	r3, 8025f52 <ViewsText_OnSetBounds+0x5e>
      & CoreViewStateUpdatingLayout ) == CoreViewStateUpdatingLayout ))
 8025f44:	6a33      	ldr	r3, [r6, #32]
  if ((( resized && _this->WrapText ) && _this->reparsed ) && !(( _this->Super2.viewState 
 8025f46:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8025f4a:	d018      	beq.n	8025f7e <ViewsText_OnSetBounds+0x8a>
  if ((( _this->Ellipsis && _this->reparsed ) && EwCompPoint( EwGetRectSize( _this->Super1.Bounds ), 
 8025f4c:	f896 305a 	ldrb.w	r3, [r6, #90]	; 0x5a
 8025f50:	bb5b      	cbnz	r3, 8025faa <ViewsText_OnSetBounds+0xb6>
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 8025f52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f54:	9300      	str	r3, [sp, #0]
 8025f56:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8025f5a:	4630      	mov	r0, r6
  EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 8025f5c:	ac0c      	add	r4, sp, #48	; 0x30
  CoreRectView_OnSetBounds((CoreRectView)_this, value );
 8025f5e:	f7f9 ff41 	bl	801fde4 <CoreRectView_OnSetBounds>
  EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 8025f62:	4620      	mov	r0, r4
 8025f64:	4631      	mov	r1, r6
 8025f66:	4a26      	ldr	r2, [pc, #152]	; (8026000 <ViewsText_OnSetBounds+0x10c>)
 8025f68:	f7f5 f934 	bl	801b1d4 <EwNewSlot>
 8025f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025f70:	4632      	mov	r2, r6
}
 8025f72:	b00f      	add	sp, #60	; 0x3c
 8025f74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025f78:	b004      	add	sp, #16
  EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 8025f7a:	f7f5 b959 	b.w	801b230 <EwPostSignal>
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8025f7e:	af04      	add	r7, sp, #16
 8025f80:	4a20      	ldr	r2, [pc, #128]	; (8026004 <ViewsText_OnSetBounds+0x110>)
    _this->flowString = 0;
 8025f82:	63f3      	str	r3, [r6, #60]	; 0x3c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8025f84:	4638      	mov	r0, r7
 8025f86:	4631      	mov	r1, r6
    _this->reparsed = 0;
 8025f88:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8025f8c:	f7f5 f922 	bl	801b1d4 <EwNewSlot>
 8025f90:	e897 0003 	ldmia.w	r7, {r0, r1}
 8025f94:	4632      	mov	r2, r6
 8025f96:	f7f5 f94b 	bl	801b230 <EwPostSignal>
  if ((( _this->Ellipsis && _this->reparsed ) && EwCompPoint( EwGetRectSize( _this->Super1.Bounds ), 
 8025f9a:	f896 305a 	ldrb.w	r3, [r6, #90]	; 0x5a
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	d0d7      	beq.n	8025f52 <ViewsText_OnSetBounds+0x5e>
 8025fa2:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 8025fa6:	2b00      	cmp	r3, #0
 8025fa8:	d0d3      	beq.n	8025f52 <ViewsText_OnSetBounds+0x5e>
 8025faa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8025fac:	9300      	str	r3, [sp, #0]
 8025fae:	af06      	add	r7, sp, #24
 8025fb0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8025fb4:	4638      	mov	r0, r7
 8025fb6:	f7f4 f922 	bl	801a1fe <EwGetRectSize>
 8025fba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025fbc:	9300      	str	r3, [sp, #0]
 8025fbe:	ad08      	add	r5, sp, #32
 8025fc0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8025fc4:	4628      	mov	r0, r5
 8025fc6:	f7f4 f91a 	bl	801a1fe <EwGetRectSize>
 8025fca:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025fce:	e897 0003 	ldmia.w	r7, {r0, r1}
 8025fd2:	f7f3 ff0a 	bl	8019dea <EwCompPoint>
 8025fd6:	2800      	cmp	r0, #0
 8025fd8:	d0bb      	beq.n	8025f52 <ViewsText_OnSetBounds+0x5e>
      EwGetRectSize( value ))) && !(( _this->Super2.viewState & CoreViewStateUpdatingLayout ) 
 8025fda:	6a33      	ldr	r3, [r6, #32]
 8025fdc:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8025fe0:	d1b7      	bne.n	8025f52 <ViewsText_OnSetBounds+0x5e>
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8025fe2:	ad0a      	add	r5, sp, #40	; 0x28
 8025fe4:	4628      	mov	r0, r5
 8025fe6:	4631      	mov	r1, r6
 8025fe8:	4a06      	ldr	r2, [pc, #24]	; (8026004 <ViewsText_OnSetBounds+0x110>)
    _this->flowString = 0;
 8025fea:	63f3      	str	r3, [r6, #60]	; 0x3c
    _this->reparsed = 0;
 8025fec:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8025ff0:	f7f5 f8f0 	bl	801b1d4 <EwNewSlot>
 8025ff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025ff8:	4632      	mov	r2, r6
 8025ffa:	f7f5 f919 	bl	801b230 <EwPostSignal>
 8025ffe:	e7a8      	b.n	8025f52 <ViewsText_OnSetBounds+0x5e>
 8026000:	08025ac5 	.word	0x08025ac5
 8026004:	08025ecd 	.word	0x08025ecd

08026008 <ViewsText__Done>:
{
 8026008:	b510      	push	{r4, lr}
 802600a:	4604      	mov	r4, r0
  if ( _this->bidiContext != 0 )
 802600c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802600e:	b930      	cbnz	r0, 802601e <ViewsText__Done+0x16>
  _this->_.Super._.VMT = EW_CLASS( CoreRectView );
 8026010:	4b05      	ldr	r3, [pc, #20]	; (8026028 <ViewsText__Done+0x20>)
 8026012:	6023      	str	r3, [r4, #0]
  CoreRectView__Done( &_this->_.Super );
 8026014:	4620      	mov	r0, r4
}
 8026016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreRectView__Done( &_this->_.Super );
 802601a:	f7f9 bb89 	b.w	801f730 <CoreRectView__Done>
  EwFreeBidi( aBidi );
 802601e:	f7ea ffcd 	bl	8010fbc <EwFreeBidi>
    _this->bidiContext = 0;
 8026022:	2300      	movs	r3, #0
 8026024:	6463      	str	r3, [r4, #68]	; 0x44
 8026026:	e7f3      	b.n	8026010 <ViewsText__Done+0x8>
 8026028:	08037ec8 	.word	0x08037ec8

0802602c <ViewsRectangle_OnSetColor>:
{
 802602c:	b510      	push	{r4, lr}
 802602e:	b084      	sub	sp, #16
 8026030:	4604      	mov	r4, r0
 8026032:	9103      	str	r1, [sp, #12]
  if ( !EwCompColor( value, _this->Color ))
 8026034:	4608      	mov	r0, r1
 8026036:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8026038:	f7f2 f9b7 	bl	80183aa <EwCompColor>
 802603c:	b130      	cbz	r0, 802604c <ViewsRectangle_OnSetColor+0x20>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 802603e:	69a0      	ldr	r0, [r4, #24]
  _this->Color = value;
 8026040:	9b03      	ldr	r3, [sp, #12]
 8026042:	63a3      	str	r3, [r4, #56]	; 0x38
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 8026044:	b110      	cbz	r0, 802604c <ViewsRectangle_OnSetColor+0x20>
 8026046:	6a23      	ldr	r3, [r4, #32]
 8026048:	07db      	lsls	r3, r3, #31
 802604a:	d401      	bmi.n	8026050 <ViewsRectangle_OnSetColor+0x24>
}
 802604c:	b004      	add	sp, #16
 802604e:	bd10      	pop	{r4, pc}
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8026050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026052:	9300      	str	r3, [sp, #0]
 8026054:	3428      	adds	r4, #40	; 0x28
 8026056:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 802605a:	f7fc f843 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 802605e:	b004      	add	sp, #16
 8026060:	bd10      	pop	{r4, pc}
 8026062:	bf00      	nop

08026064 <ViewsFrame_OnSetColor>:
{
 8026064:	b510      	push	{r4, lr}
 8026066:	b084      	sub	sp, #16
 8026068:	4604      	mov	r4, r0
 802606a:	9103      	str	r1, [sp, #12]
  if ( !EwCompColor( value, _this->Color ))
 802606c:	4608      	mov	r0, r1
 802606e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8026070:	f7f2 f99b 	bl	80183aa <EwCompColor>
 8026074:	b130      	cbz	r0, 8026084 <ViewsFrame_OnSetColor+0x20>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 8026076:	69a0      	ldr	r0, [r4, #24]
  _this->Color = value;
 8026078:	9b03      	ldr	r3, [sp, #12]
 802607a:	6463      	str	r3, [r4, #68]	; 0x44
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 802607c:	b110      	cbz	r0, 8026084 <ViewsFrame_OnSetColor+0x20>
 802607e:	6a23      	ldr	r3, [r4, #32]
 8026080:	07db      	lsls	r3, r3, #31
 8026082:	d401      	bmi.n	8026088 <ViewsFrame_OnSetColor+0x24>
}
 8026084:	b004      	add	sp, #16
 8026086:	bd10      	pop	{r4, pc}
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8026088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802608a:	9300      	str	r3, [sp, #0]
 802608c:	3428      	adds	r4, #40	; 0x28
 802608e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8026092:	f7fc f827 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 8026096:	b004      	add	sp, #16
 8026098:	bd10      	pop	{r4, pc}
 802609a:	bf00      	nop

0802609c <ViewsFrame_OnSetAnimated>:
  if ( _this->Animated == value )
 802609c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80260a0:	428b      	cmp	r3, r1
 80260a2:	d03c      	beq.n	802611e <ViewsFrame_OnSetAnimated+0x82>
{
 80260a4:	b570      	push	{r4, r5, r6, lr}
  _this->animFrameNumber = -1;
 80260a6:	f04f 33ff 	mov.w	r3, #4294967295
{
 80260aa:	b088      	sub	sp, #32
 80260ac:	4604      	mov	r4, r0
 80260ae:	460d      	mov	r5, r1
  _this->Animated = value;
 80260b0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
  _this->animFrameNumber = -1;
 80260b4:	6403      	str	r3, [r0, #64]	; 0x40
  if ( !value && ( _this->timer != 0 ))
 80260b6:	b9a9      	cbnz	r1, 80260e4 <ViewsFrame_OnSetAnimated+0x48>
 80260b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80260ba:	b163      	cbz	r3, 80260d6 <ViewsFrame_OnSetAnimated+0x3a>
    EwDetachObjObserver( EwNewSlot( _this, ViewsFrame_timerSlot ), (XObject)_this->timer, 
 80260bc:	ae02      	add	r6, sp, #8
 80260be:	4a1d      	ldr	r2, [pc, #116]	; (8026134 <ViewsFrame_OnSetAnimated+0x98>)
 80260c0:	4630      	mov	r0, r6
 80260c2:	4621      	mov	r1, r4
 80260c4:	f7f5 f886 	bl	801b1d4 <EwNewSlot>
 80260c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80260cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80260ce:	462b      	mov	r3, r5
 80260d0:	f7f5 fa42 	bl	801b558 <EwDetachObjObserver>
    _this->timer = 0;
 80260d4:	63a5      	str	r5, [r4, #56]	; 0x38
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80260d6:	69a0      	ldr	r0, [r4, #24]
 80260d8:	b110      	cbz	r0, 80260e0 <ViewsFrame_OnSetAnimated+0x44>
 80260da:	6a23      	ldr	r3, [r4, #32]
 80260dc:	07db      	lsls	r3, r3, #31
 80260de:	d41f      	bmi.n	8026120 <ViewsFrame_OnSetAnimated+0x84>
}
 80260e0:	b008      	add	sp, #32
 80260e2:	bd70      	pop	{r4, r5, r6, pc}
    _this->timer = ((CoreTimer)EwGetAutoObject( &EffectsEffectTimer, EffectsEffectTimerClass ));
 80260e4:	4914      	ldr	r1, [pc, #80]	; (8026138 <ViewsFrame_OnSetAnimated+0x9c>)
 80260e6:	4815      	ldr	r0, [pc, #84]	; (802613c <ViewsFrame_OnSetAnimated+0xa0>)
 80260e8:	f7f3 fb5e 	bl	80197a8 <EwGetAutoObject>
    EwAttachObjObserver( EwNewSlot( _this, ViewsFrame_timerSlot ), (XObject)_this->timer, 
 80260ec:	ad04      	add	r5, sp, #16
    _this->timer = ((CoreTimer)EwGetAutoObject( &EffectsEffectTimer, EffectsEffectTimerClass ));
 80260ee:	63a0      	str	r0, [r4, #56]	; 0x38
    EwAttachObjObserver( EwNewSlot( _this, ViewsFrame_timerSlot ), (XObject)_this->timer, 
 80260f0:	4621      	mov	r1, r4
 80260f2:	4628      	mov	r0, r5
 80260f4:	4a0f      	ldr	r2, [pc, #60]	; (8026134 <ViewsFrame_OnSetAnimated+0x98>)
 80260f6:	f7f5 f86d 	bl	801b1d4 <EwNewSlot>
 80260fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80260fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8026100:	2300      	movs	r3, #0
    EwPostSignal( EwNewSlot( _this, ViewsFrame_timerSlot ), ((XObject)_this ));
 8026102:	ad06      	add	r5, sp, #24
    EwAttachObjObserver( EwNewSlot( _this, ViewsFrame_timerSlot ), (XObject)_this->timer, 
 8026104:	f7f5 f8f6 	bl	801b2f4 <EwAttachObjObserver>
    EwPostSignal( EwNewSlot( _this, ViewsFrame_timerSlot ), ((XObject)_this ));
 8026108:	4628      	mov	r0, r5
 802610a:	4621      	mov	r1, r4
 802610c:	4a09      	ldr	r2, [pc, #36]	; (8026134 <ViewsFrame_OnSetAnimated+0x98>)
 802610e:	f7f5 f861 	bl	801b1d4 <EwNewSlot>
 8026112:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026116:	4622      	mov	r2, r4
 8026118:	f7f5 f88a 	bl	801b230 <EwPostSignal>
 802611c:	e7db      	b.n	80260d6 <ViewsFrame_OnSetAnimated+0x3a>
 802611e:	4770      	bx	lr
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8026120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026122:	9300      	str	r3, [sp, #0]
 8026124:	3428      	adds	r4, #40	; 0x28
 8026126:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 802612a:	f7fb ffdb 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 802612e:	b008      	add	sp, #32
 8026130:	bd70      	pop	{r4, r5, r6, pc}
 8026132:	bf00      	nop
 8026134:	08025d81 	.word	0x08025d81
 8026138:	080382e0 	.word	0x080382e0
 802613c:	080382a0 	.word	0x080382a0

08026140 <ViewsFrame_OnSetFrameNumber>:
  if (( value == _this->FrameNumber ) && ( _this->animFrameNumber == -1 ))
 8026140:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8026142:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026146:	428b      	cmp	r3, r1
 8026148:	d015      	beq.n	8026176 <ViewsFrame_OnSetFrameNumber+0x36>
  if ( _this->timer == 0 )
 802614a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  _this->FrameNumber = value;
 802614c:	6481      	str	r1, [r0, #72]	; 0x48
  if ( _this->timer == 0 )
 802614e:	b1cb      	cbz	r3, 8026184 <ViewsFrame_OnSetFrameNumber+0x44>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 8026150:	6982      	ldr	r2, [r0, #24]
 8026152:	b112      	cbz	r2, 802615a <ViewsFrame_OnSetFrameNumber+0x1a>
 8026154:	6a03      	ldr	r3, [r0, #32]
 8026156:	07db      	lsls	r3, r3, #31
 8026158:	d400      	bmi.n	802615c <ViewsFrame_OnSetFrameNumber+0x1c>
 802615a:	4770      	bx	lr
{
 802615c:	b500      	push	{lr}
 802615e:	b083      	sub	sp, #12
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8026160:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8026162:	9300      	str	r3, [sp, #0]
 8026164:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8026168:	4610      	mov	r0, r2
 802616a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802616c:	f7fb ffba 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 8026170:	b003      	add	sp, #12
 8026172:	f85d fb04 	ldr.w	pc, [sp], #4
  if (( value == _this->FrameNumber ) && ( _this->animFrameNumber == -1 ))
 8026176:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8026178:	3301      	adds	r3, #1
 802617a:	d0ee      	beq.n	802615a <ViewsFrame_OnSetFrameNumber+0x1a>
  if ( _this->timer == 0 )
 802617c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  _this->FrameNumber = value;
 802617e:	6481      	str	r1, [r0, #72]	; 0x48
  if ( _this->timer == 0 )
 8026180:	2b00      	cmp	r3, #0
 8026182:	d1e5      	bne.n	8026150 <ViewsFrame_OnSetFrameNumber+0x10>
    _this->animFrameNumber = -1;
 8026184:	f04f 33ff 	mov.w	r3, #4294967295
 8026188:	6403      	str	r3, [r0, #64]	; 0x40
 802618a:	e7e1      	b.n	8026150 <ViewsFrame_OnSetFrameNumber+0x10>

0802618c <ViewsFrame_OnSetBitmap>:
  if ( value == _this->Bitmap )
 802618c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802618e:	428b      	cmp	r3, r1
 8026190:	d045      	beq.n	802621e <ViewsFrame_OnSetBitmap+0x92>
{
 8026192:	b570      	push	{r4, r5, r6, lr}
 8026194:	4604      	mov	r4, r0
 8026196:	b086      	sub	sp, #24
 8026198:	460d      	mov	r5, r1
  if (( _this->Bitmap != 0 ) && _this->Bitmap->Mutable )
 802619a:	b113      	cbz	r3, 80261a2 <ViewsFrame_OnSetBitmap+0x16>
 802619c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80261a0:	bb1b      	cbnz	r3, 80261ea <ViewsFrame_OnSetBitmap+0x5e>
  _this->animFrameNumber = -1;
 80261a2:	f04f 33ff 	mov.w	r3, #4294967295
 80261a6:	e9c4 530f 	strd	r5, r3, [r4, #60]	; 0x3c
  if (( value != 0 ) && value->Mutable )
 80261aa:	b115      	cbz	r5, 80261b2 <ViewsFrame_OnSetBitmap+0x26>
 80261ac:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80261b0:	bb43      	cbnz	r3, 8026204 <ViewsFrame_OnSetBitmap+0x78>
  if ( _this->Animated )
 80261b2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80261b6:	b933      	cbnz	r3, 80261c6 <ViewsFrame_OnSetBitmap+0x3a>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80261b8:	69a0      	ldr	r0, [r4, #24]
 80261ba:	b110      	cbz	r0, 80261c2 <ViewsFrame_OnSetBitmap+0x36>
 80261bc:	6a23      	ldr	r3, [r4, #32]
 80261be:	07db      	lsls	r3, r3, #31
 80261c0:	d40a      	bmi.n	80261d8 <ViewsFrame_OnSetBitmap+0x4c>
}
 80261c2:	b006      	add	sp, #24
 80261c4:	bd70      	pop	{r4, r5, r6, pc}
    ViewsFrame_OnSetAnimated( _this, 0 );
 80261c6:	4620      	mov	r0, r4
 80261c8:	2100      	movs	r1, #0
 80261ca:	f7ff ff67 	bl	802609c <ViewsFrame_OnSetAnimated>
    ViewsFrame_OnSetAnimated( _this, 1 );
 80261ce:	2101      	movs	r1, #1
 80261d0:	4620      	mov	r0, r4
 80261d2:	f7ff ff63 	bl	802609c <ViewsFrame_OnSetAnimated>
 80261d6:	e7ef      	b.n	80261b8 <ViewsFrame_OnSetBitmap+0x2c>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 80261d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80261da:	9300      	str	r3, [sp, #0]
 80261dc:	3428      	adds	r4, #40	; 0x28
 80261de:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80261e2:	f7fb ff7f 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 80261e6:	b006      	add	sp, #24
 80261e8:	bd70      	pop	{r4, r5, r6, pc}
    EwDetachObjObserver( EwNewSlot( _this, ViewsFrame_observerSlot ), (XObject)_this->Bitmap, 
 80261ea:	ae02      	add	r6, sp, #8
 80261ec:	4630      	mov	r0, r6
 80261ee:	4621      	mov	r1, r4
 80261f0:	4a0b      	ldr	r2, [pc, #44]	; (8026220 <ViewsFrame_OnSetBitmap+0x94>)
 80261f2:	f7f4 ffef 	bl	801b1d4 <EwNewSlot>
 80261f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80261fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80261fc:	2300      	movs	r3, #0
 80261fe:	f7f5 f9ab 	bl	801b558 <EwDetachObjObserver>
 8026202:	e7ce      	b.n	80261a2 <ViewsFrame_OnSetBitmap+0x16>
    EwAttachObjObserver( EwNewSlot( _this, ViewsFrame_observerSlot ), (XObject)value, 
 8026204:	ae04      	add	r6, sp, #16
 8026206:	4630      	mov	r0, r6
 8026208:	4621      	mov	r1, r4
 802620a:	4a05      	ldr	r2, [pc, #20]	; (8026220 <ViewsFrame_OnSetBitmap+0x94>)
 802620c:	f7f4 ffe2 	bl	801b1d4 <EwNewSlot>
 8026210:	e896 0003 	ldmia.w	r6, {r0, r1}
 8026214:	462a      	mov	r2, r5
 8026216:	2300      	movs	r3, #0
 8026218:	f7f5 f86c 	bl	801b2f4 <EwAttachObjObserver>
 802621c:	e7c9      	b.n	80261b2 <ViewsFrame_OnSetBitmap+0x26>
 802621e:	4770      	bx	lr
 8026220:	08025c51 	.word	0x08025c51

08026224 <ViewsImage_OnSetAnimated>:
  if ( _this->Animated == value )
 8026224:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8026228:	428b      	cmp	r3, r1
 802622a:	d03c      	beq.n	80262a6 <ViewsImage_OnSetAnimated+0x82>
{
 802622c:	b570      	push	{r4, r5, r6, lr}
  _this->animFrameNumber = -1;
 802622e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8026232:	b088      	sub	sp, #32
 8026234:	4604      	mov	r4, r0
 8026236:	460d      	mov	r5, r1
  _this->Animated = value;
 8026238:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
  _this->animFrameNumber = -1;
 802623c:	6443      	str	r3, [r0, #68]	; 0x44
  if ( !value && ( _this->timer != 0 ))
 802623e:	b9a9      	cbnz	r1, 802626c <ViewsImage_OnSetAnimated+0x48>
 8026240:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8026242:	b163      	cbz	r3, 802625e <ViewsImage_OnSetAnimated+0x3a>
    EwDetachObjObserver( EwNewSlot( _this, ViewsImage_timerSlot ), (XObject)_this->timer, 
 8026244:	ae02      	add	r6, sp, #8
 8026246:	4a1d      	ldr	r2, [pc, #116]	; (80262bc <ViewsImage_OnSetAnimated+0x98>)
 8026248:	4630      	mov	r0, r6
 802624a:	4621      	mov	r1, r4
 802624c:	f7f4 ffc2 	bl	801b1d4 <EwNewSlot>
 8026250:	e896 0003 	ldmia.w	r6, {r0, r1}
 8026254:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8026256:	462b      	mov	r3, r5
 8026258:	f7f5 f97e 	bl	801b558 <EwDetachObjObserver>
    _this->timer = 0;
 802625c:	63a5      	str	r5, [r4, #56]	; 0x38
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 802625e:	69a0      	ldr	r0, [r4, #24]
 8026260:	b110      	cbz	r0, 8026268 <ViewsImage_OnSetAnimated+0x44>
 8026262:	6a23      	ldr	r3, [r4, #32]
 8026264:	07db      	lsls	r3, r3, #31
 8026266:	d41f      	bmi.n	80262a8 <ViewsImage_OnSetAnimated+0x84>
}
 8026268:	b008      	add	sp, #32
 802626a:	bd70      	pop	{r4, r5, r6, pc}
    _this->timer = ((CoreTimer)EwGetAutoObject( &EffectsEffectTimer, EffectsEffectTimerClass ));
 802626c:	4914      	ldr	r1, [pc, #80]	; (80262c0 <ViewsImage_OnSetAnimated+0x9c>)
 802626e:	4815      	ldr	r0, [pc, #84]	; (80262c4 <ViewsImage_OnSetAnimated+0xa0>)
 8026270:	f7f3 fa9a 	bl	80197a8 <EwGetAutoObject>
    EwAttachObjObserver( EwNewSlot( _this, ViewsImage_timerSlot ), (XObject)_this->timer, 
 8026274:	ad04      	add	r5, sp, #16
    _this->timer = ((CoreTimer)EwGetAutoObject( &EffectsEffectTimer, EffectsEffectTimerClass ));
 8026276:	63a0      	str	r0, [r4, #56]	; 0x38
    EwAttachObjObserver( EwNewSlot( _this, ViewsImage_timerSlot ), (XObject)_this->timer, 
 8026278:	4621      	mov	r1, r4
 802627a:	4628      	mov	r0, r5
 802627c:	4a0f      	ldr	r2, [pc, #60]	; (80262bc <ViewsImage_OnSetAnimated+0x98>)
 802627e:	f7f4 ffa9 	bl	801b1d4 <EwNewSlot>
 8026282:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026286:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8026288:	2300      	movs	r3, #0
    EwPostSignal( EwNewSlot( _this, ViewsImage_timerSlot ), ((XObject)_this ));
 802628a:	ad06      	add	r5, sp, #24
    EwAttachObjObserver( EwNewSlot( _this, ViewsImage_timerSlot ), (XObject)_this->timer, 
 802628c:	f7f5 f832 	bl	801b2f4 <EwAttachObjObserver>
    EwPostSignal( EwNewSlot( _this, ViewsImage_timerSlot ), ((XObject)_this ));
 8026290:	4628      	mov	r0, r5
 8026292:	4621      	mov	r1, r4
 8026294:	4a09      	ldr	r2, [pc, #36]	; (80262bc <ViewsImage_OnSetAnimated+0x98>)
 8026296:	f7f4 ff9d 	bl	801b1d4 <EwNewSlot>
 802629a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802629e:	4622      	mov	r2, r4
 80262a0:	f7f4 ffc6 	bl	801b230 <EwPostSignal>
 80262a4:	e7db      	b.n	802625e <ViewsImage_OnSetAnimated+0x3a>
 80262a6:	4770      	bx	lr
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 80262a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80262aa:	9300      	str	r3, [sp, #0]
 80262ac:	3428      	adds	r4, #40	; 0x28
 80262ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80262b2:	f7fb ff17 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 80262b6:	b008      	add	sp, #32
 80262b8:	bd70      	pop	{r4, r5, r6, pc}
 80262ba:	bf00      	nop
 80262bc:	08025e29 	.word	0x08025e29
 80262c0:	080382e0 	.word	0x080382e0
 80262c4:	080382a0 	.word	0x080382a0

080262c8 <ViewsImage_OnSetVisible>:
  if ( value )
 80262c8:	b119      	cbz	r1, 80262d2 <ViewsImage_OnSetVisible+0xa>
    CoreView__ChangeViewState( _this, CoreViewStateVisible, 0 );
 80262ca:	2200      	movs	r2, #0
 80262cc:	2101      	movs	r1, #1
 80262ce:	f7fa bdf3 	b.w	8020eb8 <CoreView__ChangeViewState>
    CoreView__ChangeViewState( _this, 0, CoreViewStateVisible );
 80262d2:	2201      	movs	r2, #1
 80262d4:	f7fa bdf0 	b.w	8020eb8 <CoreView__ChangeViewState>

080262d8 <ViewsImage_GetContentArea>:
{
 80262d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( _this->Bitmap == 0 )
 80262dc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
{
 80262de:	b099      	sub	sp, #100	; 0x64
 80262e0:	4606      	mov	r6, r0
  if ( _this->Bitmap == 0 )
 80262e2:	2a00      	cmp	r2, #0
 80262e4:	f000 8092 	beq.w	802640c <ViewsImage_GetContentArea+0x134>
  size = _this->Bitmap->FrameSize;
 80262e8:	460b      	mov	r3, r1
 80262ea:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
  bounds = _this->Super1.Bounds;
 80262ee:	3328      	adds	r3, #40	; 0x28
  size = _this->Bitmap->FrameSize;
 80262f0:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80262f4:	e88a 0003 	stmia.w	sl, {r0, r1}
 80262f8:	4680      	mov	r8, r0
 80262fa:	4689      	mov	r9, r1
  bounds = _this->Super1.Bounds;
 80262fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80262fe:	ac0c      	add	r4, sp, #48	; 0x30
 8026300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  width = EwGetRectW( bounds );
 8026304:	f7f3 ff66 	bl	801a1d4 <EwGetRectW>
 8026308:	4605      	mov	r5, r0
  height = EwGetRectH( bounds );
 802630a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802630e:	f7f3 ff59 	bl	801a1c4 <EwGetRectH>
  if (( size.X == 0 ) || ( size.Y == 0 ))
 8026312:	f1b8 0f00 	cmp.w	r8, #0
 8026316:	d079      	beq.n	802640c <ViewsImage_GetContentArea+0x134>
 8026318:	f1b9 0f00 	cmp.w	r9, #0
 802631c:	d076      	beq.n	802640c <ViewsImage_GetContentArea+0x134>
  rd = EwNewRect( 0, 0, width, height );
 802631e:	af10      	add	r7, sp, #64	; 0x40
 8026320:	2200      	movs	r2, #0
 8026322:	462b      	mov	r3, r5
 8026324:	9000      	str	r0, [sp, #0]
 8026326:	4611      	mov	r1, r2
 8026328:	4638      	mov	r0, r7
 802632a:	f7f3 fdd1 	bl	8019ed0 <EwNewRect>
  rs = rd;
 802632e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  rs = EwSetRectSize( rs, size );
 8026332:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  rs = rd;
 8026336:	ad14      	add	r5, sp, #80	; 0x50
 8026338:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  rs = EwSetRectSize( rs, size );
 802633c:	e89a 0003 	ldmia.w	sl, {r0, r1}
  rd = EwNewRect( 0, 0, width, height );
 8026340:	e9dd 9210 	ldrd	r9, r2, [sp, #64]	; 0x40
  rs = EwSetRectSize( rs, size );
 8026344:	ab01      	add	r3, sp, #4
  rd = EwNewRect( 0, 0, width, height );
 8026346:	9205      	str	r2, [sp, #20]
  rs = EwSetRectSize( rs, size );
 8026348:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 802634c:	9304      	str	r3, [sp, #16]
 802634e:	9215      	str	r2, [sp, #84]	; 0x54
 8026350:	e883 0003 	stmia.w	r3, {r0, r1}
 8026354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026356:	9300      	str	r3, [sp, #0]
 8026358:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802635c:	4628      	mov	r0, r5
 802635e:	f7f3 ff87 	bl	801a270 <EwSetRectSize>
  if ( EwGetRectW( rs ) != EwGetRectW( rd ))
 8026362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  rs = EwSetRectSize( rs, size );
 8026366:	e9dd ba14 	ldrd	fp, sl, [sp, #80]	; 0x50
  if ( EwGetRectW( rs ) != EwGetRectW( rd ))
 802636a:	f7f3 ff33 	bl	801a1d4 <EwGetRectW>
 802636e:	4680      	mov	r8, r0
 8026370:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026374:	f7f3 ff2e 	bl	801a1d4 <EwGetRectW>
 8026378:	4580      	cmp	r8, r0
 802637a:	d150      	bne.n	802641e <ViewsImage_GetContentArea+0x146>
 802637c:	f10d 0818 	add.w	r8, sp, #24
  if ( EwGetRectH( rs ) != EwGetRectH( rd ))
 8026380:	e9cd ba14 	strd	fp, sl, [sp, #80]	; 0x50
 8026384:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026388:	f7f3 ff1c 	bl	801a1c4 <EwGetRectH>
 802638c:	4681      	mov	r9, r0
 802638e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026392:	f7f3 ff17 	bl	801a1c4 <EwGetRectH>
 8026396:	4581      	cmp	r9, r0
 8026398:	d01e      	beq.n	80263d8 <ViewsImage_GetContentArea+0x100>
    rs = EwSetRectY( rs, ( rd.Point1.Y + ( EwGetRectH( rd ) / 2 )) - ( EwGetRectH( 
 802639a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 802639e:	f7f3 ff11 	bl	801a1c4 <EwGetRectH>
 80263a2:	9f05      	ldr	r7, [sp, #20]
 80263a4:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 80263a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80263ac:	eb07 076c 	add.w	r7, r7, ip, asr #1
 80263b0:	f7f3 ff08 	bl	801a1c4 <EwGetRectH>
 80263b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    rs ) / 2 ));
 80263b6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    rs = EwSetRectY( rs, ( rd.Point1.Y + ( EwGetRectH( rd ) / 2 )) - ( EwGetRectH( 
 80263ba:	eba7 0760 	sub.w	r7, r7, r0, asr #1
 80263be:	e9cd 3700 	strd	r3, r7, [sp]
 80263c2:	4640      	mov	r0, r8
 80263c4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80263c8:	f7f3 ffd3 	bl	801a372 <EwSetRectY>
 80263cc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80263d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80263d4:	e9dd ba14 	ldrd	fp, sl, [sp, #80]	; 0x50
  rs = EwMoveRectPos( rs, bounds.Point1 );
 80263d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80263dc:	9b04      	ldr	r3, [sp, #16]
 80263de:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80263e0:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 80263e4:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 80263e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80263ec:	4640      	mov	r0, r8
 80263ee:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80263f2:	9400      	str	r4, [sp, #0]
 80263f4:	f7f3 fecf 	bl	801a196 <EwMoveRectPos>
 80263f8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80263fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  return rs;
 8026400:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
}
 8026404:	4630      	mov	r0, r6
 8026406:	b019      	add	sp, #100	; 0x64
 8026408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _Const0002;
 802640c:	2300      	movs	r3, #0
}
 802640e:	4630      	mov	r0, r6
    return _Const0002;
 8026410:	e9c6 3300 	strd	r3, r3, [r6]
 8026414:	e9c6 3302 	strd	r3, r3, [r6, #8]
}
 8026418:	b019      	add	sp, #100	; 0x64
 802641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rs = EwSetRectX( rs, ( rd.Point1.X + ( EwGetRectW( rd ) / 2 )) - ( EwGetRectW( 
 802641e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026422:	f7f3 fed7 	bl	801a1d4 <EwGetRectW>
 8026426:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 802642a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802642e:	eb09 096c 	add.w	r9, r9, ip, asr #1
 8026432:	f7f3 fecf 	bl	801a1d4 <EwGetRectW>
    rs ) / 2 ));
 8026436:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    rs = EwSetRectX( rs, ( rd.Point1.X + ( EwGetRectW( rd ) / 2 )) - ( EwGetRectW( 
 802643a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802643c:	9300      	str	r3, [sp, #0]
 802643e:	eba9 0060 	sub.w	r0, r9, r0, asr #1
 8026442:	9001      	str	r0, [sp, #4]
 8026444:	f10d 0818 	add.w	r8, sp, #24
 8026448:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802644c:	4640      	mov	r0, r8
 802644e:	f7f3 ff7c 	bl	801a34a <EwSetRectX>
 8026452:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8026456:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802645a:	e9dd ba14 	ldrd	fp, sl, [sp, #80]	; 0x50
 802645e:	e78f      	b.n	8026380 <ViewsImage_GetContentArea+0xa8>

08026460 <ViewsImage_Draw>:
{
 8026460:	b082      	sub	sp, #8
 8026462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026466:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8026468:	b0ad      	sub	sp, #180	; 0xb4
 802646a:	4682      	mov	sl, r0
  if (( _this->Bitmap == 0 ) || ( frameNr >= _this->Bitmap->NoOfFrames ))
 802646c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
{
 802646e:	f89d 60f4 	ldrb.w	r6, [sp, #244]	; 0xf4
 8026472:	460d      	mov	r5, r1
 8026474:	a936      	add	r1, sp, #216	; 0xd8
 8026476:	e881 000c 	stmia.w	r1, {r2, r3}
  if (( _this->Bitmap == 0 ) || ( frameNr >= _this->Bitmap->NoOfFrames ))
 802647a:	b120      	cbz	r0, 8026486 <ViewsImage_Draw+0x26>
 802647c:	69c3      	ldr	r3, [r0, #28]
 802647e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026482:	42a3      	cmp	r3, r4
 8026484:	dc04      	bgt.n	8026490 <ViewsImage_Draw+0x30>
}
 8026486:	b02d      	add	sp, #180	; 0xb4
 8026488:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802648c:	b002      	add	sp, #8
 802648e:	4770      	bx	lr
  area = ViewsImage_GetContentArea( _this );
 8026490:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  ResourcesBitmap__Update( _this->Bitmap );
 8026494:	f7ff fac0 	bl	8025a18 <ResourcesBitmap__Update>
  area = ViewsImage_GetContentArea( _this );
 8026498:	4658      	mov	r0, fp
 802649a:	4651      	mov	r1, sl
 802649c:	f7ff ff1c 	bl	80262d8 <ViewsImage_GetContentArea>
  size = _this->Bitmap->FrameSize;
 80264a0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 80264a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80264a8:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 80264ac:	e888 0003 	stmia.w	r8, {r0, r1}
  if ( EwIsRectEmpty( area ))
 80264b0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80264b4:	f7f3 fd6a 	bl	8019f8c <EwIsRectEmpty>
 80264b8:	2800      	cmp	r0, #0
 80264ba:	d1e4      	bne.n	8026486 <ViewsImage_Draw+0x26>
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 80264bc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80264be:	3301      	adds	r3, #1
 80264c0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80264c4:	121b      	asrs	r3, r3, #8
 80264c6:	3301      	adds	r3, #1
  aBlend = (XBool)( aBlend && (( _this->Super2.viewState & CoreViewStateAlphaBlended ) 
 80264c8:	b11e      	cbz	r6, 80264d2 <ViewsImage_Draw+0x72>
 80264ca:	f8da 6020 	ldr.w	r6, [sl, #32]
 80264ce:	f3c6 0640 	ubfx	r6, r6, #1, #1
  ctl = ctr = cbl = cbr = _Const0000;
 80264d2:	4a59      	ldr	r2, [pc, #356]	; (8026638 <ViewsImage_Draw+0x1d8>)
 80264d4:	27ff      	movs	r7, #255	; 0xff
 80264d6:	6812      	ldr	r2, [r2, #0]
 80264d8:	9214      	str	r2, [sp, #80]	; 0x50
 80264da:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
 80264de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80264e0:	9215      	str	r2, [sp, #84]	; 0x54
 80264e2:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 80264e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80264e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80264ea:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
 80264ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80264f0:	9212      	str	r2, [sp, #72]	; 0x48
  if ( opacity < 256 )
 80264f2:	42bb      	cmp	r3, r7
 80264f4:	dc05      	bgt.n	8026502 <ViewsImage_Draw+0xa2>
    ctl.Alpha = (XUInt8)(( 255 * opacity ) >> 8 );
 80264f6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80264fa:	f3c3 2707 	ubfx	r7, r3, #8, #8
 80264fe:	f88d 704b 	strb.w	r7, [sp, #75]	; 0x4b
  if ( !EwCompPoint( EwGetRectSize( area ), size ))
 8026502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026504:	9300      	str	r3, [sp, #0]
 8026506:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 802650a:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 802650e:	4648      	mov	r0, r9
 8026510:	f7f3 fe75 	bl	801a1fe <EwGetRectSize>
 8026514:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026518:	e898 000c 	ldmia.w	r8, {r2, r3}
 802651c:	f7f3 fc65 	bl	8019dea <EwCompPoint>
    GraphicsCanvas_CopyBitmap( aCanvas, aClip, _this->Bitmap, frameNr, EwMoveRectPos( 
 8026520:	993b      	ldr	r1, [sp, #236]	; 0xec
  if ( !EwCompPoint( EwGetRectSize( area ), size ))
 8026522:	2800      	cmp	r0, #0
 8026524:	d142      	bne.n	80265ac <ViewsImage_Draw+0x14c>
    GraphicsCanvas_CopyBitmap( aCanvas, aClip, _this->Bitmap, frameNr, EwMoveRectPos( 
 8026526:	983a      	ldr	r0, [sp, #232]	; 0xe8
 8026528:	f8da 903c 	ldr.w	r9, [sl, #60]	; 0x3c
 802652c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8026530:	ab01      	add	r3, sp, #4
 8026532:	e883 0003 	stmia.w	r3, {r0, r1}
 8026536:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 802653a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 802653e:	9200      	str	r2, [sp, #0]
 8026540:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 8026544:	4640      	mov	r0, r8
 8026546:	f7f3 fe26 	bl	801a196 <EwMoveRectPos>
 802654a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802654c:	9300      	str	r3, [sp, #0]
 802654e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8026552:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8026556:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026558:	4658      	mov	r0, fp
 802655a:	f7f3 fc65 	bl	8019e28 <EwMovePointNeg>
 802655e:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
 8026562:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 8026566:	e89b 0003 	ldmia.w	fp, {r0, r1}
 802656a:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
 802656e:	e9dd 2714 	ldrd	r2, r7, [sp, #80]	; 0x50
 8026572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026574:	960d      	str	r6, [sp, #52]	; 0x34
 8026576:	930a      	str	r3, [sp, #40]	; 0x28
 8026578:	ae07      	add	r6, sp, #28
 802657a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802657c:	9309      	str	r3, [sp, #36]	; 0x24
 802657e:	e9cd 270b 	strd	r2, r7, [sp, #44]	; 0x2c
 8026582:	e886 0003 	stmia.w	r6, {r0, r1}
 8026586:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 802658a:	af03      	add	r7, sp, #12
 802658c:	9e39      	ldr	r6, [sp, #228]	; 0xe4
 802658e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8026592:	9600      	str	r6, [sp, #0]
 8026594:	ab36      	add	r3, sp, #216	; 0xd8
 8026596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026598:	4628      	mov	r0, r5
 802659a:	e9cd 9401 	strd	r9, r4, [sp, #4]
 802659e:	f7ff f8a7 	bl	80256f0 <GraphicsCanvas_CopyBitmap>
}
 80265a2:	b02d      	add	sp, #180	; 0xb4
 80265a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265a8:	b002      	add	sp, #8
 80265aa:	4770      	bx	lr
    GraphicsCanvas_ScaleBitmap( aCanvas, aClip, _this->Bitmap, frameNr, EwMoveRectPos( 
 80265ac:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80265ae:	f8da 903c 	ldr.w	r9, [sl, #60]	; 0x3c
 80265b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80265b4:	ab01      	add	r3, sp, #4
 80265b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80265ba:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80265be:	9200      	str	r2, [sp, #0]
 80265c0:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80265c4:	4640      	mov	r0, r8
 80265c6:	f7f3 fde6 	bl	801a196 <EwMoveRectPos>
 80265ca:	4b1c      	ldr	r3, [pc, #112]	; (802663c <ViewsImage_Draw+0x1dc>)
 80265cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80265ce:	9200      	str	r2, [sp, #0]
 80265d0:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 80265d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80265d8:	4650      	mov	r0, sl
 80265da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80265dc:	f7f3 fc7f 	bl	8019ede <EwNewRect2Point>
 80265e0:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80265e4:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
 80265e8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
 80265ec:	f88d 7053 	strb.w	r7, [sp, #83]	; 0x53
 80265f0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80265f2:	960f      	str	r6, [sp, #60]	; 0x3c
 80265f4:	970e      	str	r7, [sp, #56]	; 0x38
 80265f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80265f8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80265fa:	970d      	str	r7, [sp, #52]	; 0x34
 80265fc:	960c      	str	r6, [sp, #48]	; 0x30
 80265fe:	f04f 0c01 	mov.w	ip, #1
 8026602:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8026604:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026608:	af07      	add	r7, sp, #28
 802660a:	960b      	str	r6, [sp, #44]	; 0x2c
 802660c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8026610:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8026614:	af03      	add	r7, sp, #12
 8026616:	9e39      	ldr	r6, [sp, #228]	; 0xe4
 8026618:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 802661c:	ab36      	add	r3, sp, #216	; 0xd8
 802661e:	e9cd 9401 	strd	r9, r4, [sp, #4]
 8026622:	4628      	mov	r0, r5
 8026624:	9600      	str	r6, [sp, #0]
 8026626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026628:	f7fe ffc8 	bl	80255bc <GraphicsCanvas_ScaleBitmap>
}
 802662c:	b02d      	add	sp, #180	; 0xb4
 802662e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026632:	b002      	add	sp, #8
 8026634:	4770      	bx	lr
 8026636:	bf00      	nop
 8026638:	080387ac 	.word	0x080387ac
 802663c:	080387b0 	.word	0x080387b0

08026640 <ViewsImage_observerSlot>:
{
 8026640:	b530      	push	{r4, r5, lr}
  if ((( _this->AutoSize && ( _this->Bitmap != 0 )) && ( _this->Bitmap->FrameSize.X 
 8026642:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8026646:	b087      	sub	sp, #28
 8026648:	4604      	mov	r4, r0
  if ((( _this->AutoSize && ( _this->Bitmap != 0 )) && ( _this->Bitmap->FrameSize.X 
 802664a:	b13b      	cbz	r3, 802665c <ViewsImage_observerSlot+0x1c>
 802664c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802664e:	b12b      	cbz	r3, 802665c <ViewsImage_observerSlot+0x1c>
 8026650:	6a1a      	ldr	r2, [r3, #32]
 8026652:	2a00      	cmp	r2, #0
 8026654:	dd02      	ble.n	802665c <ViewsImage_observerSlot+0x1c>
      > 0 )) && ( _this->Bitmap->FrameSize.Y > 0 ))
 8026656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026658:	2b00      	cmp	r3, #0
 802665a:	dc0f      	bgt.n	802667c <ViewsImage_observerSlot+0x3c>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 802665c:	69a0      	ldr	r0, [r4, #24]
 802665e:	b110      	cbz	r0, 8026666 <ViewsImage_observerSlot+0x26>
 8026660:	6a23      	ldr	r3, [r4, #32]
 8026662:	07db      	lsls	r3, r3, #31
 8026664:	d401      	bmi.n	802666a <ViewsImage_observerSlot+0x2a>
}
 8026666:	b007      	add	sp, #28
 8026668:	bd30      	pop	{r4, r5, pc}
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 802666a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802666c:	9300      	str	r3, [sp, #0]
 802666e:	3428      	adds	r4, #40	; 0x28
 8026670:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8026674:	f7fb fd36 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 8026678:	b007      	add	sp, #28
 802667a:	bd30      	pop	{r4, r5, pc}
    CoreRectView__OnSetBounds( _this, ViewsImage_GetContentArea( _this ));
 802667c:	ad02      	add	r5, sp, #8
 802667e:	4628      	mov	r0, r5
 8026680:	4621      	mov	r1, r4
 8026682:	f7ff fe29 	bl	80262d8 <ViewsImage_GetContentArea>
 8026686:	9b05      	ldr	r3, [sp, #20]
 8026688:	9300      	str	r3, [sp, #0]
 802668a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 802668e:	4620      	mov	r0, r4
 8026690:	f7fb fa62 	bl	8021b58 <CoreRectView__OnSetBounds>
 8026694:	e7e2      	b.n	802665c <ViewsImage_observerSlot+0x1c>
 8026696:	bf00      	nop

08026698 <ViewsImage_OnSetAutoSize>:
  if ( value == _this->AutoSize )
 8026698:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 802669c:	428b      	cmp	r3, r1
 802669e:	d01b      	beq.n	80266d8 <ViewsImage_OnSetAutoSize+0x40>
{
 80266a0:	b530      	push	{r4, r5, lr}
 80266a2:	4604      	mov	r4, r0
 80266a4:	b087      	sub	sp, #28
  _this->AutoSize = value;
 80266a6:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  if ((( value && ( _this->Bitmap != 0 )) && ( _this->Bitmap->FrameSize.X > 0 )) 
 80266aa:	b199      	cbz	r1, 80266d4 <ViewsImage_OnSetAutoSize+0x3c>
 80266ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80266ae:	b18b      	cbz	r3, 80266d4 <ViewsImage_OnSetAutoSize+0x3c>
 80266b0:	6a1a      	ldr	r2, [r3, #32]
 80266b2:	2a00      	cmp	r2, #0
 80266b4:	dd0e      	ble.n	80266d4 <ViewsImage_OnSetAutoSize+0x3c>
      && ( _this->Bitmap->FrameSize.Y > 0 ))
 80266b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80266b8:	2b00      	cmp	r3, #0
 80266ba:	dd0b      	ble.n	80266d4 <ViewsImage_OnSetAutoSize+0x3c>
    CoreRectView__OnSetBounds( _this, ViewsImage_GetContentArea( _this ));
 80266bc:	ad02      	add	r5, sp, #8
 80266be:	4628      	mov	r0, r5
 80266c0:	4621      	mov	r1, r4
 80266c2:	f7ff fe09 	bl	80262d8 <ViewsImage_GetContentArea>
 80266c6:	9b05      	ldr	r3, [sp, #20]
 80266c8:	9300      	str	r3, [sp, #0]
 80266ca:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80266ce:	4620      	mov	r0, r4
 80266d0:	f7fb fa42 	bl	8021b58 <CoreRectView__OnSetBounds>
}
 80266d4:	b007      	add	sp, #28
 80266d6:	bd30      	pop	{r4, r5, pc}
 80266d8:	4770      	bx	lr
 80266da:	bf00      	nop

080266dc <ViewsImage_OnSetBitmap>:
  if ( value == _this->Bitmap )
 80266dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80266de:	428b      	cmp	r3, r1
 80266e0:	d05c      	beq.n	802679c <ViewsImage_OnSetBitmap+0xc0>
{
 80266e2:	b570      	push	{r4, r5, r6, lr}
 80266e4:	4604      	mov	r4, r0
 80266e6:	b08a      	sub	sp, #40	; 0x28
 80266e8:	460d      	mov	r5, r1
  if (( _this->Bitmap != 0 ) && _this->Bitmap->Mutable )
 80266ea:	b11b      	cbz	r3, 80266f4 <ViewsImage_OnSetBitmap+0x18>
 80266ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	d146      	bne.n	8026782 <ViewsImage_OnSetBitmap+0xa6>
  _this->animFrameNumber = -1;
 80266f4:	f04f 33ff 	mov.w	r3, #4294967295
  _this->Bitmap = value;
 80266f8:	63e5      	str	r5, [r4, #60]	; 0x3c
  _this->animFrameNumber = -1;
 80266fa:	6463      	str	r3, [r4, #68]	; 0x44
  if (( value != 0 ) && value->Mutable )
 80266fc:	b115      	cbz	r5, 8026704 <ViewsImage_OnSetBitmap+0x28>
 80266fe:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8026702:	bb43      	cbnz	r3, 8026756 <ViewsImage_OnSetBitmap+0x7a>
  if ( _this->Animated )
 8026704:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026708:	b9e3      	cbnz	r3, 8026744 <ViewsImage_OnSetBitmap+0x68>
  if ((( _this->AutoSize && ( value != 0 )) && ( value->FrameSize.X > 0 )) && ( 
 802670a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 802670e:	b193      	cbz	r3, 8026736 <ViewsImage_OnSetBitmap+0x5a>
 8026710:	b18d      	cbz	r5, 8026736 <ViewsImage_OnSetBitmap+0x5a>
 8026712:	6a2b      	ldr	r3, [r5, #32]
 8026714:	2b00      	cmp	r3, #0
 8026716:	dd0e      	ble.n	8026736 <ViewsImage_OnSetBitmap+0x5a>
 8026718:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802671a:	2b00      	cmp	r3, #0
 802671c:	dd0b      	ble.n	8026736 <ViewsImage_OnSetBitmap+0x5a>
    CoreRectView__OnSetBounds( _this, ViewsImage_GetContentArea( _this ));
 802671e:	ad06      	add	r5, sp, #24
 8026720:	4628      	mov	r0, r5
 8026722:	4621      	mov	r1, r4
 8026724:	f7ff fdd8 	bl	80262d8 <ViewsImage_GetContentArea>
 8026728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802672a:	9300      	str	r3, [sp, #0]
 802672c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8026730:	4620      	mov	r0, r4
 8026732:	f7fb fa11 	bl	8021b58 <CoreRectView__OnSetBounds>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 8026736:	69a0      	ldr	r0, [r4, #24]
 8026738:	b110      	cbz	r0, 8026740 <ViewsImage_OnSetBitmap+0x64>
 802673a:	6a23      	ldr	r3, [r4, #32]
 802673c:	07db      	lsls	r3, r3, #31
 802673e:	d417      	bmi.n	8026770 <ViewsImage_OnSetBitmap+0x94>
}
 8026740:	b00a      	add	sp, #40	; 0x28
 8026742:	bd70      	pop	{r4, r5, r6, pc}
    ViewsImage_OnSetAnimated( _this, 0 );
 8026744:	4620      	mov	r0, r4
 8026746:	2100      	movs	r1, #0
 8026748:	f7ff fd6c 	bl	8026224 <ViewsImage_OnSetAnimated>
    ViewsImage_OnSetAnimated( _this, 1 );
 802674c:	2101      	movs	r1, #1
 802674e:	4620      	mov	r0, r4
 8026750:	f7ff fd68 	bl	8026224 <ViewsImage_OnSetAnimated>
 8026754:	e7d9      	b.n	802670a <ViewsImage_OnSetBitmap+0x2e>
    EwAttachObjObserver( EwNewSlot( _this, ViewsImage_observerSlot ), (XObject)value, 
 8026756:	ae04      	add	r6, sp, #16
 8026758:	4630      	mov	r0, r6
 802675a:	4621      	mov	r1, r4
 802675c:	4a10      	ldr	r2, [pc, #64]	; (80267a0 <ViewsImage_OnSetBitmap+0xc4>)
 802675e:	f7f4 fd39 	bl	801b1d4 <EwNewSlot>
 8026762:	e896 0003 	ldmia.w	r6, {r0, r1}
 8026766:	2300      	movs	r3, #0
 8026768:	462a      	mov	r2, r5
 802676a:	f7f4 fdc3 	bl	801b2f4 <EwAttachObjObserver>
 802676e:	e7c9      	b.n	8026704 <ViewsImage_OnSetBitmap+0x28>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8026770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026772:	9300      	str	r3, [sp, #0]
 8026774:	3428      	adds	r4, #40	; 0x28
 8026776:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 802677a:	f7fb fcb3 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 802677e:	b00a      	add	sp, #40	; 0x28
 8026780:	bd70      	pop	{r4, r5, r6, pc}
    EwDetachObjObserver( EwNewSlot( _this, ViewsImage_observerSlot ), (XObject)_this->Bitmap, 
 8026782:	ae02      	add	r6, sp, #8
 8026784:	4630      	mov	r0, r6
 8026786:	4621      	mov	r1, r4
 8026788:	4a05      	ldr	r2, [pc, #20]	; (80267a0 <ViewsImage_OnSetBitmap+0xc4>)
 802678a:	f7f4 fd23 	bl	801b1d4 <EwNewSlot>
 802678e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8026792:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8026794:	2300      	movs	r3, #0
 8026796:	f7f4 fedf 	bl	801b558 <EwDetachObjObserver>
 802679a:	e7ab      	b.n	80266f4 <ViewsImage_OnSetBitmap+0x18>
 802679c:	4770      	bx	lr
 802679e:	bf00      	nop
 80267a0:	08026641 	.word	0x08026641

080267a4 <ViewsText_OnSetEnableBidiText>:
}

/* 'C' function for method : 'Views::Text.OnSetEnableBidiText()' */
void ViewsText_OnSetEnableBidiText( ViewsText _this, XBool value )
{
  if ( value == _this->EnableBidiText )
 80267a4:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 80267a8:	428b      	cmp	r3, r1
 80267aa:	d016      	beq.n	80267da <ViewsText_OnSetEnableBidiText+0x36>
{
 80267ac:	b530      	push	{r4, r5, lr}
 80267ae:	b083      	sub	sp, #12
 80267b0:	4604      	mov	r4, r0
    return;

  _this->EnableBidiText = value;
  _this->flowString = 0;
 80267b2:	2300      	movs	r3, #0
  _this->reparsed = 0;
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 80267b4:	466d      	mov	r5, sp
  _this->EnableBidiText = value;
 80267b6:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  _this->flowString = 0;
 80267ba:	63c3      	str	r3, [r0, #60]	; 0x3c
  _this->reparsed = 0;
 80267bc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 80267c0:	4621      	mov	r1, r4
 80267c2:	4628      	mov	r0, r5
 80267c4:	4a05      	ldr	r2, [pc, #20]	; (80267dc <ViewsText_OnSetEnableBidiText+0x38>)
 80267c6:	f7f4 fd05 	bl	801b1d4 <EwNewSlot>
 80267ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80267ce:	4622      	mov	r2, r4
}
 80267d0:	b003      	add	sp, #12
 80267d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 80267d6:	f7f4 bd2b 	b.w	801b230 <EwPostSignal>
 80267da:	4770      	bx	lr
 80267dc:	08025ecd 	.word	0x08025ecd

080267e0 <ViewsText_OnSetEllipsis>:

/* The onset method for the property 'Ellipsis' changes the ellipsis mode and forces 
   an update. */
void ViewsText_OnSetEllipsis( ViewsText _this, XBool value )
{
  if ( value == _this->Ellipsis )
 80267e0:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 80267e4:	428b      	cmp	r3, r1
 80267e6:	d020      	beq.n	802682a <ViewsText_OnSetEllipsis+0x4a>
{
 80267e8:	b530      	push	{r4, r5, lr}
    return;

  _this->Ellipsis = value;

  if ( _this->WrapText || value )
 80267ea:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  _this->Ellipsis = value;
 80267ee:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if ( _this->WrapText || value )
 80267f2:	430b      	orrs	r3, r1
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateFastReshape;
 80267f4:	6a03      	ldr	r3, [r0, #32]
{
 80267f6:	b083      	sub	sp, #12
 80267f8:	4604      	mov	r4, r0
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateFastReshape;
 80267fa:	bf14      	ite	ne
 80267fc:	f423 7380 	bicne.w	r3, r3, #256	; 0x100
  else
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateFastReshape;
 8026800:	f443 7380 	orreq.w	r3, r3, #256	; 0x100

  _this->flowString = 0;
 8026804:	2200      	movs	r2, #0
  _this->reparsed = 0;
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026806:	466d      	mov	r5, sp
 8026808:	6203      	str	r3, [r0, #32]
  _this->flowString = 0;
 802680a:	63c2      	str	r2, [r0, #60]	; 0x3c
  _this->reparsed = 0;
 802680c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026810:	4621      	mov	r1, r4
 8026812:	4628      	mov	r0, r5
 8026814:	4a05      	ldr	r2, [pc, #20]	; (802682c <ViewsText_OnSetEllipsis+0x4c>)
 8026816:	f7f4 fcdd 	bl	801b1d4 <EwNewSlot>
 802681a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802681e:	4622      	mov	r2, r4
}
 8026820:	b003      	add	sp, #12
 8026822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026826:	f7f4 bd03 	b.w	801b230 <EwPostSignal>
 802682a:	4770      	bx	lr
 802682c:	08025ecd 	.word	0x08025ecd

08026830 <ViewsText_OnSetWrapText>:
}

/* 'C' function for method : 'Views::Text.OnSetWrapText()' */
void ViewsText_OnSetWrapText( ViewsText _this, XBool value )
{
  if ( value == _this->WrapText )
 8026830:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8026834:	428b      	cmp	r3, r1
 8026836:	d02b      	beq.n	8026890 <ViewsText_OnSetWrapText+0x60>
{
 8026838:	b570      	push	{r4, r5, r6, lr}
    return;

  _this->WrapText = value;

  if ( _this->reparsed )
 802683a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  _this->WrapText = value;
 802683e:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
{
 8026842:	b082      	sub	sp, #8
 8026844:	4604      	mov	r4, r0
 8026846:	460d      	mov	r5, r1
  if ( _this->reparsed )
 8026848:	b983      	cbnz	r3, 802686c <ViewsText_OnSetWrapText+0x3c>
    _this->flowString = 0;
    _this->reparsed = 0;
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
  }

  if ( value || _this->Ellipsis )
 802684a:	b12d      	cbz	r5, 8026858 <ViewsText_OnSetWrapText+0x28>
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateFastReshape;
 802684c:	6a23      	ldr	r3, [r4, #32]
 802684e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026852:	6223      	str	r3, [r4, #32]
  else
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateFastReshape;
}
 8026854:	b002      	add	sp, #8
 8026856:	bd70      	pop	{r4, r5, r6, pc}
  if ( value || _this->Ellipsis )
 8026858:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 802685c:	2b00      	cmp	r3, #0
 802685e:	d1f5      	bne.n	802684c <ViewsText_OnSetWrapText+0x1c>
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateFastReshape;
 8026860:	6a23      	ldr	r3, [r4, #32]
 8026862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026866:	6223      	str	r3, [r4, #32]
}
 8026868:	b002      	add	sp, #8
 802686a:	bd70      	pop	{r4, r5, r6, pc}
    _this->flowString = 0;
 802686c:	2300      	movs	r3, #0
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 802686e:	466e      	mov	r6, sp
 8026870:	4a08      	ldr	r2, [pc, #32]	; (8026894 <ViewsText_OnSetWrapText+0x64>)
    _this->flowString = 0;
 8026872:	63c3      	str	r3, [r0, #60]	; 0x3c
    _this->reparsed = 0;
 8026874:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026878:	4621      	mov	r1, r4
 802687a:	4630      	mov	r0, r6
 802687c:	f7f4 fcaa 	bl	801b1d4 <EwNewSlot>
 8026880:	e896 0003 	ldmia.w	r6, {r0, r1}
 8026884:	4622      	mov	r2, r4
 8026886:	f7f4 fcd3 	bl	801b230 <EwPostSignal>
  if ( value || _this->Ellipsis )
 802688a:	2d00      	cmp	r5, #0
 802688c:	d1de      	bne.n	802684c <ViewsText_OnSetWrapText+0x1c>
 802688e:	e7e3      	b.n	8026858 <ViewsText_OnSetWrapText+0x28>
 8026890:	4770      	bx	lr
 8026892:	bf00      	nop
 8026894:	08025ecd 	.word	0x08025ecd

08026898 <ViewsText_OnSetAlignment>:

/* 'C' function for method : 'Views::Text.OnSetAlignment()' */
void ViewsText_OnSetAlignment( ViewsText _this, XSet value )
{
  if ( value == _this->Alignment )
 8026898:	6d03      	ldr	r3, [r0, #80]	; 0x50
 802689a:	428b      	cmp	r3, r1
 802689c:	d036      	beq.n	802690c <ViewsText_OnSetAlignment+0x74>
{
 802689e:	b530      	push	{r4, r5, lr}
 80268a0:	4604      	mov	r4, r0
    return;

  _this->Alignment = value;

  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80268a2:	6980      	ldr	r0, [r0, #24]
  _this->Alignment = value;
 80268a4:	6521      	str	r1, [r4, #80]	; 0x50
{
 80268a6:	b087      	sub	sp, #28
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80268a8:	b110      	cbz	r0, 80268b0 <ViewsText_OnSetAlignment+0x18>
 80268aa:	6a23      	ldr	r3, [r4, #32]
 80268ac:	07db      	lsls	r3, r3, #31
 80268ae:	d425      	bmi.n	80268fc <ViewsText_OnSetAlignment+0x64>
      == CoreViewStateVisible ))
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );

  if ( _this->Ellipsis )
 80268b0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80268b4:	b993      	cbnz	r3, 80268dc <ViewsText_OnSetAlignment+0x44>
    _this->flowString = 0;
    _this->reparsed = 0;
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
  }

  if ( _this->reparsed )
 80268b6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80268ba:	b90b      	cbnz	r3, 80268c0 <ViewsText_OnSetAlignment+0x28>
    EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
}
 80268bc:	b007      	add	sp, #28
 80268be:	bd30      	pop	{r4, r5, pc}
    EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 80268c0:	ad04      	add	r5, sp, #16
 80268c2:	4628      	mov	r0, r5
 80268c4:	4621      	mov	r1, r4
 80268c6:	4a12      	ldr	r2, [pc, #72]	; (8026910 <ViewsText_OnSetAlignment+0x78>)
 80268c8:	f7f4 fc84 	bl	801b1d4 <EwNewSlot>
 80268cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80268d0:	4622      	mov	r2, r4
}
 80268d2:	b007      	add	sp, #28
 80268d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 80268d8:	f7f4 bcaa 	b.w	801b230 <EwPostSignal>
    _this->flowString = 0;
 80268dc:	2300      	movs	r3, #0
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 80268de:	ad02      	add	r5, sp, #8
 80268e0:	4628      	mov	r0, r5
 80268e2:	4621      	mov	r1, r4
 80268e4:	4a0b      	ldr	r2, [pc, #44]	; (8026914 <ViewsText_OnSetAlignment+0x7c>)
    _this->flowString = 0;
 80268e6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _this->reparsed = 0;
 80268e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 80268ec:	f7f4 fc72 	bl	801b1d4 <EwNewSlot>
 80268f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80268f4:	4622      	mov	r2, r4
 80268f6:	f7f4 fc9b 	bl	801b230 <EwPostSignal>
 80268fa:	e7dc      	b.n	80268b6 <ViewsText_OnSetAlignment+0x1e>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 80268fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80268fe:	9300      	str	r3, [sp, #0]
 8026900:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8026904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026906:	f7fb fbed 	bl	80220e4 <CoreGroup__InvalidateArea>
 802690a:	e7d1      	b.n	80268b0 <ViewsText_OnSetAlignment+0x18>
 802690c:	4770      	bx	lr
 802690e:	bf00      	nop
 8026910:	08025ac5 	.word	0x08025ac5
 8026914:	08025ecd 	.word	0x08025ecd

08026918 <ViewsText_OnSetString>:

/* 'C' function for method : 'Views::Text.OnSetString()' */
void ViewsText_OnSetString( ViewsText _this, XString value )
{
 8026918:	b530      	push	{r4, r5, lr}
 802691a:	460d      	mov	r5, r1
 802691c:	b083      	sub	sp, #12
  if ( !EwCompString( value, _this->String ))
 802691e:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
 8026920:	4604      	mov	r4, r0
  if ( !EwCompString( value, _this->String ))
 8026922:	4628      	mov	r0, r5
 8026924:	f7f5 fd5e 	bl	801c3e4 <EwCompString>
 8026928:	b908      	cbnz	r0, 802692e <ViewsText_OnSetString+0x16>

  _this->String = EwShareString( value );
  _this->flowString = 0;
  _this->reparsed = 0;
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
}
 802692a:	b003      	add	sp, #12
 802692c:	bd30      	pop	{r4, r5, pc}
  _this->String = EwShareString( value );
 802692e:	4628      	mov	r0, r5
 8026930:	f7f5 fe82 	bl	801c638 <EwShareString>
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026934:	466d      	mov	r5, sp
  _this->flowString = 0;
 8026936:	2300      	movs	r3, #0
 8026938:	e9c4 300f 	strd	r3, r0, [r4, #60]	; 0x3c
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 802693c:	4621      	mov	r1, r4
 802693e:	4628      	mov	r0, r5
 8026940:	4a06      	ldr	r2, [pc, #24]	; (802695c <ViewsText_OnSetString+0x44>)
  _this->reparsed = 0;
 8026942:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026946:	f7f4 fc45 	bl	801b1d4 <EwNewSlot>
 802694a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802694e:	4622      	mov	r2, r4
}
 8026950:	b003      	add	sp, #12
 8026952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026956:	f7f4 bc6b 	b.w	801b230 <EwPostSignal>
 802695a:	bf00      	nop
 802695c:	08025ecd 	.word	0x08025ecd

08026960 <ViewsText_OnSetFont>:

/* 'C' function for method : 'Views::Text.OnSetFont()' */
void ViewsText_OnSetFont( ViewsText _this, ResourcesFont value )
{
  if ( value == _this->Font )
 8026960:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8026962:	428b      	cmp	r3, r1
 8026964:	d015      	beq.n	8026992 <ViewsText_OnSetFont+0x32>
{
 8026966:	b530      	push	{r4, r5, lr}
 8026968:	b083      	sub	sp, #12
 802696a:	4604      	mov	r4, r0
    return;

  _this->Font = value;
  _this->flowString = 0;
 802696c:	2300      	movs	r3, #0
  _this->reparsed = 0;
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 802696e:	466d      	mov	r5, sp
  _this->flowString = 0;
 8026970:	e9c0 130e 	strd	r1, r3, [r0, #56]	; 0x38
  _this->reparsed = 0;
 8026974:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8026978:	4621      	mov	r1, r4
 802697a:	4628      	mov	r0, r5
 802697c:	4a05      	ldr	r2, [pc, #20]	; (8026994 <ViewsText_OnSetFont+0x34>)
 802697e:	f7f4 fc29 	bl	801b1d4 <EwNewSlot>
 8026982:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026986:	4622      	mov	r2, r4
}
 8026988:	b003      	add	sp, #12
 802698a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 802698e:	f7f4 bc4f 	b.w	801b230 <EwPostSignal>
 8026992:	4770      	bx	lr
 8026994:	08025ecd 	.word	0x08025ecd

08026998 <ViewsText_OnSetColor>:

/* 'C' function for method : 'Views::Text.OnSetColor()' */
void ViewsText_OnSetColor( ViewsText _this, XColor value )
{
 8026998:	b510      	push	{r4, lr}
 802699a:	b084      	sub	sp, #16
 802699c:	4604      	mov	r4, r0
 802699e:	9103      	str	r1, [sp, #12]
  if ( !EwCompColor( value, _this->Color ))
 80269a0:	4608      	mov	r0, r1
 80269a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80269a4:	f7f1 fd01 	bl	80183aa <EwCompColor>
 80269a8:	b130      	cbz	r0, 80269b8 <ViewsText_OnSetColor+0x20>
    return;

  _this->Color = value;

  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80269aa:	69a0      	ldr	r0, [r4, #24]
  _this->Color = value;
 80269ac:	9b03      	ldr	r3, [sp, #12]
 80269ae:	6563      	str	r3, [r4, #84]	; 0x54
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80269b0:	b110      	cbz	r0, 80269b8 <ViewsText_OnSetColor+0x20>
 80269b2:	6a23      	ldr	r3, [r4, #32]
 80269b4:	07db      	lsls	r3, r3, #31
 80269b6:	d401      	bmi.n	80269bc <ViewsText_OnSetColor+0x24>
      == CoreViewStateVisible ))
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
}
 80269b8:	b004      	add	sp, #16
 80269ba:	bd10      	pop	{r4, pc}
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 80269bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80269be:	9300      	str	r3, [sp, #0]
 80269c0:	3428      	adds	r4, #40	; 0x28
 80269c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80269c6:	f7fb fb8d 	bl	80220e4 <CoreGroup__InvalidateArea>
}
 80269ca:	b004      	add	sp, #16
 80269cc:	bd10      	pop	{r4, pc}
 80269ce:	bf00      	nop

080269d0 <ViewsText_IsBaseDirectionRTL>:
/* The method IsBaseDirectionRTL() returns 'true' if the text specified in @String 
   starts with an RTL (right-to-left) character. This implies the base direction 
   of the entire text paragraph. If the text starts with an LTR (left-to-right) 
   sign or the property @EnableBidiText is 'false', this method returns 'false'. */
XBool ViewsText_IsBaseDirectionRTL( ViewsText _this )
{
 80269d0:	b530      	push	{r4, r5, lr}
  XBool result;
  XHandle bidi;

  if ( !_this->reparsed )
 80269d2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80269d6:	b083      	sub	sp, #12
 80269d8:	4604      	mov	r4, r0
  if ( !_this->reparsed )
 80269da:	b143      	cbz	r3, 80269ee <ViewsText_IsBaseDirectionRTL+0x1e>
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));

  if ( _this->bidiContext == 0 )
 80269dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80269de:	b908      	cbnz	r0, 80269e4 <ViewsText_IsBaseDirectionRTL+0x14>

  result = 0;
  bidi = _this->bidiContext;
  result = EwBidiIsRTL( bidi );
  return result;
}
 80269e0:	b003      	add	sp, #12
 80269e2:	bd30      	pop	{r4, r5, pc}
 80269e4:	b003      	add	sp, #12
 80269e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  result = EwBidiIsRTL( bidi );
 80269ea:	f7ea bafb 	b.w	8010fe4 <EwBidiIsRTL>
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 80269ee:	466d      	mov	r5, sp
 80269f0:	4628      	mov	r0, r5
 80269f2:	4621      	mov	r1, r4
 80269f4:	4a04      	ldr	r2, [pc, #16]	; (8026a08 <ViewsText_IsBaseDirectionRTL+0x38>)
 80269f6:	f7f4 fbed 	bl	801b1d4 <EwNewSlot>
 80269fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80269fe:	4622      	mov	r2, r4
 8026a00:	f7f4 fc0b 	bl	801b21a <EwSignal>
 8026a04:	e7ea      	b.n	80269dc <ViewsText_IsBaseDirectionRTL+0xc>
 8026a06:	bf00      	nop
 8026a08:	080270d5 	.word	0x080270d5

08026a0c <ViewsText_IsBidiText>:
   @String contains any right-to-left contents or any other Bidi algorithm specific 
   control codes requiring the Bidi processing of this text. Please note, if the 
   property @EnableBidiText is false, the text is not processed by the Bidi algorithm 
   and this method returns 'false'. */
XBool ViewsText_IsBidiText( ViewsText _this )
{
 8026a0c:	b530      	push	{r4, r5, lr}
  XBool result;
  XHandle bidi;

  if ( !_this->reparsed )
 8026a0e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8026a12:	b083      	sub	sp, #12
 8026a14:	4604      	mov	r4, r0
  if ( !_this->reparsed )
 8026a16:	b143      	cbz	r3, 8026a2a <ViewsText_IsBidiText+0x1e>
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));

  if ( _this->bidiContext == 0 )
 8026a18:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8026a1a:	b908      	cbnz	r0, 8026a20 <ViewsText_IsBidiText+0x14>

  result = 0;
  bidi = _this->bidiContext;
  result = EwBidiIsNeeded( bidi );
  return result;
}
 8026a1c:	b003      	add	sp, #12
 8026a1e:	bd30      	pop	{r4, r5, pc}
 8026a20:	b003      	add	sp, #12
 8026a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  result = EwBidiIsNeeded( bidi );
 8026a26:	f7ea bad7 	b.w	8010fd8 <EwBidiIsNeeded>
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 8026a2a:	466d      	mov	r5, sp
 8026a2c:	4628      	mov	r0, r5
 8026a2e:	4621      	mov	r1, r4
 8026a30:	4a04      	ldr	r2, [pc, #16]	; (8026a44 <ViewsText_IsBidiText+0x38>)
 8026a32:	f7f4 fbcf 	bl	801b1d4 <EwNewSlot>
 8026a36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026a3a:	4622      	mov	r2, r4
 8026a3c:	f7f4 fbed 	bl	801b21a <EwSignal>
 8026a40:	e7ea      	b.n	8026a18 <ViewsText_IsBidiText+0xc>
 8026a42:	bf00      	nop
 8026a44:	080270d5 	.word	0x080270d5

08026a48 <ViewsText_GetContentArea>:
   the view will show the text. This area is expressed in coordinates relative to 
   the top-left corner of the view's @Owner. The method takes in account all properties 
   which do affect the position and the alignment of the text, e.g. @Alignment, 
   @Orientation, @ScrollOffset, @WrapText, etc. */
XRect ViewsText_GetContentArea( ViewsText _this )
{
 8026a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a4c:	460c      	mov	r4, r1
 8026a4e:	b098      	sub	sp, #96	; 0x60
 8026a50:	4606      	mov	r6, r0
  XInt32 width;
  XInt32 height;
  XRect rd;
  XRect rs;

  if ( !EwCompString( _this->String, 0 ) || ( _this->Font == 0 ))
 8026a52:	2100      	movs	r1, #0
 8026a54:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8026a56:	f7f5 fcc5 	bl	801c3e4 <EwCompString>
 8026a5a:	2800      	cmp	r0, #0
 8026a5c:	f000 809b 	beq.w	8026b96 <ViewsText_GetContentArea+0x14e>
 8026a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	f000 8097 	beq.w	8026b96 <ViewsText_GetContentArea+0x14e>
    return _Const0002;

  if ( !_this->reparsed )
 8026a68:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	f000 809b 	beq.w	8026ba8 <ViewsText_GetContentArea+0x160>
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));

  if ( !EwCompString( _this->flowString, 0 ))
 8026a72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8026a74:	2100      	movs	r1, #0
 8026a76:	f7f5 fcb5 	bl	801c3e4 <EwCompString>
 8026a7a:	b938      	cbnz	r0, 8026a8c <ViewsText_GetContentArea+0x44>
    return _Const0002;
 8026a7c:	e9c6 0000 	strd	r0, r0, [r6]
 8026a80:	e9c6 0002 	strd	r0, r0, [r6, #8]
        rs ) / 2 ));
  }

  rs = EwMoveRectPos( rs, bounds.Point1 );
  return rs;
}
 8026a84:	4630      	mov	r0, r6
 8026a86:	b018      	add	sp, #96	; 0x60
 8026a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  leading = _this->Font->Leading;
 8026a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if ( !EwCompPoint( _this->textSize, _Const0001 ))
 8026a8e:	4a8d      	ldr	r2, [pc, #564]	; (8026cc4 <ViewsText_GetContentArea+0x27c>)
  leading = _this->Font->Leading;
 8026a90:	699f      	ldr	r7, [r3, #24]
  rh = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
 8026a92:	e9d3 c507 	ldrd	ip, r5, [r3, #28]
  if ( !EwCompPoint( _this->textSize, _Const0001 ))
 8026a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  rh = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
 8026a9a:	4465      	add	r5, ip
  if ( !EwCompPoint( _this->textSize, _Const0001 ))
 8026a9c:	ca0c      	ldmia	r2, {r2, r3}
  rh = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
 8026a9e:	443d      	add	r5, r7
  if ( !EwCompPoint( _this->textSize, _Const0001 ))
 8026aa0:	f7f3 f9a3 	bl	8019dea <EwCompPoint>
 8026aa4:	2800      	cmp	r0, #0
 8026aa6:	f000 80b2 	beq.w	8026c0e <ViewsText_GetContentArea+0x1c6>
  _this->textSize.Y = (( EwGetStringChar( _this->flowString, 0 ) * rh ) - leading );
 8026aaa:	2100      	movs	r1, #0
 8026aac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8026aae:	f7f5 fe32 	bl	801c716 <EwGetStringChar>
  bounds = _this->Super1.Bounds;
 8026ab2:	f104 0328 	add.w	r3, r4, #40	; 0x28
  _this->textSize.Y = (( EwGetStringChar( _this->flowString, 0 ) * rh ) - leading );
 8026ab6:	4684      	mov	ip, r0
  bounds = _this->Super1.Bounds;
 8026ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026aba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8026abe:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
  _this->textSize.Y = (( EwGetStringChar( _this->flowString, 0 ) * rh ) - leading );
 8026ac2:	fb05 f00c 	mul.w	r0, r5, ip
 8026ac6:	1bc0      	subs	r0, r0, r7
 8026ac8:	64e0      	str	r0, [r4, #76]	; 0x4c
  width = EwGetRectW( bounds );
 8026aca:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
  align = _this->Alignment;
 8026ace:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
  width = EwGetRectW( bounds );
 8026ad2:	f7f3 fb7f 	bl	801a1d4 <EwGetRectW>
 8026ad6:	4682      	mov	sl, r0
  height = EwGetRectH( bounds );
 8026ad8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8026adc:	f7f3 fb72 	bl	801a1c4 <EwGetRectH>
  rd = EwNewRect( 0, 0, width, height );
 8026ae0:	af10      	add	r7, sp, #64	; 0x40
 8026ae2:	2200      	movs	r2, #0
 8026ae4:	9000      	str	r0, [sp, #0]
 8026ae6:	4653      	mov	r3, sl
 8026ae8:	4638      	mov	r0, r7
 8026aea:	4611      	mov	r1, r2
 8026aec:	f7f3 f9f0 	bl	8019ed0 <EwNewRect>
  rs = EwNewRect2Point( rd.Point1, EwMovePointPos( rd.Point1, _this->textSize ));
 8026af0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8026af2:	9300      	str	r3, [sp, #0]
 8026af4:	e897 0006 	ldmia.w	r7, {r1, r2}
 8026af8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8026afa:	a80a      	add	r0, sp, #40	; 0x28
 8026afc:	f7f3 f9a6 	bl	8019e4c <EwMovePointPos>
 8026b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b02:	9300      	str	r3, [sp, #0]
 8026b04:	ad14      	add	r5, sp, #80	; 0x50
 8026b06:	e897 0006 	ldmia.w	r7, {r1, r2}
 8026b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026b0c:	4628      	mov	r0, r5
 8026b0e:	f7f3 f9e6 	bl	8019ede <EwNewRect2Point>
  if ((( align & ViewsTextAlignmentAlignHorzAuto ) == ViewsTextAlignmentAlignHorzAuto ))
 8026b12:	f019 0f80 	tst.w	r9, #128	; 0x80
 8026b16:	d171      	bne.n	8026bfc <ViewsText_GetContentArea+0x1b4>
  if ((( align & ViewsTextAlignmentAlignHorzJustified ) == ViewsTextAlignmentAlignHorzJustified ))
 8026b18:	f019 0f40 	tst.w	r9, #64	; 0x40
 8026b1c:	d157      	bne.n	8026bce <ViewsText_GetContentArea+0x186>
 8026b1e:	ac04      	add	r4, sp, #16
  if ( EwGetRectW( rs ) != EwGetRectW( rd ))
 8026b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026b24:	f7f3 fb56 	bl	801a1d4 <EwGetRectW>
 8026b28:	4682      	mov	sl, r0
 8026b2a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026b2e:	f7f3 fb51 	bl	801a1d4 <EwGetRectW>
 8026b32:	4582      	cmp	sl, r0
 8026b34:	d007      	beq.n	8026b46 <ViewsText_GetContentArea+0xfe>
    if ((( align & ViewsTextAlignmentAlignHorzRight ) == ViewsTextAlignmentAlignHorzRight ))
 8026b36:	f019 0f04 	tst.w	r9, #4
 8026b3a:	f040 8081 	bne.w	8026c40 <ViewsText_GetContentArea+0x1f8>
      if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026b3e:	f019 0f02 	tst.w	r9, #2
 8026b42:	f040 80ab 	bne.w	8026c9c <ViewsText_GetContentArea+0x254>
  if ( EwGetRectH( rs ) != EwGetRectH( rd ))
 8026b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026b4a:	f7f3 fb3b 	bl	801a1c4 <EwGetRectH>
 8026b4e:	4682      	mov	sl, r0
 8026b50:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026b54:	f7f3 fb36 	bl	801a1c4 <EwGetRectH>
 8026b58:	4582      	cmp	sl, r0
 8026b5a:	d006      	beq.n	8026b6a <ViewsText_GetContentArea+0x122>
    if ((( align & ViewsTextAlignmentAlignVertBottom ) == ViewsTextAlignmentAlignVertBottom ))
 8026b5c:	f019 0f20 	tst.w	r9, #32
 8026b60:	d15b      	bne.n	8026c1a <ViewsText_GetContentArea+0x1d2>
      if ((( align & ViewsTextAlignmentAlignVertCenter ) == ViewsTextAlignmentAlignVertCenter ))
 8026b62:	f019 0f10 	tst.w	r9, #16
 8026b66:	f040 8085 	bne.w	8026c74 <ViewsText_GetContentArea+0x22c>
  rs = EwMoveRectPos( rs, bounds.Point1 );
 8026b6a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026b6e:	ab01      	add	r3, sp, #4
 8026b70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026b72:	e883 0003 	stmia.w	r3, {r0, r1}
 8026b76:	9200      	str	r2, [sp, #0]
 8026b78:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8026b7c:	4620      	mov	r0, r4
 8026b7e:	f7f3 fb0a 	bl	801a196 <EwMoveRectPos>
 8026b82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026b86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  return rs;
 8026b8a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
}
 8026b8e:	4630      	mov	r0, r6
 8026b90:	b018      	add	sp, #96	; 0x60
 8026b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return _Const0002;
 8026b96:	2300      	movs	r3, #0
}
 8026b98:	4630      	mov	r0, r6
    return _Const0002;
 8026b9a:	e9c6 3300 	strd	r3, r3, [r6]
 8026b9e:	e9c6 3302 	strd	r3, r3, [r6, #8]
}
 8026ba2:	b018      	add	sp, #96	; 0x60
 8026ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    EwSignal( EwNewSlot( _this, ViewsText_reparseSlot ), ((XObject)_this ));
 8026ba8:	ad08      	add	r5, sp, #32
 8026baa:	4a47      	ldr	r2, [pc, #284]	; (8026cc8 <ViewsText_GetContentArea+0x280>)
 8026bac:	4628      	mov	r0, r5
 8026bae:	4621      	mov	r1, r4
 8026bb0:	f7f4 fb10 	bl	801b1d4 <EwNewSlot>
 8026bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026bb8:	4622      	mov	r2, r4
 8026bba:	f7f4 fb2e 	bl	801b21a <EwSignal>
  if ( !EwCompString( _this->flowString, 0 ))
 8026bbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8026bc0:	2100      	movs	r1, #0
 8026bc2:	f7f5 fc0f 	bl	801c3e4 <EwCompString>
 8026bc6:	2800      	cmp	r0, #0
 8026bc8:	f43f af58 	beq.w	8026a7c <ViewsText_GetContentArea+0x34>
 8026bcc:	e75e      	b.n	8026a8c <ViewsText_GetContentArea+0x44>
    if ( maxWidth > EwGetRectW( rs ))
 8026bce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026bd2:	f7f3 faff 	bl	801a1d4 <EwGetRectW>
 8026bd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026bda:	4582      	cmp	sl, r0
      rs = EwSetRectW( rs, maxWidth );
 8026bdc:	ac04      	add	r4, sp, #16
    if ( maxWidth > EwGetRectW( rs ))
 8026bde:	dd9f      	ble.n	8026b20 <ViewsText_GetContentArea+0xd8>
      rs = EwSetRectW( rs, maxWidth );
 8026be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026be2:	f8cd a004 	str.w	sl, [sp, #4]
 8026be6:	9300      	str	r3, [sp, #0]
 8026be8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8026bec:	4620      	mov	r0, r4
 8026bee:	f7f3 fbd5 	bl	801a39c <EwSetRectW>
 8026bf2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026bf6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8026bfa:	e791      	b.n	8026b20 <ViewsText_GetContentArea+0xd8>
    if ( ViewsText_IsBaseDirectionRTL( _this ))
 8026bfc:	4620      	mov	r0, r4
 8026bfe:	f7ff fee7 	bl	80269d0 <ViewsText_IsBaseDirectionRTL>
 8026c02:	b390      	cbz	r0, 8026c6a <ViewsText_GetContentArea+0x222>
      align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzRight;
 8026c04:	f029 0984 	bic.w	r9, r9, #132	; 0x84
 8026c08:	f049 0904 	orr.w	r9, r9, #4
 8026c0c:	e784      	b.n	8026b18 <ViewsText_GetContentArea+0xd0>
    _this->textSize.X = ResourcesFont_GetFlowTextAdvance( _this->Font, _this->flowString );
 8026c0e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8026c12:	f7fe ff05 	bl	8025a20 <ResourcesFont_GetFlowTextAdvance>
 8026c16:	64a0      	str	r0, [r4, #72]	; 0x48
 8026c18:	e747      	b.n	8026aaa <ViewsText_GetContentArea+0x62>
      rs = EwSetRectY( rs, rd.Point2.Y - EwGetRectH( rs ));
 8026c1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026c1e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8026c20:	f7f3 fad0 	bl	801a1c4 <EwGetRectH>
 8026c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c26:	1a38      	subs	r0, r7, r0
 8026c28:	9001      	str	r0, [sp, #4]
        rs = EwSetRectY( rs, ( rd.Point1.Y + ( EwGetRectH( rd ) / 2 )) - ( EwGetRectH( 
 8026c2a:	9300      	str	r3, [sp, #0]
 8026c2c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8026c30:	4620      	mov	r0, r4
 8026c32:	f7f3 fb9e 	bl	801a372 <EwSetRectY>
 8026c36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026c3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8026c3e:	e794      	b.n	8026b6a <ViewsText_GetContentArea+0x122>
      rs = EwSetRectX( rs, rd.Point2.X - EwGetRectW( rs ));
 8026c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026c44:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8026c48:	f7f3 fac4 	bl	801a1d4 <EwGetRectW>
 8026c4c:	ebaa 0000 	sub.w	r0, sl, r0
        rs = EwSetRectX( rs, ( rd.Point1.X + ( EwGetRectW( rd ) / 2 )) - ( EwGetRectW( 
 8026c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c52:	e9cd 3000 	strd	r3, r0, [sp]
 8026c56:	4620      	mov	r0, r4
 8026c58:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8026c5c:	f7f3 fb75 	bl	801a34a <EwSetRectX>
 8026c60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026c64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8026c68:	e76d      	b.n	8026b46 <ViewsText_GetContentArea+0xfe>
      align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzLeft;
 8026c6a:	f029 0981 	bic.w	r9, r9, #129	; 0x81
 8026c6e:	f049 0901 	orr.w	r9, r9, #1
 8026c72:	e751      	b.n	8026b18 <ViewsText_GetContentArea+0xd0>
        rs = EwSetRectY( rs, ( rd.Point1.Y + ( EwGetRectH( rd ) / 2 )) - ( EwGetRectH( 
 8026c74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026c78:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8026c7a:	f7f3 faa3 	bl	801a1c4 <EwGetRectH>
 8026c7e:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 8026c82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026c86:	eb07 076c 	add.w	r7, r7, ip, asr #1
 8026c8a:	f7f3 fa9b 	bl	801a1c4 <EwGetRectH>
        rs ) / 2 ));
 8026c8e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
        rs = EwSetRectY( rs, ( rd.Point1.Y + ( EwGetRectH( rd ) / 2 )) - ( EwGetRectH( 
 8026c92:	eba7 0760 	sub.w	r7, r7, r0, asr #1
 8026c96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c98:	9701      	str	r7, [sp, #4]
 8026c9a:	e7c6      	b.n	8026c2a <ViewsText_GetContentArea+0x1e2>
        rs = EwSetRectX( rs, ( rd.Point1.X + ( EwGetRectW( rd ) / 2 )) - ( EwGetRectW( 
 8026c9c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8026ca0:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8026ca4:	f7f3 fa96 	bl	801a1d4 <EwGetRectW>
 8026ca8:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 8026cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026cb0:	eb0a 0a6c 	add.w	sl, sl, ip, asr #1
 8026cb4:	f7f3 fa8e 	bl	801a1d4 <EwGetRectW>
        rs ) / 2 ));
 8026cb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
        rs = EwSetRectX( rs, ( rd.Point1.X + ( EwGetRectW( rd ) / 2 )) - ( EwGetRectW( 
 8026cbc:	ebaa 0060 	sub.w	r0, sl, r0, asr #1
 8026cc0:	e7c6      	b.n	8026c50 <ViewsText_GetContentArea+0x208>
 8026cc2:	bf00      	nop
 8026cc4:	080387b0 	.word	0x080387b0
 8026cc8:	080270d5 	.word	0x080270d5

08026ccc <ViewsText_Draw>:
{
 8026ccc:	b082      	sub	sp, #8
 8026cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cd2:	ed2d 8b02 	vpush	{d8}
 8026cd6:	460c      	mov	r4, r1
 8026cd8:	b0b9      	sub	sp, #228	; 0xe4
 8026cda:	ee08 4a10 	vmov	s16, r4
 8026cde:	4605      	mov	r5, r0
 8026ce0:	ac44      	add	r4, sp, #272	; 0x110
  if ( !EwCompString( _this->flowString, 0 ) || ( _this->Font == 0 ))
 8026ce2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8026ce4:	2100      	movs	r1, #0
{
 8026ce6:	e884 000c 	stmia.w	r4, {r2, r3}
  if ( !EwCompString( _this->flowString, 0 ) || ( _this->Font == 0 ))
 8026cea:	f7f5 fb7b 	bl	801c3e4 <EwCompString>
 8026cee:	2800      	cmp	r0, #0
 8026cf0:	f000 81a2 	beq.w	8027038 <ViewsText_Draw+0x36c>
 8026cf4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8026cf6:	9314      	str	r3, [sp, #80]	; 0x50
 8026cf8:	2b00      	cmp	r3, #0
 8026cfa:	f000 819d 	beq.w	8027038 <ViewsText_Draw+0x36c>
  rd = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8026cfe:	af48      	add	r7, sp, #288	; 0x120
 8026d00:	e897 0003 	ldmia.w	r7, {r0, r1}
  align = _this->Alignment;
 8026d04:	6d2c      	ldr	r4, [r5, #80]	; 0x50
  rd = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8026d06:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  align = _this->Alignment;
 8026d08:	941e      	str	r4, [sp, #120]	; 0x78
  rd = EwMoveRectPos( _this->Super1.Bounds, aOffset );
 8026d0a:	ae01      	add	r6, sp, #4
 8026d0c:	e886 0003 	stmia.w	r6, {r0, r1}
 8026d10:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8026d14:	9200      	str	r2, [sp, #0]
 8026d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026d18:	a82c      	add	r0, sp, #176	; 0xb0
 8026d1a:	f7f3 fa3c 	bl	801a196 <EwMoveRectPos>
  col = _this->Color;
 8026d1e:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 8026d22:	9212      	str	r2, [sp, #72]	; 0x48
 8026d24:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
 8026d28:	9217      	str	r2, [sp, #92]	; 0x5c
  noOfRows = EwGetStringChar( _this->flowString, 0 );
 8026d2a:	2100      	movs	r1, #0
  col = _this->Color;
 8026d2c:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  noOfRows = EwGetStringChar( _this->flowString, 0 );
 8026d30:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  col = _this->Color;
 8026d32:	9216      	str	r2, [sp, #88]	; 0x58
 8026d34:	f895 8057 	ldrb.w	r8, [r5, #87]	; 0x57
 8026d38:	f8d5 a054 	ldr.w	sl, [r5, #84]	; 0x54
  noOfRows = EwGetStringChar( _this->flowString, 0 );
 8026d3c:	f7f5 fceb 	bl	801c716 <EwGetStringChar>
  area = EwMoveRectPos( ViewsText_GetContentArea( _this ), aOffset );
 8026d40:	ac34      	add	r4, sp, #208	; 0xd0
  noOfRows = EwGetStringChar( _this->flowString, 0 );
 8026d42:	4681      	mov	r9, r0
  area = EwMoveRectPos( ViewsText_GetContentArea( _this ), aOffset );
 8026d44:	4629      	mov	r1, r5
 8026d46:	4620      	mov	r0, r4
 8026d48:	f7ff fe7e 	bl	8026a48 <ViewsText_GetContentArea>
 8026d4c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8026d50:	e886 0003 	stmia.w	r6, {r0, r1}
 8026d54:	af30      	add	r7, sp, #192	; 0xc0
 8026d56:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8026d5a:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8026d5c:	9400      	str	r4, [sp, #0]
 8026d5e:	4638      	mov	r0, r7
 8026d60:	f7f3 fa19 	bl	801a196 <EwMoveRectPos>
  ofs = EwNewPoint( rd.Point1.X - area.Point1.X, ( rd.Point1.Y - area.Point1.Y ) 
 8026d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
  area = EwMoveRectPos( ViewsText_GetContentArea( _this ), aOffset );
 8026d66:	f8dd b0c4 	ldr.w	fp, [sp, #196]	; 0xc4
  ofs = EwNewPoint( rd.Point1.X - area.Point1.X, ( rd.Point1.Y - area.Point1.Y ) 
 8026d6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026d6c:	6a14      	ldr	r4, [r2, #32]
 8026d6e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8026d70:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026d72:	eba3 020b 	sub.w	r2, r3, fp
 8026d76:	1a41      	subs	r1, r0, r1
 8026d78:	1b12      	subs	r2, r2, r4
 8026d7a:	a826      	add	r0, sp, #152	; 0x98
 8026d7c:	f7f3 f832 	bl	8019de4 <EwNewPoint>
  if ( noOfRows < 1 )
 8026d80:	f1b9 0f00 	cmp.w	r9, #0
 8026d84:	f000 8158 	beq.w	8027038 <ViewsText_Draw+0x36c>
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8026d88:	9b4a      	ldr	r3, [sp, #296]	; 0x128
  ctl = ctr = cbl = cbr = col;
 8026d8a:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
  opacity = ((( aOpacity + 1 ) * 255 ) >> 8 ) + 1;
 8026d8e:	3301      	adds	r3, #1
 8026d90:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8026d94:	121b      	asrs	r3, r3, #8
 8026d96:	3301      	adds	r3, #1
  if ( opacity < 256 )
 8026d98:	2bff      	cmp	r3, #255	; 0xff
    ctl.Alpha = (XUInt8)(( ctl.Alpha * opacity ) >> 8 );
 8026d9a:	bfd8      	it	le
 8026d9c:	fb03 f808 	mulle.w	r8, r3, r8
  if ((( align & ViewsTextAlignmentAlignHorzAuto ) == ViewsTextAlignmentAlignHorzAuto ))
 8026da0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ctl.Alpha = (XUInt8)(( ctl.Alpha * opacity ) >> 8 );
 8026da2:	bfd8      	it	le
 8026da4:	f3c8 2807 	ubfxle	r8, r8, #8, #8
  if ((( align & ViewsTextAlignmentAlignHorzAuto ) == ViewsTextAlignmentAlignHorzAuto ))
 8026da8:	061b      	lsls	r3, r3, #24
 8026daa:	f100 816b 	bmi.w	8027084 <ViewsText_Draw+0x3b8>
  if (( noOfRows == 1 ) && !(( align & ViewsTextAlignmentAlignHorzJustified ) == 
 8026dae:	f1b9 0f01 	cmp.w	r9, #1
 8026db2:	d104      	bne.n	8026dbe <ViewsText_Draw+0xf2>
 8026db4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026db6:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8026dba:	f000 80f0 	beq.w	8026f9e <ViewsText_Draw+0x2d2>
  rowHeight = ( font->Ascent + font->Descent ) + leading;
 8026dbe:	9914      	ldr	r1, [sp, #80]	; 0x50
  clipY1 = aClip.Point1.Y - area.Point1.Y;
 8026dc0:	9c45      	ldr	r4, [sp, #276]	; 0x114
  rowHeight = ( font->Ascent + font->Descent ) + leading;
 8026dc2:	6a0b      	ldr	r3, [r1, #32]
 8026dc4:	69ca      	ldr	r2, [r1, #28]
 8026dc6:	698e      	ldr	r6, [r1, #24]
  clipY2 = aClip.Point2.Y - area.Point1.Y;
 8026dc8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8026dca:	9113      	str	r1, [sp, #76]	; 0x4c
  rowHeight = ( font->Ascent + font->Descent ) + leading;
 8026dcc:	eb03 0c02 	add.w	ip, r3, r2
 8026dd0:	4466      	add	r6, ip
  areaW = EwGetRectW( area );
 8026dd2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  rowHeight = ( font->Ascent + font->Descent ) + leading;
 8026dd6:	9618      	str	r6, [sp, #96]	; 0x60
  areaW = EwGetRectW( area );
 8026dd8:	f7f3 f9fc 	bl	801a1d4 <EwGetRectW>
  c = EwGetStringChar( _this->flowString, 1 );
 8026ddc:	2101      	movs	r1, #1
  areaW = EwGetRectW( area );
 8026dde:	4603      	mov	r3, r0
  c = EwGetStringChar( _this->flowString, 1 );
 8026de0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  areaW = EwGetRectW( area );
 8026de2:	9320      	str	r3, [sp, #128]	; 0x80
  c = EwGetStringChar( _this->flowString, 1 );
 8026de4:	f7f5 fc97 	bl	801c716 <EwGetStringChar>
  clipY1 = aClip.Point1.Y - area.Point1.Y;
 8026de8:	eba4 090b 	sub.w	r9, r4, fp
  while ((( y + rowHeight ) < clipY1 ) && ( c > 0 ))
 8026dec:	454e      	cmp	r6, r9
  c = EwGetStringChar( _this->flowString, 1 );
 8026dee:	4604      	mov	r4, r0
  while ((( y + rowHeight ) < clipY1 ) && ( c > 0 ))
 8026df0:	4633      	mov	r3, r6
 8026df2:	f280 816c 	bge.w	80270ce <ViewsText_Draw+0x402>
 8026df6:	2800      	cmp	r0, #0
 8026df8:	f000 811e 	beq.w	8027038 <ViewsText_Draw+0x36c>
 8026dfc:	46b2      	mov	sl, r6
  i = 1;
 8026dfe:	461c      	mov	r4, r3
 8026e00:	2601      	movs	r6, #1
 8026e02:	e002      	b.n	8026e0a <ViewsText_Draw+0x13e>
  while ((( y + rowHeight ) < clipY1 ) && ( c > 0 ))
 8026e04:	2800      	cmp	r0, #0
 8026e06:	f000 8117 	beq.w	8027038 <ViewsText_Draw+0x36c>
    i = i + c;
 8026e0a:	4406      	add	r6, r0
    c = EwGetStringChar( _this->flowString, i );
 8026e0c:	4631      	mov	r1, r6
 8026e0e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8026e10:	4657      	mov	r7, sl
  while ((( y + rowHeight ) < clipY1 ) && ( c > 0 ))
 8026e12:	44a2      	add	sl, r4
    c = EwGetStringChar( _this->flowString, i );
 8026e14:	f7f5 fc7f 	bl	801c716 <EwGetStringChar>
  while ((( y + rowHeight ) < clipY1 ) && ( c > 0 ))
 8026e18:	45ca      	cmp	sl, r9
 8026e1a:	dbf3      	blt.n	8026e04 <ViewsText_Draw+0x138>
 8026e1c:	4604      	mov	r4, r0
  clipY2 = aClip.Point2.Y - area.Point1.Y;
 8026e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026e20:	eba3 030b 	sub.w	r3, r3, fp
  while (( y < clipY2 ) && ( c > 0 ))
 8026e24:	42bb      	cmp	r3, r7
  clipY2 = aClip.Point2.Y - area.Point1.Y;
 8026e26:	931c      	str	r3, [sp, #112]	; 0x70
  while (( y < clipY2 ) && ( c > 0 ))
 8026e28:	f340 8106 	ble.w	8027038 <ViewsText_Draw+0x36c>
 8026e2c:	2c00      	cmp	r4, #0
 8026e2e:	f000 8103 	beq.w	8027038 <ViewsText_Draw+0x36c>
          ofs2.X = (( ofs2.X - ( areaW / 2 )) + ( ResourcesFont_GetTextAdvance( 
 8026e32:	9b20      	ldr	r3, [sp, #128]	; 0x80
        if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026e34:	9613      	str	r6, [sp, #76]	; 0x4c
          ofs2.X = (( ofs2.X - ( areaW / 2 )) + ( ResourcesFont_GetTextAdvance( 
 8026e36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8026e3a:	105b      	asrs	r3, r3, #1
 8026e3c:	425b      	negs	r3, r3
 8026e3e:	9321      	str	r3, [sp, #132]	; 0x84
 8026e40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026e42:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8026e46:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8026e4a:	9219      	str	r2, [sp, #100]	; 0x64
 8026e4c:	aa09      	add	r2, sp, #36	; 0x24
 8026e4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8026e50:	aa05      	add	r2, sp, #20
 8026e52:	921a      	str	r2, [sp, #104]	; 0x68
      if ((( align & ViewsTextAlignmentAlignHorzRight ) == ViewsTextAlignmentAlignHorzRight ))
 8026e54:	f003 0204 	and.w	r2, r3, #4
        if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026e58:	f003 0302 	and.w	r3, r3, #2
 8026e5c:	f10d 0ba0 	add.w	fp, sp, #160	; 0xa0
      if ((( align & ViewsTextAlignmentAlignHorzRight ) == ViewsTextAlignmentAlignHorzRight ))
 8026e60:	921d      	str	r2, [sp, #116]	; 0x74
        if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026e62:	931f      	str	r3, [sp, #124]	; 0x7c
 8026e64:	462e      	mov	r6, r5
 8026e66:	e062      	b.n	8026f2e <ViewsText_Draw+0x262>
 8026e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026e6a:	eb03 0904 	add.w	r9, r3, r4
 8026e6e:	3301      	adds	r3, #1
 8026e70:	9312      	str	r3, [sp, #72]	; 0x48
      if ((( align & ViewsTextAlignmentAlignHorzRight ) == ViewsTextAlignmentAlignHorzRight ))
 8026e72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026e74:	2b00      	cmp	r3, #0
 8026e76:	f040 80e6 	bne.w	8027046 <ViewsText_Draw+0x37a>
        if ((( align & ViewsTextAlignmentAlignHorzCenter ) == ViewsTextAlignmentAlignHorzCenter ))
 8026e7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	f040 80f0 	bne.w	8027062 <ViewsText_Draw+0x396>
 8026e82:	1e62      	subs	r2, r4, #1
 8026e84:	9215      	str	r2, [sp, #84]	; 0x54
 8026e86:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    GraphicsCanvas_DrawText( aCanvas, aClip, font, _this->flowString, i + 1, c - 
 8026e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026e8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026e8e:	9528      	str	r5, [sp, #160]	; 0xa0
 8026e90:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8026e94:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
 8026e98:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8026e9c:	f88d 4092 	strb.w	r4, [sp, #146]	; 0x92
 8026ea0:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
 8026ea4:	f88d a08c 	strb.w	sl, [sp, #140]	; 0x8c
 8026ea8:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
 8026eac:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8026eb0:	f88d 8093 	strb.w	r8, [sp, #147]	; 0x93
 8026eb4:	2400      	movs	r4, #0
 8026eb6:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8026eba:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8026ebc:	f88d 808b 	strb.w	r8, [sp, #139]	; 0x8b
 8026ec0:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
 8026ec4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ec6:	f88d a094 	strb.w	sl, [sp, #148]	; 0x94
 8026eca:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
 8026ece:	f88d 8097 	strb.w	r8, [sp, #151]	; 0x97
 8026ed2:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
 8026ed6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026ed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026eda:	9210      	str	r2, [sp, #64]	; 0x40
 8026edc:	930d      	str	r3, [sp, #52]	; 0x34
 8026ede:	2201      	movs	r2, #1
 8026ee0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026ee2:	9211      	str	r2, [sp, #68]	; 0x44
 8026ee4:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 8026ee6:	e883 0003 	stmia.w	r3, {r0, r1}
 8026eea:	ab2c      	add	r3, sp, #176	; 0xb0
 8026eec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026eee:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8026ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8026ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026ef6:	9304      	str	r3, [sp, #16]
 8026ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026efa:	9303      	str	r3, [sp, #12]
 8026efc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026efe:	9301      	str	r3, [sp, #4]
 8026f00:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8026f02:	9300      	str	r3, [sp, #0]
 8026f04:	9502      	str	r5, [sp, #8]
 8026f06:	ab44      	add	r3, sp, #272	; 0x110
 8026f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026f0a:	ee18 0a10 	vmov	r0, s16
 8026f0e:	f7fe fa7d 	bl	802540c <GraphicsCanvas_DrawText>
    y = y + rowHeight;
 8026f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c = EwGetStringChar( _this->flowString, i );
 8026f14:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8026f16:	4649      	mov	r1, r9
    y = y + rowHeight;
 8026f18:	441f      	add	r7, r3
    c = EwGetStringChar( _this->flowString, i );
 8026f1a:	f7f5 fbfc 	bl	801c716 <EwGetStringChar>
  while (( y < clipY2 ) && ( c > 0 ))
 8026f1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f20:	42bb      	cmp	r3, r7
    c = EwGetStringChar( _this->flowString, i );
 8026f22:	4604      	mov	r4, r0
  while (( y < clipY2 ) && ( c > 0 ))
 8026f24:	f340 8088 	ble.w	8027038 <ViewsText_Draw+0x36c>
 8026f28:	2800      	cmp	r0, #0
 8026f2a:	f000 8085 	beq.w	8027038 <ViewsText_Draw+0x36c>
    XPoint ofs2 = EwMovePointNeg( ofs, EwNewPoint( 0, y ));
 8026f2e:	463a      	mov	r2, r7
 8026f30:	2100      	movs	r1, #0
 8026f32:	a82a      	add	r0, sp, #168	; 0xa8
 8026f34:	f7f2 ff56 	bl	8019de4 <EwNewPoint>
 8026f38:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026f3a:	9300      	str	r3, [sp, #0]
 8026f3c:	aa26      	add	r2, sp, #152	; 0x98
 8026f3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026f40:	ca06      	ldmia	r2, {r1, r2}
 8026f42:	4658      	mov	r0, fp
 8026f44:	f7f2 ff70 	bl	8019e28 <EwMovePointNeg>
    if ((((( align & ViewsTextAlignmentAlignHorzJustified ) == ViewsTextAlignmentAlignHorzJustified ) 
 8026f48:	9b19      	ldr	r3, [sp, #100]	; 0x64
    XPoint ofs2 = EwMovePointNeg( ofs, EwNewPoint( 0, y ));
 8026f4a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    if ((((( align & ViewsTextAlignmentAlignHorzJustified ) == ViewsTextAlignmentAlignHorzJustified ) 
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d08b      	beq.n	8026e68 <ViewsText_Draw+0x19c>
        && ( EwGetStringChar( _this->flowString, ( i + c ) - 1 ) != 0x000A )) && 
 8026f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026f52:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8026f54:	eb03 0904 	add.w	r9, r3, r4
 8026f58:	f109 31ff 	add.w	r1, r9, #4294967295
 8026f5c:	f7f5 fbdb 	bl	801c716 <EwGetStringChar>
        ( EwGetStringChar( _this->flowString, i + 1 ) != 0x000A )) && ( EwGetStringChar( 
 8026f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        && ( EwGetStringChar( _this->flowString, ( i + c ) - 1 ) != 0x000A )) && 
 8026f62:	280a      	cmp	r0, #10
        ( EwGetStringChar( _this->flowString, i + 1 ) != 0x000A )) && ( EwGetStringChar( 
 8026f64:	f103 0301 	add.w	r3, r3, #1
 8026f68:	9312      	str	r3, [sp, #72]	; 0x48
        && ( EwGetStringChar( _this->flowString, ( i + c ) - 1 ) != 0x000A )) && 
 8026f6a:	d082      	beq.n	8026e72 <ViewsText_Draw+0x1a6>
        ( EwGetStringChar( _this->flowString, i + 1 ) != 0x000A )) && ( EwGetStringChar( 
 8026f6c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8026f6e:	4619      	mov	r1, r3
 8026f70:	f7f5 fbd1 	bl	801c716 <EwGetStringChar>
        && ( EwGetStringChar( _this->flowString, ( i + c ) - 1 ) != 0x000A )) && 
 8026f74:	280a      	cmp	r0, #10
 8026f76:	f43f af7c 	beq.w	8026e72 <ViewsText_Draw+0x1a6>
        ( EwGetStringChar( _this->flowString, i + 1 ) != 0x000A )) && ( EwGetStringChar( 
 8026f7a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8026f7c:	4649      	mov	r1, r9
 8026f7e:	f7f5 fbca 	bl	801c716 <EwGetStringChar>
 8026f82:	2800      	cmp	r0, #0
 8026f84:	f43f af75 	beq.w	8026e72 <ViewsText_Draw+0x1a6>
    if ( justified && !!( align & ( ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignHorzRight )))
 8026f88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026f8a:	f013 0f06 	tst.w	r3, #6
 8026f8e:	f040 808a 	bne.w	80270a6 <ViewsText_Draw+0x3da>
 8026f92:	1e63      	subs	r3, r4, #1
 8026f94:	9315      	str	r3, [sp, #84]	; 0x54
      if ((( blank1 < 0 ) || ( blank1 >= rowEnd )) && (( blank2 < 0 ) || ( blank2 
 8026f96:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
      rw = areaW;
 8026f9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f9c:	e775      	b.n	8026e8a <ViewsText_Draw+0x1be>
    GraphicsCanvas_DrawText( aCanvas, aClip, font, _this->flowString, 2, EwGetStringChar( 
 8026f9e:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 8026fa0:	4649      	mov	r1, r9
 8026fa2:	4620      	mov	r0, r4
 8026fa4:	f7f5 fbb7 	bl	801c716 <EwGetStringChar>
 8026fa8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8026faa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8026fac:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 8026fb0:	ab26      	add	r3, sp, #152	; 0x98
 8026fb2:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8026fb6:	f88d 7091 	strb.w	r7, [sp, #145]	; 0x91
 8026fba:	463a      	mov	r2, r7
 8026fbc:	4686      	mov	lr, r0
 8026fbe:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8026fc0:	f88d 7092 	strb.w	r7, [sp, #146]	; 0x92
 8026fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026fca:	f88d 7096 	strb.w	r7, [sp, #150]	; 0x96
 8026fce:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8026fd2:	f88d 8093 	strb.w	r8, [sp, #147]	; 0x93
 8026fd6:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
 8026fda:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
 8026fde:	f88d 8097 	strb.w	r8, [sp, #151]	; 0x97
 8026fe2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8026fe6:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8026fea:	f88d 808b 	strb.w	r8, [sp, #139]	; 0x8b
 8026fee:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
 8026ff2:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8026ff6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8026ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8026ffc:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8027000:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 8027004:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8027008:	970e      	str	r7, [sp, #56]	; 0x38
 802700a:	e88c 0003 	stmia.w	ip, {r0, r1}
 802700e:	ab2c      	add	r3, sp, #176	; 0xb0
 8027010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027012:	ae05      	add	r6, sp, #20
 8027014:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    _this->flowString, 1 ) - 1, rd, ofs, 0, ViewsOrientationNormal, ctl, ctr, cbr, 
 8027018:	f10e 35ff 	add.w	r5, lr, #4294967295
    GraphicsCanvas_DrawText( aCanvas, aClip, font, _this->flowString, 2, EwGetStringChar( 
 802701c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802701e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8027020:	9300      	str	r3, [sp, #0]
 8027022:	2202      	movs	r2, #2
 8027024:	9504      	str	r5, [sp, #16]
 8027026:	9402      	str	r4, [sp, #8]
 8027028:	9101      	str	r1, [sp, #4]
 802702a:	9203      	str	r2, [sp, #12]
 802702c:	ab44      	add	r3, sp, #272	; 0x110
 802702e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027030:	ee18 0a10 	vmov	r0, s16
 8027034:	f7fe f9ea 	bl	802540c <GraphicsCanvas_DrawText>
}
 8027038:	b039      	add	sp, #228	; 0xe4
 802703a:	ecbd 8b02 	vpop	{d8}
 802703e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027042:	b002      	add	sp, #8
 8027044:	4770      	bx	lr
        ofs2.X = (( ofs2.X - areaW ) + ResourcesFont_GetTextAdvance( font, _this->flowString, 
 8027046:	1e63      	subs	r3, r4, #1
 8027048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802704a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 802704c:	9814      	ldr	r0, [sp, #80]	; 0x50
 802704e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8027050:	9315      	str	r3, [sp, #84]	; 0x54
 8027052:	f7fe fd0b 	bl	8025a6c <ResourcesFont_GetTextAdvance>
 8027056:	1b2d      	subs	r5, r5, r4
 8027058:	4405      	add	r5, r0
 802705a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    XInt32 rw = 0;
 802705e:	2300      	movs	r3, #0
 8027060:	e713      	b.n	8026e8a <ViewsText_Draw+0x1be>
          ofs2.X = (( ofs2.X - ( areaW / 2 )) + ( ResourcesFont_GetTextAdvance( 
 8027062:	1e63      	subs	r3, r4, #1
 8027064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027066:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8027068:	9814      	ldr	r0, [sp, #80]	; 0x50
 802706a:	9315      	str	r3, [sp, #84]	; 0x54
 802706c:	f7fe fcfe 	bl	8025a6c <ResourcesFont_GetTextAdvance>
 8027070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027072:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8027076:	441d      	add	r5, r3
          font, _this->flowString, i + 1, c - 1 ) / 2 ));
 8027078:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    XInt32 rw = 0;
 802707c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
          ofs2.X = (( ofs2.X - ( areaW / 2 )) + ( ResourcesFont_GetTextAdvance( 
 802707e:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8027082:	e702      	b.n	8026e8a <ViewsText_Draw+0x1be>
    if ( ViewsText_IsBaseDirectionRTL( _this ))
 8027084:	4628      	mov	r0, r5
 8027086:	f7ff fca3 	bl	80269d0 <ViewsText_IsBaseDirectionRTL>
      align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzRight;
 802708a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    if ( ViewsText_IsBaseDirectionRTL( _this ))
 802708c:	b128      	cbz	r0, 802709a <ViewsText_Draw+0x3ce>
      align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzRight;
 802708e:	f023 0384 	bic.w	r3, r3, #132	; 0x84
 8027092:	f043 0304 	orr.w	r3, r3, #4
 8027096:	931e      	str	r3, [sp, #120]	; 0x78
 8027098:	e689      	b.n	8026dae <ViewsText_Draw+0xe2>
      align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzLeft;
 802709a:	f023 0381 	bic.w	r3, r3, #129	; 0x81
 802709e:	f043 0301 	orr.w	r3, r3, #1
 80270a2:	931e      	str	r3, [sp, #120]	; 0x78
 80270a4:	e683      	b.n	8026dae <ViewsText_Draw+0xe2>
      XInt32 blank1 = EwStringFindChar( _this->flowString, 0x0020, i + 1 );
 80270a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80270a8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80270aa:	2120      	movs	r1, #32
 80270ac:	f7f5 fc69 	bl	801c982 <EwStringFindChar>
      XInt32 blank2 = EwStringFindChar( _this->flowString, 0x00A0, i + 1 );
 80270b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
      XInt32 blank1 = EwStringFindChar( _this->flowString, 0x0020, i + 1 );
 80270b2:	4603      	mov	r3, r0
      XInt32 blank2 = EwStringFindChar( _this->flowString, 0x00A0, i + 1 );
 80270b4:	21a0      	movs	r1, #160	; 0xa0
 80270b6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
      XInt32 blank1 = EwStringFindChar( _this->flowString, 0x0020, i + 1 );
 80270b8:	9313      	str	r3, [sp, #76]	; 0x4c
      XInt32 blank2 = EwStringFindChar( _this->flowString, 0x00A0, i + 1 );
 80270ba:	f7f5 fc62 	bl	801c982 <EwStringFindChar>
      if ((( blank1 < 0 ) || ( blank1 >= rowEnd )) && (( blank2 < 0 ) || ( blank2 
 80270be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80270c0:	4599      	cmp	r9, r3
 80270c2:	f63f af66 	bhi.w	8026f92 <ViewsText_Draw+0x2c6>
 80270c6:	4581      	cmp	r9, r0
 80270c8:	f67f aed3 	bls.w	8026e72 <ViewsText_Draw+0x1a6>
 80270cc:	e761      	b.n	8026f92 <ViewsText_Draw+0x2c6>
  i = 1;
 80270ce:	2601      	movs	r6, #1
  y = 0;
 80270d0:	2700      	movs	r7, #0
 80270d2:	e6a4      	b.n	8026e1e <ViewsText_Draw+0x152>

080270d4 <ViewsText_reparseSlot>:
  if ( _this->reparsed )
 80270d4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80270d8:	b103      	cbz	r3, 80270dc <ViewsText_reparseSlot+0x8>
 80270da:	4770      	bx	lr
{
 80270dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270e0:	ed2d 8b02 	vpush	{d8}
  width = EwGetRectW( _this->Super1.Bounds );
 80270e4:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 80270e8:	b0a1      	sub	sp, #132	; 0x84
 80270ea:	4682      	mov	sl, r0
  width = EwGetRectW( _this->Super1.Bounds );
 80270ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80270f0:	9508      	str	r5, [sp, #32]
 80270f2:	f7f3 f86f 	bl	801a1d4 <EwGetRectW>
 80270f6:	4604      	mov	r4, r0
  height = EwGetRectH( _this->Super1.Bounds );
 80270f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  width = EwGetRectW( _this->Super1.Bounds );
 80270fc:	9404      	str	r4, [sp, #16]
  height = EwGetRectH( _this->Super1.Bounds );
 80270fe:	f7f3 f861 	bl	801a1c4 <EwGetRectH>
  font = _this->Font;
 8027102:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
  height = EwGetRectH( _this->Super1.Bounds );
 8027106:	4604      	mov	r4, r0
  if ((( font != 0 ) && !!!font->Ascent ) && !!!font->Descent )
 8027108:	f1bb 0f00 	cmp.w	fp, #0
 802710c:	d003      	beq.n	8027116 <ViewsText_reparseSlot+0x42>
 802710e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8027112:	2b00      	cmp	r3, #0
 8027114:	d070      	beq.n	80271f8 <ViewsText_reparseSlot+0x124>
  if ( _this->WrapText )
 8027116:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 802711a:	2b00      	cmp	r3, #0
 802711c:	d060      	beq.n	80271e0 <ViewsText_reparseSlot+0x10c>
      maxWidth = 1;
 802711e:	9b04      	ldr	r3, [sp, #16]
  if ( _this->bidiContext != 0 )
 8027120:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
      maxWidth = 1;
 8027124:	2b00      	cmp	r3, #0
 8027126:	bfac      	ite	ge
 8027128:	461d      	movge	r5, r3
 802712a:	2501      	movlt	r5, #1
  if ( _this->bidiContext != 0 )
 802712c:	2800      	cmp	r0, #0
 802712e:	d15d      	bne.n	80271ec <ViewsText_reparseSlot+0x118>
  _this->reparsed = 1;
 8027130:	2301      	movs	r3, #1
  if (( EwCompString( _this->String, 0 ) != 0 ) && ( font != 0 ))
 8027132:	f8da 0040 	ldr.w	r0, [sl, #64]	; 0x40
  _this->reparsed = 1;
 8027136:	f88a 305c 	strb.w	r3, [sl, #92]	; 0x5c
  if (( EwCompString( _this->String, 0 ) != 0 ) && ( font != 0 ))
 802713a:	2100      	movs	r1, #0
 802713c:	f7f5 f952 	bl	801c3e4 <EwCompString>
 8027140:	b358      	cbz	r0, 802719a <ViewsText_reparseSlot+0xc6>
 8027142:	f1bb 0f00 	cmp.w	fp, #0
 8027146:	d028      	beq.n	802719a <ViewsText_reparseSlot+0xc6>
    XInt32 length = EwGetStringLength( _this->String );
 8027148:	f8da 0040 	ldr.w	r0, [sl, #64]	; 0x40
 802714c:	f7f5 fb10 	bl	801c770 <EwGetStringLength>
    if ( _this->EnableBidiText )
 8027150:	f89a 305b 	ldrb.w	r3, [sl, #91]	; 0x5b
    XInt32 length = EwGetStringLength( _this->String );
 8027154:	4606      	mov	r6, r0
    if ( _this->EnableBidiText )
 8027156:	2b00      	cmp	r3, #0
 8027158:	f040 824a 	bne.w	80275f0 <ViewsText_reparseSlot+0x51c>
 802715c:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
    _this->flowString = EwShareString( ResourcesFont_ParseFlowString( font, _this->String, 
 8027160:	e9cd 6000 	strd	r6, r0, [sp]
 8027164:	462b      	mov	r3, r5
 8027166:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 802716a:	2200      	movs	r2, #0
 802716c:	4658      	mov	r0, fp
 802716e:	f7fe fc5d 	bl	8025a2c <ResourcesFont_ParseFlowString>
 8027172:	f7f5 fa61 	bl	801c638 <EwShareString>
    if (( _this->bidiContext != 0 ) && !ViewsText_IsBidiText( _this ))
 8027176:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    _this->flowString = EwShareString( ResourcesFont_ParseFlowString( font, _this->String, 
 802717a:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
    if (( _this->bidiContext != 0 ) && !ViewsText_IsBidiText( _this ))
 802717e:	b17b      	cbz	r3, 80271a0 <ViewsText_reparseSlot+0xcc>
 8027180:	4650      	mov	r0, sl
 8027182:	f7ff fc43 	bl	8026a0c <ViewsText_IsBidiText>
 8027186:	b958      	cbnz	r0, 80271a0 <ViewsText_reparseSlot+0xcc>
      ViewsText_freeBidi( _this, _this->bidiContext );
 8027188:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
  if ( aBidi == 0 )
 802718c:	b108      	cbz	r0, 8027192 <ViewsText_reparseSlot+0xbe>
  EwFreeBidi( aBidi );
 802718e:	f7e9 ff15 	bl	8010fbc <EwFreeBidi>
      _this->bidiContext = 0;
 8027192:	2300      	movs	r3, #0
 8027194:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
 8027198:	e002      	b.n	80271a0 <ViewsText_reparseSlot+0xcc>
    _this->flowString = 0;
 802719a:	2300      	movs	r3, #0
 802719c:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
  if ((( _this->Ellipsis && ( EwCompString( _this->flowString, 0 ) != 0 )) && !_this->AutoSize ) 
 80271a0:	f89a 305a 	ldrb.w	r3, [sl, #90]	; 0x5a
  _this->textSize = _Const0001;
 80271a4:	2100      	movs	r1, #0
 80271a6:	e9ca 1112 	strd	r1, r1, [sl, #72]	; 0x48
  if ((( _this->Ellipsis && ( EwCompString( _this->flowString, 0 ) != 0 )) && !_this->AutoSize ) 
 80271aa:	bb63      	cbnz	r3, 8027206 <ViewsText_reparseSlot+0x132>
  if ( _this->AutoSize && ( EwCompString( _this->flowString, 0 ) != 0 ))
 80271ac:	f89a 3059 	ldrb.w	r3, [sl, #89]	; 0x59
 80271b0:	bb9b      	cbnz	r3, 802721a <ViewsText_reparseSlot+0x146>
  if (( _this->Super2.Owner != 0 ) && (( _this->Super2.viewState & CoreViewStateVisible ) 
 80271b2:	f8da 0018 	ldr.w	r0, [sl, #24]
 80271b6:	b118      	cbz	r0, 80271c0 <ViewsText_reparseSlot+0xec>
 80271b8:	f8da 3020 	ldr.w	r3, [sl, #32]
 80271bc:	07db      	lsls	r3, r3, #31
 80271be:	d45a      	bmi.n	8027276 <ViewsText_reparseSlot+0x1a2>
  EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 80271c0:	ac16      	add	r4, sp, #88	; 0x58
 80271c2:	4620      	mov	r0, r4
 80271c4:	4651      	mov	r1, sl
 80271c6:	4ab4      	ldr	r2, [pc, #720]	; (8027498 <ViewsText_reparseSlot+0x3c4>)
 80271c8:	f7f4 f804 	bl	801b1d4 <EwNewSlot>
 80271cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80271d0:	4652      	mov	r2, sl
}
 80271d2:	b021      	add	sp, #132	; 0x84
 80271d4:	ecbd 8b02 	vpop	{d8}
 80271d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  EwPostSignal( EwNewSlot( _this, ViewsText_preOnUpdateSlot ), ((XObject)_this ));
 80271dc:	f7f4 b828 	b.w	801b230 <EwPostSignal>
  if ( _this->bidiContext != 0 )
 80271e0:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
  maxWidth = -1;
 80271e4:	f04f 35ff 	mov.w	r5, #4294967295
  if ( _this->bidiContext != 0 )
 80271e8:	2800      	cmp	r0, #0
 80271ea:	d0a1      	beq.n	8027130 <ViewsText_reparseSlot+0x5c>
  EwFreeBidi( aBidi );
 80271ec:	f7e9 fee6 	bl	8010fbc <EwFreeBidi>
    _this->bidiContext = 0;
 80271f0:	2300      	movs	r3, #0
 80271f2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
 80271f6:	e79b      	b.n	8027130 <ViewsText_reparseSlot+0x5c>
  if ((( font != 0 ) && !!!font->Ascent ) && !!!font->Descent )
 80271f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80271fc:	2b00      	cmp	r3, #0
 80271fe:	bf08      	it	eq
 8027200:	f04f 0b00 	moveq.w	fp, #0
 8027204:	e787      	b.n	8027116 <ViewsText_reparseSlot+0x42>
  if ((( _this->Ellipsis && ( EwCompString( _this->flowString, 0 ) != 0 )) && !_this->AutoSize ) 
 8027206:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 802720a:	f7f5 f8eb 	bl	801c3e4 <EwCompString>
 802720e:	2800      	cmp	r0, #0
 8027210:	d0cc      	beq.n	80271ac <ViewsText_reparseSlot+0xd8>
 8027212:	f89a 3059 	ldrb.w	r3, [sl, #89]	; 0x59
 8027216:	2b00      	cmp	r3, #0
 8027218:	d035      	beq.n	8027286 <ViewsText_reparseSlot+0x1b2>
  if ( _this->AutoSize && ( EwCompString( _this->flowString, 0 ) != 0 ))
 802721a:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 802721e:	2100      	movs	r1, #0
 8027220:	f7f5 f8e0 	bl	801c3e4 <EwCompString>
 8027224:	2800      	cmp	r0, #0
 8027226:	d0c4      	beq.n	80271b2 <ViewsText_reparseSlot+0xde>
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdatingLayout;
 8027228:	f8da 3020 	ldr.w	r3, [sl, #32]
    CoreRectView__OnSetBounds( _this, EwInflateRect( ViewsText_GetContentArea( _this ), 
 802722c:	ae18      	add	r6, sp, #96	; 0x60
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdatingLayout;
 802722e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8027232:	f8ca 3020 	str.w	r3, [sl, #32]
    CoreRectView__OnSetBounds( _this, EwInflateRect( ViewsText_GetContentArea( _this ), 
 8027236:	4630      	mov	r0, r6
 8027238:	4651      	mov	r1, sl
 802723a:	f7ff fc05 	bl	8026a48 <ViewsText_GetContentArea>
 802723e:	4b97      	ldr	r3, [pc, #604]	; (802749c <ViewsText_reparseSlot+0x3c8>)
 8027240:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8027242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027246:	ab01      	add	r3, sp, #4
 8027248:	e883 0003 	stmia.w	r3, {r0, r1}
 802724c:	ac1c      	add	r4, sp, #112	; 0x70
 802724e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8027252:	4620      	mov	r0, r4
 8027254:	9500      	str	r5, [sp, #0]
 8027256:	f7f2 fea9 	bl	8019fac <EwInflateRect>
 802725a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802725c:	9300      	str	r3, [sp, #0]
 802725e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8027262:	4650      	mov	r0, sl
 8027264:	f7fa fc78 	bl	8021b58 <CoreRectView__OnSetBounds>
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateUpdatingLayout;
 8027268:	f8da 3020 	ldr.w	r3, [sl, #32]
 802726c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027270:	f8ca 3020 	str.w	r3, [sl, #32]
 8027274:	e79d      	b.n	80271b2 <ViewsText_reparseSlot+0xde>
    CoreGroup__InvalidateArea( _this->Super2.Owner, _this->Super1.Bounds );
 8027276:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 802727a:	9300      	str	r3, [sp, #0]
 802727c:	9b08      	ldr	r3, [sp, #32]
 802727e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027280:	f7fa ff30 	bl	80220e4 <CoreGroup__InvalidateArea>
 8027284:	e79c      	b.n	80271c0 <ViewsText_reparseSlot+0xec>
      && ( font != 0 ))
 8027286:	f1bb 0f00 	cmp.w	fp, #0
 802728a:	d092      	beq.n	80271b2 <ViewsText_reparseSlot+0xde>
    XSet align = _this->Alignment;
 802728c:	f8da 5050 	ldr.w	r5, [sl, #80]	; 0x50
    XInt32 leading = font->Leading;
 8027290:	f8db 3018 	ldr.w	r3, [fp, #24]
    XString res = _this->flowString;
 8027294:	f8da 903c 	ldr.w	r9, [sl, #60]	; 0x3c
    XSet align = _this->Alignment;
 8027298:	9511      	str	r5, [sp, #68]	; 0x44
    XBool rtl = ViewsText_IsBaseDirectionRTL( _this );
 802729a:	4650      	mov	r0, sl
    XInt32 leading = font->Leading;
 802729c:	9312      	str	r3, [sp, #72]	; 0x48
    XBool rtl = ViewsText_IsBaseDirectionRTL( _this );
 802729e:	f7ff fb97 	bl	80269d0 <ViewsText_IsBaseDirectionRTL>
    if ((( align & ViewsTextAlignmentAlignHorzAuto ) == ViewsTextAlignmentAlignHorzAuto ))
 80272a2:	062e      	lsls	r6, r5, #24
    XBool rtl = ViewsText_IsBaseDirectionRTL( _this );
 80272a4:	900c      	str	r0, [sp, #48]	; 0x30
    if ((( align & ViewsTextAlignmentAlignHorzAuto ) == ViewsTextAlignmentAlignHorzAuto ))
 80272a6:	d507      	bpl.n	80272b8 <ViewsText_reparseSlot+0x1e4>
      if ( rtl )
 80272a8:	2800      	cmp	r0, #0
 80272aa:	f000 8213 	beq.w	80276d4 <ViewsText_reparseSlot+0x600>
        align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzRight;
 80272ae:	f025 0384 	bic.w	r3, r5, #132	; 0x84
 80272b2:	f043 0304 	orr.w	r3, r3, #4
 80272b6:	9311      	str	r3, [sp, #68]	; 0x44
    rh = ( font->Ascent + font->Descent ) + leading;
 80272b8:	e9db 2307 	ldrd	r2, r3, [fp, #28]
 80272bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80272be:	4413      	add	r3, r2
 80272c0:	195e      	adds	r6, r3, r5
    noOfRows = EwGetStringChar( res, 0 );
 80272c2:	2100      	movs	r1, #0
 80272c4:	4648      	mov	r0, r9
    rh = ( font->Ascent + font->Descent ) + leading;
 80272c6:	9613      	str	r6, [sp, #76]	; 0x4c
    noOfRows = EwGetStringChar( res, 0 );
 80272c8:	f7f5 fa25 	bl	801c716 <EwGetStringChar>
    maxNoOfRows = ( height + leading ) / rh;
 80272cc:	442c      	add	r4, r5
 80272ce:	fb94 f3f6 	sdiv	r3, r4, r6
 80272d2:	2b01      	cmp	r3, #1
 80272d4:	bfb8      	it	lt
 80272d6:	2301      	movlt	r3, #1
    if ( noOfRows > maxNoOfRows )
 80272d8:	4298      	cmp	r0, r3
    noOfRows = EwGetStringChar( res, 0 );
 80272da:	4605      	mov	r5, r0
    if ( maxNoOfRows <= 0 )
 80272dc:	9305      	str	r3, [sp, #20]
    if ( noOfRows > maxNoOfRows )
 80272de:	f300 81ab 	bgt.w	8027638 <ViewsText_reparseSlot+0x564>
    clipL = 0;
 80272e2:	2300      	movs	r3, #0
    clipF = 0;
 80272e4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    noOfRows = EwGetStringChar( res, 0 );
 80272e8:	2100      	movs	r1, #0
 80272ea:	4648      	mov	r0, r9
 80272ec:	f7f5 fa13 	bl	801c716 <EwGetStringChar>
    for ( ; row < noOfRows; row = row + 1 )
 80272f0:	900d      	str	r0, [sp, #52]	; 0x34
 80272f2:	2800      	cmp	r0, #0
 80272f4:	f000 812e 	beq.w	8027554 <ViewsText_reparseSlot+0x480>
    row = 0;
 80272f8:	2101      	movs	r1, #1
 80272fa:	2300      	movs	r3, #0
 80272fc:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
 8027300:	ee08 ba90 	vmov	s17, fp
 8027304:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
      XBool rowEllipF = (XBool)( clipF && ( row == 0 ));
 8027308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802730a:	2b00      	cmp	r3, #0
 802730c:	f040 814b 	bne.w	80275a6 <ViewsText_reparseSlot+0x4d2>
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 8027310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027312:	2b00      	cmp	r3, #0
 8027314:	f000 815d 	beq.w	80275d2 <ViewsText_reparseSlot+0x4fe>
 8027318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802731a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802731c:	3b01      	subs	r3, #1
 802731e:	1a9b      	subs	r3, r3, r2
      if (( rtl && rowEllipF ) && !rowEllipL )
 8027320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 8027322:	fab3 f383 	clz	r3, r3
 8027326:	095b      	lsrs	r3, r3, #5
      if (( rtl && rowEllipF ) && !rowEllipL )
 8027328:	2a00      	cmp	r2, #0
 802732a:	f040 816a 	bne.w	8027602 <ViewsText_reparseSlot+0x52e>
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 802732e:	469a      	mov	sl, r3
      XBool rowEllipF = (XBool)( clipF && ( row == 0 ));
 8027330:	920b      	str	r2, [sp, #44]	; 0x2c
      len = EwGetStringChar( res, inx );
 8027332:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027334:	4648      	mov	r0, r9
 8027336:	4621      	mov	r1, r4
 8027338:	f7f5 f9ed 	bl	801c716 <EwGetStringChar>
      if ( !_this->WrapText && ( ResourcesFont_GetTextAdvance( font, res, start, 
 802733c:	9b10      	ldr	r3, [sp, #64]	; 0x40
      len = EwGetStringChar( res, inx );
 802733e:	9007      	str	r0, [sp, #28]
      start = inx + 1;
 8027340:	f104 0b01 	add.w	fp, r4, #1
      if ( !_this->WrapText && ( ResourcesFont_GetTextAdvance( font, res, start, 
 8027344:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
      inxL = ( start + len ) - 2;
 8027348:	eb0b 0800 	add.w	r8, fp, r0
 802734c:	f1a8 0502 	sub.w	r5, r8, #2
      if ( !_this->WrapText && ( ResourcesFont_GetTextAdvance( font, res, start, 
 8027350:	2e00      	cmp	r6, #0
 8027352:	f040 8125 	bne.w	80275a0 <ViewsText_reparseSlot+0x4cc>
 8027356:	9b07      	ldr	r3, [sp, #28]
 8027358:	ee18 0a90 	vmov	r0, s17
 802735c:	3b01      	subs	r3, #1
 802735e:	465a      	mov	r2, fp
 8027360:	4649      	mov	r1, r9
 8027362:	f7fe fb83 	bl	8025a6c <ResourcesFont_GetTextAdvance>
 8027366:	9b04      	ldr	r3, [sp, #16]
 8027368:	4283      	cmp	r3, r0
 802736a:	f280 8119 	bge.w	80275a0 <ViewsText_reparseSlot+0x4cc>
        if ((( align & ViewsTextAlignmentAlignHorzRight ) == ViewsTextAlignmentAlignHorzRight ))
 802736e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027370:	461a      	mov	r2, r3
 8027372:	0752      	lsls	r2, r2, #29
      XBool colEllipF = 0;
 8027374:	bf5a      	itte	pl
 8027376:	f3c3 0740 	ubfxpl	r7, r3, #1, #1
            colEllipL = 1;
 802737a:	2601      	movpl	r6, #1
          colEllipF = 1;
 802737c:	2701      	movmi	r7, #1
      if ( EwGetStringChar( res, inxF ) == 0x000A )
 802737e:	4659      	mov	r1, fp
 8027380:	4648      	mov	r0, r9
 8027382:	f7f5 f9c8 	bl	801c716 <EwGetStringChar>
 8027386:	280a      	cmp	r0, #10
        inxF = inxF + 1;
 8027388:	bf08      	it	eq
 802738a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
      if ( EwGetStringChar( res, inxL ) == 0x000A )
 802738c:	4629      	mov	r1, r5
 802738e:	4648      	mov	r0, r9
        inxF = inxF + 1;
 8027390:	bf0c      	ite	eq
 8027392:	1c9c      	addeq	r4, r3, #2
      inxF = start;
 8027394:	465c      	movne	r4, fp
      if ( EwGetStringChar( res, inxL ) == 0x000A )
 8027396:	f7f5 f9be 	bl	801c716 <EwGetStringChar>
 802739a:	280a      	cmp	r0, #10
 802739c:	d078      	beq.n	8027490 <ViewsText_reparseSlot+0x3bc>
      while ( colEllipF && ( EwGetStringChar( res, inxF ) == 0xFEFF ))
 802739e:	2f00      	cmp	r7, #0
 80273a0:	f000 8145 	beq.w	802762e <ViewsText_reparseSlot+0x55a>
 80273a4:	f64f 68ff 	movw	r8, #65279	; 0xfeff
 80273a8:	e000      	b.n	80273ac <ViewsText_reparseSlot+0x2d8>
        inxF = inxF + 1;
 80273aa:	3401      	adds	r4, #1
      while ( colEllipF && ( EwGetStringChar( res, inxF ) == 0xFEFF ))
 80273ac:	4621      	mov	r1, r4
 80273ae:	4648      	mov	r0, r9
 80273b0:	f7f5 f9b1 	bl	801c716 <EwGetStringChar>
 80273b4:	4540      	cmp	r0, r8
 80273b6:	d0f8      	beq.n	80273aa <ViewsText_reparseSlot+0x2d6>
      while ( colEllipL && ( EwGetStringChar( res, inxL ) == 0xFEFF ))
 80273b8:	2e00      	cmp	r6, #0
 80273ba:	f000 811e 	beq.w	80275fa <ViewsText_reparseSlot+0x526>
 80273be:	f64f 66ff 	movw	r6, #65279	; 0xfeff
 80273c2:	e000      	b.n	80273c6 <ViewsText_reparseSlot+0x2f2>
        inxL = inxL - 1;
 80273c4:	3d01      	subs	r5, #1
      while ( colEllipL && ( EwGetStringChar( res, inxL ) == 0xFEFF ))
 80273c6:	4629      	mov	r1, r5
 80273c8:	4648      	mov	r0, r9
 80273ca:	f7f5 f9a4 	bl	801c716 <EwGetStringChar>
 80273ce:	42b0      	cmp	r0, r6
 80273d0:	d0f8      	beq.n	80273c4 <ViewsText_reparseSlot+0x2f0>
      colEllipF = (XBool)( colEllipF && !rowEllipL );
 80273d2:	b117      	cbz	r7, 80273da <ViewsText_reparseSlot+0x306>
 80273d4:	f1ca 0701 	rsb	r7, sl, #1
 80273d8:	b2ff      	uxtb	r7, r7
      colEllipL = (XBool)( colEllipL && !rowEllipF );
 80273da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80273dc:	f083 0601 	eor.w	r6, r3, #1
      inxL2 = -1;
 80273e0:	f04f 33ff 	mov.w	r3, #4294967295
      inxF2 = -1;
 80273e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80273e8:	9b07      	ldr	r3, [sp, #28]
    XBool rtl = ViewsText_IsBaseDirectionRTL( _this );
 80273ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80273ee:	3b01      	subs	r3, #1
 80273f0:	ee08 3a10 	vmov	s16, r3
 80273f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      while (((( colEllipF || colEllipL ) || rowEllipF ) || rowEllipL ) && ( inxF 
 80273f6:	2f00      	cmp	r7, #0
 80273f8:	d13f      	bne.n	802747a <ViewsText_reparseSlot+0x3a6>
 80273fa:	2e00      	cmp	r6, #0
 80273fc:	f040 808d 	bne.w	802751a <ViewsText_reparseSlot+0x446>
 8027400:	2b00      	cmp	r3, #0
 8027402:	f040 8096 	bne.w	8027532 <ViewsText_reparseSlot+0x45e>
 8027406:	f1ba 0f00 	cmp.w	sl, #0
 802740a:	f000 8094 	beq.w	8027536 <ViewsText_reparseSlot+0x462>
 802740e:	42ac      	cmp	r4, r5
 8027410:	f280 8091 	bge.w	8027536 <ViewsText_reparseSlot+0x462>
 8027414:	4622      	mov	r2, r4
 8027416:	9c05      	ldr	r4, [sp, #20]
 8027418:	4643      	mov	r3, r8
 802741a:	4637      	mov	r7, r6
 802741c:	fab3 f883 	clz	r8, r3
          inxF = inxF + 1;
 8027420:	9405      	str	r4, [sp, #20]
 8027422:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8027426:	4614      	mov	r4, r2
          if ( inxL2 > 0 )
 8027428:	9b06      	ldr	r3, [sp, #24]
 802742a:	2b00      	cmp	r3, #0
 802742c:	dd06      	ble.n	802743c <ViewsText_reparseSlot+0x368>
            res = EwSetStringChar( res, inxL2, 0xFEFF );
 802742e:	4648      	mov	r0, r9
 8027430:	4619      	mov	r1, r3
 8027432:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8027436:	f7f5 f97a 	bl	801c72e <EwSetStringChar>
 802743a:	4681      	mov	r9, r0
          res = EwSetStringChar( res, inxL, 0x2026 );
 802743c:	4648      	mov	r0, r9
 802743e:	f242 0226 	movw	r2, #8230	; 0x2026
 8027442:	4629      	mov	r1, r5
 8027444:	f7f5 f973 	bl	801c72e <EwSetStringChar>
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 8027448:	ee18 3a10 	vmov	r3, s16
 802744c:	4601      	mov	r1, r0
 802744e:	465a      	mov	r2, fp
          res = EwSetStringChar( res, inxL, 0x2026 );
 8027450:	4681      	mov	r9, r0
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 8027452:	ee18 0a90 	vmov	r0, s17
 8027456:	f7fe fb09 	bl	8025a6c <ResourcesFont_GetTextAdvance>
 802745a:	9a04      	ldr	r2, [sp, #16]
 802745c:	4282      	cmp	r2, r0
          inxL = inxL - 1;
 802745e:	f105 33ff 	add.w	r3, r5, #4294967295
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 8027462:	da55      	bge.n	8027510 <ViewsText_reparseSlot+0x43c>
            colEllipL = (XBool)( colEllipL || !colEllipF );
 8027464:	b916      	cbnz	r6, 802746c <ViewsText_reparseSlot+0x398>
 8027466:	f1c7 0601 	rsb	r6, r7, #1
 802746a:	b2f6      	uxtb	r6, r6
 802746c:	9506      	str	r5, [sp, #24]
          inxL = inxL - 1;
 802746e:	461d      	mov	r5, r3
            colEllipF = 0;
 8027470:	f04f 0a00 	mov.w	sl, #0
 8027474:	4653      	mov	r3, sl
      while (((( colEllipF || colEllipL ) || rowEllipF ) || rowEllipL ) && ( inxF 
 8027476:	2f00      	cmp	r7, #0
 8027478:	d0bf      	beq.n	80273fa <ViewsText_reparseSlot+0x326>
 802747a:	42ac      	cmp	r4, r5
 802747c:	da5b      	bge.n	8027536 <ViewsText_reparseSlot+0x462>
        if (( colEllipF && ( rtl2 || !colEllipL )) || rowEllipF )
 802747e:	ea48 0303 	orr.w	r3, r8, r3
 8027482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8027486:	d10b      	bne.n	80274a0 <ViewsText_reparseSlot+0x3cc>
 8027488:	b156      	cbz	r6, 80274a0 <ViewsText_reparseSlot+0x3cc>
 802748a:	46b0      	mov	r8, r6
 802748c:	4637      	mov	r7, r6
 802748e:	e7cb      	b.n	8027428 <ViewsText_reparseSlot+0x354>
        inxL = inxL - 1;
 8027490:	f1a8 0503 	sub.w	r5, r8, #3
 8027494:	e783      	b.n	802739e <ViewsText_reparseSlot+0x2ca>
 8027496:	bf00      	nop
 8027498:	08025ac5 	.word	0x08025ac5
 802749c:	080387b0 	.word	0x080387b0
          if ( inxF2 > 0 )
 80274a0:	9b05      	ldr	r3, [sp, #20]
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	dd06      	ble.n	80274b4 <ViewsText_reparseSlot+0x3e0>
            res = EwSetStringChar( res, inxF2, 0xFEFF );
 80274a6:	4648      	mov	r0, r9
 80274a8:	4619      	mov	r1, r3
 80274aa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80274ae:	f7f5 f93e 	bl	801c72e <EwSetStringChar>
 80274b2:	4681      	mov	r9, r0
          res = EwSetStringChar( res, inxF, 0x2026 );
 80274b4:	4648      	mov	r0, r9
 80274b6:	f242 0226 	movw	r2, #8230	; 0x2026
 80274ba:	4621      	mov	r1, r4
 80274bc:	f7f5 f937 	bl	801c72e <EwSetStringChar>
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 80274c0:	ee18 3a10 	vmov	r3, s16
 80274c4:	4601      	mov	r1, r0
 80274c6:	465a      	mov	r2, fp
          res = EwSetStringChar( res, inxF, 0x2026 );
 80274c8:	4681      	mov	r9, r0
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 80274ca:	ee18 0a90 	vmov	r0, s17
 80274ce:	f7fe facd 	bl	8025a6c <ResourcesFont_GetTextAdvance>
 80274d2:	9904      	ldr	r1, [sp, #16]
          rtl2 = (XBool)!rtl2;
 80274d4:	fab8 f388 	clz	r3, r8
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 80274d8:	4281      	cmp	r1, r0
          rtl2 = (XBool)!rtl2;
 80274da:	ea4f 1353 	mov.w	r3, r3, lsr #5
          inxF = inxF + 1;
 80274de:	f104 0201 	add.w	r2, r4, #1
          if ( ResourcesFont_GetTextAdvance( font, res, start, len - 1 ) <= maxW )
 80274e2:	da12      	bge.n	802750a <ViewsText_reparseSlot+0x436>
            colEllipF = (XBool)( colEllipF || !colEllipL );
 80274e4:	b917      	cbnz	r7, 80274ec <ViewsText_reparseSlot+0x418>
 80274e6:	f1c6 0701 	rsb	r7, r6, #1
 80274ea:	b2ff      	uxtb	r7, r7
        if (( colEllipL && ( !rtl2 || !colEllipF )) || rowEllipL )
 80274ec:	b136      	cbz	r6, 80274fc <ViewsText_reparseSlot+0x428>
 80274ee:	f1b8 0f00 	cmp.w	r8, #0
 80274f2:	d14e      	bne.n	8027592 <ViewsText_reparseSlot+0x4be>
 80274f4:	2f00      	cmp	r7, #0
 80274f6:	d069      	beq.n	80275cc <ViewsText_reparseSlot+0x4f8>
 80274f8:	463b      	mov	r3, r7
 80274fa:	463e      	mov	r6, r7
 80274fc:	f1ba 0f00 	cmp.w	sl, #0
 8027500:	d18c      	bne.n	802741c <ViewsText_reparseSlot+0x348>
 8027502:	9405      	str	r4, [sp, #20]
 8027504:	4698      	mov	r8, r3
 8027506:	4614      	mov	r4, r2
 8027508:	e7b2      	b.n	8027470 <ViewsText_reparseSlot+0x39c>
            colEllipF = 0;
 802750a:	2700      	movs	r7, #0
            colEllipL = 0;
 802750c:	463e      	mov	r6, r7
 802750e:	e7f5      	b.n	80274fc <ViewsText_reparseSlot+0x428>
            colEllipL = 0;
 8027510:	2600      	movs	r6, #0
 8027512:	9506      	str	r5, [sp, #24]
            colEllipF = 0;
 8027514:	4637      	mov	r7, r6
          inxL = inxL - 1;
 8027516:	461d      	mov	r5, r3
 8027518:	e7aa      	b.n	8027470 <ViewsText_reparseSlot+0x39c>
      while (((( colEllipF || colEllipL ) || rowEllipF ) || rowEllipL ) && ( inxF 
 802751a:	42ac      	cmp	r4, r5
 802751c:	da0b      	bge.n	8027536 <ViewsText_reparseSlot+0x462>
        if (( colEllipF && ( rtl2 || !colEllipL )) || rowEllipF )
 802751e:	2b00      	cmp	r3, #0
 8027520:	d1be      	bne.n	80274a0 <ViewsText_reparseSlot+0x3cc>
        if (( colEllipL && ( !rtl2 || !colEllipF )) || rowEllipL )
 8027522:	f1b8 0f00 	cmp.w	r8, #0
 8027526:	d038      	beq.n	802759a <ViewsText_reparseSlot+0x4c6>
          inxF = inxF + 1;
 8027528:	f04f 0800 	mov.w	r8, #0
 802752c:	4647      	mov	r7, r8
 802752e:	2601      	movs	r6, #1
 8027530:	e77a      	b.n	8027428 <ViewsText_reparseSlot+0x354>
      while (((( colEllipF || colEllipL ) || rowEllipF ) || rowEllipL ) && ( inxF 
 8027532:	42ac      	cmp	r4, r5
 8027534:	dbb4      	blt.n	80274a0 <ViewsText_reparseSlot+0x3cc>
      inx = inx + len;
 8027536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027538:	9907      	ldr	r1, [sp, #28]
    for ( ; row < noOfRows; row = row + 1 )
 802753a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      inx = inx + len;
 802753c:	440a      	add	r2, r1
 802753e:	9209      	str	r2, [sp, #36]	; 0x24
    for ( ; row < noOfRows; row = row + 1 )
 8027540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027542:	3301      	adds	r3, #1
 8027544:	429a      	cmp	r2, r3
 8027546:	930a      	str	r3, [sp, #40]	; 0x28
 8027548:	f47f aede 	bne.w	8027308 <ViewsText_reparseSlot+0x234>
 802754c:	ee18 ba90 	vmov	fp, s17
 8027550:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    _this->textSize = EwNewPoint( ResourcesFont_GetFlowTextAdvance( font, res ), 
 8027554:	4649      	mov	r1, r9
 8027556:	4658      	mov	r0, fp
 8027558:	f7fe fa62 	bl	8025a20 <ResourcesFont_GetFlowTextAdvance>
    ( EwGetStringChar( res, 0 ) * rh ) - leading );
 802755c:	2100      	movs	r1, #0
    _this->textSize = EwNewPoint( ResourcesFont_GetFlowTextAdvance( font, res ), 
 802755e:	4605      	mov	r5, r0
    ( EwGetStringChar( res, 0 ) * rh ) - leading );
 8027560:	4648      	mov	r0, r9
 8027562:	f7f5 f8d8 	bl	801c716 <EwGetStringChar>
 8027566:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    _this->textSize = EwNewPoint( ResourcesFont_GetFlowTextAdvance( font, res ), 
 8027568:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ( EwGetStringChar( res, 0 ) * rh ) - leading );
 802756a:	fb02 f200 	mul.w	r2, r2, r0
    _this->textSize = EwNewPoint( ResourcesFont_GetFlowTextAdvance( font, res ), 
 802756e:	ac14      	add	r4, sp, #80	; 0x50
 8027570:	1ad2      	subs	r2, r2, r3
 8027572:	4629      	mov	r1, r5
 8027574:	4620      	mov	r0, r4
 8027576:	f7f2 fc35 	bl	8019de4 <EwNewPoint>
 802757a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802757e:	f10a 0348 	add.w	r3, sl, #72	; 0x48
 8027582:	e883 0003 	stmia.w	r3, {r0, r1}
    _this->flowString = EwShareString( res );
 8027586:	4648      	mov	r0, r9
 8027588:	f7f5 f856 	bl	801c638 <EwShareString>
 802758c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 8027590:	e60c      	b.n	80271ac <ViewsText_reparseSlot+0xd8>
 8027592:	9405      	str	r4, [sp, #20]
 8027594:	46b0      	mov	r8, r6
          inxF = inxF + 1;
 8027596:	4614      	mov	r4, r2
 8027598:	e746      	b.n	8027428 <ViewsText_reparseSlot+0x354>
        if (( colEllipL && ( !rtl2 || !colEllipF )) || rowEllipL )
 802759a:	4647      	mov	r7, r8
 802759c:	46b0      	mov	r8, r6
 802759e:	e743      	b.n	8027428 <ViewsText_reparseSlot+0x354>
      XBool colEllipL = 0;
 80275a0:	2600      	movs	r6, #0
      XBool colEllipF = 0;
 80275a2:	4637      	mov	r7, r6
 80275a4:	e6eb      	b.n	802737e <ViewsText_reparseSlot+0x2aa>
      XBool rowEllipF = (XBool)( clipF && ( row == 0 ));
 80275a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275a8:	990e      	ldr	r1, [sp, #56]	; 0x38
      XBool rowEllipF = (XBool)( clipF && ( row == 0 ));
 80275aa:	fab2 f382 	clz	r3, r2
 80275ae:	095b      	lsrs	r3, r3, #5
 80275b0:	930b      	str	r3, [sp, #44]	; 0x2c
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275b2:	b991      	cbnz	r1, 80275da <ViewsText_reparseSlot+0x506>
      if (( rtl && rowEllipF ) && !rowEllipL )
 80275b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80275b6:	b351      	cbz	r1, 802760e <ViewsText_reparseSlot+0x53a>
 80275b8:	2a00      	cmp	r2, #0
 80275ba:	bf08      	it	eq
 80275bc:	2300      	moveq	r3, #0
 80275be:	930b      	str	r3, [sp, #44]	; 0x2c
 80275c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80275c2:	bf14      	ite	ne
 80275c4:	f04f 0a00 	movne.w	sl, #0
 80275c8:	469a      	moveq	sl, r3
 80275ca:	e6b2      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
 80275cc:	9405      	str	r4, [sp, #20]
          inxF = inxF + 1;
 80275ce:	4614      	mov	r4, r2
 80275d0:	e7aa      	b.n	8027528 <ViewsText_reparseSlot+0x454>
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      XBool rowEllipF = (XBool)( clipF && ( row == 0 ));
 80275d4:	930b      	str	r3, [sp, #44]	; 0x2c
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275d6:	469a      	mov	sl, r3
 80275d8:	e6ab      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
 80275da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      if (( rtl && rowEllipF ) && !rowEllipL )
 80275dc:	990c      	ldr	r1, [sp, #48]	; 0x30
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275de:	1e5a      	subs	r2, r3, #1
 80275e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80275e2:	1ad3      	subs	r3, r2, r3
 80275e4:	fab3 f383 	clz	r3, r3
 80275e8:	095b      	lsrs	r3, r3, #5
      if (( rtl && rowEllipF ) && !rowEllipL )
 80275ea:	b999      	cbnz	r1, 8027614 <ViewsText_reparseSlot+0x540>
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 80275ec:	469a      	mov	sl, r3
 80275ee:	e6a0      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
  bidi = EwCreateBidi( aSize );
 80275f0:	f7e9 fca7 	bl	8010f42 <EwCreateBidi>
      _this->bidiContext = ViewsText_createBidi( _this, length );
 80275f4:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 80275f8:	e5b2      	b.n	8027160 <ViewsText_reparseSlot+0x8c>
      colEllipF = (XBool)( colEllipF && !rowEllipL );
 80275fa:	f1ca 0701 	rsb	r7, sl, #1
 80275fe:	b2ff      	uxtb	r7, r7
      colEllipL = (XBool)( colEllipL && !rowEllipF );
 8027600:	e6ee      	b.n	80273e0 <ViewsText_reparseSlot+0x30c>
        if (( rtl && rowEllipL ) && !rowEllipF )
 8027602:	b18b      	cbz	r3, 8027628 <ViewsText_reparseSlot+0x554>
 8027604:	f04f 0a00 	mov.w	sl, #0
          rowEllipF = 1;
 8027608:	2301      	movs	r3, #1
 802760a:	930b      	str	r3, [sp, #44]	; 0x2c
 802760c:	e691      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
      XBool rowEllipL = (XBool)( clipL && ( row == ( noOfRows - 1 )));
 802760e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8027612:	e68e      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
      if (( rtl && rowEllipF ) && !rowEllipL )
 8027614:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027616:	2900      	cmp	r1, #0
 8027618:	d1f3      	bne.n	8027602 <ViewsText_reparseSlot+0x52e>
        rowEllipL = 1;
 802761a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
      if (( rtl && rowEllipF ) && !rowEllipL )
 802761e:	2a00      	cmp	r2, #0
 8027620:	d0f2      	beq.n	8027608 <ViewsText_reparseSlot+0x534>
        rowEllipF = 0;
 8027622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027624:	930b      	str	r3, [sp, #44]	; 0x2c
 8027626:	e684      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
 8027628:	469a      	mov	sl, r3
 802762a:	930b      	str	r3, [sp, #44]	; 0x2c
 802762c:	e681      	b.n	8027332 <ViewsText_reparseSlot+0x25e>
      while ( colEllipL && ( EwGetStringChar( res, inxL ) == 0xFEFF ))
 802762e:	2e00      	cmp	r6, #0
 8027630:	f47f aec5 	bne.w	80273be <ViewsText_reparseSlot+0x2ea>
      colEllipF = (XBool)( colEllipF && !rowEllipL );
 8027634:	4637      	mov	r7, r6
 8027636:	e6d3      	b.n	80273e0 <ViewsText_reparseSlot+0x30c>
      XInt32 inxL = EwGetStringLength( res );
 8027638:	4648      	mov	r0, r9
 802763a:	f7f5 f899 	bl	801c770 <EwGetStringLength>
      if ((( align & ViewsTextAlignmentAlignVertBottom ) == ViewsTextAlignmentAlignVertBottom ))
 802763e:	9a11      	ldr	r2, [sp, #68]	; 0x44
      XInt32 inxL = EwGetStringLength( res );
 8027640:	4607      	mov	r7, r0
      XInt32 rowL = noOfRows - 1;
 8027642:	1e6b      	subs	r3, r5, #1
      if ((( align & ViewsTextAlignmentAlignVertBottom ) == ViewsTextAlignmentAlignVertBottom ))
 8027644:	0690      	lsls	r0, r2, #26
      XInt32 rowL = noOfRows - 1;
 8027646:	9307      	str	r3, [sp, #28]
      if ((( align & ViewsTextAlignmentAlignVertBottom ) == ViewsTextAlignmentAlignVertBottom ))
 8027648:	d54b      	bpl.n	80276e2 <ViewsText_reparseSlot+0x60e>
        rowF = noOfRows - maxNoOfRows;
 802764a:	9a05      	ldr	r2, [sp, #20]
      XInt32 rowL = noOfRows - 1;
 802764c:	9306      	str	r3, [sp, #24]
        rowF = noOfRows - maxNoOfRows;
 802764e:	1aad      	subs	r5, r5, r2
 8027650:	2200      	movs	r2, #0
 8027652:	920e      	str	r2, [sp, #56]	; 0x38
      for ( inxF = 1; row < rowF; row = row + 1 )
 8027654:	2d00      	cmp	r5, #0
 8027656:	f340 8099 	ble.w	802778c <ViewsText_reparseSlot+0x6b8>
      XInt32 row = 0;
 802765a:	2600      	movs	r6, #0
      for ( inxF = 1; row < rowF; row = row + 1 )
 802765c:	2401      	movs	r4, #1
        inxF = inxF + EwGetStringChar( res, inxF );
 802765e:	4621      	mov	r1, r4
 8027660:	4648      	mov	r0, r9
 8027662:	f7f5 f858 	bl	801c716 <EwGetStringChar>
      for ( inxF = 1; row < rowF; row = row + 1 )
 8027666:	3601      	adds	r6, #1
 8027668:	42b5      	cmp	r5, r6
        inxF = inxF + EwGetStringChar( res, inxF );
 802766a:	4404      	add	r4, r0
      for ( inxF = 1; row < rowF; row = row + 1 )
 802766c:	d1f7      	bne.n	802765e <ViewsText_reparseSlot+0x58a>
      if ( clipL )
 802766e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027672:	4293      	cmp	r3, r2
 8027674:	dd49      	ble.n	802770a <ViewsText_reparseSlot+0x636>
        for ( inxL = inxF; row < rowL; row = row + 1 )
 8027676:	9b06      	ldr	r3, [sp, #24]
 8027678:	42ab      	cmp	r3, r5
 802767a:	dd45      	ble.n	8027708 <ViewsText_reparseSlot+0x634>
      clipF = (XBool)( rowF > 0 );
 802767c:	2301      	movs	r3, #1
 802767e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027680:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8027684:	4627      	mov	r7, r4
          inxL = inxL + EwGetStringChar( res, inxL );
 8027686:	4639      	mov	r1, r7
 8027688:	4648      	mov	r0, r9
 802768a:	f7f5 f844 	bl	801c716 <EwGetStringChar>
        for ( inxL = inxF; row < rowL; row = row + 1 )
 802768e:	3601      	adds	r6, #1
 8027690:	4546      	cmp	r6, r8
          inxL = inxL + EwGetStringChar( res, inxL );
 8027692:	4407      	add	r7, r0
        for ( inxL = inxF; row < rowL; row = row + 1 )
 8027694:	d1f7      	bne.n	8027686 <ViewsText_reparseSlot+0x5b2>
      if ( clipF )
 8027696:	2d00      	cmp	r5, #0
      XString tmp = 0;
 8027698:	bfd8      	it	le
 802769a:	2500      	movle	r5, #0
      if ( clipF )
 802769c:	dc37      	bgt.n	802770e <ViewsText_reparseSlot+0x63a>
      tmp = EwShareString( EwConcatString( tmp, EwStringMiddle( res, inxF, inxL 
 802769e:	1b3a      	subs	r2, r7, r4
 80276a0:	4621      	mov	r1, r4
 80276a2:	4648      	mov	r0, r9
 80276a4:	f7f5 f8e1 	bl	801c86a <EwStringMiddle>
 80276a8:	4601      	mov	r1, r0
 80276aa:	4628      	mov	r0, r5
 80276ac:	f7f4 ffd5 	bl	801c65a <EwConcatString>
 80276b0:	f7f4 ffc2 	bl	801c638 <EwShareString>
      if ( clipL && ( inxL >= inxF ))
 80276b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80276b8:	4293      	cmp	r3, r2
      tmp = EwShareString( EwConcatString( tmp, EwStringMiddle( res, inxF, inxL 
 80276ba:	4680      	mov	r8, r0
      if ( clipL && ( inxL >= inxF ))
 80276bc:	dd01      	ble.n	80276c2 <ViewsText_reparseSlot+0x5ee>
 80276be:	42bc      	cmp	r4, r7
 80276c0:	dd71      	ble.n	80277a6 <ViewsText_reparseSlot+0x6d2>
      res = EwShareString( EwConcatCharString((XChar)maxNoOfRows, tmp ));
 80276c2:	4641      	mov	r1, r8
 80276c4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80276c8:	f7f5 f80a 	bl	801c6e0 <EwConcatCharString>
 80276cc:	f7f4 ffb4 	bl	801c638 <EwShareString>
 80276d0:	4681      	mov	r9, r0
 80276d2:	e609      	b.n	80272e8 <ViewsText_reparseSlot+0x214>
        align = ( align & ~ViewsTextAlignmentAlignHorzAuto ) | ViewsTextAlignmentAlignHorzLeft;
 80276d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80276d6:	f023 0381 	bic.w	r3, r3, #129	; 0x81
 80276da:	f043 0301 	orr.w	r3, r3, #1
 80276de:	9311      	str	r3, [sp, #68]	; 0x44
 80276e0:	e5ea      	b.n	80272b8 <ViewsText_reparseSlot+0x1e4>
        if ((( align & ViewsTextAlignmentAlignVertCenter ) == ViewsTextAlignmentAlignVertCenter ))
 80276e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80276e4:	f013 0310 	ands.w	r3, r3, #16
 80276e8:	d04a      	beq.n	8027780 <ViewsText_reparseSlot+0x6ac>
          rowF = ( noOfRows - maxNoOfRows ) / 2;
 80276ea:	9a05      	ldr	r2, [sp, #20]
 80276ec:	1aab      	subs	r3, r5, r2
 80276ee:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
          rowL = ( rowF + maxNoOfRows ) - 1;
 80276f2:	eb02 0263 	add.w	r2, r2, r3, asr #1
 80276f6:	4295      	cmp	r5, r2
 80276f8:	bfd4      	ite	le
 80276fa:	2100      	movle	r1, #0
 80276fc:	2101      	movgt	r1, #1
 80276fe:	3a01      	subs	r2, #1
 8027700:	910e      	str	r1, [sp, #56]	; 0x38
 8027702:	9206      	str	r2, [sp, #24]
          rowF = ( noOfRows - maxNoOfRows ) / 2;
 8027704:	105d      	asrs	r5, r3, #1
          rowL = ( rowF + maxNoOfRows ) - 1;
 8027706:	e7a5      	b.n	8027654 <ViewsText_reparseSlot+0x580>
        inxF = inxF + EwGetStringChar( res, inxF );
 8027708:	4627      	mov	r7, r4
      clipF = (XBool)( rowF > 0 );
 802770a:	2301      	movs	r3, #1
 802770c:	930f      	str	r3, [sp, #60]	; 0x3c
        XInt32 len = EwGetStringChar( res, inxF );
 802770e:	4621      	mov	r1, r4
 8027710:	4648      	mov	r0, r9
 8027712:	f7f5 f800 	bl	801c716 <EwGetStringChar>
 8027716:	4680      	mov	r8, r0
        tmp = EwShareString( EwConcatString( EwConcatString( EwLoadString( &_Const0003 ), 
 8027718:	4862      	ldr	r0, [pc, #392]	; (80278a4 <ViewsText_reparseSlot+0x7d0>)
 802771a:	f7f4 fe89 	bl	801c430 <EwLoadString>
 802771e:	4642      	mov	r2, r8
 8027720:	4605      	mov	r5, r0
 8027722:	4621      	mov	r1, r4
 8027724:	4648      	mov	r0, r9
 8027726:	f7f5 f8a0 	bl	801c86a <EwStringMiddle>
 802772a:	4601      	mov	r1, r0
 802772c:	4628      	mov	r0, r5
 802772e:	f7f4 ff94 	bl	801c65a <EwConcatString>
 8027732:	4605      	mov	r5, r0
 8027734:	485b      	ldr	r0, [pc, #364]	; (80278a4 <ViewsText_reparseSlot+0x7d0>)
 8027736:	f7f4 fe7b 	bl	801c430 <EwLoadString>
 802773a:	4601      	mov	r1, r0
 802773c:	4628      	mov	r0, r5
 802773e:	f7f4 ff8c 	bl	801c65a <EwConcatString>
 8027742:	f7f4 ff79 	bl	801c638 <EwShareString>
        tmp = EwSetStringChar( tmp, 0, (XChar)( len + 2 ));
 8027746:	f108 0202 	add.w	r2, r8, #2
 802774a:	b292      	uxth	r2, r2
 802774c:	2100      	movs	r1, #0
 802774e:	f7f4 ffee 	bl	801c72e <EwSetStringChar>
        if ( EwGetStringChar( tmp, len ) == 0x000A )
 8027752:	4641      	mov	r1, r8
        tmp = EwSetStringChar( tmp, 0, (XChar)( len + 2 ));
 8027754:	4605      	mov	r5, r0
        if ( EwGetStringChar( tmp, len ) == 0x000A )
 8027756:	f7f4 ffde 	bl	801c716 <EwGetStringChar>
 802775a:	280a      	cmp	r0, #10
 802775c:	4606      	mov	r6, r0
        inxF = inxF + len;
 802775e:	4444      	add	r4, r8
        if ( EwGetStringChar( tmp, len ) == 0x000A )
 8027760:	d07b      	beq.n	802785a <ViewsText_reparseSlot+0x786>
        if ( EwGetStringChar( tmp, 2 ) == 0x000A )
 8027762:	2102      	movs	r1, #2
 8027764:	4628      	mov	r0, r5
 8027766:	f7f4 ffd6 	bl	801c716 <EwGetStringChar>
 802776a:	4606      	mov	r6, r0
 802776c:	2e0a      	cmp	r6, #10
          tmp = EwSetStringChar( tmp, 2, 0xFEFF );
 802776e:	4628      	mov	r0, r5
 8027770:	f64f 62ff 	movw	r2, #65279	; 0xfeff
        if ( EwGetStringChar( tmp, 2 ) == 0x000A )
 8027774:	d059      	beq.n	802782a <ViewsText_reparseSlot+0x756>
          tmp = EwSetStringChar( tmp, 1, 0xFEFF );
 8027776:	2101      	movs	r1, #1
 8027778:	f7f4 ffd9 	bl	801c72e <EwSetStringChar>
 802777c:	4605      	mov	r5, r0
 802777e:	e78e      	b.n	802769e <ViewsText_reparseSlot+0x5ca>
      XInt32 rowF = 0;
 8027780:	461d      	mov	r5, r3
          rowL = maxNoOfRows - 1;
 8027782:	9b05      	ldr	r3, [sp, #20]
 8027784:	3b01      	subs	r3, #1
 8027786:	9306      	str	r3, [sp, #24]
      clipL = (XBool)( rowL < ( noOfRows - 1 ));
 8027788:	2301      	movs	r3, #1
 802778a:	930e      	str	r3, [sp, #56]	; 0x38
      if ( clipL )
 802778c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8027790:	4293      	cmp	r3, r2
 8027792:	dd53      	ble.n	802783c <ViewsText_reparseSlot+0x768>
        for ( inxL = inxF; row < rowL; row = row + 1 )
 8027794:	9b06      	ldr	r3, [sp, #24]
 8027796:	2b00      	cmp	r3, #0
 8027798:	f04f 0300 	mov.w	r3, #0
 802779c:	930f      	str	r3, [sp, #60]	; 0x3c
 802779e:	dd7d      	ble.n	802789c <ViewsText_reparseSlot+0x7c8>
 80277a0:	461e      	mov	r6, r3
 80277a2:	2401      	movs	r4, #1
 80277a4:	e76c      	b.n	8027680 <ViewsText_reparseSlot+0x5ac>
        XInt32 len = EwGetStringChar( res, inxL );
 80277a6:	4639      	mov	r1, r7
 80277a8:	4648      	mov	r0, r9
 80277aa:	f7f4 ffb4 	bl	801c716 <EwGetStringChar>
 80277ae:	4604      	mov	r4, r0
        XString tmp2 = EwShareString( EwConcatString( EwConcatString( EwLoadString( 
 80277b0:	483c      	ldr	r0, [pc, #240]	; (80278a4 <ViewsText_reparseSlot+0x7d0>)
 80277b2:	f7f4 fe3d 	bl	801c430 <EwLoadString>
 80277b6:	4622      	mov	r2, r4
 80277b8:	4605      	mov	r5, r0
 80277ba:	4639      	mov	r1, r7
 80277bc:	4648      	mov	r0, r9
 80277be:	f7f5 f854 	bl	801c86a <EwStringMiddle>
 80277c2:	4601      	mov	r1, r0
 80277c4:	4628      	mov	r0, r5
 80277c6:	f7f4 ff48 	bl	801c65a <EwConcatString>
 80277ca:	4605      	mov	r5, r0
 80277cc:	4835      	ldr	r0, [pc, #212]	; (80278a4 <ViewsText_reparseSlot+0x7d0>)
 80277ce:	f7f4 fe2f 	bl	801c430 <EwLoadString>
 80277d2:	4601      	mov	r1, r0
 80277d4:	4628      	mov	r0, r5
 80277d6:	f7f4 ff40 	bl	801c65a <EwConcatString>
 80277da:	f7f4 ff2d 	bl	801c638 <EwShareString>
        tmp2 = EwSetStringChar( tmp2, 0, (XChar)( len + 2 ));
 80277de:	1ca2      	adds	r2, r4, #2
 80277e0:	b292      	uxth	r2, r2
 80277e2:	2100      	movs	r1, #0
 80277e4:	f7f4 ffa3 	bl	801c72e <EwSetStringChar>
        tmp2 = EwSetStringChar( tmp2, 1, 0xFEFF );
 80277e8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80277ec:	2101      	movs	r1, #1
 80277ee:	f7f4 ff9e 	bl	801c72e <EwSetStringChar>
        if ( EwGetStringChar( tmp2, len ) == 0x000A )
 80277f2:	4621      	mov	r1, r4
        tmp2 = EwSetStringChar( tmp2, 1, 0xFEFF );
 80277f4:	4606      	mov	r6, r0
        if ( EwGetStringChar( tmp2, len ) == 0x000A )
 80277f6:	f7f4 ff8e 	bl	801c716 <EwGetStringChar>
 80277fa:	280a      	cmp	r0, #10
 80277fc:	4605      	mov	r5, r0
 80277fe:	d041      	beq.n	8027884 <ViewsText_reparseSlot+0x7b0>
        if ( EwGetStringChar( tmp2, 2 ) == 0x000A )
 8027800:	2102      	movs	r1, #2
 8027802:	4630      	mov	r0, r6
 8027804:	f7f4 ff87 	bl	801c716 <EwGetStringChar>
 8027808:	4604      	mov	r4, r0
 802780a:	2c0a      	cmp	r4, #10
          tmp2 = EwSetStringChar( tmp2, 2, 0xFEFF );
 802780c:	4630      	mov	r0, r6
 802780e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
        if ( EwGetStringChar( tmp2, 2 ) == 0x000A )
 8027812:	d02f      	beq.n	8027874 <ViewsText_reparseSlot+0x7a0>
          tmp2 = EwSetStringChar( tmp2, 1, 0xFEFF );
 8027814:	2101      	movs	r1, #1
 8027816:	f7f4 ff8a 	bl	801c72e <EwSetStringChar>
        tmp = EwShareString( EwConcatString( tmp, tmp2 ));
 802781a:	4601      	mov	r1, r0
 802781c:	4640      	mov	r0, r8
 802781e:	f7f4 ff1c 	bl	801c65a <EwConcatString>
 8027822:	f7f4 ff09 	bl	801c638 <EwShareString>
 8027826:	4680      	mov	r8, r0
 8027828:	e74b      	b.n	80276c2 <ViewsText_reparseSlot+0x5ee>
          tmp = EwSetStringChar( tmp, 2, 0xFEFF );
 802782a:	2102      	movs	r1, #2
 802782c:	f7f4 ff7f 	bl	801c72e <EwSetStringChar>
          tmp = EwSetStringChar( tmp, 1, 0x000A );
 8027830:	4632      	mov	r2, r6
 8027832:	2101      	movs	r1, #1
 8027834:	f7f4 ff7b 	bl	801c72e <EwSetStringChar>
 8027838:	4605      	mov	r5, r0
 802783a:	e730      	b.n	802769e <ViewsText_reparseSlot+0x5ca>
      tmp = EwShareString( EwConcatString( tmp, EwStringMiddle( res, inxF, inxL 
 802783c:	1e7a      	subs	r2, r7, #1
 802783e:	2101      	movs	r1, #1
 8027840:	4648      	mov	r0, r9
 8027842:	f7f5 f812 	bl	801c86a <EwStringMiddle>
 8027846:	4601      	mov	r1, r0
 8027848:	2000      	movs	r0, #0
 802784a:	f7f4 ff06 	bl	801c65a <EwConcatString>
 802784e:	f7f4 fef3 	bl	801c638 <EwShareString>
 8027852:	2300      	movs	r3, #0
 8027854:	4680      	mov	r8, r0
 8027856:	930f      	str	r3, [sp, #60]	; 0x3c
 8027858:	e733      	b.n	80276c2 <ViewsText_reparseSlot+0x5ee>
          tmp = EwSetStringChar( tmp, len, 0xFEFF );
 802785a:	4628      	mov	r0, r5
 802785c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8027860:	4641      	mov	r1, r8
 8027862:	f7f4 ff64 	bl	801c72e <EwSetStringChar>
          tmp = EwSetStringChar( tmp, len + 1, 0x000A );
 8027866:	4632      	mov	r2, r6
 8027868:	f108 0101 	add.w	r1, r8, #1
 802786c:	f7f4 ff5f 	bl	801c72e <EwSetStringChar>
 8027870:	4605      	mov	r5, r0
 8027872:	e776      	b.n	8027762 <ViewsText_reparseSlot+0x68e>
          tmp2 = EwSetStringChar( tmp2, 2, 0xFEFF );
 8027874:	2102      	movs	r1, #2
 8027876:	f7f4 ff5a 	bl	801c72e <EwSetStringChar>
          tmp2 = EwSetStringChar( tmp2, 1, 0x000A );
 802787a:	4622      	mov	r2, r4
 802787c:	2101      	movs	r1, #1
 802787e:	f7f4 ff56 	bl	801c72e <EwSetStringChar>
 8027882:	e7ca      	b.n	802781a <ViewsText_reparseSlot+0x746>
          tmp2 = EwSetStringChar( tmp2, len, 0xFEFF );
 8027884:	4630      	mov	r0, r6
 8027886:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 802788a:	4621      	mov	r1, r4
 802788c:	f7f4 ff4f 	bl	801c72e <EwSetStringChar>
          tmp2 = EwSetStringChar( tmp2, len + 1, 0x000A );
 8027890:	462a      	mov	r2, r5
 8027892:	1c61      	adds	r1, r4, #1
 8027894:	f7f4 ff4b 	bl	801c72e <EwSetStringChar>
 8027898:	4606      	mov	r6, r0
 802789a:	e7b1      	b.n	8027800 <ViewsText_reparseSlot+0x72c>
        for ( inxL = inxF; row < rowL; row = row + 1 )
 802789c:	2701      	movs	r7, #1
      XString tmp = 0;
 802789e:	461d      	mov	r5, r3
        for ( inxL = inxF; row < rowL; row = row + 1 )
 80278a0:	463c      	mov	r4, r7
 80278a2:	e6fc      	b.n	802769e <ViewsText_reparseSlot+0x5ca>
 80278a4:	080387b8 	.word	0x080387b8

080278a8 <ViewsText_OnSetAutoSize>:
  if ( value == _this->AutoSize )
 80278a8:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80278ac:	428b      	cmp	r3, r1
 80278ae:	d00d      	beq.n	80278cc <ViewsText_OnSetAutoSize+0x24>
{
 80278b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278b2:	4604      	mov	r4, r0
 80278b4:	b08f      	sub	sp, #60	; 0x3c
  _this->AutoSize = value;
 80278b6:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if ( value && _this->Ellipsis )
 80278ba:	b129      	cbz	r1, 80278c8 <ViewsText_OnSetAutoSize+0x20>
 80278bc:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 80278c0:	bb4b      	cbnz	r3, 8027916 <ViewsText_OnSetAutoSize+0x6e>
  if ( value && _this->reparsed )
 80278c2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80278c6:	b913      	cbnz	r3, 80278ce <ViewsText_OnSetAutoSize+0x26>
}
 80278c8:	b00f      	add	sp, #60	; 0x3c
 80278ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80278cc:	4770      	bx	lr
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdatingLayout;
 80278ce:	6a23      	ldr	r3, [r4, #32]
    CoreRectView__OnSetBounds( _this, EwInflateRect( ViewsText_GetContentArea( _this ), 
 80278d0:	ae06      	add	r6, sp, #24
    _this->Super2.viewState = _this->Super2.viewState | CoreViewStateUpdatingLayout;
 80278d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80278d6:	6223      	str	r3, [r4, #32]
    CoreRectView__OnSetBounds( _this, EwInflateRect( ViewsText_GetContentArea( _this ), 
 80278d8:	4630      	mov	r0, r6
 80278da:	4621      	mov	r1, r4
 80278dc:	f7ff f8b4 	bl	8026a48 <ViewsText_GetContentArea>
 80278e0:	4b15      	ldr	r3, [pc, #84]	; (8027938 <ViewsText_OnSetAutoSize+0x90>)
 80278e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80278e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80278e8:	ab01      	add	r3, sp, #4
 80278ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80278ee:	ad0a      	add	r5, sp, #40	; 0x28
 80278f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80278f4:	4628      	mov	r0, r5
 80278f6:	9700      	str	r7, [sp, #0]
 80278f8:	f7f2 fb58 	bl	8019fac <EwInflateRect>
 80278fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80278fe:	9300      	str	r3, [sp, #0]
 8027900:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8027904:	4620      	mov	r0, r4
 8027906:	f7fa f927 	bl	8021b58 <CoreRectView__OnSetBounds>
    _this->Super2.viewState = _this->Super2.viewState & ~CoreViewStateUpdatingLayout;
 802790a:	6a23      	ldr	r3, [r4, #32]
 802790c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027910:	6223      	str	r3, [r4, #32]
}
 8027912:	b00f      	add	sp, #60	; 0x3c
 8027914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _this->flowString = 0;
 8027916:	2300      	movs	r3, #0
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8027918:	ad04      	add	r5, sp, #16
    _this->flowString = 0;
 802791a:	63c3      	str	r3, [r0, #60]	; 0x3c
    _this->reparsed = 0;
 802791c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    EwPostSignal( EwNewSlot( _this, ViewsText_preReparseSlot ), ((XObject)_this ));
 8027920:	4621      	mov	r1, r4
 8027922:	4628      	mov	r0, r5
 8027924:	4a05      	ldr	r2, [pc, #20]	; (802793c <ViewsText_OnSetAutoSize+0x94>)
 8027926:	f7f3 fc55 	bl	801b1d4 <EwNewSlot>
 802792a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802792e:	4622      	mov	r2, r4
 8027930:	f7f3 fc7e 	bl	801b230 <EwPostSignal>
 8027934:	e7c5      	b.n	80278c2 <ViewsText_OnSetAutoSize+0x1a>
 8027936:	bf00      	nop
 8027938:	080387b0 	.word	0x080387b0
 802793c:	08025ecd 	.word	0x08025ecd

08027940 <WidgetSetWidgetConfig__Init>:
                 "WidgetSet::PushButtonConfig" )
EW_END_OF_CLASS( WidgetSetPushButtonConfig )

/* Initializer for the class 'WidgetSet::WidgetConfig' */
void WidgetSetWidgetConfig__Init( WidgetSetWidgetConfig _this, XObject aLink, XHandle aArg )
{
 8027940:	b510      	push	{r4, lr}
 8027942:	4604      	mov	r4, r0
  /* At first initialize the super class ... */
  XObject__Init( &_this->_.Super, aLink, aArg );
 8027944:	f7f1 fe7a 	bl	801963c <XObject__Init>

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetWidgetConfig );
 8027948:	4b01      	ldr	r3, [pc, #4]	; (8027950 <WidgetSetWidgetConfig__Init+0x10>)
 802794a:	60e3      	str	r3, [r4, #12]

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( WidgetSetWidgetConfig );
 802794c:	6023      	str	r3, [r4, #0]
}
 802794e:	bd10      	pop	{r4, pc}
 8027950:	08038b30 	.word	0x08038b30

08027954 <WidgetSetPushButtonConfig__Init>:
{
 8027954:	b510      	push	{r4, lr}
 8027956:	4604      	mov	r4, r0
  XObject__Init( &_this->_.Super, aLink, aArg );
 8027958:	f7f1 fe70 	bl	801963c <XObject__Init>
  _this->IconTintDisabled = _Const0000;
 802795c:	4b09      	ldr	r3, [pc, #36]	; (8027984 <WidgetSetPushButtonConfig__Init+0x30>)
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetPushButtonConfig );
 802795e:	480a      	ldr	r0, [pc, #40]	; (8027988 <WidgetSetPushButtonConfig__Init+0x34>)
  _this->IconTintDisabled = _Const0000;
 8027960:	6819      	ldr	r1, [r3, #0]
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetPushButtonConfig );
 8027962:	60e0      	str	r0, [r4, #12]
  _this->LabelColorActive = _Const0005;
 8027964:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
  _this->LabelColorFocused = _Const0005;
 8027968:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
  _this->LabelColorDefault = _Const0005;
 802796c:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
  _this->FaceFrameActive = -1;
 8027970:	f04f 33ff 	mov.w	r3, #4294967295
  _this->IconTintDefault = _Const0000;
 8027974:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
  _this->FaceFrameFocused = -1;
 8027978:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
  _this->FaceFrameDefault = -1;
 802797c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  _this->_.VMT = EW_CLASS( WidgetSetPushButtonConfig );
 8027980:	6020      	str	r0, [r4, #0]
}
 8027982:	bd10      	pop	{r4, pc}
 8027984:	080389f0 	.word	0x080389f0
 8027988:	08038af4 	.word	0x08038af4

0802798c <WidgetSetWidgetConfig__ReInit>:

/* Re-Initializer for the class 'WidgetSet::WidgetConfig' */
void WidgetSetWidgetConfig__ReInit( WidgetSetWidgetConfig _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_.Super );
 802798c:	f7f1 be5c 	b.w	8019648 <XObject__ReInit>

08027990 <WidgetSetPushButtonConfig__ReInit>:
 8027990:	f7f1 be5a 	b.w	8019648 <XObject__ReInit>

08027994 <WidgetSetWidgetConfig__Done>:

/* Finalizer method for the class 'WidgetSet::WidgetConfig' */
void WidgetSetWidgetConfig__Done( WidgetSetWidgetConfig _this )
{
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( XObject );
 8027994:	4b01      	ldr	r3, [pc, #4]	; (802799c <WidgetSetWidgetConfig__Done+0x8>)
 8027996:	6003      	str	r3, [r0, #0]

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_.Super );
 8027998:	f7f1 be57 	b.w	801964a <XObject__Done>
 802799c:	08036b2c 	.word	0x08036b2c

080279a0 <WidgetSetPushButtonConfig__Done>:
  _this->_.Super._.VMT = EW_CLASS( XObject );
 80279a0:	4b01      	ldr	r3, [pc, #4]	; (80279a8 <WidgetSetPushButtonConfig__Done+0x8>)
 80279a2:	6003      	str	r3, [r0, #0]
  XObject__Done( &_this->_.Super );
 80279a4:	f7f1 be51 	b.w	801964a <XObject__Done>
 80279a8:	08036b2c 	.word	0x08036b2c

080279ac <WidgetSetWidgetConfig_onInvalidate>:
void WidgetSetWidgetConfig_onInvalidate( WidgetSetWidgetConfig _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwNotifyObjObservers((XObject)_this, 0 );
 80279ac:	2100      	movs	r1, #0
 80279ae:	f7f3 be63 	b.w	801b678 <EwNotifyObjObservers>
 80279b2:	bf00      	nop

080279b4 <WidgetSetPushButton__Init>:
                 _.VMT, "WidgetSet::WidgetConfig" )
EW_END_OF_CLASS( WidgetSetWidgetConfig )

/* Initializer for the class 'WidgetSet::PushButton' */
void WidgetSetPushButton__Init( WidgetSetPushButton _this, XObject aLink, XHandle aArg )
{
 80279b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279b6:	4604      	mov	r4, r0
 80279b8:	b085      	sub	sp, #20

  /* Allow the Immediate Garbage Collection to evalute the members of this class. */
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetPushButton );

  /* ... then construct all embedded objects */
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 80279ba:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetPushButton );
 80279be:	4f51      	ldr	r7, [pc, #324]	; (8027b04 <WidgetSetPushButton__Init+0x150>)
  CoreGroup__Init( &_this->_.Super, aLink, aArg );
 80279c0:	f7fa fb7c 	bl	80220bc <CoreGroup__Init>
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 80279c4:	4628      	mov	r0, r5
  _this->_.XObject._.GCT = EW_CLASS_GCT( WidgetSetPushButton );
 80279c6:	60e7      	str	r7, [r4, #12]
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 80279c8:	4621      	mov	r1, r4
 80279ca:	2200      	movs	r2, #0
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 80279cc:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
  CoreTimer__Init( &_this->FlashTimer, &_this->_.XObject, 0 );
 80279d0:	f7f7 fe5c 	bl	801f68c <CoreTimer__Init>
  CoreKeyPressHandler__Init( &_this->KeyHandler, &_this->_.XObject, 0 );
 80279d4:	4621      	mov	r1, r4
 80279d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80279da:	2200      	movs	r2, #0
 80279dc:	f7fc f8e4 	bl	8023ba8 <CoreKeyPressHandler__Init>
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_.XObject, 0 );
 80279e0:	4630      	mov	r0, r6
 80279e2:	4621      	mov	r1, r4
 80279e4:	2200      	movs	r2, #0
 80279e6:	f7f7 fddf 	bl	801f5a8 <CoreSimpleTouchHandler__Init>

  /* Setup the VMT pointer */
  _this->_.VMT = EW_CLASS( WidgetSetPushButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0006 );
 80279ea:	4b47      	ldr	r3, [pc, #284]	; (8027b08 <WidgetSetPushButton__Init+0x154>)
  _this->_.VMT = EW_CLASS( WidgetSetPushButton );
 80279ec:	6027      	str	r7, [r4, #0]
  CoreRectView__OnSetBounds( _this, _Const0006 );
 80279ee:	68da      	ldr	r2, [r3, #12]
 80279f0:	9200      	str	r2, [sp, #0]
 80279f2:	4620      	mov	r0, r4
 80279f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80279f6:	f7fa f8af 	bl	8021b58 <CoreRectView__OnSetBounds>
  CoreTimer_OnSetPeriod( &_this->FlashTimer, 0 );
 80279fa:	4628      	mov	r0, r5
 80279fc:	2100      	movs	r1, #0
 80279fe:	f7fc fdc5 	bl	802458c <CoreTimer_OnSetPeriod>
  CoreTimer_OnSetBegin( &_this->FlashTimer, 50 );
 8027a02:	4628      	mov	r0, r5
 8027a04:	2132      	movs	r1, #50	; 0x32
 8027a06:	f7fc fdd3 	bl	80245b0 <CoreTimer_OnSetBegin>
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 8027a0a:	2395      	movs	r3, #149	; 0x95
 8027a0c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
 8027a10:	4630      	mov	r0, r6
 8027a12:	213f      	movs	r1, #63	; 0x3f
 8027a14:	f7f9 f9fc 	bl	8020e10 <CoreView_OnSetLayout>
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView_OnSetPoint4((CoreQuadView)&_this->TouchHandler, _Const0007 );
 8027a18:	4b3c      	ldr	r3, [pc, #240]	; (8027b0c <WidgetSetPushButton__Init+0x158>)
 8027a1a:	4630      	mov	r0, r6
 8027a1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8027a20:	f7f9 fa4e 	bl	8020ec0 <CoreQuadView_OnSetPoint4>
  CoreQuadView_OnSetPoint3((CoreQuadView)&_this->TouchHandler, _Const0008 );
 8027a24:	4b3a      	ldr	r3, [pc, #232]	; (8027b10 <WidgetSetPushButton__Init+0x15c>)
 8027a26:	4630      	mov	r0, r6
 8027a28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8027a2c:	f7f9 fac4 	bl	8020fb8 <CoreQuadView_OnSetPoint3>
  CoreQuadView_OnSetPoint2((CoreQuadView)&_this->TouchHandler, _Const0009 );
 8027a30:	4b38      	ldr	r3, [pc, #224]	; (8027b14 <WidgetSetPushButton__Init+0x160>)
 8027a32:	4630      	mov	r0, r6
 8027a34:	e893 0006 	ldmia.w	r3, {r1, r2}
 8027a38:	f7f9 fb3a 	bl	80210b0 <CoreQuadView_OnSetPoint2>
  CoreQuadView_OnSetPoint1((CoreQuadView)&_this->TouchHandler, _Const000A );
 8027a3c:	4b36      	ldr	r3, [pc, #216]	; (8027b18 <WidgetSetPushButton__Init+0x164>)
 8027a3e:	4630      	mov	r0, r6
 8027a40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8027a44:	f7f9 fbb0 	bl	80211a8 <CoreQuadView_OnSetPoint1>
  CoreSimpleTouchHandler_OnSetRetargetOffset( &_this->TouchHandler, 16 );
 8027a48:	4630      	mov	r0, r6
 8027a4a:	2110      	movs	r1, #16
 8027a4c:	f7fc f880 	bl	8023b50 <CoreSimpleTouchHandler_OnSetRetargetOffset>
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 8027a50:	4630      	mov	r0, r6
 8027a52:	2164      	movs	r1, #100	; 0x64
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, WidgetSetPushButton_onFlashTimer );
 8027a54:	ad02      	add	r5, sp, #8
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
 8027a56:	f7fc f881 	bl	8023b5c <CoreSimpleTouchHandler_OnSetMaxStrikeCount>
  CoreGroup_Add((CoreGroup)_this, ((CoreView)&_this->TouchHandler ), 0 );
 8027a5a:	4631      	mov	r1, r6
 8027a5c:	4620      	mov	r0, r4
 8027a5e:	2200      	movs	r2, #0
 8027a60:	f7fa fc6e 	bl	8022340 <CoreGroup_Add>
  _this->FlashTimer.OnTrigger = EwNewSlot( _this, WidgetSetPushButton_onFlashTimer );
 8027a64:	4621      	mov	r1, r4
 8027a66:	4628      	mov	r0, r5
 8027a68:	4a2c      	ldr	r2, [pc, #176]	; (8027b1c <WidgetSetPushButton__Init+0x168>)
 8027a6a:	f7f3 fbb3 	bl	801b1d4 <EwNewSlot>
 8027a6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027a72:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8027a76:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnRelease = EwNewSlot( _this, WidgetSetPushButton_onReleaseKey );
 8027a7a:	4a29      	ldr	r2, [pc, #164]	; (8027b20 <WidgetSetPushButton__Init+0x16c>)
 8027a7c:	4621      	mov	r1, r4
 8027a7e:	4628      	mov	r0, r5
 8027a80:	f7f3 fba8 	bl	801b1d4 <EwNewSlot>
 8027a84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027a88:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8027a8c:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->KeyHandler.OnPress = EwNewSlot( _this, WidgetSetPushButton_onPressKey );
 8027a90:	4a24      	ldr	r2, [pc, #144]	; (8027b24 <WidgetSetPushButton__Init+0x170>)
 8027a92:	4621      	mov	r1, r4
 8027a94:	4628      	mov	r0, r5
 8027a96:	f7f3 fb9d 	bl	801b1d4 <EwNewSlot>
 8027a9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027a9e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8027aa2:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnLeave = EwNewSlot( _this, WidgetSetPushButton_onLeaveTouch );
 8027aa6:	4a20      	ldr	r2, [pc, #128]	; (8027b28 <WidgetSetPushButton__Init+0x174>)
 8027aa8:	4621      	mov	r1, r4
 8027aaa:	4628      	mov	r0, r5
 8027aac:	f7f3 fb92 	bl	801b1d4 <EwNewSlot>
 8027ab0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027ab4:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8027ab8:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnEnter = EwNewSlot( _this, WidgetSetPushButton_onEnterTouch );
 8027abc:	4a1b      	ldr	r2, [pc, #108]	; (8027b2c <WidgetSetPushButton__Init+0x178>)
 8027abe:	4621      	mov	r1, r4
 8027ac0:	4628      	mov	r0, r5
 8027ac2:	f7f3 fb87 	bl	801b1d4 <EwNewSlot>
 8027ac6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027aca:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8027ace:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnRelease = EwNewSlot( _this, WidgetSetPushButton_onReleaseTouch );
 8027ad2:	4a17      	ldr	r2, [pc, #92]	; (8027b30 <WidgetSetPushButton__Init+0x17c>)
 8027ad4:	4621      	mov	r1, r4
 8027ad6:	4628      	mov	r0, r5
 8027ad8:	f7f3 fb7c 	bl	801b1d4 <EwNewSlot>
 8027adc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027ae0:	f504 7398 	add.w	r3, r4, #304	; 0x130
 8027ae4:	e883 0003 	stmia.w	r3, {r0, r1}
  _this->TouchHandler.OnPress = EwNewSlot( _this, WidgetSetPushButton_onPressTouch );
 8027ae8:	4a12      	ldr	r2, [pc, #72]	; (8027b34 <WidgetSetPushButton__Init+0x180>)
 8027aea:	4621      	mov	r1, r4
 8027aec:	4628      	mov	r0, r5
 8027aee:	f7f3 fb71 	bl	801b1d4 <EwNewSlot>
 8027af2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027af6:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8027afa:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8027afe:	b005      	add	sp, #20
 8027b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b02:	bf00      	nop
 8027b04:	08038a78 	.word	0x08038a78
 8027b08:	08038a08 	.word	0x08038a08
 8027b0c:	08038a18 	.word	0x08038a18
 8027b10:	08038a20 	.word	0x08038a20
 8027b14:	08038a28 	.word	0x08038a28
 8027b18:	08038a30 	.word	0x08038a30
 8027b1c:	08027f3d 	.word	0x08027f3d
 8027b20:	080282cd 	.word	0x080282cd
 8027b24:	08027f5d 	.word	0x08027f5d
 8027b28:	08027f59 	.word	0x08027f59
 8027b2c:	080282c9 	.word	0x080282c9
 8027b30:	08027f9d 	.word	0x08027f9d
 8027b34:	08027ff5 	.word	0x08027ff5

08027b38 <WidgetSetPushButton__ReInit>:

/* Re-Initializer for the class 'WidgetSet::PushButton' */
void WidgetSetPushButton__ReInit( WidgetSetPushButton _this )
{
 8027b38:	b510      	push	{r4, lr}
 8027b3a:	4604      	mov	r4, r0
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_.Super );
 8027b3c:	f7f7 fdbc 	bl	801f6b8 <CoreGroup__ReInit>

  /* ... then re-construct all embedded objects */
  CoreTimer__ReInit( &_this->FlashTimer );
 8027b40:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8027b44:	f7f7 fdd6 	bl	801f6f4 <CoreTimer__ReInit>
  CoreKeyPressHandler__ReInit( &_this->KeyHandler );
 8027b48:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8027b4c:	f7f7 fdc2 	bl	801f6d4 <CoreKeyPressHandler__ReInit>
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 8027b50:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
 8027b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
 8027b58:	f7f7 bdaa 	b.w	801f6b0 <CoreSimpleTouchHandler__ReInit>

08027b5c <WidgetSetPushButton__Done>:

/* Finalizer method for the class 'WidgetSet::PushButton' */
void WidgetSetPushButton__Done( WidgetSetPushButton _this )
{
 8027b5c:	b510      	push	{r4, lr}
  /* Finalize this class */
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 8027b5e:	4b09      	ldr	r3, [pc, #36]	; (8027b84 <WidgetSetPushButton__Done+0x28>)
{
 8027b60:	4604      	mov	r4, r0
  _this->_.Super._.VMT = EW_CLASS( CoreGroup );
 8027b62:	f840 3b6c 	str.w	r3, [r0], #108

  /* Finalize all embedded objects */
  CoreTimer__Done( &_this->FlashTimer );
 8027b66:	f7f8 fd11 	bl	802058c <CoreTimer__Done>
  CoreKeyPressHandler__Done( &_this->KeyHandler );
 8027b6a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8027b6e:	f7f7 fe0f 	bl	801f790 <CoreKeyPressHandler__Done>
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
 8027b72:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8027b76:	f7f7 fdd5 	bl	801f724 <CoreSimpleTouchHandler__Done>

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_.Super );
 8027b7a:	4620      	mov	r0, r4
}
 8027b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup__Done( &_this->_.Super );
 8027b80:	f7f7 bddc 	b.w	801f73c <CoreGroup__Done>
 8027b84:	08037c98 	.word	0x08037c98

08027b88 <WidgetSetPushButton_OnSetBounds>:

/* 'C' function for method : 'WidgetSet::PushButton.OnSetBounds()' */
void WidgetSetPushButton_OnSetBounds( WidgetSetPushButton _this, XRect value )
{
 8027b88:	b084      	sub	sp, #16
 8027b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b8e:	b089      	sub	sp, #36	; 0x24
 8027b90:	ac13      	add	r4, sp, #76	; 0x4c
 8027b92:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if ( _this->Appearance != 0 )
 8027b96:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8027b98:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8027b9a:	e9dd 8b14 	ldrd	r8, fp, [sp, #80]	; 0x50
{
 8027b9e:	4605      	mov	r5, r0
 8027ba0:	4689      	mov	r9, r1
  if ( _this->Appearance != 0 )
 8027ba2:	b353      	cbz	r3, 8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
  {
    XPoint cs = EwGetRectSize( value );
 8027ba4:	9600      	str	r6, [sp, #0]
 8027ba6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8027baa:	a802      	add	r0, sp, #8
 8027bac:	f7f2 fb27 	bl	801a1fe <EwGetRectSize>
    XPoint ns = cs;
    XPoint delta;

    if ( ns.X < _this->Appearance->WidgetMinSize.X )
 8027bb0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    XPoint ns = cs;
 8027bb2:	9b02      	ldr	r3, [sp, #8]
 8027bb4:	9f03      	ldr	r7, [sp, #12]
    if ( ns.X < _this->Appearance->WidgetMinSize.X )
 8027bb6:	e9d2 121b 	ldrd	r1, r2, [r2, #108]	; 0x6c
 8027bba:	4299      	cmp	r1, r3
 8027bbc:	bfb8      	it	lt
 8027bbe:	4619      	movlt	r1, r3
 8027bc0:	4297      	cmp	r7, r2
      ns.X = _this->Appearance->WidgetMinSize.X;

    if ( ns.Y < _this->Appearance->WidgetMinSize.Y )
      ns.Y = _this->Appearance->WidgetMinSize.Y;

    delta = EwMovePointNeg( ns, cs );
 8027bc2:	9700      	str	r7, [sp, #0]
 8027bc4:	bfb8      	it	lt
 8027bc6:	4617      	movlt	r7, r2
 8027bc8:	463a      	mov	r2, r7
 8027bca:	a806      	add	r0, sp, #24
 8027bcc:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8027bd0:	468a      	mov	sl, r1
 8027bd2:	f7f2 f929 	bl	8019e28 <EwMovePointNeg>
 8027bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

    if ( delta.X != 0 )
 8027bda:	b132      	cbz	r2, 8027bea <WidgetSetPushButton_OnSetBounds+0x62>
    {
      XBool alignToLeft = (( _this->Super3.Layout & CoreLayoutAlignToLeft ) == CoreLayoutAlignToLeft );
 8027bdc:	6a69      	ldr	r1, [r5, #36]	; 0x24
      XBool alignToRight = (( _this->Super3.Layout & CoreLayoutAlignToRight ) == 
 8027bde:	f001 0008 	and.w	r0, r1, #8
        CoreLayoutAlignToRight );

      if ( alignToLeft && !alignToRight )
 8027be2:	0749      	lsls	r1, r1, #29
 8027be4:	d51d      	bpl.n	8027c22 <WidgetSetPushButton_OnSetBounds+0x9a>
 8027be6:	bb48      	cbnz	r0, 8027c3c <WidgetSetPushButton_OnSetBounds+0xb4>
        value.Point2.X = ( value.Point2.X + delta.X );
 8027be8:	4493      	add	fp, r2
          value.Point1.X = ( value.Point1.X - ( delta.X / 2 ));
          value.Point2.X = ( value.Point1.X + ns.X );
        }
    }

    if ( delta.Y != 0 )
 8027bea:	b133      	cbz	r3, 8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
    {
      XBool alignToTop = (( _this->Super3.Layout & CoreLayoutAlignToTop ) == CoreLayoutAlignToTop );
 8027bec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      XBool alignToBottom = (( _this->Super3.Layout & CoreLayoutAlignToBottom ) 
 8027bee:	f002 0120 	and.w	r1, r2, #32
        == CoreLayoutAlignToBottom );

      if ( alignToTop && !alignToBottom )
 8027bf2:	06d2      	lsls	r2, r2, #27
 8027bf4:	d511      	bpl.n	8027c1a <WidgetSetPushButton_OnSetBounds+0x92>
 8027bf6:	b9d1      	cbnz	r1, 8027c2e <WidgetSetPushButton_OnSetBounds+0xa6>
        value.Point2.Y = ( value.Point2.Y + delta.Y );
 8027bf8:	441e      	add	r6, r3
          value.Point2.Y = ( value.Point1.Y + ns.Y );
        }
    }
  }

  CoreGroup_OnSetBounds((CoreGroup)_this, value );
 8027bfa:	e9cd 9813 	strd	r9, r8, [sp, #76]	; 0x4c
 8027bfe:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 8027c02:	9600      	str	r6, [sp, #0]
 8027c04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8027c08:	4628      	mov	r0, r5
 8027c0a:	9616      	str	r6, [sp, #88]	; 0x58
 8027c0c:	f7f8 fac2 	bl	8020194 <CoreGroup_OnSetBounds>
}
 8027c10:	b009      	add	sp, #36	; 0x24
 8027c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c16:	b004      	add	sp, #16
 8027c18:	4770      	bx	lr
        if ( !alignToTop && alignToBottom )
 8027c1a:	b141      	cbz	r1, 8027c2e <WidgetSetPushButton_OnSetBounds+0xa6>
          value.Point1.Y = ( value.Point1.Y - delta.Y );
 8027c1c:	eba8 0803 	sub.w	r8, r8, r3
 8027c20:	e7eb      	b.n	8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
        if ( !alignToLeft && alignToRight )
 8027c22:	b158      	cbz	r0, 8027c3c <WidgetSetPushButton_OnSetBounds+0xb4>
          value.Point1.X = ( value.Point1.X - delta.X );
 8027c24:	eba9 0902 	sub.w	r9, r9, r2
    if ( delta.Y != 0 )
 8027c28:	2b00      	cmp	r3, #0
 8027c2a:	d0e6      	beq.n	8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
 8027c2c:	e7de      	b.n	8027bec <WidgetSetPushButton_OnSetBounds+0x64>
          value.Point1.Y = ( value.Point1.Y - ( delta.Y / 2 ));
 8027c2e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027c32:	eba8 0863 	sub.w	r8, r8, r3, asr #1
          value.Point2.Y = ( value.Point1.Y + ns.Y );
 8027c36:	eb08 0607 	add.w	r6, r8, r7
 8027c3a:	e7de      	b.n	8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
          value.Point1.X = ( value.Point1.X - ( delta.X / 2 ));
 8027c3c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8027c40:	eba9 0962 	sub.w	r9, r9, r2, asr #1
          value.Point2.X = ( value.Point1.X + ns.X );
 8027c44:	eb09 0b0a 	add.w	fp, r9, sl
    if ( delta.Y != 0 )
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	d0d6      	beq.n	8027bfa <WidgetSetPushButton_OnSetBounds+0x72>
 8027c4c:	e7ce      	b.n	8027bec <WidgetSetPushButton_OnSetBounds+0x64>
 8027c4e:	bf00      	nop

08027c50 <WidgetSetPushButton_UpdateViewState>:
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void WidgetSetPushButton_UpdateViewState( WidgetSetPushButton _this, XSet aState )
{
 8027c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c54:	4604      	mov	r4, r0
 8027c56:	b091      	sub	sp, #68	; 0x44
 8027c58:	460e      	mov	r6, r1
  XRect area;
  XBool isEnabled;
  XBool isFocused;
  XBool isPressed;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
 8027c5a:	f7f7 fc7b 	bl	801f554 <CoreGroup_UpdateViewState>
  needsFace = (XBool)(( _this->Appearance != 0 ) && (((( _this->Appearance->FaceDefault 
 8027c5e:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8027c60:	2f00      	cmp	r7, #0
 8027c62:	f000 8100 	beq.w	8027e66 <WidgetSetPushButton_UpdateViewState+0x216>
 8027c66:	6a3b      	ldr	r3, [r7, #32]
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	f000 80ca 	beq.w	8027e02 <WidgetSetPushButton_UpdateViewState+0x1b2>
  != 0 ) || ( _this->Appearance->FaceDisabled != 0 )) || ( _this->Appearance->FaceFocused 
  != 0 )) || ( _this->Appearance->FaceActive != 0 )));
  needsLabel = (XBool)((( _this->Appearance != 0 ) && ( EwCompString( _this->Label, 
 8027c6e:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8027c72:	2100      	movs	r1, #0
 8027c74:	f7f4 fbb6 	bl	801c3e4 <EwCompString>
 8027c78:	4607      	mov	r7, r0
 8027c7a:	2800      	cmp	r0, #0
 8027c7c:	f000 80a4 	beq.w	8027dc8 <WidgetSetPushButton_UpdateViewState+0x178>
 8027c80:	2301      	movs	r3, #1
 8027c82:	9303      	str	r3, [sp, #12]
  0 ) != 0 )) && ( _this->Appearance->LabelFont != 0 ));
 8027c84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027c86:	691f      	ldr	r7, [r3, #16]
 8027c88:	3f00      	subs	r7, #0
 8027c8a:	bf18      	it	ne
 8027c8c:	2701      	movne	r7, #1
  restack = 0;
  area = EwGetRectORect( _this->Super2.Bounds );
 8027c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027c90:	9300      	str	r3, [sp, #0]
 8027c92:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8027c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027c98:	a808      	add	r0, sp, #32
 8027c9a:	f7f2 fabf 	bl	801a21c <EwGetRectORect>

  if ( needsFace && ( _this->frameView == 0 ))
 8027c9e:	9b03      	ldr	r3, [sp, #12]
  area = EwGetRectORect( _this->Super2.Bounds );
 8027ca0:	e9dd ba08 	ldrd	fp, sl, [sp, #32]
 8027ca4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  if ( needsFace && ( _this->frameView == 0 ))
 8027ca8:	2b00      	cmp	r3, #0
 8027caa:	f040 8099 	bne.w	8027de0 <WidgetSetPushButton_UpdateViewState+0x190>
    _this->frameView = EwNewObject( ViewsFrame, 0 );
    CoreGroup_Add((CoreGroup)_this, ((CoreView)_this->frameView ), 0 );
    restack = 1;
  }
  else
    if ( !needsFace && ( _this->frameView != 0 ))
 8027cae:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8027cb0:	2d00      	cmp	r5, #0
 8027cb2:	f040 80e6 	bne.w	8027e82 <WidgetSetPushButton_UpdateViewState+0x232>
  restack = 0;
 8027cb6:	9d03      	ldr	r5, [sp, #12]
    {
      CoreGroup_Remove((CoreGroup)_this, ((CoreView)_this->frameView ));
      _this->frameView = 0;
    }

  if ( needsLabel && ( _this->textView == 0 ))
 8027cb8:	2f00      	cmp	r7, #0
 8027cba:	f000 8098 	beq.w	8027dee <WidgetSetPushButton_UpdateViewState+0x19e>
 8027cbe:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8027cc0:	2f00      	cmp	r7, #0
 8027cc2:	f000 80f4 	beq.w	8027eae <WidgetSetPushButton_UpdateViewState+0x25e>
    {
      CoreGroup_Remove((CoreGroup)_this, ((CoreView)_this->textView ));
      _this->textView = 0;
    }

  if ( restack )
 8027cc6:	b155      	cbz	r5, 8027cde <WidgetSetPushButton_UpdateViewState+0x8e>
  {
    if ( _this->frameView != 0 )
 8027cc8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8027cca:	b11d      	cbz	r5, 8027cd4 <WidgetSetPushButton_UpdateViewState+0x84>
      CoreGroup_RestackTop((CoreGroup)_this, ((CoreView)_this->frameView ));
 8027ccc:	4629      	mov	r1, r5
 8027cce:	4620      	mov	r0, r4
 8027cd0:	f7fa fa1a 	bl	8022108 <CoreGroup_RestackTop>

    if ( _this->textView != 0 )
 8027cd4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8027cd6:	b111      	cbz	r1, 8027cde <WidgetSetPushButton_UpdateViewState+0x8e>
      CoreGroup_RestackTop((CoreGroup)_this, ((CoreView)_this->textView ));
 8027cd8:	4620      	mov	r0, r4
 8027cda:	f7fa fa15 	bl	8022108 <CoreGroup_RestackTop>
 8027cde:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  }

  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isFocused = (( aState & CoreViewStateFocused ) == CoreViewStateFocused );
  isPressed = (XBool)((( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
  || _this->KeyHandler.Down ) || _this->FlashTimer.Enabled );
 8027ce0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
  isFocused = (( aState & CoreViewStateFocused ) == CoreViewStateFocused );
 8027ce4:	f006 0240 	and.w	r2, r6, #64	; 0x40
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
 8027ce8:	f006 0710 	and.w	r7, r6, #16
  isFocused = (( aState & CoreViewStateFocused ) == CoreViewStateFocused );
 8027cec:	9205      	str	r2, [sp, #20]
  || _this->KeyHandler.Down ) || _this->FlashTimer.Enabled );
 8027cee:	2b00      	cmp	r3, #0
 8027cf0:	f000 809d 	beq.w	8027e2e <WidgetSetPushButton_UpdateViewState+0x1de>
  isPressed = (XBool)((( _this->TouchHandler.Down && _this->TouchHandler.Inside ) 
 8027cf4:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
 8027cf8:	2b00      	cmp	r3, #0
 8027cfa:	f000 8098 	beq.w	8027e2e <WidgetSetPushButton_UpdateViewState+0x1de>
  || _this->KeyHandler.Down ) || _this->FlashTimer.Enabled );
 8027cfe:	2601      	movs	r6, #1

  if ( _this->frameView != 0 )
 8027d00:	b335      	cbz	r5, 8027d50 <WidgetSetPushButton_UpdateViewState+0x100>
  {
    ResourcesBitmap bitmap;
    XInt32 frameNo;
    XRect r = area;
 8027d02:	e9cd ba0c 	strd	fp, sl, [sp, #48]	; 0x30
 8027d06:	e9cd 980e 	strd	r9, r8, [sp, #56]	; 0x38

    if ( !isEnabled )
 8027d0a:	2f00      	cmp	r7, #0
 8027d0c:	f040 809a 	bne.w	8027e44 <WidgetSetPushButton_UpdateViewState+0x1f4>
    {
      bitmap = _this->Appearance->FaceDisabled;
 8027d10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027d12:	69da      	ldr	r2, [r3, #28]
      frameNo = _this->Appearance->FaceFrameDisabled;
 8027d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        {
          bitmap = _this->Appearance->FaceDefault;
          frameNo = _this->Appearance->FaceFrameDefault;
        }

    ViewsFrame_OnSetAnimated( _this->frameView, (XBool)( frameNo < 0 ));
 8027d16:	9204      	str	r2, [sp, #16]
 8027d18:	0fd9      	lsrs	r1, r3, #31
 8027d1a:	4628      	mov	r0, r5
 8027d1c:	9303      	str	r3, [sp, #12]
 8027d1e:	f7fe f9bd 	bl	802609c <ViewsFrame_OnSetAnimated>
    ViewsFrame_OnSetColor( _this->frameView, _Const0000 );
 8027d22:	4974      	ldr	r1, [pc, #464]	; (8027ef4 <WidgetSetPushButton_UpdateViewState+0x2a4>)
 8027d24:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8027d26:	6809      	ldr	r1, [r1, #0]
 8027d28:	f7fe f99c 	bl	8026064 <ViewsFrame_OnSetColor>

    if ( frameNo < 0 )
      frameNo = 0;

    ViewsFrame_OnSetFrameNumber( _this->frameView, frameNo );
 8027d2c:	9b03      	ldr	r3, [sp, #12]
 8027d2e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8027d30:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8027d34:	f7fe fa04 	bl	8026140 <ViewsFrame_OnSetFrameNumber>
    ViewsFrame_OnSetBitmap( _this->frameView, bitmap );
 8027d38:	9a04      	ldr	r2, [sp, #16]
 8027d3a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8027d3c:	4611      	mov	r1, r2
 8027d3e:	f7fe fa25 	bl	802618c <ViewsFrame_OnSetBitmap>
    CoreRectView__OnSetBounds( _this->frameView, r );
 8027d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d44:	9300      	str	r3, [sp, #0]
 8027d46:	ab0c      	add	r3, sp, #48	; 0x30
 8027d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027d4a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8027d4c:	f7f9 ff04 	bl	8021b58 <CoreRectView__OnSetBounds>
  }

  if ( _this->textView != 0 )
 8027d50:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8027d52:	2d00      	cmp	r5, #0
 8027d54:	f000 809c 	beq.w	8027e90 <WidgetSetPushButton_UpdateViewState+0x240>
  {
    XColor clr;

    if ( !isEnabled )
 8027d58:	2f00      	cmp	r7, #0
 8027d5a:	d17c      	bne.n	8027e56 <WidgetSetPushButton_UpdateViewState+0x206>
      clr = _this->Appearance->LabelColorDisabled;
 8027d5c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8027d5e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8027d60:	9307      	str	r3, [sp, #28]
        if ( isFocused )
          clr = _this->Appearance->LabelColorFocused;
        else
          clr = _this->Appearance->LabelColorDefault;

    CoreRectView__OnSetBounds( _this->textView, EwNewRect( area.Point1.X + _this->Appearance->LabelMarginLeft, 
 8027d62:	f101 0034 	add.w	r0, r1, #52	; 0x34
 8027d66:	c80d      	ldmia	r0, {r0, r2, r3}
 8027d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027d6a:	eba8 0000 	sub.w	r0, r8, r0
 8027d6e:	ae0c      	add	r6, sp, #48	; 0x30
 8027d70:	eba9 0303 	sub.w	r3, r9, r3
 8027d74:	9000      	str	r0, [sp, #0]
 8027d76:	4452      	add	r2, sl
 8027d78:	4459      	add	r1, fp
 8027d7a:	4630      	mov	r0, r6
 8027d7c:	f7f2 f8a8 	bl	8019ed0 <EwNewRect>
 8027d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d82:	9300      	str	r3, [sp, #0]
 8027d84:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8027d88:	4628      	mov	r0, r5
 8027d8a:	f7f9 fee5 	bl	8021b58 <CoreRectView__OnSetBounds>
    area.Point1.Y + _this->Appearance->LabelMarginTop, area.Point2.X - _this->Appearance->LabelMarginRight, 
    area.Point2.Y - _this->Appearance->LabelMarginBottom ));
    ViewsText_OnSetAlignment( _this->textView, ViewsTextAlignmentAlignHorzCenter 
 8027d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d90:	2112      	movs	r1, #18
 8027d92:	f7fe fd81 	bl	8026898 <ViewsText_OnSetAlignment>
    | ViewsTextAlignmentAlignVertCenter );
    ViewsText_OnSetWrapText( _this->textView, 1 );
 8027d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d98:	2101      	movs	r1, #1
 8027d9a:	f7fe fd49 	bl	8026830 <ViewsText_OnSetWrapText>
    ViewsText_OnSetEllipsis( _this->textView, 1 );
 8027d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027da0:	2101      	movs	r1, #1
 8027da2:	f7fe fd1d 	bl	80267e0 <ViewsText_OnSetEllipsis>
    ViewsText_OnSetFont( _this->textView, _this->Appearance->LabelFont );
 8027da6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027daa:	6919      	ldr	r1, [r3, #16]
 8027dac:	f7fe fdd8 	bl	8026960 <ViewsText_OnSetFont>
    ViewsText_OnSetString( _this->textView, _this->Label );
 8027db0:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 8027db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027db6:	f7fe fdaf 	bl	8026918 <ViewsText_OnSetString>
    ViewsText_OnSetColor( _this->textView, clr );
 8027dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027dbc:	9907      	ldr	r1, [sp, #28]
  }
}
 8027dbe:	b011      	add	sp, #68	; 0x44
 8027dc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ViewsText_OnSetColor( _this->textView, clr );
 8027dc4:	f7fe bde8 	b.w	8026998 <ViewsText_OnSetColor>
  area = EwGetRectORect( _this->Super2.Bounds );
 8027dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027dca:	9300      	str	r3, [sp, #0]
 8027dcc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8027dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027dd2:	a808      	add	r0, sp, #32
 8027dd4:	f7f2 fa22 	bl	801a21c <EwGetRectORect>
 8027dd8:	e9dd ba08 	ldrd	fp, sl, [sp, #32]
 8027ddc:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  if ( needsFace && ( _this->frameView == 0 ))
 8027de0:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8027de2:	2d00      	cmp	r5, #0
 8027de4:	d079      	beq.n	8027eda <WidgetSetPushButton_UpdateViewState+0x28a>
  restack = 0;
 8027de6:	2500      	movs	r5, #0
  if ( needsLabel && ( _this->textView == 0 ))
 8027de8:	2f00      	cmp	r7, #0
 8027dea:	f47f af68 	bne.w	8027cbe <WidgetSetPushButton_UpdateViewState+0x6e>
    if ( !needsLabel && ( _this->textView != 0 ))
 8027dee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8027df0:	2900      	cmp	r1, #0
 8027df2:	f43f af68 	beq.w	8027cc6 <WidgetSetPushButton_UpdateViewState+0x76>
      CoreGroup_Remove((CoreGroup)_this, ((CoreView)_this->textView ));
 8027df6:	4620      	mov	r0, r4
 8027df8:	f7fa fa0e 	bl	8022218 <CoreGroup_Remove>
      _this->textView = 0;
 8027dfc:	2300      	movs	r3, #0
 8027dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8027e00:	e761      	b.n	8027cc6 <WidgetSetPushButton_UpdateViewState+0x76>
  != 0 ) || ( _this->Appearance->FaceDisabled != 0 )) || ( _this->Appearance->FaceFocused 
 8027e02:	69fb      	ldr	r3, [r7, #28]
 8027e04:	2b00      	cmp	r3, #0
 8027e06:	f47f af32 	bne.w	8027c6e <WidgetSetPushButton_UpdateViewState+0x1e>
 8027e0a:	69b9      	ldr	r1, [r7, #24]
 8027e0c:	2900      	cmp	r1, #0
 8027e0e:	f47f af2e 	bne.w	8027c6e <WidgetSetPushButton_UpdateViewState+0x1e>
  != 0 )) || ( _this->Appearance->FaceActive != 0 )));
 8027e12:	697d      	ldr	r5, [r7, #20]
  needsLabel = (XBool)((( _this->Appearance != 0 ) && ( EwCompString( _this->Label, 
 8027e14:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
  != 0 )) || ( _this->Appearance->FaceActive != 0 )));
 8027e18:	1e2b      	subs	r3, r5, #0
 8027e1a:	bf18      	it	ne
 8027e1c:	2301      	movne	r3, #1
 8027e1e:	9303      	str	r3, [sp, #12]
  needsLabel = (XBool)((( _this->Appearance != 0 ) && ( EwCompString( _this->Label, 
 8027e20:	f7f4 fae0 	bl	801c3e4 <EwCompString>
 8027e24:	4607      	mov	r7, r0
 8027e26:	2800      	cmp	r0, #0
 8027e28:	f43f af31 	beq.w	8027c8e <WidgetSetPushButton_UpdateViewState+0x3e>
 8027e2c:	e72a      	b.n	8027c84 <WidgetSetPushButton_UpdateViewState+0x34>
  || _this->KeyHandler.Down ) || _this->FlashTimer.Enabled );
 8027e2e:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
 8027e32:	2b00      	cmp	r3, #0
 8027e34:	f47f af63 	bne.w	8027cfe <WidgetSetPushButton_UpdateViewState+0xae>
 8027e38:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
 8027e3c:	3e00      	subs	r6, #0
 8027e3e:	bf18      	it	ne
 8027e40:	2601      	movne	r6, #1
 8027e42:	e75d      	b.n	8027d00 <WidgetSetPushButton_UpdateViewState+0xb0>
      if ( isPressed )
 8027e44:	2e00      	cmp	r6, #0
 8027e46:	d12a      	bne.n	8027e9e <WidgetSetPushButton_UpdateViewState+0x24e>
        if ( isFocused )
 8027e48:	9b05      	ldr	r3, [sp, #20]
 8027e4a:	2b00      	cmp	r3, #0
 8027e4c:	d03e      	beq.n	8027ecc <WidgetSetPushButton_UpdateViewState+0x27c>
          bitmap = _this->Appearance->FaceFocused;
 8027e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027e50:	699a      	ldr	r2, [r3, #24]
          frameNo = _this->Appearance->FaceFrameFocused;
 8027e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027e54:	e75f      	b.n	8027d16 <WidgetSetPushButton_UpdateViewState+0xc6>
      if ( isPressed )
 8027e56:	b9f6      	cbnz	r6, 8027e96 <WidgetSetPushButton_UpdateViewState+0x246>
        if ( isFocused )
 8027e58:	9b05      	ldr	r3, [sp, #20]
          clr = _this->Appearance->LabelColorFocused;
 8027e5a:	6e21      	ldr	r1, [r4, #96]	; 0x60
        if ( isFocused )
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	d039      	beq.n	8027ed4 <WidgetSetPushButton_UpdateViewState+0x284>
          clr = _this->Appearance->LabelColorFocused;
 8027e60:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8027e62:	9307      	str	r3, [sp, #28]
 8027e64:	e77d      	b.n	8027d62 <WidgetSetPushButton_UpdateViewState+0x112>
  area = EwGetRectORect( _this->Super2.Bounds );
 8027e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027e68:	9300      	str	r3, [sp, #0]
 8027e6a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8027e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027e70:	a808      	add	r0, sp, #32
 8027e72:	f7f2 f9d3 	bl	801a21c <EwGetRectORect>
    if ( !needsFace && ( _this->frameView != 0 ))
 8027e76:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  area = EwGetRectORect( _this->Super2.Bounds );
 8027e78:	e9dd ba08 	ldrd	fp, sl, [sp, #32]
 8027e7c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
    if ( !needsFace && ( _this->frameView != 0 ))
 8027e80:	b18d      	cbz	r5, 8027ea6 <WidgetSetPushButton_UpdateViewState+0x256>
      CoreGroup_Remove((CoreGroup)_this, ((CoreView)_this->frameView ));
 8027e82:	4629      	mov	r1, r5
 8027e84:	4620      	mov	r0, r4
      _this->frameView = 0;
 8027e86:	2500      	movs	r5, #0
      CoreGroup_Remove((CoreGroup)_this, ((CoreView)_this->frameView ));
 8027e88:	f7fa f9c6 	bl	8022218 <CoreGroup_Remove>
      _this->frameView = 0;
 8027e8c:	65e5      	str	r5, [r4, #92]	; 0x5c
 8027e8e:	e713      	b.n	8027cb8 <WidgetSetPushButton_UpdateViewState+0x68>
}
 8027e90:	b011      	add	sp, #68	; 0x44
 8027e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        clr = _this->Appearance->LabelColorActive;
 8027e96:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8027e98:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8027e9a:	9307      	str	r3, [sp, #28]
 8027e9c:	e761      	b.n	8027d62 <WidgetSetPushButton_UpdateViewState+0x112>
        bitmap = _this->Appearance->FaceActive;
 8027e9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027ea0:	695a      	ldr	r2, [r3, #20]
        frameNo = _this->Appearance->FaceFrameActive;
 8027ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027ea4:	e737      	b.n	8027d16 <WidgetSetPushButton_UpdateViewState+0xc6>
    if ( !needsLabel && ( _this->textView != 0 ))
 8027ea6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8027ea8:	2900      	cmp	r1, #0
 8027eaa:	d1a4      	bne.n	8027df6 <WidgetSetPushButton_UpdateViewState+0x1a6>
 8027eac:	e718      	b.n	8027ce0 <WidgetSetPushButton_UpdateViewState+0x90>
    _this->textView = EwNewObject( ViewsText, 0 );
 8027eae:	4639      	mov	r1, r7
 8027eb0:	4811      	ldr	r0, [pc, #68]	; (8027ef8 <WidgetSetPushButton_UpdateViewState+0x2a8>)
 8027eb2:	f7f1 fbcf 	bl	8019654 <EwNewObjectIndirect>
    CoreGroup_Add((CoreGroup)_this, ((CoreView)_this->textView ), 0 );
 8027eb6:	463a      	mov	r2, r7
    _this->textView = EwNewObject( ViewsText, 0 );
 8027eb8:	4601      	mov	r1, r0
 8027eba:	65a0      	str	r0, [r4, #88]	; 0x58
    CoreGroup_Add((CoreGroup)_this, ((CoreView)_this->textView ), 0 );
 8027ebc:	4620      	mov	r0, r4
 8027ebe:	f7fa fa3f 	bl	8022340 <CoreGroup_Add>
    ViewsText_OnSetEnableBidiText( _this->textView, 1 );
 8027ec2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027ec4:	2101      	movs	r1, #1
 8027ec6:	f7fe fc6d 	bl	80267a4 <ViewsText_OnSetEnableBidiText>
  if ( restack )
 8027eca:	e6fd      	b.n	8027cc8 <WidgetSetPushButton_UpdateViewState+0x78>
          bitmap = _this->Appearance->FaceDefault;
 8027ecc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027ece:	6a1a      	ldr	r2, [r3, #32]
          frameNo = _this->Appearance->FaceFrameDefault;
 8027ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ed2:	e720      	b.n	8027d16 <WidgetSetPushButton_UpdateViewState+0xc6>
          clr = _this->Appearance->LabelColorDefault;
 8027ed4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8027ed6:	9307      	str	r3, [sp, #28]
 8027ed8:	e743      	b.n	8027d62 <WidgetSetPushButton_UpdateViewState+0x112>
    _this->frameView = EwNewObject( ViewsFrame, 0 );
 8027eda:	4629      	mov	r1, r5
 8027edc:	4807      	ldr	r0, [pc, #28]	; (8027efc <WidgetSetPushButton_UpdateViewState+0x2ac>)
 8027ede:	f7f1 fbb9 	bl	8019654 <EwNewObjectIndirect>
    CoreGroup_Add((CoreGroup)_this, ((CoreView)_this->frameView ), 0 );
 8027ee2:	462a      	mov	r2, r5
    _this->frameView = EwNewObject( ViewsFrame, 0 );
 8027ee4:	4601      	mov	r1, r0
 8027ee6:	65e0      	str	r0, [r4, #92]	; 0x5c
    CoreGroup_Add((CoreGroup)_this, ((CoreView)_this->frameView ), 0 );
 8027ee8:	4620      	mov	r0, r4
 8027eea:	f7fa fa29 	bl	8022340 <CoreGroup_Add>
    restack = 1;
 8027eee:	2501      	movs	r5, #1
 8027ef0:	e6e2      	b.n	8027cb8 <WidgetSetPushButton_UpdateViewState+0x68>
 8027ef2:	bf00      	nop
 8027ef4:	080389f0 	.word	0x080389f0
 8027ef8:	080388ec 	.word	0x080388ec
 8027efc:	080387c0 	.word	0x080387c0

08027f00 <WidgetSetPushButton_onConfigChanged>:

/* 'C' function for method : 'WidgetSet::PushButton.onConfigChanged()' */
void WidgetSetPushButton_onConfigChanged( WidgetSetPushButton _this, XObject sender )
{
 8027f00:	b510      	push	{r4, lr}
  XEnum oldKeyCode;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  oldKeyCode = _this->KeyHandler.Filter;
 8027f02:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 8027f06:	2395      	movs	r3, #149	; 0x95
{
 8027f08:	b082      	sub	sp, #8
 8027f0a:	4604      	mov	r4, r0
  _this->KeyHandler.Filter = CoreKeyCodeEnter;
 8027f0c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  if (( oldKeyCode == CoreKeyCodeNoKey ) && ( _this->KeyHandler.Filter != CoreKeyCodeNoKey ))
 8027f10:	b17a      	cbz	r2, 8027f32 <WidgetSetPushButton_onConfigChanged+0x32>
    CoreView__ChangeViewState( _this, CoreViewStateFocusable, 0 );

  if (( oldKeyCode != CoreKeyCodeNoKey ) && ( _this->KeyHandler.Filter == CoreKeyCodeNoKey ))
    CoreView__ChangeViewState( _this, 0, CoreViewStateFocusable );

  if ( _this->Appearance != 0 )
 8027f12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8027f14:	b13b      	cbz	r3, 8027f26 <WidgetSetPushButton_onConfigChanged+0x26>
    CoreRectView__OnSetBounds( _this, _this->Super2.Bounds );
 8027f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027f18:	9300      	str	r3, [sp, #0]
 8027f1a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8027f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8027f20:	4620      	mov	r0, r4
 8027f22:	f7f9 fe19 	bl	8021b58 <CoreRectView__OnSetBounds>

  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8027f26:	4620      	mov	r0, r4
}
 8027f28:	b002      	add	sp, #8
 8027f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8027f2e:	f7fa b8ad 	b.w	802208c <CoreGroup_InvalidateViewState>
    CoreView__ChangeViewState( _this, CoreViewStateFocusable, 0 );
 8027f32:	2104      	movs	r1, #4
 8027f34:	f7f8 ffc0 	bl	8020eb8 <CoreView__ChangeViewState>
  if (( oldKeyCode != CoreKeyCodeNoKey ) && ( _this->KeyHandler.Filter == CoreKeyCodeNoKey ))
 8027f38:	e7eb      	b.n	8027f12 <WidgetSetPushButton_onConfigChanged+0x12>
 8027f3a:	bf00      	nop

08027f3c <WidgetSetPushButton_onFlashTimer>:

/* 'C' function for method : 'WidgetSet::PushButton.onFlashTimer()' */
void WidgetSetPushButton_onFlashTimer( WidgetSetPushButton _this, XObject sender )
{
 8027f3c:	b500      	push	{lr}
 8027f3e:	b083      	sub	sp, #12
 8027f40:	9001      	str	r0, [sp, #4]
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8027f42:	f7fa f8a3 	bl	802208c <CoreGroup_InvalidateViewState>
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8027f46:	9a01      	ldr	r2, [sp, #4]
 8027f48:	e9d2 0119 	ldrd	r0, r1, [r2, #100]	; 0x64
}
 8027f4c:	b003      	add	sp, #12
 8027f4e:	f85d eb04 	ldr.w	lr, [sp], #4
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8027f52:	f7f3 b96d 	b.w	801b230 <EwPostSignal>
 8027f56:	bf00      	nop

08027f58 <WidgetSetPushButton_onLeaveTouch>:
void WidgetSetPushButton_onLeaveTouch( WidgetSetPushButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8027f58:	f7fa b898 	b.w	802208c <CoreGroup_InvalidateViewState>

08027f5c <WidgetSetPushButton_onPressKey>:
{
 8027f5c:	b510      	push	{r4, lr}
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 0 );
 8027f5e:	2100      	movs	r1, #0
{
 8027f60:	4604      	mov	r4, r0
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 0 );
 8027f62:	30d8      	adds	r0, #216	; 0xd8
 8027f64:	f7fb fe00 	bl	8023b68 <CoreSimpleTouchHandler_OnSetEnabled>
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8027f68:	4620      	mov	r0, r4
 8027f6a:	f7fa f88f 	bl	802208c <CoreGroup_InvalidateViewState>
  if ( _this->FlashTimer.Enabled )
 8027f6e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8027f72:	b923      	cbnz	r3, 8027f7e <WidgetSetPushButton_onPressKey+0x22>
  _this->onPressKeyTime = _this->KeyHandler.Time;
 8027f74:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8027f78:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
}
 8027f7c:	bd10      	pop	{r4, pc}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8027f7e:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
 8027f82:	4622      	mov	r2, r4
 8027f84:	f7f3 f954 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 8027f88:	2100      	movs	r1, #0
 8027f8a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8027f8e:	f7fc fb1d 	bl	80245cc <CoreTimer_OnSetEnabled>
  _this->onPressKeyTime = _this->KeyHandler.Time;
 8027f92:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8027f96:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
}
 8027f9a:	bd10      	pop	{r4, pc}

08027f9c <WidgetSetPushButton_onReleaseTouch>:
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'WidgetSet::PushButton.onReleaseTouch()' */
void WidgetSetPushButton_onReleaseTouch( WidgetSetPushButton _this, XObject sender )
{
 8027f9c:	b510      	push	{r4, lr}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  pressFeedbackDuration = 0;

  if ( _this->Appearance != 0 )
 8027f9e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pressFeedbackDuration = 50;

  _this->KeyHandler.Enabled = 1;

  if ( !_this->TouchHandler.Inside )
 8027fa0:	f890 317d 	ldrb.w	r3, [r0, #381]	; 0x17d
    pressFeedbackDuration = 50;
 8027fa4:	2a00      	cmp	r2, #0
  _this->KeyHandler.Enabled = 1;
 8027fa6:	f04f 0401 	mov.w	r4, #1
{
 8027faa:	b082      	sub	sp, #8
  _this->KeyHandler.Enabled = 1;
 8027fac:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
    pressFeedbackDuration = 50;
 8027fb0:	bf0c      	ite	eq
 8027fb2:	2200      	moveq	r2, #0
 8027fb4:	2232      	movne	r2, #50	; 0x32
  if ( !_this->TouchHandler.Inside )
 8027fb6:	b173      	cbz	r3, 8027fd6 <WidgetSetPushButton_onReleaseTouch+0x3a>
    return;

  if ( _this->TouchHandler.AutoDeflected )
 8027fb8:	f890 317e 	ldrb.w	r3, [r0, #382]	; 0x17e
 8027fbc:	b95b      	cbnz	r3, 8027fd6 <WidgetSetPushButton_onReleaseTouch+0x3a>
    return;

  if ( _this->TouchHandler.HoldPeriod >= pressFeedbackDuration )
 8027fbe:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
 8027fc2:	4291      	cmp	r1, r2
 8027fc4:	db09      	blt.n	8027fda <WidgetSetPushButton_onReleaseTouch+0x3e>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8027fc6:	4602      	mov	r2, r0
 8027fc8:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
  else
  {
    CoreTimer_OnSetBegin( &_this->FlashTimer, pressFeedbackDuration - _this->TouchHandler.HoldPeriod );
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
  }
}
 8027fcc:	b002      	add	sp, #8
 8027fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8027fd2:	f7f3 b92d 	b.w	801b230 <EwPostSignal>
}
 8027fd6:	b002      	add	sp, #8
 8027fd8:	bd10      	pop	{r4, pc}
    CoreTimer_OnSetBegin( &_this->FlashTimer, pressFeedbackDuration - _this->TouchHandler.HoldPeriod );
 8027fda:	306c      	adds	r0, #108	; 0x6c
 8027fdc:	1a51      	subs	r1, r2, r1
 8027fde:	9001      	str	r0, [sp, #4]
 8027fe0:	f7fc fae6 	bl	80245b0 <CoreTimer_OnSetBegin>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 8027fe4:	9801      	ldr	r0, [sp, #4]
 8027fe6:	4621      	mov	r1, r4
}
 8027fe8:	b002      	add	sp, #8
 8027fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 8027fee:	f7fc baed 	b.w	80245cc <CoreTimer_OnSetEnabled>
 8027ff2:	bf00      	nop

08027ff4 <WidgetSetPushButton_onPressTouch>:

/* 'C' function for method : 'WidgetSet::PushButton.onPressTouch()' */
void WidgetSetPushButton_onPressTouch( WidgetSetPushButton _this, XObject sender )
{
 8027ff4:	b538      	push	{r3, r4, r5, lr}
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->KeyHandler.Enabled = 0;

  if ( _this->FlashTimer.Enabled )
 8027ff6:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
  _this->KeyHandler.Enabled = 0;
 8027ffa:	2500      	movs	r5, #0
 8027ffc:	f880 50d2 	strb.w	r5, [r0, #210]	; 0xd2
  if ( _this->FlashTimer.Enabled )
 8028000:	b903      	cbnz	r3, 8028004 <WidgetSetPushButton_onPressTouch+0x10>
  {
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
  }
}
 8028002:	bd38      	pop	{r3, r4, r5, pc}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8028004:	4604      	mov	r4, r0
 8028006:	4602      	mov	r2, r0
 8028008:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
 802800c:	f7f3 f910 	bl	801b230 <EwPostSignal>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 8028010:	4629      	mov	r1, r5
 8028012:	f104 006c 	add.w	r0, r4, #108	; 0x6c
}
 8028016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 0 );
 802801a:	f7fc bad7 	b.w	80245cc <CoreTimer_OnSetEnabled>
 802801e:	bf00      	nop

08028020 <WidgetSetPushButtonConfig_OnSetLabelMarginBottom.part.0>:
void WidgetSetPushButtonConfig_OnSetLabelMarginBottom( WidgetSetPushButtonConfig _this, 
 8028020:	b530      	push	{r4, r5, lr}
 8028022:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028024:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetLabelMarginBottom( WidgetSetPushButtonConfig _this, 
 8028026:	4604      	mov	r4, r0
  _this->LabelMarginBottom = value;
 8028028:	6341      	str	r1, [r0, #52]	; 0x34
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802802a:	4a06      	ldr	r2, [pc, #24]	; (8028044 <WidgetSetPushButtonConfig_OnSetLabelMarginBottom.part.0+0x24>)
 802802c:	4601      	mov	r1, r0
 802802e:	4628      	mov	r0, r5
 8028030:	f7f3 f8d0 	bl	801b1d4 <EwNewSlot>
 8028034:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028038:	4622      	mov	r2, r4
}
 802803a:	b003      	add	sp, #12
 802803c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028040:	f7f3 b8f6 	b.w	801b230 <EwPostSignal>
 8028044:	080279ad 	.word	0x080279ad

08028048 <WidgetSetPushButtonConfig_OnSetLabelMarginTop.part.0>:
void WidgetSetPushButtonConfig_OnSetLabelMarginTop( WidgetSetPushButtonConfig _this, 
 8028048:	b530      	push	{r4, r5, lr}
 802804a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802804c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetLabelMarginTop( WidgetSetPushButtonConfig _this, 
 802804e:	4604      	mov	r4, r0
  _this->LabelMarginTop = value;
 8028050:	6381      	str	r1, [r0, #56]	; 0x38
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028052:	4a06      	ldr	r2, [pc, #24]	; (802806c <WidgetSetPushButtonConfig_OnSetLabelMarginTop.part.0+0x24>)
 8028054:	4601      	mov	r1, r0
 8028056:	4628      	mov	r0, r5
 8028058:	f7f3 f8bc 	bl	801b1d4 <EwNewSlot>
 802805c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028060:	4622      	mov	r2, r4
}
 8028062:	b003      	add	sp, #12
 8028064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028068:	f7f3 b8e2 	b.w	801b230 <EwPostSignal>
 802806c:	080279ad 	.word	0x080279ad

08028070 <WidgetSetPushButtonConfig_OnSetLabelMarginRight.part.0>:
void WidgetSetPushButtonConfig_OnSetLabelMarginRight( WidgetSetPushButtonConfig _this, 
 8028070:	b530      	push	{r4, r5, lr}
 8028072:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028074:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetLabelMarginRight( WidgetSetPushButtonConfig _this, 
 8028076:	4604      	mov	r4, r0
  _this->LabelMarginRight = value;
 8028078:	63c1      	str	r1, [r0, #60]	; 0x3c
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802807a:	4a06      	ldr	r2, [pc, #24]	; (8028094 <WidgetSetPushButtonConfig_OnSetLabelMarginRight.part.0+0x24>)
 802807c:	4601      	mov	r1, r0
 802807e:	4628      	mov	r0, r5
 8028080:	f7f3 f8a8 	bl	801b1d4 <EwNewSlot>
 8028084:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028088:	4622      	mov	r2, r4
}
 802808a:	b003      	add	sp, #12
 802808c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028090:	f7f3 b8ce 	b.w	801b230 <EwPostSignal>
 8028094:	080279ad 	.word	0x080279ad

08028098 <WidgetSetPushButtonConfig_OnSetLabelMarginLeft.part.0>:
void WidgetSetPushButtonConfig_OnSetLabelMarginLeft( WidgetSetPushButtonConfig _this, 
 8028098:	b530      	push	{r4, r5, lr}
 802809a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802809c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetLabelMarginLeft( WidgetSetPushButtonConfig _this, 
 802809e:	4604      	mov	r4, r0
  _this->LabelMarginLeft = value;
 80280a0:	6401      	str	r1, [r0, #64]	; 0x40
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280a2:	4a06      	ldr	r2, [pc, #24]	; (80280bc <WidgetSetPushButtonConfig_OnSetLabelMarginLeft.part.0+0x24>)
 80280a4:	4601      	mov	r1, r0
 80280a6:	4628      	mov	r0, r5
 80280a8:	f7f3 f894 	bl	801b1d4 <EwNewSlot>
 80280ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80280b0:	4622      	mov	r2, r4
}
 80280b2:	b003      	add	sp, #12
 80280b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280b8:	f7f3 b8ba 	b.w	801b230 <EwPostSignal>
 80280bc:	080279ad 	.word	0x080279ad

080280c0 <WidgetSetPushButtonConfig_OnSetIconMarginBottom.part.0>:
void WidgetSetPushButtonConfig_OnSetIconMarginBottom( WidgetSetPushButtonConfig _this, 
 80280c0:	b530      	push	{r4, r5, lr}
 80280c2:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280c4:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetIconMarginBottom( WidgetSetPushButtonConfig _this, 
 80280c6:	4604      	mov	r4, r0
  _this->IconMarginBottom = value;
 80280c8:	64c1      	str	r1, [r0, #76]	; 0x4c
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280ca:	4a06      	ldr	r2, [pc, #24]	; (80280e4 <WidgetSetPushButtonConfig_OnSetIconMarginBottom.part.0+0x24>)
 80280cc:	4601      	mov	r1, r0
 80280ce:	4628      	mov	r0, r5
 80280d0:	f7f3 f880 	bl	801b1d4 <EwNewSlot>
 80280d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80280d8:	4622      	mov	r2, r4
}
 80280da:	b003      	add	sp, #12
 80280dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280e0:	f7f3 b8a6 	b.w	801b230 <EwPostSignal>
 80280e4:	080279ad 	.word	0x080279ad

080280e8 <WidgetSetPushButtonConfig_OnSetIconMarginTop.part.0>:
void WidgetSetPushButtonConfig_OnSetIconMarginTop( WidgetSetPushButtonConfig _this, 
 80280e8:	b530      	push	{r4, r5, lr}
 80280ea:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280ec:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetIconMarginTop( WidgetSetPushButtonConfig _this, 
 80280ee:	4604      	mov	r4, r0
  _this->IconMarginTop = value;
 80280f0:	6501      	str	r1, [r0, #80]	; 0x50
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80280f2:	4a06      	ldr	r2, [pc, #24]	; (802810c <WidgetSetPushButtonConfig_OnSetIconMarginTop.part.0+0x24>)
 80280f4:	4601      	mov	r1, r0
 80280f6:	4628      	mov	r0, r5
 80280f8:	f7f3 f86c 	bl	801b1d4 <EwNewSlot>
 80280fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028100:	4622      	mov	r2, r4
}
 8028102:	b003      	add	sp, #12
 8028104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028108:	f7f3 b892 	b.w	801b230 <EwPostSignal>
 802810c:	080279ad 	.word	0x080279ad

08028110 <WidgetSetPushButtonConfig_OnSetIconMarginRight.part.0>:
void WidgetSetPushButtonConfig_OnSetIconMarginRight( WidgetSetPushButtonConfig _this, 
 8028110:	b530      	push	{r4, r5, lr}
 8028112:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028114:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetIconMarginRight( WidgetSetPushButtonConfig _this, 
 8028116:	4604      	mov	r4, r0
  _this->IconMarginRight = value;
 8028118:	6541      	str	r1, [r0, #84]	; 0x54
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802811a:	4a06      	ldr	r2, [pc, #24]	; (8028134 <WidgetSetPushButtonConfig_OnSetIconMarginRight.part.0+0x24>)
 802811c:	4601      	mov	r1, r0
 802811e:	4628      	mov	r0, r5
 8028120:	f7f3 f858 	bl	801b1d4 <EwNewSlot>
 8028124:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028128:	4622      	mov	r2, r4
}
 802812a:	b003      	add	sp, #12
 802812c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028130:	f7f3 b87e 	b.w	801b230 <EwPostSignal>
 8028134:	080279ad 	.word	0x080279ad

08028138 <WidgetSetPushButtonConfig_OnSetIconMarginLeft.part.0>:
void WidgetSetPushButtonConfig_OnSetIconMarginLeft( WidgetSetPushButtonConfig _this, 
 8028138:	b530      	push	{r4, r5, lr}
 802813a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802813c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetIconMarginLeft( WidgetSetPushButtonConfig _this, 
 802813e:	4604      	mov	r4, r0
  _this->IconMarginLeft = value;
 8028140:	6581      	str	r1, [r0, #88]	; 0x58
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028142:	4a06      	ldr	r2, [pc, #24]	; (802815c <WidgetSetPushButtonConfig_OnSetIconMarginLeft.part.0+0x24>)
 8028144:	4601      	mov	r1, r0
 8028146:	4628      	mov	r0, r5
 8028148:	f7f3 f844 	bl	801b1d4 <EwNewSlot>
 802814c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028150:	4622      	mov	r2, r4
}
 8028152:	b003      	add	sp, #12
 8028154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028158:	f7f3 b86a 	b.w	801b230 <EwPostSignal>
 802815c:	080279ad 	.word	0x080279ad

08028160 <WidgetSetPushButtonConfig_OnSetLabelFont.part.0>:
void WidgetSetPushButtonConfig_OnSetLabelFont( WidgetSetPushButtonConfig _this, 
 8028160:	b530      	push	{r4, r5, lr}
 8028162:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028164:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetLabelFont( WidgetSetPushButtonConfig _this, 
 8028166:	4604      	mov	r4, r0
  _this->LabelFont = value;
 8028168:	6101      	str	r1, [r0, #16]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802816a:	4a06      	ldr	r2, [pc, #24]	; (8028184 <WidgetSetPushButtonConfig_OnSetLabelFont.part.0+0x24>)
 802816c:	4601      	mov	r1, r0
 802816e:	4628      	mov	r0, r5
 8028170:	f7f3 f830 	bl	801b1d4 <EwNewSlot>
 8028174:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028178:	4622      	mov	r2, r4
}
 802817a:	b003      	add	sp, #12
 802817c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028180:	f7f3 b856 	b.w	801b230 <EwPostSignal>
 8028184:	080279ad 	.word	0x080279ad

08028188 <WidgetSetPushButtonConfig_OnSetFaceFrameActive.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceFrameActive( WidgetSetPushButtonConfig _this, 
 8028188:	b530      	push	{r4, r5, lr}
 802818a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802818c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceFrameActive( WidgetSetPushButtonConfig _this, 
 802818e:	4604      	mov	r4, r0
  _this->FaceFrameActive = value;
 8028190:	65c1      	str	r1, [r0, #92]	; 0x5c
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028192:	4a06      	ldr	r2, [pc, #24]	; (80281ac <WidgetSetPushButtonConfig_OnSetFaceFrameActive.part.0+0x24>)
 8028194:	4601      	mov	r1, r0
 8028196:	4628      	mov	r0, r5
 8028198:	f7f3 f81c 	bl	801b1d4 <EwNewSlot>
 802819c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80281a0:	4622      	mov	r2, r4
}
 80281a2:	b003      	add	sp, #12
 80281a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281a8:	f7f3 b842 	b.w	801b230 <EwPostSignal>
 80281ac:	080279ad 	.word	0x080279ad

080281b0 <WidgetSetPushButtonConfig_OnSetFaceFrameFocused.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceFrameFocused( WidgetSetPushButtonConfig _this, 
 80281b0:	b530      	push	{r4, r5, lr}
 80281b2:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281b4:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceFrameFocused( WidgetSetPushButtonConfig _this, 
 80281b6:	4604      	mov	r4, r0
  _this->FaceFrameFocused = value;
 80281b8:	6601      	str	r1, [r0, #96]	; 0x60
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281ba:	4a06      	ldr	r2, [pc, #24]	; (80281d4 <WidgetSetPushButtonConfig_OnSetFaceFrameFocused.part.0+0x24>)
 80281bc:	4601      	mov	r1, r0
 80281be:	4628      	mov	r0, r5
 80281c0:	f7f3 f808 	bl	801b1d4 <EwNewSlot>
 80281c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80281c8:	4622      	mov	r2, r4
}
 80281ca:	b003      	add	sp, #12
 80281cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281d0:	f7f3 b82e 	b.w	801b230 <EwPostSignal>
 80281d4:	080279ad 	.word	0x080279ad

080281d8 <WidgetSetPushButtonConfig_OnSetFaceFrameDisabled.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( WidgetSetPushButtonConfig _this, 
 80281d8:	b530      	push	{r4, r5, lr}
 80281da:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281dc:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( WidgetSetPushButtonConfig _this, 
 80281de:	4604      	mov	r4, r0
  _this->FaceFrameDisabled = value;
 80281e0:	6641      	str	r1, [r0, #100]	; 0x64
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281e2:	4a06      	ldr	r2, [pc, #24]	; (80281fc <WidgetSetPushButtonConfig_OnSetFaceFrameDisabled.part.0+0x24>)
 80281e4:	4601      	mov	r1, r0
 80281e6:	4628      	mov	r0, r5
 80281e8:	f7f2 fff4 	bl	801b1d4 <EwNewSlot>
 80281ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80281f0:	4622      	mov	r2, r4
}
 80281f2:	b003      	add	sp, #12
 80281f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80281f8:	f7f3 b81a 	b.w	801b230 <EwPostSignal>
 80281fc:	080279ad 	.word	0x080279ad

08028200 <WidgetSetPushButtonConfig_OnSetFaceFrameDefault.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceFrameDefault( WidgetSetPushButtonConfig _this, 
 8028200:	b530      	push	{r4, r5, lr}
 8028202:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028204:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceFrameDefault( WidgetSetPushButtonConfig _this, 
 8028206:	4604      	mov	r4, r0
  _this->FaceFrameDefault = value;
 8028208:	6681      	str	r1, [r0, #104]	; 0x68
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802820a:	4a06      	ldr	r2, [pc, #24]	; (8028224 <WidgetSetPushButtonConfig_OnSetFaceFrameDefault.part.0+0x24>)
 802820c:	4601      	mov	r1, r0
 802820e:	4628      	mov	r0, r5
 8028210:	f7f2 ffe0 	bl	801b1d4 <EwNewSlot>
 8028214:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028218:	4622      	mov	r2, r4
}
 802821a:	b003      	add	sp, #12
 802821c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028220:	f7f3 b806 	b.w	801b230 <EwPostSignal>
 8028224:	080279ad 	.word	0x080279ad

08028228 <WidgetSetPushButtonConfig_OnSetFaceActive.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceActive( WidgetSetPushButtonConfig _this, 
 8028228:	b530      	push	{r4, r5, lr}
 802822a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802822c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceActive( WidgetSetPushButtonConfig _this, 
 802822e:	4604      	mov	r4, r0
  _this->FaceActive = value;
 8028230:	6141      	str	r1, [r0, #20]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028232:	4a06      	ldr	r2, [pc, #24]	; (802824c <WidgetSetPushButtonConfig_OnSetFaceActive.part.0+0x24>)
 8028234:	4601      	mov	r1, r0
 8028236:	4628      	mov	r0, r5
 8028238:	f7f2 ffcc 	bl	801b1d4 <EwNewSlot>
 802823c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028240:	4622      	mov	r2, r4
}
 8028242:	b003      	add	sp, #12
 8028244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028248:	f7f2 bff2 	b.w	801b230 <EwPostSignal>
 802824c:	080279ad 	.word	0x080279ad

08028250 <WidgetSetPushButtonConfig_OnSetFaceFocused.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceFocused( WidgetSetPushButtonConfig _this, 
 8028250:	b530      	push	{r4, r5, lr}
 8028252:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028254:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceFocused( WidgetSetPushButtonConfig _this, 
 8028256:	4604      	mov	r4, r0
  _this->FaceFocused = value;
 8028258:	6181      	str	r1, [r0, #24]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802825a:	4a06      	ldr	r2, [pc, #24]	; (8028274 <WidgetSetPushButtonConfig_OnSetFaceFocused.part.0+0x24>)
 802825c:	4601      	mov	r1, r0
 802825e:	4628      	mov	r0, r5
 8028260:	f7f2 ffb8 	bl	801b1d4 <EwNewSlot>
 8028264:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028268:	4622      	mov	r2, r4
}
 802826a:	b003      	add	sp, #12
 802826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028270:	f7f2 bfde 	b.w	801b230 <EwPostSignal>
 8028274:	080279ad 	.word	0x080279ad

08028278 <WidgetSetPushButtonConfig_OnSetFaceDisabled.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceDisabled( WidgetSetPushButtonConfig _this, 
 8028278:	b530      	push	{r4, r5, lr}
 802827a:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802827c:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceDisabled( WidgetSetPushButtonConfig _this, 
 802827e:	4604      	mov	r4, r0
  _this->FaceDisabled = value;
 8028280:	61c1      	str	r1, [r0, #28]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028282:	4a06      	ldr	r2, [pc, #24]	; (802829c <WidgetSetPushButtonConfig_OnSetFaceDisabled.part.0+0x24>)
 8028284:	4601      	mov	r1, r0
 8028286:	4628      	mov	r0, r5
 8028288:	f7f2 ffa4 	bl	801b1d4 <EwNewSlot>
 802828c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028290:	4622      	mov	r2, r4
}
 8028292:	b003      	add	sp, #12
 8028294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028298:	f7f2 bfca 	b.w	801b230 <EwPostSignal>
 802829c:	080279ad 	.word	0x080279ad

080282a0 <WidgetSetPushButtonConfig_OnSetFaceDefault.part.0>:
void WidgetSetPushButtonConfig_OnSetFaceDefault( WidgetSetPushButtonConfig _this, 
 80282a0:	b530      	push	{r4, r5, lr}
 80282a2:	b083      	sub	sp, #12
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80282a4:	466d      	mov	r5, sp
void WidgetSetPushButtonConfig_OnSetFaceDefault( WidgetSetPushButtonConfig _this, 
 80282a6:	4604      	mov	r4, r0
  _this->FaceDefault = value;
 80282a8:	6201      	str	r1, [r0, #32]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80282aa:	4a06      	ldr	r2, [pc, #24]	; (80282c4 <WidgetSetPushButtonConfig_OnSetFaceDefault.part.0+0x24>)
 80282ac:	4601      	mov	r1, r0
 80282ae:	4628      	mov	r0, r5
 80282b0:	f7f2 ff90 	bl	801b1d4 <EwNewSlot>
 80282b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80282b8:	4622      	mov	r2, r4
}
 80282ba:	b003      	add	sp, #12
 80282bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80282c0:	f7f2 bfb6 	b.w	801b230 <EwPostSignal>
 80282c4:	080279ad 	.word	0x080279ad

080282c8 <WidgetSetPushButton_onEnterTouch>:
 80282c8:	f7f9 bee0 	b.w	802208c <CoreGroup_InvalidateViewState>

080282cc <WidgetSetPushButton_onReleaseKey>:
{
 80282cc:	b530      	push	{r4, r5, lr}
 80282ce:	4604      	mov	r4, r0
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 1 );
 80282d0:	2101      	movs	r1, #1
  if ( _this->Appearance != 0 )
 80282d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
 80282d4:	b083      	sub	sp, #12
  if ( _this->Appearance != 0 )
 80282d6:	2b00      	cmp	r3, #0
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 1 );
 80282d8:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
    pressFeedbackDuration = 50;
 80282dc:	bf0c      	ite	eq
 80282de:	2500      	moveq	r5, #0
 80282e0:	2532      	movne	r5, #50	; 0x32
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 1 );
 80282e2:	f7fb fc41 	bl	8023b68 <CoreSimpleTouchHandler_OnSetEnabled>
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 80282e6:	4620      	mov	r0, r4
 80282e8:	f7f9 fed0 	bl	802208c <CoreGroup_InvalidateViewState>
  if ((XInt32)( _this->KeyHandler.Time - _this->onPressKeyTime ) >= pressFeedbackDuration )
 80282ec:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80282f0:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
 80282f4:	1ac9      	subs	r1, r1, r3
 80282f6:	42a9      	cmp	r1, r5
 80282f8:	db07      	blt.n	802830a <WidgetSetPushButton_onReleaseKey+0x3e>
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 80282fa:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
 80282fe:	4622      	mov	r2, r4
}
 8028300:	b003      	add	sp, #12
 8028302:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    EwPostSignal( _this->OnActivate, ((XObject)_this ));
 8028306:	f7f2 bf93 	b.w	801b230 <EwPostSignal>
    CoreTimer_OnSetBegin( &_this->FlashTimer, pressFeedbackDuration - (XInt32)( 
 802830a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 802830e:	1a69      	subs	r1, r5, r1
 8028310:	9001      	str	r0, [sp, #4]
 8028312:	f7fc f94d 	bl	80245b0 <CoreTimer_OnSetBegin>
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 8028316:	9801      	ldr	r0, [sp, #4]
 8028318:	2101      	movs	r1, #1
}
 802831a:	b003      	add	sp, #12
 802831c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    CoreTimer_OnSetEnabled( &_this->FlashTimer, 1 );
 8028320:	f7fc b954 	b.w	80245cc <CoreTimer_OnSetEnabled>

08028324 <WidgetSetPushButtonConfig_OnSetLabelColorActive>:
{
 8028324:	b530      	push	{r4, r5, lr}
 8028326:	b085      	sub	sp, #20
 8028328:	4604      	mov	r4, r0
 802832a:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->LabelColorActive, value ))
 802832c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802832e:	f7f0 f83c 	bl	80183aa <EwCompColor>
 8028332:	b908      	cbnz	r0, 8028338 <WidgetSetPushButtonConfig_OnSetLabelColorActive+0x14>
}
 8028334:	b005      	add	sp, #20
 8028336:	bd30      	pop	{r4, r5, pc}
  _this->LabelColorActive = value;
 8028338:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802833a:	4a07      	ldr	r2, [pc, #28]	; (8028358 <WidgetSetPushButtonConfig_OnSetLabelColorActive+0x34>)
  _this->LabelColorActive = value;
 802833c:	6263      	str	r3, [r4, #36]	; 0x24
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802833e:	ad02      	add	r5, sp, #8
 8028340:	4628      	mov	r0, r5
 8028342:	4621      	mov	r1, r4
 8028344:	f7f2 ff46 	bl	801b1d4 <EwNewSlot>
 8028348:	e895 0003 	ldmia.w	r5, {r0, r1}
 802834c:	4622      	mov	r2, r4
}
 802834e:	b005      	add	sp, #20
 8028350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028354:	f7f2 bf6c 	b.w	801b230 <EwPostSignal>
 8028358:	080279ad 	.word	0x080279ad

0802835c <WidgetSetPushButtonConfig_OnSetLabelColorFocused>:
{
 802835c:	b530      	push	{r4, r5, lr}
 802835e:	b085      	sub	sp, #20
 8028360:	4604      	mov	r4, r0
 8028362:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->LabelColorFocused, value ))
 8028364:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8028366:	f7f0 f820 	bl	80183aa <EwCompColor>
 802836a:	b908      	cbnz	r0, 8028370 <WidgetSetPushButtonConfig_OnSetLabelColorFocused+0x14>
}
 802836c:	b005      	add	sp, #20
 802836e:	bd30      	pop	{r4, r5, pc}
  _this->LabelColorFocused = value;
 8028370:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028372:	4a07      	ldr	r2, [pc, #28]	; (8028390 <WidgetSetPushButtonConfig_OnSetLabelColorFocused+0x34>)
  _this->LabelColorFocused = value;
 8028374:	62a3      	str	r3, [r4, #40]	; 0x28
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028376:	ad02      	add	r5, sp, #8
 8028378:	4628      	mov	r0, r5
 802837a:	4621      	mov	r1, r4
 802837c:	f7f2 ff2a 	bl	801b1d4 <EwNewSlot>
 8028380:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028384:	4622      	mov	r2, r4
}
 8028386:	b005      	add	sp, #20
 8028388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802838c:	f7f2 bf50 	b.w	801b230 <EwPostSignal>
 8028390:	080279ad 	.word	0x080279ad

08028394 <WidgetSetPushButtonConfig_OnSetLabelColorDisabled>:
{
 8028394:	b530      	push	{r4, r5, lr}
 8028396:	b085      	sub	sp, #20
 8028398:	4604      	mov	r4, r0
 802839a:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->LabelColorDisabled, value ))
 802839c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802839e:	f7f0 f804 	bl	80183aa <EwCompColor>
 80283a2:	b908      	cbnz	r0, 80283a8 <WidgetSetPushButtonConfig_OnSetLabelColorDisabled+0x14>
}
 80283a4:	b005      	add	sp, #20
 80283a6:	bd30      	pop	{r4, r5, pc}
  _this->LabelColorDisabled = value;
 80283a8:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283aa:	4a07      	ldr	r2, [pc, #28]	; (80283c8 <WidgetSetPushButtonConfig_OnSetLabelColorDisabled+0x34>)
  _this->LabelColorDisabled = value;
 80283ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283ae:	ad02      	add	r5, sp, #8
 80283b0:	4628      	mov	r0, r5
 80283b2:	4621      	mov	r1, r4
 80283b4:	f7f2 ff0e 	bl	801b1d4 <EwNewSlot>
 80283b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80283bc:	4622      	mov	r2, r4
}
 80283be:	b005      	add	sp, #20
 80283c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283c4:	f7f2 bf34 	b.w	801b230 <EwPostSignal>
 80283c8:	080279ad 	.word	0x080279ad

080283cc <WidgetSetPushButtonConfig_OnSetLabelColorDefault>:
{
 80283cc:	b530      	push	{r4, r5, lr}
 80283ce:	b085      	sub	sp, #20
 80283d0:	4604      	mov	r4, r0
 80283d2:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->LabelColorDefault, value ))
 80283d4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80283d6:	f7ef ffe8 	bl	80183aa <EwCompColor>
 80283da:	b908      	cbnz	r0, 80283e0 <WidgetSetPushButtonConfig_OnSetLabelColorDefault+0x14>
}
 80283dc:	b005      	add	sp, #20
 80283de:	bd30      	pop	{r4, r5, pc}
  _this->LabelColorDefault = value;
 80283e0:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283e2:	4a07      	ldr	r2, [pc, #28]	; (8028400 <WidgetSetPushButtonConfig_OnSetLabelColorDefault+0x34>)
  _this->LabelColorDefault = value;
 80283e4:	6323      	str	r3, [r4, #48]	; 0x30
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283e6:	ad02      	add	r5, sp, #8
 80283e8:	4628      	mov	r0, r5
 80283ea:	4621      	mov	r1, r4
 80283ec:	f7f2 fef2 	bl	801b1d4 <EwNewSlot>
 80283f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80283f4:	4622      	mov	r2, r4
}
 80283f6:	b005      	add	sp, #20
 80283f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80283fc:	f7f2 bf18 	b.w	801b230 <EwPostSignal>
 8028400:	080279ad 	.word	0x080279ad

08028404 <WidgetSetPushButtonConfig_OnSetIconTintDisabled>:
{
 8028404:	b530      	push	{r4, r5, lr}
 8028406:	b085      	sub	sp, #20
 8028408:	4604      	mov	r4, r0
 802840a:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->IconTintDisabled, value ))
 802840c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802840e:	f7ef ffcc 	bl	80183aa <EwCompColor>
 8028412:	b908      	cbnz	r0, 8028418 <WidgetSetPushButtonConfig_OnSetIconTintDisabled+0x14>
}
 8028414:	b005      	add	sp, #20
 8028416:	bd30      	pop	{r4, r5, pc}
  _this->IconTintDisabled = value;
 8028418:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802841a:	4a07      	ldr	r2, [pc, #28]	; (8028438 <WidgetSetPushButtonConfig_OnSetIconTintDisabled+0x34>)
  _this->IconTintDisabled = value;
 802841c:	6463      	str	r3, [r4, #68]	; 0x44
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802841e:	ad02      	add	r5, sp, #8
 8028420:	4628      	mov	r0, r5
 8028422:	4621      	mov	r1, r4
 8028424:	f7f2 fed6 	bl	801b1d4 <EwNewSlot>
 8028428:	e895 0003 	ldmia.w	r5, {r0, r1}
 802842c:	4622      	mov	r2, r4
}
 802842e:	b005      	add	sp, #20
 8028430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028434:	f7f2 befc 	b.w	801b230 <EwPostSignal>
 8028438:	080279ad 	.word	0x080279ad

0802843c <WidgetSetPushButtonConfig_OnSetIconTintDefault>:
{
 802843c:	b530      	push	{r4, r5, lr}
 802843e:	b085      	sub	sp, #20
 8028440:	4604      	mov	r4, r0
 8028442:	9101      	str	r1, [sp, #4]
  if ( !EwCompColor( _this->IconTintDefault, value ))
 8028444:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8028446:	f7ef ffb0 	bl	80183aa <EwCompColor>
 802844a:	b908      	cbnz	r0, 8028450 <WidgetSetPushButtonConfig_OnSetIconTintDefault+0x14>
}
 802844c:	b005      	add	sp, #20
 802844e:	bd30      	pop	{r4, r5, pc}
  _this->IconTintDefault = value;
 8028450:	9b01      	ldr	r3, [sp, #4]
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028452:	4a07      	ldr	r2, [pc, #28]	; (8028470 <WidgetSetPushButtonConfig_OnSetIconTintDefault+0x34>)
  _this->IconTintDefault = value;
 8028454:	64a3      	str	r3, [r4, #72]	; 0x48
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 8028456:	ad02      	add	r5, sp, #8
 8028458:	4628      	mov	r0, r5
 802845a:	4621      	mov	r1, r4
 802845c:	f7f2 feba 	bl	801b1d4 <EwNewSlot>
 8028460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028464:	4622      	mov	r2, r4
}
 8028466:	b005      	add	sp, #20
 8028468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802846c:	f7f2 bee0 	b.w	801b230 <EwPostSignal>
 8028470:	080279ad 	.word	0x080279ad

08028474 <WidgetSetPushButtonConfig_OnSetWidgetMinSize>:
{
 8028474:	b570      	push	{r4, r5, r6, lr}
 8028476:	b084      	sub	sp, #16
 8028478:	466c      	mov	r4, sp
 802847a:	e884 0006 	stmia.w	r4, {r1, r2}
  if ( !EwCompPoint( _this->WidgetMinSize, value ))
 802847e:	f100 066c 	add.w	r6, r0, #108	; 0x6c
{
 8028482:	4605      	mov	r5, r0
  if ( !EwCompPoint( _this->WidgetMinSize, value ))
 8028484:	e894 000c 	ldmia.w	r4, {r2, r3}
 8028488:	e896 0003 	ldmia.w	r6, {r0, r1}
 802848c:	f7f1 fcad 	bl	8019dea <EwCompPoint>
 8028490:	b908      	cbnz	r0, 8028496 <WidgetSetPushButtonConfig_OnSetWidgetMinSize+0x22>
}
 8028492:	b004      	add	sp, #16
 8028494:	bd70      	pop	{r4, r5, r6, pc}
  _this->WidgetMinSize = value;
 8028496:	e894 0003 	ldmia.w	r4, {r0, r1}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 802849a:	ac02      	add	r4, sp, #8
  _this->WidgetMinSize = value;
 802849c:	e886 0003 	stmia.w	r6, {r0, r1}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80284a0:	4a06      	ldr	r2, [pc, #24]	; (80284bc <WidgetSetPushButtonConfig_OnSetWidgetMinSize+0x48>)
 80284a2:	4620      	mov	r0, r4
 80284a4:	4629      	mov	r1, r5
 80284a6:	f7f2 fe95 	bl	801b1d4 <EwNewSlot>
 80284aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80284ae:	462a      	mov	r2, r5
}
 80284b0:	b004      	add	sp, #16
 80284b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetWidgetConfig_onInvalidate ), ((XObject)_this ));
 80284b6:	f7f2 bebb 	b.w	801b230 <EwPostSignal>
 80284ba:	bf00      	nop
 80284bc:	080279ad 	.word	0x080279ad

080284c0 <WidgetSetPushButton_Medium__Init>:
{
 80284c0:	b570      	push	{r4, r5, r6, lr}
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
 80284c2:	4e57      	ldr	r6, [pc, #348]	; (8028620 <WidgetSetPushButton_Medium__Init+0x160>)
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( _this, _Const0002 );
 80284c4:	4d57      	ldr	r5, [pc, #348]	; (8028624 <WidgetSetPushButton_Medium__Init+0x164>)
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
 80284c6:	6831      	ldr	r1, [r6, #0]
{
 80284c8:	4604      	mov	r4, r0
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
 80284ca:	f7ff ff2b 	bl	8028324 <WidgetSetPushButtonConfig_OnSetLabelColorActive>
  WidgetSetPushButtonConfig_OnSetLabelColorFocused( _this, _Const0000 );
 80284ce:	6831      	ldr	r1, [r6, #0]
 80284d0:	4620      	mov	r0, r4
 80284d2:	f7ff ff43 	bl	802835c <WidgetSetPushButtonConfig_OnSetLabelColorFocused>
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const0001 );
 80284d6:	4b54      	ldr	r3, [pc, #336]	; (8028628 <WidgetSetPushButton_Medium__Init+0x168>)
 80284d8:	4620      	mov	r0, r4
 80284da:	6819      	ldr	r1, [r3, #0]
 80284dc:	f7ff ff5a 	bl	8028394 <WidgetSetPushButtonConfig_OnSetLabelColorDisabled>
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( _this, _Const0002 );
 80284e0:	6829      	ldr	r1, [r5, #0]
 80284e2:	4620      	mov	r0, r4
 80284e4:	f7ff ff72 	bl	80283cc <WidgetSetPushButtonConfig_OnSetLabelColorDefault>
  if ( _this->LabelMarginBottom == value )
 80284e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80284ea:	2b06      	cmp	r3, #6
 80284ec:	d003      	beq.n	80284f6 <WidgetSetPushButton_Medium__Init+0x36>
 80284ee:	2106      	movs	r1, #6
 80284f0:	4620      	mov	r0, r4
 80284f2:	f7ff fd95 	bl	8028020 <WidgetSetPushButtonConfig_OnSetLabelMarginBottom.part.0>
  if ( _this->LabelMarginTop == value )
 80284f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80284f8:	2b06      	cmp	r3, #6
 80284fa:	d003      	beq.n	8028504 <WidgetSetPushButton_Medium__Init+0x44>
 80284fc:	2106      	movs	r1, #6
 80284fe:	4620      	mov	r0, r4
 8028500:	f7ff fda2 	bl	8028048 <WidgetSetPushButtonConfig_OnSetLabelMarginTop.part.0>
  if ( _this->LabelMarginRight == value )
 8028504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028506:	2b06      	cmp	r3, #6
 8028508:	d003      	beq.n	8028512 <WidgetSetPushButton_Medium__Init+0x52>
 802850a:	2106      	movs	r1, #6
 802850c:	4620      	mov	r0, r4
 802850e:	f7ff fdaf 	bl	8028070 <WidgetSetPushButtonConfig_OnSetLabelMarginRight.part.0>
  if ( _this->LabelMarginLeft == value )
 8028512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028514:	2b06      	cmp	r3, #6
 8028516:	d003      	beq.n	8028520 <WidgetSetPushButton_Medium__Init+0x60>
 8028518:	2106      	movs	r1, #6
 802851a:	4620      	mov	r0, r4
 802851c:	f7ff fdbc 	bl	8028098 <WidgetSetPushButtonConfig_OnSetLabelMarginLeft.part.0>
  WidgetSetPushButtonConfig_OnSetIconTintDisabled( _this, _Const0003 );
 8028520:	4b42      	ldr	r3, [pc, #264]	; (802862c <WidgetSetPushButton_Medium__Init+0x16c>)
 8028522:	4620      	mov	r0, r4
 8028524:	6819      	ldr	r1, [r3, #0]
 8028526:	f7ff ff6d 	bl	8028404 <WidgetSetPushButtonConfig_OnSetIconTintDisabled>
  WidgetSetPushButtonConfig_OnSetIconTintDefault( _this, _Const0002 );
 802852a:	6829      	ldr	r1, [r5, #0]
 802852c:	4620      	mov	r0, r4
 802852e:	f7ff ff85 	bl	802843c <WidgetSetPushButtonConfig_OnSetIconTintDefault>
  if ( _this->IconMarginBottom == value )
 8028532:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8028534:	2b06      	cmp	r3, #6
 8028536:	d003      	beq.n	8028540 <WidgetSetPushButton_Medium__Init+0x80>
 8028538:	2106      	movs	r1, #6
 802853a:	4620      	mov	r0, r4
 802853c:	f7ff fdc0 	bl	80280c0 <WidgetSetPushButtonConfig_OnSetIconMarginBottom.part.0>
  if ( _this->IconMarginTop == value )
 8028540:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8028542:	2b06      	cmp	r3, #6
 8028544:	d003      	beq.n	802854e <WidgetSetPushButton_Medium__Init+0x8e>
 8028546:	2106      	movs	r1, #6
 8028548:	4620      	mov	r0, r4
 802854a:	f7ff fdcd 	bl	80280e8 <WidgetSetPushButtonConfig_OnSetIconMarginTop.part.0>
  if ( _this->IconMarginRight == value )
 802854e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028550:	2b06      	cmp	r3, #6
 8028552:	d003      	beq.n	802855c <WidgetSetPushButton_Medium__Init+0x9c>
 8028554:	2106      	movs	r1, #6
 8028556:	4620      	mov	r0, r4
 8028558:	f7ff fdda 	bl	8028110 <WidgetSetPushButtonConfig_OnSetIconMarginRight.part.0>
  if ( _this->IconMarginLeft == value )
 802855c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802855e:	2b06      	cmp	r3, #6
 8028560:	d003      	beq.n	802856a <WidgetSetPushButton_Medium__Init+0xaa>
 8028562:	2106      	movs	r1, #6
 8028564:	4620      	mov	r0, r4
 8028566:	f7ff fde7 	bl	8028138 <WidgetSetPushButtonConfig_OnSetIconMarginLeft.part.0>
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &ResourcesFontMedium, 
 802856a:	4931      	ldr	r1, [pc, #196]	; (8028630 <WidgetSetPushButton_Medium__Init+0x170>)
 802856c:	4831      	ldr	r0, [pc, #196]	; (8028634 <WidgetSetPushButton_Medium__Init+0x174>)
 802856e:	f7f2 f82b 	bl	801a5c8 <EwLoadResource>
  if ( _this->LabelFont == value )
 8028572:	6923      	ldr	r3, [r4, #16]
 8028574:	4298      	cmp	r0, r3
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &ResourcesFontMedium, 
 8028576:	4601      	mov	r1, r0
  if ( _this->LabelFont == value )
 8028578:	d002      	beq.n	8028580 <WidgetSetPushButton_Medium__Init+0xc0>
 802857a:	4620      	mov	r0, r4
 802857c:	f7ff fdf0 	bl	8028160 <WidgetSetPushButtonConfig_OnSetLabelFont.part.0>
  if ( _this->FaceFrameActive == value )
 8028580:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8028582:	2b03      	cmp	r3, #3
 8028584:	d003      	beq.n	802858e <WidgetSetPushButton_Medium__Init+0xce>
 8028586:	2103      	movs	r1, #3
 8028588:	4620      	mov	r0, r4
 802858a:	f7ff fdfd 	bl	8028188 <WidgetSetPushButtonConfig_OnSetFaceFrameActive.part.0>
  if ( _this->FaceFrameFocused == value )
 802858e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8028590:	2b02      	cmp	r3, #2
 8028592:	d003      	beq.n	802859c <WidgetSetPushButton_Medium__Init+0xdc>
 8028594:	2102      	movs	r1, #2
 8028596:	4620      	mov	r0, r4
 8028598:	f7ff fe0a 	bl	80281b0 <WidgetSetPushButtonConfig_OnSetFaceFrameFocused.part.0>
  if ( _this->FaceFrameDisabled == value )
 802859c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802859e:	b11b      	cbz	r3, 80285a8 <WidgetSetPushButton_Medium__Init+0xe8>
 80285a0:	2100      	movs	r1, #0
 80285a2:	4620      	mov	r0, r4
 80285a4:	f7ff fe18 	bl	80281d8 <WidgetSetPushButtonConfig_OnSetFaceFrameDisabled.part.0>
  if ( _this->FaceFrameDefault == value )
 80285a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80285aa:	2b01      	cmp	r3, #1
 80285ac:	d003      	beq.n	80285b6 <WidgetSetPushButton_Medium__Init+0xf6>
 80285ae:	2101      	movs	r1, #1
 80285b0:	4620      	mov	r0, r4
 80285b2:	f7ff fe25 	bl	8028200 <WidgetSetPushButtonConfig_OnSetFaceFrameDefault.part.0>
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285b6:	4920      	ldr	r1, [pc, #128]	; (8028638 <WidgetSetPushButton_Medium__Init+0x178>)
 80285b8:	4820      	ldr	r0, [pc, #128]	; (802863c <WidgetSetPushButton_Medium__Init+0x17c>)
 80285ba:	f7f2 f805 	bl	801a5c8 <EwLoadResource>
  if ( _this->FaceActive == value )
 80285be:	6963      	ldr	r3, [r4, #20]
 80285c0:	4298      	cmp	r0, r3
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285c2:	4601      	mov	r1, r0
  if ( _this->FaceActive == value )
 80285c4:	d002      	beq.n	80285cc <WidgetSetPushButton_Medium__Init+0x10c>
 80285c6:	4620      	mov	r0, r4
 80285c8:	f7ff fe2e 	bl	8028228 <WidgetSetPushButtonConfig_OnSetFaceActive.part.0>
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285cc:	491a      	ldr	r1, [pc, #104]	; (8028638 <WidgetSetPushButton_Medium__Init+0x178>)
 80285ce:	481b      	ldr	r0, [pc, #108]	; (802863c <WidgetSetPushButton_Medium__Init+0x17c>)
 80285d0:	f7f1 fffa 	bl	801a5c8 <EwLoadResource>
  if ( _this->FaceFocused == value )
 80285d4:	69a3      	ldr	r3, [r4, #24]
 80285d6:	4298      	cmp	r0, r3
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285d8:	4601      	mov	r1, r0
  if ( _this->FaceFocused == value )
 80285da:	d002      	beq.n	80285e2 <WidgetSetPushButton_Medium__Init+0x122>
 80285dc:	4620      	mov	r0, r4
 80285de:	f7ff fe37 	bl	8028250 <WidgetSetPushButtonConfig_OnSetFaceFocused.part.0>
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285e2:	4915      	ldr	r1, [pc, #84]	; (8028638 <WidgetSetPushButton_Medium__Init+0x178>)
 80285e4:	4815      	ldr	r0, [pc, #84]	; (802863c <WidgetSetPushButton_Medium__Init+0x17c>)
 80285e6:	f7f1 ffef 	bl	801a5c8 <EwLoadResource>
  if ( _this->FaceDisabled == value )
 80285ea:	69e3      	ldr	r3, [r4, #28]
 80285ec:	4298      	cmp	r0, r3
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285ee:	4601      	mov	r1, r0
  if ( _this->FaceDisabled == value )
 80285f0:	d002      	beq.n	80285f8 <WidgetSetPushButton_Medium__Init+0x138>
 80285f2:	4620      	mov	r0, r4
 80285f4:	f7ff fe40 	bl	8028278 <WidgetSetPushButtonConfig_OnSetFaceDisabled.part.0>
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 80285f8:	490f      	ldr	r1, [pc, #60]	; (8028638 <WidgetSetPushButton_Medium__Init+0x178>)
 80285fa:	4810      	ldr	r0, [pc, #64]	; (802863c <WidgetSetPushButton_Medium__Init+0x17c>)
 80285fc:	f7f1 ffe4 	bl	801a5c8 <EwLoadResource>
  if ( _this->FaceDefault == value )
 8028600:	6a23      	ldr	r3, [r4, #32]
 8028602:	4298      	cmp	r0, r3
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
 8028604:	4601      	mov	r1, r0
  if ( _this->FaceDefault == value )
 8028606:	d002      	beq.n	802860e <WidgetSetPushButton_Medium__Init+0x14e>
 8028608:	4620      	mov	r0, r4
 802860a:	f7ff fe49 	bl	80282a0 <WidgetSetPushButtonConfig_OnSetFaceDefault.part.0>
  WidgetSetPushButtonConfig_OnSetWidgetMinSize( _this, _Const0004 );
 802860e:	4b0c      	ldr	r3, [pc, #48]	; (8028640 <WidgetSetPushButton_Medium__Init+0x180>)
 8028610:	4620      	mov	r0, r4
 8028612:	e893 0006 	ldmia.w	r3, {r1, r2}
}
 8028616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WidgetSetPushButtonConfig_OnSetWidgetMinSize( _this, _Const0004 );
 802861a:	f7ff bf2b 	b.w	8028474 <WidgetSetPushButtonConfig_OnSetWidgetMinSize>
 802861e:	bf00      	nop
 8028620:	080389f0 	.word	0x080389f0
 8028624:	080389f8 	.word	0x080389f8
 8028628:	080389f4 	.word	0x080389f4
 802862c:	080389fc 	.word	0x080389fc
 8028630:	08038684 	.word	0x08038684
 8028634:	080385bc 	.word	0x080385bc
 8028638:	08038640 	.word	0x08038640
 802863c:	080389d8 	.word	0x080389d8
 8028640:	08038a00 	.word	0x08038a00

08028644 <WidgetSetPushButton_OnSetLabel>:

/* 'C' function for method : 'WidgetSet::PushButton.OnSetLabel()' */
void WidgetSetPushButton_OnSetLabel( WidgetSetPushButton _this, XString value )
{
 8028644:	b538      	push	{r3, r4, r5, lr}
 8028646:	4604      	mov	r4, r0
  if ( !EwCompString( _this->Label, value ))
 8028648:	f8d0 0180 	ldr.w	r0, [r0, #384]	; 0x180
{
 802864c:	460d      	mov	r5, r1
  if ( !EwCompString( _this->Label, value ))
 802864e:	f7f3 fec9 	bl	801c3e4 <EwCompString>
 8028652:	b900      	cbnz	r0, 8028656 <WidgetSetPushButton_OnSetLabel+0x12>
    return;

  _this->Label = EwShareString( value );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}
 8028654:	bd38      	pop	{r3, r4, r5, pc}
  _this->Label = EwShareString( value );
 8028656:	4628      	mov	r0, r5
 8028658:	f7f3 ffee 	bl	801c638 <EwShareString>
 802865c:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8028660:	4620      	mov	r0, r4
}
 8028662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CoreGroup_InvalidateViewState((CoreGroup)_this );
 8028666:	f7f9 bd11 	b.w	802208c <CoreGroup_InvalidateViewState>
 802866a:	bf00      	nop

0802866c <WidgetSetPushButton_OnSetAppearance>:

/* 'C' function for method : 'WidgetSet::PushButton.OnSetAppearance()' */
void WidgetSetPushButton_OnSetAppearance( WidgetSetPushButton _this, WidgetSetPushButtonConfig 
  value )
{
  if ( _this->Appearance == value )
 802866c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 802866e:	428b      	cmp	r3, r1
 8028670:	d02c      	beq.n	80286cc <WidgetSetPushButton_OnSetAppearance+0x60>
{
 8028672:	b570      	push	{r4, r5, r6, lr}
 8028674:	4604      	mov	r4, r0
 8028676:	b086      	sub	sp, #24
 8028678:	460d      	mov	r5, r1
    return;

  if ( _this->Appearance != 0 )
 802867a:	b15b      	cbz	r3, 8028694 <WidgetSetPushButton_OnSetAppearance+0x28>
    EwDetachObjObserver( EwNewSlot( _this, WidgetSetPushButton_onConfigChanged ), 
 802867c:	466e      	mov	r6, sp
 802867e:	4a14      	ldr	r2, [pc, #80]	; (80286d0 <WidgetSetPushButton_OnSetAppearance+0x64>)
 8028680:	4630      	mov	r0, r6
 8028682:	4621      	mov	r1, r4
 8028684:	f7f2 fda6 	bl	801b1d4 <EwNewSlot>
 8028688:	e896 0003 	ldmia.w	r6, {r0, r1}
 802868c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802868e:	2300      	movs	r3, #0
 8028690:	f7f2 ff62 	bl	801b558 <EwDetachObjObserver>
      (XObject)_this->Appearance, 0 );

  _this->Appearance = value;
 8028694:	6625      	str	r5, [r4, #96]	; 0x60

  if ( value != 0 )
 8028696:	b15d      	cbz	r5, 80286b0 <WidgetSetPushButton_OnSetAppearance+0x44>
    EwAttachObjObserver( EwNewSlot( _this, WidgetSetPushButton_onConfigChanged ), 
 8028698:	ae02      	add	r6, sp, #8
 802869a:	4a0d      	ldr	r2, [pc, #52]	; (80286d0 <WidgetSetPushButton_OnSetAppearance+0x64>)
 802869c:	4630      	mov	r0, r6
 802869e:	4621      	mov	r1, r4
 80286a0:	f7f2 fd98 	bl	801b1d4 <EwNewSlot>
 80286a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80286a8:	462a      	mov	r2, r5
 80286aa:	2300      	movs	r3, #0
 80286ac:	f7f2 fe22 	bl	801b2f4 <EwAttachObjObserver>
      (XObject)value, 0 );

  EwPostSignal( EwNewSlot( _this, WidgetSetPushButton_onConfigChanged ), ((XObject)_this ));
 80286b0:	ad04      	add	r5, sp, #16
 80286b2:	4628      	mov	r0, r5
 80286b4:	4621      	mov	r1, r4
 80286b6:	4a06      	ldr	r2, [pc, #24]	; (80286d0 <WidgetSetPushButton_OnSetAppearance+0x64>)
 80286b8:	f7f2 fd8c 	bl	801b1d4 <EwNewSlot>
 80286bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80286c0:	4622      	mov	r2, r4
}
 80286c2:	b006      	add	sp, #24
 80286c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EwPostSignal( EwNewSlot( _this, WidgetSetPushButton_onConfigChanged ), ((XObject)_this ));
 80286c8:	f7f2 bdb2 	b.w	801b230 <EwPostSignal>
 80286cc:	4770      	bx	lr
 80286ce:	bf00      	nop
 80286d0:	08027f01 	.word	0x08027f01

080286d4 <HardButtonIsrCallback>:
     from an interrupt handler or another task/thread/process.
  */

#endif

}
 80286d4:	4770      	bx	lr
 80286d6:	bf00      	nop

080286d8 <DeviceDriver_Initialize>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void DeviceDriver_Initialize( void )
{
 80286d8:	b508      	push	{r3, lr}
     You can implement here the necessary code to initialize your particular
     hardware, to open needed devices, to open communication channels, etc.
  */

  /* configure LED */
  EwBspInOutInitLed();
 80286da:	f002 f81b 	bl	802a714 <EwBspInOutInitLed>

  EwLockObject( DeviceObject );

#endif

}
 80286de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  EwBspInOutInitButton( HardButtonIsrCallback );
 80286e2:	4801      	ldr	r0, [pc, #4]	; (80286e8 <DeviceDriver_Initialize+0x10>)
 80286e4:	f001 bfea 	b.w	802a6bc <EwBspInOutInitButton>
 80286e8:	080286d5 	.word	0x080286d5

080286ec <DeviceDriver_Deinitialize>:

  DeviceObject = 0;

#endif

}
 80286ec:	4770      	bx	lr
 80286ee:	bf00      	nop

080286f0 <DeviceDriver_ProcessData>:
     system event was triggered. The return value is used by the main loop, to
     decide whether the GUI application has changed or not.
  */

  return needUpdate;
}
 80286f0:	2000      	movs	r0, #0
 80286f2:	4770      	bx	lr

080286f4 <EwInit>:
* RETURN VALUE:
*   1 if successful, 0 otherwise.
*
*******************************************************************************/
int EwInit( void )
{
 80286f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80286f6:	b08d      	sub	sp, #52	; 0x34
  /* initalize system clocks */
  EwBspClockInit();
 80286f8:	f001 f956 	bl	80299a8 <EwBspClockInit>

  /* set RTC, if current RTC time is before the minimum time */
  if ( EwBspClockGetTime() < RTC_MINIMUM_TIME )
 80286fc:	f001 f988 	bl	8029a10 <EwBspClockGetTime>
 8028700:	4b42      	ldr	r3, [pc, #264]	; (802880c <EwInit+0x118>)
 8028702:	4298      	cmp	r0, r3
 8028704:	d97e      	bls.n	8028804 <EwInit+0x110>
    EwBspClockSetTime( RTC_DEFAULT_TIME );

  /* initialize display */
  EwPrint( "Initialize Display...                        " );
  CHECK_HANDLE( EwBspDisplayInit( EwScreenSize.X, EwScreenSize.Y, &DisplayInfo ));
 8028706:	4c42      	ldr	r4, [pc, #264]	; (8028810 <EwInit+0x11c>)
  EwPrint( "Initialize Display...                        " );
 8028708:	4842      	ldr	r0, [pc, #264]	; (8028814 <EwInit+0x120>)
  CHECK_HANDLE( EwBspDisplayInit( EwScreenSize.X, EwScreenSize.Y, &DisplayInfo ));
 802870a:	4d43      	ldr	r5, [pc, #268]	; (8028818 <EwInit+0x124>)
  EwPrint( "Initialize Display...                        " );
 802870c:	f7ef fe92 	bl	8018434 <EwPrint>
  CHECK_HANDLE( EwBspDisplayInit( EwScreenSize.X, EwScreenSize.Y, &DisplayInfo ));
 8028710:	e9d4 6700 	ldrd	r6, r7, [r4]
 8028714:	462a      	mov	r2, r5
 8028716:	4630      	mov	r0, r6
 8028718:	4639      	mov	r1, r7
 802871a:	f001 fbcf 	bl	8029ebc <EwBspDisplayInit>
 802871e:	2800      	cmp	r0, #0
 8028720:	d06a      	beq.n	80287f8 <EwInit+0x104>
 8028722:	483e      	ldr	r0, [pc, #248]	; (802881c <EwInit+0x128>)
 8028724:	f7ef fe86 	bl	8018434 <EwPrint>

  /* initialize touchscreen */
  EwPrint( "Initialize Touch Driver...                   " );
 8028728:	483d      	ldr	r0, [pc, #244]	; (8028820 <EwInit+0x12c>)
 802872a:	f7ef fe83 	bl	8018434 <EwPrint>
  CHECK_HANDLE( EwBspTouchInit( EwScreenSize.X, EwScreenSize.Y, &DisplayInfo ));
 802872e:	462a      	mov	r2, r5
 8028730:	4639      	mov	r1, r7
 8028732:	4630      	mov	r0, r6
 8028734:	f002 f8de 	bl	802a8f4 <EwBspTouchInit>
 8028738:	2800      	cmp	r0, #0
 802873a:	d05d      	beq.n	80287f8 <EwInit+0x104>
 802873c:	4837      	ldr	r0, [pc, #220]	; (802881c <EwInit+0x128>)
 802873e:	f7ef fe79 	bl	8018434 <EwPrint>

  #if EW_MEMORY_POOL_SIZE > 0
    /* initialize heap manager */
    EwPrint( "Initialize Memory Manager...                 " );
 8028742:	4838      	ldr	r0, [pc, #224]	; (8028824 <EwInit+0x130>)
 8028744:	f7ef fe76 	bl	8018434 <EwPrint>
    EwInitHeap( 0 );
 8028748:	2000      	movs	r0, #0
 802874a:	f7f0 fae1 	bl	8018d10 <EwInitHeap>
    EwAddHeapMemoryPool( (void*)EW_MEMORY_POOL_ADDR, EW_MEMORY_POOL_SIZE );
 802874e:	4936      	ldr	r1, [pc, #216]	; (8028828 <EwInit+0x134>)
 8028750:	4836      	ldr	r0, [pc, #216]	; (802882c <EwInit+0x138>)
 8028752:	f7f0 faf9 	bl	8018d48 <EwAddHeapMemoryPool>

    #if EW_EXTRA_POOL_SIZE > 0
      EwAddHeapMemoryPool( (void*)EW_EXTRA_POOL_ADDR, EW_EXTRA_POOL_SIZE );
    #endif

    EwPrint( "[OK]\n" );
 8028756:	4831      	ldr	r0, [pc, #196]	; (802881c <EwInit+0x128>)
 8028758:	f7ef fe6c 	bl	8018434 <EwPrint>
  #endif

  /* initialize the Graphics Engine and Runtime Environment */
  EwPrint( "Initialize Graphics Engine...                " );
 802875c:	4834      	ldr	r0, [pc, #208]	; (8028830 <EwInit+0x13c>)
 802875e:	f7ef fe69 	bl	8018434 <EwPrint>
  CHECK_HANDLE( EwInitGraphicsEngine( 0 ));
 8028762:	2000      	movs	r0, #0
 8028764:	f7df fa4e 	bl	8007c04 <EwInitGraphicsEngine>
 8028768:	2800      	cmp	r0, #0
 802876a:	d045      	beq.n	80287f8 <EwInit+0x104>
 802876c:	482b      	ldr	r0, [pc, #172]	; (802881c <EwInit+0x128>)

  /* create the applications root object ... */
  EwPrint( "Create Embedded Wizard Root Object...        " );
  RootObject = (CoreRoot)EwNewObjectIndirect( EwApplicationClass, 0 );
 802876e:	4e31      	ldr	r6, [pc, #196]	; (8028834 <EwInit+0x140>)
  CHECK_HANDLE( EwInitGraphicsEngine( 0 ));
 8028770:	f7ef fe60 	bl	8018434 <EwPrint>
  EwPrint( "Create Embedded Wizard Root Object...        " );
 8028774:	4830      	ldr	r0, [pc, #192]	; (8028838 <EwInit+0x144>)
 8028776:	f7ef fe5d 	bl	8018434 <EwPrint>
  RootObject = (CoreRoot)EwNewObjectIndirect( EwApplicationClass, 0 );
 802877a:	4b30      	ldr	r3, [pc, #192]	; (802883c <EwInit+0x148>)
 802877c:	2100      	movs	r1, #0
 802877e:	6818      	ldr	r0, [r3, #0]
 8028780:	f7f0 ff68 	bl	8019654 <EwNewObjectIndirect>
 8028784:	6030      	str	r0, [r6, #0]
  CHECK_HANDLE( RootObject );
 8028786:	2800      	cmp	r0, #0
 8028788:	d036      	beq.n	80287f8 <EwInit+0x104>
 802878a:	4824      	ldr	r0, [pc, #144]	; (802881c <EwInit+0x128>)
 802878c:	f7ef fe52 	bl	8018434 <EwPrint>

  EwLockObject( RootObject );
 8028790:	6830      	ldr	r0, [r6, #0]
 8028792:	f7f1 f88e 	bl	80198b2 <EwLockObject>
  CoreRoot__Initialize( RootObject, EwScreenSize );
 8028796:	e894 0006 	ldmia.w	r4, {r1, r2}
 802879a:	6830      	ldr	r0, [r6, #0]
 802879c:	f7fa f94a 	bl	8022a34 <CoreRoot__Initialize>

  /* create Embedded Wizard viewport object to provide uniform access to the framebuffer */
  EwPrint( "Create Embedded Wizard Viewport...           " );
 80287a0:	4827      	ldr	r0, [pc, #156]	; (8028840 <EwInit+0x14c>)
 80287a2:	f7ef fe47 	bl	8018434 <EwPrint>
  Viewport = EwInitViewport( EwScreenSize, EwNewRect( 0, 0, DisplayInfo.BufferWidth, DisplayInfo.BufferHeight ),
 80287a6:	68eb      	ldr	r3, [r5, #12]
 80287a8:	9300      	str	r3, [sp, #0]
 80287aa:	2200      	movs	r2, #0
 80287ac:	af08      	add	r7, sp, #32
 80287ae:	68ab      	ldr	r3, [r5, #8]
 80287b0:	4611      	mov	r1, r2
 80287b2:	4638      	mov	r0, r7
 80287b4:	f7f1 fb8c 	bl	8019ed0 <EwNewRect>
 80287b8:	ab0c      	add	r3, sp, #48	; 0x30
 80287ba:	e913 0003 	ldmdb	r3, {r0, r1}
 80287be:	e9d5 ce00 	ldrd	ip, lr, [r5]
 80287c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80287c6:	2600      	movs	r6, #0
 80287c8:	9607      	str	r6, [sp, #28]
 80287ca:	25ff      	movs	r5, #255	; 0xff
 80287cc:	e897 000c 	ldmia.w	r7, {r2, r3}
 80287d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80287d4:	e9cd ce04 	strd	ip, lr, [sp, #16]
 80287d8:	9606      	str	r6, [sp, #24]
 80287da:	9602      	str	r6, [sp, #8]
 80287dc:	9503      	str	r5, [sp, #12]
 80287de:	f7df fc07 	bl	8007ff0 <EwInitViewport>
 80287e2:	4b18      	ldr	r3, [pc, #96]	; (8028844 <EwInit+0x150>)
 80287e4:	6018      	str	r0, [r3, #0]
    0, 255, DisplayInfo.FrameBuffer, DisplayInfo.DoubleBuffer, 0, 0 );
  CHECK_HANDLE( Viewport );
 80287e6:	b138      	cbz	r0, 80287f8 <EwInit+0x104>
 80287e8:	480c      	ldr	r0, [pc, #48]	; (802881c <EwInit+0x128>)
 80287ea:	f7ef fe23 	bl	8018434 <EwPrint>

  /* initialize your device driver(s) that provide data for your GUI */
  DeviceDriver_Initialize();
 80287ee:	f7ff ff73 	bl	80286d8 <DeviceDriver_Initialize>

  return 1;
 80287f2:	2001      	movs	r0, #1
}
 80287f4:	b00d      	add	sp, #52	; 0x34
 80287f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CHECK_HANDLE( EwBspDisplayInit( EwScreenSize.X, EwScreenSize.Y, &DisplayInfo ));
 80287f8:	4813      	ldr	r0, [pc, #76]	; (8028848 <EwInit+0x154>)
 80287fa:	f7ef fe1b 	bl	8018434 <EwPrint>
 80287fe:	2000      	movs	r0, #0
}
 8028800:	b00d      	add	sp, #52	; 0x34
 8028802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EwBspClockSetTime( RTC_DEFAULT_TIME );
 8028804:	4811      	ldr	r0, [pc, #68]	; (802884c <EwInit+0x158>)
 8028806:	f001 f943 	bl	8029a90 <EwBspClockSetTime>
 802880a:	e77c      	b.n	8028706 <EwInit+0x12>
 802880c:	3a4fc87f 	.word	0x3a4fc87f
 8028810:	08037a9c 	.word	0x08037a9c
 8028814:	08038bf0 	.word	0x08038bf0
 8028818:	20000378 	.word	0x20000378
 802881c:	08038c2c 	.word	0x08038c2c
 8028820:	08038c34 	.word	0x08038c34
 8028824:	08038c64 	.word	0x08038c64
 8028828:	00e89000 	.word	0x00e89000
 802882c:	c00bb800 	.word	0xc00bb800
 8028830:	08038c94 	.word	0x08038c94
 8028834:	20000398 	.word	0x20000398
 8028838:	08038cc4 	.word	0x08038cc4
 802883c:	08037a98 	.word	0x08037a98
 8028840:	08038cf4 	.word	0x08038cf4
 8028844:	2000039c 	.word	0x2000039c
 8028848:	08038c20 	.word	0x08038c20
 802884c:	608826f0 	.word	0x608826f0

08028850 <EwDone>:
* RETURN VALUE:
*   None.
*
*******************************************************************************/
void EwDone( void )
{
 8028850:	b570      	push	{r4, r5, r6, lr}
  /* deinitialize your device driver(s) */
  DeviceDriver_Deinitialize();

  /* destroy the applications root object and release unused resources and memory */
  EwPrint( "Shutting down Application...                 " );
  EwDoneViewport( Viewport );
 8028852:	4e16      	ldr	r6, [pc, #88]	; (80288ac <EwDone+0x5c>)
  EwUnlockObject( RootObject );
 8028854:	4d16      	ldr	r5, [pc, #88]	; (80288b0 <EwDone+0x60>)
  EwReclaimMemory();
  EwPrint( "[OK]\n" );
 8028856:	4c17      	ldr	r4, [pc, #92]	; (80288b4 <EwDone+0x64>)
  DeviceDriver_Deinitialize();
 8028858:	f7ff ff48 	bl	80286ec <DeviceDriver_Deinitialize>
  EwPrint( "Shutting down Application...                 " );
 802885c:	4816      	ldr	r0, [pc, #88]	; (80288b8 <EwDone+0x68>)
 802885e:	f7ef fde9 	bl	8018434 <EwPrint>
  EwDoneViewport( Viewport );
 8028862:	6830      	ldr	r0, [r6, #0]
 8028864:	f7e3 f8ca 	bl	800b9fc <EwDoneViewport>
  EwUnlockObject( RootObject );
 8028868:	6828      	ldr	r0, [r5, #0]
 802886a:	f7f1 f84b 	bl	8019904 <EwUnlockObject>
  EwReclaimMemory();
 802886e:	f7f1 f873 	bl	8019958 <EwReclaimMemory>
  EwPrint( "[OK]\n" );
 8028872:	4620      	mov	r0, r4
 8028874:	f7ef fdde 	bl	8018434 <EwPrint>

  /* deinitialize the Graphics Engine */
  EwPrint( "Deinitialize Graphics Engine...              " );
 8028878:	4810      	ldr	r0, [pc, #64]	; (80288bc <EwDone+0x6c>)
 802887a:	f7ef fddb 	bl	8018434 <EwPrint>
  EwDoneGraphicsEngine();
 802887e:	f7de fff5 	bl	800786c <EwDoneGraphicsEngine>
  EwPrint( "[OK]\n" );
 8028882:	4620      	mov	r0, r4
 8028884:	f7ef fdd6 	bl	8018434 <EwPrint>

  #if EW_MEMORY_POOL_SIZE > 0
    /* deinitialize heap manager */
    EwDoneHeap();
 8028888:	f7f0 fa52 	bl	8018d30 <EwDoneHeap>
  #endif

  EwPrint( "Deinitialize Touch Driver...                 " );
 802888c:	480c      	ldr	r0, [pc, #48]	; (80288c0 <EwDone+0x70>)
 802888e:	f7ef fdd1 	bl	8018434 <EwPrint>
  EwBspTouchDone();
 8028892:	f002 f881 	bl	802a998 <EwBspTouchDone>
  EwPrint( "[OK]\n" );
 8028896:	4620      	mov	r0, r4
 8028898:	f7ef fdcc 	bl	8018434 <EwPrint>

  /* deinitialize display */
  EwBspDisplayDone( &DisplayInfo );
 802889c:	4809      	ldr	r0, [pc, #36]	; (80288c4 <EwDone+0x74>)
 802889e:	f001 fc5d 	bl	802a15c <EwBspDisplayDone>

  Viewport   = 0;
 80288a2:	2300      	movs	r3, #0
 80288a4:	6033      	str	r3, [r6, #0]
  RootObject = 0;
 80288a6:	602b      	str	r3, [r5, #0]
}
 80288a8:	bd70      	pop	{r4, r5, r6, pc}
 80288aa:	bf00      	nop
 80288ac:	2000039c 	.word	0x2000039c
 80288b0:	20000398 	.word	0x20000398
 80288b4:	08038c2c 	.word	0x08038c2c
 80288b8:	08038d24 	.word	0x08038d24
 80288bc:	08038d54 	.word	0x08038d54
 80288c0:	08038d84 	.word	0x08038d84
 80288c4:	20000378 	.word	0x20000378

080288c8 <EwProcess>:
* RETURN VALUE:
*   1, if further processing is needed, 0 otherwise.
*
*******************************************************************************/
int EwProcess( void )
{
 80288c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80288cc:	b08e      	sub	sp, #56	; 0x38
  int          finger;
  XPoint       touchPos;

  /* process data of your device driver(s) and update the GUI
     application by setting properties or by triggering events */
  devices = DeviceDriver_ProcessData();
 80288ce:	f7ff ff0f 	bl	80286f0 <DeviceDriver_ProcessData>
 80288d2:	4607      	mov	r7, r0
    events |= CoreRoot__DriveKeyboardHitting( RootObject, cmd, 0, 1 );
    events |= CoreRoot__DriveKeyboardHitting( RootObject, cmd, 0, 0 );
  }

  /* receive (multi-) touch inputs and provide it to the application */
  noOfTouch = EwBspTouchGetEvents( &touchEvent );
 80288d4:	a807      	add	r0, sp, #28
 80288d6:	f002 f861 	bl	802a99c <EwBspTouchGetEvents>

  if ( noOfTouch > 0 )
 80288da:	1e06      	subs	r6, r0, #0
 80288dc:	dd53      	ble.n	8028986 <EwProcess+0xbe>
  {
    for ( touch = 0; touch < noOfTouch; touch++ )
 80288de:	2400      	movs	r4, #0
      else if ( touchEvent[ touch ].State == EW_BSP_TOUCH_MOVE )
        events |= CoreRoot__DriveMultiTouchMovement( RootObject, finger, touchPos );

      /* end of touch cycle */
      else if ( touchEvent[ touch ].State == EW_BSP_TOUCH_UP )
        events |= CoreRoot__DriveMultiTouchHitting(  RootObject, 0, finger, touchPos );
 80288e0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8028a80 <EwProcess+0x1b8>
 80288e4:	4625      	mov	r5, r4
        events |= CoreRoot__DriveMultiTouchMovement( RootObject, finger, touchPos );
 80288e6:	f10d 0920 	add.w	r9, sp, #32
 80288ea:	e006      	b.n	80288fa <EwProcess+0x32>
      else if ( touchEvent[ touch ].State == EW_BSP_TOUCH_MOVE )
 80288ec:	2902      	cmp	r1, #2
 80288ee:	d039      	beq.n	8028964 <EwProcess+0x9c>
      else if ( touchEvent[ touch ].State == EW_BSP_TOUCH_UP )
 80288f0:	2903      	cmp	r1, #3
 80288f2:	d040      	beq.n	8028976 <EwProcess+0xae>
    for ( touch = 0; touch < noOfTouch; touch++ )
 80288f4:	3401      	adds	r4, #1
 80288f6:	42a6      	cmp	r6, r4
 80288f8:	d015      	beq.n	8028926 <EwProcess+0x5e>
      finger     = touchEvent[ touch ].Finger;
 80288fa:	9807      	ldr	r0, [sp, #28]
 80288fc:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 8028900:	0123      	lsls	r3, r4, #4
      if ( touchEvent[ touch ].State == EW_BSP_TOUCH_DOWN )
 8028902:	68d1      	ldr	r1, [r2, #12]
      touchPos.X = touchEvent[ touch ].XPos;
 8028904:	58c3      	ldr	r3, [r0, r3]
      touchPos.Y = touchEvent[ touch ].YPos;
 8028906:	6850      	ldr	r0, [r2, #4]
      finger     = touchEvent[ touch ].Finger;
 8028908:	6892      	ldr	r2, [r2, #8]
      if ( touchEvent[ touch ].State == EW_BSP_TOUCH_DOWN )
 802890a:	2901      	cmp	r1, #1
      touchPos.Y = touchEvent[ touch ].YPos;
 802890c:	e9cd 3008 	strd	r3, r0, [sp, #32]
      if ( touchEvent[ touch ].State == EW_BSP_TOUCH_DOWN )
 8028910:	d1ec      	bne.n	80288ec <EwProcess+0x24>
        events |= CoreRoot__DriveMultiTouchHitting(  RootObject, 1, finger, touchPos );
 8028912:	9000      	str	r0, [sp, #0]
 8028914:	f8d8 0000 	ldr.w	r0, [r8]
 8028918:	f7fc f9f0 	bl	8024cfc <CoreRoot__DriveMultiTouchHitting>
    for ( touch = 0; touch < noOfTouch; touch++ )
 802891c:	3401      	adds	r4, #1
 802891e:	42a6      	cmp	r6, r4
        events |= CoreRoot__DriveMultiTouchHitting(  RootObject, 1, finger, touchPos );
 8028920:	ea45 0500 	orr.w	r5, r5, r0
    for ( touch = 0; touch < noOfTouch; touch++ )
 8028924:	d1e9      	bne.n	80288fa <EwProcess+0x32>
    }
  }

  /* process expired timers */
  timers = EwProcessTimers();
 8028926:	f7f4 fc43 	bl	801d1b0 <EwProcessTimers>
 802892a:	4604      	mov	r4, r0

  /* process the pending signals */
  signals = EwProcessSignals();
 802892c:	f7f2 fcac 	bl	801b288 <EwProcessSignals>

  /* refresh the screen, if something has changed and draw its content */
  if ( devices || timers || signals || events )
 8028930:	4325      	orrs	r5, r4
 8028932:	432f      	orrs	r7, r5
 8028934:	ea57 0300 	orrs.w	r3, r7, r0
 8028938:	d107      	bne.n	802894a <EwProcess+0x82>
    #endif
  }
  else
  {
    /* otherwise sleep/suspend the UI application until a certain event occurs or a timer expires... */
    EwBspEventWait( EwNextTimerExpiration());
 802893a:	f7f4 fc83 	bl	801d244 <EwNextTimerExpiration>
 802893e:	f001 fc81 	bl	802a244 <EwBspEventWait>
  }

  return 1;
}
 8028942:	2001      	movs	r0, #1
 8028944:	b00e      	add	sp, #56	; 0x38
 8028946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( CoreRoot__DoesNeedUpdate( RootObject ))
 802894a:	4c4d      	ldr	r4, [pc, #308]	; (8028a80 <EwProcess+0x1b8>)
 802894c:	6820      	ldr	r0, [r4, #0]
 802894e:	f7fa f831 	bl	80229b4 <CoreRoot__DoesNeedUpdate>
 8028952:	b9d0      	cbnz	r0, 802898a <EwProcess+0xc2>
    EwVerifyHeap();
 8028954:	f7f0 fb3a 	bl	8018fcc <EwVerifyHeap>
    EwReclaimMemory();
 8028958:	f7f0 fffe 	bl	8019958 <EwReclaimMemory>
}
 802895c:	2001      	movs	r0, #1
 802895e:	b00e      	add	sp, #56	; 0x38
 8028960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        events |= CoreRoot__DriveMultiTouchMovement( RootObject, finger, touchPos );
 8028964:	4611      	mov	r1, r2
 8028966:	f8d8 0000 	ldr.w	r0, [r8]
 802896a:	e899 000c 	ldmia.w	r9, {r2, r3}
 802896e:	f7fa f9d7 	bl	8022d20 <CoreRoot__DriveMultiTouchMovement>
 8028972:	4305      	orrs	r5, r0
 8028974:	e7be      	b.n	80288f4 <EwProcess+0x2c>
        events |= CoreRoot__DriveMultiTouchHitting(  RootObject, 0, finger, touchPos );
 8028976:	9000      	str	r0, [sp, #0]
 8028978:	f8d8 0000 	ldr.w	r0, [r8]
 802897c:	2100      	movs	r1, #0
 802897e:	f7fc f9bd 	bl	8024cfc <CoreRoot__DriveMultiTouchHitting>
 8028982:	4305      	orrs	r5, r0
 8028984:	e7b6      	b.n	80288f4 <EwProcess+0x2c>
 8028986:	2500      	movs	r5, #0
 8028988:	e7cd      	b.n	8028926 <EwProcess+0x5e>
      EwUpdate( Viewport, RootObject );
 802898a:	4b3e      	ldr	r3, [pc, #248]	; (8028a84 <EwProcess+0x1bc>)
*
*******************************************************************************/
static void EwUpdate( XViewport* aViewport, CoreRoot aApplication )
{
  XBitmap*       bitmap;
  GraphicsCanvas canvas     = EwNewObject( GraphicsCanvas, 0 );
 802898c:	483e      	ldr	r0, [pc, #248]	; (8028a88 <EwProcess+0x1c0>)
      EwUpdate( Viewport, RootObject );
 802898e:	f8d4 8000 	ldr.w	r8, [r4]
 8028992:	681e      	ldr	r6, [r3, #0]
  GraphicsCanvas canvas     = EwNewObject( GraphicsCanvas, 0 );
 8028994:	2100      	movs	r1, #0
 8028996:	f7f0 fe5d 	bl	8019654 <EwNewObjectIndirect>
  XRect          updateRect = {{ 0, 0 }, { 0, 0 }};
 802899a:	ac0a      	add	r4, sp, #40	; 0x28
 802899c:	2300      	movs	r3, #0
 802899e:	e9c4 3302 	strd	r3, r3, [r4, #8]

  if ( !canvas )
 80289a2:	4605      	mov	r5, r0
  XRect          updateRect = {{ 0, 0 }, { 0, 0 }};
 80289a4:	6063      	str	r3, [r4, #4]
 80289a6:	930a      	str	r3, [sp, #40]	; 0x28
  if ( !canvas )
 80289a8:	2800      	cmp	r0, #0
 80289aa:	d0d3      	beq.n	8028954 <EwProcess+0x8c>
    return;

  if ( DisplayInfo.UpdateMode == EW_BSP_DISPLAY_UPDATE_NORMAL )
 80289ac:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8028a8c <EwProcess+0x1c4>
 80289b0:	f8da 3018 	ldr.w	r3, [sl, #24]
 80289b4:	2b00      	cmp	r3, #0
 80289b6:	d03a      	beq.n	8028a2e <EwProcess+0x166>
      EwEndUpdate( aViewport, updateRect );
    }
  }
  else
  {
    int regions = CoreRoot__BeginUpdate( aApplication );
 80289b8:	4640      	mov	r0, r8
 80289ba:	f7f9 fff9 	bl	80229b0 <CoreRoot__BeginUpdate>

    while ( regions-- )
    {
      /* get rectangular area of the update region for scratch-pad buffer */
      if ( DisplayInfo.UpdateMode == EW_BSP_DISPLAY_UPDATE_SCRATCHPAD )
        updateRect = CoreRoot__GetUpdateRegion( aApplication, regions );
 80289be:	af02      	add	r7, sp, #8
 80289c0:	f100 39ff 	add.w	r9, r0, #4294967295
    while ( regions-- )
 80289c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80289c8:	d02d      	beq.n	8028a26 <EwProcess+0x15e>
      if ( DisplayInfo.UpdateMode == EW_BSP_DISPLAY_UPDATE_SCRATCHPAD )
 80289ca:	f8da 3018 	ldr.w	r3, [sl, #24]
 80289ce:	2b02      	cmp	r3, #2
 80289d0:	d11c      	bne.n	8028a0c <EwProcess+0x144>
 80289d2:	e04a      	b.n	8028a6a <EwProcess+0x1a2>

      /* iterate through all update areas */
      while ( EwBspDisplayGetUpdateArea( &updateRect ))
      {
        /* update the current subarea */
        bitmap = EwBeginUpdateArea( aViewport, updateRect );
 80289d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80289d6:	9300      	str	r3, [sp, #0]
 80289d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80289dc:	f7df fbf4 	bl	80081c8 <EwBeginUpdateArea>
 80289e0:	4601      	mov	r1, r0
        GraphicsCanvas__AttachBitmap( canvas, (XHandle)bitmap );
 80289e2:	4628      	mov	r0, r5
 80289e4:	f7fc fd10 	bl	8025408 <GraphicsCanvas__AttachBitmap>
        CoreRoot__UpdateCanvas( aApplication, canvas, updateRect.Point1 );
 80289e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80289ea:	9300      	str	r3, [sp, #0]
 80289ec:	462a      	mov	r2, r5
 80289ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289f0:	4641      	mov	r1, r8
 80289f2:	4638      	mov	r0, r7
 80289f4:	f7f9 fdfa 	bl	80225ec <CoreRoot__UpdateCanvas>
        GraphicsCanvas__DetachBitmap( canvas );
 80289f8:	4628      	mov	r0, r5
 80289fa:	f7fc fcc9 	bl	8025390 <GraphicsCanvas__DetachBitmap>
        EwEndUpdate( aViewport, updateRect );
 80289fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028a00:	9300      	str	r3, [sp, #0]
 8028a02:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8028a06:	4630      	mov	r0, r6
 8028a08:	f7e2 fe60 	bl	800b6cc <EwEndUpdate>
      while ( EwBspDisplayGetUpdateArea( &updateRect ))
 8028a0c:	4620      	mov	r0, r4
 8028a0e:	f001 fba7 	bl	802a160 <EwBspDisplayGetUpdateArea>
 8028a12:	4603      	mov	r3, r0
        bitmap = EwBeginUpdateArea( aViewport, updateRect );
 8028a14:	4630      	mov	r0, r6
      while ( EwBspDisplayGetUpdateArea( &updateRect ))
 8028a16:	2b00      	cmp	r3, #0
 8028a18:	d1dc      	bne.n	80289d4 <EwProcess+0x10c>
      }

      if ( DisplayInfo.UpdateMode != EW_BSP_DISPLAY_UPDATE_SCRATCHPAD )
 8028a1a:	f8da 3018 	ldr.w	r3, [sl, #24]
 8028a1e:	2b02      	cmp	r3, #2
 8028a20:	f109 39ff 	add.w	r9, r9, #4294967295
 8028a24:	d0ce      	beq.n	80289c4 <EwProcess+0xfc>
        break;
    }
    CoreRoot__EndUpdate( aApplication );
 8028a26:	4640      	mov	r0, r8
 8028a28:	f7f9 fd1e 	bl	8022468 <CoreRoot__EndUpdate>
 8028a2c:	e792      	b.n	8028954 <EwProcess+0x8c>
    bitmap = EwBeginUpdate( aViewport );
 8028a2e:	4630      	mov	r0, r6
 8028a30:	f7df fb7c 	bl	800812c <EwBeginUpdate>
    if ( bitmap  )
 8028a34:	4601      	mov	r1, r0
 8028a36:	2800      	cmp	r0, #0
 8028a38:	d08c      	beq.n	8028954 <EwProcess+0x8c>
      updateRect = CoreRoot__UpdateGE20( aApplication, canvas );
 8028a3a:	af02      	add	r7, sp, #8
      GraphicsCanvas__AttachBitmap( canvas, (XHandle)bitmap );
 8028a3c:	4628      	mov	r0, r5
 8028a3e:	f7fc fce3 	bl	8025408 <GraphicsCanvas__AttachBitmap>
      updateRect = CoreRoot__UpdateGE20( aApplication, canvas );
 8028a42:	4641      	mov	r1, r8
 8028a44:	4638      	mov	r0, r7
 8028a46:	462a      	mov	r2, r5
 8028a48:	f7f9 ffac 	bl	80229a4 <CoreRoot__UpdateGE20>
 8028a4c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8028a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      GraphicsCanvas__DetachBitmap( canvas );
 8028a54:	4628      	mov	r0, r5
 8028a56:	f7fc fc9b 	bl	8025390 <GraphicsCanvas__DetachBitmap>
      EwEndUpdate( aViewport, updateRect );
 8028a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028a5c:	9300      	str	r3, [sp, #0]
 8028a5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8028a62:	4630      	mov	r0, r6
 8028a64:	f7e2 fe32 	bl	800b6cc <EwEndUpdate>
 8028a68:	e774      	b.n	8028954 <EwProcess+0x8c>
        updateRect = CoreRoot__GetUpdateRegion( aApplication, regions );
 8028a6a:	464a      	mov	r2, r9
 8028a6c:	4641      	mov	r1, r8
 8028a6e:	4638      	mov	r0, r7
 8028a70:	f7f9 fdf4 	bl	802265c <CoreRoot__GetUpdateRegion>
 8028a74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8028a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8028a7c:	e7c6      	b.n	8028a0c <EwProcess+0x144>
 8028a7e:	bf00      	nop
 8028a80:	20000398 	.word	0x20000398
 8028a84:	2000039c 	.word	0x2000039c
 8028a88:	08038518 	.word	0x08038518
 8028a8c:	20000378 	.word	0x20000378

08028a90 <EwPrintSystemInfo>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwPrintSystemInfo( void )
{
 8028a90:	b570      	push	{r4, r5, r6, lr}
  EwPrint( "---------------------------------------------\n" );
 8028a92:	4e4f      	ldr	r6, [pc, #316]	; (8028bd0 <EwPrintSystemInfo+0x140>)
  #endif
  #if EW_USE_SCRATCHPAD_BUFFER == 1
  EwPrint( "Scratch-pad buffer address                   0x%08X  \n", DisplayInfo.FrameBuffer );
  EwPrint( "Scratch-pad buffer size                      %u pixel\n", DisplayInfo.BufferWidth * DisplayInfo.BufferHeight );
  #else
  EwPrint( "Framebuffer address                          0x%08X  \n", DisplayInfo.FrameBuffer );
 8028a94:	4d4f      	ldr	r5, [pc, #316]	; (8028bd4 <EwPrintSystemInfo+0x144>)
  #endif
  EwPrint( "Display size                                 %u x %u \n", DisplayInfo.DisplayWidth, DisplayInfo.DisplayHeight );
  EwPrint( "Framebuffer size                             %u x %u \n", DisplayInfo.BufferWidth, DisplayInfo.BufferHeight );
  EwPrint( "EwScreenSize                                 %d x %d \n", EwScreenSize.X, EwScreenSize.Y );
  EwPrint( "Graphics accelerator                         %s      \n", GRAPHICS_ACCELERATOR_STRING );
  EwPrint( "Warp function support                        %s      \n", WARP_FUNCTION_SUPPORT_STRING );
 8028a96:	4c50      	ldr	r4, [pc, #320]	; (8028bd8 <EwPrintSystemInfo+0x148>)
  EwPrint( "---------------------------------------------\n" );
 8028a98:	4630      	mov	r0, r6
 8028a9a:	f7ef fccb 	bl	8018434 <EwPrint>
  EwPrint( "Target system                                %s      \n", EW_PLATFORM_STRING );
 8028a9e:	494f      	ldr	r1, [pc, #316]	; (8028bdc <EwPrintSystemInfo+0x14c>)
 8028aa0:	484f      	ldr	r0, [pc, #316]	; (8028be0 <EwPrintSystemInfo+0x150>)
 8028aa2:	f7ef fcc7 	bl	8018434 <EwPrint>
  EwPrint( "Color format                                 %s      \n", EW_FRAME_BUFFER_COLOR_FORMAT_STRING );
 8028aa6:	494f      	ldr	r1, [pc, #316]	; (8028be4 <EwPrintSystemInfo+0x154>)
 8028aa8:	484f      	ldr	r0, [pc, #316]	; (8028be8 <EwPrintSystemInfo+0x158>)
 8028aaa:	f7ef fcc3 	bl	8018434 <EwPrint>
  EwPrint( "MemoryPool address                           0x%08X  \n", EW_MEMORY_POOL_ADDR );
 8028aae:	494f      	ldr	r1, [pc, #316]	; (8028bec <EwPrintSystemInfo+0x15c>)
 8028ab0:	484f      	ldr	r0, [pc, #316]	; (8028bf0 <EwPrintSystemInfo+0x160>)
 8028ab2:	f7ef fcbf 	bl	8018434 <EwPrint>
  EwPrint( "MemoryPool size                              %u bytes\n", EW_MEMORY_POOL_SIZE );
 8028ab6:	494f      	ldr	r1, [pc, #316]	; (8028bf4 <EwPrintSystemInfo+0x164>)
 8028ab8:	484f      	ldr	r0, [pc, #316]	; (8028bf8 <EwPrintSystemInfo+0x168>)
 8028aba:	f7ef fcbb 	bl	8018434 <EwPrint>
  EwPrint( "Framebuffer address                          0x%08X  \n", DisplayInfo.FrameBuffer );
 8028abe:	6829      	ldr	r1, [r5, #0]
 8028ac0:	484e      	ldr	r0, [pc, #312]	; (8028bfc <EwPrintSystemInfo+0x16c>)
 8028ac2:	f7ef fcb7 	bl	8018434 <EwPrint>
  EwPrint( "Doublebuffer address                         0x%08X  \n", DisplayInfo.DoubleBuffer );
 8028ac6:	6869      	ldr	r1, [r5, #4]
 8028ac8:	484d      	ldr	r0, [pc, #308]	; (8028c00 <EwPrintSystemInfo+0x170>)
 8028aca:	f7ef fcb3 	bl	8018434 <EwPrint>
  EwPrint( "Display size                                 %u x %u \n", DisplayInfo.DisplayWidth, DisplayInfo.DisplayHeight );
 8028ace:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
 8028ad2:	484c      	ldr	r0, [pc, #304]	; (8028c04 <EwPrintSystemInfo+0x174>)
 8028ad4:	f7ef fcae 	bl	8018434 <EwPrint>
  EwPrint( "Framebuffer size                             %u x %u \n", DisplayInfo.BufferWidth, DisplayInfo.BufferHeight );
 8028ad8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8028adc:	484a      	ldr	r0, [pc, #296]	; (8028c08 <EwPrintSystemInfo+0x178>)
  EwPrint( "Native bitmap resource format                %s      \n", NATIVE_SURFACE_SUPPORT_STRING );
  EwPrint( "Native destination bitmap support            %s      \n", NATIVE_DESTINATION_SURFACE_SUPPORT_STRING );
  EwPrint( "Operating system                             %s      \n", OPERATING_SYSTEM_STRING );
  EwPrint( "External Flash memory                        %s      \n", EXTERNAL_FLASH_STRING );
  #ifdef EW_BITMAP_PIXEL_SECTION_NAME
  EwPrint( "Linker section for bitmap pixel              %s      \n", EW_STRINGIZE( EW_BITMAP_PIXEL_SECTION_NAME ));
 8028ade:	4d4b      	ldr	r5, [pc, #300]	; (8028c0c <EwPrintSystemInfo+0x17c>)
  EwPrint( "Framebuffer size                             %u x %u \n", DisplayInfo.BufferWidth, DisplayInfo.BufferHeight );
 8028ae0:	f7ef fca8 	bl	8018434 <EwPrint>
  EwPrint( "EwScreenSize                                 %d x %d \n", EwScreenSize.X, EwScreenSize.Y );
 8028ae4:	4b4a      	ldr	r3, [pc, #296]	; (8028c10 <EwPrintSystemInfo+0x180>)
 8028ae6:	484b      	ldr	r0, [pc, #300]	; (8028c14 <EwPrintSystemInfo+0x184>)
 8028ae8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8028aec:	f7ef fca2 	bl	8018434 <EwPrint>
  EwPrint( "Graphics accelerator                         %s      \n", GRAPHICS_ACCELERATOR_STRING );
 8028af0:	4949      	ldr	r1, [pc, #292]	; (8028c18 <EwPrintSystemInfo+0x188>)
 8028af2:	484a      	ldr	r0, [pc, #296]	; (8028c1c <EwPrintSystemInfo+0x18c>)
 8028af4:	f7ef fc9e 	bl	8018434 <EwPrint>
  EwPrint( "Warp function support                        %s      \n", WARP_FUNCTION_SUPPORT_STRING );
 8028af8:	4621      	mov	r1, r4
 8028afa:	4849      	ldr	r0, [pc, #292]	; (8028c20 <EwPrintSystemInfo+0x190>)
 8028afc:	f7ef fc9a 	bl	8018434 <EwPrint>
  EwPrint( "Vector graphics support                      %s      \n", VECTOR_GRAPHICS_SUPPORT_STRING );
 8028b00:	4621      	mov	r1, r4
 8028b02:	4848      	ldr	r0, [pc, #288]	; (8028c24 <EwPrintSystemInfo+0x194>)
 8028b04:	f7ef fc96 	bl	8018434 <EwPrint>
  EwPrint( "Bidirectional text support                   %s      \n", BIDI_TEXT_SUPPORT_STRING );
 8028b08:	4621      	mov	r1, r4
 8028b0a:	4847      	ldr	r0, [pc, #284]	; (8028c28 <EwPrintSystemInfo+0x198>)
 8028b0c:	f7ef fc92 	bl	8018434 <EwPrint>
  EwPrint( "Gradients support                            %s      \n", GRADIENTS_SUPPORT_STRING );
 8028b10:	4621      	mov	r1, r4
 8028b12:	4846      	ldr	r0, [pc, #280]	; (8028c2c <EwPrintSystemInfo+0x19c>)
 8028b14:	f7ef fc8e 	bl	8018434 <EwPrint>
  EwPrint( "Compression support                          %s      \n", COMPRESSION_SUPPORT_STRING );
 8028b18:	4621      	mov	r1, r4
 8028b1a:	4845      	ldr	r0, [pc, #276]	; (8028c30 <EwPrintSystemInfo+0x1a0>)
 8028b1c:	f7ef fc8a 	bl	8018434 <EwPrint>
  EwPrint( "Index8 bitmap resource format                %s      \n", INDEX8_SURFACE_SUPPORT_STRING );
 8028b20:	4621      	mov	r1, r4
 8028b22:	4844      	ldr	r0, [pc, #272]	; (8028c34 <EwPrintSystemInfo+0x1a4>)
 8028b24:	f7ef fc86 	bl	8018434 <EwPrint>
  EwPrint( "RGB565 bitmap resource format                %s      \n", RGB565_SURFACE_SUPPORT_STRING );
 8028b28:	4621      	mov	r1, r4
 8028b2a:	4843      	ldr	r0, [pc, #268]	; (8028c38 <EwPrintSystemInfo+0x1a8>)
 8028b2c:	f7ef fc82 	bl	8018434 <EwPrint>
  EwPrint( "Native bitmap resource format                %s      \n", NATIVE_SURFACE_SUPPORT_STRING );
 8028b30:	4621      	mov	r1, r4
 8028b32:	4842      	ldr	r0, [pc, #264]	; (8028c3c <EwPrintSystemInfo+0x1ac>)
 8028b34:	f7ef fc7e 	bl	8018434 <EwPrint>
  EwPrint( "Native destination bitmap support            %s      \n", NATIVE_DESTINATION_SURFACE_SUPPORT_STRING );
 8028b38:	4621      	mov	r1, r4
 8028b3a:	4841      	ldr	r0, [pc, #260]	; (8028c40 <EwPrintSystemInfo+0x1b0>)
 8028b3c:	f7ef fc7a 	bl	8018434 <EwPrint>
  EwPrint( "Operating system                             %s      \n", OPERATING_SYSTEM_STRING );
 8028b40:	4940      	ldr	r1, [pc, #256]	; (8028c44 <EwPrintSystemInfo+0x1b4>)
 8028b42:	4841      	ldr	r0, [pc, #260]	; (8028c48 <EwPrintSystemInfo+0x1b8>)
 8028b44:	f7ef fc76 	bl	8018434 <EwPrint>
  EwPrint( "External Flash memory                        %s      \n", EXTERNAL_FLASH_STRING );
 8028b48:	4940      	ldr	r1, [pc, #256]	; (8028c4c <EwPrintSystemInfo+0x1bc>)
 8028b4a:	4841      	ldr	r0, [pc, #260]	; (8028c50 <EwPrintSystemInfo+0x1c0>)
 8028b4c:	f7ef fc72 	bl	8018434 <EwPrint>
  EwPrint( "Linker section for bitmap pixel              %s      \n", EW_STRINGIZE( EW_BITMAP_PIXEL_SECTION_NAME ));
 8028b50:	4629      	mov	r1, r5
 8028b52:	4840      	ldr	r0, [pc, #256]	; (8028c54 <EwPrintSystemInfo+0x1c4>)
 8028b54:	f7ef fc6e 	bl	8018434 <EwPrint>
  #endif
  #ifdef EW_FONT_PIXEL_SECTION_NAME
  EwPrint( "Linker section for font pixel                %s      \n", EW_STRINGIZE( EW_FONT_PIXEL_SECTION_NAME ));
 8028b58:	4629      	mov	r1, r5
 8028b5a:	483f      	ldr	r0, [pc, #252]	; (8028c58 <EwPrintSystemInfo+0x1c8>)
 8028b5c:	f7ef fc6a 	bl	8018434 <EwPrint>
  #endif
  #ifdef EW_FONT_DATA_SECTION_NAME
  EwPrint( "Linker section for font metrics              %s      \n", EW_STRINGIZE( EW_FONT_DATA_SECTION_NAME ));
 8028b60:	4629      	mov	r1, r5
 8028b62:	483e      	ldr	r0, [pc, #248]	; (8028c5c <EwPrintSystemInfo+0x1cc>)
 8028b64:	f7ef fc66 	bl	8018434 <EwPrint>
  #endif
  #ifdef EW_CONST_STRING_SECTION_NAME
  EwPrint( "Linker section for string constants          %s      \n", EW_STRINGIZE( EW_CONST_STRING_SECTION_NAME ));
 8028b68:	4629      	mov	r1, r5
 8028b6a:	483d      	ldr	r0, [pc, #244]	; (8028c60 <EwPrintSystemInfo+0x1d0>)
 8028b6c:	f7ef fc62 	bl	8018434 <EwPrint>
  #endif
  EwPrint( "Toolchain                                    %s      \n", TOOLCHAIN_STRING );
 8028b70:	493c      	ldr	r1, [pc, #240]	; (8028c64 <EwPrintSystemInfo+0x1d4>)
 8028b72:	483d      	ldr	r0, [pc, #244]	; (8028c68 <EwPrintSystemInfo+0x1d8>)
 8028b74:	f7ef fc5e 	bl	8018434 <EwPrint>
  #ifdef COMPILER_VERSION_STRING
  EwPrint( "C-Compiler version                           %s      \n", COMPILER_VERSION_STRING );
 8028b78:	493c      	ldr	r1, [pc, #240]	; (8028c6c <EwPrintSystemInfo+0x1dc>)
 8028b7a:	483d      	ldr	r0, [pc, #244]	; (8028c70 <EwPrintSystemInfo+0x1e0>)
 8028b7c:	f7ef fc5a 	bl	8018434 <EwPrint>
  #endif
  EwPrint( "Build date and time                          %s, %s  \n", __DATE__, __TIME__ );
 8028b80:	4a3c      	ldr	r2, [pc, #240]	; (8028c74 <EwPrintSystemInfo+0x1e4>)
 8028b82:	493d      	ldr	r1, [pc, #244]	; (8028c78 <EwPrintSystemInfo+0x1e8>)
 8028b84:	483d      	ldr	r0, [pc, #244]	; (8028c7c <EwPrintSystemInfo+0x1ec>)
 8028b86:	f7ef fc55 	bl	8018434 <EwPrint>
  EwPrint( "Runtime Environment (RTE) version            %u.%02u \n", EW_RTE_VERSION >> 16, EW_RTE_VERSION & 0xFF );
 8028b8a:	483d      	ldr	r0, [pc, #244]	; (8028c80 <EwPrintSystemInfo+0x1f0>)
 8028b8c:	2200      	movs	r2, #0
 8028b8e:	210b      	movs	r1, #11
 8028b90:	f7ef fc50 	bl	8018434 <EwPrint>
  EwPrint( "Graphics Engine (GFX) version                %u.%02u \n", EW_GFX_VERSION >> 16, EW_GFX_VERSION & 0xFF );
 8028b94:	2200      	movs	r2, #0
 8028b96:	483b      	ldr	r0, [pc, #236]	; (8028c84 <EwPrintSystemInfo+0x1f4>)
 8028b98:	210b      	movs	r1, #11
 8028b9a:	f7ef fc4b 	bl	8018434 <EwPrint>
  EwPrint( "Max surface cache size                       %u bytes\n", EW_MAX_SURFACE_CACHE_SIZE );
 8028b9e:	483a      	ldr	r0, [pc, #232]	; (8028c88 <EwPrintSystemInfo+0x1f8>)
 8028ba0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8028ba4:	f7ef fc46 	bl	8018434 <EwPrint>
  EwPrint( "Glyph cache size                             %u x %u \n", EW_MAX_GLYPH_SURFACE_WIDTH, EW_MAX_GLYPH_SURFACE_HEIGHT );
 8028ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8028bac:	4611      	mov	r1, r2
 8028bae:	4837      	ldr	r0, [pc, #220]	; (8028c8c <EwPrintSystemInfo+0x1fc>)
 8028bb0:	f7ef fc40 	bl	8018434 <EwPrint>
  EwPrint( "Max issue tasks                              %u      \n", EW_MAX_ISSUE_TASKS );
 8028bb4:	4836      	ldr	r0, [pc, #216]	; (8028c90 <EwPrintSystemInfo+0x200>)
 8028bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8028bba:	f7ef fc3b 	bl	8018434 <EwPrint>
  EwPrint( "Surface rotation                             %u      \n", EW_SURFACE_ROTATION );
 8028bbe:	4835      	ldr	r0, [pc, #212]	; (8028c94 <EwPrintSystemInfo+0x204>)
 8028bc0:	2100      	movs	r1, #0
 8028bc2:	f7ef fc37 	bl	8018434 <EwPrint>
  EwPrint( "---------------------------------------------\n" );
 8028bc6:	4630      	mov	r0, r6
}
 8028bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  EwPrint( "---------------------------------------------\n" );
 8028bcc:	f7ef bc32 	b.w	8018434 <EwPrint>
 8028bd0:	08038db4 	.word	0x08038db4
 8028bd4:	20000378 	.word	0x20000378
 8028bd8:	08039038 	.word	0x08039038
 8028bdc:	08038de4 	.word	0x08038de4
 8028be0:	08038df8 	.word	0x08038df8
 8028be4:	08038e30 	.word	0x08038e30
 8028be8:	08038e38 	.word	0x08038e38
 8028bec:	c00bb800 	.word	0xc00bb800
 8028bf0:	08038e70 	.word	0x08038e70
 8028bf4:	00e89000 	.word	0x00e89000
 8028bf8:	08038ea8 	.word	0x08038ea8
 8028bfc:	08038ee0 	.word	0x08038ee0
 8028c00:	08038f18 	.word	0x08038f18
 8028c04:	08038f50 	.word	0x08038f50
 8028c08:	08038f88 	.word	0x08038f88
 8028c0c:	080392c0 	.word	0x080392c0
 8028c10:	08037a9c 	.word	0x08037a9c
 8028c14:	08038fc0 	.word	0x08038fc0
 8028c18:	08038ff8 	.word	0x08038ff8
 8028c1c:	08039000 	.word	0x08039000
 8028c20:	08039040 	.word	0x08039040
 8028c24:	08039078 	.word	0x08039078
 8028c28:	080390b0 	.word	0x080390b0
 8028c2c:	080390e8 	.word	0x080390e8
 8028c30:	08039120 	.word	0x08039120
 8028c34:	08039158 	.word	0x08039158
 8028c38:	08039190 	.word	0x08039190
 8028c3c:	080391c8 	.word	0x080391c8
 8028c40:	08039200 	.word	0x08039200
 8028c44:	08039238 	.word	0x08039238
 8028c48:	08039244 	.word	0x08039244
 8028c4c:	0803927c 	.word	0x0803927c
 8028c50:	08039288 	.word	0x08039288
 8028c54:	080392d4 	.word	0x080392d4
 8028c58:	0803930c 	.word	0x0803930c
 8028c5c:	08039344 	.word	0x08039344
 8028c60:	0803937c 	.word	0x0803937c
 8028c64:	080393b4 	.word	0x080393b4
 8028c68:	080393b8 	.word	0x080393b8
 8028c6c:	080393f0 	.word	0x080393f0
 8028c70:	080393f8 	.word	0x080393f8
 8028c74:	08039430 	.word	0x08039430
 8028c78:	0803943c 	.word	0x0803943c
 8028c7c:	08039448 	.word	0x08039448
 8028c80:	08039480 	.word	0x08039480
 8028c84:	080394b8 	.word	0x080394b8
 8028c88:	080394f0 	.word	0x080394f0
 8028c8c:	08039528 	.word	0x08039528
 8028c90:	08039560 	.word	0x08039560
 8028c94:	08039598 	.word	0x08039598

08028c98 <GuiThread>:
* RETURN VALUE:
*   None.
*
*******************************************************************************/
static void GuiThread( const void* arg )
{
 8028c98:	b508      	push	{r3, lr}
  /* initialize Embedded Wizard application */
  if ( EwInit() == 0 )
 8028c9a:	f7ff fd2b 	bl	80286f4 <EwInit>
 8028c9e:	b900      	cbnz	r0, 8028ca2 <GuiThread+0xa>
  while( EwProcess())
    ;

  /* de-initialize Embedded Wizard application */
  EwDone();
}
 8028ca0:	bd08      	pop	{r3, pc}
  EwPrintSystemInfo();
 8028ca2:	f7ff fef5 	bl	8028a90 <EwPrintSystemInfo>
  while( EwProcess())
 8028ca6:	f7ff fe0f 	bl	80288c8 <EwProcess>
 8028caa:	2800      	cmp	r0, #0
 8028cac:	d1fb      	bne.n	8028ca6 <GuiThread+0xe>
}
 8028cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  EwDone();
 8028cb2:	f7ff bdcd 	b.w	8028850 <EwDone>
 8028cb6:	bf00      	nop

08028cb8 <main>:
{
 8028cb8:	b530      	push	{r4, r5, lr}
  osThreadDef( EwThreadHandle, GuiThread, osPriorityNormal, 0, semtstSTACK_SIZE );
 8028cba:	4d0f      	ldr	r5, [pc, #60]	; (8028cf8 <main+0x40>)
{
 8028cbc:	b087      	sub	sp, #28
  EwBspSystemInit();
 8028cbe:	f001 fd41 	bl	802a744 <EwBspSystemInit>
  EwBspConsoleInit();
 8028cc2:	f001 f84b 	bl	8029d5c <EwBspConsoleInit>
  EwPrint( "Create UI thread...                          " );
 8028cc6:	480d      	ldr	r0, [pc, #52]	; (8028cfc <main+0x44>)
 8028cc8:	f7ef fbb4 	bl	8018434 <EwPrint>
  osThreadDef( EwThreadHandle, GuiThread, osPriorityNormal, 0, semtstSTACK_SIZE );
 8028ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028cce:	ac01      	add	r4, sp, #4
 8028cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028cd2:	682b      	ldr	r3, [r5, #0]
 8028cd4:	6023      	str	r3, [r4, #0]
  osThreadCreate( osThread( EwThreadHandle ), (void*)0 );
 8028cd6:	2100      	movs	r1, #0
 8028cd8:	a801      	add	r0, sp, #4
 8028cda:	f006 fb9b 	bl	802f414 <osThreadCreate>
  EwPrint( "[OK]\n" );
 8028cde:	4808      	ldr	r0, [pc, #32]	; (8028d00 <main+0x48>)
 8028ce0:	f7ef fba8 	bl	8018434 <EwPrint>
  osKernelStart();
 8028ce4:	f006 fb90 	bl	802f408 <osKernelStart>
  EwBspConsoleDone();
 8028ce8:	f001 f84c 	bl	8029d84 <EwBspConsoleDone>
  EwBspSystemDone();
 8028cec:	f001 fe00 	bl	802a8f0 <EwBspSystemDone>
}
 8028cf0:	2000      	movs	r0, #0
 8028cf2:	b007      	add	sp, #28
 8028cf4:	bd30      	pop	{r4, r5, pc}
 8028cf6:	bf00      	nop
 8028cf8:	080335c4 	.word	0x080335c4
 8028cfc:	080395e0 	.word	0x080395e0
 8028d00:	08038c2c 	.word	0x08038c2c

08028d04 <GfxSelectSurfaces>:
{
  XGfxSurface* dstSurface = (XGfxSurface*)aDstSurfaceHandle;
  XGfxSurface* srcSurface = (XGfxSurface*)aSrcSurfaceHandle;

  /* GA ist started for every instruction separately, increment number for further signing of surfaces */
  TransactionNumber++;
 8028d04:	4a0b      	ldr	r2, [pc, #44]	; (8028d34 <GfxSelectSurfaces+0x30>)
 8028d06:	8813      	ldrh	r3, [r2, #0]
 8028d08:	3301      	adds	r3, #1
 8028d0a:	b29b      	uxth	r3, r3
 8028d0c:	8013      	strh	r3, [r2, #0]

  if ( dstSurface )
 8028d0e:	b140      	cbz	r0, 8028d22 <GfxSelectSurfaces+0x1e>
  {
    /* check if the given surface was previously modified by CPU */
    if ( dstSurface->Flags & EW_SURFACE_MODIFIED_BY_CPU )
 8028d10:	6882      	ldr	r2, [r0, #8]
    {
      /* writeback the cache for the address range of the pixel data */
      EW_CLEAN_CACHE( dstSurface->Pixel, dstSurface->Width * dstSurface->Height * dstSurface->BytesPerPixel );

      /* clear the flag */
      dstSurface->Flags &= ~EW_SURFACE_MODIFIED_BY_CPU;
 8028d12:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    /* sign the surface now as modified by hardware graphics accelerator */
    dstSurface->Flags |= EW_SURFACE_MODIFIED_BY_GA;

    /* store the current transaction number */
    dstSurface->Flags &= ~EW_SURFACE_TRANSACTION_MASK;
    dstSurface->Flags |= ( TransactionNumber & EW_SURFACE_TRANSACTION_MASK );
 8028d16:	0c12      	lsrs	r2, r2, #16
 8028d18:	0412      	lsls	r2, r2, #16
 8028d1a:	431a      	orrs	r2, r3
 8028d1c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8028d20:	6082      	str	r2, [r0, #8]
  }

  if ( srcSurface )
 8028d22:	b131      	cbz	r1, 8028d32 <GfxSelectSurfaces+0x2e>
  {
    /* check if the given surface was previously modified by CPU */
    if ( srcSurface->Flags & EW_SURFACE_MODIFIED_BY_CPU )
 8028d24:	688a      	ldr	r2, [r1, #8]
    {
      /* writeback the cache for the address range of the pixel data */
      EW_CLEAN_CACHE( srcSurface->Pixel, srcSurface->Width * srcSurface->Height * srcSurface->BytesPerPixel );

      /* clear the flag */
      srcSurface->Flags &= ~EW_SURFACE_MODIFIED_BY_CPU;
 8028d26:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    }

    /* store the current transaction number */
    srcSurface->Flags &= ~EW_SURFACE_TRANSACTION_MASK;
 8028d2a:	0c12      	lsrs	r2, r2, #16
 8028d2c:	0412      	lsls	r2, r2, #16
    srcSurface->Flags |= ( TransactionNumber & EW_SURFACE_TRANSACTION_MASK );
 8028d2e:	4313      	orrs	r3, r2
 8028d30:	608b      	str	r3, [r1, #8]
  }
}
 8028d32:	4770      	bx	lr
 8028d34:	200003a4 	.word	0x200003a4

08028d38 <GfxInitGfx>:
  EwMaxSurfaceCacheSize                     = EW_MAX_SURFACE_CACHE_SIZE;
 8028d38:	4b12      	ldr	r3, [pc, #72]	; (8028d84 <GfxInitGfx+0x4c>)
  EwMaxGlyphSurfaceHeight                   = EW_MAX_GLYPH_SURFACE_HEIGHT;
 8028d3a:	4813      	ldr	r0, [pc, #76]	; (8028d88 <GfxInitGfx+0x50>)
  EwMaxIssueTasks                           = EW_MAX_ISSUE_TASKS;
 8028d3c:	4913      	ldr	r1, [pc, #76]	; (8028d8c <GfxInitGfx+0x54>)
  EwDiscardBitmaps                          = EW_DISCARD_BITMAPS;
 8028d3e:	4a14      	ldr	r2, [pc, #80]	; (8028d90 <GfxInitGfx+0x58>)
  EwLazyLoadBitmaps                         = EW_LAZY_LOAD_BITMAPS;
 8028d40:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8028db0 <GfxInitGfx+0x78>
{
 8028d44:	b4f0      	push	{r4, r5, r6, r7}
  EwMaxSurfaceCacheSize                     = EW_MAX_SURFACE_CACHE_SIZE;
 8028d46:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  EwMaxGlyphSurfaceWidth                    = EW_MAX_GLYPH_SURFACE_WIDTH;
 8028d4a:	4c12      	ldr	r4, [pc, #72]	; (8028d94 <GfxInitGfx+0x5c>)
  EwMaxSurfaceCacheSize                     = EW_MAX_SURFACE_CACHE_SIZE;
 8028d4c:	601d      	str	r5, [r3, #0]
  EwMaxGlyphSurfaceWidth                    = EW_MAX_GLYPH_SURFACE_WIDTH;
 8028d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  EwMaxIssueTasks                           = EW_MAX_ISSUE_TASKS;
 8028d52:	600b      	str	r3, [r1, #0]
  EwMaxGlyphSurfaceHeight                   = EW_MAX_GLYPH_SURFACE_HEIGHT;
 8028d54:	6003      	str	r3, [r0, #0]
  EwDiscardBitmapsIfNotUsedInCurrentUpdate  = EW_DISCARD_BITMAPS_IF_NOT_USED_IN_CURRENT_UPDATE;
 8028d56:	4910      	ldr	r1, [pc, #64]	; (8028d98 <GfxInitGfx+0x60>)
  EwMaxGlyphSurfaceWidth                    = EW_MAX_GLYPH_SURFACE_WIDTH;
 8028d58:	6023      	str	r3, [r4, #0]
  EwLazyLoadBitmaps                         = EW_LAZY_LOAD_BITMAPS;
 8028d5a:	2001      	movs	r0, #1
  EwDiscardBitmapsIfNotUsedInCurrentUpdate  = EW_DISCARD_BITMAPS_IF_NOT_USED_IN_CURRENT_UPDATE;
 8028d5c:	2300      	movs	r3, #0
  EwLazyLoadBitmapsIfAnimatedOnly           = EW_LAZY_LOAD_BITMAPS_IF_ANIMATED_ONLY;
 8028d5e:	4f0f      	ldr	r7, [pc, #60]	; (8028d9c <GfxInitGfx+0x64>)
  EwDiscardBitmapsIfAnimatedOnly            = EW_DISCARD_BITMAPS_IF_ANIMATED_ONLY;
 8028d60:	4e0f      	ldr	r6, [pc, #60]	; (8028da0 <GfxInitGfx+0x68>)
  EwDiscardBitmapsIfNotUsedInRecentUpdates  = EW_DISCARD_BITMAPS_IF_NOT_USED_IN_RECENT_UPDATES;
 8028d62:	4d10      	ldr	r5, [pc, #64]	; (8028da4 <GfxInitGfx+0x6c>)
    EwPreserveFramebufferContent = 0;
 8028d64:	4c10      	ldr	r4, [pc, #64]	; (8028da8 <GfxInitGfx+0x70>)
  EwDiscardBitmaps                          = EW_DISCARD_BITMAPS;
 8028d66:	6010      	str	r0, [r2, #0]
  EwMaxStringCacheSize                      = EW_MAX_STRING_CACHE_SIZE;
 8028d68:	4a10      	ldr	r2, [pc, #64]	; (8028dac <GfxInitGfx+0x74>)
  EwDiscardBitmapsIfNotUsedInCurrentUpdate  = EW_DISCARD_BITMAPS_IF_NOT_USED_IN_CURRENT_UPDATE;
 8028d6a:	600b      	str	r3, [r1, #0]
  EwMaxStringCacheSize                      = EW_MAX_STRING_CACHE_SIZE;
 8028d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  EwLazyLoadBitmapsIfAnimatedOnly           = EW_LAZY_LOAD_BITMAPS_IF_ANIMATED_ONLY;
 8028d70:	6038      	str	r0, [r7, #0]
  EwDiscardBitmapsIfAnimatedOnly            = EW_DISCARD_BITMAPS_IF_ANIMATED_ONLY;
 8028d72:	6030      	str	r0, [r6, #0]
  EwDiscardBitmapsIfNotUsedInRecentUpdates  = EW_DISCARD_BITMAPS_IF_NOT_USED_IN_RECENT_UPDATES;
 8028d74:	602b      	str	r3, [r5, #0]
    EwPreserveFramebufferContent = 0;
 8028d76:	6023      	str	r3, [r4, #0]
  EwLazyLoadBitmaps                         = EW_LAZY_LOAD_BITMAPS;
 8028d78:	f8cc 0000 	str.w	r0, [ip]
}
 8028d7c:	bcf0      	pop	{r4, r5, r6, r7}
  EwMaxStringCacheSize                      = EW_MAX_STRING_CACHE_SIZE;
 8028d7e:	6011      	str	r1, [r2, #0]
}
 8028d80:	4770      	bx	lr
 8028d82:	bf00      	nop
 8028d84:	20000014 	.word	0x20000014
 8028d88:	20000020 	.word	0x20000020
 8028d8c:	20000018 	.word	0x20000018
 8028d90:	2000000c 	.word	0x2000000c
 8028d94:	2000001c 	.word	0x2000001c
 8028d98:	200001d4 	.word	0x200001d4
 8028d9c:	20000124 	.word	0x20000124
 8028da0:	200001d0 	.word	0x200001d0
 8028da4:	200001d8 	.word	0x200001d8
 8028da8:	20000010 	.word	0x20000010
 8028dac:	20000028 	.word	0x20000028
 8028db0:	20000004 	.word	0x20000004

08028db4 <GfxInitViewport>:
{
 8028db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028db8:	9e08      	ldr	r6, [sp, #32]
    if (( aWidth > aExtentWidth ) || ( aHeight != aExtentHeight ))
 8028dba:	42b0      	cmp	r0, r6
 8028dbc:	dc61      	bgt.n	8028e82 <GfxInitViewport+0xce>
 8028dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028dc0:	4299      	cmp	r1, r3
 8028dc2:	460d      	mov	r5, r1
 8028dc4:	d15d      	bne.n	8028e82 <GfxInitViewport+0xce>
  if ( !aDisplay1 )
 8028dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028dc8:	2b00      	cmp	r3, #0
 8028dca:	f000 8091 	beq.w	8028ef0 <GfxInitViewport+0x13c>
    if ( !aDisplay2 )
 8028dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028dd0:	2b00      	cmp	r3, #0
 8028dd2:	d064      	beq.n	8028e9e <GfxInitViewport+0xea>
  XGfxViewport* viewport = (XGfxViewport*)EwAlloc( sizeof( XGfxViewport ));
 8028dd4:	2008      	movs	r0, #8
 8028dd6:	f000 fccb 	bl	8029770 <EwAlloc>
  if ( !viewport )
 8028dda:	4604      	mov	r4, r0
 8028ddc:	2800      	cmp	r0, #0
 8028dde:	d06b      	beq.n	8028eb8 <GfxInitViewport+0x104>
  viewport->FrameBuffer      = 0;
 8028de0:	2300      	movs	r3, #0
  viewport->DoubleBuffer     = 0;
 8028de2:	e9c0 3300 	strd	r3, r3, [r0]
  viewport->FrameBuffer = (XGfxSurface*)EwAllocVideo( sizeof( XGfxSurface ));
 8028de6:	2028      	movs	r0, #40	; 0x28
 8028de8:	f7ec fbdc 	bl	80155a4 <EwAllocVideo>
 8028dec:	4607      	mov	r7, r0
 8028dee:	6020      	str	r0, [r4, #0]
  if ( !viewport->FrameBuffer )
 8028df0:	2800      	cmp	r0, #0
 8028df2:	d06f      	beq.n	8028ed4 <GfxInitViewport+0x120>
  EwZero( viewport->FrameBuffer, sizeof( XGfxSurface ));
 8028df4:	2128      	movs	r1, #40	; 0x28
 8028df6:	f000 fce3 	bl	80297c0 <EwZero>
  viewport->FrameBuffer->Width          = aExtentWidth;
 8028dfa:	6823      	ldr	r3, [r4, #0]
  viewport->FrameBuffer->Pixel          = aDisplay1;
 8028dfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  viewport->FrameBuffer->OrigPixel      = aDisplay1;
 8028dfe:	621a      	str	r2, [r3, #32]
  viewport->FrameBuffer->Flags          = EW_SURFACE_PREALLOCATED;
 8028e00:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
  viewport->FrameBuffer->BytesPerPixel  = 2;
 8028e04:	f04f 0a02 	mov.w	sl, #2
  viewport->FrameBuffer->Format         = EW_PIXEL_FORMAT_SCREEN;
 8028e08:	f04f 38ff 	mov.w	r8, #4294967295
  viewport->FrameBuffer->Height         = aExtentHeight;
 8028e0c:	e9c3 6500 	strd	r6, r5, [r3]
  viewport->FrameBuffer->OrigHeight     = aExtentHeight;
 8028e10:	e9c3 2506 	strd	r2, r5, [r3, #24]
  viewport->FrameBuffer->BytesPerPixel  = 2;
 8028e14:	e9c3 9a02 	strd	r9, sl, [r3, #8]
  viewport->FrameBuffer->Format         = EW_PIXEL_FORMAT_SCREEN;
 8028e18:	f8c3 8010 	str.w	r8, [r3, #16]
    viewport->DoubleBuffer = (XGfxSurface*)EwAllocVideo( sizeof( XGfxSurface ));
 8028e1c:	2028      	movs	r0, #40	; 0x28
 8028e1e:	f7ec fbc1 	bl	80155a4 <EwAllocVideo>
 8028e22:	4607      	mov	r7, r0
 8028e24:	6060      	str	r0, [r4, #4]
    if ( !viewport->DoubleBuffer )
 8028e26:	2800      	cmp	r0, #0
 8028e28:	d06f      	beq.n	8028f0a <GfxInitViewport+0x156>
    EwZero( viewport->DoubleBuffer, sizeof( XGfxSurface ));
 8028e2a:	2128      	movs	r1, #40	; 0x28
 8028e2c:	f000 fcc8 	bl	80297c0 <EwZero>
    viewport->DoubleBuffer->Width          = aExtentWidth;
 8028e30:	6863      	ldr	r3, [r4, #4]
    viewport->DoubleBuffer->Pixel          = aDisplay2;
 8028e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    viewport->DoubleBuffer->Format         = EW_PIXEL_FORMAT_SCREEN;
 8028e34:	f8c3 8010 	str.w	r8, [r3, #16]
    viewport->DoubleBuffer->Height         = aExtentHeight;
 8028e38:	e9c3 6500 	strd	r6, r5, [r3]
    viewport->DoubleBuffer->OrigHeight     = aExtentHeight;
 8028e3c:	e9c3 2506 	strd	r2, r5, [r3, #24]
    viewport->DoubleBuffer->BytesPerPixel  = 2;
 8028e40:	e9c3 9a02 	strd	r9, sl, [r3, #8]
    if ( !EwBspGraphicsInit( DMA2D_OUTPUT_RGB565 ))
 8028e44:	4650      	mov	r0, sl
    viewport->DoubleBuffer->OrigPixel      = aDisplay2;
 8028e46:	621a      	str	r2, [r3, #32]
    if ( !EwBspGraphicsInit( DMA2D_OUTPUT_RGB565 ))
 8028e48:	f001 fa5a 	bl	802a300 <EwBspGraphicsInit>
 8028e4c:	4605      	mov	r5, r0
 8028e4e:	2800      	cmp	r0, #0
 8028e50:	d05e      	beq.n	8028f10 <GfxInitViewport+0x15c>
  EwResourcesMemory += sizeof( XGfxViewport );
 8028e52:	4936      	ldr	r1, [pc, #216]	; (8028f2c <GfxInitViewport+0x178>)
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 8028e54:	4836      	ldr	r0, [pc, #216]	; (8028f30 <GfxInitViewport+0x17c>)
    EwResourcesMemory += sizeof( XGfxSurface );
 8028e56:	680b      	ldr	r3, [r1, #0]
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 8028e58:	6805      	ldr	r5, [r0, #0]
    EwResourcesMemory += sizeof( XGfxSurface );
 8028e5a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8028e5e:	600a      	str	r2, [r1, #0]
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 8028e60:	4b34      	ldr	r3, [pc, #208]	; (8028f34 <GfxInitViewport+0x180>)
 8028e62:	4935      	ldr	r1, [pc, #212]	; (8028f38 <GfxInitViewport+0x184>)
 8028e64:	681b      	ldr	r3, [r3, #0]
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 8028e66:	42aa      	cmp	r2, r5
    EwResourcesMemoryPeak = EwResourcesMemory;
 8028e68:	bfc8      	it	gt
 8028e6a:	6002      	strgt	r2, [r0, #0]
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 8028e6c:	6808      	ldr	r0, [r1, #0]
 8028e6e:	4933      	ldr	r1, [pc, #204]	; (8028f3c <GfxInitViewport+0x188>)
 8028e70:	4403      	add	r3, r0
 8028e72:	6808      	ldr	r0, [r1, #0]
 8028e74:	4413      	add	r3, r2
 8028e76:	4283      	cmp	r3, r0
    EwMemoryPeak = EwObjectsMemory + EwStringsMemory + EwResourcesMemory;
 8028e78:	bfc8      	it	gt
 8028e7a:	600b      	strgt	r3, [r1, #0]
  return (unsigned long)viewport;
 8028e7c:	4620      	mov	r0, r4
}
 8028e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      EW_ERROR( Err02 );
 8028e82:	492f      	ldr	r1, [pc, #188]	; (8028f40 <GfxInitViewport+0x18c>)
 8028e84:	482f      	ldr	r0, [pc, #188]	; (8028f44 <GfxInitViewport+0x190>)
 8028e86:	22ea      	movs	r2, #234	; 0xea
 8028e88:	f7ef fad4 	bl	8018434 <EwPrint>
 8028e8c:	482e      	ldr	r0, [pc, #184]	; (8028f48 <GfxInitViewport+0x194>)
 8028e8e:	f7ef fad1 	bl	8018434 <EwPrint>
 8028e92:	482e      	ldr	r0, [pc, #184]	; (8028f4c <GfxInitViewport+0x198>)
 8028e94:	f7ef face 	bl	8018434 <EwPrint>
      return 0;
 8028e98:	2000      	movs	r0, #0
}
 8028e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      EW_ERROR( Err04 );
 8028e9e:	4928      	ldr	r1, [pc, #160]	; (8028f40 <GfxInitViewport+0x18c>)
 8028ea0:	4828      	ldr	r0, [pc, #160]	; (8028f44 <GfxInitViewport+0x190>)
 8028ea2:	22fc      	movs	r2, #252	; 0xfc
 8028ea4:	f7ef fac6 	bl	8018434 <EwPrint>
 8028ea8:	4829      	ldr	r0, [pc, #164]	; (8028f50 <GfxInitViewport+0x19c>)
 8028eaa:	f7ef fac3 	bl	8018434 <EwPrint>
 8028eae:	4827      	ldr	r0, [pc, #156]	; (8028f4c <GfxInitViewport+0x198>)
 8028eb0:	f7ef fac0 	bl	8018434 <EwPrint>
      return 0;
 8028eb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028eb6:	e7f0      	b.n	8028e9a <GfxInitViewport+0xe6>
    EW_ERROR( Err03 );
 8028eb8:	4921      	ldr	r1, [pc, #132]	; (8028f40 <GfxInitViewport+0x18c>)
 8028eba:	4822      	ldr	r0, [pc, #136]	; (8028f44 <GfxInitViewport+0x190>)
 8028ebc:	f44f 7283 	mov.w	r2, #262	; 0x106
 8028ec0:	f7ef fab8 	bl	8018434 <EwPrint>
 8028ec4:	4823      	ldr	r0, [pc, #140]	; (8028f54 <GfxInitViewport+0x1a0>)
 8028ec6:	f7ef fab5 	bl	8018434 <EwPrint>
 8028eca:	4820      	ldr	r0, [pc, #128]	; (8028f4c <GfxInitViewport+0x198>)
 8028ecc:	f7ef fab2 	bl	8018434 <EwPrint>
    return 0;
 8028ed0:	4620      	mov	r0, r4
 8028ed2:	e7e2      	b.n	8028e9a <GfxInitViewport+0xe6>
    EW_ERROR( Err03 );
 8028ed4:	f44f 7288 	mov.w	r2, #272	; 0x110
      EW_ERROR( Err03 );
 8028ed8:	4919      	ldr	r1, [pc, #100]	; (8028f40 <GfxInitViewport+0x18c>)
 8028eda:	481a      	ldr	r0, [pc, #104]	; (8028f44 <GfxInitViewport+0x190>)
 8028edc:	f7ef faaa 	bl	8018434 <EwPrint>
 8028ee0:	481c      	ldr	r0, [pc, #112]	; (8028f54 <GfxInitViewport+0x1a0>)
 8028ee2:	f7ef faa7 	bl	8018434 <EwPrint>
 8028ee6:	4819      	ldr	r0, [pc, #100]	; (8028f4c <GfxInitViewport+0x198>)
 8028ee8:	f7ef faa4 	bl	8018434 <EwPrint>
      return 0;
 8028eec:	4638      	mov	r0, r7
 8028eee:	e7d4      	b.n	8028e9a <GfxInitViewport+0xe6>
    EW_ERROR( Err01 );
 8028ef0:	4913      	ldr	r1, [pc, #76]	; (8028f40 <GfxInitViewport+0x18c>)
 8028ef2:	4814      	ldr	r0, [pc, #80]	; (8028f44 <GfxInitViewport+0x190>)
 8028ef4:	22f3      	movs	r2, #243	; 0xf3
 8028ef6:	f7ef fa9d 	bl	8018434 <EwPrint>
 8028efa:	4817      	ldr	r0, [pc, #92]	; (8028f58 <GfxInitViewport+0x1a4>)
 8028efc:	f7ef fa9a 	bl	8018434 <EwPrint>
 8028f00:	4812      	ldr	r0, [pc, #72]	; (8028f4c <GfxInitViewport+0x198>)
 8028f02:	f7ef fa97 	bl	8018434 <EwPrint>
    return 0;
 8028f06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028f08:	e7c7      	b.n	8028e9a <GfxInitViewport+0xe6>
      EW_ERROR( Err03 );
 8028f0a:	f240 1225 	movw	r2, #293	; 0x125
 8028f0e:	e7e3      	b.n	8028ed8 <GfxInitViewport+0x124>
      EW_ERROR( Err05 );
 8028f10:	490b      	ldr	r1, [pc, #44]	; (8028f40 <GfxInitViewport+0x18c>)
 8028f12:	480c      	ldr	r0, [pc, #48]	; (8028f44 <GfxInitViewport+0x190>)
 8028f14:	f240 1245 	movw	r2, #325	; 0x145
 8028f18:	f7ef fa8c 	bl	8018434 <EwPrint>
 8028f1c:	480f      	ldr	r0, [pc, #60]	; (8028f5c <GfxInitViewport+0x1a8>)
 8028f1e:	f7ef fa89 	bl	8018434 <EwPrint>
 8028f22:	480a      	ldr	r0, [pc, #40]	; (8028f4c <GfxInitViewport+0x198>)
 8028f24:	f7ef fa86 	bl	8018434 <EwPrint>
      return 0;
 8028f28:	4628      	mov	r0, r5
 8028f2a:	e7b6      	b.n	8028e9a <GfxInitViewport+0xe6>
 8028f2c:	200002e8 	.word	0x200002e8
 8028f30:	20000304 	.word	0x20000304
 8028f34:	200002d8 	.word	0x200002d8
 8028f38:	200002e4 	.word	0x200002e4
 8028f3c:	200002ec 	.word	0x200002ec
 8028f40:	08039610 	.word	0x08039610
 8028f44:	08039658 	.word	0x08039658
 8028f48:	0803966c 	.word	0x0803966c
 8028f4c:	08038c30 	.word	0x08038c30
 8028f50:	080396e4 	.word	0x080396e4
 8028f54:	08039704 	.word	0x08039704
 8028f58:	080396c4 	.word	0x080396c4
 8028f5c:	08039720 	.word	0x08039720

08028f60 <GfxDoneViewport>:
{
 8028f60:	b510      	push	{r4, lr}
 8028f62:	4604      	mov	r4, r0
  EwBspGraphicsWaitForCompletion();
 8028f64:	f001 fa02 	bl	802a36c <EwBspGraphicsWaitForCompletion>
    EwBspGraphicsDone();
 8028f68:	f001 f9fa 	bl	802a360 <EwBspGraphicsDone>
  if ( viewport->DoubleBuffer )
 8028f6c:	6860      	ldr	r0, [r4, #4]
 8028f6e:	b108      	cbz	r0, 8028f74 <GfxDoneViewport+0x14>
    EwFree( viewport->DoubleBuffer );
 8028f70:	f000 fc00 	bl	8029774 <EwFree>
  if ( viewport->FrameBuffer )
 8028f74:	6820      	ldr	r0, [r4, #0]
 8028f76:	b108      	cbz	r0, 8028f7c <GfxDoneViewport+0x1c>
    EwFree( viewport->FrameBuffer );
 8028f78:	f000 fbfc 	bl	8029774 <EwFree>
  EwFree( viewport );
 8028f7c:	4620      	mov	r0, r4
 8028f7e:	f000 fbf9 	bl	8029774 <EwFree>
    EwResourcesMemory -= sizeof( XGfxSurface );
 8028f82:	4a02      	ldr	r2, [pc, #8]	; (8028f8c <GfxDoneViewport+0x2c>)
 8028f84:	6813      	ldr	r3, [r2, #0]
 8028f86:	3b58      	subs	r3, #88	; 0x58
 8028f88:	6013      	str	r3, [r2, #0]
}
 8028f8a:	bd10      	pop	{r4, pc}
 8028f8c:	200002e8 	.word	0x200002e8

08028f90 <GfxBeginUpdate>:
{
 8028f90:	b510      	push	{r4, lr}
 8028f92:	4604      	mov	r4, r0
  EwBspGraphicsWaitForCompletion();
 8028f94:	f001 f9ea 	bl	802a36c <EwBspGraphicsWaitForCompletion>
    LoadedClutSurface = 0;
 8028f98:	4b03      	ldr	r3, [pc, #12]	; (8028fa8 <GfxBeginUpdate+0x18>)
 8028f9a:	2200      	movs	r2, #0
 8028f9c:	601a      	str	r2, [r3, #0]
  EwBspDisplayWaitForCompletion();
 8028f9e:	f001 f8e1 	bl	802a164 <EwBspDisplayWaitForCompletion>
}
 8028fa2:	6860      	ldr	r0, [r4, #4]
 8028fa4:	bd10      	pop	{r4, pc}
 8028fa6:	bf00      	nop
 8028fa8:	200003a0 	.word	0x200003a0

08028fac <GfxBeginUpdateArea>:
{
 8028fac:	b510      	push	{r4, lr}
  EwBspGraphicsWaitForCompletion();
 8028fae:	f001 f9dd 	bl	802a36c <EwBspGraphicsWaitForCompletion>
    LoadedClutSurface = 0;
 8028fb2:	4b09      	ldr	r3, [pc, #36]	; (8028fd8 <GfxBeginUpdateArea+0x2c>)
 8028fb4:	2400      	movs	r4, #0
 8028fb6:	601c      	str	r4, [r3, #0]
  EwBspDisplayWaitForCompletion();
 8028fb8:	f001 f8d4 	bl	802a164 <EwBspDisplayWaitForCompletion>
      EW_ERROR( Err07 );
 8028fbc:	4907      	ldr	r1, [pc, #28]	; (8028fdc <GfxBeginUpdateArea+0x30>)
 8028fbe:	4808      	ldr	r0, [pc, #32]	; (8028fe0 <GfxBeginUpdateArea+0x34>)
 8028fc0:	f240 12fb 	movw	r2, #507	; 0x1fb
 8028fc4:	f7ef fa36 	bl	8018434 <EwPrint>
 8028fc8:	4806      	ldr	r0, [pc, #24]	; (8028fe4 <GfxBeginUpdateArea+0x38>)
 8028fca:	f7ef fa33 	bl	8018434 <EwPrint>
 8028fce:	4806      	ldr	r0, [pc, #24]	; (8028fe8 <GfxBeginUpdateArea+0x3c>)
 8028fd0:	f7ef fa30 	bl	8018434 <EwPrint>
}
 8028fd4:	4620      	mov	r0, r4
 8028fd6:	bd10      	pop	{r4, pc}
 8028fd8:	200003a0 	.word	0x200003a0
 8028fdc:	08039610 	.word	0x08039610
 8028fe0:	08039658 	.word	0x08039658
 8028fe4:	08039758 	.word	0x08039758
 8028fe8:	08038c30 	.word	0x08038c30

08028fec <GfxEndUpdate>:
{
 8028fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (( aWidth <= 0 ) || ( aHeight <= 0 ))
 8028ff0:	1e1d      	subs	r5, r3, #0
{
 8028ff2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  if (( aWidth <= 0 ) || ( aHeight <= 0 ))
 8028ff6:	dd1e      	ble.n	8029036 <GfxEndUpdate+0x4a>
 8028ff8:	f1b9 0f00 	cmp.w	r9, #0
 8028ffc:	dd1b      	ble.n	8029036 <GfxEndUpdate+0x4a>
  EwBspGraphicsWaitForCompletion();
 8028ffe:	4604      	mov	r4, r0
 8029000:	4617      	mov	r7, r2
 8029002:	4688      	mov	r8, r1
 8029004:	f001 f9b2 	bl	802a36c <EwBspGraphicsWaitForCompletion>
    viewport->DoubleBuffer = viewport->FrameBuffer;
 8029008:	e9d4 2600 	ldrd	r2, r6, [r4]
  if ( viewport->FrameBuffer->Flags & EW_SURFACE_MODIFIED_BY_CPU )
 802900c:	68b3      	ldr	r3, [r6, #8]
    viewport->DoubleBuffer = viewport->FrameBuffer;
 802900e:	e9c4 6200 	strd	r6, r2, [r4]
  viewport->FrameBuffer->Height = viewport->FrameBuffer->OrigHeight;
 8029012:	e9d6 4007 	ldrd	r4, r0, [r6, #28]
  if ( viewport->FrameBuffer->Flags & EW_SURFACE_MODIFIED_BY_CPU )
 8029016:	019a      	lsls	r2, r3, #6
    viewport->FrameBuffer->Flags &= ~EW_SURFACE_MODIFIED_BY_CPU;
 8029018:	bf44      	itt	mi
 802901a:	f023 7300 	bicmi.w	r3, r3, #33554432	; 0x2000000
 802901e:	60b3      	strmi	r3, [r6, #8]
  viewport->FrameBuffer->Pixel  = viewport->FrameBuffer->OrigPixel;
 8029020:	61b0      	str	r0, [r6, #24]
  viewport->FrameBuffer->Height = viewport->FrameBuffer->OrigHeight;
 8029022:	6074      	str	r4, [r6, #4]
  EwBspDisplayCommitBuffer( viewport->FrameBuffer->Pixel, aX, aY, aWidth, aHeight );
 8029024:	462b      	mov	r3, r5
 8029026:	463a      	mov	r2, r7
 8029028:	4641      	mov	r1, r8
 802902a:	f8cd 9020 	str.w	r9, [sp, #32]
}
 802902e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  EwBspDisplayCommitBuffer( viewport->FrameBuffer->Pixel, aX, aY, aWidth, aHeight );
 8029032:	f001 b899 	b.w	802a168 <EwBspDisplayCommitBuffer>
}
 8029036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802903a:	bf00      	nop

0802903c <GfxCreateSurface>:
{
 802903c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029040:	4688      	mov	r8, r1
 8029042:	4617      	mov	r7, r2
  if ( aFormat == EW_PIXEL_FORMAT_NATIVE )
 8029044:	4683      	mov	fp, r0
 8029046:	2800      	cmp	r0, #0
 8029048:	d04f      	beq.n	80290ea <GfxCreateSurface+0xae>
  else if ( aFormat == EW_PIXEL_FORMAT_ALPHA8 )
 802904a:	2802      	cmp	r0, #2
 802904c:	d00b      	beq.n	8029066 <GfxCreateSurface+0x2a>
  else if ( aFormat == EW_PIXEL_FORMAT_RGB565 )
 802904e:	2803      	cmp	r0, #3
 8029050:	d004      	beq.n	802905c <GfxCreateSurface+0x20>
  else if ( aFormat == EW_PIXEL_FORMAT_INDEX8 )
 8029052:	2801      	cmp	r0, #1
 8029054:	d04e      	beq.n	80290f4 <GfxCreateSurface+0xb8>
  else if ( aFormat == EW_PIXEL_FORMAT_SCREEN )
 8029056:	f1b0 3fff 	cmp.w	r0, #4294967295
 802905a:	d143      	bne.n	80290e4 <GfxCreateSurface+0xa8>
 802905c:	2300      	movs	r3, #0
  int                     clutSize      = 0;
 802905e:	469a      	mov	sl, r3
    bytesPerPixel = 2;
 8029060:	f04f 0902 	mov.w	r9, #2
 8029064:	e003      	b.n	802906e <GfxCreateSurface+0x32>
 8029066:	2300      	movs	r3, #0
  int                     clutSize      = 0;
 8029068:	469a      	mov	sl, r3
    bytesPerPixel = 1;
 802906a:	f04f 0901 	mov.w	r9, #1
  bitmapSize = aWidth * aHeight * bytesPerPixel + 2 * EW_CACHE_LINE_SIZE;
 802906e:	fb07 f608 	mul.w	r6, r7, r8
 8029072:	fb09 f606 	mul.w	r6, r9, r6
  surface = (XGfxSurface*)EwAllocVideo( sizeof( XGfxSurface ) + bitmapSize + clutSize );
 8029076:	18f5      	adds	r5, r6, r3
 8029078:	f105 0028 	add.w	r0, r5, #40	; 0x28
 802907c:	f7ec fa92 	bl	80155a4 <EwAllocVideo>
  if ( !surface )
 8029080:	4604      	mov	r4, r0
 8029082:	b378      	cbz	r0, 80290e4 <GfxCreateSurface+0xa8>
  EwZero( surface, sizeof( XGfxSurface ));
 8029084:	2128      	movs	r1, #40	; 0x28
 8029086:	f000 fb9b 	bl	80297c0 <EwZero>
  surface->Flags          = 0;
 802908a:	2100      	movs	r1, #0
  surface->AllocSize      = bitmapSize + clutSize;
 802908c:	eb0a 0206 	add.w	r2, sl, r6
  surface->Pixel          = (void*)(((unsigned long)( surface + 1 )
 8029090:	f104 0328 	add.w	r3, r4, #40	; 0x28
  surface->Height         = aHeight;
 8029094:	e9c4 8700 	strd	r8, r7, [r4]
  surface->Format         = aFormat;
 8029098:	e9c4 9b03 	strd	r9, fp, [r4, #12]
  surface->Pixel          = (void*)(((unsigned long)( surface + 1 )
 802909c:	e9c4 2305 	strd	r2, r3, [r4, #20]
  surface->Flags          = 0;
 80290a0:	60a1      	str	r1, [r4, #8]
    surface->Clut         = (void*)(((unsigned long)( surface + 1 ) + bitmapSize + 3 ) &~ 3 );
 80290a2:	4620      	mov	r0, r4
  if ( clutSize > 0 )
 80290a4:	f1ba 0f00 	cmp.w	sl, #0
 80290a8:	d005      	beq.n	80290b6 <GfxCreateSurface+0x7a>
    surface->Clut         = (void*)(((unsigned long)( surface + 1 ) + bitmapSize + 3 ) &~ 3 );
 80290aa:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80290ae:	441e      	add	r6, r3
 80290b0:	f026 0603 	bic.w	r6, r6, #3
 80290b4:	6266      	str	r6, [r4, #36]	; 0x24
  EwResourcesMemory += sizeof( XGfxSurface ) + surface->AllocSize;
 80290b6:	4a12      	ldr	r2, [pc, #72]	; (8029100 <GfxCreateSurface+0xc4>)
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 80290b8:	4912      	ldr	r1, [pc, #72]	; (8029104 <GfxCreateSurface+0xc8>)
  EwResourcesMemory += sizeof( XGfxSurface ) + surface->AllocSize;
 80290ba:	6813      	ldr	r3, [r2, #0]
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 80290bc:	680c      	ldr	r4, [r1, #0]
  EwResourcesMemory += sizeof( XGfxSurface ) + surface->AllocSize;
 80290be:	3328      	adds	r3, #40	; 0x28
 80290c0:	442b      	add	r3, r5
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 80290c2:	42a3      	cmp	r3, r4
    EwResourcesMemoryPeak = EwResourcesMemory;
 80290c4:	bfc8      	it	gt
 80290c6:	600b      	strgt	r3, [r1, #0]
  EwResourcesMemory += sizeof( XGfxSurface ) + surface->AllocSize;
 80290c8:	6013      	str	r3, [r2, #0]
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 80290ca:	490f      	ldr	r1, [pc, #60]	; (8029108 <GfxCreateSurface+0xcc>)
 80290cc:	4a0f      	ldr	r2, [pc, #60]	; (802910c <GfxCreateSurface+0xd0>)
 80290ce:	680c      	ldr	r4, [r1, #0]
 80290d0:	6812      	ldr	r2, [r2, #0]
 80290d2:	490f      	ldr	r1, [pc, #60]	; (8029110 <GfxCreateSurface+0xd4>)
 80290d4:	4422      	add	r2, r4
 80290d6:	680c      	ldr	r4, [r1, #0]
 80290d8:	4413      	add	r3, r2
 80290da:	42a3      	cmp	r3, r4
    EwMemoryPeak = EwObjectsMemory + EwStringsMemory + EwResourcesMemory;
 80290dc:	bfc8      	it	gt
 80290de:	600b      	strgt	r3, [r1, #0]
}
 80290e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 80290e4:	2000      	movs	r0, #0
}
 80290e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int                     clutSize      = 0;
 80290ea:	4682      	mov	sl, r0
 80290ec:	4603      	mov	r3, r0
    bytesPerPixel = 4;
 80290ee:	f04f 0904 	mov.w	r9, #4
 80290f2:	e7bc      	b.n	802906e <GfxCreateSurface+0x32>
 80290f4:	f240 4303 	movw	r3, #1027	; 0x403
    clutSize = 256 * 4 + 3; /* clut startaddress has to be DWORD aligned */
 80290f8:	469a      	mov	sl, r3
    bytesPerPixel = 1;
 80290fa:	4681      	mov	r9, r0
 80290fc:	e7b7      	b.n	802906e <GfxCreateSurface+0x32>
 80290fe:	bf00      	nop
 8029100:	200002e8 	.word	0x200002e8
 8029104:	20000304 	.word	0x20000304
 8029108:	200002e4 	.word	0x200002e4
 802910c:	200002d8 	.word	0x200002d8
 8029110:	200002ec 	.word	0x200002ec

08029114 <GfxCreateConstSurface>:
{
 8029114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029118:	4688      	mov	r8, r1
 802911a:	4617      	mov	r7, r2
 802911c:	461c      	mov	r4, r3
  if ( aFormat == EW_PIXEL_FORMAT_NATIVE )
 802911e:	4605      	mov	r5, r0
 8029120:	b140      	cbz	r0, 8029134 <GfxCreateConstSurface+0x20>
  else if ( aFormat == EW_PIXEL_FORMAT_ALPHA8 )
 8029122:	2802      	cmp	r0, #2
 8029124:	d041      	beq.n	80291aa <GfxCreateConstSurface+0x96>
  else if ( aFormat == EW_PIXEL_FORMAT_RGB565 )
 8029126:	2803      	cmp	r0, #3
 8029128:	d044      	beq.n	80291b4 <GfxCreateConstSurface+0xa0>
  else if ( aFormat == EW_PIXEL_FORMAT_INDEX8 )
 802912a:	2801      	cmp	r0, #1
 802912c:	d040      	beq.n	80291b0 <GfxCreateConstSurface+0x9c>
    return 0;
 802912e:	2000      	movs	r0, #0
}
 8029130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bytesPerPixel = 4;
 8029134:	f04f 0904 	mov.w	r9, #4
  if ( !aMemory || !aMemory->Pixel1 || ( aMemory->Pitch1X != bytesPerPixel ) ||
 8029138:	2c00      	cmp	r4, #0
 802913a:	d0f8      	beq.n	802912e <GfxCreateConstSurface+0x1a>
 802913c:	6823      	ldr	r3, [r4, #0]
 802913e:	2b00      	cmp	r3, #0
 8029140:	d0f5      	beq.n	802912e <GfxCreateConstSurface+0x1a>
 8029142:	6863      	ldr	r3, [r4, #4]
 8029144:	454b      	cmp	r3, r9
 8029146:	d1f2      	bne.n	802912e <GfxCreateConstSurface+0x1a>
 8029148:	68a2      	ldr	r2, [r4, #8]
     ( aMemory->Pitch1Y < (int)( aWidth * bytesPerPixel )))
 802914a:	fb08 f309 	mul.w	r3, r8, r9
  if ( !aMemory || !aMemory->Pixel1 || ( aMemory->Pitch1X != bytesPerPixel ) ||
 802914e:	429a      	cmp	r2, r3
 8029150:	dbed      	blt.n	802912e <GfxCreateConstSurface+0x1a>
  surface = (XGfxSurface*)EwAllocVideo( sizeof( XGfxSurface ));
 8029152:	2028      	movs	r0, #40	; 0x28
 8029154:	f7ec fa26 	bl	80155a4 <EwAllocVideo>
  if ( !surface )
 8029158:	4606      	mov	r6, r0
 802915a:	2800      	cmp	r0, #0
 802915c:	d0e7      	beq.n	802912e <GfxCreateConstSurface+0x1a>
  EwZero( surface, sizeof( XGfxSurface ));
 802915e:	2128      	movs	r1, #40	; 0x28
 8029160:	f000 fb2e 	bl	80297c0 <EwZero>
  EwResourcesMemory += sizeof( XGfxSurface );
 8029164:	4915      	ldr	r1, [pc, #84]	; (80291bc <GfxCreateConstSurface+0xa8>)
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 8029166:	4b16      	ldr	r3, [pc, #88]	; (80291c0 <GfxCreateConstSurface+0xac>)
  EwResourcesMemory += sizeof( XGfxSurface );
 8029168:	680a      	ldr	r2, [r1, #0]
  surface->Pixel          = (void*)( aMemory->Pixel1 );
 802916a:	6820      	ldr	r0, [r4, #0]
  surface->Clut           = (void*)( aMemory->Clut );
 802916c:	69a4      	ldr	r4, [r4, #24]
  surface->Pixel          = (void*)( aMemory->Pixel1 );
 802916e:	61b0      	str	r0, [r6, #24]
  EwResourcesMemory += sizeof( XGfxSurface );
 8029170:	3228      	adds	r2, #40	; 0x28
  surface->Height         = aHeight;
 8029172:	e9c6 8700 	strd	r8, r7, [r6]
  EwResourcesMemory += sizeof( XGfxSurface );
 8029176:	600a      	str	r2, [r1, #0]
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 8029178:	6819      	ldr	r1, [r3, #0]
  surface->BytesPerPixel  = bytesPerPixel;
 802917a:	f8c6 900c 	str.w	r9, [r6, #12]
  if ( EwResourcesMemory > EwResourcesMemoryPeak )
 802917e:	428a      	cmp	r2, r1
    EwResourcesMemoryPeak = EwResourcesMemory;
 8029180:	bfc8      	it	gt
 8029182:	601a      	strgt	r2, [r3, #0]
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 8029184:	490f      	ldr	r1, [pc, #60]	; (80291c4 <GfxCreateConstSurface+0xb0>)
 8029186:	4b10      	ldr	r3, [pc, #64]	; (80291c8 <GfxCreateConstSurface+0xb4>)
 8029188:	6808      	ldr	r0, [r1, #0]
 802918a:	681b      	ldr	r3, [r3, #0]
 802918c:	490f      	ldr	r1, [pc, #60]	; (80291cc <GfxCreateConstSurface+0xb8>)
  surface->Format         = aFormat;
 802918e:	6135      	str	r5, [r6, #16]
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 8029190:	4403      	add	r3, r0
 8029192:	6808      	ldr	r0, [r1, #0]
  surface->Clut           = (void*)( aMemory->Clut );
 8029194:	6274      	str	r4, [r6, #36]	; 0x24
  if (( EwObjectsMemory + EwStringsMemory + EwResourcesMemory ) > EwMemoryPeak )
 8029196:	4413      	add	r3, r2
 8029198:	4283      	cmp	r3, r0
  surface->Flags          = EW_SURFACE_PREALLOCATED;
 802919a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 802919e:	60b7      	str	r7, [r6, #8]
    EwMemoryPeak = EwObjectsMemory + EwStringsMemory + EwResourcesMemory;
 80291a0:	bfc8      	it	gt
 80291a2:	600b      	strgt	r3, [r1, #0]
  return (unsigned long)surface;
 80291a4:	4630      	mov	r0, r6
}
 80291a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bytesPerPixel = 1;
 80291aa:	f04f 0901 	mov.w	r9, #1
 80291ae:	e7c3      	b.n	8029138 <GfxCreateConstSurface+0x24>
 80291b0:	4681      	mov	r9, r0
 80291b2:	e7c1      	b.n	8029138 <GfxCreateConstSurface+0x24>
    bytesPerPixel = 2;
 80291b4:	f04f 0902 	mov.w	r9, #2
 80291b8:	e7be      	b.n	8029138 <GfxCreateConstSurface+0x24>
 80291ba:	bf00      	nop
 80291bc:	200002e8 	.word	0x200002e8
 80291c0:	20000304 	.word	0x20000304
 80291c4:	200002e4 	.word	0x200002e4
 80291c8:	200002d8 	.word	0x200002d8
 80291cc:	200002ec 	.word	0x200002ec

080291d0 <GfxDestroySurface>:
{
 80291d0:	b500      	push	{lr}
    if (( surface->Flags & EW_SURFACE_TRANSACTION_MASK ) == TransactionNumber )
 80291d2:	4b0b      	ldr	r3, [pc, #44]	; (8029200 <GfxDestroySurface+0x30>)
 80291d4:	8902      	ldrh	r2, [r0, #8]
 80291d6:	881b      	ldrh	r3, [r3, #0]
 80291d8:	429a      	cmp	r2, r3
{
 80291da:	b083      	sub	sp, #12
    if (( surface->Flags & EW_SURFACE_TRANSACTION_MASK ) == TransactionNumber )
 80291dc:	d00a      	beq.n	80291f4 <GfxDestroySurface+0x24>
  EwResourcesMemory -= sizeof( XGfxSurface ) + surface->AllocSize;
 80291de:	4a09      	ldr	r2, [pc, #36]	; (8029204 <GfxDestroySurface+0x34>)
 80291e0:	6941      	ldr	r1, [r0, #20]
 80291e2:	6813      	ldr	r3, [r2, #0]
 80291e4:	3b28      	subs	r3, #40	; 0x28
 80291e6:	1a5b      	subs	r3, r3, r1
 80291e8:	6013      	str	r3, [r2, #0]
}
 80291ea:	b003      	add	sp, #12
 80291ec:	f85d eb04 	ldr.w	lr, [sp], #4
  EwFreeVideo( surface );
 80291f0:	f7ec bacc 	b.w	801578c <EwFreeVideo>
 80291f4:	9001      	str	r0, [sp, #4]
  EwBspGraphicsWaitForCompletion();
 80291f6:	f001 f8b9 	bl	802a36c <EwBspGraphicsWaitForCompletion>
 80291fa:	9801      	ldr	r0, [sp, #4]
}
 80291fc:	e7ef      	b.n	80291de <GfxDestroySurface+0xe>
 80291fe:	bf00      	nop
 8029200:	200003a4 	.word	0x200003a4
 8029204:	200002e8 	.word	0x200002e8

08029208 <GfxLockSurface>:
{
 8029208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802920c:	4604      	mov	r4, r0
  if (( surface->Flags & EW_SURFACE_TRANSACTION_MASK ) == TransactionNumber )
 802920e:	4817      	ldr	r0, [pc, #92]	; (802926c <GfxLockSurface+0x64>)
 8029210:	68a3      	ldr	r3, [r4, #8]
 8029212:	8800      	ldrh	r0, [r0, #0]
{
 8029214:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029216:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  if (( surface->Flags & EW_SURFACE_TRANSACTION_MASK ) == TransactionNumber )
 8029218:	fa1f fc83 	uxth.w	ip, r3
 802921c:	4584      	cmp	ip, r0
{
 802921e:	4688      	mov	r8, r1
 8029220:	4615      	mov	r5, r2
  if (( surface->Flags & EW_SURFACE_TRANSACTION_MASK ) == TransactionNumber )
 8029222:	d01e      	beq.n	8029262 <GfxLockSurface+0x5a>
  if ( surface->Flags & EW_SURFACE_MODIFIED_BY_GA )
 8029224:	015a      	lsls	r2, r3, #5
    surface->Flags &= ~EW_SURFACE_MODIFIED_BY_GA;
 8029226:	bf44      	itt	mi
 8029228:	f023 6380 	bicmi.w	r3, r3, #67108864	; 0x4000000
 802922c:	60a3      	strmi	r3, [r4, #8]
  if ( aWritePixel )
 802922e:	b11f      	cbz	r7, 8029238 <GfxLockSurface+0x30>
    surface->Flags |= EW_SURFACE_MODIFIED_BY_CPU;
 8029230:	68a3      	ldr	r3, [r4, #8]
 8029232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8029236:	60a3      	str	r3, [r4, #8]
  EwZero( aMemory, sizeof( XSurfaceMemory ));
 8029238:	4630      	mov	r0, r6
 802923a:	211c      	movs	r1, #28
 802923c:	f000 fac0 	bl	80297c0 <EwZero>
  aMemory->Pixel1  = (unsigned char*)surface->Pixel + (( aY * surface->Width ) + aX ) * surface->BytesPerPixel;
 8029240:	6823      	ldr	r3, [r4, #0]
 8029242:	68e2      	ldr	r2, [r4, #12]
 8029244:	69a7      	ldr	r7, [r4, #24]
  aMemory->Clut    = surface->Clut;
 8029246:	6a60      	ldr	r0, [r4, #36]	; 0x24
  aMemory->Pitch1X = surface->BytesPerPixel;
 8029248:	6072      	str	r2, [r6, #4]
  aMemory->Pixel1  = (unsigned char*)surface->Pixel + (( aY * surface->Width ) + aX ) * surface->BytesPerPixel;
 802924a:	fb05 8103 	mla	r1, r5, r3, r8
  aMemory->Pitch1Y = surface->Width * surface->BytesPerPixel;
 802924e:	fb02 f303 	mul.w	r3, r2, r3
  aMemory->Pixel1  = (unsigned char*)surface->Pixel + (( aY * surface->Width ) + aX ) * surface->BytesPerPixel;
 8029252:	fb02 7201 	mla	r2, r2, r1, r7
  aMemory->Clut    = surface->Clut;
 8029256:	61b0      	str	r0, [r6, #24]
  aMemory->Pixel1  = (unsigned char*)surface->Pixel + (( aY * surface->Width ) + aX ) * surface->BytesPerPixel;
 8029258:	6032      	str	r2, [r6, #0]
  aMemory->Pitch1Y = surface->Width * surface->BytesPerPixel;
 802925a:	60b3      	str	r3, [r6, #8]
}
 802925c:	2001      	movs	r0, #1
 802925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  EwBspGraphicsWaitForCompletion();
 8029262:	f001 f883 	bl	802a36c <EwBspGraphicsWaitForCompletion>
 8029266:	68a3      	ldr	r3, [r4, #8]
}
 8029268:	e7dc      	b.n	8029224 <GfxLockSurface+0x1c>
 802926a:	bf00      	nop
 802926c:	200003a4 	.word	0x200003a4

08029270 <GfxUnlockSurface>:
}
 8029270:	4770      	bx	lr
 8029272:	bf00      	nop

08029274 <GfxFillDriver>:
*   None
*
*******************************************************************************/
void GfxFillDriver( unsigned long aDstHandle, int aDstX, int aDstY,
  int aWidth, int aHeight, int aBlend, unsigned long* aColors )
{
 8029274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int          dstFormat = dstSurface->Format;

#ifndef EW_DONT_USE_GFX_EMULATION

  /* make a software emulation of the drawing function */
  if ( UseGraphicsAccelerator == 0 )
 8029278:	4c3b      	ldr	r4, [pc, #236]	; (8029368 <GfxFillDriver+0xf4>)
  int          dstFormat = dstSurface->Format;
 802927a:	f8d0 a010 	ldr.w	sl, [r0, #16]
  if ( UseGraphicsAccelerator == 0 )
 802927e:	7826      	ldrb	r6, [r4, #0]
{
 8029280:	b0a7      	sub	sp, #156	; 0x9c
 8029282:	4689      	mov	r9, r1
 8029284:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8029288:	4615      	mov	r5, r2
 802928a:	461f      	mov	r7, r3
  if ( UseGraphicsAccelerator == 0 )
 802928c:	2e00      	cmp	r6, #0
 802928e:	d038      	beq.n	8029302 <GfxFillDriver+0x8e>
  else

#endif
  {
    uint32_t dstColorFormat = DMA2D_OUTPUT_ARGB8888;
    uint32_t color = ( EW_ALPHA( aColors[0]) << 24 )
 8029290:	9b32      	ldr	r3, [sp, #200]	; 0xc8
  TransactionNumber++;
 8029292:	4936      	ldr	r1, [pc, #216]	; (802936c <GfxFillDriver+0xf8>)
    uint32_t color = ( EW_ALPHA( aColors[0]) << 24 )
 8029294:	681a      	ldr	r2, [r3, #0]
  TransactionNumber++;
 8029296:	880b      	ldrh	r3, [r1, #0]
                   | ( EW_RED  ( aColors[0]) << 16 )
 8029298:	0416      	lsls	r6, r2, #16
 802929a:	4604      	mov	r4, r0
  TransactionNumber++;
 802929c:	3301      	adds	r3, #1
                   | ( EW_GREEN( aColors[0]) <<  8 )
                   |   EW_BLUE ( aColors[0]);
 802929e:	f3c2 4007 	ubfx	r0, r2, #16, #8
                   | ( EW_RED  ( aColors[0]) << 16 )
 80292a2:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
  TransactionNumber++;
 80292a6:	b29b      	uxth	r3, r3
    uint32_t color = ( EW_ALPHA( aColors[0]) << 24 )
 80292a8:	4306      	orrs	r6, r0
 80292aa:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  TransactionNumber++;
 80292ae:	800b      	strh	r3, [r1, #0]
    uint32_t color = ( EW_ALPHA( aColors[0]) << 24 )
 80292b0:	4316      	orrs	r6, r2
  if ( dstSurface )
 80292b2:	b144      	cbz	r4, 80292c6 <GfxFillDriver+0x52>
    if ( dstSurface->Flags & EW_SURFACE_MODIFIED_BY_CPU )
 80292b4:	68a2      	ldr	r2, [r4, #8]
      dstSurface->Flags &= ~EW_SURFACE_MODIFIED_BY_CPU;
 80292b6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    dstSurface->Flags |= ( TransactionNumber & EW_SURFACE_TRANSACTION_MASK );
 80292ba:	0c12      	lsrs	r2, r2, #16
 80292bc:	0412      	lsls	r2, r2, #16
 80292be:	4313      	orrs	r3, r2
 80292c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80292c4:	60a3      	str	r3, [r4, #8]

    /* obtain direct access to the destination buffer */
    GfxSelectSurfaces( aDstHandle, 0 );

    /* get the start address in the destination and the offset */
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 80292c6:	6821      	ldr	r1, [r4, #0]
 80292c8:	68e2      	ldr	r2, [r4, #12]
 80292ca:	69a0      	ldr	r0, [r4, #24]
 80292cc:	fb05 9501 	mla	r5, r5, r1, r9
    dstOfs = dstSurface->Width - aWidth;

    /* change the destination color format, if necessary */
    if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 80292d0:	f1ba 3fff 	cmp.w	sl, #4294967295
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 80292d4:	fb02 0005 	mla	r0, r2, r5, r0

    /* choose the appropriate DMA2D drawing operation */
    if ( aBlend )
 80292d8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 80292da:	bf14      	ite	ne
 80292dc:	2300      	movne	r3, #0
 80292de:	2302      	moveq	r3, #2
      EwBspGraphicsFillBlend( (uint32_t)dst, dstOfs, aWidth, aHeight, dstColorFormat, color );
 80292e0:	e9cd 3600 	strd	r3, r6, [sp]
    dstOfs = dstSurface->Width - aWidth;
 80292e4:	1bc9      	subs	r1, r1, r7
      EwBspGraphicsFillBlend( (uint32_t)dst, dstOfs, aWidth, aHeight, dstColorFormat, color );
 80292e6:	4643      	mov	r3, r8
    if ( aBlend )
 80292e8:	b92a      	cbnz	r2, 80292f6 <GfxFillDriver+0x82>
    else
      EwBspGraphicsFill( (uint32_t)dst, dstOfs, aWidth, aHeight, dstColorFormat, color );
 80292ea:	463a      	mov	r2, r7
 80292ec:	f001 f84c 	bl	802a388 <EwBspGraphicsFill>
  }
}
 80292f0:	b027      	add	sp, #156	; 0x9c
 80292f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EwBspGraphicsFillBlend( (uint32_t)dst, dstOfs, aWidth, aHeight, dstColorFormat, color );
 80292f6:	463a      	mov	r2, r7
 80292f8:	f001 f882 	bl	802a400 <EwBspGraphicsFillBlend>
}
 80292fc:	b027      	add	sp, #156	; 0x9c
 80292fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 8029302:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8029306:	2301      	movs	r3, #1
 8029308:	e9cd 6605 	strd	r6, r6, [sp, #20]
 802930c:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8029310:	e9cd 6600 	strd	r6, r6, [sp]
 8029314:	9304      	str	r3, [sp, #16]
 8029316:	4632      	mov	r2, r6
 8029318:	4633      	mov	r3, r6
 802931a:	4631      	mov	r1, r6
 802931c:	f8cd b01c 	str.w	fp, [sp, #28]
 8029320:	f7ff ff72 	bl	8029208 <GfxLockSurface>
    if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 8029324:	f1ba 3fff 	cmp.w	sl, #4294967295
      worker = aBlend ? EwScreenFillRowSolidBlend : EwScreenFillRowSolid;
 8029328:	bf0b      	itete	eq
 802932a:	4b11      	ldreq	r3, [pc, #68]	; (8029370 <GfxFillDriver+0xfc>)
      worker = aBlend ? EwFillRowSolidBlend : EwFillRowSolid;
 802932c:	4b11      	ldrne	r3, [pc, #68]	; (8029374 <GfxFillDriver+0x100>)
      worker = aBlend ? EwScreenFillRowSolidBlend : EwScreenFillRowSolid;
 802932e:	4c12      	ldreq	r4, [pc, #72]	; (8029378 <GfxFillDriver+0x104>)
      worker = aBlend ? EwFillRowSolidBlend : EwFillRowSolid;
 8029330:	4c12      	ldrne	r4, [pc, #72]	; (802937c <GfxFillDriver+0x108>)
 8029332:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    EwInitColorGradient( aWidth, aHeight, (unsigned int*)aColors, &gradient );
 8029334:	ae10      	add	r6, sp, #64	; 0x40
      worker = aBlend ? EwFillRowSolidBlend : EwFillRowSolid;
 8029336:	2a00      	cmp	r2, #0
 8029338:	bf08      	it	eq
 802933a:	461c      	moveq	r4, r3
    EwInitColorGradient( aWidth, aHeight, (unsigned int*)aColors, &gradient );
 802933c:	4641      	mov	r1, r8
 802933e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8029340:	4633      	mov	r3, r6
 8029342:	4638      	mov	r0, r7
 8029344:	f7ea fe64 	bl	8014010 <EwInitColorGradient>
    EwEmulateFill( &dstMem, aDstX, aDstY, aWidth, aHeight, &gradient, aWidth, aHeight, worker );
 8029348:	e9cd 8403 	strd	r8, r4, [sp, #12]
 802934c:	9601      	str	r6, [sp, #4]
 802934e:	9702      	str	r7, [sp, #8]
 8029350:	f8cd 8000 	str.w	r8, [sp]
 8029354:	463b      	mov	r3, r7
 8029356:	462a      	mov	r2, r5
 8029358:	4649      	mov	r1, r9
 802935a:	4658      	mov	r0, fp
 802935c:	f7eb f8de 	bl	801451c <EwEmulateFill>
}
 8029360:	b027      	add	sp, #156	; 0x9c
 8029362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029366:	bf00      	nop
 8029368:	2000002c 	.word	0x2000002c
 802936c:	200003a4 	.word	0x200003a4
 8029370:	08003503 	.word	0x08003503
 8029374:	08000655 	.word	0x08000655
 8029378:	0800358b 	.word	0x0800358b
 802937c:	0800068b 	.word	0x0800068b

08029380 <GfxCopyDriver>:
*
*******************************************************************************/
void GfxCopyDriver( unsigned long aDstHandle, unsigned long aSrcHandle,
  int aDstX, int aDstY, int aSrcX, int aSrcY, int aWidth, int aHeight,
  int aBlend, unsigned long* aColors )
{
 8029380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int          srcFormat = srcSurface->Format;

#ifndef EW_DONT_USE_GFX_EMULATION

  /* make a software emulation of the drawing function */
  if ( UseGraphicsAccelerator == 0 )
 8029384:	4c6e      	ldr	r4, [pc, #440]	; (8029540 <GfxCopyDriver+0x1c0>)
  int          dstFormat = dstSurface->Format;
 8029386:	f8d0 a010 	ldr.w	sl, [r0, #16]
  if ( UseGraphicsAccelerator == 0 )
 802938a:	7824      	ldrb	r4, [r4, #0]
  int          srcFormat = srcSurface->Format;
 802938c:	f8d1 8010 	ldr.w	r8, [r1, #16]
{
 8029390:	b0af      	sub	sp, #188	; 0xbc
 8029392:	460d      	mov	r5, r1
 8029394:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 8029398:	9308      	str	r3, [sp, #32]
 802939a:	4617      	mov	r7, r2
  if ( UseGraphicsAccelerator == 0 )
 802939c:	2c00      	cmp	r4, #0
 802939e:	d15f      	bne.n	8029460 <GfxCopyDriver+0xe0>
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
    XGradient      gradient;
    XCopyWorker    worker = 0;

    /* obtain direct access to the destination and source buffer */
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80293a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80293a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80293a8:	e9cd 4400 	strd	r4, r4, [sp]
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
 80293ac:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80293ae:	2301      	movs	r3, #1
 80293b0:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80293b4:	9304      	str	r3, [sp, #16]
 80293b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80293ba:	4623      	mov	r3, r4
 80293bc:	4622      	mov	r2, r4
 80293be:	4621      	mov	r1, r4
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
 80293c0:	78f6      	ldrb	r6, [r6, #3]
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80293c2:	f7ff ff21 	bl	8029208 <GfxLockSurface>
    GfxLockSurface( aSrcHandle, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, &srcMem );
 80293c6:	2301      	movs	r3, #1
 80293c8:	9303      	str	r3, [sp, #12]
 80293ca:	ab11      	add	r3, sp, #68	; 0x44
 80293cc:	9307      	str	r3, [sp, #28]
 80293ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80293d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80293d6:	9404      	str	r4, [sp, #16]
 80293d8:	9400      	str	r4, [sp, #0]
 80293da:	4628      	mov	r0, r5
 80293dc:	4623      	mov	r3, r4
 80293de:	4622      	mov	r2, r4
 80293e0:	4621      	mov	r1, r4
 80293e2:	f7ff ff11 	bl	8029208 <GfxLockSurface>

    /* select the necessary drawing function */
    if ( srcFormat == EW_PIXEL_FORMAT_NATIVE )
 80293e6:	f1b8 0f00 	cmp.w	r8, #0
 80293ea:	d125      	bne.n	8029438 <GfxCopyDriver+0xb8>
    {
      if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 80293ec:	f1ba 3fff 	cmp.w	sl, #4294967295
        worker = (alpha == 0xFF) ? EwScreenCopyNativeRow : EwScreenCopyNativeRowSolid;
 80293f0:	bf07      	ittee	eq
 80293f2:	4c54      	ldreq	r4, [pc, #336]	; (8029544 <GfxCopyDriver+0x1c4>)
 80293f4:	4b54      	ldreq	r3, [pc, #336]	; (8029548 <GfxCopyDriver+0x1c8>)
      else
        worker = (alpha == 0xFF) ? EwCopyNativeRow : EwCopyNativeRowSolid;
 80293f6:	4c55      	ldrne	r4, [pc, #340]	; (802954c <GfxCopyDriver+0x1cc>)
 80293f8:	4b55      	ldrne	r3, [pc, #340]	; (8029550 <GfxCopyDriver+0x1d0>)
 80293fa:	2eff      	cmp	r6, #255	; 0xff
 80293fc:	bf18      	it	ne
 80293fe:	461c      	movne	r4, r3
      else
        worker = (alpha == 0xFF) ? EwCopyIndex8Row : EwCopyIndex8RowSolid;
    }

    /* let the Graphics Engine make the drawing operation */
    EwInitColorGradient( aWidth, aHeight, (unsigned int*)aColors, &gradient );
 8029400:	ad18      	add	r5, sp, #96	; 0x60
 8029402:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8029404:	993b      	ldr	r1, [sp, #236]	; 0xec
 8029406:	462b      	mov	r3, r5
 8029408:	4658      	mov	r0, fp
 802940a:	f7ea fe01 	bl	8014010 <EwInitColorGradient>
    EwEmulateCopy( &dstMem, &srcMem, aDstX, aDstY, aWidth, aHeight, aSrcX, aSrcY, &gradient, aWidth, aHeight, worker );
 802940e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8029410:	9504      	str	r5, [sp, #16]
 8029412:	e9cd b305 	strd	fp, r3, [sp, #20]
 8029416:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8029418:	9303      	str	r3, [sp, #12]
 802941a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802941c:	9302      	str	r3, [sp, #8]
 802941e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8029420:	9407      	str	r4, [sp, #28]
 8029422:	e9cd b300 	strd	fp, r3, [sp]
 8029426:	463a      	mov	r2, r7
 8029428:	9b08      	ldr	r3, [sp, #32]
 802942a:	a911      	add	r1, sp, #68	; 0x44
 802942c:	4648      	mov	r0, r9
 802942e:	f7eb f946 	bl	80146be <EwEmulateCopy>
    }

    /* choose the appropriate DMA2D drawing operation */
    EwBspGraphicsCopy( (uint32_t)dst, (uint32_t)src, dstOfs, srcOfs, aWidth, aHeight, dstColorFormat, srcColorFormat, color );
  }
}
 8029432:	b02f      	add	sp, #188	; 0xbc
 8029434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 8029438:	f1b8 0f02 	cmp.w	r8, #2
 802943c:	d054      	beq.n	80294e8 <GfxCopyDriver+0x168>
    else if ( srcFormat == EW_PIXEL_FORMAT_RGB565 )
 802943e:	f1b8 0f03 	cmp.w	r8, #3
 8029442:	d06f      	beq.n	8029524 <GfxCopyDriver+0x1a4>
    else if ( srcFormat == EW_PIXEL_FORMAT_INDEX8 )
 8029444:	f1b8 0f01 	cmp.w	r8, #1
 8029448:	d1da      	bne.n	8029400 <GfxCopyDriver+0x80>
      if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 802944a:	f1ba 3fff 	cmp.w	sl, #4294967295
        worker = (alpha == 0xFF) ? EwScreenCopyIndex8Row : EwScreenCopyIndex8RowSolid;
 802944e:	bf07      	ittee	eq
 8029450:	4c40      	ldreq	r4, [pc, #256]	; (8029554 <GfxCopyDriver+0x1d4>)
 8029452:	4b41      	ldreq	r3, [pc, #260]	; (8029558 <GfxCopyDriver+0x1d8>)
        worker = (alpha == 0xFF) ? EwCopyIndex8Row : EwCopyIndex8RowSolid;
 8029454:	4c41      	ldrne	r4, [pc, #260]	; (802955c <GfxCopyDriver+0x1dc>)
 8029456:	4b42      	ldrne	r3, [pc, #264]	; (8029560 <GfxCopyDriver+0x1e0>)
 8029458:	2eff      	cmp	r6, #255	; 0xff
 802945a:	bf18      	it	ne
 802945c:	461c      	movne	r4, r3
 802945e:	e7cf      	b.n	8029400 <GfxCopyDriver+0x80>
    uint32_t color          = ( EW_ALPHA( aColors[0]) << 24 )
 8029460:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8029462:	681b      	ldr	r3, [r3, #0]
                            | ( EW_RED  ( aColors[0]) << 16 )
 8029464:	041c      	lsls	r4, r3, #16
                            |   EW_BLUE ( aColors[0]);
 8029466:	f3c3 4207 	ubfx	r2, r3, #16, #8
                            | ( EW_RED  ( aColors[0]) << 16 )
 802946a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    uint32_t color          = ( EW_ALPHA( aColors[0]) << 24 )
 802946e:	4314      	orrs	r4, r2
 8029470:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8029474:	4681      	mov	r9, r0
 8029476:	431c      	orrs	r4, r3
    GfxSelectSurfaces( aDstHandle, aSrcHandle );
 8029478:	f7ff fc44 	bl	8028d04 <GfxSelectSurfaces>
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 802947c:	9e08      	ldr	r6, [sp, #32]
 802947e:	6802      	ldr	r2, [r0, #0]
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 8029480:	680b      	ldr	r3, [r1, #0]
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 8029482:	68c0      	ldr	r0, [r0, #12]
 8029484:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8029488:	fb06 7602 	mla	r6, r6, r2, r7
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 802948c:	9f39      	ldr	r7, [sp, #228]	; 0xe4
 802948e:	46bc      	mov	ip, r7
 8029490:	9f38      	ldr	r7, [sp, #224]	; 0xe0
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 8029492:	f1ba 3fff 	cmp.w	sl, #4294967295
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 8029496:	fb00 1606 	mla	r6, r0, r6, r1
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 802949a:	68e9      	ldr	r1, [r5, #12]
 802949c:	69a8      	ldr	r0, [r5, #24]
 802949e:	fb0c 7703 	mla	r7, ip, r3, r7
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 80294a2:	bf14      	ite	ne
 80294a4:	f04f 0900 	movne.w	r9, #0
 80294a8:	f04f 0902 	moveq.w	r9, #2
    if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 80294ac:	f1b8 0f02 	cmp.w	r8, #2
    dstOfs = dstSurface->Width - aWidth;
 80294b0:	eba2 020b 	sub.w	r2, r2, fp
    srcOfs = srcSurface->Width - aWidth;
 80294b4:	eba3 030b 	sub.w	r3, r3, fp
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 80294b8:	fb01 0707 	mla	r7, r1, r7, r0
    if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 80294bc:	d02e      	beq.n	802951c <GfxCopyDriver+0x19c>
    else if ( srcFormat == EW_PIXEL_FORMAT_RGB565 )
 80294be:	f1b8 0f03 	cmp.w	r8, #3
 80294c2:	d02d      	beq.n	8029520 <GfxCopyDriver+0x1a0>
    else if ( srcFormat == EW_PIXEL_FORMAT_INDEX8 )
 80294c4:	f1b8 0f01 	cmp.w	r8, #1
 80294c8:	d015      	beq.n	80294f6 <GfxCopyDriver+0x176>
    uint32_t srcColorFormat = DMA2D_INPUT_ARGB8888;
 80294ca:	2100      	movs	r1, #0
    EwBspGraphicsCopy( (uint32_t)dst, (uint32_t)src, dstOfs, srcOfs, aWidth, aHeight, dstColorFormat, srcColorFormat, color );
 80294cc:	e9cd 1403 	strd	r1, r4, [sp, #12]
 80294d0:	993b      	ldr	r1, [sp, #236]	; 0xec
 80294d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80294d6:	e9cd b100 	strd	fp, r1, [sp]
 80294da:	4630      	mov	r0, r6
 80294dc:	4639      	mov	r1, r7
 80294de:	f000 ffe9 	bl	802a4b4 <EwBspGraphicsCopy>
}
 80294e2:	b02f      	add	sp, #188	; 0xbc
 80294e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        worker = EwCopyAlpha8RowSolid;
 80294e8:	4c1e      	ldr	r4, [pc, #120]	; (8029564 <GfxCopyDriver+0x1e4>)
 80294ea:	4b1f      	ldr	r3, [pc, #124]	; (8029568 <GfxCopyDriver+0x1e8>)
 80294ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80294f0:	bf18      	it	ne
 80294f2:	461c      	movne	r4, r3
 80294f4:	e784      	b.n	8029400 <GfxCopyDriver+0x80>
      if ( srcSurface != LoadedClutSurface )
 80294f6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802957c <GfxCopyDriver+0x1fc>
 80294fa:	f8d8 1000 	ldr.w	r1, [r8]
 80294fe:	42a9      	cmp	r1, r5
 8029500:	d01b      	beq.n	802953a <GfxCopyDriver+0x1ba>
        EwBspGraphicsLoadClut( (uint32_t)srcSurface->Clut, 256 );
 8029502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8029506:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8029508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802950c:	f001 f898 	bl	802a640 <EwBspGraphicsLoadClut>
        LoadedClutSurface = srcSurface;
 8029510:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8029514:	f8c8 5000 	str.w	r5, [r8]
      srcColorFormat = DMA2D_INPUT_L8;
 8029518:	2105      	movs	r1, #5
 802951a:	e7d7      	b.n	80294cc <GfxCopyDriver+0x14c>
      srcColorFormat = DMA2D_INPUT_A8;
 802951c:	2109      	movs	r1, #9
 802951e:	e7d5      	b.n	80294cc <GfxCopyDriver+0x14c>
      srcColorFormat = DMA2D_INPUT_RGB565;
 8029520:	2102      	movs	r1, #2
 8029522:	e7d3      	b.n	80294cc <GfxCopyDriver+0x14c>
      if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 8029524:	f1ba 3fff 	cmp.w	sl, #4294967295
        worker = (alpha == 0xFF) ? EwScreenCopyRGB565Row : EwScreenCopyRGB565RowSolid;
 8029528:	bf07      	ittee	eq
 802952a:	4c10      	ldreq	r4, [pc, #64]	; (802956c <GfxCopyDriver+0x1ec>)
 802952c:	4b10      	ldreq	r3, [pc, #64]	; (8029570 <GfxCopyDriver+0x1f0>)
        worker = (alpha == 0xFF) ? EwCopyRGB565Row : EwCopyRGB565RowSolid;
 802952e:	4c11      	ldrne	r4, [pc, #68]	; (8029574 <GfxCopyDriver+0x1f4>)
 8029530:	4b11      	ldrne	r3, [pc, #68]	; (8029578 <GfxCopyDriver+0x1f8>)
 8029532:	2eff      	cmp	r6, #255	; 0xff
 8029534:	bf18      	it	ne
 8029536:	461c      	movne	r4, r3
 8029538:	e762      	b.n	8029400 <GfxCopyDriver+0x80>
      srcColorFormat = DMA2D_INPUT_L8;
 802953a:	2105      	movs	r1, #5
 802953c:	e7c6      	b.n	80294cc <GfxCopyDriver+0x14c>
 802953e:	bf00      	nop
 8029540:	2000002c 	.word	0x2000002c
 8029544:	0800374d 	.word	0x0800374d
 8029548:	08003805 	.word	0x08003805
 802954c:	08000885 	.word	0x08000885
 8029550:	08000931 	.word	0x08000931
 8029554:	080039a1 	.word	0x080039a1
 8029558:	08003a63 	.word	0x08003a63
 802955c:	08000ae1 	.word	0x08000ae1
 8029560:	08000ba5 	.word	0x08000ba5
 8029564:	08003c2d 	.word	0x08003c2d
 8029568:	08000d85 	.word	0x08000d85
 802956c:	08003f11 	.word	0x08003f11
 8029570:	08003f29 	.word	0x08003f29
 8029574:	08001045 	.word	0x08001045
 8029578:	08001087 	.word	0x08001087
 802957c:	200003a0 	.word	0x200003a0

08029580 <GfxBlendDriver>:
*
*******************************************************************************/
void GfxBlendDriver( unsigned long aDstHandle, unsigned long aSrcHandle,
  int aDstX, int aDstY, int aSrcX, int aSrcY, int aWidth, int aHeight,
  int aBlend, unsigned long* aColors )
{
 8029580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int          dstFormat = dstSurface->Format;

#ifndef EW_DONT_USE_GFX_EMULATION

  /* make a software emulation of the drawing function */
  if ( UseGraphicsAccelerator == 0 )
 8029584:	4c6c      	ldr	r4, [pc, #432]	; (8029738 <GfxBlendDriver+0x1b8>)
  int          dstFormat = dstSurface->Format;
 8029586:	f8d0 a010 	ldr.w	sl, [r0, #16]
  if ( UseGraphicsAccelerator == 0 )
 802958a:	7824      	ldrb	r4, [r4, #0]
  int          srcFormat = srcSurface->Format;
 802958c:	f8d1 8010 	ldr.w	r8, [r1, #16]
{
 8029590:	b0af      	sub	sp, #188	; 0xbc
 8029592:	460d      	mov	r5, r1
 8029594:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 8029598:	9308      	str	r3, [sp, #32]
 802959a:	4617      	mov	r7, r2
  if ( UseGraphicsAccelerator == 0 )
 802959c:	2c00      	cmp	r4, #0
 802959e:	d15f      	bne.n	8029660 <GfxBlendDriver+0xe0>
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
    XGradient      gradient;
    XCopyWorker    worker = 0;

    /* obtain direct access to the destination and source buffer */
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80295a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80295a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80295a8:	e9cd 4400 	strd	r4, r4, [sp]
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
 80295ac:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80295ae:	2301      	movs	r3, #1
 80295b0:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80295b4:	9304      	str	r3, [sp, #16]
 80295b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80295ba:	4623      	mov	r3, r4
 80295bc:	4622      	mov	r2, r4
 80295be:	4621      	mov	r1, r4
    unsigned char  alpha  = EW_ALPHA( aColors[0]);
 80295c0:	78f6      	ldrb	r6, [r6, #3]
    GfxLockSurface( aDstHandle, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, &dstMem );
 80295c2:	f7ff fe21 	bl	8029208 <GfxLockSurface>
    GfxLockSurface( aSrcHandle, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, &srcMem );
 80295c6:	2301      	movs	r3, #1
 80295c8:	9303      	str	r3, [sp, #12]
 80295ca:	ab11      	add	r3, sp, #68	; 0x44
 80295cc:	9307      	str	r3, [sp, #28]
 80295ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80295d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80295d6:	9404      	str	r4, [sp, #16]
 80295d8:	9400      	str	r4, [sp, #0]
 80295da:	4628      	mov	r0, r5
 80295dc:	4623      	mov	r3, r4
 80295de:	4622      	mov	r2, r4
 80295e0:	4621      	mov	r1, r4
 80295e2:	f7ff fe11 	bl	8029208 <GfxLockSurface>

    /* select the necessary drawing function */
    if ( srcFormat == EW_PIXEL_FORMAT_NATIVE )
 80295e6:	f1b8 0f00 	cmp.w	r8, #0
 80295ea:	d125      	bne.n	8029638 <GfxBlendDriver+0xb8>
    {
      if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 80295ec:	f1ba 3fff 	cmp.w	sl, #4294967295
        worker = (alpha == 0xFF) ? EwScreenCopyNativeRowBlend : EwScreenCopyNativeRowSolidBlend;
 80295f0:	bf07      	ittee	eq
 80295f2:	4c52      	ldreq	r4, [pc, #328]	; (802973c <GfxBlendDriver+0x1bc>)
 80295f4:	4b52      	ldreq	r3, [pc, #328]	; (8029740 <GfxBlendDriver+0x1c0>)
      else
        worker = (alpha == 0xFF) ? EwCopyNativeRowBlend : EwCopyNativeRowSolidBlend;
 80295f6:	4c53      	ldrne	r4, [pc, #332]	; (8029744 <GfxBlendDriver+0x1c4>)
 80295f8:	4b53      	ldrne	r3, [pc, #332]	; (8029748 <GfxBlendDriver+0x1c8>)
 80295fa:	2eff      	cmp	r6, #255	; 0xff
 80295fc:	bf18      	it	ne
 80295fe:	461c      	movne	r4, r3
      else
        worker = (alpha == 0xFF) ? EwCopyIndex8RowBlend : EwCopyIndex8RowSolidBlend;
    }

    /* let the Graphics Engine make the drawing operation */
    EwInitColorGradient( aWidth, aHeight, (unsigned int*)aColors, &gradient );
 8029600:	ad18      	add	r5, sp, #96	; 0x60
 8029602:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8029604:	993b      	ldr	r1, [sp, #236]	; 0xec
 8029606:	462b      	mov	r3, r5
 8029608:	4658      	mov	r0, fp
 802960a:	f7ea fd01 	bl	8014010 <EwInitColorGradient>
    EwEmulateCopy( &dstMem, &srcMem, aDstX, aDstY, aWidth, aHeight, aSrcX, aSrcY, &gradient, aWidth, aHeight, worker );
 802960e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8029610:	9504      	str	r5, [sp, #16]
 8029612:	e9cd b305 	strd	fp, r3, [sp, #20]
 8029616:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8029618:	9303      	str	r3, [sp, #12]
 802961a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802961c:	9302      	str	r3, [sp, #8]
 802961e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8029620:	9407      	str	r4, [sp, #28]
 8029622:	e9cd b300 	strd	fp, r3, [sp]
 8029626:	463a      	mov	r2, r7
 8029628:	9b08      	ldr	r3, [sp, #32]
 802962a:	a911      	add	r1, sp, #68	; 0x44
 802962c:	4648      	mov	r0, r9
 802962e:	f7eb f846 	bl	80146be <EwEmulateCopy>
    }

    /* choose the appropriate DMA2D drawing operation */
    EwBspGraphicsCopyBlend( (uint32_t)dst, (uint32_t)src, dstOfs, srcOfs, aWidth, aHeight, dstColorFormat, srcColorFormat, color );
  }
}
 8029632:	b02f      	add	sp, #188	; 0xbc
 8029634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 8029638:	f1b8 0f02 	cmp.w	r8, #2
 802963c:	d054      	beq.n	80296e8 <GfxBlendDriver+0x168>
    else if ( srcFormat == EW_PIXEL_FORMAT_RGB565 )
 802963e:	f1b8 0f03 	cmp.w	r8, #3
 8029642:	d06f      	beq.n	8029724 <GfxBlendDriver+0x1a4>
    else if ( srcFormat == EW_PIXEL_FORMAT_INDEX8 )
 8029644:	f1b8 0f01 	cmp.w	r8, #1
 8029648:	d1da      	bne.n	8029600 <GfxBlendDriver+0x80>
      if ( dstFormat == EW_PIXEL_FORMAT_SCREEN )
 802964a:	f1ba 3fff 	cmp.w	sl, #4294967295
        worker = (alpha == 0xFF) ? EwScreenCopyIndex8RowBlend : EwScreenCopyIndex8RowSolidBlend;
 802964e:	bf07      	ittee	eq
 8029650:	4c3e      	ldreq	r4, [pc, #248]	; (802974c <GfxBlendDriver+0x1cc>)
 8029652:	4b3f      	ldreq	r3, [pc, #252]	; (8029750 <GfxBlendDriver+0x1d0>)
        worker = (alpha == 0xFF) ? EwCopyIndex8RowBlend : EwCopyIndex8RowSolidBlend;
 8029654:	4c3f      	ldrne	r4, [pc, #252]	; (8029754 <GfxBlendDriver+0x1d4>)
 8029656:	4b40      	ldrne	r3, [pc, #256]	; (8029758 <GfxBlendDriver+0x1d8>)
 8029658:	2eff      	cmp	r6, #255	; 0xff
 802965a:	bf18      	it	ne
 802965c:	461c      	movne	r4, r3
 802965e:	e7cf      	b.n	8029600 <GfxBlendDriver+0x80>
    uint32_t color          = ( EW_ALPHA( aColors[0]) << 24 )
 8029660:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8029662:	681b      	ldr	r3, [r3, #0]
                            | ( EW_RED  ( aColors[0]) << 16 )
 8029664:	041c      	lsls	r4, r3, #16
                            |   EW_BLUE ( aColors[0]);
 8029666:	f3c3 4207 	ubfx	r2, r3, #16, #8
                            | ( EW_RED  ( aColors[0]) << 16 )
 802966a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    uint32_t color          = ( EW_ALPHA( aColors[0]) << 24 )
 802966e:	4314      	orrs	r4, r2
 8029670:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8029674:	4681      	mov	r9, r0
 8029676:	431c      	orrs	r4, r3
    GfxSelectSurfaces( aDstHandle, aSrcHandle );
 8029678:	f7ff fb44 	bl	8028d04 <GfxSelectSurfaces>
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 802967c:	9e08      	ldr	r6, [sp, #32]
 802967e:	6802      	ldr	r2, [r0, #0]
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 8029680:	680b      	ldr	r3, [r1, #0]
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 8029682:	68c0      	ldr	r0, [r0, #12]
 8029684:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8029688:	fb06 7602 	mla	r6, r6, r2, r7
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 802968c:	9f39      	ldr	r7, [sp, #228]	; 0xe4
 802968e:	46bc      	mov	ip, r7
 8029690:	9f38      	ldr	r7, [sp, #224]	; 0xe0
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 8029692:	f1ba 3fff 	cmp.w	sl, #4294967295
    dst    = (void*)((unsigned char*)dstSurface->Pixel + (( aDstY * dstSurface->Width ) + aDstX ) * dstSurface->BytesPerPixel );
 8029696:	fb00 1606 	mla	r6, r0, r6, r1
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 802969a:	68e9      	ldr	r1, [r5, #12]
 802969c:	69a8      	ldr	r0, [r5, #24]
 802969e:	fb0c 7703 	mla	r7, ip, r3, r7
      dstColorFormat = DMA2D_OUTPUT_RGB565;
 80296a2:	bf14      	ite	ne
 80296a4:	f04f 0900 	movne.w	r9, #0
 80296a8:	f04f 0902 	moveq.w	r9, #2
    if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 80296ac:	f1b8 0f02 	cmp.w	r8, #2
    dstOfs = dstSurface->Width - aWidth;
 80296b0:	eba2 020b 	sub.w	r2, r2, fp
    srcOfs = srcSurface->Width - aWidth;
 80296b4:	eba3 030b 	sub.w	r3, r3, fp
    src    = (void*)((unsigned char*)srcSurface->Pixel + (( aSrcY * srcSurface->Width ) + aSrcX ) * srcSurface->BytesPerPixel );
 80296b8:	fb01 0707 	mla	r7, r1, r7, r0
    if ( srcFormat == EW_PIXEL_FORMAT_ALPHA8 )
 80296bc:	d02e      	beq.n	802971c <GfxBlendDriver+0x19c>
    else if ( srcFormat == EW_PIXEL_FORMAT_RGB565 )
 80296be:	f1b8 0f03 	cmp.w	r8, #3
 80296c2:	d02d      	beq.n	8029720 <GfxBlendDriver+0x1a0>
    else if ( srcFormat == EW_PIXEL_FORMAT_INDEX8 )
 80296c4:	f1b8 0f01 	cmp.w	r8, #1
 80296c8:	d015      	beq.n	80296f6 <GfxBlendDriver+0x176>
    uint32_t srcColorFormat = DMA2D_INPUT_ARGB8888;
 80296ca:	2100      	movs	r1, #0
    EwBspGraphicsCopyBlend( (uint32_t)dst, (uint32_t)src, dstOfs, srcOfs, aWidth, aHeight, dstColorFormat, srcColorFormat, color );
 80296cc:	e9cd 1403 	strd	r1, r4, [sp, #12]
 80296d0:	993b      	ldr	r1, [sp, #236]	; 0xec
 80296d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80296d6:	e9cd b100 	strd	fp, r1, [sp]
 80296da:	4630      	mov	r0, r6
 80296dc:	4639      	mov	r1, r7
 80296de:	f000 ff53 	bl	802a588 <EwBspGraphicsCopyBlend>
}
 80296e2:	b02f      	add	sp, #188	; 0xbc
 80296e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        worker = EwCopyAlpha8RowSolidBlend;
 80296e8:	4c1c      	ldr	r4, [pc, #112]	; (802975c <GfxBlendDriver+0x1dc>)
 80296ea:	4b1d      	ldr	r3, [pc, #116]	; (8029760 <GfxBlendDriver+0x1e0>)
 80296ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80296f0:	bf18      	it	ne
 80296f2:	461c      	movne	r4, r3
 80296f4:	e784      	b.n	8029600 <GfxBlendDriver+0x80>
      if ( srcSurface != LoadedClutSurface )
 80296f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 802976c <GfxBlendDriver+0x1ec>
 80296fa:	f8d8 1000 	ldr.w	r1, [r8]
 80296fe:	42a9      	cmp	r1, r5
 8029700:	d017      	beq.n	8029732 <GfxBlendDriver+0x1b2>
        EwBspGraphicsLoadClut( (uint32_t)srcSurface->Clut, 256 );
 8029702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8029706:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8029708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802970c:	f000 ff98 	bl	802a640 <EwBspGraphicsLoadClut>
        LoadedClutSurface = srcSurface;
 8029710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8029714:	f8c8 5000 	str.w	r5, [r8]
      srcColorFormat = DMA2D_INPUT_L8;
 8029718:	2105      	movs	r1, #5
 802971a:	e7d7      	b.n	80296cc <GfxBlendDriver+0x14c>
      srcColorFormat = DMA2D_INPUT_A8;
 802971c:	2109      	movs	r1, #9
 802971e:	e7d5      	b.n	80296cc <GfxBlendDriver+0x14c>
      srcColorFormat = DMA2D_INPUT_RGB565;
 8029720:	2102      	movs	r1, #2
 8029722:	e7d3      	b.n	80296cc <GfxBlendDriver+0x14c>
        worker = EwCopyRGB565RowSolidBlend;
 8029724:	4c0f      	ldr	r4, [pc, #60]	; (8029764 <GfxBlendDriver+0x1e4>)
 8029726:	4b10      	ldr	r3, [pc, #64]	; (8029768 <GfxBlendDriver+0x1e8>)
 8029728:	f1ba 3fff 	cmp.w	sl, #4294967295
 802972c:	bf18      	it	ne
 802972e:	461c      	movne	r4, r3
 8029730:	e766      	b.n	8029600 <GfxBlendDriver+0x80>
      srcColorFormat = DMA2D_INPUT_L8;
 8029732:	2105      	movs	r1, #5
 8029734:	e7ca      	b.n	80296cc <GfxBlendDriver+0x14c>
 8029736:	bf00      	nop
 8029738:	2000002c 	.word	0x2000002c
 802973c:	08003797 	.word	0x08003797
 8029740:	08003857 	.word	0x08003857
 8029744:	0800089d 	.word	0x0800089d
 8029748:	0800095d 	.word	0x0800095d
 802974c:	080039f3 	.word	0x080039f3
 8029750:	08003abf 	.word	0x08003abf
 8029754:	08000b01 	.word	0x08000b01
 8029758:	08000bd9 	.word	0x08000bd9
 802975c:	08003cbd 	.word	0x08003cbd
 8029760:	08000ddd 	.word	0x08000ddd
 8029764:	08003f65 	.word	0x08003f65
 8029768:	080010d9 	.word	0x080010d9
 802976c:	200003a0 	.word	0x200003a0

08029770 <EwAlloc>:
*   there is no memory available.
*
*******************************************************************************/
void* EwAlloc( int aSize )
{
  void* mem = EwAllocHeapBlock( aSize );
 8029770:	f7ef bd2c 	b.w	80191cc <EwAllocHeapBlock>

08029774 <EwFree>:
*   None
*
*******************************************************************************/
void EwFree( void* aMemory )
{
  EwFreeHeapBlock( aMemory );
 8029774:	f7ef be0e 	b.w	8019394 <EwFreeHeapBlock>

08029778 <EwPanic>:
* RETURN VALUE:
*   EwPanic() will never return.
*
*******************************************************************************/
void EwPanic( void )
{
 8029778:	b508      	push	{r3, lr}
  /* Print out the message ... */
  EwPrint( "\nPANIC: System halted\n" );
 802977a:	4802      	ldr	r0, [pc, #8]	; (8029784 <EwPanic+0xc>)
 802977c:	f7ee fe5a 	bl	8018434 <EwPrint>

  /* ... and stay in the never ending loop */
  for ( ;; )
 8029780:	e7fe      	b.n	8029780 <EwPanic+0x8>
 8029782:	bf00      	nop
 8029784:	08039798 	.word	0x08039798

08029788 <EwConsoleOutput>:
*   None
*
*******************************************************************************/
void EwConsoleOutput( const char* aMessage )
{
  while( *aMessage )
 8029788:	7803      	ldrb	r3, [r0, #0]
 802978a:	b1ab      	cbz	r3, 80297b8 <EwConsoleOutput+0x30>
{
 802978c:	b510      	push	{r4, lr}
 802978e:	4604      	mov	r4, r0
 8029790:	e005      	b.n	802979e <EwConsoleOutput+0x16>
  {
    /* add carriage return in case of newline */
    if ( *aMessage == '\n' )
      EwBspConsolePutCharacter( '\r' );

    EwBspConsolePutCharacter( *aMessage++ );
 8029792:	f814 0b01 	ldrb.w	r0, [r4], #1
 8029796:	f000 faf7 	bl	8029d88 <EwBspConsolePutCharacter>
  while( *aMessage )
 802979a:	7823      	ldrb	r3, [r4, #0]
 802979c:	b15b      	cbz	r3, 80297b6 <EwConsoleOutput+0x2e>
    if ( *aMessage == '\n' )
 802979e:	2b0a      	cmp	r3, #10
 80297a0:	d1f7      	bne.n	8029792 <EwConsoleOutput+0xa>
      EwBspConsolePutCharacter( '\r' );
 80297a2:	200d      	movs	r0, #13
 80297a4:	f000 faf0 	bl	8029d88 <EwBspConsolePutCharacter>
    EwBspConsolePutCharacter( *aMessage++ );
 80297a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80297ac:	f000 faec 	bl	8029d88 <EwBspConsolePutCharacter>
  while( *aMessage )
 80297b0:	7823      	ldrb	r3, [r4, #0]
 80297b2:	2b00      	cmp	r3, #0
 80297b4:	d1f3      	bne.n	802979e <EwConsoleOutput+0x16>
  }
}
 80297b6:	bd10      	pop	{r4, pc}
 80297b8:	4770      	bx	lr
 80297ba:	bf00      	nop

080297bc <EwGetTicks>:
*   Number of milliseconds since the system was started.
*
*******************************************************************************/
unsigned long EwGetTicks( void )
{
  return EwBspClockGetTicks();
 80297bc:	f000 b922 	b.w	8029a04 <EwBspClockGetTicks>

080297c0 <EwZero>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwZero( void* aDstPtr, int aCount )
{
 80297c0:	460a      	mov	r2, r1
  memset( aDstPtr, 0, aCount );
 80297c2:	2100      	movs	r1, #0
 80297c4:	f007 bb58 	b.w	8030e78 <memset>

080297c8 <EwFill>:
*   None
*
*******************************************************************************/
void EwFill( void* aDstPtr, unsigned char aValue, int aCount )
{
  memset( aDstPtr, aValue, aCount );
 80297c8:	f007 bb56 	b.w	8030e78 <memset>

080297cc <EwMove>:
*   None
*
*******************************************************************************/
void EwMove( void* aDstPtr, const void* aSrcPtr, int aCount )
{
  memmove( aDstPtr, aSrcPtr, aCount );
 80297cc:	f007 bb3a 	b.w	8030e44 <memmove>

080297d0 <EwCopy>:
*   None
*
*******************************************************************************/
void EwCopy( void* aDstPtr, const void* aSrcPtr, int aCount )
{
  memcpy( aDstPtr, aSrcPtr, aCount );
 80297d0:	f007 bb2a 	b.w	8030e28 <memcpy>

080297d4 <EwMathSin>:
*******************************************************************************/
XFloat EwMathSin( XFloat aAngle )
{
  static const float factor = (float)( 3.1415926535 / 180.0 );

  return sinf( aAngle * factor );
 80297d4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80297e0 <EwMathSin+0xc>
 80297d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80297dc:	f008 bc50 	b.w	8032080 <sinf>
 80297e0:	3c8efa35 	.word	0x3c8efa35

080297e4 <EwMathCos>:
*******************************************************************************/
XFloat EwMathCos( XFloat aAngle )
{
  static const float factor = (float)( 3.1415926535 / 180.0 );

  return cosf( aAngle * factor );
 80297e4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80297f0 <EwMathCos+0xc>
 80297e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80297ec:	f008 bbbe 	b.w	8031f6c <cosf>
 80297f0:	3c8efa35 	.word	0x3c8efa35

080297f4 <EwMathArcCos>:
* RETURN VALUE:
*   Returns the determinated angle in the range 0 .. +180 degress.
*
*******************************************************************************/
XFloat EwMathArcCos( XFloat aValue )
{
 80297f4:	b508      	push	{r3, lr}
  static const float factor = (float)( 180.0 / 3.1415926535 );

  return acosf( aValue ) * factor;
 80297f6:	f008 fc85 	bl	8032104 <acosf>
 80297fa:	eddf 7a02 	vldr	s15, [pc, #8]	; 8029804 <EwMathArcCos+0x10>
}
 80297fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8029802:	bd08      	pop	{r3, pc}
 8029804:	42652ee1 	.word	0x42652ee1

08029808 <EwMathSqrt>:
* RETURN VALUE:
*   Returns the determinated square root value.
*
*******************************************************************************/
XFloat EwMathSqrt( XFloat aValue )
{
 8029808:	b508      	push	{r3, lr}
 802980a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 802980e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029812:	ed2d 8b02 	vpush	{d8}
  return sqrtf( aValue );
 8029816:	eeb1 8ac0 	vsqrt.f32	s16, s0
 802981a:	d404      	bmi.n	8029826 <EwMathSqrt+0x1e>
}
 802981c:	eeb0 0a48 	vmov.f32	s0, s16
 8029820:	ecbd 8b02 	vpop	{d8}
 8029824:	bd08      	pop	{r3, pc}
  return sqrtf( aValue );
 8029826:	f008 fd37 	bl	8032298 <sqrtf>
 802982a:	e7f7      	b.n	802981c <EwMathSqrt+0x14>

0802982c <EwMathPow>:
*   Returns the determinated power value.
*
*******************************************************************************/
XFloat EwMathPow( XFloat aA, XFloat aB )
{
  return powf( aA, aB );
 802982c:	f008 bc9c 	b.w	8032168 <powf>

08029830 <EwMathRandInt32>:
* RETURN VALUE:
*   Returns the determinated random value.
*
*******************************************************************************/
XInt32 EwMathRandInt32( XInt32 aValue1, XInt32 aValue2 )
{
 8029830:	b570      	push	{r4, r5, r6, lr}
  unsigned int r;

  /* For the first time set the random start value */
  if ( !RandInitialized )
 8029832:	4e0b      	ldr	r6, [pc, #44]	; (8029860 <EwMathRandInt32+0x30>)
 8029834:	6833      	ldr	r3, [r6, #0]
{
 8029836:	4605      	mov	r5, r0
 8029838:	460c      	mov	r4, r1
  if ( !RandInitialized )
 802983a:	b153      	cbz	r3, 8029852 <EwMathRandInt32+0x22>
  {
    srand((unsigned)EwGetTime());
    RandInitialized = 1;
  }

  r = rand();
 802983c:	f007 fb52 	bl	8030ee4 <rand>
  r = ( r & 0xFFFF ) ^ ( r >> 16 );
 8029840:	b283      	uxth	r3, r0
  return aValue1 + (((int)r * ( aValue2 - aValue1 )) >> 16 );
 8029842:	1b64      	subs	r4, r4, r5
  r = ( r & 0xFFFF ) ^ ( r >> 16 );
 8029844:	ea83 4310 	eor.w	r3, r3, r0, lsr #16
  return aValue1 + (((int)r * ( aValue2 - aValue1 )) >> 16 );
 8029848:	fb03 f304 	mul.w	r3, r3, r4
}
 802984c:	eb05 4023 	add.w	r0, r5, r3, asr #16
 8029850:	bd70      	pop	{r4, r5, r6, pc}
  return EwBspClockGetTime();
 8029852:	f000 f8dd 	bl	8029a10 <EwBspClockGetTime>
    srand((unsigned)EwGetTime());
 8029856:	f007 fb17 	bl	8030e88 <srand>
    RandInitialized = 1;
 802985a:	2301      	movs	r3, #1
 802985c:	6033      	str	r3, [r6, #0]
 802985e:	e7ed      	b.n	802983c <EwMathRandInt32+0xc>
 8029860:	200003a8 	.word	0x200003a8

08029864 <EwMathFloor>:
*   Returns the floor rounded value.
*
*******************************************************************************/
XFloat EwMathFloor( XFloat aValue )
{
  return floorf( aValue );
 8029864:	f008 bbca 	b.w	8031ffc <floorf>

08029868 <EwMathCeil>:
*   Returns the ceil rounded value.
*
*******************************************************************************/
XFloat EwMathCeil( XFloat aValue )
{
  return ceilf( aValue );
 8029868:	f008 bb3e 	b.w	8031ee8 <ceilf>

0802986c <ft6x06_Init>:
  uint8_t idx = 0;

  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 802986c:	4a06      	ldr	r2, [pc, #24]	; (8029888 <ft6x06_Init+0x1c>)
 802986e:	7813      	ldrb	r3, [r2, #0]
 8029870:	4298      	cmp	r0, r3
 8029872:	d004      	beq.n	802987e <ft6x06_Init+0x12>
 8029874:	7851      	ldrb	r1, [r2, #1]
 8029876:	4288      	cmp	r0, r1
 8029878:	d001      	beq.n	802987e <ft6x06_Init+0x12>
 802987a:	b113      	cbz	r3, 8029882 <ft6x06_Init+0x16>
 802987c:	b101      	cbz	r1, 8029880 <ft6x06_Init+0x14>
}
 802987e:	4770      	bx	lr
    if(ft6x06[idx] == DeviceAddr)
 8029880:	2301      	movs	r3, #1
      ft6x06[empty] = DeviceAddr;
 8029882:	54d0      	strb	r0, [r2, r3]
      TS_IO_Init();
 8029884:	f001 bd7e 	b.w	802b384 <TS_IO_Init>
 8029888:	200003ac 	.word	0x200003ac

0802988c <ft6x06_ReadID>:
{
 802988c:	b510      	push	{r4, lr}
 802988e:	4604      	mov	r4, r0
  TS_IO_Init();
 8029890:	f001 fd78 	bl	802b384 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8029894:	b2e0      	uxtb	r0, r4
 8029896:	21a8      	movs	r1, #168	; 0xa8
 8029898:	f001 fd94 	bl	802b3c4 <TS_IO_Read>
}
 802989c:	b280      	uxth	r0, r0
 802989e:	bd10      	pop	{r4, pc}

080298a0 <ft6x06_TS_Start>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80298a0:	b2c0      	uxtb	r0, r0
 80298a2:	2200      	movs	r2, #0
 80298a4:	21a4      	movs	r1, #164	; 0xa4
 80298a6:	f001 bd6f 	b.w	802b388 <TS_IO_Write>
 80298aa:	bf00      	nop

080298ac <ft6x06_TS_DetectTouch>:
{
 80298ac:	b510      	push	{r4, lr}
 80298ae:	b082      	sub	sp, #8
  volatile uint8_t nbTouch = 0;
 80298b0:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80298b2:	2102      	movs	r1, #2
 80298b4:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80298b6:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80298ba:	f001 fd83 	bl	802b3c4 <TS_IO_Read>
 80298be:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80298c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80298c6:	f003 030f 	and.w	r3, r3, #15
 80298ca:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80298ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80298d2:	2b02      	cmp	r3, #2
    nbTouch = 0;
 80298d4:	bf88      	it	hi
 80298d6:	f88d 4007 	strbhi.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80298da:	4b05      	ldr	r3, [pc, #20]	; (80298f0 <ft6x06_TS_DetectTouch+0x44>)
 80298dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
  return(nbTouch);
 80298e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80298e4:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80298e6:	2200      	movs	r2, #0
 80298e8:	709a      	strb	r2, [r3, #2]
}
 80298ea:	b002      	add	sp, #8
 80298ec:	bd10      	pop	{r4, pc}
 80298ee:	bf00      	nop
 80298f0:	200003b0 	.word	0x200003b0

080298f4 <ft6x06_TS_GetXY>:
{
 80298f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80298f6:	4c1b      	ldr	r4, [pc, #108]	; (8029964 <ft6x06_TS_GetXY+0x70>)
 80298f8:	f894 c002 	ldrb.w	ip, [r4, #2]
 80298fc:	f894 e001 	ldrb.w	lr, [r4, #1]
 8029900:	45e6      	cmp	lr, ip
{
 8029902:	b083      	sub	sp, #12
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8029904:	d92a      	bls.n	802995c <ft6x06_TS_GetXY+0x68>
    switch(ft6x06_handle.currActiveTouchIdx)
 8029906:	460f      	mov	r7, r1
 8029908:	4616      	mov	r6, r2
 802990a:	461d      	mov	r5, r3
 802990c:	f1bc 0f00 	cmp.w	ip, #0
 8029910:	d026      	beq.n	8029960 <ft6x06_TS_GetXY+0x6c>
      regAddress = FT6206_P2_XH_REG;
 8029912:	f1bc 0f01 	cmp.w	ip, #1
 8029916:	bf14      	ite	ne
 8029918:	2100      	movne	r1, #0
 802991a:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy));
 802991c:	2304      	movs	r3, #4
 802991e:	eb0d 0203 	add.w	r2, sp, r3
 8029922:	b2c0      	uxtb	r0, r0
 8029924:	f001 fd70 	bl	802b408 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8029928:	f89d 3004 	ldrb.w	r3, [sp, #4]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 802992c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8029930:	f89d 0005 	ldrb.w	r0, [sp, #5]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8029934:	f89d 1007 	ldrb.w	r1, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8029938:	021b      	lsls	r3, r3, #8
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 802993a:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 802993e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8029942:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8029946:	4303      	orrs	r3, r0
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8029948:	ea41 010c 	orr.w	r1, r1, ip
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 802994c:	803b      	strh	r3, [r7, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 802994e:	8031      	strh	r1, [r6, #0]
    if ( aId )
 8029950:	b10d      	cbz	r5, 8029956 <ft6x06_TS_GetXY+0x62>
      *aId = (uint8_t)(( dataxy[2] & 0xF0) >> 4 );
 8029952:	0912      	lsrs	r2, r2, #4
 8029954:	702a      	strb	r2, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8029956:	78a3      	ldrb	r3, [r4, #2]
 8029958:	3301      	adds	r3, #1
 802995a:	70a3      	strb	r3, [r4, #2]
}
 802995c:	b003      	add	sp, #12
 802995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8029960:	2103      	movs	r1, #3
 8029962:	e7db      	b.n	802991c <ft6x06_TS_GetXY+0x28>
 8029964:	200003b0 	.word	0x200003b0

08029968 <HAL_RTC_MspInit>:
  *        the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8029968:	b510      	push	{r4, lr}
 802996a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef        RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configure LSE as RTC clock source ##################################*/
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 802996c:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 802996e:	2300      	movs	r3, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8029970:	2401      	movs	r4, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8029972:	4668      	mov	r0, sp
  RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8029974:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8029978:	9200      	str	r2, [sp, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 802997a:	9402      	str	r4, [sp, #8]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802997c:	f004 ff06 	bl	802e78c <HAL_RCC_OscConfig>
 8029980:	b108      	cbz	r0, 8029986 <HAL_RTC_MspInit+0x1e>
  }

  /*##-2- Enable RTC peripheral Clocks #######################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
}
 8029982:	b01c      	add	sp, #112	; 0x70
 8029984:	bd10      	pop	{r4, pc}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8029986:	2220      	movs	r2, #32
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8029988:	f44f 7380 	mov.w	r3, #256	; 0x100
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802998c:	a80d      	add	r0, sp, #52	; 0x34
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 802998e:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8029990:	9318      	str	r3, [sp, #96]	; 0x60
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029992:	f004 fd41 	bl	802e418 <HAL_RCCEx_PeriphCLKConfig>
 8029996:	2800      	cmp	r0, #0
 8029998:	d1f3      	bne.n	8029982 <HAL_RTC_MspInit+0x1a>
  __HAL_RCC_RTC_ENABLE();
 802999a:	4b02      	ldr	r3, [pc, #8]	; (80299a4 <HAL_RTC_MspInit+0x3c>)
 802999c:	601c      	str	r4, [r3, #0]
}
 802999e:	b01c      	add	sp, #112	; 0x70
 80299a0:	bd10      	pop	{r4, pc}
 80299a2:	bf00      	nop
 80299a4:	42470e3c 	.word	0x42470e3c

080299a8 <EwBspClockInit>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspClockInit( void )
{
 80299a8:	b538      	push	{r3, r4, r5, lr}
  RtcHandle.Instance = RTC;

  EmWiSystemTicks = 0;
  HAL_SYSTICK_Config( SystemCoreClock / 1000 );
 80299aa:	4b0d      	ldr	r3, [pc, #52]	; (80299e0 <EwBspClockInit+0x38>)
 80299ac:	4a0d      	ldr	r2, [pc, #52]	; (80299e4 <EwBspClockInit+0x3c>)
 80299ae:	6818      	ldr	r0, [r3, #0]
  RtcHandle.Instance = RTC;
 80299b0:	4c0d      	ldr	r4, [pc, #52]	; (80299e8 <EwBspClockInit+0x40>)
  EmWiSystemTicks = 0;
 80299b2:	4b0e      	ldr	r3, [pc, #56]	; (80299ec <EwBspClockInit+0x44>)
  RtcHandle.Instance = RTC;
 80299b4:	490e      	ldr	r1, [pc, #56]	; (80299f0 <EwBspClockInit+0x48>)
 80299b6:	6021      	str	r1, [r4, #0]
  HAL_SYSTICK_Config( SystemCoreClock / 1000 );
 80299b8:	fba2 2000 	umull	r2, r0, r2, r0
  EmWiSystemTicks = 0;
 80299bc:	2500      	movs	r5, #0
  HAL_SYSTICK_Config( SystemCoreClock / 1000 );
 80299be:	0980      	lsrs	r0, r0, #6
  EmWiSystemTicks = 0;
 80299c0:	601d      	str	r5, [r3, #0]
  HAL_SYSTICK_Config( SystemCoreClock / 1000 );
 80299c2:	f002 f9d5 	bl	802bd70 <HAL_SYSTICK_Config>
     - OutPut         = Output Disable
     - OutPutPolarity = High Polarity
     - OutPutType     = Open Drain */
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
  RtcHandle.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
  RtcHandle.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 80299c6:	23f9      	movs	r3, #249	; 0xf9
  RtcHandle.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
 80299c8:	227f      	movs	r2, #127	; 0x7f
  RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80299ca:	e9c4 5504 	strd	r5, r5, [r4, #16]
  RtcHandle.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 80299ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;

  HAL_RTC_Init( &RtcHandle );
 80299d2:	4620      	mov	r0, r4
  RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 80299d4:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 80299d6:	61a5      	str	r5, [r4, #24]
}
 80299d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_RTC_Init( &RtcHandle );
 80299dc:	f005 b95c 	b.w	802ec98 <HAL_RTC_Init>
 80299e0:	20000040 	.word	0x20000040
 80299e4:	10624dd3 	.word	0x10624dd3
 80299e8:	200003bc 	.word	0x200003bc
 80299ec:	200003b4 	.word	0x200003b4
 80299f0:	40002800 	.word	0x40002800

080299f4 <EwBspClockTickIncrement>:
*   None
*
*******************************************************************************/
void EwBspClockTickIncrement( void )
{
  EmWiSystemTicks++;
 80299f4:	4a02      	ldr	r2, [pc, #8]	; (8029a00 <EwBspClockTickIncrement+0xc>)
 80299f6:	6813      	ldr	r3, [r2, #0]
 80299f8:	3301      	adds	r3, #1
 80299fa:	6013      	str	r3, [r2, #0]
}
 80299fc:	4770      	bx	lr
 80299fe:	bf00      	nop
 8029a00:	200003b4 	.word	0x200003b4

08029a04 <EwBspClockGetTicks>:
*   The current ticks counter value.
*
*******************************************************************************/
unsigned long EwBspClockGetTicks( void )
{
  return EmWiSystemTicks;
 8029a04:	4b01      	ldr	r3, [pc, #4]	; (8029a0c <EwBspClockGetTicks+0x8>)
 8029a06:	6818      	ldr	r0, [r3, #0]
}
 8029a08:	4770      	bx	lr
 8029a0a:	bf00      	nop
 8029a0c:	200003b4 	.word	0x200003b4

08029a10 <EwBspClockGetTime>:
* RETURN VALUE:
*   The current time in seconds since 01.01.1970.
*
*******************************************************************************/
unsigned long EwBspClockGetTime( void )
{
 8029a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029a12:	b087      	sub	sp, #28
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;

  HAL_RTC_GetTime( &RtcHandle, &currentTime, RTC_FORMAT_BIN );
 8029a14:	a901      	add	r1, sp, #4
 8029a16:	2200      	movs	r2, #0
 8029a18:	4819      	ldr	r0, [pc, #100]	; (8029a80 <EwBspClockGetTime+0x70>)
 8029a1a:	f005 f8a7 	bl	802eb6c <HAL_RTC_GetTime>
  HAL_RTC_GetDate( &RtcHandle, &currentDate, RTC_FORMAT_BIN );
 8029a1e:	4669      	mov	r1, sp
 8029a20:	2200      	movs	r2, #0
 8029a22:	4817      	ldr	r0, [pc, #92]	; (8029a80 <EwBspClockGetTime+0x70>)
 8029a24:	f005 f8d6 	bl	802ebd4 <HAL_RTC_GetDate>

  unsigned long   days;
  unsigned long   year   = currentDate.Year;
 8029a28:	f89d 6003 	ldrb.w	r6, [sp, #3]
  unsigned long   month  = currentDate.Month;
 8029a2c:	f89d 1001 	ldrb.w	r1, [sp, #1]
  unsigned long   day    = currentDate.Date;
  unsigned long   hour   = currentTime.Hours;
  unsigned long   minute = currentTime.Minutes;
 8029a30:	f89d 2005 	ldrb.w	r2, [sp, #5]
  unsigned long   hour   = currentTime.Hours;
 8029a34:	f89d 0004 	ldrb.w	r0, [sp, #4]
  unsigned long   day    = currentDate.Date;
 8029a38:	f89d 5002 	ldrb.w	r5, [sp, #2]
  unsigned long   second = currentTime.Seconds;
 8029a3c:	f89d 4006 	ldrb.w	r4, [sp, #6]

  /* year is the number of years since 2000 */
  /* calculate number of days since 01.01.1970 until begin of current
     year including the additional days of leap years */

  days = (year + 30) * 365 + (year + 27) / 4;
 8029a40:	f642 27c6 	movw	r7, #10950	; 0x2ac6
 8029a44:	f240 136d 	movw	r3, #365	; 0x16d
 8029a48:	fb03 7306 	mla	r3, r3, r6, r7
 8029a4c:	f106 071b 	add.w	r7, r6, #27

  if (year & 0x3)
 8029a50:	07b6      	lsls	r6, r6, #30
  {
    days += DaysToMonth[month - 1];
 8029a52:	bf14      	ite	ne
 8029a54:	4e0b      	ldrne	r6, [pc, #44]	; (8029a84 <EwBspClockGetTime+0x74>)
  }
  else
  {
    days += DaysToMonthInLeapYear[month - 1];
 8029a56:	4e0c      	ldreq	r6, [pc, #48]	; (8029a88 <EwBspClockGetTime+0x78>)
    days += DaysToMonth[month - 1];
 8029a58:	3901      	subs	r1, #1
  days = (year + 30) * 365 + (year + 27) / 4;
 8029a5a:	eb03 0397 	add.w	r3, r3, r7, lsr #2
    days += DaysToMonthInLeapYear[month - 1];
 8029a5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
  days += day;

  timeInSeconds =
    days   * RtcTicksPerDay +
    hour   * RtcTicksPerHour +
    minute * RtcTicksPerMinute +
 8029a62:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    days += DaysToMonthInLeapYear[month - 1];
 8029a66:	440b      	add	r3, r1
    minute * RtcTicksPerMinute +
 8029a68:	0092      	lsls	r2, r2, #2
    hour   * RtcTicksPerHour +
 8029a6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  timeInSeconds =
 8029a6e:	fb01 2200 	mla	r2, r1, r0, r2
    days   * RtcTicksPerDay +
 8029a72:	4806      	ldr	r0, [pc, #24]	; (8029a8c <EwBspClockGetTime+0x7c>)
  days += day;
 8029a74:	442b      	add	r3, r5
  timeInSeconds =
 8029a76:	4422      	add	r2, r4
    second;

  return timeInSeconds;
}
 8029a78:	fb00 2003 	mla	r0, r0, r3, r2
 8029a7c:	b007      	add	sp, #28
 8029a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a80:	200003bc 	.word	0x200003bc
 8029a84:	080397b0 	.word	0x080397b0
 8029a88:	080397e4 	.word	0x080397e4
 8029a8c:	00015180 	.word	0x00015180

08029a90 <EwBspClockSetTime>:
  unsigned int day;
  unsigned int hour;
  unsigned int minute;
  unsigned int second;

  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029a90:	4b5c      	ldr	r3, [pc, #368]	; (8029c04 <EwBspClockSetTime+0x174>)
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
  second  = ( unsigned int ) (( aTime / RtcTicksPerSecond  ) % 60 );

  /* calculation of the date */
  day       = ( unsigned int ) ( aTime / RtcTicksPerDay + 365);
 8029a92:	495d      	ldr	r1, [pc, #372]	; (8029c08 <EwBspClockSetTime+0x178>)
{
 8029a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029a96:	fba3 2300 	umull	r2, r3, r3, r0
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029a9a:	4c5c      	ldr	r4, [pc, #368]	; (8029c0c <EwBspClockSetTime+0x17c>)
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029a9c:	4e5c      	ldr	r6, [pc, #368]	; (8029c10 <EwBspClockSetTime+0x180>)
 8029a9e:	0adb      	lsrs	r3, r3, #11
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029aa0:	fba4 5200 	umull	r5, r2, r4, r0
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029aa4:	fba6 5603 	umull	r5, r6, r6, r3
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029aa8:	0952      	lsrs	r2, r2, #5
  day       = ( unsigned int ) ( aTime / RtcTicksPerDay + 365);
 8029aaa:	fba1 5100 	umull	r5, r1, r1, r0
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029aae:	0936      	lsrs	r6, r6, #4
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029ab0:	fba4 5402 	umull	r5, r4, r4, r2
  day       = ( unsigned int ) ( aTime / RtcTicksPerDay + 365);
 8029ab4:	0c09      	lsrs	r1, r1, #16
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029ab6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029aba:	0964      	lsrs	r4, r4, #5
  hour    = ( unsigned int ) (( aTime / RtcTicksPerHour    ) % 24 );
 8029abc:	eba3 06c6 	sub.w	r6, r3, r6, lsl #3
  day       = ( unsigned int ) ( aTime / RtcTicksPerDay + 365);
 8029ac0:	f201 176d 	addw	r7, r1, #365	; 0x16d

  if ( day >= 48213 )
 8029ac4:	f64b 4354 	movw	r3, #48212	; 0xbc54
  second  = ( unsigned int ) (( aTime / RtcTicksPerSecond  ) % 60 );
 8029ac8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029acc:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
  if ( day >= 48213 )
 8029ad0:	429f      	cmp	r7, r3
  minute  = ( unsigned int ) (( aTime / RtcTicksPerMinute  ) % 60 );
 8029ad2:	eba2 0484 	sub.w	r4, r2, r4, lsl #2
    day++;

  year4     = day / DaysPer4Years;
  day      -= year4 * DaysPer4Years;
  year      = day / 365;
 8029ad6:	4b4f      	ldr	r3, [pc, #316]	; (8029c14 <EwBspClockSetTime+0x184>)
  year4     = day / DaysPer4Years;
 8029ad8:	4a4f      	ldr	r2, [pc, #316]	; (8029c18 <EwBspClockSetTime+0x188>)
{
 8029ada:	b087      	sub	sp, #28
  second  = ( unsigned int ) (( aTime / RtcTicksPerSecond  ) % 60 );
 8029adc:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
  if ( day >= 48213 )
 8029ae0:	d96d      	bls.n	8029bbe <EwBspClockSetTime+0x12e>
    day++;
 8029ae2:	f501 71b7 	add.w	r1, r1, #366	; 0x16e
  year4     = day / DaysPer4Years;
 8029ae6:	fba2 0201 	umull	r0, r2, r2, r1
 8029aea:	09d2      	lsrs	r2, r2, #7
  day      -= year4 * DaysPer4Years;
 8029aec:	f240 50b5 	movw	r0, #1461	; 0x5b5
 8029af0:	fb00 1112 	mls	r1, r0, r2, r1
  year      = day / 365;
 8029af4:	fba3 0301 	umull	r0, r3, r3, r1
 8029af8:	1ac8      	subs	r0, r1, r3
 8029afa:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8029afe:	0a1b      	lsrs	r3, r3, #8

  if ( year == 4 )
 8029b00:	2b04      	cmp	r3, #4
 8029b02:	d04a      	beq.n	8029b9a <EwBspClockSetTime+0x10a>
 8029b04:	f240 106d 	movw	r0, #365	; 0x16d
 8029b08:	fb00 f003 	mul.w	r0, r0, r3
 8029b0c:	f203 73b1 	addw	r3, r3, #1969	; 0x7b1
    if ( !( year4 % 100 == LeapYearsFromBeginToNext400Year )
       && ( year4 %  25 == LeapYearsFromBeginToNext400Year ))
      year = 4;
  }

  day  -= year * 365;
 8029b10:	1a09      	subs	r1, r1, r0
  year  = year4 * 4 + year + 1969;
 8029b12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     for the month. */

  month = day >> 5;

  /* correct month if necessary */
  if ( ( year % 4 != 0 ) ||
 8029b16:	079b      	lsls	r3, r3, #30
  month = day >> 5;
 8029b18:	ea4f 1751 	mov.w	r7, r1, lsr #5
  if ( ( year % 4 != 0 ) ||
 8029b1c:	d02b      	beq.n	8029b76 <EwBspClockSetTime+0xe6>
      (( year % 100 == 0 ) && ( year % 400 != 0 )) )
  {
    /* no leap year */
    if ( day >= DaysToMonth[ month + 1 ] )
 8029b1e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8029c34 <EwBspClockSetTime+0x1a4>
 8029b22:	1c78      	adds	r0, r7, #1
 8029b24:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
 8029b28:	428b      	cmp	r3, r1
 8029b2a:	d832      	bhi.n	8029b92 <EwBspClockSetTime+0x102>
  {
    /* leap year */
    if ( day >= DaysToMonthInLeapYear[ month + 1 ] )
      month++;

    day -= DaysToMonthInLeapYear[ month ];
 8029b2c:	1ac9      	subs	r1, r1, r3
  }

  memset( &rtcTime, 0, sizeof( rtcTime ));
 8029b2e:	2700      	movs	r7, #0
  memset( &rtcDate, 0, sizeof( rtcDate ));
  rtcTime.Hours   = hour;
  rtcTime.Minutes = minute;
  rtcTime.Seconds = second;
  rtcDate.Date    = day + 1;
 8029b30:	3101      	adds	r1, #1
  rtcDate.Month   = month + 1;
 8029b32:	3001      	adds	r0, #1
  rtcDate.Year    = year - 2000;
 8029b34:	f102 0330 	add.w	r3, r2, #48	; 0x30
  rtcDate.Date    = day + 1;
 8029b38:	f88d 1002 	strb.w	r1, [sp, #2]
  rtcDate.Month   = month + 1;
 8029b3c:	f88d 0001 	strb.w	r0, [sp, #1]

  HAL_RTC_SetTime( &RtcHandle, &rtcTime, RTC_FORMAT_BIN );
 8029b40:	463a      	mov	r2, r7
 8029b42:	a901      	add	r1, sp, #4
 8029b44:	4835      	ldr	r0, [pc, #212]	; (8029c1c <EwBspClockSetTime+0x18c>)
  memset( &rtcTime, 0, sizeof( rtcTime ));
 8029b46:	9701      	str	r7, [sp, #4]
  rtcDate.Year    = year - 2000;
 8029b48:	f88d 3003 	strb.w	r3, [sp, #3]
  memset( &rtcTime, 0, sizeof( rtcTime ));
 8029b4c:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8029b50:	e9cd 7704 	strd	r7, r7, [sp, #16]
  memset( &rtcDate, 0, sizeof( rtcDate ));
 8029b54:	f88d 7000 	strb.w	r7, [sp]
  rtcTime.Hours   = hour;
 8029b58:	f88d 6004 	strb.w	r6, [sp, #4]
  rtcTime.Minutes = minute;
 8029b5c:	f88d 4005 	strb.w	r4, [sp, #5]
  rtcTime.Seconds = second;
 8029b60:	f88d 5006 	strb.w	r5, [sp, #6]
  HAL_RTC_SetTime( &RtcHandle, &rtcTime, RTC_FORMAT_BIN );
 8029b64:	f005 f8ee 	bl	802ed44 <HAL_RTC_SetTime>
  HAL_RTC_SetDate( &RtcHandle, &rtcDate, RTC_FORMAT_BIN );
 8029b68:	463a      	mov	r2, r7
 8029b6a:	4669      	mov	r1, sp
 8029b6c:	482b      	ldr	r0, [pc, #172]	; (8029c1c <EwBspClockSetTime+0x18c>)
 8029b6e:	f005 f985 	bl	802ee7c <HAL_RTC_SetDate>
}
 8029b72:	b007      	add	sp, #28
 8029b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029b76:	4b2a      	ldr	r3, [pc, #168]	; (8029c20 <EwBspClockSetTime+0x190>)
  if ( ( year % 4 != 0 ) ||
 8029b78:	482a      	ldr	r0, [pc, #168]	; (8029c24 <EwBspClockSetTime+0x194>)
 8029b7a:	fb03 f302 	mul.w	r3, r3, r2
 8029b7e:	ebb0 0fb3 	cmp.w	r0, r3, ror #2
 8029b82:	d233      	bcs.n	8029bec <EwBspClockSetTime+0x15c>
    if ( day >= DaysToMonthInLeapYear[ month + 1 ] )
 8029b84:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8029c38 <EwBspClockSetTime+0x1a8>
 8029b88:	1c78      	adds	r0, r7, #1
 8029b8a:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
 8029b8e:	428b      	cmp	r3, r1
 8029b90:	d9cc      	bls.n	8029b2c <EwBspClockSetTime+0x9c>
 8029b92:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8029b96:	4638      	mov	r0, r7
 8029b98:	e7c8      	b.n	8029b2c <EwBspClockSetTime+0x9c>
 8029b9a:	4f23      	ldr	r7, [pc, #140]	; (8029c28 <EwBspClockSetTime+0x198>)
 8029b9c:	4b20      	ldr	r3, [pc, #128]	; (8029c20 <EwBspClockSetTime+0x190>)
       && ( year4 %  25 == LeapYearsFromBeginToNext400Year ))
 8029b9e:	4823      	ldr	r0, [pc, #140]	; (8029c2c <EwBspClockSetTime+0x19c>)
 8029ba0:	fb03 7302 	mla	r3, r3, r2, r7
 8029ba4:	4283      	cmp	r3, r0
 8029ba6:	f240 7cb5 	movw	ip, #1973	; 0x7b5
 8029baa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8029bae:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8029bb2:	f240 4047 	movw	r0, #1095	; 0x447
 8029bb6:	bf9c      	itt	ls
 8029bb8:	4663      	movls	r3, ip
 8029bba:	4638      	movls	r0, r7
 8029bbc:	e7a8      	b.n	8029b10 <EwBspClockSetTime+0x80>
  year4     = day / DaysPer4Years;
 8029bbe:	fba2 1207 	umull	r1, r2, r2, r7
 8029bc2:	09d2      	lsrs	r2, r2, #7
  day      -= year4 * DaysPer4Years;
 8029bc4:	f240 51b5 	movw	r1, #1461	; 0x5b5
 8029bc8:	fb01 7112 	mls	r1, r1, r2, r7
  year      = day / 365;
 8029bcc:	fba3 0301 	umull	r0, r3, r3, r1
 8029bd0:	1ac8      	subs	r0, r1, r3
 8029bd2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8029bd6:	0a1b      	lsrs	r3, r3, #8
  if ( year == 4 )
 8029bd8:	2b04      	cmp	r3, #4
 8029bda:	d193      	bne.n	8029b04 <EwBspClockSetTime+0x74>
    if ( !( year4 % 100 == LeapYearsFromBeginToNext400Year )
 8029bdc:	2a07      	cmp	r2, #7
 8029bde:	d1dc      	bne.n	8029b9a <EwBspClockSetTime+0x10a>
  day  -= year * 365;
 8029be0:	f2a1 4147 	subw	r1, r1, #1095	; 0x447
  month = day >> 5;
 8029be4:	094f      	lsrs	r7, r1, #5
  year  = year4 * 4 + year + 1969;
 8029be6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8029bea:	e7cb      	b.n	8029b84 <EwBspClockSetTime+0xf4>
      (( year % 100 == 0 ) && ( year % 400 != 0 )) )
 8029bec:	4810      	ldr	r0, [pc, #64]	; (8029c30 <EwBspClockSetTime+0x1a0>)
 8029bee:	ebb0 1f33 	cmp.w	r0, r3, ror #4
 8029bf2:	d2c7      	bcs.n	8029b84 <EwBspClockSetTime+0xf4>
    if ( day >= DaysToMonth[ month + 1 ] )
 8029bf4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8029c34 <EwBspClockSetTime+0x1a4>
 8029bf8:	1c78      	adds	r0, r7, #1
 8029bfa:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
 8029bfe:	428b      	cmp	r3, r1
 8029c00:	d994      	bls.n	8029b2c <EwBspClockSetTime+0x9c>
 8029c02:	e7c6      	b.n	8029b92 <EwBspClockSetTime+0x102>
 8029c04:	91a2b3c5 	.word	0x91a2b3c5
 8029c08:	c22e4507 	.word	0xc22e4507
 8029c0c:	88888889 	.word	0x88888889
 8029c10:	aaaaaaab 	.word	0xaaaaaaab
 8029c14:	6719f361 	.word	0x6719f361
 8029c18:	166db073 	.word	0x166db073
 8029c1c:	200003bc 	.word	0x200003bc
 8029c20:	c28f5c29 	.word	0xc28f5c29
 8029c24:	028f5c28 	.word	0x028f5c28
 8029c28:	ae147ae1 	.word	0xae147ae1
 8029c2c:	0a3d70a3 	.word	0x0a3d70a3
 8029c30:	00a3d70a 	.word	0x00a3d70a
 8029c34:	080397b0 	.word	0x080397b0
 8029c38:	080397e4 	.word	0x080397e4

08029c3c <EwBspClockCpuLoadSetActive>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspClockCpuLoadSetActive( void )
{
 8029c3c:	b430      	push	{r4, r5}
  #if EW_CPU_LOAD_MEASURING == 1

    static char initialized = 0;

    if ( !initialized )
 8029c3e:	4b14      	ldr	r3, [pc, #80]	; (8029c90 <EwBspClockCpuLoadSetActive+0x54>)
 8029c40:	781a      	ldrb	r2, [r3, #0]
 8029c42:	b15a      	cbz	r2, 8029c5c <EwBspClockCpuLoadSetActive+0x20>
 8029c44:	4a13      	ldr	r2, [pc, #76]	; (8029c94 <EwBspClockCpuLoadSetActive+0x58>)
 8029c46:	4814      	ldr	r0, [pc, #80]	; (8029c98 <EwBspClockCpuLoadSetActive+0x5c>)
 8029c48:	6814      	ldr	r4, [r2, #0]
 8029c4a:	6801      	ldr	r1, [r0, #0]
    cycCnt = DWT->CYCCNT;
 8029c4c:	4b13      	ldr	r3, [pc, #76]	; (8029c9c <EwBspClockCpuLoadSetActive+0x60>)
 8029c4e:	685b      	ldr	r3, [r3, #4]
    PrevCycCnt = cycCnt;
 8029c50:	6003      	str	r3, [r0, #0]
    {
      CycleCounterInit();
      initialized = 1;
    }

    SleepingTime += GetCycleCounterDelta();
 8029c52:	4423      	add	r3, r4
 8029c54:	1a5b      	subs	r3, r3, r1

  #endif
}
 8029c56:	bc30      	pop	{r4, r5}
    SleepingTime += GetCycleCounterDelta();
 8029c58:	6013      	str	r3, [r2, #0]
}
 8029c5a:	4770      	bx	lr
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8029c5c:	4910      	ldr	r1, [pc, #64]	; (8029ca0 <EwBspClockCpuLoadSetActive+0x64>)
    if ((*(uint32_t*)0xE0001FB4) & 1)
 8029c5e:	4811      	ldr	r0, [pc, #68]	; (8029ca4 <EwBspClockCpuLoadSetActive+0x68>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8029c60:	68ca      	ldr	r2, [r1, #12]
    if ((*(uint32_t*)0xE0001FB4) & 1)
 8029c62:	6800      	ldr	r0, [r0, #0]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8029c64:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8029c68:	60ca      	str	r2, [r1, #12]
    if ((*(uint32_t*)0xE0001FB4) & 1)
 8029c6a:	07c2      	lsls	r2, r0, #31
 8029c6c:	d502      	bpl.n	8029c74 <EwBspClockCpuLoadSetActive+0x38>
      *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8029c6e:	4a0e      	ldr	r2, [pc, #56]	; (8029ca8 <EwBspClockCpuLoadSetActive+0x6c>)
 8029c70:	490e      	ldr	r1, [pc, #56]	; (8029cac <EwBspClockCpuLoadSetActive+0x70>)
 8029c72:	6011      	str	r1, [r2, #0]
    DWT->CYCCNT = 0;
 8029c74:	4909      	ldr	r1, [pc, #36]	; (8029c9c <EwBspClockCpuLoadSetActive+0x60>)
    DWT->CTRL = 0x40000001;
 8029c76:	4c0e      	ldr	r4, [pc, #56]	; (8029cb0 <EwBspClockCpuLoadSetActive+0x74>)
    WorkingTime   = 0;
 8029c78:	4d0e      	ldr	r5, [pc, #56]	; (8029cb4 <EwBspClockCpuLoadSetActive+0x78>)
 8029c7a:	4a06      	ldr	r2, [pc, #24]	; (8029c94 <EwBspClockCpuLoadSetActive+0x58>)
    DWT->CYCCNT = 0;
 8029c7c:	2000      	movs	r0, #0
 8029c7e:	6048      	str	r0, [r1, #4]
    DWT->CTRL = 0x40000001;
 8029c80:	600c      	str	r4, [r1, #0]
      initialized = 1;
 8029c82:	4601      	mov	r1, r0
 8029c84:	2401      	movs	r4, #1
    WorkingTime   = 0;
 8029c86:	6028      	str	r0, [r5, #0]
      initialized = 1;
 8029c88:	701c      	strb	r4, [r3, #0]
 8029c8a:	4803      	ldr	r0, [pc, #12]	; (8029c98 <EwBspClockCpuLoadSetActive+0x5c>)
 8029c8c:	460c      	mov	r4, r1
 8029c8e:	e7dd      	b.n	8029c4c <EwBspClockCpuLoadSetActive+0x10>
 8029c90:	200003e4 	.word	0x200003e4
 8029c94:	200003dc 	.word	0x200003dc
 8029c98:	200003b8 	.word	0x200003b8
 8029c9c:	e0001000 	.word	0xe0001000
 8029ca0:	e000edf0 	.word	0xe000edf0
 8029ca4:	e0001fb4 	.word	0xe0001fb4
 8029ca8:	e0001fb0 	.word	0xe0001fb0
 8029cac:	c5acce55 	.word	0xc5acce55
 8029cb0:	40000001 	.word	0x40000001
 8029cb4:	200003e0 	.word	0x200003e0

08029cb8 <EwBspClockCpuLoadSetIdle>:
*******************************************************************************/
void EwBspClockCpuLoadSetIdle( void )
{
  #if EW_CPU_LOAD_MEASURING == 1

    WorkingTime += GetCycleCounterDelta();
 8029cb8:	4a06      	ldr	r2, [pc, #24]	; (8029cd4 <EwBspClockCpuLoadSetIdle+0x1c>)
    cycCnt = DWT->CYCCNT;
 8029cba:	4b07      	ldr	r3, [pc, #28]	; (8029cd8 <EwBspClockCpuLoadSetIdle+0x20>)
    result = cycCnt - PrevCycCnt;
 8029cbc:	4907      	ldr	r1, [pc, #28]	; (8029cdc <EwBspClockCpuLoadSetIdle+0x24>)
    cycCnt = DWT->CYCCNT;
 8029cbe:	685b      	ldr	r3, [r3, #4]
    result = cycCnt - PrevCycCnt;
 8029cc0:	6808      	ldr	r0, [r1, #0]
{
 8029cc2:	b410      	push	{r4}
    WorkingTime += GetCycleCounterDelta();
 8029cc4:	6814      	ldr	r4, [r2, #0]
    PrevCycCnt = cycCnt;
 8029cc6:	600b      	str	r3, [r1, #0]
    WorkingTime += GetCycleCounterDelta();
 8029cc8:	4423      	add	r3, r4
 8029cca:	1a1b      	subs	r3, r3, r0

  #endif
}
 8029ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
    WorkingTime += GetCycleCounterDelta();
 8029cd0:	6013      	str	r3, [r2, #0]
}
 8029cd2:	4770      	bx	lr
 8029cd4:	200003e0 	.word	0x200003e0
 8029cd8:	e0001000 	.word	0xe0001000
 8029cdc:	200003b8 	.word	0x200003b8

08029ce0 <HAL_UART_MspInit>:

UART_HandleTypeDef                      UART_Handle;


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8029ce0:	b510      	push	{r4, lr}
 8029ce2:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8029ce4:	4b1b      	ldr	r3, [pc, #108]	; (8029d54 <HAL_UART_MspInit+0x74>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8029ce6:	481c      	ldr	r0, [pc, #112]	; (8029d58 <HAL_UART_MspInit+0x78>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8029ce8:	2200      	movs	r2, #0
 8029cea:	9200      	str	r2, [sp, #0]
 8029cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029cee:	f041 0102 	orr.w	r1, r1, #2
 8029cf2:	6319      	str	r1, [r3, #48]	; 0x30
 8029cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029cf6:	f001 0102 	and.w	r1, r1, #2
 8029cfa:	9100      	str	r1, [sp, #0]
 8029cfc:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8029cfe:	9201      	str	r2, [sp, #4]
 8029d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029d02:	f041 0102 	orr.w	r1, r1, #2
 8029d06:	6319      	str	r1, [r3, #48]	; 0x30
 8029d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029d0a:	f001 0102 	and.w	r1, r1, #2
 8029d0e:	9101      	str	r1, [sp, #4]
 8029d10:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
 8029d12:	9202      	str	r2, [sp, #8]
 8029d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8029d16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8029d1a:	641a      	str	r2, [r3, #64]	; 0x40
 8029d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8029d22:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8029d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8029d28:	2302      	movs	r3, #2
  USARTx_CLK_ENABLE();
 8029d2a:	9c02      	ldr	r4, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8029d2c:	9203      	str	r2, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8029d2e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8029d30:	2201      	movs	r2, #1
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8029d32:	2407      	movs	r4, #7
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8029d34:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8029d36:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8029d38:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8029d3a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8029d3c:	f002 fef2 	bl	802cb24 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 8029d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8029d44:	4804      	ldr	r0, [pc, #16]	; (8029d58 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8029d46:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8029d48:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 8029d4a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8029d4c:	f002 feea 	bl	802cb24 <HAL_GPIO_Init>
}
 8029d50:	b008      	add	sp, #32
 8029d52:	bd10      	pop	{r4, pc}
 8029d54:	40023800 	.word	0x40023800
 8029d58:	40020400 	.word	0x40020400

08029d5c <EwBspConsoleInit>:
*   None
*
*******************************************************************************/
void EwBspConsoleInit( void )
{
  UART_Handle.Instance            = UART_PORTID;
 8029d5c:	4807      	ldr	r0, [pc, #28]	; (8029d7c <EwBspConsoleInit+0x20>)
 8029d5e:	4b08      	ldr	r3, [pc, #32]	; (8029d80 <EwBspConsoleInit+0x24>)
 8029d60:	6003      	str	r3, [r0, #0]
  UART_Handle.Init.BaudRate       = 115200;
 8029d62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  UART_Handle.Init.WordLength     = UART_WORDLENGTH_8B;
 8029d66:	2300      	movs	r3, #0
  UART_Handle.Init.StopBits       = UART_STOPBITS_1;
  UART_Handle.Init.Parity         = UART_PARITY_NONE;
  UART_Handle.Init.Mode           = UART_MODE_TX_RX;
 8029d68:	220c      	movs	r2, #12
  UART_Handle.Init.StopBits       = UART_STOPBITS_1;
 8029d6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UART_Handle.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
  UART_Handle.Init.OverSampling   = UART_OVERSAMPLING_16;
 8029d6e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  UART_Handle.Init.BaudRate       = 115200;
 8029d72:	6041      	str	r1, [r0, #4]
  UART_Handle.Init.Mode           = UART_MODE_TX_RX;
 8029d74:	6142      	str	r2, [r0, #20]
  UART_Handle.Init.Parity         = UART_PARITY_NONE;
 8029d76:	6103      	str	r3, [r0, #16]

  HAL_UART_Init( &UART_Handle );
 8029d78:	f005 b9fa 	b.w	802f170 <HAL_UART_Init>
 8029d7c:	20002fd0 	.word	0x20002fd0
 8029d80:	40004800 	.word	0x40004800

08029d84 <EwBspConsoleDone>:
*   None
*
*******************************************************************************/
void EwBspConsoleDone( void )
{
}
 8029d84:	4770      	bx	lr
 8029d86:	bf00      	nop

08029d88 <EwBspConsolePutCharacter>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspConsolePutCharacter( unsigned char aCharacter )
{
 8029d88:	b510      	push	{r4, lr}
 8029d8a:	b082      	sub	sp, #8
 8029d8c:	4604      	mov	r4, r0
  HAL_UART_Transmit( &UART_Handle, (uint8_t*)&aCharacter, 1, 10 );
 8029d8e:	230a      	movs	r3, #10
 8029d90:	2201      	movs	r2, #1
 8029d92:	f10d 0107 	add.w	r1, sp, #7
 8029d96:	4803      	ldr	r0, [pc, #12]	; (8029da4 <EwBspConsolePutCharacter+0x1c>)
{
 8029d98:	f88d 4007 	strb.w	r4, [sp, #7]
  HAL_UART_Transmit( &UART_Handle, (uint8_t*)&aCharacter, 1, 10 );
 8029d9c:	f005 fa18 	bl	802f1d0 <HAL_UART_Transmit>
}
 8029da0:	b002      	add	sp, #8
 8029da2:	bd10      	pop	{r4, pc}
 8029da4:	20002fd0 	.word	0x20002fd0

08029da8 <WaitForDsiTransfer.part.0>:
  }
}


/* helper function to wait until framebuffer transfer via DSI is completed */
static void WaitForDsiTransfer( void )
 8029da8:	b538      	push	{r3, r4, r5, lr}
  CPU_LOAD_SET_IDLE();

  #if EW_USE_FREE_RTOS == 1

    /* wait until framebuffer is completely transferred */
    while ( ActiveArea != NO_AREA )
 8029daa:	4c09      	ldr	r4, [pc, #36]	; (8029dd0 <WaitForDsiTransfer.part.0+0x28>)
  CPU_LOAD_SET_IDLE();
 8029dac:	f7ff ff84 	bl	8029cb8 <EwBspClockCpuLoadSetIdle>
    while ( ActiveArea != NO_AREA )
 8029db0:	6823      	ldr	r3, [r4, #0]
 8029db2:	b143      	cbz	r3, 8029dc6 <WaitForDsiTransfer.part.0+0x1e>
 8029db4:	4d07      	ldr	r5, [pc, #28]	; (8029dd4 <WaitForDsiTransfer.part.0+0x2c>)
      osSemaphoreWait( LcdUpdateSemaphoreId, 1000 );
 8029db6:	6828      	ldr	r0, [r5, #0]
 8029db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8029dbc:	f005 fba6 	bl	802f50c <osSemaphoreWait>
    while ( ActiveArea != NO_AREA )
 8029dc0:	6823      	ldr	r3, [r4, #0]
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	d1f7      	bne.n	8029db6 <WaitForDsiTransfer.part.0+0xe>
      ;

  #endif

  CPU_LOAD_SET_ACTIVE();
}
 8029dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  CPU_LOAD_SET_ACTIVE();
 8029dca:	f7ff bf37 	b.w	8029c3c <EwBspClockCpuLoadSetActive>
 8029dce:	bf00      	nop
 8029dd0:	200003e8 	.word	0x200003e8
 8029dd4:	20000424 	.word	0x20000424

08029dd8 <HAL_DSI_MspInit>:
  HAL_NVIC_SetPriority(DSI_IRQn, 8, 0);
 8029dd8:	2200      	movs	r2, #0
 8029dda:	2108      	movs	r1, #8
 8029ddc:	205c      	movs	r0, #92	; 0x5c
 8029dde:	f001 bf6d 	b.w	802bcbc <HAL_NVIC_SetPriority>
 8029de2:	bf00      	nop

08029de4 <LTDC_IRQHandler>:
  BSP_LCD_LTDC_IRQHandler();
 8029de4:	f001 bbaa 	b.w	802b53c <BSP_LCD_LTDC_IRQHandler>

08029de8 <LTDC_ER_IRQHandler>:
  BSP_LCD_LTDC_ER_IRQHandler();
 8029de8:	f001 bc06 	b.w	802b5f8 <BSP_LCD_LTDC_ER_IRQHandler>

08029dec <DSI_IRQHandler>:
  BSP_LCD_DSI_IRQHandler();
 8029dec:	f001 bba0 	b.w	802b530 <BSP_LCD_DSI_IRQHandler>

08029df0 <HAL_DSI_TearingEffectCallback>:
  __DSI_MASK_TE();
 8029df0:	4a03      	ldr	r2, [pc, #12]	; (8029e00 <HAL_DSI_TearingEffectCallback+0x10>)
 8029df2:	6a13      	ldr	r3, [r2, #32]
 8029df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8029df8:	6213      	str	r3, [r2, #32]
  HAL_DSI_Refresh( hdsi );
 8029dfa:	f002 be03 	b.w	802ca04 <HAL_DSI_Refresh>
 8029dfe:	bf00      	nop
 8029e00:	40022400 	.word	0x40022400

08029e04 <HAL_DSI_EndOfRefreshCallback>:
{
 8029e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ActiveArea == LEFT_AREA )
 8029e06:	4d28      	ldr	r5, [pc, #160]	; (8029ea8 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 8029e08:	682b      	ldr	r3, [r5, #0]
 8029e0a:	2b01      	cmp	r3, #1
{
 8029e0c:	b085      	sub	sp, #20
  if ( ActiveArea == LEFT_AREA )
 8029e0e:	d004      	beq.n	8029e1a <HAL_DSI_EndOfRefreshCallback+0x16>
  else if ( ActiveArea == RIGHT_AREA )
 8029e10:	682b      	ldr	r3, [r5, #0]
 8029e12:	2b02      	cmp	r3, #2
 8029e14:	d03c      	beq.n	8029e90 <HAL_DSI_EndOfRefreshCallback+0x8c>
}
 8029e16:	b005      	add	sp, #20
 8029e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DSI_WRAPPER_DISABLE( hdsi );
 8029e1a:	6803      	ldr	r3, [r0, #0]
    LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress + LayerConfig.ImageWidth * EW_FRAME_BUFFER_DEPTH;
 8029e1c:	4f23      	ldr	r7, [pc, #140]	; (8029eac <HAL_DSI_EndOfRefreshCallback+0xa8>)
 8029e1e:	4a24      	ldr	r2, [pc, #144]	; (8029eb0 <HAL_DSI_EndOfRefreshCallback+0xac>)
    __HAL_DSI_WRAPPER_DISABLE( hdsi );
 8029e20:	2100      	movs	r1, #0
 8029e22:	9102      	str	r1, [sp, #8]
 8029e24:	f8d3 c404 	ldr.w	ip, [r3, #1028]	; 0x404
    LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress + LayerConfig.ImageWidth * EW_FRAME_BUFFER_DEPTH;
 8029e28:	6812      	ldr	r2, [r2, #0]
    __HAL_DSI_WRAPPER_DISABLE( hdsi );
 8029e2a:	f02c 0c08 	bic.w	ip, ip, #8
 8029e2e:	f8c3 c404 	str.w	ip, [r3, #1028]	; 0x404
 8029e32:	f8d3 c404 	ldr.w	ip, [r3, #1028]	; 0x404
    LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress + LayerConfig.ImageWidth * EW_FRAME_BUFFER_DEPTH;
 8029e36:	e9d7 6e09 	ldrd	r6, lr, [r7, #36]	; 0x24
    __HAL_DSI_WRAPPER_DISABLE( hdsi );
 8029e3a:	f00c 0c08 	and.w	ip, ip, #8
 8029e3e:	f8cd c008 	str.w	ip, [sp, #8]
    LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress + LayerConfig.ImageWidth * EW_FRAME_BUFFER_DEPTH;
 8029e42:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    __HAL_DSI_WRAPPER_DISABLE( hdsi );
 8029e46:	f8dd e008 	ldr.w	lr, [sp, #8]
    LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress + LayerConfig.ImageWidth * EW_FRAME_BUFFER_DEPTH;
 8029e4a:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG( &hltdc_handle );
 8029e4e:	6a56      	ldr	r6, [r2, #36]	; 0x24
    HAL_DSI_LongWrite( hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight );
 8029e50:	4f18      	ldr	r7, [pc, #96]	; (8029eb4 <HAL_DSI_EndOfRefreshCallback+0xb0>)
    __HAL_LTDC_RELOAD_CONFIG( &hltdc_handle );
 8029e52:	f046 0601 	orr.w	r6, r6, #1
 8029e56:	6256      	str	r6, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE( hdsi );
 8029e58:	9103      	str	r1, [sp, #12]
 8029e5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8029e5e:	f042 0208 	orr.w	r2, r2, #8
 8029e62:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8029e66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    HAL_DSI_LongWrite( hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight );
 8029e6a:	9701      	str	r7, [sp, #4]
    __HAL_DSI_WRAPPER_ENABLE( hdsi );
 8029e6c:	f003 0308 	and.w	r3, r3, #8
    HAL_DSI_LongWrite( hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight );
 8029e70:	222a      	movs	r2, #42	; 0x2a
    __HAL_DSI_WRAPPER_ENABLE( hdsi );
 8029e72:	9303      	str	r3, [sp, #12]
 8029e74:	4604      	mov	r4, r0
    HAL_DSI_LongWrite( hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight );
 8029e76:	9200      	str	r2, [sp, #0]
 8029e78:	2304      	movs	r3, #4
 8029e7a:	2239      	movs	r2, #57	; 0x39
    __HAL_DSI_WRAPPER_ENABLE( hdsi );
 8029e7c:	9e03      	ldr	r6, [sp, #12]
    HAL_DSI_LongWrite( hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight );
 8029e7e:	f002 fde7 	bl	802ca50 <HAL_DSI_LongWrite>
    HAL_DSI_Refresh( hdsi );
 8029e82:	4620      	mov	r0, r4
 8029e84:	f002 fdbe 	bl	802ca04 <HAL_DSI_Refresh>
    ActiveArea = RIGHT_AREA;
 8029e88:	2302      	movs	r3, #2
 8029e8a:	602b      	str	r3, [r5, #0]
}
 8029e8c:	b005      	add	sp, #20
 8029e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      osSemaphoreRelease( LcdUpdateSemaphoreId );
 8029e90:	4b09      	ldr	r3, [pc, #36]	; (8029eb8 <HAL_DSI_EndOfRefreshCallback+0xb4>)
 8029e92:	6818      	ldr	r0, [r3, #0]
 8029e94:	f005 fb66 	bl	802f564 <osSemaphoreRelease>
    ActiveArea = NO_AREA;
 8029e98:	2300      	movs	r3, #0
    EwBspGraphicsConcurrentOperation( 1 );
 8029e9a:	2001      	movs	r0, #1
    ActiveArea = NO_AREA;
 8029e9c:	602b      	str	r3, [r5, #0]
}
 8029e9e:	b005      	add	sp, #20
 8029ea0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    EwBspGraphicsConcurrentOperation( 1 );
 8029ea4:	f000 ba6a 	b.w	802a37c <EwBspGraphicsConcurrentOperation>
 8029ea8:	200003e8 	.word	0x200003e8
 8029eac:	200003f0 	.word	0x200003f0
 8029eb0:	20003018 	.word	0x20003018
 8029eb4:	20000034 	.word	0x20000034
 8029eb8:	20000424 	.word	0x20000424

08029ebc <EwBspDisplayInit>:
* RETURN VALUE:
*   Returns 1 if successful, 0 otherwise.
*
*******************************************************************************/
int EwBspDisplayInit( int aGuiWidth, int aGuiHeight, XDisplayInfo* aDisplayInfo )
{
 8029ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  EW_UNUSED_ARG( aGuiWidth );
  EW_UNUSED_ARG( aGuiHeight );

  /* check and clean display info structure */
  if ( !aDisplayInfo )
 8029ec0:	4617      	mov	r7, r2
{
 8029ec2:	b0a5      	sub	sp, #148	; 0x94
  if ( !aDisplayInfo )
 8029ec4:	2a00      	cmp	r2, #0
 8029ec6:	f000 812b 	beq.w	802a120 <EwBspDisplayInit+0x264>
    return 0;
  memset( aDisplayInfo, 0, sizeof( XDisplayInfo ));
 8029eca:	2220      	movs	r2, #32
 8029ecc:	2100      	movs	r1, #0
 8029ece:	4638      	mov	r0, r7
 8029ed0:	f006 ffd2 	bl	8030e78 <memset>

  memset( &CmdCfg, 0, sizeof( CmdCfg ));
 8029ed4:	a80c      	add	r0, sp, #48	; 0x30
 8029ed6:	222c      	movs	r2, #44	; 0x2c
 8029ed8:	2100      	movs	r1, #0
 8029eda:	f006 ffcd 	bl	8030e78 <memset>
  memset( &LPCmd, 0, sizeof( LPCmd ));
 8029ede:	2234      	movs	r2, #52	; 0x34
 8029ee0:	2100      	movs	r1, #0
 8029ee2:	a817      	add	r0, sp, #92	; 0x5c
 8029ee4:	f006 ffc8 	bl	8030e78 <memset>
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_handle.Instance = DSI;
 8029ee8:	4e8f      	ldr	r6, [pc, #572]	; (802a128 <EwBspDisplayInit+0x26c>)
  ActiveArea = NO_AREA;
 8029eea:	4b90      	ldr	r3, [pc, #576]	; (802a12c <EwBspDisplayInit+0x270>)
  LPCmd.LPDcsShortReadNoP      = DSI_LP_DSR0P_ENABLE;
  LPCmd.LPDcsLongWrite         = DSI_LP_DLW_ENABLE;
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);

  /* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc_handle);
 8029eec:	4d90      	ldr	r5, [pc, #576]	; (802a130 <EwBspDisplayInit+0x274>)
  memset( &dsiPllInit, 0, sizeof( dsiPllInit ));
 8029eee:	2400      	movs	r4, #0
  ActiveArea = NO_AREA;
 8029ef0:	601c      	str	r4, [r3, #0]
  memset( &dsiPllInit, 0, sizeof( dsiPllInit ));
 8029ef2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  memset( &GPIO_Init_Structure, 0, sizeof( GPIO_Init_Structure ));
 8029ef6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8029efa:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8029efe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  BSP_LCD_Reset();
 8029f02:	f001 fa9d 	bl	802b440 <BSP_LCD_Reset>
  BSP_LCD_MspInit();
 8029f06:	f001 fb1f 	bl	802b548 <BSP_LCD_MspInit>
  hdsi_handle.Instance = DSI;
 8029f0a:	4b8a      	ldr	r3, [pc, #552]	; (802a134 <EwBspDisplayInit+0x278>)
 8029f0c:	6033      	str	r3, [r6, #0]
  HAL_DSI_DeInit(&(hdsi_handle));
 8029f0e:	4630      	mov	r0, r6
 8029f10:	f002 fbd2 	bl	802c6b8 <HAL_DSI_DeInit>
  hdsi_handle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8029f14:	f04f 0801 	mov.w	r8, #1
    dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8029f18:	f04f 0902 	mov.w	r9, #2
  hdsi_handle.Init.TXEscapeCkdiv = 0x4;
 8029f1c:	2304      	movs	r3, #4
  HAL_DSI_Init(&(hdsi_handle), &(dsiPllInit));
 8029f1e:	a904      	add	r1, sp, #16
    dsiPllInit.PLLNDIV  = 125;
 8029f20:	227d      	movs	r2, #125	; 0x7d
  HAL_DSI_Init(&(hdsi_handle), &(dsiPllInit));
 8029f22:	4630      	mov	r0, r6
  hdsi_handle.Init.TXEscapeCkdiv = 0x4;
 8029f24:	e9c6 3802 	strd	r3, r8, [r6, #8]
  CmdCfg.CommandSize           = EW_FRAME_BUFFER_WIDTH / 2; /* screen is diveded into 2 areas! */
 8029f28:	f44f 7bc8 	mov.w	fp, #400	; 0x190
    dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8029f2c:	e9cd 2904 	strd	r2, r9, [sp, #16]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8029f30:	9406      	str	r4, [sp, #24]
  HAL_DSI_Init(&(hdsi_handle), &(dsiPllInit));
 8029f32:	f002 fb05 	bl	802c540 <HAL_DSI_Init>
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_handle, &CmdCfg);
 8029f36:	a90c      	add	r1, sp, #48	; 0x30
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8029f38:	2210      	movs	r2, #16
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_handle, &CmdCfg);
 8029f3a:	4630      	mov	r0, r6
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8029f3c:	e9cd b20e 	strd	fp, r2, [sp, #56]	; 0x38
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 8029f40:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 8029f44:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  CmdCfg.VirtualChannelID      = 0;
 8029f48:	940c      	str	r4, [sp, #48]	; 0x30
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8029f4a:	9413      	str	r4, [sp, #76]	; 0x4c
  CmdCfg.ColorCoding           = DSI_COLOR_CODING;
 8029f4c:	940d      	str	r4, [sp, #52]	; 0x34
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8029f4e:	9410      	str	r4, [sp, #64]	; 0x40
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8029f50:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_handle, &CmdCfg);
 8029f54:	f002 fc72 	bl	802c83c <HAL_DSI_ConfigAdaptedCommandMode>
  LPCmd.LPGenShortWriteOneP    = DSI_LP_GSW1P_ENABLE;
 8029f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029f60:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  LPCmd.LPGenShortWriteTwoP    = DSI_LP_GSW2P_ENABLE;
 8029f64:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  LPCmd.LPGenShortReadNoP      = DSI_LP_GSR0P_ENABLE;
 8029f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
  LPCmd.LPGenShortReadTwoP     = DSI_LP_GSR2P_ENABLE;
 8029f6c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  LPCmd.LPGenShortReadNoP      = DSI_LP_GSR0P_ENABLE;
 8029f70:	e9cd a219 	strd	sl, r2, [sp, #100]	; 0x64
  LPCmd.LPGenShortReadTwoP     = DSI_LP_GSR2P_ENABLE;
 8029f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8029f78:	e9cd c21b 	strd	ip, r2, [sp, #108]	; 0x6c
  LPCmd.LPDcsShortWriteNoP     = DSI_LP_DSW0P_ENABLE;
 8029f7c:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 8029f80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029f84:	e9cd e21d 	strd	lr, r2, [sp, #116]	; 0x74
  LPCmd.LPDcsShortReadNoP      = DSI_LP_DSR0P_ENABLE;
 8029f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029f8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8029f90:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);
 8029f94:	a917      	add	r1, sp, #92	; 0x5c
  LPCmd.LPDcsLongWrite         = DSI_LP_DLW_ENABLE;
 8029f96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);
 8029f9a:	4630      	mov	r0, r6
  LPCmd.LPDcsLongWrite         = DSI_LP_DLW_ENABLE;
 8029f9c:	9221      	str	r2, [sp, #132]	; 0x84
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);
 8029f9e:	f002 fcc1 	bl	802c924 <HAL_DSI_ConfigCommand>
  HAL_LTDC_DeInit(&hltdc_handle);
 8029fa2:	4628      	mov	r0, r5
 8029fa4:	f003 fcbe 	bl	802d924 <HAL_LTDC_DeInit>
  hltdc_handle.Init.Backcolor.Red      = 0;
  hltdc_handle.Init.HSPolarity         = LTDC_HSPOLARITY_AL;
  hltdc_handle.Init.VSPolarity         = LTDC_VSPOLARITY_AL;
  hltdc_handle.Init.DEPolarity         = LTDC_DEPOLARITY_AL;
  hltdc_handle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
  hltdc_handle.Instance                = LTDC;
 8029fa8:	4963      	ldr	r1, [pc, #396]	; (802a138 <EwBspDisplayInit+0x27c>)
  hltdc_handle.Init.Backcolor.Blue     = 0;
 8029faa:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc_handle.Init.AccumulatedActiveW = HSYNC + HBP + EW_FRAME_BUFFER_WIDTH / 2; /* screen is diveded into 2 areas! */
 8029fac:	f44f 72c9 	mov.w	r2, #402	; 0x192
  hltdc_handle.Init.AccumulatedActiveH = VSYNC + VBP + EW_FRAME_BUFFER_HEIGHT;
 8029fb0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
  hltdc_handle.Instance                = LTDC;
 8029fb4:	6029      	str	r1, [r5, #0]
  hltdc_handle.Init.AccumulatedActiveW = HSYNC + HBP + EW_FRAME_BUFFER_WIDTH / 2; /* screen is diveded into 2 areas! */
 8029fb6:	626a      	str	r2, [r5, #36]	; 0x24
  hltdc_handle.Init.TotalWidth         = HSYNC + HBP + EW_FRAME_BUFFER_WIDTH / 2 + HFP; /* screen is diveded into 2 areas! */
 8029fb8:	f240 1193 	movw	r1, #403	; 0x193
  hltdc_handle.Init.TotalHeigh         = VSYNC + VBP + EW_FRAME_BUFFER_HEIGHT + VFP;
 8029fbc:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc_handle.Init.AccumulatedActiveH = VSYNC + VBP + EW_FRAME_BUFFER_HEIGHT;
 8029fc0:	62a8      	str	r0, [r5, #40]	; 0x28

  /* Initialize LTDC */
  HAL_LTDC_Init(&hltdc_handle);
 8029fc2:	4628      	mov	r0, r5
  hltdc_handle.Init.TotalHeigh         = VSYNC + VBP + EW_FRAME_BUFFER_HEIGHT + VFP;
 8029fc4:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
  hltdc_handle.Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 8029fc8:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc_handle.Init.HorizontalSync     = HSYNC;
 8029fcc:	e9c5 4804 	strd	r4, r8, [r5, #16]
  hltdc_handle.Init.AccumulatedHBP     = HSYNC + HBP;
 8029fd0:	e9c5 8906 	strd	r8, r9, [r5, #24]
  hltdc_handle.Init.HSPolarity         = LTDC_HSPOLARITY_AL;
 8029fd4:	606c      	str	r4, [r5, #4]
  hltdc_handle.Init.AccumulatedVBP     = VSYNC + VBP;
 8029fd6:	f8c5 9020 	str.w	r9, [r5, #32]
  hltdc_handle.Init.Backcolor.Red      = 0;
 8029fda:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  HAL_LTDC_Init(&hltdc_handle);
 8029fde:	f003 fc2f 	bl	802d840 <HAL_LTDC_Init>

  /* Start DSI */
  HAL_DSI_Start(&(hdsi_handle));
 8029fe2:	4630      	mov	r0, r6
 8029fe4:	f002 fcea 	bl	802c9bc <HAL_DSI_Start>

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init( OTM8009A_FORMAT, OTM8009A_ORIENTATION_LANDSCAPE );
 8029fe8:	4641      	mov	r1, r8
 8029fea:	4648      	mov	r0, r9
 8029fec:	f000 feac 	bl	802ad48 <OTM8009A_Init>

  /* Switch-off the backlight to hide random pixel after start-up */
  BSP_LCD_DisplayOff();
 8029ff0:	f001 fa6e 	bl	802b4d0 <BSP_LCD_DisplayOff>
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);
 8029ff4:	a917      	add	r1, sp, #92	; 0x5c
 8029ff6:	4630      	mov	r0, r6
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8029ff8:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 8029ffc:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 802a000:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 802a004:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 802a008:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 802a00c:	9421      	str	r4, [sp, #132]	; 0x84
  HAL_DSI_ConfigCommand(&hdsi_handle, &LPCmd);
 802a00e:	f002 fc89 	bl	802c924 <HAL_DSI_ConfigCommand>

  HAL_DSI_ConfigFlowControl(&hdsi_handle, DSI_FLOW_CONTROL_BTA);
 802a012:	2304      	movs	r3, #4
 802a014:	4619      	mov	r1, r3
 802a016:	4630      	mov	r0, r6
 802a018:	f002 fcba 	bl	802c990 <HAL_DSI_ConfigFlowControl>

  /* Configure DSI_TE pin from MB1166 : Tearing effect on separated GPIO from KoD LCD */
  /* that is mapped on GPIOJ2 as alternate DSI function (DSI_TE)                      */
  /* This pin is used only when the LCD and DSI link is configured in command mode    */
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 802a01c:	4a47      	ldr	r2, [pc, #284]	; (802a13c <EwBspDisplayInit+0x280>)
 802a01e:	9402      	str	r4, [sp, #8]
 802a020:	6b11      	ldr	r1, [r2, #48]	; 0x30
  GPIO_Init_Structure.Pin       = GPIO_PIN_2;
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 802a022:	4847      	ldr	r0, [pc, #284]	; (802a140 <EwBspDisplayInit+0x284>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 802a024:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 802a028:	6311      	str	r1, [r2, #48]	; 0x30
 802a02a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802a02c:	f402 7200 	and.w	r2, r2, #512	; 0x200
  GPIO_Init_Structure.Pin       = GPIO_PIN_2;
 802a030:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 802a032:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 802a034:	9202      	str	r2, [sp, #8]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 802a036:	f04f 0c03 	mov.w	ip, #3
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 802a03a:	220d      	movs	r2, #13
  GPIO_Init_Structure.Pin       = GPIO_PIN_2;
 802a03c:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 802a03e:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 802a042:	f8dd e008 	ldr.w	lr, [sp, #8]
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
 802a046:	e9cd 9408 	strd	r9, r4, [sp, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 802a04a:	f002 fd6b 	bl	802cb24 <HAL_GPIO_Init>

  /* Refresh the display */
  HAL_DSI_Refresh(&hdsi_handle);
 802a04e:	4630      	mov	r0, r6
 802a050:	f002 fcd8 	bl	802ca04 <HAL_DSI_Refresh>

  /* Layer Init */
  LayerConfig.WindowX0 = 0;
 802a054:	493b      	ldr	r1, [pc, #236]	; (802a144 <EwBspDisplayInit+0x288>)
  #elif ( EW_FRAME_BUFFER_COLOR_FORMAT == EW_FRAME_BUFFER_COLOR_FORMAT_LumA44 )
    LayerConfig.PixelFormat = LTDC_PIXEL_FORMAT_AL44;
  #endif

  LayerConfig.FBStartAdress = (uint32_t)EW_FRAME_BUFFER_ADDR;
  LayerConfig.Alpha = 255;
 802a056:	f04f 0eff 	mov.w	lr, #255	; 0xff
  LayerConfig.Alpha0 = 0;
  LayerConfig.Backcolor.Blue = 0;
  LayerConfig.Backcolor.Green = 0;
  LayerConfig.Backcolor.Red = 0;
  LayerConfig.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  LayerConfig.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 802a05a:	f04f 0c05 	mov.w	ip, #5
  LayerConfig.WindowX1 = EW_FRAME_BUFFER_WIDTH / 2;
 802a05e:	e9c1 4b00 	strd	r4, fp, [r1]
  LayerConfig.ImageWidth = EW_FRAME_BUFFER_WIDTH / 2;
  LayerConfig.ImageHeight = EW_FRAME_BUFFER_HEIGHT;

  HAL_LTDC_ConfigLayer(&hltdc_handle, &LayerConfig, LAYER_INDEX );
 802a062:	4622      	mov	r2, r4
  LayerConfig.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 802a064:	f8c1 a01c 	str.w	sl, [r1, #28]
  LayerConfig.ImageWidth = EW_FRAME_BUFFER_WIDTH / 2;
 802a068:	f8c1 b028 	str.w	fp, [r1, #40]	; 0x28
  LayerConfig.WindowY1 = EW_FRAME_BUFFER_HEIGHT;
 802a06c:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
  LayerConfig.Backcolor.Blue = 0;
 802a070:	860c      	strh	r4, [r1, #48]	; 0x30
  LayerConfig.FBStartAdress = (uint32_t)EW_FRAME_BUFFER_ADDR;
 802a072:	f04f 4b40 	mov.w	fp, #3221225472	; 0xc0000000
  HAL_LTDC_ConfigLayer(&hltdc_handle, &LayerConfig, LAYER_INDEX );
 802a076:	4628      	mov	r0, r5
  LayerConfig.Alpha = 255;
 802a078:	f8c1 e014 	str.w	lr, [r1, #20]
  LayerConfig.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 802a07c:	f8c1 c020 	str.w	ip, [r1, #32]
  LayerConfig.WindowY0 = 0;
 802a080:	608c      	str	r4, [r1, #8]
    LayerConfig.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802a082:	f8c1 9010 	str.w	r9, [r1, #16]
  LayerConfig.Alpha0 = 0;
 802a086:	618c      	str	r4, [r1, #24]
  LayerConfig.Backcolor.Red = 0;
 802a088:	f881 4032 	strb.w	r4, [r1, #50]	; 0x32
  LayerConfig.WindowY1 = EW_FRAME_BUFFER_HEIGHT;
 802a08c:	f8c1 a00c 	str.w	sl, [r1, #12]
  LayerConfig.ImageHeight = EW_FRAME_BUFFER_HEIGHT;
 802a090:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
  LayerConfig.FBStartAdress = (uint32_t)EW_FRAME_BUFFER_ADDR;
 802a094:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
  HAL_LTDC_ConfigLayer(&hltdc_handle, &LayerConfig, LAYER_INDEX );
 802a098:	f003 fcb8 	bl	802da0c <HAL_LTDC_ConfigLayer>

  BSP_LCD_SelectLayer( LAYER_INDEX );
 802a09c:	4620      	mov	r0, r4
 802a09e:	f001 f9ff 	bl	802b4a0 <BSP_LCD_SelectLayer>

  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a0a2:	4a29      	ldr	r2, [pc, #164]	; (802a148 <EwBspDisplayInit+0x28c>)
 802a0a4:	9201      	str	r2, [sp, #4]
 802a0a6:	222a      	movs	r2, #42	; 0x2a
 802a0a8:	4621      	mov	r1, r4
 802a0aa:	9200      	str	r2, [sp, #0]
 802a0ac:	2304      	movs	r3, #4
 802a0ae:	4630      	mov	r0, r6
 802a0b0:	2239      	movs	r2, #57	; 0x39
 802a0b2:	f002 fccd 	bl	802ca50 <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage );
 802a0b6:	4a25      	ldr	r2, [pc, #148]	; (802a14c <EwBspDisplayInit+0x290>)
 802a0b8:	9201      	str	r2, [sp, #4]
 802a0ba:	222b      	movs	r2, #43	; 0x2b
 802a0bc:	2304      	movs	r3, #4
 802a0be:	4621      	mov	r1, r4
 802a0c0:	9200      	str	r2, [sp, #0]
 802a0c2:	4630      	mov	r0, r6
 802a0c4:	2239      	movs	r2, #57	; 0x39
 802a0c6:	f002 fcc3 	bl	802ca50 <HAL_DSI_LongWrite>

  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch( &hltdc_handle, EW_FRAME_BUFFER_WIDTH, LAYER_INDEX );
 802a0ca:	4622      	mov	r2, r4
 802a0cc:	4628      	mov	r0, r5
 802a0ce:	f44f 7148 	mov.w	r1, #800	; 0x320
 802a0d2:	f003 fccb 	bl	802da6c <HAL_LTDC_SetPitch>

  HAL_DSI_LongWrite(&hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 2, OTM8009A_CMD_WRTESCN, pScanCol);
 802a0d6:	4b1e      	ldr	r3, [pc, #120]	; (802a150 <EwBspDisplayInit+0x294>)
 802a0d8:	9301      	str	r3, [sp, #4]
 802a0da:	2244      	movs	r2, #68	; 0x44
 802a0dc:	464b      	mov	r3, r9
 802a0de:	4621      	mov	r1, r4
 802a0e0:	9200      	str	r2, [sp, #0]
 802a0e2:	4630      	mov	r0, r6
 802a0e4:	2239      	movs	r2, #57	; 0x39
 802a0e6:	f002 fcb3 	bl	802ca50 <HAL_DSI_LongWrite>

  /* short delay necessary to ensure proper DSI update... */
  HAL_Delay( 100 );
 802a0ea:	2064      	movs	r0, #100	; 0x64
 802a0ec:	f001 fdc0 	bl	802bc70 <HAL_Delay>

  #if EW_USE_FREE_RTOS == 1

    osSemaphoreDef( LcdUpdateSemaphore );
    LcdUpdateSemaphoreId = osSemaphoreCreate( osSemaphore( LcdUpdateSemaphore ), 1 );
 802a0f0:	4641      	mov	r1, r8
 802a0f2:	a803      	add	r0, sp, #12
    osSemaphoreDef( LcdUpdateSemaphore );
 802a0f4:	9403      	str	r4, [sp, #12]
    LcdUpdateSemaphoreId = osSemaphoreCreate( osSemaphore( LcdUpdateSemaphore ), 1 );
 802a0f6:	f005 f9f5 	bl	802f4e4 <osSemaphoreCreate>
 802a0fa:	4916      	ldr	r1, [pc, #88]	; (802a154 <EwBspDisplayInit+0x298>)

  #endif

  /* return the current display configuration */
  aDisplayInfo->FrameBuffer    = (void*)EW_FRAME_BUFFER_ADDR;
  aDisplayInfo->DoubleBuffer   = (void*)EW_DOUBLE_BUFFER_ADDR;
 802a0fc:	4a16      	ldr	r2, [pc, #88]	; (802a158 <EwBspDisplayInit+0x29c>)
  aDisplayInfo->FrameBuffer    = (void*)EW_FRAME_BUFFER_ADDR;
 802a0fe:	f8c7 b000 	str.w	fp, [r7]
    LcdUpdateSemaphoreId = osSemaphoreCreate( osSemaphore( LcdUpdateSemaphore ), 1 );
 802a102:	4605      	mov	r5, r0
  aDisplayInfo->BufferWidth    = EW_FRAME_BUFFER_WIDTH;
 802a104:	f44f 7348 	mov.w	r3, #800	; 0x320
  aDisplayInfo->BufferHeight   = EW_FRAME_BUFFER_HEIGHT;
  aDisplayInfo->DisplayWidth   = EW_DISPLAY_WIDTH;
  aDisplayInfo->DisplayHeight  = EW_DISPLAY_HEIGHT;
  aDisplayInfo->UpdateMode     = EW_BSP_DISPLAY_UPDATE_NORMAL;

  return 1;
 802a108:	4640      	mov	r0, r8
  aDisplayInfo->UpdateMode     = EW_BSP_DISPLAY_UPDATE_NORMAL;
 802a10a:	e9c7 a405 	strd	sl, r4, [r7, #20]
  aDisplayInfo->BufferWidth    = EW_FRAME_BUFFER_WIDTH;
 802a10e:	e9c7 2301 	strd	r2, r3, [r7, #4]
  aDisplayInfo->BufferHeight   = EW_FRAME_BUFFER_HEIGHT;
 802a112:	f8c7 a00c 	str.w	sl, [r7, #12]
    LcdUpdateSemaphoreId = osSemaphoreCreate( osSemaphore( LcdUpdateSemaphore ), 1 );
 802a116:	600d      	str	r5, [r1, #0]
  aDisplayInfo->DisplayWidth   = EW_DISPLAY_WIDTH;
 802a118:	613b      	str	r3, [r7, #16]
}
 802a11a:	b025      	add	sp, #148	; 0x94
 802a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 802a120:	4610      	mov	r0, r2
}
 802a122:	b025      	add	sp, #148	; 0x94
 802a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a128:	200030c0 	.word	0x200030c0
 802a12c:	200003e8 	.word	0x200003e8
 802a130:	20003018 	.word	0x20003018
 802a134:	40016c00 	.word	0x40016c00
 802a138:	40016800 	.word	0x40016800
 802a13c:	40023800 	.word	0x40023800
 802a140:	40022400 	.word	0x40022400
 802a144:	200003f0 	.word	0x200003f0
 802a148:	20000030 	.word	0x20000030
 802a14c:	20000038 	.word	0x20000038
 802a150:	2000003c 	.word	0x2000003c
 802a154:	20000424 	.word	0x20000424
 802a158:	c0f44800 	.word	0xc0f44800

0802a15c <EwBspDisplayDone>:
*
*******************************************************************************/
void EwBspDisplayDone( XDisplayInfo* aDisplayInfo )
{
  EW_UNUSED_ARG( aDisplayInfo );
}
 802a15c:	4770      	bx	lr
 802a15e:	bf00      	nop

0802a160 <EwBspDisplayGetUpdateArea>:
*
*******************************************************************************/
int EwBspDisplayGetUpdateArea( XRect* aUpdateRect )
{
  return 0;
}
 802a160:	2000      	movs	r0, #0
 802a162:	4770      	bx	lr

0802a164 <EwBspDisplayWaitForCompletion>:
    /* in case of single buffer, the DSI update has to be completed - otherwise
       content of framefuffer will be overwritten */
    WaitForDsiTransfer();

  #endif
}
 802a164:	4770      	bx	lr
 802a166:	bf00      	nop

0802a168 <EwBspDisplayCommitBuffer>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspDisplayCommitBuffer( void* aAddress, int aX, int aY, int aWidth, int aHeight )
{
 802a168:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ActiveArea == NO_AREA )
 802a16a:	4d2e      	ldr	r5, [pc, #184]	; (802a224 <EwBspDisplayCommitBuffer+0xbc>)
 802a16c:	682b      	ldr	r3, [r5, #0]
{
 802a16e:	b085      	sub	sp, #20
 802a170:	4606      	mov	r6, r0
  if ( ActiveArea == NO_AREA )
 802a172:	b10b      	cbz	r3, 802a178 <EwBspDisplayCommitBuffer+0x10>
 802a174:	f7ff fe18 	bl	8029da8 <WaitForDsiTransfer.part.0>

  /* prepare the update of the left display area */
  ActiveArea = LEFT_AREA;

  /* change address within layer configuration structure */
  LayerConfig.FBStartAdress = (uint32_t)aAddress;
 802a178:	4c2b      	ldr	r4, [pc, #172]	; (802a228 <EwBspDisplayCommitBuffer+0xc0>)

  /* change layer configuration */
  if ( HAL_LTDC_ConfigLayer( &hltdc_handle, &LayerConfig, LAYER_INDEX ) != HAL_OK )
 802a17a:	482c      	ldr	r0, [pc, #176]	; (802a22c <EwBspDisplayCommitBuffer+0xc4>)
  LayerConfig.FBStartAdress = (uint32_t)aAddress;
 802a17c:	6266      	str	r6, [r4, #36]	; 0x24
  ActiveArea = LEFT_AREA;
 802a17e:	2301      	movs	r3, #1
  if ( HAL_LTDC_ConfigLayer( &hltdc_handle, &LayerConfig, LAYER_INDEX ) != HAL_OK )
 802a180:	4621      	mov	r1, r4
 802a182:	2200      	movs	r2, #0
  ActiveArea = LEFT_AREA;
 802a184:	602b      	str	r3, [r5, #0]
  if ( HAL_LTDC_ConfigLayer( &hltdc_handle, &LayerConfig, LAYER_INDEX ) != HAL_OK )
 802a186:	f003 fc41 	bl	802da0c <HAL_LTDC_ConfigLayer>
 802a18a:	2800      	cmp	r0, #0
 802a18c:	d145      	bne.n	802a21a <EwBspDisplayCommitBuffer+0xb2>
    EwPrint( "EwBspUpdateDisplay: Could not change layer configuration!\n" );

  /* Disable DSI Wrapper */
  __HAL_DSI_WRAPPER_DISABLE( &hdsi_handle );
 802a18e:	4828      	ldr	r0, [pc, #160]	; (802a230 <EwBspDisplayCommitBuffer+0xc8>)

  /* Update LTDC configuaration */
  LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress ;
 802a190:	6a66      	ldr	r6, [r4, #36]	; 0x24
  __HAL_DSI_WRAPPER_DISABLE( &hdsi_handle );
 802a192:	6803      	ldr	r3, [r0, #0]
  LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress ;
 802a194:	4a25      	ldr	r2, [pc, #148]	; (802a22c <EwBspDisplayCommitBuffer+0xc4>)
  __HAL_LTDC_RELOAD_CONFIG( &hltdc_handle );

  /* Enable DSI Wrapper */
  __HAL_DSI_WRAPPER_ENABLE( &hdsi_handle );

  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a196:	4f27      	ldr	r7, [pc, #156]	; (802a234 <EwBspDisplayCommitBuffer+0xcc>)
  LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress ;
 802a198:	6812      	ldr	r2, [r2, #0]
  __HAL_DSI_WRAPPER_DISABLE( &hdsi_handle );
 802a19a:	2400      	movs	r4, #0
 802a19c:	9402      	str	r4, [sp, #8]
 802a19e:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 802a1a2:	f021 0108 	bic.w	r1, r1, #8
 802a1a6:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 802a1aa:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 802a1ae:	f001 0108 	and.w	r1, r1, #8
 802a1b2:	9102      	str	r1, [sp, #8]
 802a1b4:	f8dd c008 	ldr.w	ip, [sp, #8]
  LTDC_LAYER( &hltdc_handle, LAYER_INDEX )->CFBAR = LayerConfig.FBStartAdress ;
 802a1b8:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
  __HAL_LTDC_RELOAD_CONFIG( &hltdc_handle );
 802a1bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    EwBspGraphicsConcurrentOperation( 0 );

  #endif

  /* switch-on the backlight after first framebuffer update */
  if ( !FirstUpdateIsDone )
 802a1be:	4e1e      	ldr	r6, [pc, #120]	; (802a238 <EwBspDisplayCommitBuffer+0xd0>)
  __HAL_LTDC_RELOAD_CONFIG( &hltdc_handle );
 802a1c0:	f041 0101 	orr.w	r1, r1, #1
 802a1c4:	6251      	str	r1, [r2, #36]	; 0x24
  __HAL_DSI_WRAPPER_ENABLE( &hdsi_handle );
 802a1c6:	9403      	str	r4, [sp, #12]
 802a1c8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802a1cc:	f042 0208 	orr.w	r2, r2, #8
 802a1d0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 802a1d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a1d8:	9701      	str	r7, [sp, #4]
  __HAL_DSI_WRAPPER_ENABLE( &hdsi_handle );
 802a1da:	f003 0308 	and.w	r3, r3, #8
  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a1de:	222a      	movs	r2, #42	; 0x2a
  __HAL_DSI_WRAPPER_ENABLE( &hdsi_handle );
 802a1e0:	9303      	str	r3, [sp, #12]
  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a1e2:	4621      	mov	r1, r4
 802a1e4:	9200      	str	r2, [sp, #0]
 802a1e6:	2304      	movs	r3, #4
 802a1e8:	2239      	movs	r2, #57	; 0x39
  __HAL_DSI_WRAPPER_ENABLE( &hdsi_handle );
 802a1ea:	9f03      	ldr	r7, [sp, #12]
  HAL_DSI_LongWrite( &hdsi_handle, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft );
 802a1ec:	f002 fc30 	bl	802ca50 <HAL_DSI_LongWrite>
  __DSI_UNMASK_TE();
 802a1f0:	4a12      	ldr	r2, [pc, #72]	; (802a23c <EwBspDisplayCommitBuffer+0xd4>)
 802a1f2:	6a13      	ldr	r3, [r2, #32]
 802a1f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802a1f8:	6213      	str	r3, [r2, #32]
    EwBspGraphicsConcurrentOperation( 0 );
 802a1fa:	4620      	mov	r0, r4
 802a1fc:	f000 f8be 	bl	802a37c <EwBspGraphicsConcurrentOperation>
  if ( !FirstUpdateIsDone )
 802a200:	6833      	ldr	r3, [r6, #0]
 802a202:	b92b      	cbnz	r3, 802a210 <EwBspDisplayCommitBuffer+0xa8>
  if ( ActiveArea == NO_AREA )
 802a204:	682b      	ldr	r3, [r5, #0]
 802a206:	b92b      	cbnz	r3, 802a214 <EwBspDisplayCommitBuffer+0xac>
  {
	  WaitForDsiTransfer();
	  BSP_LCD_DisplayOn();
 802a208:	f001 f950 	bl	802b4ac <BSP_LCD_DisplayOn>
	  FirstUpdateIsDone = 1;
 802a20c:	2301      	movs	r3, #1
 802a20e:	6033      	str	r3, [r6, #0]
  }
}
 802a210:	b005      	add	sp, #20
 802a212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a214:	f7ff fdc8 	bl	8029da8 <WaitForDsiTransfer.part.0>
 802a218:	e7f6      	b.n	802a208 <EwBspDisplayCommitBuffer+0xa0>
    EwPrint( "EwBspUpdateDisplay: Could not change layer configuration!\n" );
 802a21a:	4809      	ldr	r0, [pc, #36]	; (802a240 <EwBspDisplayCommitBuffer+0xd8>)
 802a21c:	f7ee f90a 	bl	8018434 <EwPrint>
 802a220:	e7b5      	b.n	802a18e <EwBspDisplayCommitBuffer+0x26>
 802a222:	bf00      	nop
 802a224:	200003e8 	.word	0x200003e8
 802a228:	200003f0 	.word	0x200003f0
 802a22c:	20003018 	.word	0x20003018
 802a230:	200030c0 	.word	0x200030c0
 802a234:	20000030 	.word	0x20000030
 802a238:	200003ec 	.word	0x200003ec
 802a23c:	40022400 	.word	0x40022400
 802a240:	08039818 	.word	0x08039818

0802a244 <EwBspEventWait>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspEventWait( int aTimeout )
{
 802a244:	b530      	push	{r4, r5, lr}
  if ( aTimeout > 0 )
 802a246:	1e04      	subs	r4, r0, #0
{
 802a248:	b085      	sub	sp, #20
  if ( aTimeout > 0 )
 802a24a:	dc01      	bgt.n	802a250 <EwBspEventWait+0xc>

    #endif

    CPU_LOAD_SET_ACTIVE();
  }
}
 802a24c:	b005      	add	sp, #20
 802a24e:	bd30      	pop	{r4, r5, pc}
      if ( ThreadId == 0 )
 802a250:	4d0b      	ldr	r5, [pc, #44]	; (802a280 <EwBspEventWait+0x3c>)
    CPU_LOAD_SET_IDLE();
 802a252:	f7ff fd31 	bl	8029cb8 <EwBspClockCpuLoadSetIdle>
      if ( ThreadId == 0 )
 802a256:	682b      	ldr	r3, [r5, #0]
 802a258:	b16b      	cbz	r3, 802a276 <EwBspEventWait+0x32>
      osSignalWait( OS_SIGNAL_WAKEUP_UI, aTimeout );
 802a25a:	2c0a      	cmp	r4, #10
 802a25c:	4622      	mov	r2, r4
 802a25e:	f04f 0101 	mov.w	r1, #1
 802a262:	bfa8      	it	ge
 802a264:	220a      	movge	r2, #10
 802a266:	4668      	mov	r0, sp
 802a268:	f005 f8ee 	bl	802f448 <osSignalWait>
}
 802a26c:	b005      	add	sp, #20
 802a26e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    CPU_LOAD_SET_ACTIVE();
 802a272:	f7ff bce3 	b.w	8029c3c <EwBspClockCpuLoadSetActive>
        ThreadId = osThreadGetId();
 802a276:	f005 f8e5 	bl	802f444 <osThreadGetId>
 802a27a:	6028      	str	r0, [r5, #0]
 802a27c:	e7ed      	b.n	802a25a <EwBspEventWait+0x16>
 802a27e:	bf00      	nop
 802a280:	20000428 	.word	0x20000428

0802a284 <EwBspGraphicsWaitForCompletion.part.0>:
*
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspGraphicsWaitForCompletion()
 802a284:	b508      	push	{r3, lr}
{
  /* return immediately if no DMA2D transfer is ongoing */
  if ( TransferInProgress == 0 )
    return;

  CPU_LOAD_SET_IDLE();
 802a286:	f7ff fd17 	bl	8029cb8 <EwBspClockCpuLoadSetIdle>

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  #if EW_USE_FREE_RTOS == 1

    osSemaphoreWait( AcceleratorSemaphoreId, 1000 );
 802a28a:	4b06      	ldr	r3, [pc, #24]	; (802a2a4 <EwBspGraphicsWaitForCompletion.part.0+0x20>)
 802a28c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802a290:	6818      	ldr	r0, [r3, #0]
 802a292:	f005 f93b 	bl	802f50c <osSemaphoreWait>
    TransferInProgress = 0;
 802a296:	4b04      	ldr	r3, [pc, #16]	; (802a2a8 <EwBspGraphicsWaitForCompletion.part.0+0x24>)
 802a298:	2200      	movs	r2, #0
 802a29a:	701a      	strb	r2, [r3, #0]
  TransferInProgress = 0;

#endif

  CPU_LOAD_SET_ACTIVE();
}
 802a29c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CPU_LOAD_SET_ACTIVE();
 802a2a0:	f7ff bccc 	b.w	8029c3c <EwBspClockCpuLoadSetActive>
 802a2a4:	20003014 	.word	0x20003014
 802a2a8:	2000046c 	.word	0x2000046c

0802a2ac <HAL_DMA2D_MspInit>:
{
 802a2ac:	b500      	push	{lr}
 802a2ae:	b083      	sub	sp, #12
  __HAL_RCC_DMA2D_CLK_ENABLE();
 802a2b0:	4b0a      	ldr	r3, [pc, #40]	; (802a2dc <HAL_DMA2D_MspInit+0x30>)
 802a2b2:	2200      	movs	r2, #0
 802a2b4:	9201      	str	r2, [sp, #4]
 802a2b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802a2b8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802a2bc:	6319      	str	r1, [r3, #48]	; 0x30
 802a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a2c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802a2c4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 8, 0);
 802a2c6:	2108      	movs	r1, #8
 802a2c8:	205a      	movs	r0, #90	; 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 802a2ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 8, 0);
 802a2cc:	f001 fcf6 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802a2d0:	205a      	movs	r0, #90	; 0x5a
}
 802a2d2:	b003      	add	sp, #12
 802a2d4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802a2d8:	f001 bd28 	b.w	802bd2c <HAL_NVIC_EnableIRQ>
 802a2dc:	40023800 	.word	0x40023800

0802a2e0 <HAL_DMA2D_MspDeInit>:
{
 802a2e0:	b508      	push	{r3, lr}
   HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 802a2e2:	205a      	movs	r0, #90	; 0x5a
 802a2e4:	f001 fd30 	bl	802bd48 <HAL_NVIC_DisableIRQ>
  __HAL_RCC_DMA2D_FORCE_RESET();
 802a2e8:	4b04      	ldr	r3, [pc, #16]	; (802a2fc <HAL_DMA2D_MspDeInit+0x1c>)
 802a2ea:	691a      	ldr	r2, [r3, #16]
 802a2ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802a2f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 802a2f2:	691a      	ldr	r2, [r3, #16]
 802a2f4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 802a2f8:	611a      	str	r2, [r3, #16]
}
 802a2fa:	bd08      	pop	{r3, pc}
 802a2fc:	40023800 	.word	0x40023800

0802a300 <EwBspGraphicsInit>:
{
 802a300:	b570      	push	{r4, r5, r6, lr}
  memset( &Accelerator, 0, sizeof( DMA2D_HandleTypeDef ));
 802a302:	4c13      	ldr	r4, [pc, #76]	; (802a350 <EwBspGraphicsInit+0x50>)
{
 802a304:	b082      	sub	sp, #8
  memset( &Accelerator, 0, sizeof( DMA2D_HandleTypeDef ));
 802a306:	2240      	movs	r2, #64	; 0x40
{
 802a308:	4606      	mov	r6, r0
  memset( &Accelerator, 0, sizeof( DMA2D_HandleTypeDef ));
 802a30a:	2100      	movs	r1, #0
 802a30c:	4620      	mov	r0, r4
    osSemaphoreDef(AcceleratorSemaphore);
 802a30e:	460d      	mov	r5, r1
  memset( &Accelerator, 0, sizeof( DMA2D_HandleTypeDef ));
 802a310:	f006 fdb2 	bl	8030e78 <memset>
    AcceleratorSemaphoreId = osSemaphoreCreate(osSemaphore(AcceleratorSemaphore), 1);
 802a314:	2101      	movs	r1, #1
 802a316:	a801      	add	r0, sp, #4
    osSemaphoreDef(AcceleratorSemaphore);
 802a318:	9501      	str	r5, [sp, #4]
    AcceleratorSemaphoreId = osSemaphoreCreate(osSemaphore(AcceleratorSemaphore), 1);
 802a31a:	f005 f8e3 	bl	802f4e4 <osSemaphoreCreate>
 802a31e:	4b0d      	ldr	r3, [pc, #52]	; (802a354 <EwBspGraphicsInit+0x54>)
    osSemaphoreWait( AcceleratorSemaphoreId, 1000 );
 802a320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    AcceleratorSemaphoreId = osSemaphoreCreate(osSemaphore(AcceleratorSemaphore), 1);
 802a324:	6018      	str	r0, [r3, #0]
    osSemaphoreWait( AcceleratorSemaphoreId, 1000 );
 802a326:	f005 f8f1 	bl	802f50c <osSemaphoreWait>
  TransferInProgress  = 0;
 802a32a:	4b0b      	ldr	r3, [pc, #44]	; (802a358 <EwBspGraphicsInit+0x58>)
  Accelerator.Instance       = DMA2D;
 802a32c:	4a0b      	ldr	r2, [pc, #44]	; (802a35c <EwBspGraphicsInit+0x5c>)
  Accelerator.State          = HAL_DMA2D_STATE_RESET;
 802a32e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  if ( HAL_DMA2D_Init( &Accelerator ) != HAL_OK )
 802a332:	4620      	mov	r0, r4
  Accelerator.Init.ColorMode = aDstColorMode;
 802a334:	60a6      	str	r6, [r4, #8]
  Accelerator.Init.Mode      = DMA2D_M2M;
 802a336:	6065      	str	r5, [r4, #4]
  Accelerator.Lock           = HAL_UNLOCKED;
 802a338:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  Accelerator.Instance       = DMA2D;
 802a33c:	6022      	str	r2, [r4, #0]
  TransferInProgress  = 0;
 802a33e:	701d      	strb	r5, [r3, #0]
  if ( HAL_DMA2D_Init( &Accelerator ) != HAL_OK )
 802a340:	f001 fe98 	bl	802c074 <HAL_DMA2D_Init>
}
 802a344:	fab0 f080 	clz	r0, r0
 802a348:	0940      	lsrs	r0, r0, #5
 802a34a:	b002      	add	sp, #8
 802a34c:	bd70      	pop	{r4, r5, r6, pc}
 802a34e:	bf00      	nop
 802a350:	2000042c 	.word	0x2000042c
 802a354:	20003014 	.word	0x20003014
 802a358:	2000046c 	.word	0x2000046c
 802a35c:	4002b000 	.word	0x4002b000

0802a360 <EwBspGraphicsDone>:
  HAL_DMA2D_DeInit( &Accelerator );
 802a360:	4801      	ldr	r0, [pc, #4]	; (802a368 <EwBspGraphicsDone+0x8>)
 802a362:	f001 bfa5 	b.w	802c2b0 <HAL_DMA2D_DeInit>
 802a366:	bf00      	nop
 802a368:	2000042c 	.word	0x2000042c

0802a36c <EwBspGraphicsWaitForCompletion>:
  if ( TransferInProgress == 0 )
 802a36c:	4b02      	ldr	r3, [pc, #8]	; (802a378 <EwBspGraphicsWaitForCompletion+0xc>)
 802a36e:	781b      	ldrb	r3, [r3, #0]
 802a370:	b903      	cbnz	r3, 802a374 <EwBspGraphicsWaitForCompletion+0x8>
}
 802a372:	4770      	bx	lr
 802a374:	f7ff bf86 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a378:	2000046c 	.word	0x2000046c

0802a37c <EwBspGraphicsConcurrentOperation>:
*   None
*
*******************************************************************************/
void EwBspGraphicsConcurrentOperation( int aEnable )
{
  ConcurrentOperation = (char)aEnable;
 802a37c:	4b01      	ldr	r3, [pc, #4]	; (802a384 <EwBspGraphicsConcurrentOperation+0x8>)
 802a37e:	7018      	strb	r0, [r3, #0]
}
 802a380:	4770      	bx	lr
 802a382:	bf00      	nop
 802a384:	2000003e 	.word	0x2000003e

0802a388 <EwBspGraphicsFill>:
*   None
*
*******************************************************************************/
void EwBspGraphicsFill( uint32_t aDstAddr, uint32_t aDstOffset, uint32_t aWidth,
  uint32_t aHeight, uint32_t aDstColorMode, uint32_t aSrcColor )
{
 802a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( TransferInProgress == 0 )
 802a38c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 802a3fc <EwBspGraphicsFill+0x74>
{
 802a390:	b083      	sub	sp, #12
  if ( TransferInProgress == 0 )
 802a392:	f899 4000 	ldrb.w	r4, [r9]
{
 802a396:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802a39a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 802a39e:	4605      	mov	r5, r0
 802a3a0:	4688      	mov	r8, r1
 802a3a2:	4616      	mov	r6, r2
 802a3a4:	461f      	mov	r7, r3
  if ( TransferInProgress == 0 )
 802a3a6:	b10c      	cbz	r4, 802a3ac <EwBspGraphicsFill+0x24>
 802a3a8:	f7ff ff6c 	bl	802a284 <EwBspGraphicsWaitForCompletion.part.0>
  /* ensure that previous DMA2D instruction is finished */
  EwBspGraphicsWaitForCompletion();

  /* prepare destination output configuration */
  Accelerator.Init.Mode                  = DMA2D_R2M;
 802a3ac:	4c11      	ldr	r4, [pc, #68]	; (802a3f4 <EwBspGraphicsFill+0x6c>)
 802a3ae:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  Accelerator.Init.ColorMode             = aDstColorMode;
  Accelerator.Init.OutputOffset          = aDstOffset;

  /* initialize the DMA2D graphics accelerator */
  HAL_DMA2D_Init( &Accelerator );
 802a3b2:	4620      	mov	r0, r4
  Accelerator.Init.Mode                  = DMA2D_R2M;
 802a3b4:	6063      	str	r3, [r4, #4]
  Accelerator.Init.ColorMode             = aDstColorMode;
 802a3b6:	f8c4 b008 	str.w	fp, [r4, #8]
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a3ba:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_DMA2D_Init( &Accelerator );
 802a3be:	f001 fe59 	bl	802c074 <HAL_DMA2D_Init>
  TransferInProgress = 1;

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  /* start the transfer */
  HAL_DMA2D_Start_IT( &Accelerator, aSrcColor, aDstAddr, aWidth, aHeight );
 802a3c2:	4620      	mov	r0, r4
 802a3c4:	4633      	mov	r3, r6
 802a3c6:	9700      	str	r7, [sp, #0]
 802a3c8:	462a      	mov	r2, r5
 802a3ca:	4651      	mov	r1, sl
  TransferInProgress = 1;
 802a3cc:	2401      	movs	r4, #1
 802a3ce:	f889 4000 	strb.w	r4, [r9]
  HAL_DMA2D_Start_IT( &Accelerator, aSrcColor, aDstAddr, aWidth, aHeight );
 802a3d2:	f001 fe7d 	bl	802c0d0 <HAL_DMA2D_Start_IT>
  HAL_DMA2D_Start( &Accelerator, aSrcColor, aDstAddr, aWidth, aHeight );

#endif

  /* check for immediate completion of drawing operation */
  if ( !ConcurrentOperation )
 802a3d6:	4b08      	ldr	r3, [pc, #32]	; (802a3f8 <EwBspGraphicsFill+0x70>)
 802a3d8:	781b      	ldrb	r3, [r3, #0]
 802a3da:	b913      	cbnz	r3, 802a3e2 <EwBspGraphicsFill+0x5a>
  if ( TransferInProgress == 0 )
 802a3dc:	f899 3000 	ldrb.w	r3, [r9]
 802a3e0:	b913      	cbnz	r3, 802a3e8 <EwBspGraphicsFill+0x60>
    EwBspGraphicsWaitForCompletion();
}
 802a3e2:	b003      	add	sp, #12
 802a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3e8:	b003      	add	sp, #12
 802a3ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3ee:	f7ff bf49 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a3f2:	bf00      	nop
 802a3f4:	2000042c 	.word	0x2000042c
 802a3f8:	2000003e 	.word	0x2000003e
 802a3fc:	2000046c 	.word	0x2000046c

0802a400 <EwBspGraphicsFillBlend>:
*   None
*
*******************************************************************************/
void EwBspGraphicsFillBlend( uint32_t aDstAddr, uint32_t aDstOffset, uint32_t aWidth,
  uint32_t aHeight, uint32_t aDstColorMode, uint32_t aSrcColor )
{
 802a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( TransferInProgress == 0 )
 802a404:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 802a4b0 <EwBspGraphicsFillBlend+0xb0>
{
 802a408:	b083      	sub	sp, #12
  if ( TransferInProgress == 0 )
 802a40a:	f899 4000 	ldrb.w	r4, [r9]
{
 802a40e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 802a412:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 802a416:	4606      	mov	r6, r0
 802a418:	460d      	mov	r5, r1
 802a41a:	4617      	mov	r7, r2
 802a41c:	469b      	mov	fp, r3
  if ( TransferInProgress == 0 )
 802a41e:	b10c      	cbz	r4, 802a424 <EwBspGraphicsFillBlend+0x24>
 802a420:	f7ff ff30 	bl	802a284 <EwBspGraphicsWaitForCompletion.part.0>
  /* ensure that previous DMA2D instruction is finished */
  EwBspGraphicsWaitForCompletion();

  /* prepare destination output configuration */
  Accelerator.Init.Mode                  = DMA2D_M2M_BLEND;
 802a424:	4c20      	ldr	r4, [pc, #128]	; (802a4a8 <EwBspGraphicsFillBlend+0xa8>)
  Accelerator.LayerCfg[1].InputColorMode = DMA2D_INPUT_A8;
  Accelerator.LayerCfg[1].AlphaMode      = DMA2D_REPLACE_ALPHA;
  Accelerator.LayerCfg[1].InputAlpha     = aSrcColor;

  /* initialize the DMA2D graphics accelerator */
  HAL_DMA2D_Init( &Accelerator );
 802a426:	4820      	ldr	r0, [pc, #128]	; (802a4a8 <EwBspGraphicsFillBlend+0xa8>)
  Accelerator.LayerCfg[0].InputOffset    = aDstOffset;
 802a428:	61a5      	str	r5, [r4, #24]
  if (( aDstColorMode == DMA2D_OUTPUT_RGB888 ) || ( aDstColorMode == DMA2D_OUTPUT_RGB565 ))
 802a42a:	f108 33ff 	add.w	r3, r8, #4294967295
 802a42e:	2b01      	cmp	r3, #1
  Accelerator.Init.Mode                  = DMA2D_M2M_BLEND;
 802a430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    Accelerator.LayerCfg[0].AlphaMode    = DMA2D_REPLACE_ALPHA;
 802a434:	bf98      	it	ls
 802a436:	2301      	movls	r3, #1
  Accelerator.LayerCfg[0].AlphaMode      = DMA2D_COMBINE_ALPHA;
 802a438:	f04f 0102 	mov.w	r1, #2
  Accelerator.Init.Mode                  = DMA2D_M2M_BLEND;
 802a43c:	6062      	str	r2, [r4, #4]
  Accelerator.LayerCfg[0].InputAlpha     = 255;
 802a43e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 802a442:	e9c4 1208 	strd	r1, r2, [r4, #32]
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a446:	e9c4 8502 	strd	r8, r5, [r4, #8]
    Accelerator.LayerCfg[0].AlphaMode    = DMA2D_REPLACE_ALPHA;
 802a44a:	bf98      	it	ls
 802a44c:	6223      	strls	r3, [r4, #32]
  Accelerator.LayerCfg[1].AlphaMode      = DMA2D_REPLACE_ALPHA;
 802a44e:	2501      	movs	r5, #1
  Accelerator.LayerCfg[1].InputColorMode = DMA2D_INPUT_A8;
 802a450:	2309      	movs	r3, #9
  Accelerator.LayerCfg[0].InputColorMode = aDstColorMode;
 802a452:	f8c4 801c 	str.w	r8, [r4, #28]
  Accelerator.LayerCfg[1].InputOffset    = 0x00; /* no offset in input */
 802a456:	f04f 0800 	mov.w	r8, #0
  Accelerator.LayerCfg[1].InputColorMode = DMA2D_INPUT_A8;
 802a45a:	e9c4 830a 	strd	r8, r3, [r4, #40]	; 0x28
  Accelerator.LayerCfg[1].InputAlpha     = aSrcColor;
 802a45e:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  Accelerator.LayerCfg[1].AlphaMode      = DMA2D_REPLACE_ALPHA;
 802a462:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_DMA2D_Init( &Accelerator );
 802a464:	f001 fe06 	bl	802c074 <HAL_DMA2D_Init>

  /* set the layer configurtation (foreground layer) */
  HAL_DMA2D_ConfigLayer( &Accelerator, 1 );
 802a468:	4629      	mov	r1, r5
 802a46a:	480f      	ldr	r0, [pc, #60]	; (802a4a8 <EwBspGraphicsFillBlend+0xa8>)
 802a46c:	f001 fff0 	bl	802c450 <HAL_DMA2D_ConfigLayer>

  /* set the layer configurtation (background layer) */
  HAL_DMA2D_ConfigLayer( &Accelerator, 0 );
 802a470:	4641      	mov	r1, r8
 802a472:	480d      	ldr	r0, [pc, #52]	; (802a4a8 <EwBspGraphicsFillBlend+0xa8>)
 802a474:	f001 ffec 	bl	802c450 <HAL_DMA2D_ConfigLayer>
  TransferInProgress = 1;

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  /* start the transfer */
  HAL_DMA2D_BlendingStart_IT( &Accelerator, aDstAddr, aDstAddr, aDstAddr, aWidth, aHeight );
 802a478:	4633      	mov	r3, r6
 802a47a:	e9cd 7b00 	strd	r7, fp, [sp]
 802a47e:	480a      	ldr	r0, [pc, #40]	; (802a4a8 <EwBspGraphicsFillBlend+0xa8>)
  TransferInProgress = 1;
 802a480:	f889 5000 	strb.w	r5, [r9]
  HAL_DMA2D_BlendingStart_IT( &Accelerator, aDstAddr, aDstAddr, aDstAddr, aWidth, aHeight );
 802a484:	4632      	mov	r2, r6
 802a486:	4631      	mov	r1, r6
 802a488:	f001 fe42 	bl	802c110 <HAL_DMA2D_BlendingStart_IT>
  HAL_DMA2D_BlendingStart( &Accelerator, aDstAddr, aDstAddr, aDstAddr, aWidth, aHeight );

#endif

  /* check for immediate completion of drawing operation */
  if ( !ConcurrentOperation )
 802a48c:	4b07      	ldr	r3, [pc, #28]	; (802a4ac <EwBspGraphicsFillBlend+0xac>)
 802a48e:	781b      	ldrb	r3, [r3, #0]
 802a490:	b913      	cbnz	r3, 802a498 <EwBspGraphicsFillBlend+0x98>
  if ( TransferInProgress == 0 )
 802a492:	f899 3000 	ldrb.w	r3, [r9]
 802a496:	b913      	cbnz	r3, 802a49e <EwBspGraphicsFillBlend+0x9e>
    EwBspGraphicsWaitForCompletion();
}
 802a498:	b003      	add	sp, #12
 802a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a49e:	b003      	add	sp, #12
 802a4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4a4:	f7ff beee 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a4a8:	2000042c 	.word	0x2000042c
 802a4ac:	2000003e 	.word	0x2000003e
 802a4b0:	2000046c 	.word	0x2000046c

0802a4b4 <EwBspGraphicsCopy>:
*
*******************************************************************************/
void EwBspGraphicsCopy( uint32_t aDstAddr, uint32_t aSrcAddr, uint32_t aDstOffset,
  uint32_t aSrcOffset, uint32_t aWidth, uint32_t aHeight, uint32_t aDstColorMode,
  uint32_t aSrcColorMode, uint32_t aSrcColor )
{
 802a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( TransferInProgress == 0 )
 802a4b8:	4f30      	ldr	r7, [pc, #192]	; (802a57c <EwBspGraphicsCopy+0xc8>)
{
 802a4ba:	b087      	sub	sp, #28
 802a4bc:	e9dd a510 	ldrd	sl, r5, [sp, #64]	; 0x40
 802a4c0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  if ( TransferInProgress == 0 )
 802a4c4:	783c      	ldrb	r4, [r7, #0]
{
 802a4c6:	9502      	str	r5, [sp, #8]
 802a4c8:	e9dd 6812 	ldrd	r6, r8, [sp, #72]	; 0x48
 802a4cc:	460d      	mov	r5, r1
 802a4ce:	4683      	mov	fp, r0
  unsigned char alpha = (unsigned char)( aSrcColor >> 24 );
 802a4d0:	ea4f 6119 	mov.w	r1, r9, lsr #24
  if ( TransferInProgress == 0 )
 802a4d4:	b13c      	cbz	r4, 802a4e6 <EwBspGraphicsCopy+0x32>
 802a4d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a4da:	9103      	str	r1, [sp, #12]
 802a4dc:	f7ff fed2 	bl	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a4e4:	9903      	ldr	r1, [sp, #12]

  /* ensure that previous DMA2D instruction is finished */
  EwBspGraphicsWaitForCompletion();

  /* prepare destination output configuration */
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a4e6:	4546      	cmp	r6, r8
 802a4e8:	d02a      	beq.n	802a540 <EwBspGraphicsCopy+0x8c>
 802a4ea:	4c25      	ldr	r4, [pc, #148]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a4ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000

  /* prepare source input configuration */
  Accelerator.LayerCfg[1].InputOffset    = aSrcOffset;
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;

  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a4f0:	f1b8 0f09 	cmp.w	r8, #9
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a4f4:	e9c4 6202 	strd	r6, r2, [r4, #8]
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;
 802a4f8:	e9c4 380a 	strd	r3, r8, [r4, #40]	; 0x28
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a4fc:	6060      	str	r0, [r4, #4]
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a4fe:	d02b      	beq.n	802a558 <EwBspGraphicsCopy+0xa4>
    Accelerator.LayerCfg[1].AlphaMode    = DMA2D_COMBINE_ALPHA;
    Accelerator.LayerCfg[1].InputAlpha   = aSrcColor;
  }
  else
  {
    Accelerator.LayerCfg[1].AlphaMode    = (alpha == 0xFF) ? DMA2D_NO_MODIF_ALPHA : DMA2D_COMBINE_ALPHA;
 802a500:	29ff      	cmp	r1, #255	; 0xff
 802a502:	d039      	beq.n	802a578 <EwBspGraphicsCopy+0xc4>
 802a504:	2302      	movs	r3, #2
    Accelerator.LayerCfg[1].InputAlpha   = alpha;
 802a506:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  }

  /* initialize the DMA2D graphics accelerator */
  HAL_DMA2D_Init( &Accelerator );
 802a50a:	481d      	ldr	r0, [pc, #116]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a50c:	f001 fdb2 	bl	802c074 <HAL_DMA2D_Init>

  /* set the layer configurtation (foreground layer) */
  HAL_DMA2D_ConfigLayer( &Accelerator, 1 );
 802a510:	2101      	movs	r1, #1
 802a512:	481b      	ldr	r0, [pc, #108]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a514:	f001 ff9c 	bl	802c450 <HAL_DMA2D_ConfigLayer>
  TransferInProgress = 1;

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  /* start the transfer */
  HAL_DMA2D_Start_IT( &Accelerator, aSrcAddr, aDstAddr, aWidth, aHeight );
 802a518:	9b02      	ldr	r3, [sp, #8]
 802a51a:	9300      	str	r3, [sp, #0]
 802a51c:	4818      	ldr	r0, [pc, #96]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a51e:	4653      	mov	r3, sl
 802a520:	465a      	mov	r2, fp
 802a522:	4629      	mov	r1, r5
  TransferInProgress = 1;
 802a524:	2401      	movs	r4, #1
 802a526:	703c      	strb	r4, [r7, #0]
  HAL_DMA2D_Start_IT( &Accelerator, aSrcAddr, aDstAddr, aWidth, aHeight );
 802a528:	f001 fdd2 	bl	802c0d0 <HAL_DMA2D_Start_IT>
  HAL_DMA2D_Start( &Accelerator, aSrcAddr, aDstAddr, aWidth, aHeight );

#endif

  /* check for immediate completion of drawing operation */
  if ( !ConcurrentOperation )
 802a52c:	4b15      	ldr	r3, [pc, #84]	; (802a584 <EwBspGraphicsCopy+0xd0>)
 802a52e:	781b      	ldrb	r3, [r3, #0]
 802a530:	b9b3      	cbnz	r3, 802a560 <EwBspGraphicsCopy+0xac>
  if ( TransferInProgress == 0 )
 802a532:	783b      	ldrb	r3, [r7, #0]
 802a534:	b1a3      	cbz	r3, 802a560 <EwBspGraphicsCopy+0xac>
    EwBspGraphicsWaitForCompletion();
}
 802a536:	b007      	add	sp, #28
 802a538:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a53c:	f7ff bea2 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a540:	29ff      	cmp	r1, #255	; 0xff
 802a542:	d010      	beq.n	802a566 <EwBspGraphicsCopy+0xb2>
 802a544:	4c0e      	ldr	r4, [pc, #56]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a546:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a54a:	2e09      	cmp	r6, #9
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a54c:	e9c4 6202 	strd	r6, r2, [r4, #8]
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;
 802a550:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a554:	6060      	str	r0, [r4, #4]
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a556:	d1d5      	bne.n	802a504 <EwBspGraphicsCopy+0x50>
    Accelerator.LayerCfg[1].AlphaMode    = DMA2D_COMBINE_ALPHA;
 802a558:	2302      	movs	r3, #2
 802a55a:	e9c4 390c 	strd	r3, r9, [r4, #48]	; 0x30
    Accelerator.LayerCfg[1].InputAlpha   = aSrcColor;
 802a55e:	e7d4      	b.n	802a50a <EwBspGraphicsCopy+0x56>
}
 802a560:	b007      	add	sp, #28
 802a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a566:	4c06      	ldr	r4, [pc, #24]	; (802a580 <EwBspGraphicsCopy+0xcc>)
 802a568:	2000      	movs	r0, #0
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a56a:	2e09      	cmp	r6, #9
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a56c:	e9c4 6202 	strd	r6, r2, [r4, #8]
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;
 802a570:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
  Accelerator.Init.Mode                  = ((aDstColorMode == aSrcColorMode) && (alpha == 0xFF)) ? DMA2D_M2M : DMA2D_M2M_PFC;
 802a574:	6060      	str	r0, [r4, #4]
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a576:	d0ef      	beq.n	802a558 <EwBspGraphicsCopy+0xa4>
    Accelerator.LayerCfg[1].AlphaMode    = (alpha == 0xFF) ? DMA2D_NO_MODIF_ALPHA : DMA2D_COMBINE_ALPHA;
 802a578:	2300      	movs	r3, #0
 802a57a:	e7c4      	b.n	802a506 <EwBspGraphicsCopy+0x52>
 802a57c:	2000046c 	.word	0x2000046c
 802a580:	2000042c 	.word	0x2000042c
 802a584:	2000003e 	.word	0x2000003e

0802a588 <EwBspGraphicsCopyBlend>:
*
*******************************************************************************/
void EwBspGraphicsCopyBlend( uint32_t aDstAddr, uint32_t aSrcAddr, uint32_t aDstOffset,
  uint32_t aSrcOffset, uint32_t aWidth, uint32_t aHeight, uint32_t aDstColorMode,
  uint32_t aSrcColorMode, uint32_t aSrcColor )
{
 802a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a58c:	b087      	sub	sp, #28
  if ( TransferInProgress == 0 )
 802a58e:	4f29      	ldr	r7, [pc, #164]	; (802a634 <EwBspGraphicsCopyBlend+0xac>)
{
 802a590:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802a592:	9403      	str	r4, [sp, #12]
  if ( TransferInProgress == 0 )
 802a594:	783c      	ldrb	r4, [r7, #0]
{
 802a596:	e9dd b911 	ldrd	fp, r9, [sp, #68]	; 0x44
 802a59a:	e9dd 8613 	ldrd	r8, r6, [sp, #76]	; 0x4c
 802a59e:	4682      	mov	sl, r0
 802a5a0:	460d      	mov	r5, r1
  if ( TransferInProgress == 0 )
 802a5a2:	b12c      	cbz	r4, 802a5b0 <EwBspGraphicsCopyBlend+0x28>
 802a5a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a5a8:	f7ff fe6c 	bl	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]

  /* ensure that previous DMA2D instruction is finished */
  EwBspGraphicsWaitForCompletion();

  /* prepare destination output configuration */
  Accelerator.Init.Mode                  = DMA2D_M2M_BLEND;
 802a5b0:	4c21      	ldr	r4, [pc, #132]	; (802a638 <EwBspGraphicsCopyBlend+0xb0>)
 802a5b2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  Accelerator.Init.ColorMode             = aDstColorMode;
  Accelerator.Init.OutputOffset          = aDstOffset;
 802a5b6:	e9c4 9202 	strd	r9, r2, [r4, #8]

  /* prepare destination input configuration */
  Accelerator.LayerCfg[0].InputOffset    = aDstOffset;
 802a5ba:	61a2      	str	r2, [r4, #24]

  /* prepare source input configuration */
  Accelerator.LayerCfg[1].InputOffset    = aSrcOffset;
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;

  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a5bc:	f1b8 0f09 	cmp.w	r8, #9
  Accelerator.LayerCfg[0].AlphaMode      = DMA2D_NO_MODIF_ALPHA;
 802a5c0:	f04f 0200 	mov.w	r2, #0
  Accelerator.LayerCfg[1].InputColorMode = aSrcColorMode;
 802a5c4:	e9c4 380a 	strd	r3, r8, [r4, #40]	; 0x28
  Accelerator.LayerCfg[0].InputAlpha     = 0;
 802a5c8:	e9c4 2208 	strd	r2, r2, [r4, #32]
  Accelerator.LayerCfg[0].InputColorMode = aDstColorMode;
 802a5cc:	f8c4 901c 	str.w	r9, [r4, #28]
  Accelerator.Init.Mode                  = DMA2D_M2M_BLEND;
 802a5d0:	6061      	str	r1, [r4, #4]
  if ( aSrcColorMode == DMA2D_INPUT_A8 )
 802a5d2:	d02a      	beq.n	802a62a <EwBspGraphicsCopyBlend+0xa2>
  unsigned char alpha = (unsigned char)( aSrcColor >> 24 );
 802a5d4:	0e36      	lsrs	r6, r6, #24
    Accelerator.LayerCfg[1].AlphaMode    = DMA2D_COMBINE_ALPHA;
    Accelerator.LayerCfg[1].InputAlpha   = aSrcColor;
  }
  else
  {
    Accelerator.LayerCfg[1].AlphaMode    = (alpha == 0xFF) ? DMA2D_NO_MODIF_ALPHA : DMA2D_COMBINE_ALPHA;
 802a5d6:	2eff      	cmp	r6, #255	; 0xff
 802a5d8:	bf0c      	ite	eq
 802a5da:	2300      	moveq	r3, #0
 802a5dc:	2302      	movne	r3, #2
 802a5de:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
    Accelerator.LayerCfg[1].InputAlpha   = alpha;
  }

  /* initialize the DMA2D graphics accelerator */
  HAL_DMA2D_Init( &Accelerator );
 802a5e2:	4815      	ldr	r0, [pc, #84]	; (802a638 <EwBspGraphicsCopyBlend+0xb0>)
 802a5e4:	f001 fd46 	bl	802c074 <HAL_DMA2D_Init>

  /* set the layer configurtation (foreground layer) */
  HAL_DMA2D_ConfigLayer( &Accelerator, 1 );
 802a5e8:	2101      	movs	r1, #1
 802a5ea:	4813      	ldr	r0, [pc, #76]	; (802a638 <EwBspGraphicsCopyBlend+0xb0>)
 802a5ec:	f001 ff30 	bl	802c450 <HAL_DMA2D_ConfigLayer>

  /* set the layer configurtation (background layer) */
  HAL_DMA2D_ConfigLayer( &Accelerator, 0 );
 802a5f0:	2100      	movs	r1, #0
 802a5f2:	4811      	ldr	r0, [pc, #68]	; (802a638 <EwBspGraphicsCopyBlend+0xb0>)
 802a5f4:	f001 ff2c 	bl	802c450 <HAL_DMA2D_ConfigLayer>
  TransferInProgress = 1;

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  /* start the transfer */
  HAL_DMA2D_BlendingStart_IT( &Accelerator, aSrcAddr, aDstAddr, aDstAddr, aWidth, aHeight );
 802a5f8:	9b03      	ldr	r3, [sp, #12]
 802a5fa:	9300      	str	r3, [sp, #0]
 802a5fc:	480e      	ldr	r0, [pc, #56]	; (802a638 <EwBspGraphicsCopyBlend+0xb0>)
 802a5fe:	f8cd b004 	str.w	fp, [sp, #4]
 802a602:	4653      	mov	r3, sl
 802a604:	4629      	mov	r1, r5
  TransferInProgress = 1;
 802a606:	2401      	movs	r4, #1
  HAL_DMA2D_BlendingStart_IT( &Accelerator, aSrcAddr, aDstAddr, aDstAddr, aWidth, aHeight );
 802a608:	4652      	mov	r2, sl
  TransferInProgress = 1;
 802a60a:	703c      	strb	r4, [r7, #0]
  HAL_DMA2D_BlendingStart_IT( &Accelerator, aSrcAddr, aDstAddr, aDstAddr, aWidth, aHeight );
 802a60c:	f001 fd80 	bl	802c110 <HAL_DMA2D_BlendingStart_IT>
  HAL_DMA2D_BlendingStart( &Accelerator, aSrcAddr, aDstAddr, aDstAddr, aWidth, aHeight );

#endif

  /* check for immediate completion of drawing operation */
  if ( !ConcurrentOperation )
 802a610:	4b0a      	ldr	r3, [pc, #40]	; (802a63c <EwBspGraphicsCopyBlend+0xb4>)
 802a612:	781b      	ldrb	r3, [r3, #0]
 802a614:	b90b      	cbnz	r3, 802a61a <EwBspGraphicsCopyBlend+0x92>
  if ( TransferInProgress == 0 )
 802a616:	783b      	ldrb	r3, [r7, #0]
 802a618:	b913      	cbnz	r3, 802a620 <EwBspGraphicsCopyBlend+0x98>
    EwBspGraphicsWaitForCompletion();
}
 802a61a:	b007      	add	sp, #28
 802a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a620:	b007      	add	sp, #28
 802a622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a626:	f7ff be2d 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
    Accelerator.LayerCfg[1].AlphaMode    = DMA2D_COMBINE_ALPHA;
 802a62a:	2302      	movs	r3, #2
 802a62c:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
    Accelerator.LayerCfg[1].InputAlpha   = aSrcColor;
 802a630:	e7d7      	b.n	802a5e2 <EwBspGraphicsCopyBlend+0x5a>
 802a632:	bf00      	nop
 802a634:	2000046c 	.word	0x2000046c
 802a638:	2000042c 	.word	0x2000042c
 802a63c:	2000003e 	.word	0x2000003e

0802a640 <EwBspGraphicsLoadClut>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspGraphicsLoadClut( uint32_t aClutAddr, uint32_t aClutSize )
{
 802a640:	b570      	push	{r4, r5, r6, lr}
  if ( TransferInProgress == 0 )
 802a642:	4e11      	ldr	r6, [pc, #68]	; (802a688 <EwBspGraphicsLoadClut+0x48>)
 802a644:	7833      	ldrb	r3, [r6, #0]
{
 802a646:	b086      	sub	sp, #24
 802a648:	4605      	mov	r5, r0
 802a64a:	460c      	mov	r4, r1
  if ( TransferInProgress == 0 )
 802a64c:	b10b      	cbz	r3, 802a652 <EwBspGraphicsLoadClut+0x12>
 802a64e:	f7ff fe19 	bl	802a284 <EwBspGraphicsWaitForCompletion.part.0>
  /* ensure that previous DMA2D instruction is finished */
  EwBspGraphicsWaitForCompletion();

  /* prepare CLUT configuration */
  clutCfg.pCLUT         = (uint32_t*)aClutAddr;
  clutCfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 802a652:	2300      	movs	r3, #0
 802a654:	e9cd 5303 	strd	r5, r3, [sp, #12]
  clutCfg.Size          = aClutSize - 1; /* size is expected as size - 1 ... */
 802a658:	3c01      	subs	r4, #1
 802a65a:	9405      	str	r4, [sp, #20]
  TransferInProgress = 1;

#ifdef EW_USE_DMA2D_INTERRUPT_MODE

  /* start the transfer */
  HAL_DMA2D_CLUTLoad_IT( &Accelerator, clutCfg, 1 );
 802a65c:	ab06      	add	r3, sp, #24
  TransferInProgress = 1;
 802a65e:	2401      	movs	r4, #1
  HAL_DMA2D_CLUTLoad_IT( &Accelerator, clutCfg, 1 );
 802a660:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 802a664:	4809      	ldr	r0, [pc, #36]	; (802a68c <EwBspGraphicsLoadClut+0x4c>)
 802a666:	9400      	str	r4, [sp, #0]
  TransferInProgress = 1;
 802a668:	7034      	strb	r4, [r6, #0]
  HAL_DMA2D_CLUTLoad_IT( &Accelerator, clutCfg, 1 );
 802a66a:	f001 fda7 	bl	802c1bc <HAL_DMA2D_CLUTLoad_IT>
  HAL_DMA2D_CLUTLoad( &Accelerator, clutCfg, 1 );

#endif

  /* check for immediate completion of CLUT loading */
  if ( !ConcurrentOperation )
 802a66e:	4b08      	ldr	r3, [pc, #32]	; (802a690 <EwBspGraphicsLoadClut+0x50>)
 802a670:	781b      	ldrb	r3, [r3, #0]
 802a672:	b90b      	cbnz	r3, 802a678 <EwBspGraphicsLoadClut+0x38>
  if ( TransferInProgress == 0 )
 802a674:	7833      	ldrb	r3, [r6, #0]
 802a676:	b90b      	cbnz	r3, 802a67c <EwBspGraphicsLoadClut+0x3c>
    EwBspGraphicsWaitForCompletion();
}
 802a678:	b006      	add	sp, #24
 802a67a:	bd70      	pop	{r4, r5, r6, pc}
 802a67c:	b006      	add	sp, #24
 802a67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a682:	f7ff bdff 	b.w	802a284 <EwBspGraphicsWaitForCompletion.part.0>
 802a686:	bf00      	nop
 802a688:	2000046c 	.word	0x2000046c
 802a68c:	2000042c 	.word	0x2000042c
 802a690:	2000003e 	.word	0x2000003e

0802a694 <DMA2D_IRQHandler>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void DMA2D_IRQHandler( void )
{
 802a694:	b510      	push	{r4, lr}
  HAL_DMA2D_IRQHandler( &Accelerator );
 802a696:	4c07      	ldr	r4, [pc, #28]	; (802a6b4 <DMA2D_IRQHandler+0x20>)
 802a698:	4620      	mov	r0, r4
 802a69a:	f001 fe45 	bl	802c328 <HAL_DMA2D_IRQHandler>

  if ( Accelerator.State == HAL_DMA2D_STATE_READY )
 802a69e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 802a6a2:	2b01      	cmp	r3, #1
 802a6a4:	d000      	beq.n	802a6a8 <DMA2D_IRQHandler+0x14>

      TransferInProgress = 0;

    #endif
  }
}
 802a6a6:	bd10      	pop	{r4, pc}
      osSemaphoreRelease( AcceleratorSemaphoreId );
 802a6a8:	4b03      	ldr	r3, [pc, #12]	; (802a6b8 <DMA2D_IRQHandler+0x24>)
}
 802a6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      osSemaphoreRelease( AcceleratorSemaphoreId );
 802a6ae:	6818      	ldr	r0, [r3, #0]
 802a6b0:	f004 bf58 	b.w	802f564 <osSemaphoreRelease>
 802a6b4:	2000042c 	.word	0x2000042c
 802a6b8:	20003014 	.word	0x20003014

0802a6bc <EwBspInOutInitButton>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspInOutInitButton( TButtonCallback aButtonCallback )
{
 802a6bc:	b570      	push	{r4, r5, r6, lr}
 802a6be:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOC clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 802a6c0:	2500      	movs	r5, #0
 802a6c2:	4b10      	ldr	r3, [pc, #64]	; (802a704 <EwBspInOutInitButton+0x48>)
 802a6c4:	9500      	str	r5, [sp, #0]
 802a6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 802a6c8:	4e0f      	ldr	r6, [pc, #60]	; (802a708 <EwBspInOutInitButton+0x4c>)
  USER_BUTTON_GPIO_CLK_ENABLE();
 802a6ca:	f042 0201 	orr.w	r2, r2, #1
 802a6ce:	631a      	str	r2, [r3, #48]	; 0x30
 802a6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 802a6d2:	9503      	str	r5, [sp, #12]
  USER_BUTTON_GPIO_CLK_ENABLE();
 802a6d4:	f003 0301 	and.w	r3, r3, #1
 802a6d8:	9300      	str	r3, [sp, #0]
{
 802a6da:	4604      	mov	r4, r0
  GPIO_InitStructure.Pin  = USER_BUTTON_PIN;
 802a6dc:	2301      	movs	r3, #1
  HAL_GPIO_Init( USER_BUTTON_GPIO_PORT, &GPIO_InitStructure );
 802a6de:	a901      	add	r1, sp, #4
 802a6e0:	480a      	ldr	r0, [pc, #40]	; (802a70c <EwBspInOutInitButton+0x50>)
  USER_BUTTON_GPIO_CLK_ENABLE();
 802a6e2:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStructure.Pin  = USER_BUTTON_PIN;
 802a6e4:	e9cd 3601 	strd	r3, r6, [sp, #4]
  HAL_GPIO_Init( USER_BUTTON_GPIO_PORT, &GPIO_InitStructure );
 802a6e8:	f002 fa1c 	bl	802cb24 <HAL_GPIO_Init>

  /* Enable and set EXTI lines 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority( USER_BUTTON_EXTI_IRQn, 8, 0 );
 802a6ec:	462a      	mov	r2, r5
 802a6ee:	2108      	movs	r1, #8
 802a6f0:	2006      	movs	r0, #6
 802a6f2:	f001 fae3 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ( USER_BUTTON_EXTI_IRQn );
 802a6f6:	2006      	movs	r0, #6
 802a6f8:	f001 fb18 	bl	802bd2c <HAL_NVIC_EnableIRQ>

  ButtonCallback = aButtonCallback;
 802a6fc:	4b04      	ldr	r3, [pc, #16]	; (802a710 <EwBspInOutInitButton+0x54>)
 802a6fe:	601c      	str	r4, [r3, #0]
}
 802a700:	b006      	add	sp, #24
 802a702:	bd70      	pop	{r4, r5, r6, pc}
 802a704:	40023800 	.word	0x40023800
 802a708:	10310000 	.word	0x10310000
 802a70c:	40020000 	.word	0x40020000
 802a710:	20000470 	.word	0x20000470

0802a714 <EwBspInOutInitLed>:
*   None
*
*******************************************************************************/
void EwBspInOutInitLed( void )
{
  BSP_LED_Init( EW_LED );
 802a714:	2003      	movs	r0, #3
 802a716:	f000 bdd9 	b.w	802b2cc <BSP_LED_Init>
 802a71a:	bf00      	nop

0802a71c <EwBspInOutEventHandler>:
*******************************************************************************/
void EwBspInOutEventHandler( int aEventId )
{
  uint16_t GPIO_Pin = ( uint16_t ) aEventId;

  if ( GPIO_Pin == USER_BUTTON_PIN )
 802a71c:	b281      	uxth	r1, r0
 802a71e:	2901      	cmp	r1, #1
 802a720:	d000      	beq.n	802a724 <EwBspInOutEventHandler+0x8>
 802a722:	4770      	bx	lr
{
 802a724:	b510      	push	{r4, lr}
  {
    GPIO_PinState pinState;

    pinState = HAL_GPIO_ReadPin( USER_BUTTON_GPIO_PORT, GPIO_Pin );
 802a726:	4805      	ldr	r0, [pc, #20]	; (802a73c <EwBspInOutEventHandler+0x20>)
 802a728:	f002 fb24 	bl	802cd74 <HAL_GPIO_ReadPin>

    if ( ButtonCallback )
 802a72c:	4b04      	ldr	r3, [pc, #16]	; (802a740 <EwBspInOutEventHandler+0x24>)
 802a72e:	681b      	ldr	r3, [r3, #0]
 802a730:	b113      	cbz	r3, 802a738 <EwBspInOutEventHandler+0x1c>
      ButtonCallback( pinState );
  }
}
 802a732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ButtonCallback( pinState );
 802a736:	4718      	bx	r3
}
 802a738:	bd10      	pop	{r4, pc}
 802a73a:	bf00      	nop
 802a73c:	40020000 	.word	0x40020000
 802a740:	20000470 	.word	0x20000470

0802a744 <EwBspSystemInit>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void EwBspSystemInit( void )
{
 802a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a748:	b0a7      	sub	sp, #156	; 0x9c
  __HAL_RCC_PWR_CLK_ENABLE();
 802a74a:	4d63      	ldr	r5, [pc, #396]	; (802a8d8 <EwBspSystemInit+0x194>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 802a74c:	f8df a194 	ldr.w	sl, [pc, #404]	; 802a8e4 <EwBspSystemInit+0x1a0>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 802a750:	f8df 9194 	ldr.w	r9, [pc, #404]	; 802a8e8 <EwBspSystemInit+0x1a4>
  __HAL_RCC_PWR_CLK_ENABLE();
 802a754:	2400      	movs	r4, #0
  HAL_Init();
 802a756:	f001 fa5f 	bl	802bc18 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 802a75a:	9403      	str	r4, [sp, #12]
 802a75c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802a75e:	4b5f      	ldr	r3, [pc, #380]	; (802a8dc <EwBspSystemInit+0x198>)
  __HAL_RCC_PWR_CLK_ENABLE();
 802a760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802a764:	642a      	str	r2, [r5, #64]	; 0x40
 802a766:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 802a768:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 802a76c:	9203      	str	r2, [sp, #12]
 802a76e:	9a03      	ldr	r2, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802a770:	9404      	str	r4, [sp, #16]
 802a772:	681a      	ldr	r2, [r3, #0]
 802a774:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 802a778:	601a      	str	r2, [r3, #0]
 802a77a:	681b      	ldr	r3, [r3, #0]
 802a77c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802a780:	2601      	movs	r6, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802a782:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 802a784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM       = 8;
 802a788:	2708      	movs	r7, #8
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 802a78a:	f04f 0802 	mov.w	r8, #2
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 802a78e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN       = 360;
 802a792:	f44f 72b4 	mov.w	r2, #360	; 0x168
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 802a796:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802a79a:	9804      	ldr	r0, [sp, #16]
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 802a79c:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR       = 6;
 802a79e:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLQ       = 7;
 802a7a0:	f04f 0b07 	mov.w	fp, #7
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 802a7a4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN       = 360;
 802a7a6:	e9cd 7212 	strd	r7, r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR       = 6;
 802a7aa:	e9cd b315 	strd	fp, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 802a7ae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 802a7b2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 802a7b6:	f003 ffe9 	bl	802e78c <HAL_RCC_OscConfig>
  HAL_PWREx_EnableOverDrive();
 802a7ba:	f003 f995 	bl	802dae8 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 802a7be:	210f      	movs	r1, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802a7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802a7c4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 802a7c8:	9105      	str	r1, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 802a7ca:	a805      	add	r0, sp, #20
 802a7cc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802a7ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 802a7d0:	f8cd 8018 	str.w	r8, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802a7d4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 802a7d6:	9407      	str	r4, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 802a7d8:	f003 fd60 	bl	802e29c <HAL_RCC_ClockConfig>
  memset( &PeriphClkInitStruct, 0, sizeof( PeriphClkInitStruct ));
 802a7dc:	4621      	mov	r1, r4
 802a7de:	223c      	movs	r2, #60	; 0x3c
 802a7e0:	a817      	add	r0, sp, #92	; 0x5c
 802a7e2:	f006 fb49 	bl	8030e78 <memset>
  HAL_RCCEx_GetPeriphCLKConfig( &PeriphClkInitStruct );
 802a7e6:	a817      	add	r0, sp, #92	; 0x5c
 802a7e8:	f003 ff84 	bl	802e6f4 <HAL_RCCEx_GetPeriphCLKConfig>
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 364;
 802a7ec:	f44f 73b6 	mov.w	r3, #364	; 0x16c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 802a7f0:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 364;
 802a7f2:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 802a7f4:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802a7f8:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PLLSAIDivR     = RCC_PLLSAIDIVR_2;
 802a7fa:	9421      	str	r4, [sp, #132]	; 0x84
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 802a7fc:	f003 fe0c 	bl	802e418 <HAL_RCCEx_PeriphCLKConfig>

  SystemClock_Config();

  BSP_SDRAM_Init();
 802a800:	f001 f9a8 	bl	802bb54 <BSP_SDRAM_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a804:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 802a808:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802a80c:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a80e:	941b      	str	r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802a810:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 802a812:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 802a8ec <EwBspSystemInit+0x1a8>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802a816:	4333      	orrs	r3, r6
 802a818:	632b      	str	r3, [r5, #48]	; 0x30
 802a81a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a81c:	4033      	ands	r3, r6
 802a81e:	9300      	str	r3, [sp, #0]
 802a820:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802a822:	9401      	str	r4, [sp, #4]
 802a824:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a826:	433b      	orrs	r3, r7
 802a828:	632b      	str	r3, [r5, #48]	; 0x30
 802a82a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a82c:	403b      	ands	r3, r7
 802a82e:	9301      	str	r3, [sp, #4]
 802a830:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 802a832:	9402      	str	r4, [sp, #8]
 802a834:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802a83a:	632b      	str	r3, [r5, #48]	; 0x30
 802a83c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a83e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802a842:	9302      	str	r3, [sp, #8]
 802a844:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802a846:	9405      	str	r4, [sp, #20]
 802a848:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a84e:	632b      	str	r3, [r5, #48]	; 0x30
 802a850:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a856:	9305      	str	r3, [sp, #20]
 802a858:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 802a85a:	940a      	str	r4, [sp, #40]	; 0x28
 802a85c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a85e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a862:	632b      	str	r3, [r5, #48]	; 0x30
 802a864:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802a866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a86a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 802a86c:	4632      	mov	r2, r6
 802a86e:	4650      	mov	r0, sl
 802a870:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 802a872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
 802a874:	f002 fa84 	bl	802cd80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 802a878:	4632      	mov	r2, r6
 802a87a:	4639      	mov	r1, r7
 802a87c:	4648      	mov	r0, r9
 802a87e:	f002 fa7f 	bl	802cd80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 802a882:	4632      	mov	r2, r6
 802a884:	4640      	mov	r0, r8
 802a886:	2140      	movs	r1, #64	; 0x40
 802a888:	f002 fa7a 	bl	802cd80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 802a88c:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a88e:	4650      	mov	r0, sl
 802a890:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 802a892:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a894:	e9cd 6418 	strd	r6, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a898:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a89a:	f002 f943 	bl	802cb24 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 802a89e:	4648      	mov	r0, r9
 802a8a0:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802a8a2:	e9cd 7617 	strd	r7, r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a8a6:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 802a8aa:	f002 f93b 	bl	802cb24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 802a8ae:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802a8b0:	a917      	add	r1, sp, #92	; 0x5c
 802a8b2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 802a8b4:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a8b6:	e9cd 6418 	strd	r6, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a8ba:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802a8bc:	f002 f932 	bl	802cb24 <HAL_GPIO_Init>
  MX_GPIO_Init();

#if EW_USE_EXTERNAL_FLASH == 1

  BSP_QSPI_Init();
 802a8c0:	f000 ff82 	bl	802b7c8 <BSP_QSPI_Init>
  BSP_QSPI_EnableMemoryMappedMode();
 802a8c4:	f000 fefa 	bl	802b6bc <BSP_QSPI_EnableMemoryMappedMode>

  /* configure QSPI: LPTR register with the low-power time out value */
  WRITE_REG( QUADSPI->LPTR, 0xFFF );
 802a8c8:	4b05      	ldr	r3, [pc, #20]	; (802a8e0 <EwBspSystemInit+0x19c>)
 802a8ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 802a8ce:	631a      	str	r2, [r3, #48]	; 0x30

#endif
}
 802a8d0:	b027      	add	sp, #156	; 0x9c
 802a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8d6:	bf00      	nop
 802a8d8:	40023800 	.word	0x40023800
 802a8dc:	40007000 	.word	0x40007000
 802a8e0:	a0001000 	.word	0xa0001000
 802a8e4:	40020c00 	.word	0x40020c00
 802a8e8:	40022800 	.word	0x40022800
 802a8ec:	40021800 	.word	0x40021800

0802a8f0 <EwBspSystemDone>:
*   None
*
*******************************************************************************/
void EwBspSystemDone( void )
{
}
 802a8f0:	4770      	bx	lr
 802a8f2:	bf00      	nop

0802a8f4 <EwBspTouchInit>:
* RETURN VALUE:
*   Returns 1 if successful, 0 otherwise.
*
*******************************************************************************/
int EwBspTouchInit( int aGuiWidth, int aGuiHeight, XDisplayInfo* aDisplayInfo )
{
 802a8f4:	b538      	push	{r3, r4, r5, lr}
  EW_UNUSED_ARG( aGuiWidth );
  EW_UNUSED_ARG( aGuiHeight );

  /* Read ID and verify if the touch screen driver is ready */
  ft6x06_Init( I2C_Address );
 802a8f6:	4d1e      	ldr	r5, [pc, #120]	; (802a970 <EwBspTouchInit+0x7c>)
 802a8f8:	7828      	ldrb	r0, [r5, #0]
{
 802a8fa:	4614      	mov	r4, r2
  ft6x06_Init( I2C_Address );
 802a8fc:	f7fe ffb6 	bl	802986c <ft6x06_Init>
  if ( ft6x06_ReadID( TS_I2C_ADDRESS ) == FT6206_ID_VALUE )
 802a900:	2054      	movs	r0, #84	; 0x54
 802a902:	f7fe ffc3 	bl	802988c <ft6x06_ReadID>
 802a906:	2811      	cmp	r0, #17
 802a908:	d123      	bne.n	802a952 <EwBspTouchInit+0x5e>
  {
    /* ft6206 found */
    I2C_Address = TS_I2C_ADDRESS;
 802a90a:	2054      	movs	r0, #84	; 0x54
 802a90c:	7028      	strb	r0, [r5, #0]
    EwPrint( "EwBspTouchInit: Initialization of FT6x06 failed\n" );
    return 0;
  }

  /* Initialize the TS driver */
  ft6x06_TS_Start( I2C_Address );
 802a90e:	f7fe ffc7 	bl	80298a0 <ft6x06_TS_Start>

  /* clear all touch state variables */
  memset( TouchData, 0, sizeof( TouchData ));
 802a912:	2220      	movs	r2, #32
 802a914:	2100      	movs	r1, #0
 802a916:	4817      	ldr	r0, [pc, #92]	; (802a974 <EwBspTouchInit+0x80>)
 802a918:	f006 faae 	bl	8030e78 <memset>
  memset( TouchEvent, 0, sizeof( TouchEvent ));
 802a91c:	4816      	ldr	r0, [pc, #88]	; (802a978 <EwBspTouchInit+0x84>)
 802a91e:	2220      	movs	r2, #32
 802a920:	2100      	movs	r1, #0
 802a922:	f006 faa9 	bl	8030e78 <memset>

  /* check display info structure */
  if ( !aDisplayInfo )
 802a926:	b30c      	cbz	r4, 802a96c <EwBspTouchInit+0x78>
    return 0;

  /* take physical size of display from provided display info structure */
  DisplayWidth   = aDisplayInfo->DisplayWidth;
  DisplayHeight  = aDisplayInfo->DisplayHeight;
 802a928:	e9d4 0404 	ldrd	r0, r4, [r4, #16]
  DisplayWidth   = aDisplayInfo->DisplayWidth;
 802a92c:	4a13      	ldr	r2, [pc, #76]	; (802a97c <EwBspTouchInit+0x88>)
  DisplayHeight  = aDisplayInfo->DisplayHeight;
 802a92e:	4b14      	ldr	r3, [pc, #80]	; (802a980 <EwBspTouchInit+0x8c>)

  /* take touch calibration values */
  TouchAreaMinX = EW_TOUCH_AREA_MIN_X;
 802a930:	4914      	ldr	r1, [pc, #80]	; (802a984 <EwBspTouchInit+0x90>)
  DisplayWidth   = aDisplayInfo->DisplayWidth;
 802a932:	6010      	str	r0, [r2, #0]
  DisplayHeight  = aDisplayInfo->DisplayHeight;
 802a934:	601c      	str	r4, [r3, #0]
  TouchAreaMinY = EW_TOUCH_AREA_MIN_Y;
 802a936:	4d14      	ldr	r5, [pc, #80]	; (802a988 <EwBspTouchInit+0x94>)
  TouchAreaMaxX = EW_TOUCH_AREA_MAX_X;
 802a938:	4814      	ldr	r0, [pc, #80]	; (802a98c <EwBspTouchInit+0x98>)
  TouchAreaMaxY = EW_TOUCH_AREA_MAX_Y;
 802a93a:	4a15      	ldr	r2, [pc, #84]	; (802a990 <EwBspTouchInit+0x9c>)
  TouchAreaMinX = EW_TOUCH_AREA_MIN_X;
 802a93c:	2300      	movs	r3, #0
  TouchAreaMaxX = EW_TOUCH_AREA_MAX_X;
 802a93e:	f44f 7448 	mov.w	r4, #800	; 0x320
  TouchAreaMinX = EW_TOUCH_AREA_MIN_X;
 802a942:	600b      	str	r3, [r1, #0]
  TouchAreaMaxY = EW_TOUCH_AREA_MAX_Y;
 802a944:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  TouchAreaMaxX = EW_TOUCH_AREA_MAX_X;
 802a948:	6004      	str	r4, [r0, #0]
  TouchAreaMinY = EW_TOUCH_AREA_MIN_Y;
 802a94a:	602b      	str	r3, [r5, #0]
  TouchAreaMaxY = EW_TOUCH_AREA_MAX_Y;
 802a94c:	6011      	str	r1, [r2, #0]
    EwPrint( "\n" );
    EwPrint( "EwBspTouchInit: Using TouchArea %d, %d - %d, %d\n", TouchAreaMinX, TouchAreaMinY, TouchAreaMaxX, TouchAreaMaxY );

  #endif

  return 1;
 802a94e:	2001      	movs	r0, #1
}
 802a950:	bd38      	pop	{r3, r4, r5, pc}
  else if ( ft6x06_ReadID( TS_I2C_ADDRESS_A02 ) == FT6206_ID_VALUE )
 802a952:	2070      	movs	r0, #112	; 0x70
 802a954:	f7fe ff9a 	bl	802988c <ft6x06_ReadID>
 802a958:	2811      	cmp	r0, #17
 802a95a:	d102      	bne.n	802a962 <EwBspTouchInit+0x6e>
    I2C_Address = TS_I2C_ADDRESS_A02;
 802a95c:	2070      	movs	r0, #112	; 0x70
 802a95e:	7028      	strb	r0, [r5, #0]
 802a960:	e7d5      	b.n	802a90e <EwBspTouchInit+0x1a>
    EwPrint( "EwBspTouchInit: Initialization of FT6x06 failed\n" );
 802a962:	480c      	ldr	r0, [pc, #48]	; (802a994 <EwBspTouchInit+0xa0>)
 802a964:	f7ed fd66 	bl	8018434 <EwPrint>
    return 0;
 802a968:	2000      	movs	r0, #0
}
 802a96a:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 802a96c:	4620      	mov	r0, r4
}
 802a96e:	bd38      	pop	{r3, r4, r5, pc}
 802a970:	2000047c 	.word	0x2000047c
 802a974:	20000490 	.word	0x20000490
 802a978:	200004b0 	.word	0x200004b0
 802a97c:	20000478 	.word	0x20000478
 802a980:	20000474 	.word	0x20000474
 802a984:	20000488 	.word	0x20000488
 802a988:	2000048c 	.word	0x2000048c
 802a98c:	20000480 	.word	0x20000480
 802a990:	20000484 	.word	0x20000484
 802a994:	08039854 	.word	0x08039854

0802a998 <EwBspTouchDone>:
*   None
*
*******************************************************************************/
void EwBspTouchDone( void )
{
}
 802a998:	4770      	bx	lr
 802a99a:	bf00      	nop

0802a99c <EwBspTouchGetEvents>:
* RETURN VALUE:
*   Returns the number of detected touch events, otherwise 0.
*
*******************************************************************************/
int EwBspTouchGetEvents( XTouchEvent** aTouchEvent )
{
 802a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = ft6x06_TS_DetectTouch( I2C_Address );
 802a9a0:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 802ac80 <EwBspTouchGetEvents+0x2e4>
 802a9a4:	4cab      	ldr	r4, [pc, #684]	; (802ac54 <EwBspTouchGetEvents+0x2b8>)
{
 802a9a6:	b089      	sub	sp, #36	; 0x24
 802a9a8:	9001      	str	r0, [sp, #4]
  int           finger;
  char          identified[ NO_OF_FINGERS ];
  XTouchData*   touch;

  /* access touch driver to receive current touch status and position */
  CPU_LOAD_SET_IDLE();
 802a9aa:	f7ff f985 	bl	8029cb8 <EwBspClockCpuLoadSetIdle>
  TS_State->touchDetected = ft6x06_TS_DetectTouch( I2C_Address );
 802a9ae:	f899 0000 	ldrb.w	r0, [r9]
 802a9b2:	f7fe ff7b 	bl	80298ac <ft6x06_TS_DetectTouch>
 802a9b6:	7020      	strb	r0, [r4, #0]
    for(index=0; index < TS_State->touchDetected; index++)
 802a9b8:	2800      	cmp	r0, #0
 802a9ba:	d041      	beq.n	802aa40 <EwBspTouchGetEvents+0xa4>
 802a9bc:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 802ac84 <EwBspTouchGetEvents+0x2e8>
 802a9c0:	4da5      	ldr	r5, [pc, #660]	; (802ac58 <EwBspTouchGetEvents+0x2bc>)
 802a9c2:	1ca7      	adds	r7, r4, #2
 802a9c4:	f104 0a0a 	add.w	sl, r4, #10
 802a9c8:	2600      	movs	r6, #0
      y[index] = FT_6206_MAX_HEIGHT - 1 - brute_x;
 802a9ca:	f240 1bdf 	movw	fp, #479	; 0x1df
      ft6x06_TS_GetXY( I2C_Address, &brute_x, &brute_y, &id );
 802a9ce:	f899 0000 	ldrb.w	r0, [r9]
 802a9d2:	f10d 0319 	add.w	r3, sp, #25
 802a9d6:	aa07      	add	r2, sp, #28
 802a9d8:	f10d 011a 	add.w	r1, sp, #26
 802a9dc:	f7fe ff8a 	bl	80298f4 <ft6x06_TS_GetXY>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 802a9e0:	f858 3b04 	ldr.w	r3, [r8], #4
      x[index] = brute_y;
 802a9e4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
      y[index] = FT_6206_MAX_HEIGHT - 1 - brute_x;
 802a9e8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 802a9ec:	4298      	cmp	r0, r3
 802a9ee:	eba0 0c03 	sub.w	ip, r0, r3
 802a9f2:	bf88      	it	hi
 802a9f4:	fa1f f38c 	uxthhi.w	r3, ip
      y[index] = FT_6206_MAX_HEIGHT - 1 - brute_x;
 802a9f8:	ebab 0201 	sub.w	r2, fp, r1
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 802a9fc:	f8d5 c000 	ldr.w	ip, [r5]
      y[index] = FT_6206_MAX_HEIGHT - 1 - brute_x;
 802aa00:	b292      	uxth	r2, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 802aa02:	bf9c      	itt	ls
 802aa04:	1a1b      	subls	r3, r3, r0
 802aa06:	b29b      	uxthls	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 802aa08:	4562      	cmp	r2, ip
 802aa0a:	eba2 0e0c 	sub.w	lr, r2, ip
 802aa0e:	f240 808c 	bls.w	802ab2a <EwBspTouchGetEvents+0x18e>
 802aa12:	fa1f f18e 	uxth.w	r1, lr
      TS_State->touchX[index] = x[index];
 802aa16:	f827 0b02 	strh.w	r0, [r7], #2
      if ((x_diff + y_diff) > 5)
 802aa1a:	440b      	add	r3, r1
 802aa1c:	2b05      	cmp	r3, #5
      TS_State->touchId[index] = id;
 802aa1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
      TS_State->touchY[index] = y[index];
 802aa22:	807a      	strh	r2, [r7, #2]
      TS_State->touchId[index] = id;
 802aa24:	f80a 3b01 	strb.w	r3, [sl], #1
    for(index=0; index < TS_State->touchDetected; index++)
 802aa28:	7823      	ldrb	r3, [r4, #0]
        _y[index] = y[index];
 802aa2a:	bfc8      	it	gt
 802aa2c:	602a      	strgt	r2, [r5, #0]
    for(index=0; index < TS_State->touchDetected; index++)
 802aa2e:	f106 0601 	add.w	r6, r6, #1
        _x[index] = x[index];
 802aa32:	bfc8      	it	gt
 802aa34:	f848 0c04 	strgt.w	r0, [r8, #-4]
    for(index=0; index < TS_State->touchDetected; index++)
 802aa38:	429e      	cmp	r6, r3
 802aa3a:	f105 0504 	add.w	r5, r5, #4
 802aa3e:	d3c6      	bcc.n	802a9ce <EwBspTouchGetEvents+0x32>
  BSP_TS_GetState( &touchPadState );
  CPU_LOAD_SET_ACTIVE();
 802aa40:	f7ff f8fc 	bl	8029c3c <EwBspClockCpuLoadSetActive>

  /* all fingers have the state unidentified */
  memset( identified, 0, sizeof( identified ));
 802aa44:	2300      	movs	r3, #0
 802aa46:	f8ad 301c 	strh.w	r3, [sp, #28]

  /* get current time in ms */
  ticks = EwGetTicks();
 802aa4a:	f7fe feb7 	bl	80297bc <EwGetTicks>

  /* iterate through all touch events from the hardware */
  for ( t = 0; t < touchPadState.touchDetected; t++ )
 802aa4e:	7822      	ldrb	r2, [r4, #0]
  ticks = EwGetTicks();
 802aa50:	9003      	str	r0, [sp, #12]
  for ( t = 0; t < touchPadState.touchDetected; t++ )
 802aa52:	2a00      	cmp	r2, #0
 802aa54:	d035      	beq.n	802aac2 <EwBspTouchGetEvents+0x126>

    #endif

    /* convert raw touch coordinates into display coordinates */
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
    touchY = (( touchY - TouchAreaMinY ) * DisplayHeight ) / ( TouchAreaMaxY - TouchAreaMinY );
 802aa56:	4881      	ldr	r0, [pc, #516]	; (802ac5c <EwBspTouchGetEvents+0x2c0>)
 802aa58:	4b81      	ldr	r3, [pc, #516]	; (802ac60 <EwBspTouchGetEvents+0x2c4>)
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
 802aa5a:	4f82      	ldr	r7, [pc, #520]	; (802ac64 <EwBspTouchGetEvents+0x2c8>)
 802aa5c:	4e82      	ldr	r6, [pc, #520]	; (802ac68 <EwBspTouchGetEvents+0x2cc>)
    touchY = (( touchY - TouchAreaMinY ) * DisplayHeight ) / ( TouchAreaMaxY - TouchAreaMinY );
 802aa5e:	f8d0 9000 	ldr.w	r9, [r0]
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
 802aa62:	4d82      	ldr	r5, [pc, #520]	; (802ac6c <EwBspTouchGetEvents+0x2d0>)
    touchY = (( touchY - TouchAreaMinY ) * DisplayHeight ) / ( TouchAreaMaxY - TouchAreaMinY );
 802aa64:	681b      	ldr	r3, [r3, #0]
 802aa66:	4982      	ldr	r1, [pc, #520]	; (802ac70 <EwBspTouchGetEvents+0x2d4>)
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
 802aa68:	f8d7 c000 	ldr.w	ip, [r7]
 802aa6c:	4881      	ldr	r0, [pc, #516]	; (802ac74 <EwBspTouchGetEvents+0x2d8>)
 802aa6e:	6837      	ldr	r7, [r6, #0]
 802aa70:	682d      	ldr	r5, [r5, #0]
    touchY = (( touchY - TouchAreaMinY ) * DisplayHeight ) / ( TouchAreaMaxY - TouchAreaMinY );
 802aa72:	f8d1 b000 	ldr.w	fp, [r1]
 802aa76:	eba3 0a09 	sub.w	sl, r3, r9
      {
        /* check if the finger has moved */
        if (( touch->XPos != x ) || ( touch->YPos != y ))
          touch->State = EW_BSP_TOUCH_MOVE;
        else
          touch->State = EW_BSP_TOUCH_HOLD;
 802aa7a:	f8cd a008 	str.w	sl, [sp, #8]
 802aa7e:	4414      	add	r4, r2
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
 802aa80:	eba7 070c 	sub.w	r7, r7, ip
 802aa84:	1e81      	subs	r1, r0, #2
          touch->State = EW_BSP_TOUCH_HOLD;
 802aa86:	46ca      	mov	sl, r9
      touchX = touchPadState.touchX[ t ];
 802aa88:	f830 3b02 	ldrh.w	r3, [r0], #2
    touchX = (( touchX - TouchAreaMinX ) * DisplayWidth ) / ( TouchAreaMaxX - TouchAreaMinX );
 802aa8c:	eba3 030c 	sub.w	r3, r3, ip
 802aa90:	fb05 f303 	mul.w	r3, r5, r3
 802aa94:	fb93 f3f7 	sdiv	r3, r3, r7
    if (( touchX < 0 ) || ( touchX > DisplayWidth ) ||
 802aa98:	2b00      	cmp	r3, #0
 802aa9a:	db0d      	blt.n	802aab8 <EwBspTouchGetEvents+0x11c>
 802aa9c:	429d      	cmp	r5, r3
 802aa9e:	db0b      	blt.n	802aab8 <EwBspTouchGetEvents+0x11c>
      touchY = touchPadState.touchY[ t ];
 802aaa0:	8842      	ldrh	r2, [r0, #2]
    touchY = (( touchY - TouchAreaMinY ) * DisplayHeight ) / ( TouchAreaMaxY - TouchAreaMinY );
 802aaa2:	9e02      	ldr	r6, [sp, #8]
 802aaa4:	eba2 020a 	sub.w	r2, r2, sl
 802aaa8:	fb0b f202 	mul.w	r2, fp, r2
 802aaac:	fb92 f2f6 	sdiv	r2, r2, r6
    if (( touchX < 0 ) || ( touchX > DisplayWidth ) ||
 802aab0:	2a00      	cmp	r2, #0
 802aab2:	db01      	blt.n	802aab8 <EwBspTouchGetEvents+0x11c>
        ( touchY < 0 ) || ( touchY > DisplayHeight ))
 802aab4:	4593      	cmp	fp, r2
 802aab6:	da3e      	bge.n	802ab36 <EwBspTouchGetEvents+0x19a>
  for ( t = 0; t < touchPadState.touchDetected; t++ )
 802aab8:	3101      	adds	r1, #1
 802aaba:	42a1      	cmp	r1, r4
 802aabc:	d1e4      	bne.n	802aa88 <EwBspTouchGetEvents+0xec>
 802aabe:	f89d 201c 	ldrb.w	r2, [sp, #28]
 802aac2:	4b6d      	ldr	r3, [pc, #436]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_MOVE;

    /* end of a touch cycle */
    else if ( !identified[ f ] && ( touch->State != EW_BSP_TOUCH_IDLE ))
    {
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_UP;
 802aac4:	4c6d      	ldr	r4, [pc, #436]	; (802ac7c <EwBspTouchGetEvents+0x2e0>)
  int           noOfEvents = 0;
 802aac6:	2000      	movs	r0, #0
  for ( f = 0; f < NO_OF_FINGERS; f++ )
 802aac8:	4601      	mov	r1, r0
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_UP;
 802aaca:	2603      	movs	r6, #3
    if ( identified[ f ] && ( touch->State == EW_BSP_TOUCH_DOWN ))
 802aacc:	b15a      	cbz	r2, 802aae6 <EwBspTouchGetEvents+0x14a>
 802aace:	7b5a      	ldrb	r2, [r3, #13]
 802aad0:	2a01      	cmp	r2, #1
 802aad2:	d024      	beq.n	802ab1e <EwBspTouchGetEvents+0x182>
    else if ( identified[ f ] && ( touch->State == EW_BSP_TOUCH_MOVE ))
 802aad4:	2a02      	cmp	r2, #2
 802aad6:	d022      	beq.n	802ab1e <EwBspTouchGetEvents+0x182>
  for ( f = 0; f < NO_OF_FINGERS; f++ )
 802aad8:	3310      	adds	r3, #16
 802aada:	b9c9      	cbnz	r1, 802ab10 <EwBspTouchGetEvents+0x174>
 802aadc:	f89d 201d 	ldrb.w	r2, [sp, #29]
 802aae0:	2101      	movs	r1, #1
    if ( identified[ f ] && ( touch->State == EW_BSP_TOUCH_DOWN ))
 802aae2:	2a00      	cmp	r2, #0
 802aae4:	d1f3      	bne.n	802aace <EwBspTouchGetEvents+0x132>
    else if ( !identified[ f ] && ( touch->State != EW_BSP_TOUCH_IDLE ))
 802aae6:	7b5d      	ldrb	r5, [r3, #13]
 802aae8:	2d00      	cmp	r5, #0
 802aaea:	d0f5      	beq.n	802aad8 <EwBspTouchGetEvents+0x13c>
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_UP;
 802aaec:	eb04 1500 	add.w	r5, r4, r0, lsl #4
      touch->State = EW_BSP_TOUCH_IDLE;
 802aaf0:	735a      	strb	r2, [r3, #13]
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_UP;
 802aaf2:	60ee      	str	r6, [r5, #12]
 802aaf4:	ea4f 1c00 	mov.w	ip, r0, lsl #4
    }
    else
      continue;

    TouchEvent[ noOfEvents ].XPos   = touch->XPos;
    TouchEvent[ noOfEvents ].YPos   = touch->YPos;
 802aaf8:	e9d3 7500 	ldrd	r7, r5, [r3]
    TouchEvent[ noOfEvents ].XPos   = touch->XPos;
 802aafc:	eb04 020c 	add.w	r2, r4, ip
    TouchEvent[ noOfEvents ].YPos   = touch->YPos;
 802ab00:	e9c2 5101 	strd	r5, r1, [r2, #4]
    TouchEvent[ noOfEvents ].XPos   = touch->XPos;
 802ab04:	f844 700c 	str.w	r7, [r4, ip]

      EwPrint( "Touch event for finger %d with state %d ( %4d, %4d )\n", f, TouchEvent[ noOfEvents ].State, TouchEvent[ noOfEvents ].XPos, TouchEvent[ noOfEvents ].YPos );

    #endif

    noOfEvents++;
 802ab08:	3001      	adds	r0, #1
  for ( f = 0; f < NO_OF_FINGERS; f++ )
 802ab0a:	3310      	adds	r3, #16
 802ab0c:	2900      	cmp	r1, #0
 802ab0e:	d0e5      	beq.n	802aadc <EwBspTouchGetEvents+0x140>
  }

  /* return the prepared touch events and the number of prepared touch events */
  if ( aTouchEvent )
 802ab10:	9a01      	ldr	r2, [sp, #4]
 802ab12:	b10a      	cbz	r2, 802ab18 <EwBspTouchGetEvents+0x17c>
    *aTouchEvent = TouchEvent;
 802ab14:	4b59      	ldr	r3, [pc, #356]	; (802ac7c <EwBspTouchGetEvents+0x2e0>)
 802ab16:	6013      	str	r3, [r2, #0]

  return noOfEvents;
}
 802ab18:	b009      	add	sp, #36	; 0x24
 802ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TouchEvent[ noOfEvents ].State = EW_BSP_TOUCH_MOVE;
 802ab1e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 802ab22:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 802ab26:	60ea      	str	r2, [r5, #12]
 802ab28:	e7e6      	b.n	802aaf8 <EwBspTouchGetEvents+0x15c>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 802ab2a:	f46f 7eef 	mvn.w	lr, #478	; 0x1de
 802ab2e:	4471      	add	r1, lr
 802ab30:	4461      	add	r1, ip
 802ab32:	b289      	uxth	r1, r1
 802ab34:	e76f      	b.n	802aa16 <EwBspTouchGetEvents+0x7a>
 802ab36:	e9cd c004 	strd	ip, r0, [sp, #16]
 802ab3a:	4e4f      	ldr	r6, [pc, #316]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
    for ( finger = -1, f = 0; f < NO_OF_FINGERS; f++ )
 802ab3c:	f04f 3eff 	mov.w	lr, #4294967295
 802ab40:	f04f 0900 	mov.w	r9, #0
      if (( touch->State != EW_BSP_TOUCH_IDLE ) && ( touch->TouchId == touchPadState.touchId[ t ]))
 802ab44:	f896 c00d 	ldrb.w	ip, [r6, #13]
 802ab48:	f1bc 0f00 	cmp.w	ip, #0
 802ab4c:	d033      	beq.n	802abb6 <EwBspTouchGetEvents+0x21a>
 802ab4e:	f891 800a 	ldrb.w	r8, [r1, #10]
 802ab52:	f896 c00c 	ldrb.w	ip, [r6, #12]
 802ab56:	45c4      	cmp	ip, r8
 802ab58:	d070      	beq.n	802ac3c <EwBspTouchGetEvents+0x2a0>
    for ( finger = -1, f = 0; f < NO_OF_FINGERS; f++ )
 802ab5a:	3610      	adds	r6, #16
 802ab5c:	f1b9 0f00 	cmp.w	r9, #0
 802ab60:	d04d      	beq.n	802abfe <EwBspTouchGetEvents+0x262>
    if ( finger >= 0 )
 802ab62:	f1be 3fff 	cmp.w	lr, #4294967295
 802ab66:	e9dd c004 	ldrd	ip, r0, [sp, #16]
 802ab6a:	d0a5      	beq.n	802aab8 <EwBspTouchGetEvents+0x11c>
      if ( touch->State == EW_BSP_TOUCH_IDLE )
 802ab6c:	4e42      	ldr	r6, [pc, #264]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
 802ab6e:	eb06 160e 	add.w	r6, r6, lr, lsl #4
 802ab72:	9604      	str	r6, [sp, #16]
      identified[ finger ] = 1;
 802ab74:	ae08      	add	r6, sp, #32
 802ab76:	eb06 080e 	add.w	r8, r6, lr
      if ( touch->State == EW_BSP_TOUCH_IDLE )
 802ab7a:	9e04      	ldr	r6, [sp, #16]
      identified[ finger ] = 1;
 802ab7c:	f808 9c04 	strb.w	r9, [r8, #-4]
      if ( touch->State == EW_BSP_TOUCH_IDLE )
 802ab80:	7b76      	ldrb	r6, [r6, #13]
 802ab82:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 802ab86:	2e00      	cmp	r6, #0
 802ab88:	d13c      	bne.n	802ac04 <EwBspTouchGetEvents+0x268>
        touch->State = EW_BSP_TOUCH_DOWN;
 802ab8a:	9e04      	ldr	r6, [sp, #16]
 802ab8c:	f891 800a 	ldrb.w	r8, [r1, #10]
 802ab90:	f886 900d 	strb.w	r9, [r6, #13]
      touch->XPos    = x;
 802ab94:	4e38      	ldr	r6, [pc, #224]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
 802ab96:	3101      	adds	r1, #1
 802ab98:	eb06 090e 	add.w	r9, r6, lr
 802ab9c:	f846 300e 	str.w	r3, [r6, lr]
  for ( t = 0; t < touchPadState.touchDetected; t++ )
 802aba0:	42a1      	cmp	r1, r4
      touch->Ticks   = ticks;
 802aba2:	9b03      	ldr	r3, [sp, #12]
      touch->YPos    = y;
 802aba4:	f8c9 2004 	str.w	r2, [r9, #4]
      touch->TouchId = touchPadState.touchId[ t ];
 802aba8:	f889 800c 	strb.w	r8, [r9, #12]
      touch->Ticks   = ticks;
 802abac:	f8c9 3008 	str.w	r3, [r9, #8]
  for ( t = 0; t < touchPadState.touchDetected; t++ )
 802abb0:	f47f af6a 	bne.w	802aa88 <EwBspTouchGetEvents+0xec>
 802abb4:	e783      	b.n	802aabe <EwBspTouchGetEvents+0x122>
      if (( touch->State == EW_BSP_TOUCH_IDLE ) && ( ticks < touch->Ticks + DELTA_TIME )
 802abb6:	68b0      	ldr	r0, [r6, #8]
 802abb8:	f500 7cfa 	add.w	ip, r0, #500	; 0x1f4
 802abbc:	9803      	ldr	r0, [sp, #12]
 802abbe:	4584      	cmp	ip, r0
 802abc0:	d915      	bls.n	802abee <EwBspTouchGetEvents+0x252>
        && ( x > touch->XPos - DELTA_TOUCH ) && ( x < touch->XPos + DELTA_TOUCH )
 802abc2:	f8d6 c000 	ldr.w	ip, [r6]
 802abc6:	f1ac 080f 	sub.w	r8, ip, #15
 802abca:	4598      	cmp	r8, r3
 802abcc:	dc0f      	bgt.n	802abee <EwBspTouchGetEvents+0x252>
 802abce:	f10c 0c0f 	add.w	ip, ip, #15
 802abd2:	459c      	cmp	ip, r3
 802abd4:	db0b      	blt.n	802abee <EwBspTouchGetEvents+0x252>
        && ( y > touch->YPos - DELTA_TOUCH ) && ( y < touch->YPos + DELTA_TOUCH ))
 802abd6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 802abda:	f1ac 080f 	sub.w	r8, ip, #15
 802abde:	4590      	cmp	r8, r2
 802abe0:	dc05      	bgt.n	802abee <EwBspTouchGetEvents+0x252>
 802abe2:	f10c 0c0f 	add.w	ip, ip, #15
 802abe6:	4594      	cmp	ip, r2
 802abe8:	db01      	blt.n	802abee <EwBspTouchGetEvents+0x252>
 802abea:	46ce      	mov	lr, r9
 802abec:	e7b5      	b.n	802ab5a <EwBspTouchGetEvents+0x1be>
      if (( touch->State == EW_BSP_TOUCH_IDLE ) && ( finger == -1 ))
 802abee:	f1be 3fff 	cmp.w	lr, #4294967295
 802abf2:	bf08      	it	eq
 802abf4:	46ce      	moveq	lr, r9
    for ( finger = -1, f = 0; f < NO_OF_FINGERS; f++ )
 802abf6:	3610      	adds	r6, #16
 802abf8:	f1b9 0f00 	cmp.w	r9, #0
 802abfc:	d1b1      	bne.n	802ab62 <EwBspTouchGetEvents+0x1c6>
 802abfe:	f04f 0901 	mov.w	r9, #1
 802ac02:	e79f      	b.n	802ab44 <EwBspTouchGetEvents+0x1a8>
 802ac04:	f891 800a 	ldrb.w	r8, [r1, #10]
        if (( touch->XPos != x ) || ( touch->YPos != y ))
 802ac08:	4e1b      	ldr	r6, [pc, #108]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
 802ac0a:	f856 600e 	ldr.w	r6, [r6, lr]
 802ac0e:	9604      	str	r6, [sp, #16]
 802ac10:	4e19      	ldr	r6, [pc, #100]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
 802ac12:	eb06 090e 	add.w	r9, r6, lr
 802ac16:	9e04      	ldr	r6, [sp, #16]
 802ac18:	429e      	cmp	r6, r3
 802ac1a:	d006      	beq.n	802ac2a <EwBspTouchGetEvents+0x28e>
          touch->State = EW_BSP_TOUCH_MOVE;
 802ac1c:	4e16      	ldr	r6, [pc, #88]	; (802ac78 <EwBspTouchGetEvents+0x2dc>)
 802ac1e:	4476      	add	r6, lr
 802ac20:	f04f 0902 	mov.w	r9, #2
 802ac24:	f886 900d 	strb.w	r9, [r6, #13]
 802ac28:	e7b4      	b.n	802ab94 <EwBspTouchGetEvents+0x1f8>
        if (( touch->XPos != x ) || ( touch->YPos != y ))
 802ac2a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 802ac2e:	4296      	cmp	r6, r2
 802ac30:	d1f4      	bne.n	802ac1c <EwBspTouchGetEvents+0x280>
          touch->State = EW_BSP_TOUCH_HOLD;
 802ac32:	f04f 0604 	mov.w	r6, #4
 802ac36:	f889 600d 	strb.w	r6, [r9, #13]
 802ac3a:	e7ab      	b.n	802ab94 <EwBspTouchGetEvents+0x1f8>
      identified[ finger ] = 1;
 802ac3c:	ae08      	add	r6, sp, #32
 802ac3e:	444e      	add	r6, r9
 802ac40:	ea4f 1e09 	mov.w	lr, r9, lsl #4
 802ac44:	f04f 0901 	mov.w	r9, #1
 802ac48:	e9dd c004 	ldrd	ip, r0, [sp, #16]
 802ac4c:	f806 9c04 	strb.w	r9, [r6, #-4]
      if ( touch->State == EW_BSP_TOUCH_IDLE )
 802ac50:	e7da      	b.n	802ac08 <EwBspTouchGetEvents+0x26c>
 802ac52:	bf00      	nop
 802ac54:	200004e0 	.word	0x200004e0
 802ac58:	200004d8 	.word	0x200004d8
 802ac5c:	2000048c 	.word	0x2000048c
 802ac60:	20000484 	.word	0x20000484
 802ac64:	20000488 	.word	0x20000488
 802ac68:	20000480 	.word	0x20000480
 802ac6c:	20000478 	.word	0x20000478
 802ac70:	20000474 	.word	0x20000474
 802ac74:	200004e2 	.word	0x200004e2
 802ac78:	20000490 	.word	0x20000490
 802ac7c:	200004b0 	.word	0x200004b0
 802ac80:	2000047c 	.word	0x2000047c
 802ac84:	200004d0 	.word	0x200004d0

0802ac88 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 802ac88:	4770      	bx	lr
 802ac8a:	bf00      	nop

0802ac8c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 802ac8c:	b508      	push	{r3, lr}
  EwPrint( "System halted! [HardFault_Handler]\n" );
 802ac8e:	4802      	ldr	r0, [pc, #8]	; (802ac98 <HardFault_Handler+0xc>)
 802ac90:	f7ed fbd0 	bl	8018434 <EwPrint>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 802ac94:	e7fe      	b.n	802ac94 <HardFault_Handler+0x8>
 802ac96:	bf00      	nop
 802ac98:	08039888 	.word	0x08039888

0802ac9c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 802ac9c:	b508      	push	{r3, lr}
  EwPrint( "System halted! [MemManage_Handler]\n" );
 802ac9e:	4802      	ldr	r0, [pc, #8]	; (802aca8 <MemManage_Handler+0xc>)
 802aca0:	f7ed fbc8 	bl	8018434 <EwPrint>

  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 802aca4:	e7fe      	b.n	802aca4 <MemManage_Handler+0x8>
 802aca6:	bf00      	nop
 802aca8:	080398ac 	.word	0x080398ac

0802acac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 802acac:	b508      	push	{r3, lr}
  EwPrint( "System halted! [BusFault_Handler]\n" );
 802acae:	4802      	ldr	r0, [pc, #8]	; (802acb8 <BusFault_Handler+0xc>)
 802acb0:	f7ed fbc0 	bl	8018434 <EwPrint>

  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 802acb4:	e7fe      	b.n	802acb4 <BusFault_Handler+0x8>
 802acb6:	bf00      	nop
 802acb8:	080398d0 	.word	0x080398d0

0802acbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 802acbc:	b508      	push	{r3, lr}
  EwPrint( "System halted! [UsageFault_Handler]\n" );
 802acbe:	4802      	ldr	r0, [pc, #8]	; (802acc8 <UsageFault_Handler+0xc>)
 802acc0:	f7ed fbb8 	bl	8018434 <EwPrint>

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 802acc4:	e7fe      	b.n	802acc4 <UsageFault_Handler+0x8>
 802acc6:	bf00      	nop
 802acc8:	080398f4 	.word	0x080398f4

0802accc <DebugMon_Handler>:
 802accc:	4770      	bx	lr
 802acce:	bf00      	nop

0802acd0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 802acd0:	b508      	push	{r3, lr}
  HAL_IncTick();
 802acd2:	f000 ffbb 	bl	802bc4c <HAL_IncTick>
  EwBspClockTickIncrement();
 802acd6:	f7fe fe8d 	bl	80299f4 <EwBspClockTickIncrement>

  #if EW_USE_FREE_RTOS == 1
    osSystickHandler();
  #endif
}
 802acda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSystickHandler();
 802acde:	f004 bc43 	b.w	802f568 <osSystickHandler>
 802ace2:	bf00      	nop

0802ace4 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 IRQ.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler( void )
{
 802ace4:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler( USER_BUTTON_PIN );
 802ace6:	2001      	movs	r0, #1
 802ace8:	f002 f850 	bl	802cd8c <HAL_GPIO_EXTI_IRQHandler>
  EwBspInOutEventHandler( USER_BUTTON_PIN );
}
 802acec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  EwBspInOutEventHandler( USER_BUTTON_PIN );
 802acf0:	2001      	movs	r0, #1
 802acf2:	f7ff bd13 	b.w	802a71c <EwBspInOutEventHandler>
 802acf6:	bf00      	nop

0802acf8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802acf8:	4910      	ldr	r1, [pc, #64]	; (802ad3c <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 802acfa:	4b11      	ldr	r3, [pc, #68]	; (802ad40 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802acfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802ad00:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 802ad04:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802ad06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 802ad0a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 802ad0c:	4c0d      	ldr	r4, [pc, #52]	; (802ad44 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 802ad0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 802ad10:	f042 0201 	orr.w	r2, r2, #1
 802ad14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 802ad16:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 802ad18:	681a      	ldr	r2, [r3, #0]
 802ad1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 802ad1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 802ad22:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 802ad24:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802ad26:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802ad28:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802ad2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802ad30:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 802ad32:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802ad34:	608c      	str	r4, [r1, #8]
#endif
}
 802ad36:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad3a:	4770      	bx	lr
 802ad3c:	e000ed00 	.word	0xe000ed00
 802ad40:	40023800 	.word	0x40023800
 802ad44:	24003010 	.word	0x24003010

0802ad48 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 802ad48:	b538      	push	{r3, r4, r5, lr}
 802ad4a:	4604      	mov	r4, r0
 802ad4c:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802ad4e:	2000      	movs	r0, #0
 802ad50:	49cc      	ldr	r1, [pc, #816]	; (802b084 <OTM8009A_Init+0x33c>)
 802ad52:	f000 fbcf 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 802ad56:	49cc      	ldr	r1, [pc, #816]	; (802b088 <OTM8009A_Init+0x340>)
 802ad58:	2003      	movs	r0, #3
 802ad5a:	f000 fbcb 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 802ad5e:	49cb      	ldr	r1, [pc, #812]	; (802b08c <OTM8009A_Init+0x344>)
 802ad60:	2000      	movs	r0, #0
 802ad62:	f000 fbc7 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 802ad66:	49ca      	ldr	r1, [pc, #808]	; (802b090 <OTM8009A_Init+0x348>)
 802ad68:	2002      	movs	r0, #2
 802ad6a:	f000 fbc3 	bl	802b4f4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 802ad6e:	49c7      	ldr	r1, [pc, #796]	; (802b08c <OTM8009A_Init+0x344>)
 802ad70:	2000      	movs	r0, #0
 802ad72:	f000 fbbf 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 802ad76:	49c7      	ldr	r1, [pc, #796]	; (802b094 <OTM8009A_Init+0x34c>)
 802ad78:	2000      	movs	r0, #0
 802ad7a:	f000 fbbb 	bl	802b4f4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 802ad7e:	200a      	movs	r0, #10
 802ad80:	f000 fb5c 	bl	802b43c <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 802ad84:	49c4      	ldr	r1, [pc, #784]	; (802b098 <OTM8009A_Init+0x350>)
 802ad86:	2000      	movs	r0, #0
 802ad88:	f000 fbb4 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 802ad8c:	49c3      	ldr	r1, [pc, #780]	; (802b09c <OTM8009A_Init+0x354>)
 802ad8e:	2000      	movs	r0, #0
 802ad90:	f000 fbb0 	bl	802b4f4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 802ad94:	200a      	movs	r0, #10
 802ad96:	f000 fb51 	bl	802b43c <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 802ad9a:	49c1      	ldr	r1, [pc, #772]	; (802b0a0 <OTM8009A_Init+0x358>)
 802ad9c:	2000      	movs	r0, #0
 802ad9e:	f000 fba9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 802ada2:	49c0      	ldr	r1, [pc, #768]	; (802b0a4 <OTM8009A_Init+0x35c>)
 802ada4:	2000      	movs	r0, #0
 802ada6:	f000 fba5 	bl	802b4f4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 802adaa:	49bf      	ldr	r1, [pc, #764]	; (802b0a8 <OTM8009A_Init+0x360>)
 802adac:	2000      	movs	r0, #0
 802adae:	f000 fba1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 802adb2:	49be      	ldr	r1, [pc, #760]	; (802b0ac <OTM8009A_Init+0x364>)
 802adb4:	2000      	movs	r0, #0
 802adb6:	f000 fb9d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 802adba:	49bd      	ldr	r1, [pc, #756]	; (802b0b0 <OTM8009A_Init+0x368>)
 802adbc:	2000      	movs	r0, #0
 802adbe:	f000 fb99 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 802adc2:	49bc      	ldr	r1, [pc, #752]	; (802b0b4 <OTM8009A_Init+0x36c>)
 802adc4:	2000      	movs	r0, #0
 802adc6:	f000 fb95 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802adca:	49ae      	ldr	r1, [pc, #696]	; (802b084 <OTM8009A_Init+0x33c>)
 802adcc:	2000      	movs	r0, #0
 802adce:	f000 fb91 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 802add2:	49b9      	ldr	r1, [pc, #740]	; (802b0b8 <OTM8009A_Init+0x370>)
 802add4:	2000      	movs	r0, #0
 802add6:	f000 fb8d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 802adda:	49b8      	ldr	r1, [pc, #736]	; (802b0bc <OTM8009A_Init+0x374>)
 802addc:	2000      	movs	r0, #0
 802adde:	f000 fb89 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 802ade2:	49b7      	ldr	r1, [pc, #732]	; (802b0c0 <OTM8009A_Init+0x378>)
 802ade4:	2000      	movs	r0, #0
 802ade6:	f000 fb85 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 802adea:	49b6      	ldr	r1, [pc, #728]	; (802b0c4 <OTM8009A_Init+0x37c>)
 802adec:	2000      	movs	r0, #0
 802adee:	f000 fb81 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 802adf2:	49b5      	ldr	r1, [pc, #724]	; (802b0c8 <OTM8009A_Init+0x380>)
 802adf4:	2000      	movs	r0, #0
 802adf6:	f000 fb7d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 802adfa:	49b4      	ldr	r1, [pc, #720]	; (802b0cc <OTM8009A_Init+0x384>)
 802adfc:	2000      	movs	r0, #0
 802adfe:	f000 fb79 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 802ae02:	49b3      	ldr	r1, [pc, #716]	; (802b0d0 <OTM8009A_Init+0x388>)
 802ae04:	2000      	movs	r0, #0
 802ae06:	f000 fb75 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 802ae0a:	49b2      	ldr	r1, [pc, #712]	; (802b0d4 <OTM8009A_Init+0x38c>)
 802ae0c:	2000      	movs	r0, #0
 802ae0e:	f000 fb71 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 802ae12:	49a6      	ldr	r1, [pc, #664]	; (802b0ac <OTM8009A_Init+0x364>)
 802ae14:	2000      	movs	r0, #0
 802ae16:	f000 fb6d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802ae1a:	499a      	ldr	r1, [pc, #616]	; (802b084 <OTM8009A_Init+0x33c>)
 802ae1c:	2000      	movs	r0, #0
 802ae1e:	f000 fb69 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 802ae22:	49ad      	ldr	r1, [pc, #692]	; (802b0d8 <OTM8009A_Init+0x390>)
 802ae24:	2002      	movs	r0, #2
 802ae26:	f000 fb65 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 802ae2a:	49ac      	ldr	r1, [pc, #688]	; (802b0dc <OTM8009A_Init+0x394>)
 802ae2c:	2000      	movs	r0, #0
 802ae2e:	f000 fb61 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 802ae32:	49ab      	ldr	r1, [pc, #684]	; (802b0e0 <OTM8009A_Init+0x398>)
 802ae34:	2000      	movs	r0, #0
 802ae36:	f000 fb5d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 802ae3a:	49aa      	ldr	r1, [pc, #680]	; (802b0e4 <OTM8009A_Init+0x39c>)
 802ae3c:	2000      	movs	r0, #0
 802ae3e:	f000 fb59 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 802ae42:	49a9      	ldr	r1, [pc, #676]	; (802b0e8 <OTM8009A_Init+0x3a0>)
 802ae44:	2000      	movs	r0, #0
 802ae46:	f000 fb55 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 802ae4a:	49a8      	ldr	r1, [pc, #672]	; (802b0ec <OTM8009A_Init+0x3a4>)
 802ae4c:	2000      	movs	r0, #0
 802ae4e:	f000 fb51 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 802ae52:	49a7      	ldr	r1, [pc, #668]	; (802b0f0 <OTM8009A_Init+0x3a8>)
 802ae54:	2000      	movs	r0, #0
 802ae56:	f000 fb4d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 802ae5a:	4998      	ldr	r1, [pc, #608]	; (802b0bc <OTM8009A_Init+0x374>)
 802ae5c:	2000      	movs	r0, #0
 802ae5e:	f000 fb49 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 802ae62:	49a4      	ldr	r1, [pc, #656]	; (802b0f4 <OTM8009A_Init+0x3ac>)
 802ae64:	2000      	movs	r0, #0
 802ae66:	f000 fb45 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 802ae6a:	4996      	ldr	r1, [pc, #600]	; (802b0c4 <OTM8009A_Init+0x37c>)
 802ae6c:	2000      	movs	r0, #0
 802ae6e:	f000 fb41 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 802ae72:	49a1      	ldr	r1, [pc, #644]	; (802b0f8 <OTM8009A_Init+0x3b0>)
 802ae74:	2000      	movs	r0, #0
 802ae76:	f000 fb3d 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 802ae7a:	49a0      	ldr	r1, [pc, #640]	; (802b0fc <OTM8009A_Init+0x3b4>)
 802ae7c:	2000      	movs	r0, #0
 802ae7e:	f000 fb39 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 802ae82:	499f      	ldr	r1, [pc, #636]	; (802b100 <OTM8009A_Init+0x3b8>)
 802ae84:	2002      	movs	r0, #2
 802ae86:	f000 fb35 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 802ae8a:	4980      	ldr	r1, [pc, #512]	; (802b08c <OTM8009A_Init+0x344>)
 802ae8c:	2000      	movs	r0, #0
 802ae8e:	f000 fb31 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 802ae92:	499c      	ldr	r1, [pc, #624]	; (802b104 <OTM8009A_Init+0x3bc>)
 802ae94:	2006      	movs	r0, #6
 802ae96:	f000 fb2d 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 802ae9a:	499b      	ldr	r1, [pc, #620]	; (802b108 <OTM8009A_Init+0x3c0>)
 802ae9c:	2000      	movs	r0, #0
 802ae9e:	f000 fb29 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 802aea2:	499a      	ldr	r1, [pc, #616]	; (802b10c <OTM8009A_Init+0x3c4>)
 802aea4:	200e      	movs	r0, #14
 802aea6:	f000 fb25 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 802aeaa:	4999      	ldr	r1, [pc, #612]	; (802b110 <OTM8009A_Init+0x3c8>)
 802aeac:	2000      	movs	r0, #0
 802aeae:	f000 fb21 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 802aeb2:	4998      	ldr	r1, [pc, #608]	; (802b114 <OTM8009A_Init+0x3cc>)
 802aeb4:	200e      	movs	r0, #14
 802aeb6:	f000 fb1d 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 802aeba:	4997      	ldr	r1, [pc, #604]	; (802b118 <OTM8009A_Init+0x3d0>)
 802aebc:	2000      	movs	r0, #0
 802aebe:	f000 fb19 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 802aec2:	4996      	ldr	r1, [pc, #600]	; (802b11c <OTM8009A_Init+0x3d4>)
 802aec4:	200a      	movs	r0, #10
 802aec6:	f000 fb15 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 802aeca:	4995      	ldr	r1, [pc, #596]	; (802b120 <OTM8009A_Init+0x3d8>)
 802aecc:	2000      	movs	r0, #0
 802aece:	f000 fb11 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 802aed2:	4994      	ldr	r1, [pc, #592]	; (802b124 <OTM8009A_Init+0x3dc>)
 802aed4:	2000      	movs	r0, #0
 802aed6:	f000 fb0d 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 802aeda:	496c      	ldr	r1, [pc, #432]	; (802b08c <OTM8009A_Init+0x344>)
 802aedc:	2000      	movs	r0, #0
 802aede:	f000 fb09 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 802aee2:	4991      	ldr	r1, [pc, #580]	; (802b128 <OTM8009A_Init+0x3e0>)
 802aee4:	200a      	movs	r0, #10
 802aee6:	f000 fb05 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 802aeea:	4990      	ldr	r1, [pc, #576]	; (802b12c <OTM8009A_Init+0x3e4>)
 802aeec:	2000      	movs	r0, #0
 802aeee:	f000 fb01 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 802aef2:	498f      	ldr	r1, [pc, #572]	; (802b130 <OTM8009A_Init+0x3e8>)
 802aef4:	200f      	movs	r0, #15
 802aef6:	f000 fafd 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 802aefa:	4983      	ldr	r1, [pc, #524]	; (802b108 <OTM8009A_Init+0x3c0>)
 802aefc:	2000      	movs	r0, #0
 802aefe:	f000 faf9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 802af02:	498c      	ldr	r1, [pc, #560]	; (802b134 <OTM8009A_Init+0x3ec>)
 802af04:	200f      	movs	r0, #15
 802af06:	f000 faf5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 802af0a:	4981      	ldr	r1, [pc, #516]	; (802b110 <OTM8009A_Init+0x3c8>)
 802af0c:	2000      	movs	r0, #0
 802af0e:	f000 faf1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 802af12:	4989      	ldr	r1, [pc, #548]	; (802b138 <OTM8009A_Init+0x3f0>)
 802af14:	200a      	movs	r0, #10
 802af16:	f000 faed 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 802af1a:	497f      	ldr	r1, [pc, #508]	; (802b118 <OTM8009A_Init+0x3d0>)
 802af1c:	2000      	movs	r0, #0
 802af1e:	f000 fae9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 802af22:	4986      	ldr	r1, [pc, #536]	; (802b13c <OTM8009A_Init+0x3f4>)
 802af24:	200f      	movs	r0, #15
 802af26:	f000 fae5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 802af2a:	497d      	ldr	r1, [pc, #500]	; (802b120 <OTM8009A_Init+0x3d8>)
 802af2c:	2000      	movs	r0, #0
 802af2e:	f000 fae1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 802af32:	4983      	ldr	r1, [pc, #524]	; (802b140 <OTM8009A_Init+0x3f8>)
 802af34:	200f      	movs	r0, #15
 802af36:	f000 fadd 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 802af3a:	4982      	ldr	r1, [pc, #520]	; (802b144 <OTM8009A_Init+0x3fc>)
 802af3c:	2000      	movs	r0, #0
 802af3e:	f000 fad9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 802af42:	4981      	ldr	r1, [pc, #516]	; (802b148 <OTM8009A_Init+0x400>)
 802af44:	200a      	movs	r0, #10
 802af46:	f000 fad5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 802af4a:	4980      	ldr	r1, [pc, #512]	; (802b14c <OTM8009A_Init+0x404>)
 802af4c:	2000      	movs	r0, #0
 802af4e:	f000 fad1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 802af52:	497f      	ldr	r1, [pc, #508]	; (802b150 <OTM8009A_Init+0x408>)
 802af54:	200a      	movs	r0, #10
 802af56:	f000 facd 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 802af5a:	494c      	ldr	r1, [pc, #304]	; (802b08c <OTM8009A_Init+0x344>)
 802af5c:	2000      	movs	r0, #0
 802af5e:	f000 fac9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 802af62:	497c      	ldr	r1, [pc, #496]	; (802b154 <OTM8009A_Init+0x40c>)
 802af64:	200a      	movs	r0, #10
 802af66:	f000 fac5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 802af6a:	4970      	ldr	r1, [pc, #448]	; (802b12c <OTM8009A_Init+0x3e4>)
 802af6c:	2000      	movs	r0, #0
 802af6e:	f000 fac1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 802af72:	4979      	ldr	r1, [pc, #484]	; (802b158 <OTM8009A_Init+0x410>)
 802af74:	200f      	movs	r0, #15
 802af76:	f000 fabd 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 802af7a:	4963      	ldr	r1, [pc, #396]	; (802b108 <OTM8009A_Init+0x3c0>)
 802af7c:	2000      	movs	r0, #0
 802af7e:	f000 fab9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 802af82:	4976      	ldr	r1, [pc, #472]	; (802b15c <OTM8009A_Init+0x414>)
 802af84:	200f      	movs	r0, #15
 802af86:	f000 fab5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 802af8a:	4961      	ldr	r1, [pc, #388]	; (802b110 <OTM8009A_Init+0x3c8>)
 802af8c:	2000      	movs	r0, #0
 802af8e:	f000 fab1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 802af92:	4973      	ldr	r1, [pc, #460]	; (802b160 <OTM8009A_Init+0x418>)
 802af94:	200a      	movs	r0, #10
 802af96:	f000 faad 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 802af9a:	495f      	ldr	r1, [pc, #380]	; (802b118 <OTM8009A_Init+0x3d0>)
 802af9c:	2000      	movs	r0, #0
 802af9e:	f000 faa9 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 802afa2:	4970      	ldr	r1, [pc, #448]	; (802b164 <OTM8009A_Init+0x41c>)
 802afa4:	200f      	movs	r0, #15
 802afa6:	f000 faa5 	bl	802b4f4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 802afaa:	495d      	ldr	r1, [pc, #372]	; (802b120 <OTM8009A_Init+0x3d8>)
 802afac:	2000      	movs	r0, #0
 802afae:	f000 faa1 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 802afb2:	496d      	ldr	r1, [pc, #436]	; (802b168 <OTM8009A_Init+0x420>)
 802afb4:	200f      	movs	r0, #15
 802afb6:	f000 fa9d 	bl	802b4f4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 802afba:	4940      	ldr	r1, [pc, #256]	; (802b0bc <OTM8009A_Init+0x374>)
 802afbc:	2000      	movs	r0, #0
 802afbe:	f000 fa99 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 802afc2:	496a      	ldr	r1, [pc, #424]	; (802b16c <OTM8009A_Init+0x424>)
 802afc4:	2000      	movs	r0, #0
 802afc6:	f000 fa95 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 802afca:	4969      	ldr	r1, [pc, #420]	; (802b170 <OTM8009A_Init+0x428>)
 802afcc:	2000      	movs	r0, #0
 802afce:	f000 fa91 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 802afd2:	4968      	ldr	r1, [pc, #416]	; (802b174 <OTM8009A_Init+0x42c>)
 802afd4:	2000      	movs	r0, #0
 802afd6:	f000 fa8d 	bl	802b4f4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 802afda:	4967      	ldr	r1, [pc, #412]	; (802b178 <OTM8009A_Init+0x430>)
 802afdc:	2000      	movs	r0, #0
 802afde:	f000 fa89 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 802afe2:	4966      	ldr	r1, [pc, #408]	; (802b17c <OTM8009A_Init+0x434>)
 802afe4:	2000      	movs	r0, #0
 802afe6:	f000 fa85 	bl	802b4f4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802afea:	4926      	ldr	r1, [pc, #152]	; (802b084 <OTM8009A_Init+0x33c>)
 802afec:	2000      	movs	r0, #0
 802afee:	f000 fa81 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 802aff2:	4963      	ldr	r1, [pc, #396]	; (802b180 <OTM8009A_Init+0x438>)
 802aff4:	2003      	movs	r0, #3
 802aff6:	f000 fa7d 	bl	802b4f4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802affa:	4922      	ldr	r1, [pc, #136]	; (802b084 <OTM8009A_Init+0x33c>)
 802affc:	2000      	movs	r0, #0
 802affe:	f000 fa79 	bl	802b4f4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802b002:	4920      	ldr	r1, [pc, #128]	; (802b084 <OTM8009A_Init+0x33c>)
 802b004:	2000      	movs	r0, #0
 802b006:	f000 fa75 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 802b00a:	495e      	ldr	r1, [pc, #376]	; (802b184 <OTM8009A_Init+0x43c>)
 802b00c:	2010      	movs	r0, #16
 802b00e:	f000 fa71 	bl	802b4f4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802b012:	491c      	ldr	r1, [pc, #112]	; (802b084 <OTM8009A_Init+0x33c>)
 802b014:	2000      	movs	r0, #0
 802b016:	f000 fa6d 	bl	802b4f4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 802b01a:	495b      	ldr	r1, [pc, #364]	; (802b188 <OTM8009A_Init+0x440>)
 802b01c:	2010      	movs	r0, #16
 802b01e:	f000 fa69 	bl	802b4f4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 802b022:	2000      	movs	r0, #0
 802b024:	4959      	ldr	r1, [pc, #356]	; (802b18c <OTM8009A_Init+0x444>)
 802b026:	f000 fa65 	bl	802b4f4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 802b02a:	2078      	movs	r0, #120	; 0x78
 802b02c:	f000 fa06 	bl	802b43c <OTM8009A_IO_Delay>

  switch(ColorCoding)
 802b030:	2c00      	cmp	r4, #0
 802b032:	f000 80bd 	beq.w	802b1b0 <OTM8009A_Init+0x468>
 802b036:	2c02      	cmp	r4, #2
 802b038:	d103      	bne.n	802b042 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 802b03a:	4955      	ldr	r1, [pc, #340]	; (802b190 <OTM8009A_Init+0x448>)
 802b03c:	2000      	movs	r0, #0
 802b03e:	f000 fa59 	bl	802b4f4 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 802b042:	2d01      	cmp	r5, #1
 802b044:	f000 80bb 	beq.w	802b1be <OTM8009A_Init+0x476>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 802b048:	4952      	ldr	r1, [pc, #328]	; (802b194 <OTM8009A_Init+0x44c>)
 802b04a:	2000      	movs	r0, #0
 802b04c:	f000 fa52 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 802b050:	4951      	ldr	r1, [pc, #324]	; (802b198 <OTM8009A_Init+0x450>)
 802b052:	2000      	movs	r0, #0
 802b054:	f000 fa4e 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 802b058:	4950      	ldr	r1, [pc, #320]	; (802b19c <OTM8009A_Init+0x454>)
 802b05a:	2000      	movs	r0, #0
 802b05c:	f000 fa4a 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 802b060:	494f      	ldr	r1, [pc, #316]	; (802b1a0 <OTM8009A_Init+0x458>)
 802b062:	2000      	movs	r0, #0
 802b064:	f000 fa46 	bl	802b4f4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 802b068:	494e      	ldr	r1, [pc, #312]	; (802b1a4 <OTM8009A_Init+0x45c>)
 802b06a:	2000      	movs	r0, #0
 802b06c:	f000 fa42 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 802b070:	4904      	ldr	r1, [pc, #16]	; (802b084 <OTM8009A_Init+0x33c>)
 802b072:	2000      	movs	r0, #0
 802b074:	f000 fa3e 	bl	802b4f4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 802b078:	494b      	ldr	r1, [pc, #300]	; (802b1a8 <OTM8009A_Init+0x460>)
 802b07a:	2000      	movs	r0, #0
 802b07c:	f000 fa3a 	bl	802b4f4 <DSI_IO_WriteCmd>
 802b080:	e094      	b.n	802b1ac <OTM8009A_Init+0x464>
 802b082:	bf00      	nop
 802b084:	08039934 	.word	0x08039934
 802b088:	08039a00 	.word	0x08039a00
 802b08c:	08039960 	.word	0x08039960
 802b090:	08039a8c 	.word	0x08039a8c
 802b094:	0803998c 	.word	0x0803998c
 802b098:	080399b8 	.word	0x080399b8
 802b09c:	080399e4 	.word	0x080399e4
 802b0a0:	080399f0 	.word	0x080399f0
 802b0a4:	080399f4 	.word	0x080399f4
 802b0a8:	080399f8 	.word	0x080399f8
 802b0ac:	080399fc 	.word	0x080399fc
 802b0b0:	08039938 	.word	0x08039938
 802b0b4:	0803993c 	.word	0x0803993c
 802b0b8:	08039940 	.word	0x08039940
 802b0bc:	08039944 	.word	0x08039944
 802b0c0:	08039948 	.word	0x08039948
 802b0c4:	0803994c 	.word	0x0803994c
 802b0c8:	08039950 	.word	0x08039950
 802b0cc:	08039954 	.word	0x08039954
 802b0d0:	08039958 	.word	0x08039958
 802b0d4:	0803995c 	.word	0x0803995c
 802b0d8:	08039b18 	.word	0x08039b18
 802b0dc:	08039964 	.word	0x08039964
 802b0e0:	08039968 	.word	0x08039968
 802b0e4:	0803996c 	.word	0x0803996c
 802b0e8:	08039970 	.word	0x08039970
 802b0ec:	08039974 	.word	0x08039974
 802b0f0:	08039978 	.word	0x08039978
 802b0f4:	0803997c 	.word	0x0803997c
 802b0f8:	08039980 	.word	0x08039980
 802b0fc:	08039984 	.word	0x08039984
 802b100:	08039b1c 	.word	0x08039b1c
 802b104:	08039b20 	.word	0x08039b20
 802b108:	08039988 	.word	0x08039988
 802b10c:	08039b28 	.word	0x08039b28
 802b110:	08039990 	.word	0x08039990
 802b114:	08039b38 	.word	0x08039b38
 802b118:	08039994 	.word	0x08039994
 802b11c:	08039a04 	.word	0x08039a04
 802b120:	08039998 	.word	0x08039998
 802b124:	080399d4 	.word	0x080399d4
 802b128:	08039a10 	.word	0x08039a10
 802b12c:	0803999c 	.word	0x0803999c
 802b130:	08039a1c 	.word	0x08039a1c
 802b134:	08039a2c 	.word	0x08039a2c
 802b138:	08039a3c 	.word	0x08039a3c
 802b13c:	08039a48 	.word	0x08039a48
 802b140:	08039a58 	.word	0x08039a58
 802b144:	080399a0 	.word	0x080399a0
 802b148:	08039a68 	.word	0x08039a68
 802b14c:	080399a4 	.word	0x080399a4
 802b150:	08039a74 	.word	0x08039a74
 802b154:	08039a80 	.word	0x08039a80
 802b158:	08039a90 	.word	0x08039a90
 802b15c:	08039aa0 	.word	0x08039aa0
 802b160:	08039ab0 	.word	0x08039ab0
 802b164:	08039abc 	.word	0x08039abc
 802b168:	08039acc 	.word	0x08039acc
 802b16c:	080399d8 	.word	0x080399d8
 802b170:	080399dc 	.word	0x080399dc
 802b174:	080399e0 	.word	0x080399e0
 802b178:	080399e8 	.word	0x080399e8
 802b17c:	080399ec 	.word	0x080399ec
 802b180:	08039adc 	.word	0x08039adc
 802b184:	08039af0 	.word	0x08039af0
 802b188:	08039b04 	.word	0x08039b04
 802b18c:	080399a8 	.word	0x080399a8
 802b190:	080399ac 	.word	0x080399ac
 802b194:	080399bc 	.word	0x080399bc
 802b198:	080399c0 	.word	0x080399c0
 802b19c:	080399c4 	.word	0x080399c4
 802b1a0:	080399c8 	.word	0x080399c8
 802b1a4:	080399cc 	.word	0x080399cc
 802b1a8:	080399d0 	.word	0x080399d0

  return 0;
}
 802b1ac:	2000      	movs	r0, #0
 802b1ae:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 802b1b0:	4909      	ldr	r1, [pc, #36]	; (802b1d8 <OTM8009A_Init+0x490>)
 802b1b2:	4620      	mov	r0, r4
 802b1b4:	f000 f99e 	bl	802b4f4 <DSI_IO_WriteCmd>
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 802b1b8:	2d01      	cmp	r5, #1
 802b1ba:	f47f af45 	bne.w	802b048 <OTM8009A_Init+0x300>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 802b1be:	4907      	ldr	r1, [pc, #28]	; (802b1dc <OTM8009A_Init+0x494>)
 802b1c0:	2000      	movs	r0, #0
 802b1c2:	f000 f997 	bl	802b4f4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 802b1c6:	4906      	ldr	r1, [pc, #24]	; (802b1e0 <OTM8009A_Init+0x498>)
 802b1c8:	2004      	movs	r0, #4
 802b1ca:	f000 f993 	bl	802b4f4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 802b1ce:	4905      	ldr	r1, [pc, #20]	; (802b1e4 <OTM8009A_Init+0x49c>)
 802b1d0:	2004      	movs	r0, #4
 802b1d2:	f000 f98f 	bl	802b4f4 <DSI_IO_WriteCmd>
 802b1d6:	e737      	b.n	802b048 <OTM8009A_Init+0x300>
 802b1d8:	080399b0 	.word	0x080399b0
 802b1dc:	080399b4 	.word	0x080399b4
 802b1e0:	08039ae0 	.word	0x08039ae0
 802b1e4:	08039ae8 	.word	0x08039ae8

0802b1e8 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 802b1e8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 802b1ea:	4d2e      	ldr	r5, [pc, #184]	; (802b2a4 <I2C1_Init+0xbc>)
{
 802b1ec:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 802b1ee:	4628      	mov	r0, r5
 802b1f0:	f002 fa8a 	bl	802d708 <HAL_I2C_GetState>
 802b1f4:	b108      	cbz	r0, 802b1fa <I2C1_Init+0x12>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
  }
}
 802b1f6:	b008      	add	sp, #32
 802b1f8:	bd70      	pop	{r4, r5, r6, pc}
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 802b1fa:	4e2b      	ldr	r6, [pc, #172]	; (802b2a8 <I2C1_Init+0xc0>)
 802b1fc:	9001      	str	r0, [sp, #4]
    heval_I2c1.Instance = I2C1;
 802b1fe:	4b2b      	ldr	r3, [pc, #172]	; (802b2ac <I2C1_Init+0xc4>)
 802b200:	602b      	str	r3, [r5, #0]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 802b202:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 802b204:	60a8      	str	r0, [r5, #8]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 802b206:	f043 0302 	orr.w	r3, r3, #2
 802b20a:	6333      	str	r3, [r6, #48]	; 0x30
 802b20c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 802b20e:	4a28      	ldr	r2, [pc, #160]	; (802b2b0 <I2C1_Init+0xc8>)
 802b210:	606a      	str	r2, [r5, #4]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 802b212:	f003 0302 	and.w	r3, r3, #2
 802b216:	9301      	str	r3, [sp, #4]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 802b218:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802b21c:	612b      	str	r3, [r5, #16]
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 802b21e:	f44f 7280 	mov.w	r2, #256	; 0x100
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 802b222:	2312      	movs	r3, #18
 802b224:	4604      	mov	r4, r0
    heval_I2c1.Init.OwnAddress2     = 0;
 802b226:	e9c5 0005 	strd	r0, r0, [r5, #20]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 802b22a:	e9c5 0007 	strd	r0, r0, [r5, #28]
    heval_I2c1.Init.OwnAddress1     = 0;
 802b22e:	60e8      	str	r0, [r5, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b230:	a903      	add	r1, sp, #12
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 802b232:	9801      	ldr	r0, [sp, #4]
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 802b234:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 802b236:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 802b238:	2202      	movs	r2, #2
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 802b23a:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b23c:	481d      	ldr	r0, [pc, #116]	; (802b2b4 <I2C1_Init+0xcc>)
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 802b23e:	9206      	str	r2, [sp, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 802b240:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Pull = GPIO_NOPULL;
 802b242:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b244:	f001 fc6e 	bl	802cb24 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b248:	a903      	add	r1, sp, #12
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 802b24a:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b24e:	4819      	ldr	r0, [pc, #100]	; (802b2b4 <I2C1_Init+0xcc>)
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 802b250:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 802b252:	f001 fc67 	bl	802cb24 <HAL_GPIO_Init>
  DISCO_I2C1_CLK_ENABLE();
 802b256:	9402      	str	r4, [sp, #8]
 802b258:	6c33      	ldr	r3, [r6, #64]	; 0x40
 802b25a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802b25e:	6433      	str	r3, [r6, #64]	; 0x40
 802b260:	6c33      	ldr	r3, [r6, #64]	; 0x40
 802b262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802b266:	9302      	str	r3, [sp, #8]
 802b268:	9b02      	ldr	r3, [sp, #8]
  DISCO_I2C1_FORCE_RESET();
 802b26a:	6a33      	ldr	r3, [r6, #32]
 802b26c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802b270:	6233      	str	r3, [r6, #32]
  DISCO_I2C1_RELEASE_RESET();
 802b272:	6a33      	ldr	r3, [r6, #32]
 802b274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802b278:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 802b27a:	4622      	mov	r2, r4
 802b27c:	2105      	movs	r1, #5
 802b27e:	201f      	movs	r0, #31
 802b280:	f000 fd1c 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 802b284:	201f      	movs	r0, #31
 802b286:	f000 fd51 	bl	802bd2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 802b28a:	4622      	mov	r2, r4
 802b28c:	2105      	movs	r1, #5
 802b28e:	2020      	movs	r0, #32
 802b290:	f000 fd14 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 802b294:	2020      	movs	r0, #32
 802b296:	f000 fd49 	bl	802bd2c <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&heval_I2c1);
 802b29a:	4628      	mov	r0, r5
 802b29c:	f001 ff9c 	bl	802d1d8 <HAL_I2C_Init>
}
 802b2a0:	b008      	add	sp, #32
 802b2a2:	bd70      	pop	{r4, r5, r6, pc}
 802b2a4:	200004ec 	.word	0x200004ec
 802b2a8:	40023800 	.word	0x40023800
 802b2ac:	40005400 	.word	0x40005400
 802b2b0:	00061a80 	.word	0x00061a80
 802b2b4:	40020400 	.word	0x40020400

0802b2b8 <I2C1_ReadMultiple.part.0>:
  * @param  MemAddress: memory address
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C1_WriteMultiple(uint8_t Addr,
 802b2b8:	b508      	push	{r3, lr}
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 802b2ba:	4803      	ldr	r0, [pc, #12]	; (802b2c8 <I2C1_ReadMultiple.part.0+0x10>)
 802b2bc:	f002 f852 	bl	802d364 <HAL_I2C_DeInit>
}
 802b2c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 802b2c4:	f7ff bf90 	b.w	802b1e8 <I2C1_Init>
 802b2c8:	200004ec 	.word	0x200004ec

0802b2cc <BSP_LED_Init>:
  if (Led <= LED4)
 802b2cc:	2803      	cmp	r0, #3
 802b2ce:	d82d      	bhi.n	802b32c <BSP_LED_Init+0x60>
{
 802b2d0:	b570      	push	{r4, r5, r6, lr}
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 802b2d2:	4d29      	ldr	r5, [pc, #164]	; (802b378 <BSP_LED_Init+0xac>)
{
 802b2d4:	b08a      	sub	sp, #40	; 0x28
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 802b2d6:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 802b2da:	9205      	str	r2, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 802b2dc:	2301      	movs	r3, #1
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 802b2de:	2203      	movs	r2, #3
    switch(Led)
 802b2e0:	2802      	cmp	r0, #2
    gpio_init_structure.Pull  = GPIO_PULLUP;
 802b2e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 802b2e6:	4604      	mov	r4, r0
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 802b2e8:	9208      	str	r2, [sp, #32]
    switch(Led)
 802b2ea:	d037      	beq.n	802b35c <BSP_LED_Init+0x90>
 802b2ec:	4290      	cmp	r0, r2
      LED1_GPIO_CLK_ENABLE();
 802b2ee:	f04f 0200 	mov.w	r2, #0
    switch(Led)
 802b2f2:	d027      	beq.n	802b344 <BSP_LED_Init+0x78>
 802b2f4:	4298      	cmp	r0, r3
      LED1_GPIO_CLK_ENABLE();
 802b2f6:	4b21      	ldr	r3, [pc, #132]	; (802b37c <BSP_LED_Init+0xb0>)
    switch(Led)
 802b2f8:	d019      	beq.n	802b32e <BSP_LED_Init+0x62>
      LED1_GPIO_CLK_ENABLE();
 802b2fa:	9201      	str	r2, [sp, #4]
 802b2fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b2fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b302:	631a      	str	r2, [r3, #48]	; 0x30
 802b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b30a:	9301      	str	r3, [sp, #4]
 802b30c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 802b30e:	4e1c      	ldr	r6, [pc, #112]	; (802b380 <BSP_LED_Init+0xb4>)
 802b310:	a905      	add	r1, sp, #20
 802b312:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802b316:	f001 fc05 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 802b31a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802b31e:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 802b322:	2201      	movs	r2, #1
 802b324:	f001 fd2c 	bl	802cd80 <HAL_GPIO_WritePin>
}
 802b328:	b00a      	add	sp, #40	; 0x28
 802b32a:	bd70      	pop	{r4, r5, r6, pc}
 802b32c:	4770      	bx	lr
      LED2_GPIO_CLK_ENABLE();
 802b32e:	9202      	str	r2, [sp, #8]
 802b330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b332:	f042 0208 	orr.w	r2, r2, #8
 802b336:	631a      	str	r2, [r3, #48]	; 0x30
 802b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b33a:	f003 0308 	and.w	r3, r3, #8
 802b33e:	9302      	str	r3, [sp, #8]
 802b340:	9b02      	ldr	r3, [sp, #8]
      break;
 802b342:	e7e4      	b.n	802b30e <BSP_LED_Init+0x42>
      LED4_GPIO_CLK_ENABLE();
 802b344:	4b0d      	ldr	r3, [pc, #52]	; (802b37c <BSP_LED_Init+0xb0>)
 802b346:	9204      	str	r2, [sp, #16]
 802b348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b34a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802b34e:	631a      	str	r2, [r3, #48]	; 0x30
 802b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802b356:	9304      	str	r3, [sp, #16]
 802b358:	9b04      	ldr	r3, [sp, #16]
      break;
 802b35a:	e7d8      	b.n	802b30e <BSP_LED_Init+0x42>
      LED3_GPIO_CLK_ENABLE();
 802b35c:	4b07      	ldr	r3, [pc, #28]	; (802b37c <BSP_LED_Init+0xb0>)
 802b35e:	2200      	movs	r2, #0
 802b360:	9203      	str	r2, [sp, #12]
 802b362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b364:	f042 0208 	orr.w	r2, r2, #8
 802b368:	631a      	str	r2, [r3, #48]	; 0x30
 802b36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b36c:	f003 0308 	and.w	r3, r3, #8
 802b370:	9303      	str	r3, [sp, #12]
 802b372:	9b03      	ldr	r3, [sp, #12]
      break;
 802b374:	e7cb      	b.n	802b30e <BSP_LED_Init+0x42>
 802b376:	bf00      	nop
 802b378:	20000044 	.word	0x20000044
 802b37c:	40023800 	.word	0x40023800
 802b380:	20000054 	.word	0x20000054

0802b384 <TS_IO_Init>:
 802b384:	f7ff bf30 	b.w	802b1e8 <I2C1_Init>

0802b388 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 802b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b38a:	b087      	sub	sp, #28
 802b38c:	460e      	mov	r6, r1
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 802b38e:	2764      	movs	r7, #100	; 0x64
 802b390:	2301      	movs	r3, #1
 802b392:	f10d 0517 	add.w	r5, sp, #23
{
 802b396:	4614      	mov	r4, r2
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 802b398:	4601      	mov	r1, r0
 802b39a:	e9cd 5300 	strd	r5, r3, [sp]
 802b39e:	4808      	ldr	r0, [pc, #32]	; (802b3c0 <TS_IO_Write+0x38>)
 802b3a0:	9702      	str	r7, [sp, #8]
 802b3a2:	4632      	mov	r2, r6
 802b3a4:	f88d 4017 	strb.w	r4, [sp, #23]
 802b3a8:	f001 fff6 	bl	802d398 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 802b3ac:	b908      	cbnz	r0, 802b3b2 <TS_IO_Write+0x2a>
  I2C1_Write(Addr, Reg, Value);
}
 802b3ae:	b007      	add	sp, #28
 802b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_I2C_DeInit(&heval_I2c1);
 802b3b2:	4803      	ldr	r0, [pc, #12]	; (802b3c0 <TS_IO_Write+0x38>)
 802b3b4:	f001 ffd6 	bl	802d364 <HAL_I2C_DeInit>
  I2C1_Init();
 802b3b8:	f7ff ff16 	bl	802b1e8 <I2C1_Init>
}
 802b3bc:	b007      	add	sp, #28
 802b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b3c0:	200004ec 	.word	0x200004ec

0802b3c4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 802b3c4:	b530      	push	{r4, r5, lr}
 802b3c6:	b087      	sub	sp, #28
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 802b3c8:	f10d 0417 	add.w	r4, sp, #23
 802b3cc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 802b3d0:	2301      	movs	r3, #1
{
 802b3d2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 802b3d4:	9400      	str	r4, [sp, #0]
 802b3d6:	4601      	mov	r1, r0
  uint8_t Value = 0;
 802b3d8:	2400      	movs	r4, #0
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 802b3da:	e9cd 3501 	strd	r3, r5, [sp, #4]
 802b3de:	4809      	ldr	r0, [pc, #36]	; (802b404 <TS_IO_Read+0x40>)
  uint8_t Value = 0;
 802b3e0:	f88d 4017 	strb.w	r4, [sp, #23]
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 802b3e4:	f002 f874 	bl	802d4d0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 802b3e8:	b918      	cbnz	r0, 802b3f2 <TS_IO_Read+0x2e>
  return I2C1_Read(Addr, Reg);
}
 802b3ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
 802b3ee:	b007      	add	sp, #28
 802b3f0:	bd30      	pop	{r4, r5, pc}
  HAL_I2C_DeInit(&heval_I2c1);
 802b3f2:	4804      	ldr	r0, [pc, #16]	; (802b404 <TS_IO_Read+0x40>)
 802b3f4:	f001 ffb6 	bl	802d364 <HAL_I2C_DeInit>
  I2C1_Init();
 802b3f8:	f7ff fef6 	bl	802b1e8 <I2C1_Init>
}
 802b3fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 802b400:	b007      	add	sp, #28
 802b402:	bd30      	pop	{r4, r5, pc}
 802b404:	200004ec 	.word	0x200004ec

0802b408 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 802b408:	b530      	push	{r4, r5, lr}
 802b40a:	b085      	sub	sp, #20
 802b40c:	460d      	mov	r5, r1
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 802b40e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 802b412:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b416:	4601      	mov	r1, r0
 802b418:	9200      	str	r2, [sp, #0]
 802b41a:	4807      	ldr	r0, [pc, #28]	; (802b438 <TS_IO_ReadMultiple+0x30>)
 802b41c:	462a      	mov	r2, r5
 802b41e:	2301      	movs	r3, #1
 802b420:	f002 f856 	bl	802d4d0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 802b424:	4604      	mov	r4, r0
 802b426:	b910      	cbnz	r0, 802b42e <TS_IO_ReadMultiple+0x26>
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 802b428:	b2a0      	uxth	r0, r4
 802b42a:	b005      	add	sp, #20
 802b42c:	bd30      	pop	{r4, r5, pc}
 802b42e:	f7ff ff43 	bl	802b2b8 <I2C1_ReadMultiple.part.0>
 802b432:	b2a0      	uxth	r0, r4
 802b434:	b005      	add	sp, #20
 802b436:	bd30      	pop	{r4, r5, pc}
 802b438:	200004ec 	.word	0x200004ec

0802b43c <OTM8009A_IO_Delay>:
 802b43c:	f000 bc18 	b.w	802bc70 <HAL_Delay>

0802b440 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 802b440:	b570      	push	{r4, r5, r6, lr}
 802b442:	b086      	sub	sp, #24
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b444:	2600      	movs	r6, #0
 802b446:	4b14      	ldr	r3, [pc, #80]	; (802b498 <BSP_LCD_Reset+0x58>)
 802b448:	9600      	str	r6, [sp, #0]
 802b44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802b44c:	4c13      	ldr	r4, [pc, #76]	; (802b49c <BSP_LCD_Reset+0x5c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b44e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802b452:	631a      	str	r2, [r3, #48]	; 0x30
 802b454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Pull  = GPIO_NOPULL;
 802b456:	9603      	str	r6, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b45c:	9300      	str	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_7;
 802b45e:	2580      	movs	r5, #128	; 0x80
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 802b460:	2303      	movs	r3, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b462:	9900      	ldr	r1, [sp, #0]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 802b464:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802b466:	4620      	mov	r0, r4
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 802b468:	2211      	movs	r2, #17
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802b46a:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 802b46c:	e9cd 5201 	strd	r5, r2, [sp, #4]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802b470:	f001 fb58 	bl	802cb24 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 802b474:	4632      	mov	r2, r6
 802b476:	4629      	mov	r1, r5
 802b478:	4620      	mov	r0, r4
 802b47a:	f001 fc81 	bl	802cd80 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 802b47e:	2014      	movs	r0, #20
 802b480:	f000 fbf6 	bl	802bc70 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 802b484:	4629      	mov	r1, r5
 802b486:	4620      	mov	r0, r4
 802b488:	2201      	movs	r2, #1
 802b48a:	f001 fc79 	bl	802cd80 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 802b48e:	2014      	movs	r0, #20
 802b490:	f000 fbee 	bl	802bc70 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 802b494:	b006      	add	sp, #24
 802b496:	bd70      	pop	{r4, r5, r6, pc}
 802b498:	40023800 	.word	0x40023800
 802b49c:	40021c00 	.word	0x40021c00

0802b4a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 802b4a0:	4b01      	ldr	r3, [pc, #4]	; (802b4a8 <BSP_LCD_SelectLayer+0x8>)
 802b4a2:	6018      	str	r0, [r3, #0]
}
 802b4a4:	4770      	bx	lr
 802b4a6:	bf00      	nop
 802b4a8:	20000540 	.word	0x20000540

0802b4ac <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 802b4ac:	b500      	push	{lr}
  /* Send Display on DCS command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 802b4ae:	4b06      	ldr	r3, [pc, #24]	; (802b4c8 <BSP_LCD_DisplayOn+0x1c>)
 802b4b0:	4806      	ldr	r0, [pc, #24]	; (802b4cc <BSP_LCD_DisplayOn+0x20>)
 802b4b2:	6819      	ldr	r1, [r3, #0]
{
 802b4b4:	b083      	sub	sp, #12
  HAL_DSI_ShortWrite(&(hdsi_eval),
 802b4b6:	2300      	movs	r3, #0
 802b4b8:	9300      	str	r3, [sp, #0]
 802b4ba:	2215      	movs	r2, #21
 802b4bc:	2329      	movs	r3, #41	; 0x29
 802b4be:	f001 fab3 	bl	802ca28 <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
  
}
 802b4c2:	b003      	add	sp, #12
 802b4c4:	f85d fb04 	ldr.w	pc, [sp], #4
 802b4c8:	20000544 	.word	0x20000544
 802b4cc:	200030c0 	.word	0x200030c0

0802b4d0 <BSP_LCD_DisplayOff>:
/**
  * @brief  Switch Off the display.
  *         Enter DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOff(void)
{
 802b4d0:	b500      	push	{lr}
  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 802b4d2:	4b06      	ldr	r3, [pc, #24]	; (802b4ec <BSP_LCD_DisplayOff+0x1c>)
 802b4d4:	4806      	ldr	r0, [pc, #24]	; (802b4f0 <BSP_LCD_DisplayOff+0x20>)
 802b4d6:	6819      	ldr	r1, [r3, #0]
{
 802b4d8:	b083      	sub	sp, #12
  HAL_DSI_ShortWrite(&(hdsi_eval),
 802b4da:	2300      	movs	r3, #0
 802b4dc:	9300      	str	r3, [sp, #0]
 802b4de:	2215      	movs	r2, #21
 802b4e0:	2328      	movs	r3, #40	; 0x28
 802b4e2:	f001 faa1 	bl	802ca28 <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPOFF,
                     0x00);
  
}
 802b4e6:	b003      	add	sp, #12
 802b4e8:	f85d fb04 	ldr.w	pc, [sp], #4
 802b4ec:	20000544 	.word	0x20000544
 802b4f0:	200030c0 	.word	0x200030c0

0802b4f4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 802b4f4:	b500      	push	{lr}
  if(NbrParams <= 1)
 802b4f6:	2801      	cmp	r0, #1
{
 802b4f8:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 802b4fa:	d90b      	bls.n	802b514 <DSI_IO_WriteCmd+0x20>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 802b4fc:	5c0b      	ldrb	r3, [r1, r0]
 802b4fe:	2239      	movs	r2, #57	; 0x39
 802b500:	e9cd 3100 	strd	r3, r1, [sp]
 802b504:	4603      	mov	r3, r0
 802b506:	2100      	movs	r1, #0
 802b508:	4808      	ldr	r0, [pc, #32]	; (802b52c <DSI_IO_WriteCmd+0x38>)
 802b50a:	f001 faa1 	bl	802ca50 <HAL_DSI_LongWrite>
  }
}
 802b50e:	b003      	add	sp, #12
 802b510:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 802b514:	784b      	ldrb	r3, [r1, #1]
 802b516:	9300      	str	r3, [sp, #0]
 802b518:	780b      	ldrb	r3, [r1, #0]
 802b51a:	4804      	ldr	r0, [pc, #16]	; (802b52c <DSI_IO_WriteCmd+0x38>)
 802b51c:	2215      	movs	r2, #21
 802b51e:	2100      	movs	r1, #0
 802b520:	f001 fa82 	bl	802ca28 <HAL_DSI_ShortWrite>
}
 802b524:	b003      	add	sp, #12
 802b526:	f85d fb04 	ldr.w	pc, [sp], #4
 802b52a:	bf00      	nop
 802b52c:	200030c0 	.word	0x200030c0

0802b530 <BSP_LCD_DSI_IRQHandler>:
  * @brief  Handles DSI interrupt request.
  * @note : Can be surcharged by application code implementation of the function.
  */
__weak void BSP_LCD_DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&(hdsi_eval));
 802b530:	4801      	ldr	r0, [pc, #4]	; (802b538 <BSP_LCD_DSI_IRQHandler+0x8>)
 802b532:	f001 b90d 	b.w	802c750 <HAL_DSI_IRQHandler>
 802b536:	bf00      	nop
 802b538:	200030c0 	.word	0x200030c0

0802b53c <BSP_LCD_LTDC_IRQHandler>:
  * @brief  Handles LTDC interrupt request.
  * @note : Can be surcharged by application code implementation of the function.
  */
__weak void BSP_LCD_LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&(hltdc_eval));
 802b53c:	4801      	ldr	r0, [pc, #4]	; (802b544 <BSP_LCD_LTDC_IRQHandler+0x8>)
 802b53e:	f002 ba03 	b.w	802d948 <HAL_LTDC_IRQHandler>
 802b542:	bf00      	nop
 802b544:	20003018 	.word	0x20003018

0802b548 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 802b548:	b510      	push	{r4, lr}
 802b54a:	b084      	sub	sp, #16
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 802b54c:	4b29      	ldr	r3, [pc, #164]	; (802b5f4 <BSP_LCD_MspInit+0xac>)
 802b54e:	2400      	movs	r4, #0
 802b550:	9401      	str	r4, [sp, #4]
 802b552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802b554:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802b558:	645a      	str	r2, [r3, #68]	; 0x44
 802b55a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802b55c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 802b560:	9201      	str	r2, [sp, #4]
 802b562:	9a01      	ldr	r2, [sp, #4]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 802b564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b566:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802b56a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 802b56c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b56e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 802b572:	625a      	str	r2, [r3, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 802b574:	9402      	str	r4, [sp, #8]
 802b576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802b57c:	631a      	str	r2, [r3, #48]	; 0x30
 802b57e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b580:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 802b584:	9202      	str	r2, [sp, #8]
 802b586:	9a02      	ldr	r2, [sp, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 802b588:	691a      	ldr	r2, [r3, #16]
 802b58a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 802b58e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 802b590:	691a      	ldr	r2, [r3, #16]
 802b592:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 802b596:	611a      	str	r2, [r3, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 802b598:	9403      	str	r4, [sp, #12]
 802b59a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802b59c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 802b5a0:	645a      	str	r2, [r3, #68]	; 0x44
 802b5a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802b5a4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802b5a8:	9203      	str	r2, [sp, #12]
 802b5aa:	9a03      	ldr	r2, [sp, #12]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 802b5ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b5ae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 802b5b2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 802b5b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802b5b6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 802b5ba:	625a      	str	r2, [r3, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 802b5bc:	2103      	movs	r1, #3
 802b5be:	4622      	mov	r2, r4
 802b5c0:	2058      	movs	r0, #88	; 0x58
 802b5c2:	f000 fb7b 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 802b5c6:	2058      	movs	r0, #88	; 0x58
 802b5c8:	f000 fbb0 	bl	802bd2c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 802b5cc:	4622      	mov	r2, r4
 802b5ce:	2103      	movs	r1, #3
 802b5d0:	205a      	movs	r0, #90	; 0x5a
 802b5d2:	f000 fb73 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802b5d6:	205a      	movs	r0, #90	; 0x5a
 802b5d8:	f000 fba8 	bl	802bd2c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 802b5dc:	4622      	mov	r2, r4
 802b5de:	2103      	movs	r1, #3
 802b5e0:	205c      	movs	r0, #92	; 0x5c
 802b5e2:	f000 fb6b 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 802b5e6:	205c      	movs	r0, #92	; 0x5c
}
 802b5e8:	b004      	add	sp, #16
 802b5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 802b5ee:	f000 bb9d 	b.w	802bd2c <HAL_NVIC_EnableIRQ>
 802b5f2:	bf00      	nop
 802b5f4:	40023800 	.word	0x40023800

0802b5f8 <BSP_LCD_LTDC_ER_IRQHandler>:
 802b5f8:	f7ff bfa0 	b.w	802b53c <BSP_LCD_LTDC_IRQHandler>

0802b5fc <QSPI_AutoPollingMemReady.constprop.0>:
/**
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: timeout value before returning an error
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 802b5fc:	b530      	push	{r4, r5, lr}
 802b5fe:	b095      	sub	sp, #84	; 0x54
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 802b600:	2200      	movs	r2, #0
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 802b602:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b604:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 802b608:	2001      	movs	r0, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 802b60a:	2405      	movs	r4, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 802b60c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b610:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 802b614:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b618:	950c      	str	r5, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 802b61a:	9406      	str	r4, [sp, #24]
  s_command.DummyCycles       = 0;
 802b61c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 802b61e:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 802b620:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 802b622:	9204      	str	r2, [sp, #16]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 802b624:	910f      	str	r1, [sp, #60]	; 0x3c
  s_config.Mask            = N25Q128A_SR_WIP;
 802b626:	9001      	str	r0, [sp, #4]
  s_config.StatusBytesSize = 1;
 802b628:	9003      	str	r0, [sp, #12]
  s_config.Interval        = 0x10;
 802b62a:	2510      	movs	r5, #16
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 802b62c:	f44f 0480 	mov.w	r4, #4194304	; 0x400000

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 802b630:	466a      	mov	r2, sp
 802b632:	a906      	add	r1, sp, #24
 802b634:	4804      	ldr	r0, [pc, #16]	; (802b648 <QSPI_AutoPollingMemReady.constprop.0+0x4c>)
  s_config.Interval        = 0x10;
 802b636:	9502      	str	r5, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 802b638:	9405      	str	r4, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 802b63a:	f002 fc3f 	bl	802debc <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 802b63e:	3800      	subs	r0, #0
 802b640:	bf18      	it	ne
 802b642:	2001      	movne	r0, #1
 802b644:	b015      	add	sp, #84	; 0x54
 802b646:	bd30      	pop	{r4, r5, pc}
 802b648:	2000311c 	.word	0x2000311c

0802b64c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 802b64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b64e:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b650:	f44f 7080 	mov.w	r0, #256	; 0x100
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 802b654:	2300      	movs	r3, #0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 802b656:	2406      	movs	r4, #6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b658:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b65a:	a906      	add	r1, sp, #24
 802b65c:	4816      	ldr	r0, [pc, #88]	; (802b6b8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.Instruction       = WRITE_ENABLE_CMD;
 802b65e:	9406      	str	r4, [sp, #24]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b660:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b664:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 802b668:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.DataMode          = QSPI_DATA_NONE;
 802b66c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 802b66e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 802b670:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b672:	f002 fbd5 	bl	802de20 <HAL_QSPI_Command>
 802b676:	b110      	cbz	r0, 802b67e <QSPI_WriteEnable.constprop.0+0x32>
    return QSPI_ERROR;
 802b678:	2001      	movs	r0, #1
}
 802b67a:	b015      	add	sp, #84	; 0x54
 802b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_config.Match           = N25Q128A_SR_WREN;
 802b67e:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 802b680:	2210      	movs	r2, #16
  s_config.Mask            = N25Q128A_SR_WREN;
 802b682:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 802b686:	9004      	str	r0, [sp, #16]
  s_config.Interval        = 0x10;
 802b688:	9202      	str	r2, [sp, #8]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b68a:	a906      	add	r1, sp, #24
  s_config.StatusBytesSize = 1;
 802b68c:	2701      	movs	r7, #1
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 802b68e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  s_command.Instruction    = READ_STATUS_REG_CMD;
 802b692:	2505      	movs	r5, #5
  s_command.DataMode       = QSPI_DATA_1_LINE;
 802b694:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b698:	f241 3388 	movw	r3, #5000	; 0x1388
 802b69c:	466a      	mov	r2, sp
 802b69e:	4806      	ldr	r0, [pc, #24]	; (802b6b8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.StatusBytesSize = 1;
 802b6a0:	9703      	str	r7, [sp, #12]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 802b6a2:	9605      	str	r6, [sp, #20]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 802b6a4:	9506      	str	r5, [sp, #24]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 802b6a6:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b6a8:	f002 fc08 	bl	802debc <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 802b6ac:	3800      	subs	r0, #0
 802b6ae:	bf18      	it	ne
 802b6b0:	2001      	movne	r0, #1
}
 802b6b2:	b015      	add	sp, #84	; 0x54
 802b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b6b6:	bf00      	nop
 802b6b8:	2000311c 	.word	0x2000311c

0802b6bc <BSP_QSPI_EnableMemoryMappedMode>:
{
 802b6bc:	b530      	push	{r4, r5, lr}
 802b6be:	b091      	sub	sp, #68	; 0x44
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b6c0:	f44f 7480 	mov.w	r4, #256	; 0x100
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 802b6c4:	22eb      	movs	r2, #235	; 0xeb
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 802b6c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 802b6ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b6ce:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b6d0:	9408      	str	r4, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 802b6d2:	9202      	str	r2, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 802b6d4:	9109      	str	r1, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 802b6d6:	9005      	str	r0, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 802b6d8:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 802b6dc:	240a      	movs	r4, #10
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 802b6de:	466a      	mov	r2, sp
 802b6e0:	a902      	add	r1, sp, #8
 802b6e2:	4807      	ldr	r0, [pc, #28]	; (802b700 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b6e4:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 802b6e6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 802b6ea:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 802b6ec:	9301      	str	r3, [sp, #4]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 802b6ee:	950b      	str	r5, [sp, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 802b6f0:	9407      	str	r4, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 802b6f2:	f002 fc39 	bl	802df68 <HAL_QSPI_MemoryMapped>
}
 802b6f6:	3800      	subs	r0, #0
 802b6f8:	bf18      	it	ne
 802b6fa:	2001      	movne	r0, #1
 802b6fc:	b011      	add	sp, #68	; 0x44
 802b6fe:	bd30      	pop	{r4, r5, pc}
 802b700:	2000311c 	.word	0x2000311c

0802b704 <BSP_QSPI_MspInit>:
{
 802b704:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b706:	b089      	sub	sp, #36	; 0x24
  QSPI_CLK_ENABLE();
 802b708:	4b2c      	ldr	r3, [pc, #176]	; (802b7bc <BSP_QSPI_MspInit+0xb8>)
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 802b70a:	4d2d      	ldr	r5, [pc, #180]	; (802b7c0 <BSP_QSPI_MspInit+0xbc>)
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 802b70c:	482d      	ldr	r0, [pc, #180]	; (802b7c4 <BSP_QSPI_MspInit+0xc0>)
  QSPI_CLK_ENABLE();
 802b70e:	2400      	movs	r4, #0
 802b710:	9400      	str	r4, [sp, #0]
 802b712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b714:	f042 0202 	orr.w	r2, r2, #2
 802b718:	639a      	str	r2, [r3, #56]	; 0x38
 802b71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b71c:	f002 0202 	and.w	r2, r2, #2
 802b720:	9200      	str	r2, [sp, #0]
 802b722:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 802b724:	699a      	ldr	r2, [r3, #24]
 802b726:	f042 0202 	orr.w	r2, r2, #2
 802b72a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 802b72c:	699a      	ldr	r2, [r3, #24]
 802b72e:	f022 0202 	bic.w	r2, r2, #2
 802b732:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 802b734:	9401      	str	r4, [sp, #4]
 802b736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b738:	f042 0202 	orr.w	r2, r2, #2
 802b73c:	631a      	str	r2, [r3, #48]	; 0x30
 802b73e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b740:	f002 0202 	and.w	r2, r2, #2
 802b744:	9201      	str	r2, [sp, #4]
 802b746:	9a01      	ldr	r2, [sp, #4]
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 802b748:	9402      	str	r4, [sp, #8]
 802b74a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b74c:	f042 0220 	orr.w	r2, r2, #32
 802b750:	631a      	str	r2, [r3, #48]	; 0x30
 802b752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b754:	f003 0320 	and.w	r3, r3, #32
 802b758:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 802b75a:	2340      	movs	r3, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
 802b75c:	2201      	movs	r2, #1
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 802b75e:	9f02      	ldr	r7, [sp, #8]
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 802b760:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 802b762:	a903      	add	r1, sp, #12
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 802b764:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 802b766:	270a      	movs	r7, #10
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 802b768:	2602      	movs	r6, #2
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 802b76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 802b76e:	9604      	str	r6, [sp, #16]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 802b770:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 802b772:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 802b774:	f001 f9d6 	bl	802cb24 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 802b778:	a903      	add	r1, sp, #12
 802b77a:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 802b77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b780:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 802b782:	9405      	str	r4, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 802b784:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 802b786:	f001 f9cd 	bl	802cb24 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 802b78a:	a903      	add	r1, sp, #12
 802b78c:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 802b78e:	f44f 7340 	mov.w	r3, #768	; 0x300
 802b792:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 802b794:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 802b796:	f001 f9c5 	bl	802cb24 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 802b79a:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 802b79c:	a903      	add	r1, sp, #12
 802b79e:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 802b7a0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 802b7a2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 802b7a4:	f001 f9be 	bl	802cb24 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 802b7a8:	4622      	mov	r2, r4
 802b7aa:	210f      	movs	r1, #15
 802b7ac:	205b      	movs	r0, #91	; 0x5b
 802b7ae:	f000 fa85 	bl	802bcbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 802b7b2:	205b      	movs	r0, #91	; 0x5b
 802b7b4:	f000 faba 	bl	802bd2c <HAL_NVIC_EnableIRQ>
}
 802b7b8:	b009      	add	sp, #36	; 0x24
 802b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b7bc:	40023800 	.word	0x40023800
 802b7c0:	40021400 	.word	0x40021400
 802b7c4:	40020400 	.word	0x40020400

0802b7c8 <BSP_QSPI_Init>:
{
 802b7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 802b7ca:	4c4a      	ldr	r4, [pc, #296]	; (802b8f4 <BSP_QSPI_Init+0x12c>)
 802b7cc:	4b4a      	ldr	r3, [pc, #296]	; (802b8f8 <BSP_QSPI_Init+0x130>)
 802b7ce:	6023      	str	r3, [r4, #0]
{
 802b7d0:	b091      	sub	sp, #68	; 0x44
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 802b7d2:	4620      	mov	r0, r4
 802b7d4:	f002 fb10 	bl	802ddf8 <HAL_QSPI_DeInit>
 802b7d8:	b110      	cbz	r0, 802b7e0 <BSP_QSPI_Init+0x18>
    return QSPI_ERROR;
 802b7da:	2001      	movs	r0, #1
}
 802b7dc:	b011      	add	sp, #68	; 0x44
 802b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 802b7e0:	4601      	mov	r1, r0
 802b7e2:	4605      	mov	r5, r0
 802b7e4:	4620      	mov	r0, r4
 802b7e6:	f7ff ff8d 	bl	802b704 <BSP_QSPI_MspInit>
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI Freq= 180 MHz / (1+1) = 90 MHz */
 802b7ea:	2601      	movs	r6, #1
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 802b7ec:	2310      	movs	r3, #16
  QSPIHandle.Init.FifoThreshold      = 1;
 802b7ee:	e9c4 6601 	strd	r6, r6, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 802b7f2:	60e3      	str	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802b7f4:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 802b7f8:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 802b7fc:	fab3 f383 	clz	r3, r3
 802b800:	3b01      	subs	r3, #1
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 802b802:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 802b806:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 802b808:	e9c4 5506 	strd	r5, r5, [r4, #24]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 802b80c:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 802b80e:	6225      	str	r5, [r4, #32]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 802b810:	6162      	str	r2, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 802b812:	f002 fa99 	bl	802dd48 <HAL_QSPI_Init>
 802b816:	2800      	cmp	r0, #0
 802b818:	d1df      	bne.n	802b7da <BSP_QSPI_Init+0x12>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b81a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 802b81e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b822:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 802b826:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 802b828:	900b      	str	r0, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 802b82a:	9007      	str	r0, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 802b82c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b82e:	a902      	add	r1, sp, #8
 802b830:	f241 3288 	movw	r2, #5000	; 0x1388
 802b834:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b836:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 802b838:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b83a:	f002 faf1 	bl	802de20 <HAL_QSPI_Command>
 802b83e:	b110      	cbz	r0, 802b846 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 802b840:	2004      	movs	r0, #4
}
 802b842:	b011      	add	sp, #68	; 0x44
 802b844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.Instruction = RESET_MEMORY_CMD;
 802b846:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b848:	f241 3288 	movw	r2, #5000	; 0x1388
 802b84c:	a902      	add	r1, sp, #8
 802b84e:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 802b850:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b852:	f002 fae5 	bl	802de20 <HAL_QSPI_Command>
 802b856:	2800      	cmp	r0, #0
 802b858:	d1f2      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 802b85a:	f241 3088 	movw	r0, #5000	; 0x1388
 802b85e:	f7ff fecd 	bl	802b5fc <QSPI_AutoPollingMemReady.constprop.0>
 802b862:	4603      	mov	r3, r0
 802b864:	2800      	cmp	r0, #0
 802b866:	d1eb      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 802b868:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 802b86c:	f04f 0c85 	mov.w	ip, #133	; 0x85
  s_command.DummyCycles       = 0;
 802b870:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b872:	f241 3288 	movw	r2, #5000	; 0x1388
 802b876:	a902      	add	r1, sp, #8
 802b878:	4620      	mov	r0, r4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 802b87a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 802b87e:	9508      	str	r5, [sp, #32]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 802b880:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.NbData            = 1;
 802b882:	960c      	str	r6, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 802b884:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 802b886:	f8cd c008 	str.w	ip, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b88a:	f002 fac9 	bl	802de20 <HAL_QSPI_Command>
 802b88e:	2800      	cmp	r0, #0
 802b890:	d1d6      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b892:	f10d 0107 	add.w	r1, sp, #7
 802b896:	f241 3288 	movw	r2, #5000	; 0x1388
 802b89a:	4620      	mov	r0, r4
 802b89c:	f002 fc5c 	bl	802e158 <HAL_QSPI_Receive>
 802b8a0:	2800      	cmp	r0, #0
 802b8a2:	d1cd      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 802b8a4:	f7ff fed2 	bl	802b64c <QSPI_WriteEnable.constprop.0>
 802b8a8:	2800      	cmp	r0, #0
 802b8aa:	d1c9      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 802b8ac:	2381      	movs	r3, #129	; 0x81
 802b8ae:	9302      	str	r3, [sp, #8]
 802b8b0:	22f0      	movs	r2, #240	; 0xf0
 802b8b2:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 802b8b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802b8ba:	210a      	movs	r1, #10
 802b8bc:	fab2 f282 	clz	r2, r2
 802b8c0:	fa01 f202 	lsl.w	r2, r1, r2
 802b8c4:	f003 030f 	and.w	r3, r3, #15
 802b8c8:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b8ca:	a902      	add	r1, sp, #8
 802b8cc:	4620      	mov	r0, r4
 802b8ce:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 802b8d2:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b8d6:	f002 faa3 	bl	802de20 <HAL_QSPI_Command>
 802b8da:	2800      	cmp	r0, #0
 802b8dc:	d1b0      	bne.n	802b840 <BSP_QSPI_Init+0x78>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 802b8de:	f10d 0107 	add.w	r1, sp, #7
 802b8e2:	4620      	mov	r0, r4
 802b8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 802b8e8:	f002 fbce 	bl	802e088 <HAL_QSPI_Transmit>
 802b8ec:	2800      	cmp	r0, #0
 802b8ee:	f43f af75 	beq.w	802b7dc <BSP_QSPI_Init+0x14>
 802b8f2:	e7a5      	b.n	802b840 <BSP_QSPI_Init+0x78>
 802b8f4:	2000311c 	.word	0x2000311c
 802b8f8:	a0001000 	.word	0xa0001000

0802b8fc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 802b8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 802b900:	4c25      	ldr	r4, [pc, #148]	; (802b998 <BSP_SDRAM_Initialization_sequence+0x9c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b902:	4d26      	ldr	r5, [pc, #152]	; (802b99c <BSP_SDRAM_Initialization_sequence+0xa0>)
{
 802b904:	b083      	sub	sp, #12
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 802b906:	2601      	movs	r6, #1
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 802b908:	2710      	movs	r7, #16
  __IO uint32_t tmpmrd = 0;
 802b90a:	f04f 0800 	mov.w	r8, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b90e:	4621      	mov	r1, r4
{
 802b910:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b916:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 802b918:	e9c4 7601 	strd	r7, r6, [r4, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 802b91c:	6026      	str	r6, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 802b91e:	f8c4 800c 	str.w	r8, [r4, #12]
  __IO uint32_t tmpmrd = 0;
 802b922:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b926:	f003 fb5b 	bl	802efe0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 802b92a:	4630      	mov	r0, r6
 802b92c:	f000 f9a0 	bl	802bc70 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 802b930:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b932:	4621      	mov	r1, r4
 802b934:	4628      	mov	r0, r5
 802b936:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 802b93a:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 802b93c:	e9c4 7601 	strd	r7, r6, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 802b940:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b944:	f003 fb4c 	bl	802efe0 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 802b948:	f04f 0c03 	mov.w	ip, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
 802b94c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b94e:	4621      	mov	r1, r4
 802b950:	4628      	mov	r0, r5
 802b952:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 802b956:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 802b95a:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 802b95c:	6067      	str	r7, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 802b95e:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b962:	f003 fb3d 	bl	802efe0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 802b966:	f44f 730c 	mov.w	r3, #560	; 0x230
 802b96a:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 802b96c:	9b01      	ldr	r3, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 802b96e:	6067      	str	r7, [r4, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 802b970:	f04f 0c04 	mov.w	ip, #4

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b974:	4621      	mov	r1, r4
 802b976:	4628      	mov	r0, r5
 802b978:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 802b97c:	60a6      	str	r6, [r4, #8]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 802b97e:	f8c4 c000 	str.w	ip, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 802b982:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 802b984:	f003 fb2c 	bl	802efe0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 802b988:	4649      	mov	r1, r9
 802b98a:	4628      	mov	r0, r5
}
 802b98c:	b003      	add	sp, #12
 802b98e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 802b992:	f003 bb3d 	b.w	802f010 <HAL_SDRAM_ProgramRefreshRate>
 802b996:	bf00      	nop
 802b998:	200005b0 	.word	0x200005b0
 802b99c:	2000063c 	.word	0x2000063c

0802b9a0 <BSP_SDRAM_MspInit>:
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 802b9a0:	2800      	cmp	r0, #0
 802b9a2:	f000 80c2 	beq.w	802bb2a <BSP_SDRAM_MspInit+0x18a>
{
 802b9a6:	b570      	push	{r4, r5, r6, lr}
 802b9a8:	b08e      	sub	sp, #56	; 0x38
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 802b9aa:	4b60      	ldr	r3, [pc, #384]	; (802bb2c <BSP_SDRAM_MspInit+0x18c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 802b9ac:	4c60      	ldr	r4, [pc, #384]	; (802bb30 <BSP_SDRAM_MspInit+0x190>)
    __HAL_RCC_FMC_CLK_ENABLE();
 802b9ae:	2500      	movs	r5, #0
 802b9b0:	9500      	str	r5, [sp, #0]
 802b9b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b9b4:	f042 0201 	orr.w	r2, r2, #1
 802b9b8:	639a      	str	r2, [r3, #56]	; 0x38
 802b9ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b9bc:	f002 0201 	and.w	r2, r2, #1
 802b9c0:	9200      	str	r2, [sp, #0]
 802b9c2:	9a00      	ldr	r2, [sp, #0]
    __DMAx_CLK_ENABLE();
 802b9c4:	9501      	str	r5, [sp, #4]
 802b9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 802b9cc:	631a      	str	r2, [r3, #48]	; 0x30
 802b9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 802b9d4:	9201      	str	r2, [sp, #4]
 802b9d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802b9d8:	9502      	str	r5, [sp, #8]
 802b9da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9dc:	f042 0204 	orr.w	r2, r2, #4
 802b9e0:	631a      	str	r2, [r3, #48]	; 0x30
 802b9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9e4:	f002 0204 	and.w	r2, r2, #4
 802b9e8:	9202      	str	r2, [sp, #8]
 802b9ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802b9ec:	9503      	str	r5, [sp, #12]
 802b9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9f0:	f042 0208 	orr.w	r2, r2, #8
 802b9f4:	631a      	str	r2, [r3, #48]	; 0x30
 802b9f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b9f8:	f002 0208 	and.w	r2, r2, #8
 802b9fc:	9203      	str	r2, [sp, #12]
 802b9fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802ba00:	9504      	str	r5, [sp, #16]
 802ba02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba04:	f042 0210 	orr.w	r2, r2, #16
 802ba08:	631a      	str	r2, [r3, #48]	; 0x30
 802ba0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba0c:	f002 0210 	and.w	r2, r2, #16
 802ba10:	9204      	str	r2, [sp, #16]
 802ba12:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 802ba14:	9505      	str	r5, [sp, #20]
 802ba16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba18:	f042 0220 	orr.w	r2, r2, #32
 802ba1c:	631a      	str	r2, [r3, #48]	; 0x30
 802ba1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba20:	f002 0220 	and.w	r2, r2, #32
 802ba24:	9205      	str	r2, [sp, #20]
 802ba26:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802ba28:	9506      	str	r5, [sp, #24]
 802ba2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ba30:	631a      	str	r2, [r3, #48]	; 0x30
 802ba32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba34:	f002 0240 	and.w	r2, r2, #64	; 0x40
 802ba38:	9206      	str	r2, [sp, #24]
 802ba3a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 802ba3c:	9507      	str	r5, [sp, #28]
 802ba3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802ba44:	631a      	str	r2, [r3, #48]	; 0x30
 802ba46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba48:	f002 0280 	and.w	r2, r2, #128	; 0x80
 802ba4c:	9207      	str	r2, [sp, #28]
 802ba4e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 802ba50:	9508      	str	r5, [sp, #32]
 802ba52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ba54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802ba58:	631a      	str	r2, [r3, #48]	; 0x30
 802ba5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ba5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ba60:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 802ba62:	2302      	movs	r3, #2
 802ba64:	930a      	str	r3, [sp, #40]	; 0x28
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 802ba66:	930c      	str	r3, [sp, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 802ba68:	2301      	movs	r3, #1
 802ba6a:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 802ba6c:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pull      = GPIO_PULLUP;
 802ba6e:	930b      	str	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Pin   = GPIO_PIN_0;
 802ba70:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 802ba72:	4830      	ldr	r0, [pc, #192]	; (802bb34 <BSP_SDRAM_MspInit+0x194>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 802ba74:	9a08      	ldr	r2, [sp, #32]
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 802ba76:	230c      	movs	r3, #12
 802ba78:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 802ba7a:	f001 f853 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 802ba7e:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 802ba80:	f24c 7303 	movw	r3, #50947	; 0xc703
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 802ba84:	482c      	ldr	r0, [pc, #176]	; (802bb38 <BSP_SDRAM_MspInit+0x198>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 802ba86:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 802ba88:	f001 f84c 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 802ba8c:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 802ba8e:	f64f 7383 	movw	r3, #65411	; 0xff83
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 802ba92:	482a      	ldr	r0, [pc, #168]	; (802bb3c <BSP_SDRAM_MspInit+0x19c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 802ba94:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 802ba96:	f001 f845 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 802ba9a:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 802ba9c:	f64f 033f 	movw	r3, #63551	; 0xf83f
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 802baa0:	4827      	ldr	r0, [pc, #156]	; (802bb40 <BSP_SDRAM_MspInit+0x1a0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 802baa2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 802baa4:	f001 f83e 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 802baa8:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 802baaa:	f248 1333 	movw	r3, #33075	; 0x8133
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 802baae:	4825      	ldr	r0, [pc, #148]	; (802bb44 <BSP_SDRAM_MspInit+0x1a4>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 802bab0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 802bab2:	f001 f837 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802bab6:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 802bab8:	f64f 730c 	movw	r3, #65292	; 0xff0c
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802babc:	4822      	ldr	r0, [pc, #136]	; (802bb48 <BSP_SDRAM_MspInit+0x1a8>)
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 802babe:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 802bac0:	f001 f830 	bl	802cb24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 802bac4:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 802bac6:	f240 63ff 	movw	r3, #1791	; 0x6ff
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 802baca:	4820      	ldr	r0, [pc, #128]	; (802bb4c <BSP_SDRAM_MspInit+0x1ac>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 802bacc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 802bace:	f001 f829 	bl	802cb24 <HAL_GPIO_Init>
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 802bad2:	2080      	movs	r0, #128	; 0x80
 802bad4:	60a0      	str	r0, [r4, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802bad6:	f44f 7100 	mov.w	r1, #512	; 0x200
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 802bada:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802bade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 802bae2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    dma_handle.Init.Mode                = DMA_NORMAL;
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 802bae6:	6325      	str	r5, [r4, #48]	; 0x30
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802bae8:	60e1      	str	r1, [r4, #12]

    dma_handle.Instance = SDRAM_DMAx_STREAM;

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 802baea:	6334      	str	r4, [r6, #48]	; 0x30
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 802baec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 802baf0:	6122      	str	r2, [r4, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802baf2:	6163      	str	r3, [r4, #20]
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802baf4:	2203      	movs	r2, #3
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 802baf6:	4b16      	ldr	r3, [pc, #88]	; (802bb50 <BSP_SDRAM_MspInit+0x1b0>)
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 802baf8:	61a0      	str	r0, [r4, #24]

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 802bafa:	4620      	mov	r0, r4
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 802bafc:	6023      	str	r3, [r4, #0]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 802bafe:	6221      	str	r1, [r4, #32]
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802bb00:	62a2      	str	r2, [r4, #40]	; 0x28
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 802bb02:	6065      	str	r5, [r4, #4]
    dma_handle.Init.Mode                = DMA_NORMAL;
 802bb04:	61e5      	str	r5, [r4, #28]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 802bb06:	6265      	str	r5, [r4, #36]	; 0x24
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 802bb08:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 802bb0a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&dma_handle);
 802bb0c:	f000 f9e4 	bl	802bed8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 802bb10:	4620      	mov	r0, r4
 802bb12:	f000 f947 	bl	802bda4 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 802bb16:	462a      	mov	r2, r5
 802bb18:	2105      	movs	r1, #5
 802bb1a:	2038      	movs	r0, #56	; 0x38
 802bb1c:	f000 f8ce 	bl	802bcbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 802bb20:	2038      	movs	r0, #56	; 0x38
 802bb22:	f000 f903 	bl	802bd2c <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 802bb26:	b00e      	add	sp, #56	; 0x38
 802bb28:	bd70      	pop	{r4, r5, r6, pc}
 802bb2a:	4770      	bx	lr
 802bb2c:	40023800 	.word	0x40023800
 802bb30:	200005dc 	.word	0x200005dc
 802bb34:	40020800 	.word	0x40020800
 802bb38:	40020c00 	.word	0x40020c00
 802bb3c:	40021000 	.word	0x40021000
 802bb40:	40021400 	.word	0x40021400
 802bb44:	40021800 	.word	0x40021800
 802bb48:	40021c00 	.word	0x40021c00
 802bb4c:	40022000 	.word	0x40022000
 802bb50:	40026410 	.word	0x40026410

0802bb54 <BSP_SDRAM_Init>:
{
 802bb54:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 802bb56:	4c19      	ldr	r4, [pc, #100]	; (802bbbc <BSP_SDRAM_Init+0x68>)
 802bb58:	4b19      	ldr	r3, [pc, #100]	; (802bbc0 <BSP_SDRAM_Init+0x6c>)
 802bb5a:	6023      	str	r3, [r4, #0]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 802bb5c:	2220      	movs	r2, #32
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 802bb5e:	2340      	movs	r3, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 802bb60:	4d18      	ldr	r5, [pc, #96]	; (802bbc4 <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 802bb62:	6122      	str	r2, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 802bb64:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 802bb66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 802bb6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802bb6e:	e9c4 2308 	strd	r2, r3, [r4, #32]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 802bb72:	f44f 70c0 	mov.w	r0, #384	; 0x180
  Timing.SelfRefreshTime      = 4;
 802bb76:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 802bb78:	2302      	movs	r3, #2
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 802bb7a:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 802bb7c:	61a0      	str	r0, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 802bb7e:	60e2      	str	r2, [r4, #12]
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 802bb80:	4620      	mov	r0, r4
  Timing.SelfRefreshTime      = 4;
 802bb82:	60aa      	str	r2, [r5, #8]
  Timing.ExitSelfRefreshDelay = 7;
 802bb84:	2207      	movs	r2, #7
  Timing.RPDelay              = 2;
 802bb86:	e9c5 3304 	strd	r3, r3, [r5, #16]
  Timing.LoadToActiveDelay    = 2;
 802bb8a:	602b      	str	r3, [r5, #0]
  Timing.RCDDelay             = 2;
 802bb8c:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 802bb8e:	606a      	str	r2, [r5, #4]
  Timing.RowCycleDelay        = 7;
 802bb90:	60ea      	str	r2, [r5, #12]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 802bb92:	e9c4 1101 	strd	r1, r1, [r4, #4]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 802bb96:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 802bb98:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 802bb9a:	f7ff ff01 	bl	802b9a0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 802bb9e:	4629      	mov	r1, r5
 802bba0:	4620      	mov	r0, r4
 802bba2:	f003 f9fb 	bl	802ef9c <HAL_SDRAM_Init>
 802bba6:	4c08      	ldr	r4, [pc, #32]	; (802bbc8 <BSP_SDRAM_Init+0x74>)
 802bba8:	1e03      	subs	r3, r0, #0
 802bbaa:	bf18      	it	ne
 802bbac:	2301      	movne	r3, #1
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 802bbae:	f240 5069 	movw	r0, #1385	; 0x569
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 802bbb2:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 802bbb4:	f7ff fea2 	bl	802b8fc <BSP_SDRAM_Initialization_sequence>
}
 802bbb8:	7820      	ldrb	r0, [r4, #0]
 802bbba:	bd38      	pop	{r3, r4, r5, pc}
 802bbbc:	2000063c 	.word	0x2000063c
 802bbc0:	a0000140 	.word	0xa0000140
 802bbc4:	200005c0 	.word	0x200005c0
 802bbc8:	20000064 	.word	0x20000064

0802bbcc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 802bbcc:	4770      	bx	lr
 802bbce:	bf00      	nop

0802bbd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802bbd0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802bbd2:	4a0e      	ldr	r2, [pc, #56]	; (802bc0c <HAL_InitTick+0x3c>)
 802bbd4:	4b0e      	ldr	r3, [pc, #56]	; (802bc10 <HAL_InitTick+0x40>)
 802bbd6:	7812      	ldrb	r2, [r2, #0]
 802bbd8:	681b      	ldr	r3, [r3, #0]
{
 802bbda:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802bbdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802bbe0:	fbb0 f0f2 	udiv	r0, r0, r2
 802bbe4:	fbb3 f0f0 	udiv	r0, r3, r0
 802bbe8:	f000 f8c2 	bl	802bd70 <HAL_SYSTICK_Config>
 802bbec:	b908      	cbnz	r0, 802bbf2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802bbee:	2d0f      	cmp	r5, #15
 802bbf0:	d901      	bls.n	802bbf6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 802bbf2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 802bbf4:	bd38      	pop	{r3, r4, r5, pc}
 802bbf6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802bbf8:	4602      	mov	r2, r0
 802bbfa:	4629      	mov	r1, r5
 802bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 802bc00:	f000 f85c 	bl	802bcbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802bc04:	4b03      	ldr	r3, [pc, #12]	; (802bc14 <HAL_InitTick+0x44>)
 802bc06:	4620      	mov	r0, r4
 802bc08:	601d      	str	r5, [r3, #0]
}
 802bc0a:	bd38      	pop	{r3, r4, r5, pc}
 802bc0c:	20000065 	.word	0x20000065
 802bc10:	20000040 	.word	0x20000040
 802bc14:	20000068 	.word	0x20000068

0802bc18 <HAL_Init>:
{
 802bc18:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802bc1a:	4b0b      	ldr	r3, [pc, #44]	; (802bc48 <HAL_Init+0x30>)
 802bc1c:	681a      	ldr	r2, [r3, #0]
 802bc1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802bc22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802bc24:	681a      	ldr	r2, [r3, #0]
 802bc26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802bc2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802bc2c:	681a      	ldr	r2, [r3, #0]
 802bc2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bc32:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802bc34:	2003      	movs	r0, #3
 802bc36:	f000 f82d 	bl	802bc94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 802bc3a:	200f      	movs	r0, #15
 802bc3c:	f7ff ffc8 	bl	802bbd0 <HAL_InitTick>
  HAL_MspInit();
 802bc40:	f7ff ffc4 	bl	802bbcc <HAL_MspInit>
}
 802bc44:	2000      	movs	r0, #0
 802bc46:	bd08      	pop	{r3, pc}
 802bc48:	40023c00 	.word	0x40023c00

0802bc4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 802bc4c:	4a03      	ldr	r2, [pc, #12]	; (802bc5c <HAL_IncTick+0x10>)
 802bc4e:	4b04      	ldr	r3, [pc, #16]	; (802bc60 <HAL_IncTick+0x14>)
 802bc50:	6811      	ldr	r1, [r2, #0]
 802bc52:	781b      	ldrb	r3, [r3, #0]
 802bc54:	440b      	add	r3, r1
 802bc56:	6013      	str	r3, [r2, #0]
}
 802bc58:	4770      	bx	lr
 802bc5a:	bf00      	nop
 802bc5c:	20003168 	.word	0x20003168
 802bc60:	20000065 	.word	0x20000065

0802bc64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 802bc64:	4b01      	ldr	r3, [pc, #4]	; (802bc6c <HAL_GetTick+0x8>)
 802bc66:	6818      	ldr	r0, [r3, #0]
}
 802bc68:	4770      	bx	lr
 802bc6a:	bf00      	nop
 802bc6c:	20003168 	.word	0x20003168

0802bc70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802bc70:	b538      	push	{r3, r4, r5, lr}
 802bc72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 802bc74:	f7ff fff6 	bl	802bc64 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802bc78:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 802bc7a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 802bc7c:	d002      	beq.n	802bc84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 802bc7e:	4b04      	ldr	r3, [pc, #16]	; (802bc90 <HAL_Delay+0x20>)
 802bc80:	781b      	ldrb	r3, [r3, #0]
 802bc82:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 802bc84:	f7ff ffee 	bl	802bc64 <HAL_GetTick>
 802bc88:	1b43      	subs	r3, r0, r5
 802bc8a:	42a3      	cmp	r3, r4
 802bc8c:	d3fa      	bcc.n	802bc84 <HAL_Delay+0x14>
  {
  }
}
 802bc8e:	bd38      	pop	{r3, r4, r5, pc}
 802bc90:	20000065 	.word	0x20000065

0802bc94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802bc94:	4908      	ldr	r1, [pc, #32]	; (802bcb8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 802bc96:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802bc98:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802bc9a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802bc9c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 802bca0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802bca2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802bca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802bca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802bcac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 802bcb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 802bcb4:	60cb      	str	r3, [r1, #12]
 802bcb6:	4770      	bx	lr
 802bcb8:	e000ed00 	.word	0xe000ed00

0802bcbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802bcbc:	4b19      	ldr	r3, [pc, #100]	; (802bd24 <HAL_NVIC_SetPriority+0x68>)
 802bcbe:	68db      	ldr	r3, [r3, #12]
 802bcc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802bcc4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802bcc6:	f1c3 0507 	rsb	r5, r3, #7
 802bcca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802bccc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802bcd0:	bf28      	it	cs
 802bcd2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802bcd4:	2c06      	cmp	r4, #6
 802bcd6:	d919      	bls.n	802bd0c <HAL_NVIC_SetPriority+0x50>
 802bcd8:	3b03      	subs	r3, #3
 802bcda:	f04f 34ff 	mov.w	r4, #4294967295
 802bcde:	409c      	lsls	r4, r3
 802bce0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802bce4:	f04f 34ff 	mov.w	r4, #4294967295
 802bce8:	40ac      	lsls	r4, r5
 802bcea:	ea21 0104 	bic.w	r1, r1, r4
 802bcee:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 802bcf0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802bcf2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 802bcf6:	db0c      	blt.n	802bd12 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802bcf8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 802bcfc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 802bd00:	0109      	lsls	r1, r1, #4
 802bd02:	b2c9      	uxtb	r1, r1
 802bd04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 802bd08:	bc30      	pop	{r4, r5}
 802bd0a:	4770      	bx	lr
 802bd0c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802bd0e:	4613      	mov	r3, r2
 802bd10:	e7e8      	b.n	802bce4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802bd12:	4b05      	ldr	r3, [pc, #20]	; (802bd28 <HAL_NVIC_SetPriority+0x6c>)
 802bd14:	f000 000f 	and.w	r0, r0, #15
 802bd18:	0109      	lsls	r1, r1, #4
 802bd1a:	4403      	add	r3, r0
 802bd1c:	b2c9      	uxtb	r1, r1
 802bd1e:	7619      	strb	r1, [r3, #24]
 802bd20:	bc30      	pop	{r4, r5}
 802bd22:	4770      	bx	lr
 802bd24:	e000ed00 	.word	0xe000ed00
 802bd28:	e000ecfc 	.word	0xe000ecfc

0802bd2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 802bd2c:	2800      	cmp	r0, #0
 802bd2e:	db07      	blt.n	802bd40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802bd30:	f000 011f 	and.w	r1, r0, #31
 802bd34:	4a03      	ldr	r2, [pc, #12]	; (802bd44 <HAL_NVIC_EnableIRQ+0x18>)
 802bd36:	0940      	lsrs	r0, r0, #5
 802bd38:	2301      	movs	r3, #1
 802bd3a:	408b      	lsls	r3, r1
 802bd3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 802bd40:	4770      	bx	lr
 802bd42:	bf00      	nop
 802bd44:	e000e100 	.word	0xe000e100

0802bd48 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 802bd48:	2800      	cmp	r0, #0
 802bd4a:	db0d      	blt.n	802bd68 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802bd4c:	0943      	lsrs	r3, r0, #5
 802bd4e:	4907      	ldr	r1, [pc, #28]	; (802bd6c <HAL_NVIC_DisableIRQ+0x24>)
 802bd50:	3320      	adds	r3, #32
 802bd52:	2201      	movs	r2, #1
 802bd54:	f000 001f 	and.w	r0, r0, #31
 802bd58:	fa02 f000 	lsl.w	r0, r2, r0
 802bd5c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 802bd60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 802bd64:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 802bd68:	4770      	bx	lr
 802bd6a:	bf00      	nop
 802bd6c:	e000e100 	.word	0xe000e100

0802bd70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802bd70:	3801      	subs	r0, #1
 802bd72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 802bd76:	d20e      	bcs.n	802bd96 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802bd78:	4b08      	ldr	r3, [pc, #32]	; (802bd9c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802bd7a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802bd7c:	4c08      	ldr	r4, [pc, #32]	; (802bda0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802bd7e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802bd80:	20f0      	movs	r0, #240	; 0xf0
 802bd82:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802bd86:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802bd88:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802bd8a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802bd8c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 802bd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802bd92:	6019      	str	r1, [r3, #0]
 802bd94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 802bd96:	2001      	movs	r0, #1
 802bd98:	4770      	bx	lr
 802bd9a:	bf00      	nop
 802bd9c:	e000e010 	.word	0xe000e010
 802bda0:	e000ed00 	.word	0xe000ed00

0802bda4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bda6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 802bda8:	f7ff ff5c 	bl	802bc64 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802bdac:	2c00      	cmp	r4, #0
 802bdae:	d054      	beq.n	802be5a <HAL_DMA_Init+0xb6>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802bdb0:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 802bdb2:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 802bdb4:	2100      	movs	r1, #0
 802bdb6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 802bdba:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 802bdbe:	681a      	ldr	r2, [r3, #0]
 802bdc0:	f022 0201 	bic.w	r2, r2, #1
 802bdc4:	4605      	mov	r5, r0
 802bdc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802bdc8:	e005      	b.n	802bdd6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802bdca:	f7ff ff4b 	bl	802bc64 <HAL_GetTick>
 802bdce:	1b43      	subs	r3, r0, r5
 802bdd0:	2b05      	cmp	r3, #5
 802bdd2:	d83b      	bhi.n	802be4c <HAL_DMA_Init+0xa8>
 802bdd4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802bdd6:	681a      	ldr	r2, [r3, #0]
 802bdd8:	07d1      	lsls	r1, r2, #31
 802bdda:	d4f6      	bmi.n	802bdca <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802bddc:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802bde0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802bde4:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802bde6:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 802bde8:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802bdea:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802bdec:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802bdf0:	4302      	orrs	r2, r0
 802bdf2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 802bdf4:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802bdf6:	4935      	ldr	r1, [pc, #212]	; (802becc <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802bdf8:	4332      	orrs	r2, r6
 802bdfa:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 802bdfc:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802bdfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802be00:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802be02:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802be04:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802be08:	d029      	beq.n	802be5e <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802be0a:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802be0c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802be0e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802be12:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802be14:	b2da      	uxtb	r2, r3
 802be16:	492e      	ldr	r1, [pc, #184]	; (802bed0 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 802be18:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802be1a:	3a10      	subs	r2, #16
 802be1c:	fba1 0102 	umull	r0, r1, r1, r2
 802be20:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802be22:	482c      	ldr	r0, [pc, #176]	; (802bed4 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802be24:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802be28:	5c41      	ldrb	r1, [r0, r1]
 802be2a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802be2c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 802be30:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802be32:	bf88      	it	hi
 802be34:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802be36:	223f      	movs	r2, #63	; 0x3f
 802be38:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 802be3a:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802be3c:	2100      	movs	r1, #0
 802be3e:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802be40:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802be42:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 802be44:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 802be48:	4608      	mov	r0, r1
}
 802be4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802be4c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802be4e:	2220      	movs	r2, #32
 802be50:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802be52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 802be56:	4618      	mov	r0, r3
}
 802be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 802be5a:	2001      	movs	r0, #1
}
 802be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802be5e:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 802be62:	4328      	orrs	r0, r5
 802be64:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 802be66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 802be68:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 802be6a:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802be6c:	f020 0007 	bic.w	r0, r0, #7
 802be70:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 802be72:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802be76:	2d00      	cmp	r5, #0
 802be78:	d0cc      	beq.n	802be14 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802be7a:	b17e      	cbz	r6, 802be9c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802be7c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 802be80:	d012      	beq.n	802bea8 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802be82:	2a02      	cmp	r2, #2
 802be84:	d903      	bls.n	802be8e <HAL_DMA_Init+0xea>
 802be86:	2a03      	cmp	r2, #3
 802be88:	d1c4      	bne.n	802be14 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802be8a:	01ea      	lsls	r2, r5, #7
 802be8c:	d5c2      	bpl.n	802be14 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 802be8e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802be90:	2240      	movs	r2, #64	; 0x40
 802be92:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 802be94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 802be98:	4618      	mov	r0, r3
}
 802be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 802be9c:	2a01      	cmp	r2, #1
 802be9e:	d011      	beq.n	802bec4 <HAL_DMA_Init+0x120>
 802bea0:	f032 0202 	bics.w	r2, r2, #2
 802bea4:	d1b6      	bne.n	802be14 <HAL_DMA_Init+0x70>
 802bea6:	e7f0      	b.n	802be8a <HAL_DMA_Init+0xe6>
    switch (tmp)
 802bea8:	2a03      	cmp	r2, #3
 802beaa:	d8b3      	bhi.n	802be14 <HAL_DMA_Init+0x70>
 802beac:	a101      	add	r1, pc, #4	; (adr r1, 802beb4 <HAL_DMA_Init+0x110>)
 802beae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802beb2:	bf00      	nop
 802beb4:	0802be8f 	.word	0x0802be8f
 802beb8:	0802be8b 	.word	0x0802be8b
 802bebc:	0802be8f 	.word	0x0802be8f
 802bec0:	0802bec5 	.word	0x0802bec5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802bec4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 802bec8:	d1a4      	bne.n	802be14 <HAL_DMA_Init+0x70>
 802beca:	e7e0      	b.n	802be8e <HAL_DMA_Init+0xea>
 802becc:	f010803f 	.word	0xf010803f
 802bed0:	aaaaaaab 	.word	0xaaaaaaab
 802bed4:	08039b48 	.word	0x08039b48

0802bed8 <HAL_DMA_DeInit>:
{
 802bed8:	b430      	push	{r4, r5}
  if(hdma == NULL)
 802beda:	2800      	cmp	r0, #0
 802bedc:	d035      	beq.n	802bf4a <HAL_DMA_DeInit+0x72>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 802bede:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 802bee2:	2b02      	cmp	r3, #2
 802bee4:	b2dc      	uxtb	r4, r3
 802bee6:	d02d      	beq.n	802bf44 <HAL_DMA_DeInit+0x6c>
  __HAL_DMA_DISABLE(hdma);
 802bee8:	6803      	ldr	r3, [r0, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802beea:	4a1a      	ldr	r2, [pc, #104]	; (802bf54 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 802beec:	681c      	ldr	r4, [r3, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802beee:	4d1a      	ldr	r5, [pc, #104]	; (802bf58 <HAL_DMA_DeInit+0x80>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802bef0:	b2d9      	uxtb	r1, r3
 802bef2:	3910      	subs	r1, #16
 802bef4:	fba2 c201 	umull	ip, r2, r2, r1
 802bef8:	0912      	lsrs	r2, r2, #4
  __HAL_DMA_DISABLE(hdma);
 802befa:	f024 0401 	bic.w	r4, r4, #1
 802befe:	601c      	str	r4, [r3, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802bf00:	5cad      	ldrb	r5, [r5, r2]
  hdma->Instance->FCR  = 0x00000021U;
 802bf02:	2421      	movs	r4, #33	; 0x21
  hdma->Instance->CR   = 0U;
 802bf04:	2200      	movs	r2, #0
 802bf06:	601a      	str	r2, [r3, #0]
  hdma->Instance->NDTR = 0U;
 802bf08:	605a      	str	r2, [r3, #4]
  hdma->Instance->PAR  = 0U;
 802bf0a:	609a      	str	r2, [r3, #8]
  hdma->Instance->M0AR = 0U;
 802bf0c:	60da      	str	r2, [r3, #12]
  hdma->Instance->M1AR = 0U;
 802bf0e:	611a      	str	r2, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 802bf10:	615c      	str	r4, [r3, #20]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802bf12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802bf16:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 802bf1a:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802bf1c:	bf88      	it	hi
 802bf1e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bf20:	213f      	movs	r1, #63	; 0x3f
  hdma->XferCpltCallback = NULL;
 802bf22:	2200      	movs	r2, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bf24:	40a9      	lsls	r1, r5
  hdma->XferHalfCpltCallback = NULL;
 802bf26:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 802bf2a:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 802bf2e:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802bf32:	65c5      	str	r5, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802bf34:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 802bf36:	4614      	mov	r4, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bf38:	6099      	str	r1, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bf3a:	6542      	str	r2, [r0, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 802bf3c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 802bf40:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
}
 802bf44:	4620      	mov	r0, r4
 802bf46:	bc30      	pop	{r4, r5}
 802bf48:	4770      	bx	lr
    return HAL_ERROR;
 802bf4a:	2401      	movs	r4, #1
}
 802bf4c:	4620      	mov	r0, r4
 802bf4e:	bc30      	pop	{r4, r5}
 802bf50:	4770      	bx	lr
 802bf52:	bf00      	nop
 802bf54:	aaaaaaab 	.word	0xaaaaaaab
 802bf58:	08039b48 	.word	0x08039b48

0802bf5c <HAL_DMA_Abort>:
{
 802bf5c:	b570      	push	{r4, r5, r6, lr}
 802bf5e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802bf60:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 802bf62:	f7ff fe7f 	bl	802bc64 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802bf66:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 802bf6a:	2b02      	cmp	r3, #2
 802bf6c:	d006      	beq.n	802bf7c <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 802bf6e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802bf70:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 802bf72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802bf76:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 802bf78:	2001      	movs	r0, #1
}
 802bf7a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802bf7c:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802bf7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802bf80:	681a      	ldr	r2, [r3, #0]
 802bf82:	f022 0216 	bic.w	r2, r2, #22
 802bf86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802bf88:	695a      	ldr	r2, [r3, #20]
 802bf8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802bf8e:	4605      	mov	r5, r0
 802bf90:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802bf92:	b331      	cbz	r1, 802bfe2 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 802bf94:	681a      	ldr	r2, [r3, #0]
 802bf96:	f022 0208 	bic.w	r2, r2, #8
 802bf9a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 802bf9c:	681a      	ldr	r2, [r3, #0]
 802bf9e:	f022 0201 	bic.w	r2, r2, #1
 802bfa2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802bfa4:	e005      	b.n	802bfb2 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802bfa6:	f7ff fe5d 	bl	802bc64 <HAL_GetTick>
 802bfaa:	1b43      	subs	r3, r0, r5
 802bfac:	2b05      	cmp	r3, #5
 802bfae:	d80f      	bhi.n	802bfd0 <HAL_DMA_Abort+0x74>
 802bfb0:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802bfb2:	681b      	ldr	r3, [r3, #0]
 802bfb4:	f013 0301 	ands.w	r3, r3, #1
 802bfb8:	d1f5      	bne.n	802bfa6 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bfba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802bfbc:	223f      	movs	r2, #63	; 0x3f
 802bfbe:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 802bfc0:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bfc2:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 802bfc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 802bfc8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 802bfcc:	4618      	mov	r0, r3
}
 802bfce:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802bfd0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 802bfd2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 802bfd4:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802bfd6:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 802bfd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 802bfdc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 802bfe0:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802bfe2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 802bfe4:	2a00      	cmp	r2, #0
 802bfe6:	d1d5      	bne.n	802bf94 <HAL_DMA_Abort+0x38>
 802bfe8:	e7d8      	b.n	802bf9c <HAL_DMA_Abort+0x40>
 802bfea:	bf00      	nop

0802bfec <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 802bfec:	b4f0      	push	{r4, r5, r6, r7}

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 802bfee:	e9d0 5700 	ldrd	r5, r7, [r0]
{
 802bff2:	9c04      	ldr	r4, [sp, #16]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 802bff4:	6c6e      	ldr	r6, [r5, #68]	; 0x44
 802bff6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 802bffa:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 802bffe:	4333      	orrs	r3, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
 802c000:	f5b7 3f40 	cmp.w	r7, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 802c004:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 802c006:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 802c008:	d002      	beq.n	802c010 <DMA2D_SetConfig+0x24>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 802c00a:	60e9      	str	r1, [r5, #12]
  }
}
 802c00c:	bcf0      	pop	{r4, r5, r6, r7}
 802c00e:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 802c010:	6883      	ldr	r3, [r0, #8]
 802c012:	b1b3      	cbz	r3, 802c042 <DMA2D_SetConfig+0x56>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 802c014:	2b01      	cmp	r3, #1
 802c016:	d017      	beq.n	802c048 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 802c018:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 802c01a:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 802c01e:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 802c022:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 802c024:	d01e      	beq.n	802c064 <DMA2D_SetConfig+0x78>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 802c026:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 802c028:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 802c02c:	d00f      	beq.n	802c04e <DMA2D_SetConfig+0x62>
      tmp2 = (tmp2 >> 20U);
 802c02e:	0d13      	lsrs	r3, r2, #20
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 802c030:	021b      	lsls	r3, r3, #8
      tmp3 = (tmp3 >> 12U);
 802c032:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 802c034:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 802c038:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 802c03c:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 802c03e:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 802c042:	63a9      	str	r1, [r5, #56]	; 0x38
}
 802c044:	bcf0      	pop	{r4, r5, r6, r7}
 802c046:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 802c048:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 802c04c:	e7f9      	b.n	802c042 <DMA2D_SetConfig+0x56>
      tmp2 = (tmp2 >> 19U);
 802c04e:	0cd2      	lsrs	r2, r2, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 802c050:	0292      	lsls	r2, r2, #10
      tmp3 = (tmp3 >> 11U);
 802c052:	0ae3      	lsrs	r3, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 802c054:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 802c058:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 802c05c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 802c05e:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 802c062:	e7ee      	b.n	802c042 <DMA2D_SetConfig+0x56>
      tmp2 = (tmp2 >> 19U);
 802c064:	0cd1      	lsrs	r1, r2, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 802c066:	02c9      	lsls	r1, r1, #11
      tmp3 = (tmp3 >> 10U);
 802c068:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 802c06a:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 802c06e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 802c072:	e7e6      	b.n	802c042 <DMA2D_SetConfig+0x56>

0802c074 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 802c074:	b350      	cbz	r0, 802c0cc <HAL_DMA2D_Init+0x58>
{
 802c076:	b538      	push	{r3, r4, r5, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 802c078:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 802c07c:	4604      	mov	r4, r0
 802c07e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802c082:	b1f3      	cbz	r3, 802c0c2 <HAL_DMA2D_Init+0x4e>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 802c084:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 802c086:	68e5      	ldr	r5, [r4, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c088:	2302      	movs	r3, #2
 802c08a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 802c08e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 802c090:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 802c094:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
 802c098:	4308      	orrs	r0, r1
 802c09a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 802c09c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 802c09e:	f021 0107 	bic.w	r1, r1, #7
 802c0a2:	4319      	orrs	r1, r3
 802c0a4:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 802c0a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802c0a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802c0ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802c0b0:	432b      	orrs	r3, r5
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 802c0b2:	2100      	movs	r1, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 802c0b4:	2501      	movs	r5, #1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 802c0b6:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 802c0b8:	63e1      	str	r1, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 802c0ba:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  return HAL_OK;
 802c0be:	4608      	mov	r0, r1
}
 802c0c0:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 802c0c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 802c0c6:	f7fe f8f1 	bl	802a2ac <HAL_DMA2D_MspInit>
 802c0ca:	e7db      	b.n	802c084 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 802c0cc:	2001      	movs	r0, #1
}
 802c0ce:	4770      	bx	lr

0802c0d0 <HAL_DMA2D_Start_IT>:
{
 802c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 802c0d2:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 802c0d6:	2d01      	cmp	r5, #1
{
 802c0d8:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 802c0da:	d015      	beq.n	802c108 <HAL_DMA2D_Start_IT+0x38>
 802c0dc:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 802c0de:	9f08      	ldr	r7, [sp, #32]
 802c0e0:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 802c0e2:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c0e4:	2502      	movs	r5, #2
  __HAL_LOCK(hdma2d);
 802c0e6:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c0ea:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 802c0ee:	f7ff ff7d 	bl	802bfec <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 802c0f2:	6823      	ldr	r3, [r4, #0]
 802c0f4:	681a      	ldr	r2, [r3, #0]
 802c0f6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 802c0fa:	601a      	str	r2, [r3, #0]
  __HAL_DMA2D_ENABLE(hdma2d);
 802c0fc:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 802c0fe:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 802c100:	4332      	orrs	r2, r6
 802c102:	601a      	str	r2, [r3, #0]
}
 802c104:	b003      	add	sp, #12
 802c106:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 802c108:	2002      	movs	r0, #2
}
 802c10a:	b003      	add	sp, #12
 802c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c10e:	bf00      	nop

0802c110 <HAL_DMA2D_BlendingStart_IT>:
{
 802c110:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 802c112:	f890 6038 	ldrb.w	r6, [r0, #56]	; 0x38
 802c116:	2e01      	cmp	r6, #1
{
 802c118:	b082      	sub	sp, #8
  __HAL_LOCK(hdma2d);
 802c11a:	d01b      	beq.n	802c154 <HAL_DMA2D_BlendingStart_IT+0x44>
 802c11c:	4615      	mov	r5, r2
 802c11e:	2601      	movs	r6, #1
 802c120:	461a      	mov	r2, r3
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 802c122:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdma2d);
 802c124:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c128:	2602      	movs	r6, #2
 802c12a:	f880 6039 	strb.w	r6, [r0, #57]	; 0x39
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 802c12e:	615d      	str	r5, [r3, #20]
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 802c130:	e9dd 3506 	ldrd	r3, r5, [sp, #24]
 802c134:	4604      	mov	r4, r0
 802c136:	9500      	str	r5, [sp, #0]
 802c138:	f7ff ff58 	bl	802bfec <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 802c13c:	6823      	ldr	r3, [r4, #0]
 802c13e:	681a      	ldr	r2, [r3, #0]
 802c140:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 802c144:	601a      	str	r2, [r3, #0]
  __HAL_DMA2D_ENABLE(hdma2d);
 802c146:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 802c148:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 802c14a:	f042 0201 	orr.w	r2, r2, #1
 802c14e:	601a      	str	r2, [r3, #0]
}
 802c150:	b002      	add	sp, #8
 802c152:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 802c154:	2002      	movs	r0, #2
}
 802c156:	b002      	add	sp, #8
 802c158:	bd70      	pop	{r4, r5, r6, pc}
 802c15a:	bf00      	nop

0802c15c <HAL_DMA2D_Abort>:
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 802c15c:	6802      	ldr	r2, [r0, #0]
{
 802c15e:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 802c160:	6813      	ldr	r3, [r2, #0]
 802c162:	f023 0305 	bic.w	r3, r3, #5
 802c166:	f043 0304 	orr.w	r3, r3, #4
 802c16a:	6013      	str	r3, [r2, #0]
{
 802c16c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 802c16e:	f7ff fd79 	bl	802bc64 <HAL_GetTick>
 802c172:	4605      	mov	r5, r0
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 802c174:	e005      	b.n	802c182 <HAL_DMA2D_Abort+0x26>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 802c176:	f7ff fd75 	bl	802bc64 <HAL_GetTick>
 802c17a:	1b43      	subs	r3, r0, r5
 802c17c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c180:	d80f      	bhi.n	802c1a2 <HAL_DMA2D_Abort+0x46>
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 802c182:	6822      	ldr	r2, [r4, #0]
 802c184:	6813      	ldr	r3, [r2, #0]
 802c186:	f013 0301 	ands.w	r3, r3, #1
 802c18a:	d1f4      	bne.n	802c176 <HAL_DMA2D_Abort+0x1a>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 802c18c:	6811      	ldr	r1, [r2, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802c18e:	2501      	movs	r5, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 802c190:	f421 510c 	bic.w	r1, r1, #8960	; 0x2300
 802c194:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdma2d);
 802c196:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802c19a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  return HAL_OK;
 802c19e:	4618      	mov	r0, r3
}
 802c1a0:	bd38      	pop	{r3, r4, r5, pc}
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c1a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802c1a4:	2203      	movs	r2, #3
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c1a6:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 802c1aa:	2100      	movs	r1, #0
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c1ac:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 802c1ae:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802c1b2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c1b6:	4610      	mov	r0, r2
}
 802c1b8:	bd38      	pop	{r3, r4, r5, pc}
 802c1ba:	bf00      	nop

0802c1bc <HAL_DMA2D_CLUTLoad_IT>:
{
 802c1bc:	b430      	push	{r4, r5}
 802c1be:	b084      	sub	sp, #16
 802c1c0:	ac04      	add	r4, sp, #16
 802c1c2:	e904 000e 	stmdb	r4, {r1, r2, r3}
  __HAL_LOCK(hdma2d);
 802c1c6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 802c1ca:	9c03      	ldr	r4, [sp, #12]
 802c1cc:	2a01      	cmp	r2, #1
 802c1ce:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 802c1d2:	d037      	beq.n	802c244 <HAL_DMA2D_CLUTLoad_IT+0x88>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c1d4:	2202      	movs	r2, #2
 802c1d6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802c1da:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 802c1dc:	2501      	movs	r5, #1
 802c1de:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802c1e2:	b1ba      	cbz	r2, 802c214 <HAL_DMA2D_CLUTLoad_IT+0x58>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 802c1e4:	6802      	ldr	r2, [r0, #0]
 802c1e6:	62d1      	str	r1, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 802c1e8:	69d1      	ldr	r1, [r2, #28]
 802c1ea:	011b      	lsls	r3, r3, #4
 802c1ec:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 802c1f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 802c1f4:	f021 0110 	bic.w	r1, r1, #16
 802c1f8:	430b      	orrs	r3, r1
 802c1fa:	61d3      	str	r3, [r2, #28]
    __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 802c1fc:	6813      	ldr	r3, [r2, #0]
 802c1fe:	f443 5364 	orr.w	r3, r3, #14592	; 0x3900
 802c202:	6013      	str	r3, [r2, #0]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 802c204:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 802c206:	2000      	movs	r0, #0
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 802c208:	f043 0320 	orr.w	r3, r3, #32
 802c20c:	61d3      	str	r3, [r2, #28]
}
 802c20e:	b004      	add	sp, #16
 802c210:	bc30      	pop	{r4, r5}
 802c212:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 802c214:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
 802c216:	9806      	ldr	r0, [sp, #24]
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 802c218:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 802c21a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 802c21c:	011b      	lsls	r3, r3, #4
 802c21e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 802c222:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 802c226:	f021 0110 	bic.w	r1, r1, #16
 802c22a:	430b      	orrs	r3, r1
 802c22c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 802c22e:	6813      	ldr	r3, [r2, #0]
 802c230:	f443 5364 	orr.w	r3, r3, #14592	; 0x3900
 802c234:	6013      	str	r3, [r2, #0]
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 802c236:	6a53      	ldr	r3, [r2, #36]	; 0x24
 802c238:	f043 0320 	orr.w	r3, r3, #32
 802c23c:	6253      	str	r3, [r2, #36]	; 0x24
}
 802c23e:	b004      	add	sp, #16
 802c240:	bc30      	pop	{r4, r5}
 802c242:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 802c244:	2002      	movs	r0, #2
}
 802c246:	b004      	add	sp, #16
 802c248:	bc30      	pop	{r4, r5}
 802c24a:	4770      	bx	lr

0802c24c <HAL_DMA2D_CLUTLoading_Abort>:
{
 802c24c:	b570      	push	{r4, r5, r6, lr}
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */
 802c24e:	6804      	ldr	r4, [r0, #0]
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 802c250:	6823      	ldr	r3, [r4, #0]
 802c252:	f043 0304 	orr.w	r3, r3, #4
 802c256:	6023      	str	r3, [r4, #0]
  if (LayerIdx == DMA2D_FOREGROUND_LAYER)
 802c258:	2901      	cmp	r1, #1
{
 802c25a:	4606      	mov	r6, r0
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */
 802c25c:	bf14      	ite	ne
 802c25e:	3424      	addne	r4, #36	; 0x24
    reg  = &(hdma2d->Instance->FGPFCCR);
 802c260:	341c      	addeq	r4, #28
  tickstart = HAL_GetTick();
 802c262:	f7ff fcff 	bl	802bc64 <HAL_GetTick>
 802c266:	4605      	mov	r5, r0
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 802c268:	e005      	b.n	802c276 <HAL_DMA2D_CLUTLoading_Abort+0x2a>
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 802c26a:	f7ff fcfb 	bl	802bc64 <HAL_GetTick>
 802c26e:	1b43      	subs	r3, r0, r5
 802c270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c274:	d80f      	bhi.n	802c296 <HAL_DMA2D_CLUTLoading_Abort+0x4a>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 802c276:	6823      	ldr	r3, [r4, #0]
 802c278:	f013 0320 	ands.w	r3, r3, #32
 802c27c:	d1f5      	bne.n	802c26a <HAL_DMA2D_CLUTLoading_Abort+0x1e>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 802c27e:	6831      	ldr	r1, [r6, #0]
 802c280:	680a      	ldr	r2, [r1, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802c282:	2401      	movs	r4, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 802c284:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 802c288:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdma2d);
 802c28a:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802c28e:	f886 4039 	strb.w	r4, [r6, #57]	; 0x39
  return HAL_OK;
 802c292:	4618      	mov	r0, r3
}
 802c294:	bd70      	pop	{r4, r5, r6, pc}
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c296:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802c298:	2203      	movs	r2, #3
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c29a:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 802c29e:	2100      	movs	r1, #0
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802c2a0:	63f3      	str	r3, [r6, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 802c2a2:	f886 1038 	strb.w	r1, [r6, #56]	; 0x38
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802c2a6:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c2aa:	4610      	mov	r0, r2
}
 802c2ac:	bd70      	pop	{r4, r5, r6, pc}
 802c2ae:	bf00      	nop

0802c2b0 <HAL_DMA2D_DeInit>:
  if (hdma2d == NULL)
 802c2b0:	2800      	cmp	r0, #0
 802c2b2:	d030      	beq.n	802c316 <HAL_DMA2D_DeInit+0x66>
{
 802c2b4:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 802c2b6:	4b19      	ldr	r3, [pc, #100]	; (802c31c <HAL_DMA2D_DeInit+0x6c>)
 802c2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c2ba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 802c2be:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 802c2c0:	6803      	ldr	r3, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 802c2c2:	d009      	beq.n	802c2d8 <HAL_DMA2D_DeInit+0x28>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 802c2c4:	6819      	ldr	r1, [r3, #0]
 802c2c6:	f011 0101 	ands.w	r1, r1, #1
 802c2ca:	d11e      	bne.n	802c30a <HAL_DMA2D_DeInit+0x5a>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 802c2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c2ce:	0694      	lsls	r4, r2, #26
 802c2d0:	d416      	bmi.n	802c300 <HAL_DMA2D_DeInit+0x50>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 802c2d2:	69da      	ldr	r2, [r3, #28]
 802c2d4:	0692      	lsls	r2, r2, #26
 802c2d6:	d412      	bmi.n	802c2fe <HAL_DMA2D_DeInit+0x4e>
  hdma2d->Instance->CR       =    0U;
 802c2d8:	2400      	movs	r4, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 802c2da:	223f      	movs	r2, #63	; 0x3f
  hdma2d->Instance->CR       =    0U;
 802c2dc:	601c      	str	r4, [r3, #0]
  HAL_DMA2D_MspDeInit(hdma2d);
 802c2de:	4628      	mov	r0, r5
  hdma2d->Instance->IFCR     = 0x3FU;
 802c2e0:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 802c2e2:	611c      	str	r4, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 802c2e4:	619c      	str	r4, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 802c2e6:	61dc      	str	r4, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 802c2e8:	625c      	str	r4, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 802c2ea:	635c      	str	r4, [r3, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 802c2ec:	f7fd fff8 	bl	802a2e0 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 802c2f0:	63ec      	str	r4, [r5, #60]	; 0x3c
  __HAL_UNLOCK(hdma2d);
 802c2f2:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 802c2f6:	f885 4039 	strb.w	r4, [r5, #57]	; 0x39
  return HAL_OK;
 802c2fa:	4620      	mov	r0, r4
}
 802c2fc:	bd38      	pop	{r3, r4, r5, pc}
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 802c2fe:	2101      	movs	r1, #1
 802c300:	f7ff ffa4 	bl	802c24c <HAL_DMA2D_CLUTLoading_Abort>
 802c304:	b928      	cbnz	r0, 802c312 <HAL_DMA2D_DeInit+0x62>
 802c306:	682b      	ldr	r3, [r5, #0]
 802c308:	e7e6      	b.n	802c2d8 <HAL_DMA2D_DeInit+0x28>
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 802c30a:	f7ff ff27 	bl	802c15c <HAL_DMA2D_Abort>
 802c30e:	2800      	cmp	r0, #0
 802c310:	d0f9      	beq.n	802c306 <HAL_DMA2D_DeInit+0x56>
    return HAL_ERROR;
 802c312:	2001      	movs	r0, #1
}
 802c314:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 802c316:	2001      	movs	r0, #1
}
 802c318:	4770      	bx	lr
 802c31a:	bf00      	nop
 802c31c:	40023800 	.word	0x40023800

0802c320 <HAL_DMA2D_LineEventCallback>:
 802c320:	4770      	bx	lr
 802c322:	bf00      	nop

0802c324 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 802c324:	4770      	bx	lr
 802c326:	bf00      	nop

0802c328 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 802c328:	6803      	ldr	r3, [r0, #0]
{
 802c32a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 802c32c:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 802c32e:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 802c330:	07ea      	lsls	r2, r5, #31
{
 802c332:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 802c334:	d501      	bpl.n	802c33a <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 802c336:	05f1      	lsls	r1, r6, #23
 802c338:	d457      	bmi.n	802c3ea <HAL_DMA2D_IRQHandler+0xc2>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 802c33a:	06aa      	lsls	r2, r5, #26
 802c33c:	d501      	bpl.n	802c342 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 802c33e:	04b3      	lsls	r3, r6, #18
 802c340:	d43c      	bmi.n	802c3bc <HAL_DMA2D_IRQHandler+0x94>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 802c342:	0728      	lsls	r0, r5, #28
 802c344:	d501      	bpl.n	802c34a <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 802c346:	0531      	lsls	r1, r6, #20
 802c348:	d421      	bmi.n	802c38e <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 802c34a:	076a      	lsls	r2, r5, #29
 802c34c:	d501      	bpl.n	802c352 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 802c34e:	0573      	lsls	r3, r6, #21
 802c350:	d473      	bmi.n	802c43a <HAL_DMA2D_IRQHandler+0x112>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 802c352:	07a8      	lsls	r0, r5, #30
 802c354:	d501      	bpl.n	802c35a <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 802c356:	05b1      	lsls	r1, r6, #22
 802c358:	d404      	bmi.n	802c364 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 802c35a:	06ea      	lsls	r2, r5, #27
 802c35c:	d501      	bpl.n	802c362 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 802c35e:	04f3      	lsls	r3, r6, #19
 802c360:	d458      	bmi.n	802c414 <HAL_DMA2D_IRQHandler+0xec>
}
 802c362:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 802c364:	6823      	ldr	r3, [r4, #0]
      if (hdma2d->XferCpltCallback != NULL)
 802c366:	6921      	ldr	r1, [r4, #16]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 802c368:	681a      	ldr	r2, [r3, #0]
 802c36a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802c36e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 802c370:	2202      	movs	r2, #2
 802c372:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 802c374:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c376:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802c378:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma2d);
 802c37a:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802c37c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c380:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 802c384:	2900      	cmp	r1, #0
 802c386:	d0e8      	beq.n	802c35a <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 802c388:	4620      	mov	r0, r4
 802c38a:	4788      	blx	r1
 802c38c:	e7e5      	b.n	802c35a <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 802c38e:	6823      	ldr	r3, [r4, #0]
      if (hdma2d->XferErrorCallback != NULL)
 802c390:	6961      	ldr	r1, [r4, #20]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 802c392:	681a      	ldr	r2, [r3, #0]
 802c394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c398:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 802c39a:	2208      	movs	r2, #8
 802c39c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 802c39e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c3a0:	f043 0304 	orr.w	r3, r3, #4
 802c3a4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c3a6:	2204      	movs	r2, #4
      __HAL_UNLOCK(hdma2d);
 802c3a8:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c3aa:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c3ae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 802c3b2:	2900      	cmp	r1, #0
 802c3b4:	d0c9      	beq.n	802c34a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 802c3b6:	4620      	mov	r0, r4
 802c3b8:	4788      	blx	r1
 802c3ba:	e7c6      	b.n	802c34a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 802c3bc:	6823      	ldr	r3, [r4, #0]
      if (hdma2d->XferErrorCallback != NULL)
 802c3be:	6961      	ldr	r1, [r4, #20]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 802c3c0:	681a      	ldr	r2, [r3, #0]
 802c3c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802c3c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 802c3c8:	2220      	movs	r2, #32
 802c3ca:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 802c3cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c3ce:	f043 0302 	orr.w	r3, r3, #2
 802c3d2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c3d4:	2204      	movs	r2, #4
      __HAL_UNLOCK(hdma2d);
 802c3d6:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c3d8:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c3dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 802c3e0:	2900      	cmp	r1, #0
 802c3e2:	d0ae      	beq.n	802c342 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 802c3e4:	4620      	mov	r0, r4
 802c3e6:	4788      	blx	r1
 802c3e8:	e7ab      	b.n	802c342 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 802c3ea:	681a      	ldr	r2, [r3, #0]
      if (hdma2d->XferErrorCallback != NULL)
 802c3ec:	6941      	ldr	r1, [r0, #20]
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 802c3ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c3f2:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 802c3f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802c3f6:	f042 0201 	orr.w	r2, r2, #1
 802c3fa:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 802c3fc:	2201      	movs	r2, #1
 802c3fe:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c400:	2204      	movs	r2, #4
      __HAL_UNLOCK(hdma2d);
 802c402:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802c404:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c408:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 802c40c:	2900      	cmp	r1, #0
 802c40e:	d094      	beq.n	802c33a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 802c410:	4788      	blx	r1
 802c412:	e792      	b.n	802c33a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 802c414:	6823      	ldr	r3, [r4, #0]
 802c416:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 802c418:	2110      	movs	r1, #16
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 802c41a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802c41e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 802c420:	6099      	str	r1, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 802c422:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c424:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802c426:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma2d);
 802c428:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802c42a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 802c42e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 802c432:	4620      	mov	r0, r4
 802c434:	f7ff ff76 	bl	802c324 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 802c438:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 802c43a:	6823      	ldr	r3, [r4, #0]
 802c43c:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 802c43e:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 802c440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c444:	601a      	str	r2, [r3, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 802c446:	4620      	mov	r0, r4
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 802c448:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 802c44a:	f7ff ff69 	bl	802c320 <HAL_DMA2D_LineEventCallback>
 802c44e:	e780      	b.n	802c352 <HAL_DMA2D_IRQHandler+0x2a>

0802c450 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 802c450:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 802c454:	2b01      	cmp	r3, #1
 802c456:	d04c      	beq.n	802c4f2 <HAL_DMA2D_ConfigLayer+0xa2>
{
 802c458:	b470      	push	{r4, r5, r6}
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c45a:	2302      	movs	r3, #2
  __HAL_LOCK(hdma2d);
 802c45c:	2401      	movs	r4, #1
 802c45e:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 802c462:	eb00 1201 	add.w	r2, r0, r1, lsl #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802c466:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 802c46a:	e9d2 3507 	ldrd	r3, r5, [r2, #28]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802c46e:	f1a3 0409 	sub.w	r4, r3, #9
 802c472:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 802c474:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802c478:	d91d      	bls.n	802c4b6 <HAL_DMA2D_ConfigLayer+0x66>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 802c47a:	6a54      	ldr	r4, [r2, #36]	; 0x24
 802c47c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802c480:	b181      	cbz	r1, 802c4a4 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802c482:	6804      	ldr	r4, [r0, #0]
 802c484:	491c      	ldr	r1, [pc, #112]	; (802c4f8 <HAL_DMA2D_ConfigLayer+0xa8>)
 802c486:	69e5      	ldr	r5, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802c488:	6992      	ldr	r2, [r2, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802c48a:	4029      	ands	r1, r5
 802c48c:	430b      	orrs	r3, r1
 802c48e:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802c490:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hdma2d);
 802c492:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802c494:	2201      	movs	r2, #1
 802c496:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 802c49a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 802c49e:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 802c4a0:	4618      	mov	r0, r3
}
 802c4a2:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802c4a4:	6801      	ldr	r1, [r0, #0]
 802c4a6:	4a14      	ldr	r2, [pc, #80]	; (802c4f8 <HAL_DMA2D_ConfigLayer+0xa8>)
 802c4a8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802c4aa:	6984      	ldr	r4, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802c4ac:	402a      	ands	r2, r5
 802c4ae:	4313      	orrs	r3, r2
 802c4b0:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802c4b2:	618c      	str	r4, [r1, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802c4b4:	e7ed      	b.n	802c492 <HAL_DMA2D_ConfigLayer+0x42>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 802c4b6:	6a55      	ldr	r5, [r2, #36]	; 0x24
 802c4b8:	f005 447f 	and.w	r4, r5, #4278190080	; 0xff000000
 802c4bc:	4323      	orrs	r3, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802c4be:	b159      	cbz	r1, 802c4d8 <HAL_DMA2D_ConfigLayer+0x88>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802c4c0:	6804      	ldr	r4, [r0, #0]
 802c4c2:	490d      	ldr	r1, [pc, #52]	; (802c4f8 <HAL_DMA2D_ConfigLayer+0xa8>)
 802c4c4:	69e6      	ldr	r6, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802c4c6:	6992      	ldr	r2, [r2, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802c4c8:	4031      	ands	r1, r6
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 802c4ca:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802c4ce:	430b      	orrs	r3, r1
 802c4d0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802c4d2:	6122      	str	r2, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 802c4d4:	6225      	str	r5, [r4, #32]
 802c4d6:	e7dc      	b.n	802c492 <HAL_DMA2D_ConfigLayer+0x42>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802c4d8:	6801      	ldr	r1, [r0, #0]
 802c4da:	4a07      	ldr	r2, [pc, #28]	; (802c4f8 <HAL_DMA2D_ConfigLayer+0xa8>)
 802c4dc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 802c4de:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802c4e0:	402a      	ands	r2, r5
 802c4e2:	4313      	orrs	r3, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 802c4e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802c4e8:	6982      	ldr	r2, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802c4ea:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802c4ec:	618a      	str	r2, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 802c4ee:	628c      	str	r4, [r1, #40]	; 0x28
 802c4f0:	e7cf      	b.n	802c492 <HAL_DMA2D_ConfigLayer+0x42>
  __HAL_LOCK(hdma2d);
 802c4f2:	2002      	movs	r0, #2
}
 802c4f4:	4770      	bx	lr
 802c4f6:	bf00      	nop
 802c4f8:	00fcfff0 	.word	0x00fcfff0

0802c4fc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 802c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c500:	4605      	mov	r5, r0
 802c502:	4688      	mov	r8, r1
 802c504:	4617      	mov	r7, r2
 802c506:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 802c508:	f7ff fbac 	bl	802bc64 <HAL_GetTick>
 802c50c:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 802c50e:	e005      	b.n	802c51c <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 802c510:	f7ff fba8 	bl	802bc64 <HAL_GetTick>
 802c514:	1b84      	subs	r4, r0, r6
 802c516:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 802c51a:	d80e      	bhi.n	802c53a <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 802c51c:	682c      	ldr	r4, [r5, #0]
 802c51e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802c520:	07db      	lsls	r3, r3, #31
 802c522:	d5f5      	bpl.n	802c510 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 802c524:	9b08      	ldr	r3, [sp, #32]
 802c526:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 802c52a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802c52e:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 802c532:	66e1      	str	r1, [r4, #108]	; 0x6c

  return HAL_OK;
 802c534:	2000      	movs	r0, #0
}
 802c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 802c53a:	2003      	movs	r0, #3
}
 802c53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802c540 <HAL_DSI_Init>:
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 802c540:	2800      	cmp	r0, #0
 802c542:	f000 80b3 	beq.w	802c6ac <HAL_DSI_Init+0x16c>
{
 802c546:	b5f0      	push	{r4, r5, r6, r7, lr}
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 802c548:	7c43      	ldrb	r3, [r0, #17]
{
 802c54a:	b083      	sub	sp, #12
 802c54c:	460d      	mov	r5, r1
 802c54e:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 802c550:	2b00      	cmp	r3, #0
 802c552:	f000 80a8 	beq.w	802c6a6 <HAL_DSI_Init+0x166>
  hdsi->State = HAL_DSI_STATE_BUSY;

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 802c556:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 802c558:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 802c55a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 802c55c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 802c55e:	9200      	str	r2, [sp, #0]
 802c560:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 802c564:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 802c568:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 802c56c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 802c570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802c574:	9300      	str	r3, [sp, #0]
 802c576:	9b00      	ldr	r3, [sp, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802c578:	f7ff fb74 	bl	802bc64 <HAL_GetTick>
 802c57c:	4606      	mov	r6, r0

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 802c57e:	e006      	b.n	802c58e <HAL_DSI_Init+0x4e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 802c580:	f7ff fb70 	bl	802bc64 <HAL_GetTick>
 802c584:	1b83      	subs	r3, r0, r6
 802c586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c58a:	f200 8089 	bhi.w	802c6a0 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 802c58e:	6823      	ldr	r3, [r4, #0]
 802c590:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 802c594:	04d1      	lsls	r1, r2, #19
 802c596:	d5f3      	bpl.n	802c580 <HAL_DSI_Init+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 802c598:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 802c59c:	68a8      	ldr	r0, [r5, #8]
 802c59e:	e9d5 6200 	ldrd	r6, r2, [r5]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 802c5a2:	f421 315e 	bic.w	r1, r1, #227328	; 0x37800
 802c5a6:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
 802c5aa:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 802c5ae:	02d2      	lsls	r2, r2, #11
 802c5b0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 802c5b4:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 802c5b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 802c5bc:	430a      	orrs	r2, r1

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 802c5be:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 802c5c0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 802c5c4:	9101      	str	r1, [sp, #4]
 802c5c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 802c5ca:	f042 0201 	orr.w	r2, r2, #1
 802c5ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 802c5d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 802c5d6:	f003 0301 	and.w	r3, r3, #1
 802c5da:	9301      	str	r3, [sp, #4]
 802c5dc:	9b01      	ldr	r3, [sp, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 802c5de:	f7ff fb41 	bl	802bc64 <HAL_GetTick>
 802c5e2:	4606      	mov	r6, r0

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 802c5e4:	e005      	b.n	802c5f2 <HAL_DSI_Init+0xb2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 802c5e6:	f7ff fb3d 	bl	802bc64 <HAL_GetTick>
 802c5ea:	1b80      	subs	r0, r0, r6
 802c5ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802c5f0:	d856      	bhi.n	802c6a0 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 802c5f2:	6823      	ldr	r3, [r4, #0]
 802c5f4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 802c5f8:	05d2      	lsls	r2, r2, #23
 802c5fa:	d5f4      	bpl.n	802c5e6 <HAL_DSI_Init+0xa6>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 802c5fc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 802c600:	6860      	ldr	r0, [r4, #4]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c602:	682f      	ldr	r7, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 802c604:	f041 0106 	orr.w	r1, r1, #6
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 802c608:	e9d4 c602 	ldrd	ip, r6, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 802c60c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 802c610:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 802c614:	f021 0103 	bic.w	r1, r1, #3
 802c618:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 802c61c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 802c620:	4302      	orrs	r2, r0
 802c622:	f042 0201 	orr.w	r2, r2, #1
 802c626:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 802c62a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c62e:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 802c630:	f021 0103 	bic.w	r1, r1, #3
 802c634:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 802c638:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 802c63c:	4330      	orrs	r0, r6
 802c63e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 802c642:	6898      	ldr	r0, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c644:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 802c646:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 802c64a:	6098      	str	r0, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 802c64c:	6899      	ldr	r1, [r3, #8]
 802c64e:	ea41 010c 	orr.w	r1, r1, ip
 802c652:	6099      	str	r1, [r3, #8]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 802c654:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c658:	4915      	ldr	r1, [pc, #84]	; (802c6b0 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 802c65a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 802c65e:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c662:	2a01      	cmp	r2, #1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 802c664:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c668:	bf38      	it	cc
 802c66a:	2201      	movcc	r2, #1
 802c66c:	f006 0603 	and.w	r6, r6, #3
 802c670:	fb01 f202 	mul.w	r2, r1, r2
 802c674:	f44f 55fa 	mov.w	r5, #8000	; 0x1f40

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 802c678:	2100      	movs	r1, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 802c67a:	fb05 f507 	mul.w	r5, r5, r7
 802c67e:	40b2      	lsls	r2, r6
 802c680:	fbb2 f2f5 	udiv	r2, r2, r5

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 802c684:	2501      	movs	r5, #1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 802c686:	4302      	orrs	r2, r0

  return HAL_OK;
 802c688:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 802c68a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 802c68e:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 802c692:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 802c696:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 802c698:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 802c69a:	7465      	strb	r5, [r4, #17]
}
 802c69c:	b003      	add	sp, #12
 802c69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 802c6a0:	2003      	movs	r0, #3
}
 802c6a2:	b003      	add	sp, #12
 802c6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 802c6a6:	f7fd fb97 	bl	8029dd8 <HAL_DSI_MspInit>
 802c6aa:	e754      	b.n	802c556 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 802c6ac:	2001      	movs	r0, #1
}
 802c6ae:	4770      	bx	lr
 802c6b0:	003d0900 	.word	0x003d0900

0802c6b4 <HAL_DSI_MspDeInit>:
 802c6b4:	4770      	bx	lr
 802c6b6:	bf00      	nop

0802c6b8 <HAL_DSI_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 802c6b8:	2800      	cmp	r0, #0
 802c6ba:	d045      	beq.n	802c748 <HAL_DSI_DeInit+0x90>
{
 802c6bc:	b530      	push	{r4, r5, lr}
 802c6be:	b085      	sub	sp, #20

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 802c6c0:	6803      	ldr	r3, [r0, #0]
 802c6c2:	2400      	movs	r4, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 802c6c4:	2203      	movs	r2, #3
 802c6c6:	7442      	strb	r2, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 802c6c8:	9400      	str	r4, [sp, #0]
 802c6ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802c6ce:	f022 0208 	bic.w	r2, r2, #8
 802c6d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 802c6d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 802c6da:	f002 0208 	and.w	r2, r2, #8
 802c6de:	9200      	str	r2, [sp, #0]
 802c6e0:	9a00      	ldr	r2, [sp, #0]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 802c6e2:	9401      	str	r4, [sp, #4]
 802c6e4:	685a      	ldr	r2, [r3, #4]
 802c6e6:	f022 0201 	bic.w	r2, r2, #1
 802c6ea:	605a      	str	r2, [r3, #4]
 802c6ec:	685a      	ldr	r2, [r3, #4]
 802c6ee:	f002 0201 	and.w	r2, r2, #1
 802c6f2:	9201      	str	r2, [sp, #4]
 802c6f4:	9a01      	ldr	r2, [sp, #4]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 802c6f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 802c6fa:	f022 0206 	bic.w	r2, r2, #6
 802c6fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 802c702:	9402      	str	r4, [sp, #8]
 802c704:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 802c708:	f022 0201 	bic.w	r2, r2, #1
 802c70c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 802c710:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 802c714:	f002 0201 	and.w	r2, r2, #1
 802c718:	9202      	str	r2, [sp, #8]
 802c71a:	9a02      	ldr	r2, [sp, #8]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 802c71c:	9403      	str	r4, [sp, #12]
 802c71e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 802c722:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 802c726:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 802c72a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 802c72e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802c732:	9303      	str	r3, [sp, #12]
 802c734:	4605      	mov	r5, r0
 802c736:	9b03      	ldr	r3, [sp, #12]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 802c738:	f7ff ffbc 	bl	802c6b4 <HAL_DSI_MspDeInit>
  hdsi->State = HAL_DSI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 802c73c:	4620      	mov	r0, r4
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 802c73e:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 802c740:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 802c742:	746c      	strb	r4, [r5, #17]
}
 802c744:	b005      	add	sp, #20
 802c746:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 802c748:	2001      	movs	r0, #1
}
 802c74a:	4770      	bx	lr

0802c74c <HAL_DSI_ErrorCallback>:
 802c74c:	4770      	bx	lr
 802c74e:	bf00      	nop

0802c750 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 802c750:	b538      	push	{r3, r4, r5, lr}
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 802c752:	6803      	ldr	r3, [r0, #0]
 802c754:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 802c758:	07d1      	lsls	r1, r2, #31
{
 802c75a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 802c75c:	d503      	bpl.n	802c766 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 802c75e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 802c762:	07d2      	lsls	r2, r2, #31
 802c764:	d462      	bmi.n	802c82c <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 802c766:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 802c76a:	0795      	lsls	r5, r2, #30
 802c76c:	d503      	bpl.n	802c776 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 802c76e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 802c772:	0790      	lsls	r0, r2, #30
 802c774:	d44f      	bmi.n	802c816 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 802c776:	69a3      	ldr	r3, [r4, #24]
 802c778:	2b00      	cmp	r3, #0
 802c77a:	d04b      	beq.n	802c814 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 802c77c:	6821      	ldr	r1, [r4, #0]
 802c77e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 802c782:	f8d1 50c4 	ldr.w	r5, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 802c786:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 802c78a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 802c78e:	402a      	ands	r2, r5

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 802c790:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 802c792:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 802c794:	b119      	cbz	r1, 802c79e <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 802c796:	6961      	ldr	r1, [r4, #20]
 802c798:	f041 0101 	orr.w	r1, r1, #1
 802c79c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 802c79e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 802c7a2:	d003      	beq.n	802c7ac <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 802c7a4:	6962      	ldr	r2, [r4, #20]
 802c7a6:	f042 0202 	orr.w	r2, r2, #2
 802c7aa:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 802c7ac:	07d9      	lsls	r1, r3, #31
 802c7ae:	d503      	bpl.n	802c7b8 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 802c7b0:	6962      	ldr	r2, [r4, #20]
 802c7b2:	f042 0204 	orr.w	r2, r2, #4
 802c7b6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 802c7b8:	079a      	lsls	r2, r3, #30
 802c7ba:	d503      	bpl.n	802c7c4 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 802c7bc:	6962      	ldr	r2, [r4, #20]
 802c7be:	f042 0208 	orr.w	r2, r2, #8
 802c7c2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 802c7c4:	f013 0f0c 	tst.w	r3, #12
 802c7c8:	d003      	beq.n	802c7d2 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 802c7ca:	6962      	ldr	r2, [r4, #20]
 802c7cc:	f042 0210 	orr.w	r2, r2, #16
 802c7d0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 802c7d2:	06dd      	lsls	r5, r3, #27
 802c7d4:	d503      	bpl.n	802c7de <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 802c7d6:	6962      	ldr	r2, [r4, #20]
 802c7d8:	f042 0220 	orr.w	r2, r2, #32
 802c7dc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 802c7de:	0698      	lsls	r0, r3, #26
 802c7e0:	d503      	bpl.n	802c7ea <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 802c7e2:	6962      	ldr	r2, [r4, #20]
 802c7e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802c7e8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 802c7ea:	0659      	lsls	r1, r3, #25
 802c7ec:	d503      	bpl.n	802c7f6 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 802c7ee:	6962      	ldr	r2, [r4, #20]
 802c7f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802c7f4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 802c7f6:	061a      	lsls	r2, r3, #24
 802c7f8:	d503      	bpl.n	802c802 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 802c7fa:	6962      	ldr	r2, [r4, #20]
 802c7fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c800:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 802c802:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 802c806:	d003      	beq.n	802c810 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 802c808:	6963      	ldr	r3, [r4, #20]
 802c80a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802c80e:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 802c810:	6963      	ldr	r3, [r4, #20]
 802c812:	b93b      	cbnz	r3, 802c824 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 802c814:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 802c816:	2202      	movs	r2, #2
 802c818:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 802c81c:	4620      	mov	r0, r4
 802c81e:	f7fd faf1 	bl	8029e04 <HAL_DSI_EndOfRefreshCallback>
 802c822:	e7a8      	b.n	802c776 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 802c824:	4620      	mov	r0, r4
 802c826:	f7ff ff91 	bl	802c74c <HAL_DSI_ErrorCallback>
}
 802c82a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 802c82c:	2201      	movs	r2, #1
 802c82e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 802c832:	f7fd fadd 	bl	8029df0 <HAL_DSI_TearingEffectCallback>
 802c836:	6823      	ldr	r3, [r4, #0]
 802c838:	e795      	b.n	802c766 <HAL_DSI_IRQHandler+0x16>
 802c83a:	bf00      	nop

0802c83c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 802c83c:	7c03      	ldrb	r3, [r0, #16]
 802c83e:	2b01      	cmp	r3, #1
 802c840:	d06d      	beq.n	802c91e <HAL_DSI_ConfigAdaptedCommandMode+0xe2>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 802c842:	6803      	ldr	r3, [r0, #0]
{
 802c844:	b4f0      	push	{r4, r5, r6, r7}
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 802c846:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 802c848:	680f      	ldr	r7, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 802c84a:	f045 0501 	orr.w	r5, r5, #1

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 802c84e:	e9d1 6206 	ldrd	r6, r2, [r1, #24]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 802c852:	635d      	str	r5, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 802c854:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
 802c858:	f025 0501 	bic.w	r5, r5, #1
 802c85c:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 802c860:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
 802c864:	f045 0501 	orr.w	r5, r5, #1
 802c868:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 802c86c:	68dd      	ldr	r5, [r3, #12]
 802c86e:	f025 0503 	bic.w	r5, r5, #3
 802c872:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 802c874:	4604      	mov	r4, r0
 802c876:	68d8      	ldr	r0, [r3, #12]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 802c878:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 802c87a:	4338      	orrs	r0, r7
 802c87c:	60d8      	str	r0, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 802c87e:	6958      	ldr	r0, [r3, #20]
 802c880:	f020 0007 	bic.w	r0, r0, #7
 802c884:	6158      	str	r0, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 802c886:	6958      	ldr	r0, [r3, #20]
 802c888:	4332      	orrs	r2, r6
 802c88a:	432a      	orrs	r2, r5
 802c88c:	4302      	orrs	r2, r0
 802c88e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 802c890:	691d      	ldr	r5, [r3, #16]
 802c892:	f025 050f 	bic.w	r5, r5, #15
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 802c896:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 802c89a:	611d      	str	r5, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 802c89c:	691d      	ldr	r5, [r3, #16]
 802c89e:	4315      	orrs	r5, r2
 802c8a0:	611d      	str	r5, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 802c8a2:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
 802c8a6:	f025 050e 	bic.w	r5, r5, #14
 802c8aa:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 802c8ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 802c8b2:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 802c8b6:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 802c8ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 802c8bc:	0c12      	lsrs	r2, r2, #16
 802c8be:	0412      	lsls	r2, r2, #16
 802c8c0:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 802c8c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 802c8c4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 802c8c6:	4332      	orrs	r2, r6
 802c8c8:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 802c8ca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 802c8ce:	6a0e      	ldr	r6, [r1, #32]
 802c8d0:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 802c8d4:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 802c8d8:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 802c8dc:	432a      	orrs	r2, r5
 802c8de:	433a      	orrs	r2, r7
 802c8e0:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 802c8e4:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 802c8e6:	4332      	orrs	r2, r6
 802c8e8:	432a      	orrs	r2, r5
 802c8ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 802c8ee:	6e99      	ldr	r1, [r3, #104]	; 0x68
 802c8f0:	f021 0101 	bic.w	r1, r1, #1
 802c8f4:	6699      	str	r1, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 802c8f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 802c8f8:	4302      	orrs	r2, r0
 802c8fa:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 802c8fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 802c900:	f042 0201 	orr.w	r2, r2, #1
 802c904:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 802c908:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802c90c:	2100      	movs	r1, #0
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 802c90e:	f042 0202 	orr.w	r2, r2, #2
 802c912:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  __HAL_UNLOCK(hdsi);
 802c916:	7421      	strb	r1, [r4, #16]

  return HAL_OK;
 802c918:	4608      	mov	r0, r1
}
 802c91a:	bcf0      	pop	{r4, r5, r6, r7}
 802c91c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 802c91e:	2002      	movs	r0, #2
}
 802c920:	4770      	bx	lr
 802c922:	bf00      	nop

0802c924 <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 802c924:	7c03      	ldrb	r3, [r0, #16]
 802c926:	2b01      	cmp	r3, #1
 802c928:	d02d      	beq.n	802c986 <HAL_DSI_ConfigCommand+0x62>
{
 802c92a:	b4f0      	push	{r4, r5, r6, r7}
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 802c92c:	e9d1 3600 	ldrd	r3, r6, [r1]
 802c930:	4602      	mov	r2, r0
                           LPCmd->LPGenShortWriteOneP | \
                           LPCmd->LPGenShortWriteTwoP | \
 802c932:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 802c936:	4333      	orrs	r3, r6
                           LPCmd->LPGenShortReadNoP   | \
 802c938:	690c      	ldr	r4, [r1, #16]
                           LPCmd->LPGenShortWriteOneP | \
 802c93a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
                           LPCmd->LPGenShortReadTwoP  | \
 802c93c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
                           LPCmd->LPGenShortWriteTwoP | \
 802c940:	4303      	orrs	r3, r0
                           LPCmd->LPGenShortReadNoP   | \
 802c942:	4323      	orrs	r3, r4
                           LPCmd->LPGenShortReadOneP  | \
 802c944:	4333      	orrs	r3, r6
                           LPCmd->LPGenLongWrite      | \
                           LPCmd->LPDcsShortWriteNoP  | \
 802c946:	e9d1 6407 	ldrd	r6, r4, [r1, #28]
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 802c94a:	6810      	ldr	r0, [r2, #0]
                           LPCmd->LPGenShortReadTwoP  | \
 802c94c:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 802c94e:	6e87      	ldr	r7, [r0, #104]	; 0x68
 802c950:	4d0e      	ldr	r5, [pc, #56]	; (802c98c <HAL_DSI_ConfigCommand+0x68>)
                           LPCmd->LPGenLongWrite      | \
 802c952:	4333      	orrs	r3, r6
                           LPCmd->LPDcsShortWriteNoP  | \
 802c954:	4323      	orrs	r3, r4
                           LPCmd->LPDcsShortWriteOneP | \
 802c956:	6a4c      	ldr	r4, [r1, #36]	; 0x24
                           LPCmd->LPDcsShortReadNoP   | \
                           LPCmd->LPDcsLongWrite      | \
 802c958:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 802c95a:	403d      	ands	r5, r7
                           LPCmd->LPDcsShortReadNoP   | \
 802c95c:	6a8f      	ldr	r7, [r1, #40]	; 0x28
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 802c95e:	6685      	str	r5, [r0, #104]	; 0x68
                           LPCmd->LPDcsShortWriteOneP | \
 802c960:	4323      	orrs	r3, r4
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 802c962:	6e85      	ldr	r5, [r0, #104]	; 0x68
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 802c964:	6b0c      	ldr	r4, [r1, #48]	; 0x30
                           LPCmd->LPDcsShortReadNoP   | \
 802c966:	433b      	orrs	r3, r7
                           LPCmd->LPDcsLongWrite      | \
 802c968:	4333      	orrs	r3, r6
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 802c96a:	432b      	orrs	r3, r5
 802c96c:	6683      	str	r3, [r0, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 802c96e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 802c970:	f021 0102 	bic.w	r1, r1, #2
 802c974:	6681      	str	r1, [r0, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 802c976:	6e83      	ldr	r3, [r0, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802c978:	2100      	movs	r1, #0
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 802c97a:	4323      	orrs	r3, r4
 802c97c:	6683      	str	r3, [r0, #104]	; 0x68
  __HAL_UNLOCK(hdsi);
 802c97e:	7411      	strb	r1, [r2, #16]

  return HAL_OK;
 802c980:	4608      	mov	r0, r1
}
 802c982:	bcf0      	pop	{r4, r5, r6, r7}
 802c984:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 802c986:	2002      	movs	r0, #2
}
 802c988:	4770      	bx	lr
 802c98a:	bf00      	nop
 802c98c:	fef080ff 	.word	0xfef080ff

0802c990 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 802c990:	7c02      	ldrb	r2, [r0, #16]
 802c992:	2a01      	cmp	r2, #1
 802c994:	d00f      	beq.n	802c9b6 <HAL_DSI_ConfigFlowControl+0x26>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 802c996:	6802      	ldr	r2, [r0, #0]
 802c998:	4603      	mov	r3, r0
 802c99a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 802c99c:	f020 001f 	bic.w	r0, r0, #31
{
 802c9a0:	b410      	push	{r4}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 802c9a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 802c9a4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802c9a6:	2400      	movs	r4, #0
  hdsi->Instance->PCR |= FlowControl;
 802c9a8:	4301      	orrs	r1, r0
 802c9aa:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 802c9ac:	741c      	strb	r4, [r3, #16]

  return HAL_OK;
 802c9ae:	4620      	mov	r0, r4
}
 802c9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c9b4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 802c9b6:	2002      	movs	r0, #2
}
 802c9b8:	4770      	bx	lr
 802c9ba:	bf00      	nop

0802c9bc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 802c9bc:	7c03      	ldrb	r3, [r0, #16]
 802c9be:	2b01      	cmp	r3, #1
 802c9c0:	d01d      	beq.n	802c9fe <HAL_DSI_Start+0x42>
{
 802c9c2:	b082      	sub	sp, #8

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 802c9c4:	6802      	ldr	r2, [r0, #0]
 802c9c6:	2300      	movs	r3, #0
 802c9c8:	9300      	str	r3, [sp, #0]
 802c9ca:	6851      	ldr	r1, [r2, #4]
 802c9cc:	f041 0101 	orr.w	r1, r1, #1
 802c9d0:	6051      	str	r1, [r2, #4]
 802c9d2:	6851      	ldr	r1, [r2, #4]
 802c9d4:	f001 0101 	and.w	r1, r1, #1
 802c9d8:	9100      	str	r1, [sp, #0]
 802c9da:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 802c9dc:	9301      	str	r3, [sp, #4]
 802c9de:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 802c9e2:	f041 0108 	orr.w	r1, r1, #8
 802c9e6:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 802c9ea:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802c9ee:	7403      	strb	r3, [r0, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 802c9f0:	f002 0208 	and.w	r2, r2, #8
 802c9f4:	9201      	str	r2, [sp, #4]
 802c9f6:	9a01      	ldr	r2, [sp, #4]

  return HAL_OK;
 802c9f8:	4618      	mov	r0, r3
}
 802c9fa:	b002      	add	sp, #8
 802c9fc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 802c9fe:	2002      	movs	r0, #2
}
 802ca00:	4770      	bx	lr
 802ca02:	bf00      	nop

0802ca04 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 802ca04:	7c02      	ldrb	r2, [r0, #16]
 802ca06:	2a01      	cmp	r2, #1
{
 802ca08:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 802ca0a:	d00a      	beq.n	802ca22 <HAL_DSI_Refresh+0x1e>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 802ca0c:	6800      	ldr	r0, [r0, #0]
 802ca0e:	f8d0 2404 	ldr.w	r2, [r0, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802ca12:	2100      	movs	r1, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 802ca14:	f042 0204 	orr.w	r2, r2, #4
 802ca18:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404

  return HAL_OK;
 802ca1c:	4608      	mov	r0, r1
  __HAL_UNLOCK(hdsi);
 802ca1e:	7419      	strb	r1, [r3, #16]
  return HAL_OK;
 802ca20:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 802ca22:	2002      	movs	r0, #2
}
 802ca24:	4770      	bx	lr
 802ca26:	bf00      	nop

0802ca28 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 802ca28:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 802ca2a:	7c05      	ldrb	r5, [r0, #16]
 802ca2c:	2d01      	cmp	r5, #1
{
 802ca2e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 802ca30:	d00a      	beq.n	802ca48 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 802ca32:	9e06      	ldr	r6, [sp, #24]
 802ca34:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 802ca36:	2501      	movs	r5, #1
 802ca38:	7405      	strb	r5, [r0, #16]
 802ca3a:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 802ca3c:	f7ff fd5e 	bl	802c4fc <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802ca40:	2300      	movs	r3, #0
 802ca42:	7423      	strb	r3, [r4, #16]

  return status;
}
 802ca44:	b002      	add	sp, #8
 802ca46:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 802ca48:	2002      	movs	r0, #2
}
 802ca4a:	b002      	add	sp, #8
 802ca4c:	bd70      	pop	{r4, r5, r6, pc}
 802ca4e:	bf00      	nop

0802ca50 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 802ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ca54:	4607      	mov	r7, r0
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 802ca56:	7c00      	ldrb	r0, [r0, #16]
{
 802ca58:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 802ca5a:	2801      	cmp	r0, #1
 802ca5c:	d05c      	beq.n	802cb18 <HAL_DSI_LongWrite+0xc8>
 802ca5e:	4698      	mov	r8, r3
 802ca60:	2301      	movs	r3, #1
 802ca62:	743b      	strb	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 802ca64:	4689      	mov	r9, r1
 802ca66:	4692      	mov	sl, r2
 802ca68:	f7ff f8fc 	bl	802bc64 <HAL_GetTick>
 802ca6c:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 802ca6e:	e005      	b.n	802ca7c <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 802ca70:	f7ff f8f8 	bl	802bc64 <HAL_GetTick>
 802ca74:	1b40      	subs	r0, r0, r5
 802ca76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802ca7a:	d849      	bhi.n	802cb10 <HAL_DSI_LongWrite+0xc0>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 802ca7c:	6839      	ldr	r1, [r7, #0]
 802ca7e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 802ca80:	f014 0401 	ands.w	r4, r4, #1
 802ca84:	d0f4      	beq.n	802ca70 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 802ca86:	4640      	mov	r0, r8
 802ca88:	2803      	cmp	r0, #3
 802ca8a:	bf28      	it	cs
 802ca8c:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 802ca8e:	f1b8 0f00 	cmp.w	r8, #0
 802ca92:	d044      	beq.n	802cb1e <HAL_DSI_LongWrite+0xce>
 802ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ca96:	1e5c      	subs	r4, r3, #1
 802ca98:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 802ca9a:	3301      	adds	r3, #1
 802ca9c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 802caa0:	00dd      	lsls	r5, r3, #3
 802caa2:	40aa      	lsls	r2, r5
  for (count = 0U; count < nbBytes; count++)
 802caa4:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 802caa6:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 802caaa:	d3f6      	bcc.n	802ca9a <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 802caac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 802caae:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 802cab0:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 802cab2:	ebb8 0000 	subs.w	r0, r8, r0
 802cab6:	d017      	beq.n	802cae8 <HAL_DSI_LongWrite+0x98>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 802cab8:	2804      	cmp	r0, #4
 802caba:	4684      	mov	ip, r0
 802cabc:	f04f 0500 	mov.w	r5, #0
 802cac0:	bf28      	it	cs
 802cac2:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
 802cac6:	eb06 020c 	add.w	r2, r6, ip
    fifoword = 0U;
 802caca:	462b      	mov	r3, r5
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 802cacc:	f816 4b01 	ldrb.w	r4, [r6], #1
 802cad0:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 802cad2:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 802cad4:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 802cad8:	f105 0508 	add.w	r5, r5, #8
 802cadc:	d1f6      	bne.n	802cacc <HAL_DSI_LongWrite+0x7c>
  while (uicounter != 0U)
 802cade:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;
 802cae2:	670b      	str	r3, [r1, #112]	; 0x70

    uicounter -= nbBytes;
    pparams += nbBytes;
 802cae4:	4616      	mov	r6, r2
  while (uicounter != 0U)
 802cae6:	d1e7      	bne.n	802cab8 <HAL_DSI_LongWrite+0x68>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 802cae8:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 802caec:	ea4f 2208 	mov.w	r2, r8, lsl #8
 802caf0:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
 802caf4:	fa1f f982 	uxth.w	r9, r2
 802caf8:	f402 087f 	and.w	r8, r2, #16711680	; 0xff0000
 802cafc:	ea43 0309 	orr.w	r3, r3, r9
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 802cb00:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 802cb02:	ea43 0308 	orr.w	r3, r3, r8
 802cb06:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 802cb08:	743a      	strb	r2, [r7, #16]

  return HAL_OK;
 802cb0a:	4610      	mov	r0, r2
}
 802cb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_UNLOCK(hdsi);
 802cb10:	743c      	strb	r4, [r7, #16]
      return HAL_TIMEOUT;
 802cb12:	2003      	movs	r0, #3
}
 802cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 802cb18:	2002      	movs	r0, #2
}
 802cb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 802cb1e:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 802cb20:	e7e2      	b.n	802cae8 <HAL_DSI_LongWrite+0x98>
 802cb22:	bf00      	nop

0802cb24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb28:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802cb2a:	f8df a240 	ldr.w	sl, [pc, #576]	; 802cd6c <HAL_GPIO_Init+0x248>
 802cb2e:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802cb30:	f8df c23c 	ldr.w	ip, [pc, #572]	; 802cd70 <HAL_GPIO_Init+0x24c>
{
 802cb34:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 802cb36:	2300      	movs	r3, #0
 802cb38:	46d9      	mov	r9, fp
 802cb3a:	e003      	b.n	802cb44 <HAL_GPIO_Init+0x20>
 802cb3c:	3301      	adds	r3, #1
 802cb3e:	2b10      	cmp	r3, #16
 802cb40:	f000 8091 	beq.w	802cc66 <HAL_GPIO_Init+0x142>
    ioposition = 0x01U << position;
 802cb44:	2201      	movs	r2, #1
 802cb46:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802cb48:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 802cb4c:	438a      	bics	r2, r1
 802cb4e:	d1f5      	bne.n	802cb3c <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802cb50:	f8d9 5004 	ldr.w	r5, [r9, #4]
 802cb54:	f005 0203 	and.w	r2, r5, #3
 802cb58:	1e54      	subs	r4, r2, #1
 802cb5a:	2c01      	cmp	r4, #1
 802cb5c:	ea4f 0743 	mov.w	r7, r3, lsl #1
 802cb60:	f240 8084 	bls.w	802cc6c <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802cb64:	2a03      	cmp	r2, #3
 802cb66:	f040 80c2 	bne.w	802ccee <HAL_GPIO_Init+0x1ca>
 802cb6a:	40ba      	lsls	r2, r7
 802cb6c:	43d4      	mvns	r4, r2
 802cb6e:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 802cb70:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802cb72:	9c00      	ldr	r4, [sp, #0]
 802cb74:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802cb76:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802cb78:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 802cb7a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802cb7c:	d5de      	bpl.n	802cb3c <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802cb7e:	2200      	movs	r2, #0
 802cb80:	9203      	str	r2, [sp, #12]
 802cb82:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 802cb86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802cb8a:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 802cb8e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 802cb92:	f023 0403 	bic.w	r4, r3, #3
 802cb96:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 802cb9a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 802cb9e:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 802cba2:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802cba4:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802cba8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 802cbaa:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802cbac:	00b6      	lsls	r6, r6, #2
 802cbae:	220f      	movs	r2, #15
 802cbb0:	40b2      	lsls	r2, r6
 802cbb2:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802cbb6:	4f64      	ldr	r7, [pc, #400]	; (802cd48 <HAL_GPIO_Init+0x224>)
 802cbb8:	42b8      	cmp	r0, r7
 802cbba:	d028      	beq.n	802cc0e <HAL_GPIO_Init+0xea>
 802cbbc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 802cbc0:	42b8      	cmp	r0, r7
 802cbc2:	f000 8099 	beq.w	802ccf8 <HAL_GPIO_Init+0x1d4>
 802cbc6:	4f61      	ldr	r7, [pc, #388]	; (802cd4c <HAL_GPIO_Init+0x228>)
 802cbc8:	42b8      	cmp	r0, r7
 802cbca:	f000 809a 	beq.w	802cd02 <HAL_GPIO_Init+0x1de>
 802cbce:	4f60      	ldr	r7, [pc, #384]	; (802cd50 <HAL_GPIO_Init+0x22c>)
 802cbd0:	42b8      	cmp	r0, r7
 802cbd2:	f000 809b 	beq.w	802cd0c <HAL_GPIO_Init+0x1e8>
 802cbd6:	4f5f      	ldr	r7, [pc, #380]	; (802cd54 <HAL_GPIO_Init+0x230>)
 802cbd8:	42b8      	cmp	r0, r7
 802cbda:	f000 809c 	beq.w	802cd16 <HAL_GPIO_Init+0x1f2>
 802cbde:	4f5e      	ldr	r7, [pc, #376]	; (802cd58 <HAL_GPIO_Init+0x234>)
 802cbe0:	42b8      	cmp	r0, r7
 802cbe2:	f000 80a2 	beq.w	802cd2a <HAL_GPIO_Init+0x206>
 802cbe6:	4f5d      	ldr	r7, [pc, #372]	; (802cd5c <HAL_GPIO_Init+0x238>)
 802cbe8:	42b8      	cmp	r0, r7
 802cbea:	f000 80a3 	beq.w	802cd34 <HAL_GPIO_Init+0x210>
 802cbee:	4f5c      	ldr	r7, [pc, #368]	; (802cd60 <HAL_GPIO_Init+0x23c>)
 802cbf0:	42b8      	cmp	r0, r7
 802cbf2:	f000 8095 	beq.w	802cd20 <HAL_GPIO_Init+0x1fc>
 802cbf6:	4f5b      	ldr	r7, [pc, #364]	; (802cd64 <HAL_GPIO_Init+0x240>)
 802cbf8:	42b8      	cmp	r0, r7
 802cbfa:	f000 80a0 	beq.w	802cd3e <HAL_GPIO_Init+0x21a>
 802cbfe:	4f5a      	ldr	r7, [pc, #360]	; (802cd68 <HAL_GPIO_Init+0x244>)
 802cc00:	42b8      	cmp	r0, r7
 802cc02:	bf0c      	ite	eq
 802cc04:	2709      	moveq	r7, #9
 802cc06:	270a      	movne	r7, #10
 802cc08:	fa07 f606 	lsl.w	r6, r7, r6
 802cc0c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 802cc0e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 802cc10:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 802cc14:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802cc18:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 802cc1a:	bf54      	ite	pl
 802cc1c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 802cc1e:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 802cc22:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 802cc26:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802cc2a:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 802cc2c:	bf54      	ite	pl
 802cc2e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 802cc30:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 802cc34:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802cc38:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802cc3c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 802cc3e:	bf54      	ite	pl
 802cc40:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 802cc42:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 802cc46:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 802cc4a:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802cc4e:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 802cc50:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 802cc54:	bf54      	ite	pl
 802cc56:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 802cc58:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 802cc5c:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 802cc5e:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802cc62:	f47f af6f 	bne.w	802cb44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 802cc66:	b005      	add	sp, #20
 802cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 802cc6c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802cc6e:	2403      	movs	r4, #3
 802cc70:	40bc      	lsls	r4, r7
 802cc72:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 802cc76:	f8d9 600c 	ldr.w	r6, [r9, #12]
 802cc7a:	40be      	lsls	r6, r7
 802cc7c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 802cc80:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 802cc82:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802cc86:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802cc8a:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802cc8e:	409e      	lsls	r6, r3
 802cc90:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802cc94:	43e4      	mvns	r4, r4
 802cc96:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 802cc98:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 802cc9a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802cc9c:	9c00      	ldr	r4, [sp, #0]
 802cc9e:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802cca2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 802cca6:	40be      	lsls	r6, r7
 802cca8:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802ccac:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 802ccae:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802ccb0:	d001      	beq.n	802ccb6 <HAL_GPIO_Init+0x192>
 802ccb2:	40ba      	lsls	r2, r7
 802ccb4:	e75c      	b.n	802cb70 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 802ccb6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 802ccba:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802ccbe:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 802ccc2:	f8d8 4020 	ldr.w	r4, [r8, #32]
 802ccc6:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802ccc8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 802cccc:	240f      	movs	r4, #15
 802ccce:	fa04 f60e 	lsl.w	r6, r4, lr
 802ccd2:	9c01      	ldr	r4, [sp, #4]
 802ccd4:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802ccd8:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802ccdc:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802ccde:	fa04 f60e 	lsl.w	r6, r4, lr
 802cce2:	9c01      	ldr	r4, [sp, #4]
 802cce4:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 802cce6:	40ba      	lsls	r2, r7
 802cce8:	f8c8 6020 	str.w	r6, [r8, #32]
 802ccec:	e740      	b.n	802cb70 <HAL_GPIO_Init+0x4c>
 802ccee:	2403      	movs	r4, #3
 802ccf0:	40bc      	lsls	r4, r7
 802ccf2:	43e4      	mvns	r4, r4
 802ccf4:	9400      	str	r4, [sp, #0]
 802ccf6:	e7d0      	b.n	802cc9a <HAL_GPIO_Init+0x176>
 802ccf8:	2701      	movs	r7, #1
 802ccfa:	fa07 f606 	lsl.w	r6, r7, r6
 802ccfe:	4332      	orrs	r2, r6
 802cd00:	e785      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd02:	2702      	movs	r7, #2
 802cd04:	fa07 f606 	lsl.w	r6, r7, r6
 802cd08:	4332      	orrs	r2, r6
 802cd0a:	e780      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd0c:	2703      	movs	r7, #3
 802cd0e:	fa07 f606 	lsl.w	r6, r7, r6
 802cd12:	4332      	orrs	r2, r6
 802cd14:	e77b      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd16:	2704      	movs	r7, #4
 802cd18:	fa07 f606 	lsl.w	r6, r7, r6
 802cd1c:	4332      	orrs	r2, r6
 802cd1e:	e776      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd20:	2707      	movs	r7, #7
 802cd22:	fa07 f606 	lsl.w	r6, r7, r6
 802cd26:	4332      	orrs	r2, r6
 802cd28:	e771      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd2a:	2705      	movs	r7, #5
 802cd2c:	fa07 f606 	lsl.w	r6, r7, r6
 802cd30:	4332      	orrs	r2, r6
 802cd32:	e76c      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd34:	2706      	movs	r7, #6
 802cd36:	fa07 f606 	lsl.w	r6, r7, r6
 802cd3a:	4332      	orrs	r2, r6
 802cd3c:	e767      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd3e:	2708      	movs	r7, #8
 802cd40:	fa07 f606 	lsl.w	r6, r7, r6
 802cd44:	4332      	orrs	r2, r6
 802cd46:	e762      	b.n	802cc0e <HAL_GPIO_Init+0xea>
 802cd48:	40020000 	.word	0x40020000
 802cd4c:	40020800 	.word	0x40020800
 802cd50:	40020c00 	.word	0x40020c00
 802cd54:	40021000 	.word	0x40021000
 802cd58:	40021400 	.word	0x40021400
 802cd5c:	40021800 	.word	0x40021800
 802cd60:	40021c00 	.word	0x40021c00
 802cd64:	40022000 	.word	0x40022000
 802cd68:	40022400 	.word	0x40022400
 802cd6c:	40023800 	.word	0x40023800
 802cd70:	40013c00 	.word	0x40013c00

0802cd74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 802cd74:	6903      	ldr	r3, [r0, #16]
 802cd76:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 802cd78:	bf14      	ite	ne
 802cd7a:	2001      	movne	r0, #1
 802cd7c:	2000      	moveq	r0, #0
 802cd7e:	4770      	bx	lr

0802cd80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802cd80:	b902      	cbnz	r2, 802cd84 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802cd82:	0409      	lsls	r1, r1, #16
 802cd84:	6181      	str	r1, [r0, #24]
  }
}
 802cd86:	4770      	bx	lr

0802cd88 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 802cd88:	4770      	bx	lr
 802cd8a:	bf00      	nop

0802cd8c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802cd8c:	4a04      	ldr	r2, [pc, #16]	; (802cda0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 802cd8e:	6951      	ldr	r1, [r2, #20]
 802cd90:	4201      	tst	r1, r0
 802cd92:	d100      	bne.n	802cd96 <HAL_GPIO_EXTI_IRQHandler+0xa>
 802cd94:	4770      	bx	lr
{
 802cd96:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 802cd98:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 802cd9a:	f7ff fff5 	bl	802cd88 <HAL_GPIO_EXTI_Callback>
}
 802cd9e:	bd08      	pop	{r3, pc}
 802cda0:	40013c00 	.word	0x40013c00

0802cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 802cda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cda8:	4681      	mov	r9, r0
 802cdaa:	460e      	mov	r6, r1
 802cdac:	4617      	mov	r7, r2
 802cdae:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802cdb0:	f8d9 5000 	ldr.w	r5, [r9]
 802cdb4:	e004      	b.n	802cdc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802cdb6:	696c      	ldr	r4, [r5, #20]
 802cdb8:	0562      	lsls	r2, r4, #21
 802cdba:	d40a      	bmi.n	802cdd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802cdbc:	1c7b      	adds	r3, r7, #1
 802cdbe:	d122      	bne.n	802ce06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802cdc0:	696c      	ldr	r4, [r5, #20]
 802cdc2:	ea26 0404 	bic.w	r4, r6, r4
 802cdc6:	b2a4      	uxth	r4, r4
 802cdc8:	2c00      	cmp	r4, #0
 802cdca:	d1f4      	bne.n	802cdb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 802cdcc:	4620      	mov	r0, r4
}
 802cdce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802cdd2:	682b      	ldr	r3, [r5, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 802cdd4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802cdd6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802cdda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 802cdde:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802cde0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802cde2:	6168      	str	r0, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 802cde4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802cde8:	f889 103d 	strb.w	r1, [r9, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802cdec:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802cdf0:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 802cdf4:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802cdf8:	f043 0304 	orr.w	r3, r3, #4
 802cdfc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
      return HAL_ERROR;
 802ce00:	2001      	movs	r0, #1
}
 802ce02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802ce06:	f7fe ff2d 	bl	802bc64 <HAL_GetTick>
 802ce0a:	eba0 0008 	sub.w	r0, r0, r8
 802ce0e:	42b8      	cmp	r0, r7
 802ce10:	d801      	bhi.n	802ce16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
 802ce12:	2f00      	cmp	r7, #0
 802ce14:	d1cc      	bne.n	802cdb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 802ce16:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 802ce18:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 802ce1a:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802ce1e:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802ce22:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802ce26:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802ce2a:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802ce2e:	f043 0320 	orr.w	r3, r3, #32
 802ce32:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 802ce36:	2001      	movs	r0, #1
 802ce38:	e7c9      	b.n	802cdce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2a>
 802ce3a:	bf00      	nop

0802ce3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 802ce3c:	b530      	push	{r4, r5, lr}
 802ce3e:	4604      	mov	r4, r0
 802ce40:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802ce42:	6820      	ldr	r0, [r4, #0]
 802ce44:	6943      	ldr	r3, [r0, #20]
 802ce46:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 802ce4a:	d130      	bne.n	802ceae <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802ce4c:	6945      	ldr	r5, [r0, #20]
 802ce4e:	056d      	lsls	r5, r5, #21
 802ce50:	d41b      	bmi.n	802ce8a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 802ce52:	1c4b      	adds	r3, r1, #1
 802ce54:	d0f6      	beq.n	802ce44 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802ce56:	e9cd 1200 	strd	r1, r2, [sp]
 802ce5a:	f7fe ff03 	bl	802bc64 <HAL_GetTick>
 802ce5e:	9a01      	ldr	r2, [sp, #4]
 802ce60:	9900      	ldr	r1, [sp, #0]
 802ce62:	1a80      	subs	r0, r0, r2
 802ce64:	4288      	cmp	r0, r1
 802ce66:	d801      	bhi.n	802ce6c <I2C_WaitOnTXEFlagUntilTimeout+0x30>
 802ce68:	2900      	cmp	r1, #0
 802ce6a:	d1ea      	bne.n	802ce42 <I2C_WaitOnTXEFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 802ce6c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 802ce6e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 802ce70:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802ce72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802ce76:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802ce7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802ce7c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802ce80:	f043 0320 	orr.w	r3, r3, #32
 802ce84:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802ce86:	2001      	movs	r0, #1
 802ce88:	e00f      	b.n	802ceaa <I2C_WaitOnTXEFlagUntilTimeout+0x6e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 802ce8a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ce8c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 802ce90:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 802ce92:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 802ce94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 802ce98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802ce9c:	6c22      	ldr	r2, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ce9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802cea2:	f042 0204 	orr.w	r2, r2, #4
 802cea6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 802cea8:	2001      	movs	r0, #1
}
 802ceaa:	b003      	add	sp, #12
 802ceac:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 802ceae:	2000      	movs	r0, #0
}
 802ceb0:	b003      	add	sp, #12
 802ceb2:	bd30      	pop	{r4, r5, pc}

0802ceb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 802ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ceb6:	4606      	mov	r6, r0
 802ceb8:	460d      	mov	r5, r1
 802ceba:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 802cebc:	e008      	b.n	802ced0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 802cebe:	6962      	ldr	r2, [r4, #20]
 802cec0:	06d2      	lsls	r2, r2, #27
 802cec2:	d41b      	bmi.n	802cefc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802cec4:	f7fe fece 	bl	802bc64 <HAL_GetTick>
 802cec8:	1bc0      	subs	r0, r0, r7
 802ceca:	42a8      	cmp	r0, r5
 802cecc:	d807      	bhi.n	802cede <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 802cece:	b135      	cbz	r5, 802cede <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 802ced0:	6834      	ldr	r4, [r6, #0]
 802ced2:	6963      	ldr	r3, [r4, #20]
 802ced4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 802ced8:	d0f1      	beq.n	802cebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 802ceda:	2000      	movs	r0, #0
}
 802cedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 802cede:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 802cee0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 802cee2:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802cee4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802cee8:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802ceec:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802ceee:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802cef2:	f043 0320 	orr.w	r3, r3, #32
 802cef6:	6433      	str	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802cef8:	2001      	movs	r0, #1
}
 802cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802cefc:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 802cf00:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802cf02:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 802cf04:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802cf06:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802cf0a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 802cf0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 802cf10:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 802cf14:	6432      	str	r2, [r6, #64]	; 0x40
      return HAL_ERROR;
 802cf16:	2001      	movs	r0, #1
}
 802cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cf1a:	bf00      	nop

0802cf1c <I2C_WaitOnFlagUntilTimeout>:
{
 802cf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cf20:	460d      	mov	r5, r1
 802cf22:	4681      	mov	r9, r0
 802cf24:	4617      	mov	r7, r2
 802cf26:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802cf28:	ea4f 4811 	mov.w	r8, r1, lsr #16
 802cf2c:	f8d9 3000 	ldr.w	r3, [r9]
 802cf30:	e001      	b.n	802cf36 <I2C_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 802cf32:	1c72      	adds	r2, r6, #1
 802cf34:	d10f      	bne.n	802cf56 <I2C_WaitOnFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802cf36:	f1b8 0f01 	cmp.w	r8, #1
 802cf3a:	bf0c      	ite	eq
 802cf3c:	695c      	ldreq	r4, [r3, #20]
 802cf3e:	699c      	ldrne	r4, [r3, #24]
 802cf40:	ea25 0404 	bic.w	r4, r5, r4
 802cf44:	b2a4      	uxth	r4, r4
 802cf46:	fab4 f484 	clz	r4, r4
 802cf4a:	0964      	lsrs	r4, r4, #5
 802cf4c:	42bc      	cmp	r4, r7
 802cf4e:	d0f0      	beq.n	802cf32 <I2C_WaitOnFlagUntilTimeout+0x16>
  return HAL_OK;
 802cf50:	2000      	movs	r0, #0
}
 802cf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802cf56:	f7fe fe85 	bl	802bc64 <HAL_GetTick>
 802cf5a:	9b08      	ldr	r3, [sp, #32]
 802cf5c:	1ac0      	subs	r0, r0, r3
 802cf5e:	42b0      	cmp	r0, r6
 802cf60:	d801      	bhi.n	802cf66 <I2C_WaitOnFlagUntilTimeout+0x4a>
 802cf62:	2e00      	cmp	r6, #0
 802cf64:	d1e2      	bne.n	802cf2c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 802cf66:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 802cf68:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 802cf6a:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802cf6e:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802cf72:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802cf76:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802cf7a:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802cf7e:	f043 0320 	orr.w	r3, r3, #32
 802cf82:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802cf86:	2001      	movs	r0, #1
 802cf88:	e7e3      	b.n	802cf52 <I2C_WaitOnFlagUntilTimeout+0x36>
 802cf8a:	bf00      	nop

0802cf8c <I2C_RequestMemoryWrite>:
{
 802cf8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cf90:	f8d0 c000 	ldr.w	ip, [r0]
{
 802cf94:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cf96:	f8dc 6000 	ldr.w	r6, [ip]
{
 802cf9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802cf9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cfa0:	f446 7680 	orr.w	r6, r6, #256	; 0x100
{
 802cfa4:	4696      	mov	lr, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cfa6:	f8cc 6000 	str.w	r6, [ip]
{
 802cfaa:	460d      	mov	r5, r1
 802cfac:	4699      	mov	r9, r3
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802cfae:	f8cd 8000 	str.w	r8, [sp]
 802cfb2:	463b      	mov	r3, r7
 802cfb4:	2200      	movs	r2, #0
 802cfb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 802cfba:	4604      	mov	r4, r0
 802cfbc:	4676      	mov	r6, lr
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802cfbe:	f7ff ffad 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802cfc2:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802cfc4:	bb18      	cbnz	r0, 802d00e <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802cfc6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 802cfca:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802cfcc:	4920      	ldr	r1, [pc, #128]	; (802d050 <I2C_RequestMemoryWrite+0xc4>)
 802cfce:	4643      	mov	r3, r8
 802cfd0:	463a      	mov	r2, r7
 802cfd2:	4620      	mov	r0, r4
 802cfd4:	f7ff fee6 	bl	802cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802cfd8:	b118      	cbz	r0, 802cfe2 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 802cfda:	2001      	movs	r0, #1
}
 802cfdc:	b005      	add	sp, #20
 802cfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802cfe2:	6823      	ldr	r3, [r4, #0]
 802cfe4:	9003      	str	r0, [sp, #12]
 802cfe6:	695a      	ldr	r2, [r3, #20]
 802cfe8:	9203      	str	r2, [sp, #12]
 802cfea:	699b      	ldr	r3, [r3, #24]
 802cfec:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802cfee:	4642      	mov	r2, r8
 802cff0:	4639      	mov	r1, r7
 802cff2:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802cff4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802cff6:	f7ff ff21 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802cffa:	bb00      	cbnz	r0, 802d03e <I2C_RequestMemoryWrite+0xb2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802cffc:	f1b9 0f01 	cmp.w	r9, #1
 802d000:	d113      	bne.n	802d02a <I2C_RequestMemoryWrite+0x9e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 802d002:	6823      	ldr	r3, [r4, #0]
 802d004:	b2f6      	uxtb	r6, r6
 802d006:	611e      	str	r6, [r3, #16]
}
 802d008:	b005      	add	sp, #20
 802d00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802d00e:	681b      	ldr	r3, [r3, #0]
 802d010:	05db      	lsls	r3, r3, #23
 802d012:	d506      	bpl.n	802d022 <I2C_RequestMemoryWrite+0x96>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802d014:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 802d018:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802d01a:	6423      	str	r3, [r4, #64]	; 0x40
}
 802d01c:	b005      	add	sp, #20
 802d01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_TIMEOUT;
 802d022:	2003      	movs	r0, #3
}
 802d024:	b005      	add	sp, #20
 802d026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 802d02a:	6820      	ldr	r0, [r4, #0]
 802d02c:	0a33      	lsrs	r3, r6, #8
 802d02e:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802d030:	4642      	mov	r2, r8
 802d032:	4639      	mov	r1, r7
 802d034:	4620      	mov	r0, r4
 802d036:	f7ff ff01 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802d03a:	2800      	cmp	r0, #0
 802d03c:	d0e1      	beq.n	802d002 <I2C_RequestMemoryWrite+0x76>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802d03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d040:	2b04      	cmp	r3, #4
 802d042:	d1ca      	bne.n	802cfda <I2C_RequestMemoryWrite+0x4e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d044:	6822      	ldr	r2, [r4, #0]
 802d046:	6813      	ldr	r3, [r2, #0]
 802d048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d04c:	6013      	str	r3, [r2, #0]
 802d04e:	e7c4      	b.n	802cfda <I2C_RequestMemoryWrite+0x4e>
 802d050:	00010002 	.word	0x00010002

0802d054 <I2C_RequestMemoryRead>:
{
 802d054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d058:	6806      	ldr	r6, [r0, #0]
 802d05a:	6835      	ldr	r5, [r6, #0]
 802d05c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 802d060:	6035      	str	r5, [r6, #0]
{
 802d062:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802d064:	6837      	ldr	r7, [r6, #0]
{
 802d066:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802d06a:	4696      	mov	lr, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802d06c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802d072:	6037      	str	r7, [r6, #0]
{
 802d074:	469c      	mov	ip, r3
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d076:	9200      	str	r2, [sp, #0]
 802d078:	4643      	mov	r3, r8
{
 802d07a:	460d      	mov	r5, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d07c:	2200      	movs	r2, #0
 802d07e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 802d082:	4604      	mov	r4, r0
 802d084:	4676      	mov	r6, lr
 802d086:	4667      	mov	r7, ip
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d088:	f7ff ff48 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802d08c:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d08e:	2800      	cmp	r0, #0
 802d090:	d144      	bne.n	802d11c <I2C_RequestMemoryRead+0xc8>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802d092:	f005 02fe 	and.w	r2, r5, #254	; 0xfe
 802d096:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802d098:	492f      	ldr	r1, [pc, #188]	; (802d158 <I2C_RequestMemoryRead+0x104>)
 802d09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802d09c:	4642      	mov	r2, r8
 802d09e:	4620      	mov	r0, r4
 802d0a0:	f7ff fe80 	bl	802cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802d0a4:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802d0a6:	b118      	cbz	r0, 802d0b0 <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 802d0a8:	2001      	movs	r0, #1
}
 802d0aa:	b004      	add	sp, #16
 802d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d0b0:	6823      	ldr	r3, [r4, #0]
 802d0b2:	9003      	str	r0, [sp, #12]
 802d0b4:	695a      	ldr	r2, [r3, #20]
 802d0b6:	9203      	str	r2, [sp, #12]
 802d0b8:	699b      	ldr	r3, [r3, #24]
 802d0ba:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802d0bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d0be:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802d0c0:	4641      	mov	r1, r8
 802d0c2:	4620      	mov	r0, r4
 802d0c4:	f7ff feba 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802d0c8:	2800      	cmp	r0, #0
 802d0ca:	d131      	bne.n	802d130 <I2C_RequestMemoryRead+0xdc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802d0cc:	2f01      	cmp	r7, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 802d0ce:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802d0d0:	d137      	bne.n	802d142 <I2C_RequestMemoryRead+0xee>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 802d0d2:	b2f6      	uxtb	r6, r6
 802d0d4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802d0d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802d0d8:	4641      	mov	r1, r8
 802d0da:	4620      	mov	r0, r4
 802d0dc:	f7ff feae 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802d0e0:	bb30      	cbnz	r0, 802d130 <I2C_RequestMemoryRead+0xdc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802d0e2:	6821      	ldr	r1, [r4, #0]
 802d0e4:	680b      	ldr	r3, [r1, #0]
 802d0e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802d0ea:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d0ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802d0ee:	9100      	str	r1, [sp, #0]
 802d0f0:	4602      	mov	r2, r0
 802d0f2:	4643      	mov	r3, r8
 802d0f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802d0f8:	4620      	mov	r0, r4
 802d0fa:	f7ff ff0f 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802d0fe:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802d100:	b960      	cbnz	r0, 802d11c <I2C_RequestMemoryRead+0xc8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 802d102:	f045 0501 	orr.w	r5, r5, #1
 802d106:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802d108:	4913      	ldr	r1, [pc, #76]	; (802d158 <I2C_RequestMemoryRead+0x104>)
 802d10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802d10c:	4642      	mov	r2, r8
 802d10e:	4620      	mov	r0, r4
 802d110:	f7ff fe48 	bl	802cda4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 802d114:	3800      	subs	r0, #0
 802d116:	bf18      	it	ne
 802d118:	2001      	movne	r0, #1
 802d11a:	e7c6      	b.n	802d0aa <I2C_RequestMemoryRead+0x56>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802d11c:	681b      	ldr	r3, [r3, #0]
 802d11e:	05db      	lsls	r3, r3, #23
 802d120:	d502      	bpl.n	802d128 <I2C_RequestMemoryRead+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802d122:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d126:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 802d128:	2003      	movs	r0, #3
}
 802d12a:	b004      	add	sp, #16
 802d12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802d130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d132:	2b04      	cmp	r3, #4
 802d134:	d1b8      	bne.n	802d0a8 <I2C_RequestMemoryRead+0x54>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d136:	6822      	ldr	r2, [r4, #0]
 802d138:	6813      	ldr	r3, [r2, #0]
 802d13a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d13e:	6013      	str	r3, [r2, #0]
 802d140:	e7b2      	b.n	802d0a8 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 802d142:	0a32      	lsrs	r2, r6, #8
 802d144:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 802d146:	4641      	mov	r1, r8
 802d148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802d14a:	4620      	mov	r0, r4
 802d14c:	f7ff fe76 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802d150:	2800      	cmp	r0, #0
 802d152:	d1ed      	bne.n	802d130 <I2C_RequestMemoryRead+0xdc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 802d154:	6823      	ldr	r3, [r4, #0]
 802d156:	e7bc      	b.n	802d0d2 <I2C_RequestMemoryRead+0x7e>
 802d158:	00010002 	.word	0x00010002

0802d15c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 802d15c:	b530      	push	{r4, r5, lr}
 802d15e:	4604      	mov	r4, r0
 802d160:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802d162:	6820      	ldr	r0, [r4, #0]
 802d164:	6943      	ldr	r3, [r0, #20]
 802d166:	f013 0304 	ands.w	r3, r3, #4
 802d16a:	d130      	bne.n	802d1ce <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802d16c:	6945      	ldr	r5, [r0, #20]
 802d16e:	056d      	lsls	r5, r5, #21
 802d170:	d41b      	bmi.n	802d1aa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 802d172:	1c4b      	adds	r3, r1, #1
 802d174:	d0f6      	beq.n	802d164 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802d176:	e9cd 1200 	strd	r1, r2, [sp]
 802d17a:	f7fe fd73 	bl	802bc64 <HAL_GetTick>
 802d17e:	9a01      	ldr	r2, [sp, #4]
 802d180:	9900      	ldr	r1, [sp, #0]
 802d182:	1a80      	subs	r0, r0, r2
 802d184:	4288      	cmp	r0, r1
 802d186:	d801      	bhi.n	802d18c <I2C_WaitOnBTFFlagUntilTimeout+0x30>
 802d188:	2900      	cmp	r1, #0
 802d18a:	d1ea      	bne.n	802d162 <I2C_WaitOnBTFFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 802d18c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 802d18e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 802d190:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802d192:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802d196:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802d19a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802d19c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802d1a0:	f043 0320 	orr.w	r3, r3, #32
 802d1a4:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 802d1a6:	2001      	movs	r0, #1
 802d1a8:	e00f      	b.n	802d1ca <I2C_WaitOnBTFFlagUntilTimeout+0x6e>
    hi2c->State               = HAL_I2C_STATE_READY;
 802d1aa:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802d1ac:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 802d1b0:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 802d1b2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 802d1b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d1b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802d1bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 802d1be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802d1c2:	f042 0204 	orr.w	r2, r2, #4
 802d1c6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 802d1c8:	2001      	movs	r0, #1
}
 802d1ca:	b003      	add	sp, #12
 802d1cc:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 802d1ce:	2000      	movs	r0, #0
}
 802d1d0:	b003      	add	sp, #12
 802d1d2:	bd30      	pop	{r4, r5, pc}

0802d1d4 <HAL_I2C_MspInit>:
}
 802d1d4:	4770      	bx	lr
 802d1d6:	bf00      	nop

0802d1d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 802d1d8:	2800      	cmp	r0, #0
 802d1da:	f000 80b5 	beq.w	802d348 <HAL_I2C_Init+0x170>
{
 802d1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 802d1e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 802d1e4:	4604      	mov	r4, r0
 802d1e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802d1ea:	2b00      	cmp	r3, #0
 802d1ec:	f000 8094 	beq.w	802d318 <HAL_I2C_Init+0x140>
  __HAL_I2C_DISABLE(hi2c);
 802d1f0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 802d1f2:	2224      	movs	r2, #36	; 0x24
 802d1f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 802d1f8:	681a      	ldr	r2, [r3, #0]
 802d1fa:	f022 0201 	bic.w	r2, r2, #1
 802d1fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 802d200:	681a      	ldr	r2, [r3, #0]
 802d202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 802d208:	681a      	ldr	r2, [r3, #0]
 802d20a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802d20e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 802d210:	f001 f8e2 	bl	802e3d8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802d214:	6865      	ldr	r5, [r4, #4]
 802d216:	4b4d      	ldr	r3, [pc, #308]	; (802d34c <HAL_I2C_Init+0x174>)
 802d218:	429d      	cmp	r5, r3
 802d21a:	d84c      	bhi.n	802d2b6 <HAL_I2C_Init+0xde>
 802d21c:	4b4c      	ldr	r3, [pc, #304]	; (802d350 <HAL_I2C_Init+0x178>)
 802d21e:	4298      	cmp	r0, r3
 802d220:	d978      	bls.n	802d314 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d222:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 802d224:	4b4b      	ldr	r3, [pc, #300]	; (802d354 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d226:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 802d228:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d22c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 802d230:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 802d234:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d236:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 802d238:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d23a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 802d23e:	3301      	adds	r3, #1
 802d240:	430b      	orrs	r3, r1
 802d242:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802d244:	69d1      	ldr	r1, [r2, #28]
 802d246:	3801      	subs	r0, #1
 802d248:	006b      	lsls	r3, r5, #1
 802d24a:	fbb0 f3f3 	udiv	r3, r0, r3
 802d24e:	f640 70fc 	movw	r0, #4092	; 0xffc
 802d252:	3301      	adds	r3, #1
 802d254:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 802d258:	4203      	tst	r3, r0
 802d25a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 802d25e:	d160      	bne.n	802d322 <HAL_I2C_Init+0x14a>
 802d260:	2304      	movs	r3, #4
 802d262:	430b      	orrs	r3, r1
 802d264:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802d266:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 802d26a:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802d26c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802d26e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 802d272:	432b      	orrs	r3, r5
 802d274:	4303      	orrs	r3, r0
 802d276:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802d278:	6890      	ldr	r0, [r2, #8]
 802d27a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802d27c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802d27e:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 802d282:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 802d286:	4329      	orrs	r1, r5
 802d288:	4301      	orrs	r1, r0
 802d28a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802d28c:	68d1      	ldr	r1, [r2, #12]
 802d28e:	69a0      	ldr	r0, [r4, #24]
 802d290:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 802d294:	4303      	orrs	r3, r0
 802d296:	430b      	orrs	r3, r1
 802d298:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 802d29a:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d29c:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 802d29e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 802d2a2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 802d2a4:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d2a6:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802d2a8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802d2ac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802d2ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 802d2b2:	4618      	mov	r0, r3
}
 802d2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802d2b6:	4b28      	ldr	r3, [pc, #160]	; (802d358 <HAL_I2C_Init+0x180>)
 802d2b8:	4298      	cmp	r0, r3
 802d2ba:	d92b      	bls.n	802d314 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d2bc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 802d2be:	4925      	ldr	r1, [pc, #148]	; (802d354 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d2c0:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d2c2:	4f26      	ldr	r7, [pc, #152]	; (802d35c <HAL_I2C_Init+0x184>)
  freqrange = I2C_FREQRANGE(pclk1);
 802d2c4:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d2c8:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 802d2cc:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d2d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 802d2d4:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802d2d6:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d2d8:	fb03 f301 	mul.w	r3, r3, r1
 802d2dc:	fba7 1303 	umull	r1, r3, r7, r3
 802d2e0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802d2e2:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802d2e4:	099b      	lsrs	r3, r3, #6
 802d2e6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 802d2ea:	3301      	adds	r3, #1
 802d2ec:	430b      	orrs	r3, r1
 802d2ee:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802d2f0:	69d1      	ldr	r1, [r2, #28]
 802d2f2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 802d2f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 802d2fa:	b9ae      	cbnz	r6, 802d328 <HAL_I2C_Init+0x150>
 802d2fc:	3801      	subs	r0, #1
 802d2fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 802d302:	fbb0 f3f3 	udiv	r3, r0, r3
 802d306:	3301      	adds	r3, #1
 802d308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802d30c:	b1d3      	cbz	r3, 802d344 <HAL_I2C_Init+0x16c>
 802d30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d312:	e7a6      	b.n	802d262 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 802d314:	2001      	movs	r0, #1
}
 802d316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 802d318:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 802d31c:	f7ff ff5a 	bl	802d1d4 <HAL_I2C_MspInit>
 802d320:	e766      	b.n	802d1f0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802d322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802d326:	e79c      	b.n	802d262 <HAL_I2C_Init+0x8a>
 802d328:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 802d32c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802d330:	3801      	subs	r0, #1
 802d332:	fbb0 f3f3 	udiv	r3, r0, r3
 802d336:	3301      	adds	r3, #1
 802d338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802d33c:	b113      	cbz	r3, 802d344 <HAL_I2C_Init+0x16c>
 802d33e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802d342:	e78e      	b.n	802d262 <HAL_I2C_Init+0x8a>
 802d344:	2301      	movs	r3, #1
 802d346:	e78c      	b.n	802d262 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 802d348:	2001      	movs	r0, #1
}
 802d34a:	4770      	bx	lr
 802d34c:	000186a0 	.word	0x000186a0
 802d350:	001e847f 	.word	0x001e847f
 802d354:	431bde83 	.word	0x431bde83
 802d358:	003d08ff 	.word	0x003d08ff
 802d35c:	10624dd3 	.word	0x10624dd3

0802d360 <HAL_I2C_MspDeInit>:
 802d360:	4770      	bx	lr
 802d362:	bf00      	nop

0802d364 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 802d364:	b1b0      	cbz	r0, 802d394 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 802d366:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 802d368:	2324      	movs	r3, #36	; 0x24
{
 802d36a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 802d36c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 802d370:	6813      	ldr	r3, [r2, #0]
 802d372:	f023 0301 	bic.w	r3, r3, #1
 802d376:	4604      	mov	r4, r0
 802d378:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 802d37a:	f7ff fff1 	bl	802d360 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 802d37e:	2300      	movs	r3, #0
 802d380:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 802d382:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 802d386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802d38a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802d38c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 802d390:	4618      	mov	r0, r3
}
 802d392:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 802d394:	2001      	movs	r0, #1
}
 802d396:	4770      	bx	lr

0802d398 <HAL_I2C_Mem_Write>:
{
 802d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d39c:	4604      	mov	r4, r0
 802d39e:	b082      	sub	sp, #8
 802d3a0:	4699      	mov	r9, r3
 802d3a2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802d3a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802d3a8:	460f      	mov	r7, r1
 802d3aa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 802d3ac:	f7fe fc5a 	bl	802bc64 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 802d3b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 802d3b4:	2b20      	cmp	r3, #32
 802d3b6:	d003      	beq.n	802d3c0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 802d3b8:	2002      	movs	r0, #2
}
 802d3ba:	b002      	add	sp, #8
 802d3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802d3c0:	4605      	mov	r5, r0
 802d3c2:	9000      	str	r0, [sp, #0]
 802d3c4:	4940      	ldr	r1, [pc, #256]	; (802d4c8 <HAL_I2C_Mem_Write+0x130>)
 802d3c6:	2319      	movs	r3, #25
 802d3c8:	2201      	movs	r2, #1
 802d3ca:	4620      	mov	r0, r4
 802d3cc:	f7ff fda6 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
 802d3d0:	2800      	cmp	r0, #0
 802d3d2:	d1f1      	bne.n	802d3b8 <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 802d3d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802d3d8:	2b01      	cmp	r3, #1
 802d3da:	d0ed      	beq.n	802d3b8 <HAL_I2C_Mem_Write+0x20>
 802d3dc:	2201      	movs	r2, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802d3de:	6823      	ldr	r3, [r4, #0]
    __HAL_LOCK(hi2c);
 802d3e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802d3e4:	681a      	ldr	r2, [r3, #0]
 802d3e6:	07d1      	lsls	r1, r2, #31
 802d3e8:	d569      	bpl.n	802d4be <HAL_I2C_Mem_Write+0x126>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802d3ea:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802d3ec:	4837      	ldr	r0, [pc, #220]	; (802d4cc <HAL_I2C_Mem_Write+0x134>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802d3ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802d3f2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 802d3f4:	2321      	movs	r3, #33	; 0x21
 802d3f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802d3fa:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d3fc:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802d3fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d402:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 802d404:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802d408:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 802d40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802d40e:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d410:	4642      	mov	r2, r8
 802d412:	e9cd 6500 	strd	r6, r5, [sp]
 802d416:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802d418:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d41a:	4639      	mov	r1, r7
    hi2c->XferSize    = hi2c->XferCount;
 802d41c:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d420:	4620      	mov	r0, r4
 802d422:	f7ff fdb3 	bl	802cf8c <I2C_RequestMemoryWrite>
 802d426:	2800      	cmp	r0, #0
 802d428:	d145      	bne.n	802d4b6 <HAL_I2C_Mem_Write+0x11e>
    while (hi2c->XferSize > 0U)
 802d42a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 802d42c:	b343      	cbz	r3, 802d480 <HAL_I2C_Mem_Write+0xe8>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802d42e:	462a      	mov	r2, r5
 802d430:	4631      	mov	r1, r6
 802d432:	4620      	mov	r0, r4
 802d434:	f7ff fd02 	bl	802ce3c <I2C_WaitOnTXEFlagUntilTimeout>
 802d438:	2800      	cmp	r0, #0
 802d43a:	d134      	bne.n	802d4a6 <HAL_I2C_Mem_Write+0x10e>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802d43c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 802d43e:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 802d440:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802d444:	4639      	mov	r1, r7
      hi2c->XferSize--;
 802d446:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802d44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d44e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 802d450:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 802d452:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 802d454:	3b01      	subs	r3, #1
 802d456:	b29b      	uxth	r3, r3
 802d458:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802d45a:	6941      	ldr	r1, [r0, #20]
      hi2c->XferSize--;
 802d45c:	b293      	uxth	r3, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802d45e:	074a      	lsls	r2, r1, #29
      hi2c->XferSize--;
 802d460:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802d462:	d5e3      	bpl.n	802d42c <HAL_I2C_Mem_Write+0x94>
 802d464:	b163      	cbz	r3, 802d480 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802d466:	787b      	ldrb	r3, [r7, #1]
 802d468:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 802d46a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 802d46c:	f1ac 0302 	sub.w	r3, ip, #2
        hi2c->XferCount--;
 802d470:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 802d472:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 802d474:	3702      	adds	r7, #2
        hi2c->XferCount--;
 802d476:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 802d478:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 802d47a:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 802d47c:	8562      	strh	r2, [r4, #42]	; 0x2a
 802d47e:	e7d5      	b.n	802d42c <HAL_I2C_Mem_Write+0x94>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802d480:	462a      	mov	r2, r5
 802d482:	4631      	mov	r1, r6
 802d484:	4620      	mov	r0, r4
 802d486:	f7ff fe69 	bl	802d15c <I2C_WaitOnBTFFlagUntilTimeout>
 802d48a:	b960      	cbnz	r0, 802d4a6 <HAL_I2C_Mem_Write+0x10e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d48c:	6822      	ldr	r2, [r4, #0]
 802d48e:	6813      	ldr	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 802d490:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d496:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 802d498:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 802d49c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802d4a0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 802d4a4:	e789      	b.n	802d3ba <HAL_I2C_Mem_Write+0x22>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802d4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d4a8:	2b04      	cmp	r3, #4
 802d4aa:	d104      	bne.n	802d4b6 <HAL_I2C_Mem_Write+0x11e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d4ac:	6822      	ldr	r2, [r4, #0]
 802d4ae:	6813      	ldr	r3, [r2, #0]
 802d4b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802d4b4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 802d4b6:	2001      	movs	r0, #1
}
 802d4b8:	b002      	add	sp, #8
 802d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 802d4be:	681a      	ldr	r2, [r3, #0]
 802d4c0:	f042 0201 	orr.w	r2, r2, #1
 802d4c4:	601a      	str	r2, [r3, #0]
 802d4c6:	e790      	b.n	802d3ea <HAL_I2C_Mem_Write+0x52>
 802d4c8:	00100002 	.word	0x00100002
 802d4cc:	ffff0000 	.word	0xffff0000

0802d4d0 <HAL_I2C_Mem_Read>:
{
 802d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d4d4:	4604      	mov	r4, r0
 802d4d6:	b086      	sub	sp, #24
 802d4d8:	4699      	mov	r9, r3
 802d4da:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 802d4de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802d4e0:	460f      	mov	r7, r1
 802d4e2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 802d4e4:	f7fe fbbe 	bl	802bc64 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 802d4e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 802d4ec:	2b20      	cmp	r3, #32
 802d4ee:	d005      	beq.n	802d4fc <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 802d4f0:	f04f 0802 	mov.w	r8, #2
}
 802d4f4:	4640      	mov	r0, r8
 802d4f6:	b006      	add	sp, #24
 802d4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802d4fc:	4605      	mov	r5, r0
 802d4fe:	9000      	str	r0, [sp, #0]
 802d500:	497e      	ldr	r1, [pc, #504]	; (802d6fc <HAL_I2C_Mem_Read+0x22c>)
 802d502:	2319      	movs	r3, #25
 802d504:	2201      	movs	r2, #1
 802d506:	4620      	mov	r0, r4
 802d508:	f7ff fd08 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
 802d50c:	2800      	cmp	r0, #0
 802d50e:	d1ef      	bne.n	802d4f0 <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 802d510:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802d514:	2b01      	cmp	r3, #1
 802d516:	d0eb      	beq.n	802d4f0 <HAL_I2C_Mem_Read+0x20>
 802d518:	2201      	movs	r2, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802d51a:	6823      	ldr	r3, [r4, #0]
    __HAL_LOCK(hi2c);
 802d51c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802d520:	681a      	ldr	r2, [r3, #0]
 802d522:	07d1      	lsls	r1, r2, #31
 802d524:	d53b      	bpl.n	802d59e <HAL_I2C_Mem_Read+0xce>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802d526:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802d528:	4875      	ldr	r0, [pc, #468]	; (802d700 <HAL_I2C_Mem_Read+0x230>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802d52a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802d52e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 802d530:	2322      	movs	r3, #34	; 0x22
 802d532:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802d536:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d538:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802d53a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802d53e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 802d540:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802d544:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 802d548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d54a:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d54c:	4642      	mov	r2, r8
 802d54e:	e9cd 6500 	strd	r6, r5, [sp]
 802d552:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802d554:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d556:	4639      	mov	r1, r7
    hi2c->XferSize    = hi2c->XferCount;
 802d558:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802d55c:	4620      	mov	r0, r4
 802d55e:	f7ff fd79 	bl	802d054 <I2C_RequestMemoryRead>
 802d562:	4680      	mov	r8, r0
 802d564:	b9a8      	cbnz	r0, 802d592 <HAL_I2C_Mem_Read+0xc2>
    if (hi2c->XferSize == 0U)
 802d566:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 802d568:	b9f3      	cbnz	r3, 802d5a8 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d56a:	6823      	ldr	r3, [r4, #0]
 802d56c:	9002      	str	r0, [sp, #8]
 802d56e:	695a      	ldr	r2, [r3, #20]
 802d570:	9202      	str	r2, [sp, #8]
 802d572:	699a      	ldr	r2, [r3, #24]
 802d574:	9202      	str	r2, [sp, #8]
 802d576:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d578:	681a      	ldr	r2, [r3, #0]
 802d57a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802d57e:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802d580:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 802d582:	2220      	movs	r2, #32
 802d584:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 802d588:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802d58c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 802d590:	e7b0      	b.n	802d4f4 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 802d592:	f04f 0801 	mov.w	r8, #1
}
 802d596:	4640      	mov	r0, r8
 802d598:	b006      	add	sp, #24
 802d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 802d59e:	681a      	ldr	r2, [r3, #0]
 802d5a0:	f042 0201 	orr.w	r2, r2, #1
 802d5a4:	601a      	str	r2, [r3, #0]
 802d5a6:	e7be      	b.n	802d526 <HAL_I2C_Mem_Read+0x56>
    else if (hi2c->XferSize == 1U)
 802d5a8:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d5aa:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 802d5ac:	f000 8097 	beq.w	802d6de <HAL_I2C_Mem_Read+0x20e>
    else if (hi2c->XferSize == 2U)
 802d5b0:	2b02      	cmp	r3, #2
 802d5b2:	d078      	beq.n	802d6a6 <HAL_I2C_Mem_Read+0x1d6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d5b4:	9005      	str	r0, [sp, #20]
 802d5b6:	6951      	ldr	r1, [r2, #20]
 802d5b8:	9105      	str	r1, [sp, #20]
 802d5ba:	6992      	ldr	r2, [r2, #24]
 802d5bc:	9205      	str	r2, [sp, #20]
 802d5be:	9a05      	ldr	r2, [sp, #20]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d5c0:	4f50      	ldr	r7, [pc, #320]	; (802d704 <HAL_I2C_Mem_Read+0x234>)
      if (hi2c->XferSize <= 3U)
 802d5c2:	2b03      	cmp	r3, #3
 802d5c4:	d850      	bhi.n	802d668 <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferSize == 1U)
 802d5c6:	2b01      	cmp	r3, #1
 802d5c8:	d07c      	beq.n	802d6c4 <HAL_I2C_Mem_Read+0x1f4>
        else if (hi2c->XferSize == 2U)
 802d5ca:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d5cc:	9500      	str	r5, [sp, #0]
 802d5ce:	4633      	mov	r3, r6
 802d5d0:	f04f 0200 	mov.w	r2, #0
 802d5d4:	4639      	mov	r1, r7
 802d5d6:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 802d5d8:	d01c      	beq.n	802d614 <HAL_I2C_Mem_Read+0x144>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d5da:	f7ff fc9f 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
 802d5de:	2800      	cmp	r0, #0
 802d5e0:	d1d7      	bne.n	802d592 <HAL_I2C_Mem_Read+0xc2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d5e2:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d5e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d5e6:	681a      	ldr	r2, [r3, #0]
 802d5e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802d5ec:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d5ee:	691b      	ldr	r3, [r3, #16]
 802d5f0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 802d5f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 802d5f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 802d5f6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d5f8:	9500      	str	r5, [sp, #0]
          hi2c->XferCount--;
 802d5fa:	3b01      	subs	r3, #1
 802d5fc:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 802d5fe:	f102 0c01 	add.w	ip, r2, #1
          hi2c->XferSize--;
 802d602:	3901      	subs	r1, #1
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d604:	4602      	mov	r2, r0
          hi2c->XferCount--;
 802d606:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 802d608:	8521      	strh	r1, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 802d60a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802d60e:	4633      	mov	r3, r6
 802d610:	4639      	mov	r1, r7
 802d612:	4620      	mov	r0, r4
 802d614:	f7ff fc82 	bl	802cf1c <I2C_WaitOnFlagUntilTimeout>
 802d618:	2800      	cmp	r0, #0
 802d61a:	d1ba      	bne.n	802d592 <HAL_I2C_Mem_Read+0xc2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d61c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d61e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d620:	681a      	ldr	r2, [r3, #0]
 802d622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802d626:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d628:	691b      	ldr	r3, [r3, #16]
 802d62a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 802d62c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 802d62e:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 802d630:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d632:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 802d634:	3b01      	subs	r3, #1
 802d636:	b29b      	uxth	r3, r3
 802d638:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d63a:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 802d63c:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 802d640:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 802d642:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 802d646:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d648:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 802d64a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 802d64c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 802d64e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 802d650:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 802d652:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 802d654:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 802d656:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 802d658:	3101      	adds	r1, #1
          hi2c->XferSize--;
 802d65a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 802d65c:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 802d65e:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 802d660:	2b00      	cmp	r3, #0
 802d662:	d08d      	beq.n	802d580 <HAL_I2C_Mem_Read+0xb0>
      if (hi2c->XferSize <= 3U)
 802d664:	2b03      	cmp	r3, #3
 802d666:	d9ae      	bls.n	802d5c6 <HAL_I2C_Mem_Read+0xf6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802d668:	462a      	mov	r2, r5
 802d66a:	4631      	mov	r1, r6
 802d66c:	4620      	mov	r0, r4
 802d66e:	f7ff fc21 	bl	802ceb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 802d672:	2800      	cmp	r0, #0
 802d674:	d18d      	bne.n	802d592 <HAL_I2C_Mem_Read+0xc2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d676:	6822      	ldr	r2, [r4, #0]
 802d678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802d67a:	6912      	ldr	r2, [r2, #16]
 802d67c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 802d67e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802d680:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 802d682:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 802d684:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 802d686:	3a01      	subs	r2, #1
 802d688:	b292      	uxth	r2, r2
 802d68a:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802d68c:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 802d68e:	3b01      	subs	r3, #1
 802d690:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 802d692:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802d696:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 802d698:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 802d69a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802d69e:	d5df      	bpl.n	802d660 <HAL_I2C_Mem_Read+0x190>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d6a0:	6903      	ldr	r3, [r0, #16]
 802d6a2:	704b      	strb	r3, [r1, #1]
 802d6a4:	e7d1      	b.n	802d64a <HAL_I2C_Mem_Read+0x17a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d6a6:	6811      	ldr	r1, [r2, #0]
 802d6a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 802d6ac:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802d6ae:	6811      	ldr	r1, [r2, #0]
 802d6b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 802d6b4:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d6b6:	9004      	str	r0, [sp, #16]
 802d6b8:	6951      	ldr	r1, [r2, #20]
 802d6ba:	9104      	str	r1, [sp, #16]
 802d6bc:	6992      	ldr	r2, [r2, #24]
 802d6be:	9204      	str	r2, [sp, #16]
 802d6c0:	9a04      	ldr	r2, [sp, #16]
 802d6c2:	e77d      	b.n	802d5c0 <HAL_I2C_Mem_Read+0xf0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802d6c4:	462a      	mov	r2, r5
 802d6c6:	4631      	mov	r1, r6
 802d6c8:	4620      	mov	r0, r4
 802d6ca:	f7ff fbf3 	bl	802ceb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 802d6ce:	2800      	cmp	r0, #0
 802d6d0:	f47f af5f 	bne.w	802d592 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802d6d4:	6822      	ldr	r2, [r4, #0]
 802d6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802d6d8:	6912      	ldr	r2, [r2, #16]
 802d6da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 802d6dc:	e7b5      	b.n	802d64a <HAL_I2C_Mem_Read+0x17a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802d6de:	6811      	ldr	r1, [r2, #0]
 802d6e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 802d6e4:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802d6e6:	9003      	str	r0, [sp, #12]
 802d6e8:	6951      	ldr	r1, [r2, #20]
 802d6ea:	9103      	str	r1, [sp, #12]
 802d6ec:	6991      	ldr	r1, [r2, #24]
 802d6ee:	9103      	str	r1, [sp, #12]
 802d6f0:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802d6f2:	6811      	ldr	r1, [r2, #0]
 802d6f4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 802d6f8:	6011      	str	r1, [r2, #0]
 802d6fa:	e761      	b.n	802d5c0 <HAL_I2C_Mem_Read+0xf0>
 802d6fc:	00100002 	.word	0x00100002
 802d700:	ffff0000 	.word	0xffff0000
 802d704:	00010004 	.word	0x00010004

0802d708 <HAL_I2C_GetState>:
  return hi2c->State;
 802d708:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 802d70c:	4770      	bx	lr
 802d70e:	bf00      	nop

0802d710 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 802d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802d714:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 802d716:	6804      	ldr	r4, [r0, #0]
 802d718:	6848      	ldr	r0, [r1, #4]
 802d71a:	f8d4 800c 	ldr.w	r8, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d71e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802d722:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 802d726:	690f      	ldr	r7, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802d728:	3284      	adds	r2, #132	; 0x84
 802d72a:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d72c:	f10c 0a01 	add.w	sl, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802d730:	685d      	ldr	r5, [r3, #4]
 802d732:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 802d736:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d738:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 802d73a:	f3c8 480b 	ubfx	r8, r8, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d73e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 802d742:	4480      	add	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d744:	4455      	add	r5, sl
 802d746:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802d74a:	e9d1 6e02 	ldrd	r6, lr, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802d74e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 802d750:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 802d752:	f8d3 a008 	ldr.w	sl, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 802d756:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 802d75a:	f40a 4a70 	and.w	sl, sl, #61440	; 0xf000
 802d75e:	f8c3 a008 	str.w	sl, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802d762:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 802d766:	f3c5 0a0a 	ubfx	sl, r5, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802d76a:	3601      	adds	r6, #1
 802d76c:	f3cb 050a 	ubfx	r5, fp, #0, #11
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 802d770:	44d6      	add	lr, sl
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802d772:	442e      	add	r6, r5
 802d774:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 802d778:	609e      	str	r6, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 802d77a:	691d      	ldr	r5, [r3, #16]
 802d77c:	f025 0507 	bic.w	r5, r5, #7
 802d780:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 802d782:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 802d786:	611f      	str	r7, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 802d788:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 802d78a:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802d78e:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 802d792:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 802d796:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 802d79a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 802d79e:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 802d7a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 802d7a6:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 802d7a8:	695d      	ldr	r5, [r3, #20]
 802d7aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 802d7ae:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 802d7b0:	f8c3 8014 	str.w	r8, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 802d7b4:	69dd      	ldr	r5, [r3, #28]
 802d7b6:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 802d7ba:	f025 0507 	bic.w	r5, r5, #7
 802d7be:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 802d7c0:	f101 051c 	add.w	r5, r1, #28
 802d7c4:	e895 0160 	ldmia.w	r5, {r5, r6, r8}
 802d7c8:	4335      	orrs	r5, r6
 802d7ca:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 802d7cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 802d7ce:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 802d7d2:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802d7d6:	b15f      	cbz	r7, 802d7f0 <LTDC_SetConfig+0xe0>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 802d7d8:	2f01      	cmp	r7, #1
 802d7da:	d028      	beq.n	802d82e <LTDC_SetConfig+0x11e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802d7dc:	1ebd      	subs	r5, r7, #2
 802d7de:	2d02      	cmp	r5, #2
 802d7e0:	d928      	bls.n	802d834 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802d7e2:	2f07      	cmp	r7, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 802d7e4:	bf0c      	ite	eq
 802d7e6:	f04f 0e02 	moveq.w	lr, #2
 802d7ea:	f04f 0e01 	movne.w	lr, #1
 802d7ee:	e001      	b.n	802d7f4 <LTDC_SetConfig+0xe4>
    tmp = 4U;
 802d7f0:	f04f 0e04 	mov.w	lr, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802d7f4:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 802d7f6:	6add      	ldr	r5, [r3, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 802d7f8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802d7fa:	eba0 000c 	sub.w	r0, r0, ip
 802d7fe:	fb0e f000 	mul.w	r0, lr, r0
 802d802:	fb06 f10e 	mul.w	r1, r6, lr
 802d806:	3003      	adds	r0, #3
 802d808:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 802d80c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 802d810:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802d812:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 802d814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802d816:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 802d81a:	f021 0107 	bic.w	r1, r1, #7
 802d81e:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 802d820:	631f      	str	r7, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 802d822:	58a3      	ldr	r3, [r4, r2]
 802d824:	f043 0301 	orr.w	r3, r3, #1
 802d828:	50a3      	str	r3, [r4, r2]
}
 802d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 802d82e:	f04f 0e03 	mov.w	lr, #3
 802d832:	e7df      	b.n	802d7f4 <LTDC_SetConfig+0xe4>
    tmp = 2U;
 802d834:	f04f 0e02 	mov.w	lr, #2
 802d838:	e7dc      	b.n	802d7f4 <LTDC_SetConfig+0xe4>
 802d83a:	bf00      	nop

0802d83c <HAL_LTDC_MspInit>:
}
 802d83c:	4770      	bx	lr
 802d83e:	bf00      	nop

0802d840 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 802d840:	2800      	cmp	r0, #0
 802d842:	d068      	beq.n	802d916 <HAL_LTDC_Init+0xd6>
{
 802d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 802d846:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802d84a:	4604      	mov	r4, r0
 802d84c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802d850:	2b00      	cmp	r3, #0
 802d852:	d05b      	beq.n	802d90c <HAL_LTDC_Init+0xcc>
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 802d854:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802d856:	2202      	movs	r2, #2
 802d858:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 802d85c:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802d85e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 802d862:	e9d4 6503 	ldrd	r6, r5, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 802d866:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 802d86a:	6199      	str	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802d86c:	4302      	orrs	r2, r0
 802d86e:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802d870:	482a      	ldr	r0, [pc, #168]	; (802d91c <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802d872:	4332      	orrs	r2, r6
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 802d874:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802d876:	430a      	orrs	r2, r1
 802d878:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802d87a:	689d      	ldr	r5, [r3, #8]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 802d87c:	69e6      	ldr	r6, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802d87e:	4005      	ands	r5, r0
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 802d880:	e9d4 7205 	ldrd	r7, r2, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802d884:	609d      	str	r5, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 802d886:	6899      	ldr	r1, [r3, #8]
 802d888:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802d88c:	4311      	orrs	r1, r2
 802d88e:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 802d890:	68dd      	ldr	r5, [r3, #12]
 802d892:	4005      	ands	r5, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 802d894:	e9d4 1708 	ldrd	r1, r7, [r4, #32]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 802d898:	60dd      	str	r5, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 802d89a:	68da      	ldr	r2, [r3, #12]
 802d89c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 802d8a0:	430a      	orrs	r2, r1
 802d8a2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 802d8a4:	691d      	ldr	r5, [r3, #16]
 802d8a6:	4005      	ands	r5, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 802d8a8:	e9d4 260a 	ldrd	r2, r6, [r4, #40]	; 0x28
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 802d8ac:	611d      	str	r5, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 802d8ae:	6919      	ldr	r1, [r3, #16]
 802d8b0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802d8b4:	4311      	orrs	r1, r2
 802d8b6:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 802d8b8:	6959      	ldr	r1, [r3, #20]
 802d8ba:	4008      	ands	r0, r1
 802d8bc:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 802d8be:	695a      	ldr	r2, [r3, #20]
 802d8c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802d8c2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 802d8c6:	430a      	orrs	r2, r1
 802d8c8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 802d8ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 802d8cc:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 802d8d0:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 802d8d4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 802d8d8:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 802d8da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802d8dc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 802d8e0:	430a      	orrs	r2, r1
 802d8e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 802d8e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 802d8ea:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 802d8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802d8ee:	f042 0206 	orr.w	r2, r2, #6
 802d8f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 802d8f4:	699a      	ldr	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 802d8f6:	2100      	movs	r1, #0
  __HAL_LTDC_ENABLE(hltdc);
 802d8f8:	f042 0201 	orr.w	r2, r2, #1
  hltdc->State = HAL_LTDC_STATE_READY;
 802d8fc:	2501      	movs	r5, #1
  __HAL_LTDC_ENABLE(hltdc);
 802d8fe:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 802d900:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 802d904:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  return HAL_OK;
 802d908:	4608      	mov	r0, r1
}
 802d90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 802d90c:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 802d910:	f7ff ff94 	bl	802d83c <HAL_LTDC_MspInit>
 802d914:	e79e      	b.n	802d854 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 802d916:	2001      	movs	r0, #1
}
 802d918:	4770      	bx	lr
 802d91a:	bf00      	nop
 802d91c:	f000f800 	.word	0xf000f800

0802d920 <HAL_LTDC_MspDeInit>:
 802d920:	4770      	bx	lr
 802d922:	bf00      	nop

0802d924 <HAL_LTDC_DeInit>:
{
 802d924:	b510      	push	{r4, lr}
 802d926:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 802d928:	f7ff fffa 	bl	802d920 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 802d92c:	2000      	movs	r0, #0
 802d92e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 802d932:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 802d936:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 802d93a:	bd10      	pop	{r4, pc}

0802d93c <HAL_LTDC_ErrorCallback>:
 802d93c:	4770      	bx	lr
 802d93e:	bf00      	nop

0802d940 <HAL_LTDC_LineEventCallback>:
 802d940:	4770      	bx	lr
 802d942:	bf00      	nop

0802d944 <HAL_LTDC_ReloadEventCallback>:
 802d944:	4770      	bx	lr
 802d946:	bf00      	nop

0802d948 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 802d948:	6803      	ldr	r3, [r0, #0]
{
 802d94a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 802d94c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 802d94e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 802d950:	076a      	lsls	r2, r5, #29
{
 802d952:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 802d954:	d501      	bpl.n	802d95a <HAL_LTDC_IRQHandler+0x12>
 802d956:	0771      	lsls	r1, r6, #29
 802d958:	d41d      	bmi.n	802d996 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 802d95a:	07aa      	lsls	r2, r5, #30
 802d95c:	d501      	bpl.n	802d962 <HAL_LTDC_IRQHandler+0x1a>
 802d95e:	07b3      	lsls	r3, r6, #30
 802d960:	d42d      	bmi.n	802d9be <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 802d962:	07e8      	lsls	r0, r5, #31
 802d964:	d501      	bpl.n	802d96a <HAL_LTDC_IRQHandler+0x22>
 802d966:	07f1      	lsls	r1, r6, #31
 802d968:	d43f      	bmi.n	802d9ea <HAL_LTDC_IRQHandler+0xa2>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 802d96a:	072a      	lsls	r2, r5, #28
 802d96c:	d501      	bpl.n	802d972 <HAL_LTDC_IRQHandler+0x2a>
 802d96e:	0733      	lsls	r3, r6, #28
 802d970:	d400      	bmi.n	802d974 <HAL_LTDC_IRQHandler+0x2c>
}
 802d972:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 802d974:	6823      	ldr	r3, [r4, #0]
 802d976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 802d978:	2008      	movs	r0, #8
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 802d97a:	f022 0208 	bic.w	r2, r2, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 802d97e:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 802d980:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 802d982:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 802d984:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 802d986:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 802d988:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 802d98c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 802d990:	f7ff ffd8 	bl	802d944 <HAL_LTDC_ReloadEventCallback>
}
 802d994:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 802d996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 802d998:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 802d99a:	f022 0204 	bic.w	r2, r2, #4
 802d99e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 802d9a0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 802d9a2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 802d9a6:	2200      	movs	r2, #0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 802d9a8:	f043 0301 	orr.w	r3, r3, #1
 802d9ac:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 802d9b0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 802d9b4:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 802d9b8:	f7ff ffc0 	bl	802d93c <HAL_LTDC_ErrorCallback>
 802d9bc:	e7cd      	b.n	802d95a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 802d9be:	6823      	ldr	r3, [r4, #0]
 802d9c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 802d9c2:	2102      	movs	r1, #2
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 802d9c4:	f022 0202 	bic.w	r2, r2, #2
 802d9c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 802d9ca:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 802d9cc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 802d9d0:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 802d9d2:	430b      	orrs	r3, r1
    __HAL_UNLOCK(hltdc);
 802d9d4:	2100      	movs	r1, #0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 802d9d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 802d9da:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 802d9de:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 802d9e2:	4620      	mov	r0, r4
 802d9e4:	f7ff ffaa 	bl	802d93c <HAL_LTDC_ErrorCallback>
 802d9e8:	e7bb      	b.n	802d962 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 802d9ea:	6823      	ldr	r3, [r4, #0]
 802d9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802d9ee:	f022 0201 	bic.w	r2, r2, #1
 802d9f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 802d9f4:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 802d9f6:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 802d9f8:	63d9      	str	r1, [r3, #60]	; 0x3c
    HAL_LTDC_LineEventCallback(hltdc);
 802d9fa:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 802d9fc:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 802da00:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 802da04:	f7ff ff9c 	bl	802d940 <HAL_LTDC_LineEventCallback>
 802da08:	e7af      	b.n	802d96a <HAL_LTDC_IRQHandler+0x22>
 802da0a:	bf00      	nop

0802da0c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 802da0c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802da10:	2b01      	cmp	r3, #1
 802da12:	d028      	beq.n	802da66 <HAL_LTDC_ConfigLayer+0x5a>
{
 802da14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802da18:	2302      	movs	r3, #2
  __HAL_LOCK(hltdc);
 802da1a:	f04f 0801 	mov.w	r8, #1
 802da1e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802da22:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 802da26:	460d      	mov	r5, r1
 802da28:	4606      	mov	r6, r0
 802da2a:	4694      	mov	ip, r2
 802da2c:	460f      	mov	r7, r1
 802da2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802da30:	2434      	movs	r4, #52	; 0x34
 802da32:	fb04 640c 	mla	r4, r4, ip, r6
 802da36:	3438      	adds	r4, #56	; 0x38
 802da38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802da3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802da3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802da3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802da40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802da42:	682b      	ldr	r3, [r5, #0]
 802da44:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 802da46:	4662      	mov	r2, ip
 802da48:	4630      	mov	r0, r6
 802da4a:	4639      	mov	r1, r7
 802da4c:	f7ff fe60 	bl	802d710 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802da50:	6832      	ldr	r2, [r6, #0]
  __HAL_UNLOCK(hltdc);
 802da52:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802da54:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 802da58:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 802da5c:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
  return HAL_OK;
 802da60:	4618      	mov	r0, r3
}
 802da62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 802da66:	2002      	movs	r0, #2
}
 802da68:	4770      	bx	lr
 802da6a:	bf00      	nop

0802da6c <HAL_LTDC_SetPitch>:
{
 802da6c:	4603      	mov	r3, r0
  __HAL_LOCK(hltdc);
 802da6e:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
 802da72:	2801      	cmp	r0, #1
 802da74:	d033      	beq.n	802dade <HAL_LTDC_SetPitch+0x72>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 802da76:	2034      	movs	r0, #52	; 0x34
{
 802da78:	b430      	push	{r4, r5}
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 802da7a:	fb00 3002 	mla	r0, r0, r2, r3
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802da7e:	2402      	movs	r4, #2
 802da80:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 802da84:	6c80      	ldr	r0, [r0, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802da86:	b9f0      	cbnz	r0, 802dac6 <HAL_LTDC_SetPitch+0x5a>
 802da88:	40a1      	lsls	r1, r4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 802da8a:	6818      	ldr	r0, [r3, #0]
  LTDC->SRCR |= LTDC_SRCR_IMR;
 802da8c:	4c15      	ldr	r4, [pc, #84]	; (802dae4 <HAL_LTDC_SetPitch+0x78>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 802da8e:	01d2      	lsls	r2, r2, #7
 802da90:	3284      	adds	r2, #132	; 0x84
 802da92:	4402      	add	r2, r0
  hltdc->State = HAL_LTDC_STATE_READY;
 802da94:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 802da96:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 802da98:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 802da9c:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 802daa0:	62d0      	str	r0, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 802daa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802daa4:	4328      	orrs	r0, r5
 802daa6:	6260      	str	r0, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 802daa8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 802daaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 802daae:	62d1      	str	r1, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 802dab0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 802dab2:	2100      	movs	r1, #0
  LTDC->SRCR |= LTDC_SRCR_IMR;
 802dab4:	432a      	orrs	r2, r5
 802dab6:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 802dab8:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 802dabc:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
  return HAL_OK;
 802dac0:	4608      	mov	r0, r1
}
 802dac2:	bc30      	pop	{r4, r5}
 802dac4:	4770      	bx	lr
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 802dac6:	2801      	cmp	r0, #1
 802dac8:	d006      	beq.n	802dad8 <HAL_LTDC_SetPitch+0x6c>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802daca:	1e84      	subs	r4, r0, #2
 802dacc:	2c02      	cmp	r4, #2
 802dace:	d901      	bls.n	802dad4 <HAL_LTDC_SetPitch+0x68>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802dad0:	2807      	cmp	r0, #7
 802dad2:	d1da      	bne.n	802da8a <HAL_LTDC_SetPitch+0x1e>
 802dad4:	0049      	lsls	r1, r1, #1
 802dad6:	e7d8      	b.n	802da8a <HAL_LTDC_SetPitch+0x1e>
 802dad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802dadc:	e7d5      	b.n	802da8a <HAL_LTDC_SetPitch+0x1e>
  __HAL_LOCK(hltdc);
 802dade:	2002      	movs	r0, #2
}
 802dae0:	4770      	bx	lr
 802dae2:	bf00      	nop
 802dae4:	40016800 	.word	0x40016800

0802dae8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 802dae8:	b530      	push	{r4, r5, lr}
 802daea:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 802daec:	4b19      	ldr	r3, [pc, #100]	; (802db54 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 802daee:	491a      	ldr	r1, [pc, #104]	; (802db58 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 802daf0:	4d1a      	ldr	r5, [pc, #104]	; (802db5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 802daf2:	2200      	movs	r2, #0
 802daf4:	9201      	str	r2, [sp, #4]
 802daf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802daf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802dafc:	641a      	str	r2, [r3, #64]	; 0x40
 802dafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802db00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802db04:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 802db06:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 802db08:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 802db0a:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 802db0c:	f7fe f8aa 	bl	802bc64 <HAL_GetTick>
 802db10:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 802db12:	e005      	b.n	802db20 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 802db14:	f7fe f8a6 	bl	802bc64 <HAL_GetTick>
 802db18:	1b00      	subs	r0, r0, r4
 802db1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802db1e:	d816      	bhi.n	802db4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 802db20:	686b      	ldr	r3, [r5, #4]
 802db22:	03da      	lsls	r2, r3, #15
 802db24:	d5f6      	bpl.n	802db14 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 802db26:	4b0e      	ldr	r3, [pc, #56]	; (802db60 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 802db28:	4d0c      	ldr	r5, [pc, #48]	; (802db5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 802db2a:	2201      	movs	r2, #1
 802db2c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 802db2e:	f7fe f899 	bl	802bc64 <HAL_GetTick>
 802db32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 802db34:	e005      	b.n	802db42 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 802db36:	f7fe f895 	bl	802bc64 <HAL_GetTick>
 802db3a:	1b00      	subs	r0, r0, r4
 802db3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802db40:	d805      	bhi.n	802db4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 802db42:	686b      	ldr	r3, [r5, #4]
 802db44:	039b      	lsls	r3, r3, #14
 802db46:	d5f6      	bpl.n	802db36 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 802db48:	2000      	movs	r0, #0
}
 802db4a:	b003      	add	sp, #12
 802db4c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 802db4e:	2003      	movs	r0, #3
}
 802db50:	b003      	add	sp, #12
 802db52:	bd30      	pop	{r4, r5, pc}
 802db54:	40023800 	.word	0x40023800
 802db58:	420e0040 	.word	0x420e0040
 802db5c:	40007000 	.word	0x40007000
 802db60:	420e0044 	.word	0x420e0044

0802db64 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 802db64:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 802db66:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 802db68:	b134      	cbz	r4, 802db78 <QSPI_Config+0x14>
 802db6a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 802db6e:	d003      	beq.n	802db78 <QSPI_Config+0x14>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 802db70:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802db72:	6805      	ldr	r5, [r0, #0]
 802db74:	3b01      	subs	r3, #1
 802db76:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 802db78:	698b      	ldr	r3, [r1, #24]
 802db7a:	2b00      	cmp	r3, #0
 802db7c:	d03e      	beq.n	802dbfc <QSPI_Config+0x98>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 802db7e:	6a0e      	ldr	r6, [r1, #32]
 802db80:	b306      	cbz	r6, 802dbc4 <QSPI_Config+0x60>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 802db82:	6805      	ldr	r5, [r0, #0]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802db84:	69c8      	ldr	r0, [r1, #28]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 802db86:	688f      	ldr	r7, [r1, #8]
 802db88:	61ef      	str	r7, [r5, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802db8a:	2800      	cmp	r0, #0
 802db8c:	f000 808a 	beq.w	802dca4 <QSPI_Config+0x140>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802db90:	4323      	orrs	r3, r4
 802db92:	4313      	orrs	r3, r2
 802db94:	4333      	orrs	r3, r6
 802db96:	e9d1 460b 	ldrd	r4, r6, [r1, #44]	; 0x2c
 802db9a:	4303      	orrs	r3, r0
 802db9c:	4323      	orrs	r3, r4
 802db9e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 802dba0:	6808      	ldr	r0, [r1, #0]
 802dba2:	4333      	orrs	r3, r6
 802dba4:	e9d1 4603 	ldrd	r4, r6, [r1, #12]
 802dba8:	433b      	orrs	r3, r7
 802dbaa:	4333      	orrs	r3, r6
 802dbac:	4323      	orrs	r3, r4
 802dbae:	694c      	ldr	r4, [r1, #20]
 802dbb0:	4303      	orrs	r3, r0
 802dbb2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dbb6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dbba:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dbbc:	d04c      	beq.n	802dc58 <QSPI_Config+0xf4>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 802dbbe:	684b      	ldr	r3, [r1, #4]
 802dbc0:	61ab      	str	r3, [r5, #24]
 802dbc2:	e049      	b.n	802dc58 <QSPI_Config+0xf4>
                                         cmd->Instruction | FunctionalMode));
      }
    }
    else
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802dbc4:	69cd      	ldr	r5, [r1, #28]
      {
        /*---- Command with instruction and address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dbc6:	431c      	orrs	r4, r3
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802dbc8:	2d00      	cmp	r5, #0
 802dbca:	d07f      	beq.n	802dccc <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dbcc:	e9d1 630b 	ldrd	r6, r3, [r1, #44]	; 0x2c
 802dbd0:	4314      	orrs	r4, r2
 802dbd2:	6807      	ldr	r7, [r0, #0]
 802dbd4:	ea44 0005 	orr.w	r0, r4, r5
 802dbd8:	4330      	orrs	r0, r6
 802dbda:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 802dbdc:	68cc      	ldr	r4, [r1, #12]
 802dbde:	4318      	orrs	r0, r3
 802dbe0:	4328      	orrs	r0, r5
 802dbe2:	680d      	ldr	r5, [r1, #0]
 802dbe4:	694b      	ldr	r3, [r1, #20]
 802dbe6:	4320      	orrs	r0, r4
 802dbe8:	4328      	orrs	r0, r5
 802dbea:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dbee:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dbf2:	6178      	str	r0, [r7, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dbf4:	d030      	beq.n	802dc58 <QSPI_Config+0xf4>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 802dbf6:	684b      	ldr	r3, [r1, #4]
 802dbf8:	61bb      	str	r3, [r7, #24]
 802dbfa:	e02d      	b.n	802dc58 <QSPI_Config+0xf4>
      }
    }
  }
  else
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 802dbfc:	6a0b      	ldr	r3, [r1, #32]
 802dbfe:	b1e3      	cbz	r3, 802dc3a <QSPI_Config+0xd6>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 802dc00:	6806      	ldr	r6, [r0, #0]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802dc02:	69c8      	ldr	r0, [r1, #28]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 802dc04:	688d      	ldr	r5, [r1, #8]
 802dc06:	61f5      	str	r5, [r6, #28]
      {
        /*---- Command with address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc08:	4323      	orrs	r3, r4
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802dc0a:	2800      	cmp	r0, #0
 802dc0c:	d03b      	beq.n	802dc86 <QSPI_Config+0x122>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc0e:	e9d1 540b 	ldrd	r5, r4, [r1, #44]	; 0x2c
 802dc12:	4313      	orrs	r3, r2
 802dc14:	4303      	orrs	r3, r0
 802dc16:	432b      	orrs	r3, r5
 802dc18:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 802dc1a:	6908      	ldr	r0, [r1, #16]
 802dc1c:	4323      	orrs	r3, r4
 802dc1e:	432b      	orrs	r3, r5
 802dc20:	68cd      	ldr	r5, [r1, #12]
 802dc22:	694c      	ldr	r4, [r1, #20]
 802dc24:	4303      	orrs	r3, r0
 802dc26:	432b      	orrs	r3, r5
 802dc28:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dc2c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc30:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dc32:	d011      	beq.n	802dc58 <QSPI_Config+0xf4>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 802dc34:	684b      	ldr	r3, [r1, #4]
 802dc36:	61b3      	str	r3, [r6, #24]
 802dc38:	e00e      	b.n	802dc58 <QSPI_Config+0xf4>
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
      }
    }
    else
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802dc3a:	69cb      	ldr	r3, [r1, #28]
 802dc3c:	b973      	cbnz	r3, 802dc5c <QSPI_Config+0xf8>
        }
      }
      else
      {
        /*---- Command with only data phase ----*/
        if (cmd->DataMode != QSPI_DATA_NONE)
 802dc3e:	b15c      	cbz	r4, 802dc58 <QSPI_Config+0xf4>
        {
          /* Configure QSPI: CCR register with all communications parameters */
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc40:	e9d1 350b 	ldrd	r3, r5, [r1, #44]	; 0x2c
 802dc44:	4323      	orrs	r3, r4
 802dc46:	4313      	orrs	r3, r2
 802dc48:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 802dc4a:	694a      	ldr	r2, [r1, #20]
 802dc4c:	6800      	ldr	r0, [r0, #0]
 802dc4e:	432b      	orrs	r3, r5
 802dc50:	4323      	orrs	r3, r4
 802dc52:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 802dc56:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 802dc58:	bcf0      	pop	{r4, r5, r6, r7}
 802dc5a:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc5c:	4323      	orrs	r3, r4
 802dc5e:	e9d1 540b 	ldrd	r5, r4, [r1, #44]	; 0x2c
 802dc62:	4313      	orrs	r3, r2
 802dc64:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 802dc66:	6800      	ldr	r0, [r0, #0]
 802dc68:	432b      	orrs	r3, r5
 802dc6a:	4323      	orrs	r3, r4
 802dc6c:	68cd      	ldr	r5, [r1, #12]
 802dc6e:	694c      	ldr	r4, [r1, #20]
 802dc70:	4333      	orrs	r3, r6
 802dc72:	432b      	orrs	r3, r5
 802dc74:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dc78:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc7c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802dc7e:	d0eb      	beq.n	802dc58 <QSPI_Config+0xf4>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 802dc80:	684b      	ldr	r3, [r1, #4]
 802dc82:	6183      	str	r3, [r0, #24]
 802dc84:	e7e8      	b.n	802dc58 <QSPI_Config+0xf4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dc86:	e9d1 050b 	ldrd	r0, r5, [r1, #44]	; 0x2c
 802dc8a:	4313      	orrs	r3, r2
 802dc8c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 802dc8e:	4303      	orrs	r3, r0
 802dc90:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 802dc94:	432b      	orrs	r3, r5
 802dc96:	4323      	orrs	r3, r4
 802dc98:	4303      	orrs	r3, r0
 802dc9a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 802dc9e:	6173      	str	r3, [r6, #20]
}
 802dca0:	bcf0      	pop	{r4, r5, r6, r7}
 802dca2:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dca4:	431c      	orrs	r4, r3
 802dca6:	ea44 0302 	orr.w	r3, r4, r2
 802dcaa:	e9d1 020b 	ldrd	r0, r2, [r1, #44]	; 0x2c
 802dcae:	4333      	orrs	r3, r6
 802dcb0:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 802dcb2:	690c      	ldr	r4, [r1, #16]
 802dcb4:	4303      	orrs	r3, r0
 802dcb6:	4313      	orrs	r3, r2
 802dcb8:	6808      	ldr	r0, [r1, #0]
 802dcba:	694a      	ldr	r2, [r1, #20]
 802dcbc:	433b      	orrs	r3, r7
 802dcbe:	4323      	orrs	r3, r4
 802dcc0:	4303      	orrs	r3, r0
 802dcc2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 802dcc6:	616b      	str	r3, [r5, #20]
}
 802dcc8:	bcf0      	pop	{r4, r5, r6, r7}
 802dcca:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dccc:	e9d1 560b 	ldrd	r5, r6, [r1, #44]	; 0x2c
 802dcd0:	ea44 0302 	orr.w	r3, r4, r2
 802dcd4:	432b      	orrs	r3, r5
 802dcd6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 802dcd8:	680c      	ldr	r4, [r1, #0]
 802dcda:	694a      	ldr	r2, [r1, #20]
 802dcdc:	6800      	ldr	r0, [r0, #0]
 802dcde:	4333      	orrs	r3, r6
 802dce0:	432b      	orrs	r3, r5
 802dce2:	4323      	orrs	r3, r4
 802dce4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
}
 802dce8:	bcf0      	pop	{r4, r5, r6, r7}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802dcea:	6143      	str	r3, [r0, #20]
}
 802dcec:	4770      	bx	lr
 802dcee:	bf00      	nop

0802dcf0 <QSPI_WaitFlagStateUntilTimeout>:
{
 802dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dcf4:	9f08      	ldr	r7, [sp, #32]
 802dcf6:	4680      	mov	r8, r0
 802dcf8:	460e      	mov	r6, r1
 802dcfa:	4615      	mov	r5, r2
 802dcfc:	4699      	mov	r9, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 802dcfe:	f8d8 2000 	ldr.w	r2, [r8]
 802dd02:	e001      	b.n	802dd08 <QSPI_WaitFlagStateUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 802dd04:	1c7b      	adds	r3, r7, #1
 802dd06:	d109      	bne.n	802dd1c <QSPI_WaitFlagStateUntilTimeout+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 802dd08:	6894      	ldr	r4, [r2, #8]
 802dd0a:	4234      	tst	r4, r6
 802dd0c:	bf14      	ite	ne
 802dd0e:	2401      	movne	r4, #1
 802dd10:	2400      	moveq	r4, #0
 802dd12:	42ac      	cmp	r4, r5
 802dd14:	d1f6      	bne.n	802dd04 <QSPI_WaitFlagStateUntilTimeout+0x14>
  return HAL_OK;
 802dd16:	2000      	movs	r0, #0
}
 802dd18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802dd1c:	f7fd ffa2 	bl	802bc64 <HAL_GetTick>
 802dd20:	eba0 0009 	sub.w	r0, r0, r9
 802dd24:	42b8      	cmp	r0, r7
 802dd26:	d801      	bhi.n	802dd2c <QSPI_WaitFlagStateUntilTimeout+0x3c>
 802dd28:	2f00      	cmp	r7, #0
 802dd2a:	d1e8      	bne.n	802dcfe <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 802dd2c:	2304      	movs	r3, #4
 802dd2e:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 802dd32:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 802dd36:	f043 0301 	orr.w	r3, r3, #1
 802dd3a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 802dd3e:	2001      	movs	r0, #1
 802dd40:	e7ea      	b.n	802dd18 <QSPI_WaitFlagStateUntilTimeout+0x28>
 802dd42:	bf00      	nop

0802dd44 <HAL_QSPI_MspInit>:
}
 802dd44:	4770      	bx	lr
 802dd46:	bf00      	nop

0802dd48 <HAL_QSPI_Init>:
{
 802dd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dd4a:	4604      	mov	r4, r0
 802dd4c:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 802dd4e:	f7fd ff89 	bl	802bc64 <HAL_GetTick>
  if(hqspi == NULL)
 802dd52:	2c00      	cmp	r4, #0
 802dd54:	d049      	beq.n	802ddea <HAL_QSPI_Init+0xa2>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 802dd56:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 802dd5a:	4607      	mov	r7, r0
 802dd5c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 802dd60:	2a00      	cmp	r2, #0
 802dd62:	d039      	beq.n	802ddd8 <HAL_QSPI_Init+0x90>
 802dd64:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 802dd66:	6825      	ldr	r5, [r4, #0]
 802dd68:	68a1      	ldr	r1, [r4, #8]
 802dd6a:	682a      	ldr	r2, [r5, #0]
 802dd6c:	3901      	subs	r1, #1
 802dd6e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 802dd72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 802dd76:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802dd78:	463b      	mov	r3, r7
 802dd7a:	2200      	movs	r2, #0
 802dd7c:	9600      	str	r6, [sp, #0]
 802dd7e:	2120      	movs	r1, #32
 802dd80:	4620      	mov	r0, r4
 802dd82:	f7ff ffb5 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 802dd86:	b120      	cbz	r0, 802dd92 <HAL_QSPI_Init+0x4a>
  __HAL_UNLOCK(hqspi);
 802dd88:	2300      	movs	r3, #0
 802dd8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802dd8e:	b003      	add	sp, #12
 802dd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 802dd92:	6822      	ldr	r2, [r4, #0]
 802dd94:	69e5      	ldr	r5, [r4, #28]
 802dd96:	68e3      	ldr	r3, [r4, #12]
 802dd98:	6811      	ldr	r1, [r2, #0]
 802dd9a:	6a26      	ldr	r6, [r4, #32]
 802dd9c:	432b      	orrs	r3, r5
 802dd9e:	6865      	ldr	r5, [r4, #4]
 802dda0:	4333      	orrs	r3, r6
 802dda2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 802dda6:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 802ddaa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 802ddae:	430b      	orrs	r3, r1
 802ddb0:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 802ddb2:	e9d4 3705 	ldrd	r3, r7, [r4, #20]
 802ddb6:	6856      	ldr	r6, [r2, #4]
 802ddb8:	6925      	ldr	r5, [r4, #16]
 802ddba:	490d      	ldr	r1, [pc, #52]	; (802ddf0 <HAL_QSPI_Init+0xa8>)
 802ddbc:	433b      	orrs	r3, r7
 802ddbe:	4031      	ands	r1, r6
 802ddc0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 802ddc4:	430b      	orrs	r3, r1
 802ddc6:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 802ddc8:	6813      	ldr	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 802ddca:	2101      	movs	r1, #1
    __HAL_QSPI_ENABLE(hqspi);
 802ddcc:	430b      	orrs	r3, r1
 802ddce:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802ddd0:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 802ddd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 802ddd6:	e7d7      	b.n	802dd88 <HAL_QSPI_Init+0x40>
    hqspi->Lock = HAL_UNLOCKED;
 802ddd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 802dddc:	4620      	mov	r0, r4
  hqspi->Timeout = Timeout;
 802ddde:	f241 3688 	movw	r6, #5000	; 0x1388
    HAL_QSPI_MspInit(hqspi);
 802dde2:	f7ff ffaf 	bl	802dd44 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 802dde6:	64a6      	str	r6, [r4, #72]	; 0x48
}
 802dde8:	e7bd      	b.n	802dd66 <HAL_QSPI_Init+0x1e>
    return HAL_ERROR;
 802ddea:	2001      	movs	r0, #1
}
 802ddec:	b003      	add	sp, #12
 802ddee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ddf0:	ffe0f8fe 	.word	0xffe0f8fe

0802ddf4 <HAL_QSPI_MspDeInit>:
 802ddf4:	4770      	bx	lr
 802ddf6:	bf00      	nop

0802ddf8 <HAL_QSPI_DeInit>:
  if(hqspi == NULL)
 802ddf8:	b180      	cbz	r0, 802de1c <HAL_QSPI_DeInit+0x24>
  __HAL_QSPI_DISABLE(hqspi);
 802ddfa:	6802      	ldr	r2, [r0, #0]
 802ddfc:	6813      	ldr	r3, [r2, #0]
{
 802ddfe:	b510      	push	{r4, lr}
  __HAL_QSPI_DISABLE(hqspi);
 802de00:	f023 0301 	bic.w	r3, r3, #1
 802de04:	4604      	mov	r4, r0
 802de06:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 802de08:	f7ff fff4 	bl	802ddf4 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802de0c:	2300      	movs	r3, #0
 802de0e:	6463      	str	r3, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 802de10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 802de14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 802de18:	4618      	mov	r0, r3
}
 802de1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 802de1c:	2001      	movs	r0, #1
}
 802de1e:	4770      	bx	lr

0802de20 <HAL_QSPI_Command>:
{
 802de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802de24:	4604      	mov	r4, r0
 802de26:	b082      	sub	sp, #8
 802de28:	4616      	mov	r6, r2
 802de2a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 802de2c:	f7fd ff1a 	bl	802bc64 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 802de30:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 802de34:	2a01      	cmp	r2, #1
 802de36:	d02b      	beq.n	802de90 <HAL_QSPI_Command+0x70>
 802de38:	2301      	movs	r3, #1
 802de3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 802de3e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802de42:	2b01      	cmp	r3, #1
 802de44:	fa5f f983 	uxtb.w	r9, r3
 802de48:	d008      	beq.n	802de5c <HAL_QSPI_Command+0x3c>
    status = HAL_BUSY;
 802de4a:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 802de4e:	2300      	movs	r3, #0
}
 802de50:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 802de52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802de56:	b002      	add	sp, #8
 802de58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802de5c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 802de5e:	f04f 0a02 	mov.w	sl, #2
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 802de62:	9600      	str	r6, [sp, #0]
 802de64:	4603      	mov	r3, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802de66:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 802de68:	4605      	mov	r5, r0
 802de6a:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 802de6e:	2120      	movs	r1, #32
 802de70:	4620      	mov	r0, r4
 802de72:	f7ff ff3d 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 802de76:	4680      	mov	r8, r0
 802de78:	2800      	cmp	r0, #0
 802de7a:	d1e8      	bne.n	802de4e <HAL_QSPI_Command+0x2e>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 802de7c:	4602      	mov	r2, r0
 802de7e:	4639      	mov	r1, r7
 802de80:	4620      	mov	r0, r4
 802de82:	f7ff fe6f 	bl	802db64 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 802de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de88:	b143      	cbz	r3, 802de9c <HAL_QSPI_Command+0x7c>
        hqspi->State = HAL_QSPI_STATE_READY;
 802de8a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 802de8e:	e7de      	b.n	802de4e <HAL_QSPI_Command+0x2e>
  __HAL_LOCK(hqspi);
 802de90:	f04f 0802 	mov.w	r8, #2
}
 802de94:	4640      	mov	r0, r8
 802de96:	b002      	add	sp, #8
 802de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 802de9c:	9600      	str	r6, [sp, #0]
 802de9e:	462b      	mov	r3, r5
 802dea0:	464a      	mov	r2, r9
 802dea2:	4651      	mov	r1, sl
 802dea4:	4620      	mov	r0, r4
 802dea6:	f7ff ff23 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 802deaa:	4680      	mov	r8, r0
 802deac:	2800      	cmp	r0, #0
 802deae:	d1ce      	bne.n	802de4e <HAL_QSPI_Command+0x2e>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802deb0:	6823      	ldr	r3, [r4, #0]
 802deb2:	f8c3 a00c 	str.w	sl, [r3, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 802deb6:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 802deba:	e7c8      	b.n	802de4e <HAL_QSPI_Command+0x2e>

0802debc <HAL_QSPI_AutoPolling>:
{
 802debc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802dec0:	4604      	mov	r4, r0
 802dec2:	b083      	sub	sp, #12
 802dec4:	4615      	mov	r5, r2
 802dec6:	4688      	mov	r8, r1
 802dec8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 802deca:	f7fd fecb 	bl	802bc64 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 802dece:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 802ded2:	2a01      	cmp	r2, #1
 802ded4:	d044      	beq.n	802df60 <HAL_QSPI_AutoPolling+0xa4>
 802ded6:	2301      	movs	r3, #1
 802ded8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 802dedc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802dee0:	2b01      	cmp	r3, #1
 802dee2:	fa5f f983 	uxtb.w	r9, r3
 802dee6:	d006      	beq.n	802def6 <HAL_QSPI_AutoPolling+0x3a>
    status = HAL_BUSY;
 802dee8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 802deea:	2300      	movs	r3, #0
 802deec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802def0:	b003      	add	sp, #12
 802def2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 802def6:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802def8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 802defa:	9700      	str	r7, [sp, #0]
 802defc:	4606      	mov	r6, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802defe:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 802df00:	2120      	movs	r1, #32
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 802df02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 802df06:	4603      	mov	r3, r0
 802df08:	4620      	mov	r0, r4
 802df0a:	f7ff fef1 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 802df0e:	2800      	cmp	r0, #0
 802df10:	d1eb      	bne.n	802deea <HAL_QSPI_AutoPolling+0x2e>
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 802df12:	e9d5 1000 	ldrd	r1, r0, [r5]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 802df16:	6822      	ldr	r2, [r4, #0]
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 802df18:	68ab      	ldr	r3, [r5, #8]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 802df1a:	6291      	str	r1, [r2, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 802df1c:	6250      	str	r0, [r2, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 802df1e:	62d3      	str	r3, [r2, #44]	; 0x2c
      cmd->NbData = cfg->StatusBytesSize;
 802df20:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 802df24:	6813      	ldr	r3, [r2, #0]
 802df26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 802df2a:	430b      	orrs	r3, r1
 802df2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802df30:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 802df32:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 802df34:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 802df38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802df3c:	4620      	mov	r0, r4
 802df3e:	f7ff fe11 	bl	802db64 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 802df42:	9700      	str	r7, [sp, #0]
 802df44:	4633      	mov	r3, r6
 802df46:	464a      	mov	r2, r9
 802df48:	2108      	movs	r1, #8
 802df4a:	4620      	mov	r0, r4
 802df4c:	f7ff fed0 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 802df50:	2800      	cmp	r0, #0
 802df52:	d1ca      	bne.n	802deea <HAL_QSPI_AutoPolling+0x2e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 802df54:	6823      	ldr	r3, [r4, #0]
 802df56:	2208      	movs	r2, #8
 802df58:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 802df5a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 802df5e:	e7c4      	b.n	802deea <HAL_QSPI_AutoPolling+0x2e>
  __HAL_LOCK(hqspi);
 802df60:	2002      	movs	r0, #2
}
 802df62:	b003      	add	sp, #12
 802df64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802df68 <HAL_QSPI_MemoryMapped>:
{
 802df68:	b5f0      	push	{r4, r5, r6, r7, lr}
 802df6a:	4604      	mov	r4, r0
 802df6c:	b083      	sub	sp, #12
 802df6e:	460f      	mov	r7, r1
 802df70:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 802df72:	f7fd fe77 	bl	802bc64 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 802df76:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 802df7a:	2b01      	cmp	r3, #1
 802df7c:	d034      	beq.n	802dfe8 <HAL_QSPI_MemoryMapped+0x80>
 802df7e:	2301      	movs	r3, #1
 802df80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 802df84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802df88:	2b01      	cmp	r3, #1
 802df8a:	d006      	beq.n	802df9a <HAL_QSPI_MemoryMapped+0x32>
    status = HAL_BUSY;
 802df8c:	2502      	movs	r5, #2
  __HAL_UNLOCK(hqspi);
 802df8e:	2300      	movs	r3, #0
}
 802df90:	4628      	mov	r0, r5
  __HAL_UNLOCK(hqspi);
 802df92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802df96:	b003      	add	sp, #12
 802df98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802df9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802df9c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 802df9e:	2582      	movs	r5, #130	; 0x82
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802dfa0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802dfa2:	4603      	mov	r3, r0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 802dfa4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802dfa8:	4620      	mov	r0, r4
 802dfaa:	9100      	str	r1, [sp, #0]
 802dfac:	2120      	movs	r1, #32
 802dfae:	f7ff fe9f 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 802dfb2:	4605      	mov	r5, r0
 802dfb4:	2800      	cmp	r0, #0
 802dfb6:	d1ea      	bne.n	802df8e <HAL_QSPI_MemoryMapped+0x26>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 802dfb8:	6822      	ldr	r2, [r4, #0]
 802dfba:	6871      	ldr	r1, [r6, #4]
 802dfbc:	6813      	ldr	r3, [r2, #0]
 802dfbe:	f023 0308 	bic.w	r3, r3, #8
 802dfc2:	430b      	orrs	r3, r1
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 802dfc4:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 802dfc6:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 802dfc8:	d107      	bne.n	802dfda <HAL_QSPI_MemoryMapped+0x72>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 802dfca:	6833      	ldr	r3, [r6, #0]
 802dfcc:	6313      	str	r3, [r2, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 802dfce:	2310      	movs	r3, #16
 802dfd0:	60d3      	str	r3, [r2, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 802dfd2:	6813      	ldr	r3, [r2, #0]
 802dfd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802dfd8:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 802dfda:	4639      	mov	r1, r7
 802dfdc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 802dfe0:	4620      	mov	r0, r4
 802dfe2:	f7ff fdbf 	bl	802db64 <QSPI_Config>
 802dfe6:	e7d2      	b.n	802df8e <HAL_QSPI_MemoryMapped+0x26>
  __HAL_LOCK(hqspi);
 802dfe8:	2502      	movs	r5, #2
}
 802dfea:	4628      	mov	r0, r5
 802dfec:	b003      	add	sp, #12
 802dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802dff0 <HAL_QSPI_Abort>:
{
 802dff0:	b570      	push	{r4, r5, r6, lr}
 802dff2:	4604      	mov	r4, r0
 802dff4:	b082      	sub	sp, #8
  uint32_t tickstart = HAL_GetTick();
 802dff6:	f7fd fe35 	bl	802bc64 <HAL_GetTick>
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 802dffa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 802dffe:	f012 0202 	ands.w	r2, r2, #2
 802e002:	d015      	beq.n	802e030 <HAL_QSPI_Abort+0x40>
    __HAL_UNLOCK(hqspi);
 802e004:	2300      	movs	r3, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 802e006:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(hqspi);
 802e008:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 802e00c:	6813      	ldr	r3, [r2, #0]
 802e00e:	075b      	lsls	r3, r3, #29
 802e010:	4605      	mov	r5, r0
 802e012:	d428      	bmi.n	802e066 <HAL_QSPI_Abort+0x76>
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 802e014:	6811      	ldr	r1, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 802e016:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 802e018:	f041 0102 	orr.w	r1, r1, #2
 802e01c:	6011      	str	r1, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 802e01e:	462b      	mov	r3, r5
 802e020:	9000      	str	r0, [sp, #0]
 802e022:	2201      	movs	r2, #1
 802e024:	2102      	movs	r1, #2
 802e026:	4620      	mov	r0, r4
 802e028:	f7ff fe62 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 802e02c:	4602      	mov	r2, r0
 802e02e:	b110      	cbz	r0, 802e036 <HAL_QSPI_Abort+0x46>
}
 802e030:	4610      	mov	r0, r2
 802e032:	b002      	add	sp, #8
 802e034:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802e036:	6821      	ldr	r1, [r4, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802e038:	6ca0      	ldr	r0, [r4, #72]	; 0x48
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802e03a:	2602      	movs	r6, #2
 802e03c:	60ce      	str	r6, [r1, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 802e03e:	462b      	mov	r3, r5
 802e040:	9000      	str	r0, [sp, #0]
 802e042:	2120      	movs	r1, #32
 802e044:	4620      	mov	r0, r4
 802e046:	f7ff fe53 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 802e04a:	4602      	mov	r2, r0
 802e04c:	2800      	cmp	r0, #0
 802e04e:	d1ef      	bne.n	802e030 <HAL_QSPI_Abort+0x40>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 802e050:	6821      	ldr	r1, [r4, #0]
 802e052:	694b      	ldr	r3, [r1, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 802e054:	2001      	movs	r0, #1
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 802e056:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 802e05a:	614b      	str	r3, [r1, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 802e05c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 802e060:	4610      	mov	r0, r2
 802e062:	b002      	add	sp, #8
 802e064:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 802e066:	6813      	ldr	r3, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 802e068:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 802e06a:	f023 0304 	bic.w	r3, r3, #4
 802e06e:	6013      	str	r3, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 802e070:	f7fd ff74 	bl	802bf5c <HAL_DMA_Abort>
      if(status != HAL_OK)
 802e074:	b908      	cbnz	r0, 802e07a <HAL_QSPI_Abort+0x8a>
 802e076:	6822      	ldr	r2, [r4, #0]
 802e078:	e7cc      	b.n	802e014 <HAL_QSPI_Abort+0x24>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 802e07a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802e07c:	6822      	ldr	r2, [r4, #0]
 802e07e:	f043 0304 	orr.w	r3, r3, #4
 802e082:	6463      	str	r3, [r4, #68]	; 0x44
 802e084:	e7c6      	b.n	802e014 <HAL_QSPI_Abort+0x24>
 802e086:	bf00      	nop

0802e088 <HAL_QSPI_Transmit>:
{
 802e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e08c:	4604      	mov	r4, r0
 802e08e:	b082      	sub	sp, #8
 802e090:	4616      	mov	r6, r2
 802e092:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 802e094:	f7fd fde6 	bl	802bc64 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 802e098:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 802e09c:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
 802e09e:	2a01      	cmp	r2, #1
 802e0a0:	d049      	beq.n	802e136 <HAL_QSPI_Transmit+0xae>
 802e0a2:	2301      	movs	r3, #1
 802e0a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 802e0a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802e0ac:	2b01      	cmp	r3, #1
 802e0ae:	4680      	mov	r8, r0
 802e0b0:	b2d8      	uxtb	r0, r3
 802e0b2:	d006      	beq.n	802e0c2 <HAL_QSPI_Transmit+0x3a>
    status = HAL_BUSY;
 802e0b4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 802e0b6:	2300      	movs	r3, #0
 802e0b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802e0bc:	b002      	add	sp, #8
 802e0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802e0c2:	2300      	movs	r3, #0
 802e0c4:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 802e0c6:	2d00      	cmp	r5, #0
 802e0c8:	d039      	beq.n	802e13e <HAL_QSPI_Transmit+0xb6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 802e0ca:	2312      	movs	r3, #18
 802e0cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 802e0d0:	693b      	ldr	r3, [r7, #16]
 802e0d2:	3301      	adds	r3, #1
 802e0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 802e0d6:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
 802e0d8:	6265      	str	r5, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 802e0da:	3301      	adds	r3, #1
 802e0dc:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 802e0de:	697b      	ldr	r3, [r7, #20]
 802e0e0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 802e0e4:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 802e0e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802e0e8:	b9c3      	cbnz	r3, 802e11c <HAL_QSPI_Transmit+0x94>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 802e0ea:	9600      	str	r6, [sp, #0]
 802e0ec:	4643      	mov	r3, r8
 802e0ee:	2201      	movs	r2, #1
 802e0f0:	2102      	movs	r1, #2
 802e0f2:	4620      	mov	r0, r4
 802e0f4:	f7ff fdfc 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 802e0f8:	b330      	cbz	r0, 802e148 <HAL_QSPI_Transmit+0xc0>
      hqspi->State = HAL_QSPI_STATE_READY;
 802e0fa:	2301      	movs	r3, #1
 802e0fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 802e100:	e7d9      	b.n	802e0b6 <HAL_QSPI_Transmit+0x2e>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 802e102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e104:	781b      	ldrb	r3, [r3, #0]
 802e106:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
 802e10a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 802e10c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 802e10e:	3d01      	subs	r5, #1
 802e110:	62e5      	str	r5, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 802e112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 802e114:	3101      	adds	r1, #1
 802e116:	6261      	str	r1, [r4, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 802e118:	2b00      	cmp	r3, #0
 802e11a:	d0e6      	beq.n	802e0ea <HAL_QSPI_Transmit+0x62>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 802e11c:	9600      	str	r6, [sp, #0]
 802e11e:	4643      	mov	r3, r8
 802e120:	2201      	movs	r2, #1
 802e122:	2104      	movs	r1, #4
 802e124:	4620      	mov	r0, r4
 802e126:	f7ff fde3 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 802e12a:	2800      	cmp	r0, #0
 802e12c:	d0e9      	beq.n	802e102 <HAL_QSPI_Transmit+0x7a>
      hqspi->State = HAL_QSPI_STATE_READY;
 802e12e:	2301      	movs	r3, #1
 802e130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 802e134:	e7bf      	b.n	802e0b6 <HAL_QSPI_Transmit+0x2e>
  __HAL_LOCK(hqspi);
 802e136:	2002      	movs	r0, #2
}
 802e138:	b002      	add	sp, #8
 802e13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 802e13e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802e140:	f043 0308 	orr.w	r3, r3, #8
 802e144:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 802e146:	e7b6      	b.n	802e0b6 <HAL_QSPI_Transmit+0x2e>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802e148:	6823      	ldr	r3, [r4, #0]
 802e14a:	2202      	movs	r2, #2
 802e14c:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 802e14e:	4620      	mov	r0, r4
 802e150:	f7ff ff4e 	bl	802dff0 <HAL_QSPI_Abort>
 802e154:	e7d1      	b.n	802e0fa <HAL_QSPI_Transmit+0x72>
 802e156:	bf00      	nop

0802e158 <HAL_QSPI_Receive>:
{
 802e158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e15c:	4604      	mov	r4, r0
 802e15e:	b082      	sub	sp, #8
 802e160:	460d      	mov	r5, r1
 802e162:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 802e164:	f7fd fd7e 	bl	802bc64 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 802e168:	6827      	ldr	r7, [r4, #0]
 802e16a:	69b9      	ldr	r1, [r7, #24]
  __HAL_LOCK(hqspi);
 802e16c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 802e170:	2a01      	cmp	r2, #1
 802e172:	d04c      	beq.n	802e20e <HAL_QSPI_Receive+0xb6>
 802e174:	2301      	movs	r3, #1
 802e176:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 802e17a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 802e17e:	2b01      	cmp	r3, #1
 802e180:	4680      	mov	r8, r0
 802e182:	b2d8      	uxtb	r0, r3
 802e184:	d006      	beq.n	802e194 <HAL_QSPI_Receive+0x3c>
    status = HAL_BUSY;
 802e186:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 802e188:	2300      	movs	r3, #0
 802e18a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 802e18e:	b002      	add	sp, #8
 802e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 802e194:	2300      	movs	r3, #0
 802e196:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 802e198:	2d00      	cmp	r5, #0
 802e19a:	d03c      	beq.n	802e216 <HAL_QSPI_Receive+0xbe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 802e19c:	2322      	movs	r3, #34	; 0x22
 802e19e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 802e1a2:	693b      	ldr	r3, [r7, #16]
 802e1a4:	3301      	adds	r3, #1
 802e1a6:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 802e1a8:	693b      	ldr	r3, [r7, #16]
      hqspi->pRxBuffPtr = pData;
 802e1aa:	6325      	str	r5, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 802e1ac:	3301      	adds	r3, #1
 802e1ae:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 802e1b0:	697b      	ldr	r3, [r7, #20]
 802e1b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 802e1b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802e1ba:	617b      	str	r3, [r7, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 802e1bc:	61b9      	str	r1, [r7, #24]
      while(hqspi->RxXferCount > 0U)
 802e1be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802e1c0:	b9c3      	cbnz	r3, 802e1f4 <HAL_QSPI_Receive+0x9c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 802e1c2:	9600      	str	r6, [sp, #0]
 802e1c4:	4643      	mov	r3, r8
 802e1c6:	2201      	movs	r2, #1
 802e1c8:	2102      	movs	r1, #2
 802e1ca:	4620      	mov	r0, r4
 802e1cc:	f7ff fd90 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 802e1d0:	b330      	cbz	r0, 802e220 <HAL_QSPI_Receive+0xc8>
      hqspi->State = HAL_QSPI_STATE_READY;
 802e1d2:	2301      	movs	r3, #1
 802e1d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 802e1d8:	e7d6      	b.n	802e188 <HAL_QSPI_Receive+0x30>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 802e1da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802e1dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 802e1e0:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 802e1e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 802e1e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 802e1e6:	3d01      	subs	r5, #1
 802e1e8:	63a5      	str	r5, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 802e1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 802e1ec:	3101      	adds	r1, #1
 802e1ee:	6321      	str	r1, [r4, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 802e1f0:	2b00      	cmp	r3, #0
 802e1f2:	d0e6      	beq.n	802e1c2 <HAL_QSPI_Receive+0x6a>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 802e1f4:	9600      	str	r6, [sp, #0]
 802e1f6:	4643      	mov	r3, r8
 802e1f8:	2201      	movs	r2, #1
 802e1fa:	2106      	movs	r1, #6
 802e1fc:	4620      	mov	r0, r4
 802e1fe:	f7ff fd77 	bl	802dcf0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 802e202:	2800      	cmp	r0, #0
 802e204:	d0e9      	beq.n	802e1da <HAL_QSPI_Receive+0x82>
      hqspi->State = HAL_QSPI_STATE_READY;
 802e206:	2301      	movs	r3, #1
 802e208:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 802e20c:	e7bc      	b.n	802e188 <HAL_QSPI_Receive+0x30>
  __HAL_LOCK(hqspi);
 802e20e:	2002      	movs	r0, #2
}
 802e210:	b002      	add	sp, #8
 802e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 802e216:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802e218:	f043 0308 	orr.w	r3, r3, #8
 802e21c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 802e21e:	e7b3      	b.n	802e188 <HAL_QSPI_Receive+0x30>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802e220:	6823      	ldr	r3, [r4, #0]
 802e222:	2202      	movs	r2, #2
 802e224:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 802e226:	4620      	mov	r0, r4
 802e228:	f7ff fee2 	bl	802dff0 <HAL_QSPI_Abort>
 802e22c:	e7d1      	b.n	802e1d2 <HAL_QSPI_Receive+0x7a>
 802e22e:	bf00      	nop

0802e230 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802e230:	4917      	ldr	r1, [pc, #92]	; (802e290 <HAL_RCC_GetSysClockFreq+0x60>)
{
 802e232:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802e234:	688b      	ldr	r3, [r1, #8]
 802e236:	f003 030c 	and.w	r3, r3, #12
 802e23a:	2b04      	cmp	r3, #4
 802e23c:	d01b      	beq.n	802e276 <HAL_RCC_GetSysClockFreq+0x46>
 802e23e:	2b08      	cmp	r3, #8
 802e240:	d117      	bne.n	802e272 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802e242:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802e244:	684b      	ldr	r3, [r1, #4]
 802e246:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802e24a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802e24e:	d114      	bne.n	802e27a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802e250:	6849      	ldr	r1, [r1, #4]
 802e252:	4810      	ldr	r0, [pc, #64]	; (802e294 <HAL_RCC_GetSysClockFreq+0x64>)
 802e254:	f3c1 1188 	ubfx	r1, r1, #6, #9
 802e258:	fba1 0100 	umull	r0, r1, r1, r0
 802e25c:	f7ef fa6c 	bl	801d738 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802e260:	4b0b      	ldr	r3, [pc, #44]	; (802e290 <HAL_RCC_GetSysClockFreq+0x60>)
 802e262:	685b      	ldr	r3, [r3, #4]
 802e264:	f3c3 4301 	ubfx	r3, r3, #16, #2
 802e268:	3301      	adds	r3, #1
 802e26a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 802e26c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 802e270:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 802e272:	4808      	ldr	r0, [pc, #32]	; (802e294 <HAL_RCC_GetSysClockFreq+0x64>)
}
 802e274:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802e276:	4808      	ldr	r0, [pc, #32]	; (802e298 <HAL_RCC_GetSysClockFreq+0x68>)
}
 802e278:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802e27a:	684b      	ldr	r3, [r1, #4]
 802e27c:	4806      	ldr	r0, [pc, #24]	; (802e298 <HAL_RCC_GetSysClockFreq+0x68>)
 802e27e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 802e282:	fba3 0100 	umull	r0, r1, r3, r0
 802e286:	2300      	movs	r3, #0
 802e288:	f7ef fa56 	bl	801d738 <__aeabi_uldivmod>
 802e28c:	e7e8      	b.n	802e260 <HAL_RCC_GetSysClockFreq+0x30>
 802e28e:	bf00      	nop
 802e290:	40023800 	.word	0x40023800
 802e294:	00f42400 	.word	0x00f42400
 802e298:	007a1200 	.word	0x007a1200

0802e29c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 802e29c:	2800      	cmp	r0, #0
 802e29e:	f000 8087 	beq.w	802e3b0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802e2a2:	4a48      	ldr	r2, [pc, #288]	; (802e3c4 <HAL_RCC_ClockConfig+0x128>)
 802e2a4:	6813      	ldr	r3, [r2, #0]
 802e2a6:	f003 030f 	and.w	r3, r3, #15
 802e2aa:	428b      	cmp	r3, r1
{
 802e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e2b0:	460d      	mov	r5, r1
 802e2b2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802e2b4:	d209      	bcs.n	802e2ca <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802e2b6:	b2cb      	uxtb	r3, r1
 802e2b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802e2ba:	6813      	ldr	r3, [r2, #0]
 802e2bc:	f003 030f 	and.w	r3, r3, #15
 802e2c0:	428b      	cmp	r3, r1
 802e2c2:	d002      	beq.n	802e2ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 802e2c4:	2001      	movs	r0, #1
}
 802e2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802e2ca:	6823      	ldr	r3, [r4, #0]
 802e2cc:	0798      	lsls	r0, r3, #30
 802e2ce:	d514      	bpl.n	802e2fa <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802e2d0:	0759      	lsls	r1, r3, #29
 802e2d2:	d504      	bpl.n	802e2de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802e2d4:	493c      	ldr	r1, [pc, #240]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e2d6:	688a      	ldr	r2, [r1, #8]
 802e2d8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 802e2dc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802e2de:	071a      	lsls	r2, r3, #28
 802e2e0:	d504      	bpl.n	802e2ec <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802e2e2:	4939      	ldr	r1, [pc, #228]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e2e4:	688a      	ldr	r2, [r1, #8]
 802e2e6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 802e2ea:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802e2ec:	4936      	ldr	r1, [pc, #216]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e2ee:	68a0      	ldr	r0, [r4, #8]
 802e2f0:	688a      	ldr	r2, [r1, #8]
 802e2f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 802e2f6:	4302      	orrs	r2, r0
 802e2f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802e2fa:	07df      	lsls	r7, r3, #31
 802e2fc:	d521      	bpl.n	802e342 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802e2fe:	6862      	ldr	r2, [r4, #4]
 802e300:	2a01      	cmp	r2, #1
 802e302:	d057      	beq.n	802e3b4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802e304:	1e93      	subs	r3, r2, #2
 802e306:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802e308:	4b2f      	ldr	r3, [pc, #188]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e30a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802e30c:	d94d      	bls.n	802e3aa <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802e30e:	0799      	lsls	r1, r3, #30
 802e310:	d5d8      	bpl.n	802e2c4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802e312:	4e2d      	ldr	r6, [pc, #180]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e314:	68b3      	ldr	r3, [r6, #8]
 802e316:	f023 0303 	bic.w	r3, r3, #3
 802e31a:	4313      	orrs	r3, r2
 802e31c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 802e31e:	f7fd fca1 	bl	802bc64 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802e322:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 802e326:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802e328:	e004      	b.n	802e334 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802e32a:	f7fd fc9b 	bl	802bc64 <HAL_GetTick>
 802e32e:	1bc0      	subs	r0, r0, r7
 802e330:	4540      	cmp	r0, r8
 802e332:	d844      	bhi.n	802e3be <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802e334:	68b3      	ldr	r3, [r6, #8]
 802e336:	6862      	ldr	r2, [r4, #4]
 802e338:	f003 030c 	and.w	r3, r3, #12
 802e33c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 802e340:	d1f3      	bne.n	802e32a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802e342:	4a20      	ldr	r2, [pc, #128]	; (802e3c4 <HAL_RCC_ClockConfig+0x128>)
 802e344:	6813      	ldr	r3, [r2, #0]
 802e346:	f003 030f 	and.w	r3, r3, #15
 802e34a:	42ab      	cmp	r3, r5
 802e34c:	d906      	bls.n	802e35c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802e34e:	b2eb      	uxtb	r3, r5
 802e350:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802e352:	6813      	ldr	r3, [r2, #0]
 802e354:	f003 030f 	and.w	r3, r3, #15
 802e358:	42ab      	cmp	r3, r5
 802e35a:	d1b3      	bne.n	802e2c4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802e35c:	6823      	ldr	r3, [r4, #0]
 802e35e:	075a      	lsls	r2, r3, #29
 802e360:	d506      	bpl.n	802e370 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802e362:	4919      	ldr	r1, [pc, #100]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e364:	68e0      	ldr	r0, [r4, #12]
 802e366:	688a      	ldr	r2, [r1, #8]
 802e368:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 802e36c:	4302      	orrs	r2, r0
 802e36e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802e370:	071b      	lsls	r3, r3, #28
 802e372:	d507      	bpl.n	802e384 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802e374:	4a14      	ldr	r2, [pc, #80]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e376:	6921      	ldr	r1, [r4, #16]
 802e378:	6893      	ldr	r3, [r2, #8]
 802e37a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 802e37e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 802e382:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802e384:	f7ff ff54 	bl	802e230 <HAL_RCC_GetSysClockFreq>
 802e388:	4a0f      	ldr	r2, [pc, #60]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e38a:	4c10      	ldr	r4, [pc, #64]	; (802e3cc <HAL_RCC_ClockConfig+0x130>)
 802e38c:	6892      	ldr	r2, [r2, #8]
 802e38e:	4910      	ldr	r1, [pc, #64]	; (802e3d0 <HAL_RCC_ClockConfig+0x134>)
 802e390:	f3c2 1203 	ubfx	r2, r2, #4, #4
 802e394:	4603      	mov	r3, r0
 802e396:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 802e398:	480e      	ldr	r0, [pc, #56]	; (802e3d4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802e39a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 802e39c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802e39e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 802e3a0:	f7fd fc16 	bl	802bbd0 <HAL_InitTick>
  return HAL_OK;
 802e3a4:	2000      	movs	r0, #0
}
 802e3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802e3aa:	0198      	lsls	r0, r3, #6
 802e3ac:	d4b1      	bmi.n	802e312 <HAL_RCC_ClockConfig+0x76>
 802e3ae:	e789      	b.n	802e2c4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 802e3b0:	2001      	movs	r0, #1
}
 802e3b2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802e3b4:	4b04      	ldr	r3, [pc, #16]	; (802e3c8 <HAL_RCC_ClockConfig+0x12c>)
 802e3b6:	681b      	ldr	r3, [r3, #0]
 802e3b8:	039e      	lsls	r6, r3, #14
 802e3ba:	d4aa      	bmi.n	802e312 <HAL_RCC_ClockConfig+0x76>
 802e3bc:	e782      	b.n	802e2c4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 802e3be:	2003      	movs	r0, #3
 802e3c0:	e781      	b.n	802e2c6 <HAL_RCC_ClockConfig+0x2a>
 802e3c2:	bf00      	nop
 802e3c4:	40023c00 	.word	0x40023c00
 802e3c8:	40023800 	.word	0x40023800
 802e3cc:	0803991c 	.word	0x0803991c
 802e3d0:	20000040 	.word	0x20000040
 802e3d4:	20000068 	.word	0x20000068

0802e3d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802e3d8:	4b04      	ldr	r3, [pc, #16]	; (802e3ec <HAL_RCC_GetPCLK1Freq+0x14>)
 802e3da:	4a05      	ldr	r2, [pc, #20]	; (802e3f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 802e3dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 802e3de:	4905      	ldr	r1, [pc, #20]	; (802e3f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802e3e0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 802e3e4:	6808      	ldr	r0, [r1, #0]
 802e3e6:	5cd3      	ldrb	r3, [r2, r3]
}
 802e3e8:	40d8      	lsrs	r0, r3
 802e3ea:	4770      	bx	lr
 802e3ec:	40023800 	.word	0x40023800
 802e3f0:	0803992c 	.word	0x0803992c
 802e3f4:	20000040 	.word	0x20000040

0802e3f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802e3f8:	4b04      	ldr	r3, [pc, #16]	; (802e40c <HAL_RCC_GetPCLK2Freq+0x14>)
 802e3fa:	4a05      	ldr	r2, [pc, #20]	; (802e410 <HAL_RCC_GetPCLK2Freq+0x18>)
 802e3fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 802e3fe:	4905      	ldr	r1, [pc, #20]	; (802e414 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802e400:	f3c3 3342 	ubfx	r3, r3, #13, #3
 802e404:	6808      	ldr	r0, [r1, #0]
 802e406:	5cd3      	ldrb	r3, [r2, r3]
}
 802e408:	40d8      	lsrs	r0, r3
 802e40a:	4770      	bx	lr
 802e40c:	40023800 	.word	0x40023800
 802e410:	0803992c 	.word	0x0803992c
 802e414:	20000040 	.word	0x20000040

0802e418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802e418:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 802e41a:	6803      	ldr	r3, [r0, #0]
 802e41c:	0619      	lsls	r1, r3, #24
{
 802e41e:	b083      	sub	sp, #12
 802e420:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 802e422:	d508      	bpl.n	802e436 <HAL_RCCEx_PeriphCLKConfig+0x1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802e424:	49ad      	ldr	r1, [pc, #692]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e426:	6b40      	ldr	r0, [r0, #52]	; 0x34
 802e428:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 802e42c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 802e430:	4302      	orrs	r2, r0
 802e432:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 802e436:	05da      	lsls	r2, r3, #23
 802e438:	d508      	bpl.n	802e44c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 802e43a:	49a8      	ldr	r1, [pc, #672]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e43c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 802e43e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 802e442:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 802e446:	4302      	orrs	r2, r0
 802e448:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802e44c:	f013 0f43 	tst.w	r3, #67	; 0x43
 802e450:	f040 809e 	bne.w	802e590 <HAL_RCCEx_PeriphCLKConfig+0x178>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 802e454:	f013 0f0c 	tst.w	r3, #12
 802e458:	d113      	bne.n	802e482 <HAL_RCCEx_PeriphCLKConfig+0x6a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 802e45a:	061a      	lsls	r2, r3, #24
 802e45c:	d503      	bpl.n	802e466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 802e45e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 802e460:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 802e464:	d00d      	beq.n	802e482 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802e466:	0698      	lsls	r0, r3, #26
 802e468:	f100 80e5 	bmi.w	802e636 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 802e46c:	f013 0310 	ands.w	r3, r3, #16
 802e470:	f000 80de 	beq.w	802e630 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802e474:	4b9a      	ldr	r3, [pc, #616]	; (802e6e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 802e476:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 802e47a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802e47c:	2000      	movs	r0, #0
}
 802e47e:	b003      	add	sp, #12
 802e480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 802e482:	4b98      	ldr	r3, [pc, #608]	; (802e6e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802e484:	4e95      	ldr	r6, [pc, #596]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    __HAL_RCC_PLLSAI_DISABLE();
 802e486:	2200      	movs	r2, #0
 802e488:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 802e48a:	f7fd fbeb 	bl	802bc64 <HAL_GetTick>
 802e48e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802e490:	e004      	b.n	802e49c <HAL_RCCEx_PeriphCLKConfig+0x84>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802e492:	f7fd fbe7 	bl	802bc64 <HAL_GetTick>
 802e496:	1b43      	subs	r3, r0, r5
 802e498:	2b02      	cmp	r3, #2
 802e49a:	d876      	bhi.n	802e58a <HAL_RCCEx_PeriphCLKConfig+0x172>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802e49c:	6833      	ldr	r3, [r6, #0]
 802e49e:	009f      	lsls	r7, r3, #2
 802e4a0:	d4f7      	bmi.n	802e492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 802e4a2:	6822      	ldr	r2, [r4, #0]
 802e4a4:	0750      	lsls	r0, r2, #29
 802e4a6:	d51a      	bpl.n	802e4de <HAL_RCCEx_PeriphCLKConfig+0xc6>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 802e4a8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 802e4ac:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 802e4b0:	6920      	ldr	r0, [r4, #16]
 802e4b2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 802e4b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e4ba:	430b      	orrs	r3, r1
 802e4bc:	69a1      	ldr	r1, [r4, #24]
 802e4be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 802e4c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 802e4c6:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 802e4ca:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 802e4ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e4d0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 802e4d4:	3901      	subs	r1, #1
 802e4d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 802e4da:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 802e4de:	0711      	lsls	r1, r2, #28
 802e4e0:	d519      	bpl.n	802e516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 802e4e2:	497e      	ldr	r1, [pc, #504]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 802e4e4:	6925      	ldr	r5, [r4, #16]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 802e4e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802e4ea:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 802e4ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e4f2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 802e4f6:	4303      	orrs	r3, r0
 802e4f8:	69e0      	ldr	r0, [r4, #28]
 802e4fa:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 802e4fe:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 802e502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 802e506:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 802e50a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802e50c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 802e510:	4303      	orrs	r3, r0
 802e512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 802e516:	0613      	lsls	r3, r2, #24
 802e518:	d517      	bpl.n	802e54a <HAL_RCCEx_PeriphCLKConfig+0x132>
 802e51a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e51c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802e520:	d113      	bne.n	802e54a <HAL_RCCEx_PeriphCLKConfig+0x132>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802e522:	496e      	ldr	r1, [pc, #440]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 802e524:	6962      	ldr	r2, [r4, #20]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802e526:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 802e52a:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 802e52e:	6920      	ldr	r0, [r4, #16]
 802e530:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 802e534:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 802e538:	432b      	orrs	r3, r5
 802e53a:	0852      	lsrs	r2, r2, #1
 802e53c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 802e540:	3a01      	subs	r2, #1
 802e542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 802e54a:	4b66      	ldr	r3, [pc, #408]	; (802e6e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802e54c:	4e63      	ldr	r6, [pc, #396]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    __HAL_RCC_PLLSAI_ENABLE();
 802e54e:	2201      	movs	r2, #1
 802e550:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 802e552:	f7fd fb87 	bl	802bc64 <HAL_GetTick>
 802e556:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802e558:	e004      	b.n	802e564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802e55a:	f7fd fb83 	bl	802bc64 <HAL_GetTick>
 802e55e:	1b40      	subs	r0, r0, r5
 802e560:	2802      	cmp	r0, #2
 802e562:	d812      	bhi.n	802e58a <HAL_RCCEx_PeriphCLKConfig+0x172>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802e564:	6833      	ldr	r3, [r6, #0]
 802e566:	009f      	lsls	r7, r3, #2
 802e568:	d5f7      	bpl.n	802e55a <HAL_RCCEx_PeriphCLKConfig+0x142>
 802e56a:	6823      	ldr	r3, [r4, #0]
 802e56c:	e77b      	b.n	802e466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 802e56e:	f7fd fb79 	bl	802bc64 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802e572:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 802e576:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802e578:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802e57a:	079b      	lsls	r3, r3, #30
 802e57c:	f100 80a1 	bmi.w	802e6c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802e580:	f7fd fb70 	bl	802bc64 <HAL_GetTick>
 802e584:	1b80      	subs	r0, r0, r6
 802e586:	42b8      	cmp	r0, r7
 802e588:	d9f6      	bls.n	802e578 <HAL_RCCEx_PeriphCLKConfig+0x160>
        return HAL_TIMEOUT;
 802e58a:	2003      	movs	r0, #3
}
 802e58c:	b003      	add	sp, #12
 802e58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 802e590:	4b55      	ldr	r3, [pc, #340]	; (802e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802e592:	4e52      	ldr	r6, [pc, #328]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    __HAL_RCC_PLLI2S_DISABLE();
 802e594:	2200      	movs	r2, #0
 802e596:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 802e598:	f7fd fb64 	bl	802bc64 <HAL_GetTick>
 802e59c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802e59e:	e004      	b.n	802e5aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802e5a0:	f7fd fb60 	bl	802bc64 <HAL_GetTick>
 802e5a4:	1b43      	subs	r3, r0, r5
 802e5a6:	2b02      	cmp	r3, #2
 802e5a8:	d8ef      	bhi.n	802e58a <HAL_RCCEx_PeriphCLKConfig+0x172>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802e5aa:	6833      	ldr	r3, [r6, #0]
 802e5ac:	011b      	lsls	r3, r3, #4
 802e5ae:	d4f7      	bmi.n	802e5a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 802e5b0:	6823      	ldr	r3, [r4, #0]
 802e5b2:	07df      	lsls	r7, r3, #31
 802e5b4:	d506      	bpl.n	802e5c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802e5b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 802e5ba:	0712      	lsls	r2, r2, #28
 802e5bc:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802e5c0:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 802e5c4:	079d      	lsls	r5, r3, #30
 802e5c6:	d515      	bpl.n	802e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 802e5c8:	4944      	ldr	r1, [pc, #272]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 802e5ca:	68e2      	ldr	r2, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 802e5cc:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 802e5d0:	6865      	ldr	r5, [r4, #4]
 802e5d2:	0612      	lsls	r2, r2, #24
 802e5d4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 802e5d8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 802e5dc:	4302      	orrs	r2, r0
 802e5de:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 802e5e2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 802e5e6:	6a22      	ldr	r2, [r4, #32]
 802e5e8:	f020 001f 	bic.w	r0, r0, #31
 802e5ec:	3a01      	subs	r2, #1
 802e5ee:	4302      	orrs	r2, r0
 802e5f0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 802e5f4:	0658      	lsls	r0, r3, #25
 802e5f6:	d509      	bpl.n	802e60c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 802e5f8:	1d20      	adds	r0, r4, #4
 802e5fa:	c80b      	ldmia	r0, {r0, r1, r3}
 802e5fc:	061b      	lsls	r3, r3, #24
 802e5fe:	4a37      	ldr	r2, [pc, #220]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e600:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 802e604:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 802e608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 802e60c:	4b36      	ldr	r3, [pc, #216]	; (802e6e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802e60e:	4e33      	ldr	r6, [pc, #204]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    __HAL_RCC_PLLI2S_ENABLE();
 802e610:	2201      	movs	r2, #1
 802e612:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 802e614:	f7fd fb26 	bl	802bc64 <HAL_GetTick>
 802e618:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802e61a:	e004      	b.n	802e626 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802e61c:	f7fd fb22 	bl	802bc64 <HAL_GetTick>
 802e620:	1b40      	subs	r0, r0, r5
 802e622:	2802      	cmp	r0, #2
 802e624:	d8b1      	bhi.n	802e58a <HAL_RCCEx_PeriphCLKConfig+0x172>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802e626:	6833      	ldr	r3, [r6, #0]
 802e628:	0119      	lsls	r1, r3, #4
 802e62a:	d5f7      	bpl.n	802e61c <HAL_RCCEx_PeriphCLKConfig+0x204>
 802e62c:	6823      	ldr	r3, [r4, #0]
 802e62e:	e711      	b.n	802e454 <HAL_RCCEx_PeriphCLKConfig+0x3c>
  return HAL_OK;
 802e630:	4618      	mov	r0, r3
}
 802e632:	b003      	add	sp, #12
 802e634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 802e636:	4b29      	ldr	r3, [pc, #164]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    PWR->CR |= PWR_CR_DBP;
 802e638:	4d2c      	ldr	r5, [pc, #176]	; (802e6ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 802e63a:	2200      	movs	r2, #0
 802e63c:	9201      	str	r2, [sp, #4]
 802e63e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802e640:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802e644:	641a      	str	r2, [r3, #64]	; 0x40
 802e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802e64c:	9301      	str	r3, [sp, #4]
 802e64e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 802e650:	682b      	ldr	r3, [r5, #0]
 802e652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e656:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 802e658:	f7fd fb04 	bl	802bc64 <HAL_GetTick>
 802e65c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802e65e:	e004      	b.n	802e66a <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802e660:	f7fd fb00 	bl	802bc64 <HAL_GetTick>
 802e664:	1b80      	subs	r0, r0, r6
 802e666:	2802      	cmp	r0, #2
 802e668:	d88f      	bhi.n	802e58a <HAL_RCCEx_PeriphCLKConfig+0x172>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802e66a:	682b      	ldr	r3, [r5, #0]
 802e66c:	05d9      	lsls	r1, r3, #23
 802e66e:	d5f7      	bpl.n	802e660 <HAL_RCCEx_PeriphCLKConfig+0x248>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802e670:	4d1a      	ldr	r5, [pc, #104]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802e672:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802e674:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802e676:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 802e67a:	d111      	bne.n	802e6a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 802e67c:	f403 7240 	and.w	r2, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802e680:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 802e684:	d01f      	beq.n	802e6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 802e686:	4915      	ldr	r1, [pc, #84]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e688:	688a      	ldr	r2, [r1, #8]
 802e68a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 802e68e:	608a      	str	r2, [r1, #8]
 802e690:	4a12      	ldr	r2, [pc, #72]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e692:	6f11      	ldr	r1, [r2, #112]	; 0x70
 802e694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e698:	430b      	orrs	r3, r1
 802e69a:	6713      	str	r3, [r2, #112]	; 0x70
 802e69c:	6823      	ldr	r3, [r4, #0]
 802e69e:	e6e5      	b.n	802e46c <HAL_RCCEx_PeriphCLKConfig+0x54>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802e6a0:	f403 7140 	and.w	r1, r3, #768	; 0x300
 802e6a4:	4291      	cmp	r1, r2
 802e6a6:	d0eb      	beq.n	802e680 <HAL_RCCEx_PeriphCLKConfig+0x268>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802e6a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 802e6aa:	4a11      	ldr	r2, [pc, #68]	; (802e6f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802e6ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 802e6b0:	2001      	movs	r0, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 802e6b2:	2100      	movs	r1, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 802e6b4:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802e6b6:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 802e6b8:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802e6ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802e6bc:	07da      	lsls	r2, r3, #31
 802e6be:	f53f af56 	bmi.w	802e56e <HAL_RCCEx_PeriphCLKConfig+0x156>
 802e6c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802e6c4:	e7da      	b.n	802e67c <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802e6c6:	4805      	ldr	r0, [pc, #20]	; (802e6dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 802e6c8:	6882      	ldr	r2, [r0, #8]
 802e6ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 802e6ce:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 802e6d2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 802e6d6:	430a      	orrs	r2, r1
 802e6d8:	6082      	str	r2, [r0, #8]
 802e6da:	e7d9      	b.n	802e690 <HAL_RCCEx_PeriphCLKConfig+0x278>
 802e6dc:	40023800 	.word	0x40023800
 802e6e0:	424711e0 	.word	0x424711e0
 802e6e4:	42470070 	.word	0x42470070
 802e6e8:	42470068 	.word	0x42470068
 802e6ec:	40007000 	.word	0x40007000
 802e6f0:	42470e40 	.word	0x42470e40

0802e6f4 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC       |\
                                        RCC_PERIPHCLK_TIM        | RCC_PERIPHCLK_RTC        |\
                                        RCC_PERIPHCLK_CLK48       | RCC_PERIPHCLK_SDIO;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 802e6f4:	4b24      	ldr	r3, [pc, #144]	; (802e788 <HAL_RCCEx_GetPeriphCLKConfig+0x94>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S        | RCC_PERIPHCLK_SAI_PLLSAI |\
 802e6f6:	f240 12bf 	movw	r2, #447	; 0x1bf
 802e6fa:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 802e6fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e700:	f3c2 1288 	ubfx	r2, r2, #6, #9
 802e704:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 802e706:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e70a:	f3c2 7202 	ubfx	r2, r2, #28, #3
 802e70e:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 802e710:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e714:	f3c2 6203 	ubfx	r2, r2, #24, #4
 802e718:	60c2      	str	r2, [r0, #12]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 802e71a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802e71e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 802e722:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 802e724:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802e728:	f3c2 7202 	ubfx	r2, r2, #28, #3
 802e72c:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802e72e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802e732:	f3c2 6203 	ubfx	r2, r2, #24, #4
 802e736:	6182      	str	r2, [r0, #24]
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 802e738:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802e73c:	f002 021f 	and.w	r2, r2, #31
 802e740:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 802e742:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802e746:	f3c2 2204 	ubfx	r2, r2, #8, #5
 802e74a:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
 802e74c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802e750:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 802e754:	6282      	str	r2, [r0, #40]	; 0x28
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 802e756:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 802e758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 802e75a:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 802e75e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 802e762:	430a      	orrs	r2, r1
 802e764:	62c2      	str	r2, [r0, #44]	; 0x2c

    /* Get the CLK48 clock configuration -------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 802e766:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802e76a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802e76e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 802e770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802e774:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 802e778:	6382      	str	r2, [r0, #56]	; 0x38

  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 802e77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e77e:	f3c3 6300 	ubfx	r3, r3, #24, #1
 802e782:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 802e786:	4770      	bx	lr
 802e788:	40023800 	.word	0x40023800

0802e78c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802e78c:	2800      	cmp	r0, #0
 802e78e:	f000 81ac 	beq.w	802eaea <HAL_RCC_OscConfig+0x35e>
{
 802e792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802e796:	6803      	ldr	r3, [r0, #0]
 802e798:	07dd      	lsls	r5, r3, #31
{
 802e79a:	b082      	sub	sp, #8
 802e79c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802e79e:	d52f      	bpl.n	802e800 <HAL_RCC_OscConfig+0x74>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802e7a0:	49ac      	ldr	r1, [pc, #688]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e7a2:	688a      	ldr	r2, [r1, #8]
 802e7a4:	f002 020c 	and.w	r2, r2, #12
 802e7a8:	2a04      	cmp	r2, #4
 802e7aa:	f000 80ec 	beq.w	802e986 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802e7ae:	688a      	ldr	r2, [r1, #8]
 802e7b0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802e7b4:	2a08      	cmp	r2, #8
 802e7b6:	f000 80e2 	beq.w	802e97e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802e7ba:	6863      	ldr	r3, [r4, #4]
 802e7bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e7c0:	f000 80eb 	beq.w	802e99a <HAL_RCC_OscConfig+0x20e>
 802e7c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802e7c8:	f000 817f 	beq.w	802eaca <HAL_RCC_OscConfig+0x33e>
 802e7cc:	4da1      	ldr	r5, [pc, #644]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e7ce:	682a      	ldr	r2, [r5, #0]
 802e7d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 802e7d4:	602a      	str	r2, [r5, #0]
 802e7d6:	682a      	ldr	r2, [r5, #0]
 802e7d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802e7dc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802e7de:	2b00      	cmp	r3, #0
 802e7e0:	f040 80e0 	bne.w	802e9a4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802e7e4:	f7fd fa3e 	bl	802bc64 <HAL_GetTick>
 802e7e8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802e7ea:	e005      	b.n	802e7f8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802e7ec:	f7fd fa3a 	bl	802bc64 <HAL_GetTick>
 802e7f0:	1b80      	subs	r0, r0, r6
 802e7f2:	2864      	cmp	r0, #100	; 0x64
 802e7f4:	f200 8100 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802e7f8:	682b      	ldr	r3, [r5, #0]
 802e7fa:	039b      	lsls	r3, r3, #14
 802e7fc:	d4f6      	bmi.n	802e7ec <HAL_RCC_OscConfig+0x60>
 802e7fe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802e800:	079f      	lsls	r7, r3, #30
 802e802:	d528      	bpl.n	802e856 <HAL_RCC_OscConfig+0xca>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802e804:	4a93      	ldr	r2, [pc, #588]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e806:	6891      	ldr	r1, [r2, #8]
 802e808:	f011 0f0c 	tst.w	r1, #12
 802e80c:	f000 8090 	beq.w	802e930 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802e810:	6891      	ldr	r1, [r2, #8]
 802e812:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802e816:	2908      	cmp	r1, #8
 802e818:	f000 8086 	beq.w	802e928 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802e81c:	68e3      	ldr	r3, [r4, #12]
 802e81e:	2b00      	cmp	r3, #0
 802e820:	f000 8106 	beq.w	802ea30 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802e824:	4b8c      	ldr	r3, [pc, #560]	; (802ea58 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802e826:	4e8b      	ldr	r6, [pc, #556]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 802e828:	2201      	movs	r2, #1
 802e82a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 802e82c:	f7fd fa1a 	bl	802bc64 <HAL_GetTick>
 802e830:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802e832:	e005      	b.n	802e840 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802e834:	f7fd fa16 	bl	802bc64 <HAL_GetTick>
 802e838:	1b40      	subs	r0, r0, r5
 802e83a:	2802      	cmp	r0, #2
 802e83c:	f200 80dc 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802e840:	6833      	ldr	r3, [r6, #0]
 802e842:	0798      	lsls	r0, r3, #30
 802e844:	d5f6      	bpl.n	802e834 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802e846:	6833      	ldr	r3, [r6, #0]
 802e848:	6922      	ldr	r2, [r4, #16]
 802e84a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802e84e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 802e852:	6033      	str	r3, [r6, #0]
 802e854:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802e856:	071a      	lsls	r2, r3, #28
 802e858:	d452      	bmi.n	802e900 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802e85a:	0758      	lsls	r0, r3, #29
 802e85c:	d52f      	bpl.n	802e8be <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802e85e:	4a7d      	ldr	r2, [pc, #500]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e860:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802e862:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 802e866:	d07e      	beq.n	802e966 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 802e868:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802e86a:	4e7c      	ldr	r6, [pc, #496]	; (802ea5c <HAL_RCC_OscConfig+0x2d0>)
 802e86c:	6833      	ldr	r3, [r6, #0]
 802e86e:	05d9      	lsls	r1, r3, #23
 802e870:	f140 80b2 	bpl.w	802e9d8 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802e874:	68a3      	ldr	r3, [r4, #8]
 802e876:	2b01      	cmp	r3, #1
 802e878:	f000 80c2 	beq.w	802ea00 <HAL_RCC_OscConfig+0x274>
 802e87c:	2b05      	cmp	r3, #5
 802e87e:	f000 8136 	beq.w	802eaee <HAL_RCC_OscConfig+0x362>
 802e882:	4e74      	ldr	r6, [pc, #464]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e884:	6f32      	ldr	r2, [r6, #112]	; 0x70
 802e886:	f022 0201 	bic.w	r2, r2, #1
 802e88a:	6732      	str	r2, [r6, #112]	; 0x70
 802e88c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 802e88e:	f022 0204 	bic.w	r2, r2, #4
 802e892:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802e894:	2b00      	cmp	r3, #0
 802e896:	f040 80b8 	bne.w	802ea0a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802e89a:	f7fd f9e3 	bl	802bc64 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802e89e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 802e8a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802e8a4:	e005      	b.n	802e8b2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802e8a6:	f7fd f9dd 	bl	802bc64 <HAL_GetTick>
 802e8aa:	1bc0      	subs	r0, r0, r7
 802e8ac:	4540      	cmp	r0, r8
 802e8ae:	f200 80a3 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802e8b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 802e8b4:	0798      	lsls	r0, r3, #30
 802e8b6:	d4f6      	bmi.n	802e8a6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802e8b8:	2d00      	cmp	r5, #0
 802e8ba:	f040 8110 	bne.w	802eade <HAL_RCC_OscConfig+0x352>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802e8be:	69a0      	ldr	r0, [r4, #24]
 802e8c0:	b1d0      	cbz	r0, 802e8f8 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802e8c2:	4d64      	ldr	r5, [pc, #400]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e8c4:	68ab      	ldr	r3, [r5, #8]
 802e8c6:	f003 030c 	and.w	r3, r3, #12
 802e8ca:	2b08      	cmp	r3, #8
 802e8cc:	f000 80cc 	beq.w	802ea68 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802e8d0:	4b63      	ldr	r3, [pc, #396]	; (802ea60 <HAL_RCC_OscConfig+0x2d4>)
 802e8d2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802e8d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 802e8d6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802e8d8:	f000 8113 	beq.w	802eb02 <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802e8dc:	f7fd f9c2 	bl	802bc64 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802e8e0:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 802e8e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802e8e4:	e005      	b.n	802e8f2 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802e8e6:	f7fd f9bd 	bl	802bc64 <HAL_GetTick>
 802e8ea:	1b40      	subs	r0, r0, r5
 802e8ec:	2802      	cmp	r0, #2
 802e8ee:	f200 8083 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802e8f2:	6823      	ldr	r3, [r4, #0]
 802e8f4:	019b      	lsls	r3, r3, #6
 802e8f6:	d4f6      	bmi.n	802e8e6 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 802e8f8:	2000      	movs	r0, #0
}
 802e8fa:	b002      	add	sp, #8
 802e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802e900:	6963      	ldr	r3, [r4, #20]
 802e902:	b303      	cbz	r3, 802e946 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 802e904:	4b57      	ldr	r3, [pc, #348]	; (802ea64 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802e906:	4e53      	ldr	r6, [pc, #332]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 802e908:	2201      	movs	r2, #1
 802e90a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 802e90c:	f7fd f9aa 	bl	802bc64 <HAL_GetTick>
 802e910:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802e912:	e004      	b.n	802e91e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802e914:	f7fd f9a6 	bl	802bc64 <HAL_GetTick>
 802e918:	1b40      	subs	r0, r0, r5
 802e91a:	2802      	cmp	r0, #2
 802e91c:	d86c      	bhi.n	802e9f8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802e91e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 802e920:	079b      	lsls	r3, r3, #30
 802e922:	d5f7      	bpl.n	802e914 <HAL_RCC_OscConfig+0x188>
 802e924:	6823      	ldr	r3, [r4, #0]
 802e926:	e798      	b.n	802e85a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802e928:	6852      	ldr	r2, [r2, #4]
 802e92a:	0256      	lsls	r6, r2, #9
 802e92c:	f53f af76 	bmi.w	802e81c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802e930:	4a48      	ldr	r2, [pc, #288]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e932:	6812      	ldr	r2, [r2, #0]
 802e934:	0795      	lsls	r5, r2, #30
 802e936:	d543      	bpl.n	802e9c0 <HAL_RCC_OscConfig+0x234>
 802e938:	68e2      	ldr	r2, [r4, #12]
 802e93a:	2a01      	cmp	r2, #1
 802e93c:	d040      	beq.n	802e9c0 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 802e93e:	2001      	movs	r0, #1
}
 802e940:	b002      	add	sp, #8
 802e942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 802e946:	4a47      	ldr	r2, [pc, #284]	; (802ea64 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802e948:	4e42      	ldr	r6, [pc, #264]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 802e94a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 802e94c:	f7fd f98a 	bl	802bc64 <HAL_GetTick>
 802e950:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802e952:	e004      	b.n	802e95e <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802e954:	f7fd f986 	bl	802bc64 <HAL_GetTick>
 802e958:	1b40      	subs	r0, r0, r5
 802e95a:	2802      	cmp	r0, #2
 802e95c:	d84c      	bhi.n	802e9f8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802e95e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 802e960:	079f      	lsls	r7, r3, #30
 802e962:	d4f7      	bmi.n	802e954 <HAL_RCC_OscConfig+0x1c8>
 802e964:	e7de      	b.n	802e924 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 802e966:	9301      	str	r3, [sp, #4]
 802e968:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802e96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e96e:	6413      	str	r3, [r2, #64]	; 0x40
 802e970:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802e972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802e976:	9301      	str	r3, [sp, #4]
 802e978:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 802e97a:	2501      	movs	r5, #1
 802e97c:	e775      	b.n	802e86a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802e97e:	684a      	ldr	r2, [r1, #4]
 802e980:	0250      	lsls	r0, r2, #9
 802e982:	f57f af1a 	bpl.w	802e7ba <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802e986:	4a33      	ldr	r2, [pc, #204]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e988:	6812      	ldr	r2, [r2, #0]
 802e98a:	0391      	lsls	r1, r2, #14
 802e98c:	f57f af38 	bpl.w	802e800 <HAL_RCC_OscConfig+0x74>
 802e990:	6862      	ldr	r2, [r4, #4]
 802e992:	2a00      	cmp	r2, #0
 802e994:	f47f af34 	bne.w	802e800 <HAL_RCC_OscConfig+0x74>
 802e998:	e7d1      	b.n	802e93e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802e99a:	4a2e      	ldr	r2, [pc, #184]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e99c:	6813      	ldr	r3, [r2, #0]
 802e99e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802e9a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 802e9a4:	f7fd f95e 	bl	802bc64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802e9a8:	4e2a      	ldr	r6, [pc, #168]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 802e9aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802e9ac:	e004      	b.n	802e9b8 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802e9ae:	f7fd f959 	bl	802bc64 <HAL_GetTick>
 802e9b2:	1b40      	subs	r0, r0, r5
 802e9b4:	2864      	cmp	r0, #100	; 0x64
 802e9b6:	d81f      	bhi.n	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802e9b8:	6833      	ldr	r3, [r6, #0]
 802e9ba:	039a      	lsls	r2, r3, #14
 802e9bc:	d5f7      	bpl.n	802e9ae <HAL_RCC_OscConfig+0x222>
 802e9be:	e71e      	b.n	802e7fe <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802e9c0:	4924      	ldr	r1, [pc, #144]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802e9c2:	6920      	ldr	r0, [r4, #16]
 802e9c4:	680a      	ldr	r2, [r1, #0]
 802e9c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 802e9ca:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 802e9ce:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802e9d0:	071a      	lsls	r2, r3, #28
 802e9d2:	f57f af42 	bpl.w	802e85a <HAL_RCC_OscConfig+0xce>
 802e9d6:	e793      	b.n	802e900 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802e9d8:	6833      	ldr	r3, [r6, #0]
 802e9da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e9de:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 802e9e0:	f7fd f940 	bl	802bc64 <HAL_GetTick>
 802e9e4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802e9e6:	6833      	ldr	r3, [r6, #0]
 802e9e8:	05da      	lsls	r2, r3, #23
 802e9ea:	f53f af43 	bmi.w	802e874 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802e9ee:	f7fd f939 	bl	802bc64 <HAL_GetTick>
 802e9f2:	1bc0      	subs	r0, r0, r7
 802e9f4:	2802      	cmp	r0, #2
 802e9f6:	d9f6      	bls.n	802e9e6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 802e9f8:	2003      	movs	r0, #3
}
 802e9fa:	b002      	add	sp, #8
 802e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802ea00:	4a14      	ldr	r2, [pc, #80]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
 802ea02:	6f13      	ldr	r3, [r2, #112]	; 0x70
 802ea04:	f043 0301 	orr.w	r3, r3, #1
 802ea08:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 802ea0a:	f7fd f92b 	bl	802bc64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802ea0e:	4f11      	ldr	r7, [pc, #68]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 802ea10:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802ea12:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802ea16:	e004      	b.n	802ea22 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802ea18:	f7fd f924 	bl	802bc64 <HAL_GetTick>
 802ea1c:	1b80      	subs	r0, r0, r6
 802ea1e:	4540      	cmp	r0, r8
 802ea20:	d8ea      	bhi.n	802e9f8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802ea22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802ea24:	079b      	lsls	r3, r3, #30
 802ea26:	d5f7      	bpl.n	802ea18 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 802ea28:	2d00      	cmp	r5, #0
 802ea2a:	f43f af48 	beq.w	802e8be <HAL_RCC_OscConfig+0x132>
 802ea2e:	e056      	b.n	802eade <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_HSI_DISABLE();
 802ea30:	4a09      	ldr	r2, [pc, #36]	; (802ea58 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802ea32:	4e08      	ldr	r6, [pc, #32]	; (802ea54 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 802ea34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 802ea36:	f7fd f915 	bl	802bc64 <HAL_GetTick>
 802ea3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802ea3c:	e004      	b.n	802ea48 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802ea3e:	f7fd f911 	bl	802bc64 <HAL_GetTick>
 802ea42:	1b40      	subs	r0, r0, r5
 802ea44:	2802      	cmp	r0, #2
 802ea46:	d8d7      	bhi.n	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802ea48:	6833      	ldr	r3, [r6, #0]
 802ea4a:	0799      	lsls	r1, r3, #30
 802ea4c:	d4f7      	bmi.n	802ea3e <HAL_RCC_OscConfig+0x2b2>
 802ea4e:	6823      	ldr	r3, [r4, #0]
 802ea50:	e701      	b.n	802e856 <HAL_RCC_OscConfig+0xca>
 802ea52:	bf00      	nop
 802ea54:	40023800 	.word	0x40023800
 802ea58:	42470000 	.word	0x42470000
 802ea5c:	40007000 	.word	0x40007000
 802ea60:	42470060 	.word	0x42470060
 802ea64:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802ea68:	2801      	cmp	r0, #1
 802ea6a:	f43f af46 	beq.w	802e8fa <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 802ea6e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802ea70:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802ea72:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802ea76:	4291      	cmp	r1, r2
 802ea78:	f47f af61 	bne.w	802e93e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802ea7c:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802ea7e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802ea82:	4291      	cmp	r1, r2
 802ea84:	f47f af5b 	bne.w	802e93e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802ea88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802ea8a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 802ea8e:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802ea90:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 802ea94:	f47f af53 	bne.w	802e93e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802ea98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802ea9a:	0852      	lsrs	r2, r2, #1
 802ea9c:	3a01      	subs	r2, #1
 802ea9e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802eaa2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 802eaa6:	f47f af4a 	bne.w	802e93e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 802eaaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802eaac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802eab0:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 802eab4:	f47f af43 	bne.w	802e93e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 802eab8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802eaba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 802eabe:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 802eac2:	bf14      	ite	ne
 802eac4:	2001      	movne	r0, #1
 802eac6:	2000      	moveq	r0, #0
 802eac8:	e717      	b.n	802e8fa <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802eaca:	4b26      	ldr	r3, [pc, #152]	; (802eb64 <HAL_RCC_OscConfig+0x3d8>)
 802eacc:	681a      	ldr	r2, [r3, #0]
 802eace:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 802ead2:	601a      	str	r2, [r3, #0]
 802ead4:	681a      	ldr	r2, [r3, #0]
 802ead6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 802eada:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802eadc:	e762      	b.n	802e9a4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 802eade:	4a21      	ldr	r2, [pc, #132]	; (802eb64 <HAL_RCC_OscConfig+0x3d8>)
 802eae0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802eae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802eae6:	6413      	str	r3, [r2, #64]	; 0x40
 802eae8:	e6e9      	b.n	802e8be <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 802eaea:	2001      	movs	r0, #1
}
 802eaec:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802eaee:	4b1d      	ldr	r3, [pc, #116]	; (802eb64 <HAL_RCC_OscConfig+0x3d8>)
 802eaf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802eaf2:	f042 0204 	orr.w	r2, r2, #4
 802eaf6:	671a      	str	r2, [r3, #112]	; 0x70
 802eaf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802eafa:	f042 0201 	orr.w	r2, r2, #1
 802eafe:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802eb00:	e783      	b.n	802ea0a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 802eb02:	f7fd f8af 	bl	802bc64 <HAL_GetTick>
 802eb06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802eb08:	e005      	b.n	802eb16 <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802eb0a:	f7fd f8ab 	bl	802bc64 <HAL_GetTick>
 802eb0e:	1b80      	subs	r0, r0, r6
 802eb10:	2802      	cmp	r0, #2
 802eb12:	f63f af71 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802eb16:	682b      	ldr	r3, [r5, #0]
 802eb18:	0199      	lsls	r1, r3, #6
 802eb1a:	d4f6      	bmi.n	802eb0a <HAL_RCC_OscConfig+0x37e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802eb1c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 802eb20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802eb22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802eb24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802eb26:	4313      	orrs	r3, r2
 802eb28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802eb2a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 802eb2e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 802eb32:	0852      	lsrs	r2, r2, #1
 802eb34:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 802eb38:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 802eb3a:	490b      	ldr	r1, [pc, #44]	; (802eb68 <HAL_RCC_OscConfig+0x3dc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802eb3c:	4e09      	ldr	r6, [pc, #36]	; (802eb64 <HAL_RCC_OscConfig+0x3d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802eb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 802eb42:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802eb44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 802eb46:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 802eb48:	f7fd f88c 	bl	802bc64 <HAL_GetTick>
 802eb4c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802eb4e:	e005      	b.n	802eb5c <HAL_RCC_OscConfig+0x3d0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802eb50:	f7fd f888 	bl	802bc64 <HAL_GetTick>
 802eb54:	1b00      	subs	r0, r0, r4
 802eb56:	2802      	cmp	r0, #2
 802eb58:	f63f af4e 	bhi.w	802e9f8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802eb5c:	6833      	ldr	r3, [r6, #0]
 802eb5e:	019a      	lsls	r2, r3, #6
 802eb60:	d5f6      	bpl.n	802eb50 <HAL_RCC_OscConfig+0x3c4>
 802eb62:	e6c9      	b.n	802e8f8 <HAL_RCC_OscConfig+0x16c>
 802eb64:	40023800 	.word	0x40023800
 802eb68:	42470060 	.word	0x42470060

0802eb6c <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 802eb6c:	6803      	ldr	r3, [r0, #0]
{
 802eb6e:	b470      	push	{r4, r5, r6}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 802eb70:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 802eb72:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 802eb74:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 802eb76:	604c      	str	r4, [r1, #4]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 802eb78:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 802eb7c:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 802eb80:	f3c3 4405 	ubfx	r4, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 802eb84:	f005 0640 	and.w	r6, r5, #64	; 0x40
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 802eb88:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 802eb8a:	f3c3 2006 	ubfx	r0, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 802eb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 802eb92:	70ce      	strb	r6, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 802eb94:	700c      	strb	r4, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 802eb96:	7048      	strb	r0, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 802eb98:	708b      	strb	r3, [r1, #2]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 802eb9a:	b9ba      	cbnz	r2, 802ebcc <HAL_RTC_GetTime+0x60>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 802eb9c:	0902      	lsrs	r2, r0, #4
 802eb9e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 802eba2:	0924      	lsrs	r4, r4, #4
 802eba4:	091a      	lsrs	r2, r3, #4
 802eba6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 802ebaa:	f005 050f 	and.w	r5, r5, #15
 802ebae:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 802ebb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 802ebb6:	f003 030f 	and.w	r3, r3, #15
 802ebba:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 802ebbe:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 802ebc2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 802ebc6:	700c      	strb	r4, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 802ebc8:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 802ebca:	708b      	strb	r3, [r1, #2]
}
 802ebcc:	2000      	movs	r0, #0
 802ebce:	bc70      	pop	{r4, r5, r6}
 802ebd0:	4770      	bx	lr
 802ebd2:	bf00      	nop

0802ebd4 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 802ebd4:	6803      	ldr	r3, [r0, #0]
 802ebd6:	685b      	ldr	r3, [r3, #4]
{
 802ebd8:	b470      	push	{r4, r5, r6}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 802ebda:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 802ebde:	f3c3 3642 	ubfx	r6, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 802ebe2:	f3c3 4407 	ubfx	r4, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 802ebe6:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 802ebea:	700e      	strb	r6, [r1, #0]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 802ebec:	70cc      	strb	r4, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 802ebee:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 802ebf0:	7088      	strb	r0, [r1, #2]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 802ebf2:	f3c3 2307 	ubfx	r3, r3, #8, #8
  if(Format == RTC_FORMAT_BIN)
 802ebf6:	b9ba      	cbnz	r2, 802ec28 <HAL_RTC_GetDate+0x54>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 802ebf8:	092d      	lsrs	r5, r5, #4
 802ebfa:	00aa      	lsls	r2, r5, #2
 802ebfc:	0926      	lsrs	r6, r4, #4
 802ebfe:	4415      	add	r5, r2
 802ec00:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 802ec02:	f003 030f 	and.w	r3, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 802ec06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 802ec0a:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 802ec0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 802ec12:	f000 000f 	and.w	r0, r0, #15
 802ec16:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802ec1a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802ec1e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 802ec22:	704b      	strb	r3, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 802ec24:	70cc      	strb	r4, [r1, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 802ec26:	7088      	strb	r0, [r1, #2]
}
 802ec28:	2000      	movs	r0, #0
 802ec2a:	bc70      	pop	{r4, r5, r6}
 802ec2c:	4770      	bx	lr
 802ec2e:	bf00      	nop

0802ec30 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802ec30:	6802      	ldr	r2, [r0, #0]
{
 802ec32:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802ec34:	68d3      	ldr	r3, [r2, #12]
 802ec36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802ec3a:	60d3      	str	r3, [r2, #12]
{
 802ec3c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 802ec3e:	f7fd f811 	bl	802bc64 <HAL_GetTick>
 802ec42:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 802ec44:	e005      	b.n	802ec52 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 802ec46:	f7fd f80d 	bl	802bc64 <HAL_GetTick>
 802ec4a:	1b43      	subs	r3, r0, r5
 802ec4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ec50:	d805      	bhi.n	802ec5e <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 802ec52:	6823      	ldr	r3, [r4, #0]
 802ec54:	68db      	ldr	r3, [r3, #12]
 802ec56:	069b      	lsls	r3, r3, #26
 802ec58:	d5f5      	bpl.n	802ec46 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 802ec5a:	2000      	movs	r0, #0
}
 802ec5c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 802ec5e:	2003      	movs	r0, #3
}
 802ec60:	bd38      	pop	{r3, r4, r5, pc}
 802ec62:	bf00      	nop

0802ec64 <RTC_EnterInitMode>:
{
 802ec64:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 802ec66:	6803      	ldr	r3, [r0, #0]
 802ec68:	68da      	ldr	r2, [r3, #12]
 802ec6a:	0652      	lsls	r2, r2, #25
 802ec6c:	d501      	bpl.n	802ec72 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 802ec6e:	2000      	movs	r0, #0
}
 802ec70:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 802ec72:	f04f 32ff 	mov.w	r2, #4294967295
 802ec76:	60da      	str	r2, [r3, #12]
 802ec78:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 802ec7a:	f7fc fff3 	bl	802bc64 <HAL_GetTick>
 802ec7e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 802ec80:	6823      	ldr	r3, [r4, #0]
 802ec82:	68db      	ldr	r3, [r3, #12]
 802ec84:	065b      	lsls	r3, r3, #25
 802ec86:	d4f2      	bmi.n	802ec6e <RTC_EnterInitMode+0xa>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 802ec88:	f7fc ffec 	bl	802bc64 <HAL_GetTick>
 802ec8c:	1b43      	subs	r3, r0, r5
 802ec8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ec92:	d9f5      	bls.n	802ec80 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 802ec94:	2003      	movs	r0, #3
}
 802ec96:	bd38      	pop	{r3, r4, r5, pc}

0802ec98 <HAL_RTC_Init>:
{
 802ec98:	b570      	push	{r4, r5, r6, lr}
  if(hrtc == NULL)
 802ec9a:	2800      	cmp	r0, #0
 802ec9c:	d04f      	beq.n	802ed3e <HAL_RTC_Init+0xa6>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 802ec9e:	7f43      	ldrb	r3, [r0, #29]
 802eca0:	4604      	mov	r4, r0
 802eca2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802eca6:	2b00      	cmp	r3, #0
 802eca8:	d043      	beq.n	802ed32 <HAL_RTC_Init+0x9a>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802ecaa:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ecac:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802ecae:	21ca      	movs	r1, #202	; 0xca
 802ecb0:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ecb2:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802ecb4:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802ecb6:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802ecb8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802ecba:	f7ff ffd3 	bl	802ec64 <RTC_EnterInitMode>
 802ecbe:	4605      	mov	r5, r0
 802ecc0:	2800      	cmp	r0, #0
 802ecc2:	d12e      	bne.n	802ed22 <HAL_RTC_Init+0x8a>
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802ecc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802ecc8:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802ecca:	e9d4 6004 	ldrd	r6, r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802ecce:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 802ecd2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 802ecd6:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802ecd8:	6899      	ldr	r1, [r3, #8]
 802ecda:	4332      	orrs	r2, r6
 802ecdc:	4302      	orrs	r2, r0
 802ecde:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802ece0:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802ece2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802ece4:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 802ece6:	691a      	ldr	r2, [r3, #16]
 802ece8:	68a1      	ldr	r1, [r4, #8]
 802ecea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802ecee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 802ecf0:	68da      	ldr	r2, [r3, #12]
 802ecf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802ecf6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 802ecf8:	689a      	ldr	r2, [r3, #8]
 802ecfa:	0692      	lsls	r2, r2, #26
 802ecfc:	d50d      	bpl.n	802ed1a <HAL_RTC_Init+0x82>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 802ecfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802ed00:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 802ed02:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 802ed06:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802ed08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 802ed0a:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802ed0c:	4302      	orrs	r2, r0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ed0e:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802ed10:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ed12:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 802ed14:	7761      	strb	r1, [r4, #29]
}
 802ed16:	4628      	mov	r0, r5
 802ed18:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802ed1a:	4620      	mov	r0, r4
 802ed1c:	f7ff ff88 	bl	802ec30 <HAL_RTC_WaitForSynchro>
 802ed20:	b158      	cbz	r0, 802ed3a <HAL_RTC_Init+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ed22:	6822      	ldr	r2, [r4, #0]
 802ed24:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ed26:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ed28:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 802ed2a:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ed2c:	7763      	strb	r3, [r4, #29]
}
 802ed2e:	4628      	mov	r0, r5
 802ed30:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 802ed32:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 802ed34:	f7fa fe18 	bl	8029968 <HAL_RTC_MspInit>
 802ed38:	e7b7      	b.n	802ecaa <HAL_RTC_Init+0x12>
 802ed3a:	6823      	ldr	r3, [r4, #0]
 802ed3c:	e7df      	b.n	802ecfe <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 802ed3e:	2501      	movs	r5, #1
}
 802ed40:	4628      	mov	r0, r5
 802ed42:	bd70      	pop	{r4, r5, r6, pc}

0802ed44 <HAL_RTC_SetTime>:
{
 802ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed46:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 802ed48:	7f00      	ldrb	r0, [r0, #28]
 802ed4a:	2801      	cmp	r0, #1
 802ed4c:	f000 8093 	beq.w	802ee76 <HAL_RTC_SetTime+0x132>
 802ed50:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ed52:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 802ed54:	2101      	movs	r1, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 802ed56:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hrtc);
 802ed58:	7729      	strb	r1, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ed5a:	776b      	strb	r3, [r5, #29]
  if(Format == RTC_FORMAT_BIN)
 802ed5c:	2a00      	cmp	r2, #0
 802ed5e:	d040      	beq.n	802ede2 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 802ed60:	6884      	ldr	r4, [r0, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 802ed62:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 802ed64:	7831      	ldrb	r1, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 802ed66:	78b2      	ldrb	r2, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 802ed68:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 802ed6c:	bf14      	ite	ne
 802ed6e:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 802ed70:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 802ed72:	ea4f 2303 	mov.w	r3, r3, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 802ed76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802ed7a:	bf18      	it	ne
 802ed7c:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 802ed7e:	4313      	orrs	r3, r2
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 802ed80:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802ed82:	22ca      	movs	r2, #202	; 0xca
 802ed84:	2353      	movs	r3, #83	; 0x53
 802ed86:	6242      	str	r2, [r0, #36]	; 0x24
 802ed88:	6243      	str	r3, [r0, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802ed8a:	4628      	mov	r0, r5
 802ed8c:	f7ff ff6a 	bl	802ec64 <RTC_EnterInitMode>
 802ed90:	4607      	mov	r7, r0
 802ed92:	2800      	cmp	r0, #0
 802ed94:	d15d      	bne.n	802ee52 <HAL_RTC_SetTime+0x10e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802ed96:	682a      	ldr	r2, [r5, #0]
 802ed98:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 802ed9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802eda0:	e9d6 1403 	ldrd	r1, r4, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802eda4:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 802eda6:	6890      	ldr	r0, [r2, #8]
 802eda8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 802edac:	6090      	str	r0, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802edae:	6890      	ldr	r0, [r2, #8]
 802edb0:	ea41 0304 	orr.w	r3, r1, r4
 802edb4:	4303      	orrs	r3, r0
 802edb6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 802edb8:	68d3      	ldr	r3, [r2, #12]
 802edba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802edbe:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 802edc0:	6893      	ldr	r3, [r2, #8]
 802edc2:	069b      	lsls	r3, r3, #26
 802edc4:	d405      	bmi.n	802edd2 <HAL_RTC_SetTime+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802edc6:	4628      	mov	r0, r5
 802edc8:	f7ff ff32 	bl	802ec30 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802edcc:	682a      	ldr	r2, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802edce:	2800      	cmp	r0, #0
 802edd0:	d149      	bne.n	802ee66 <HAL_RTC_SetTime+0x122>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802edd2:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 802edd4:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc);
 802edd6:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802edd8:	6250      	str	r0, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 802edda:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc);
 802eddc:	772b      	strb	r3, [r5, #28]
}
 802edde:	4638      	mov	r0, r7
 802ede0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 802ede2:	6883      	ldr	r3, [r0, #8]
 802ede4:	f013 0c40 	ands.w	ip, r3, #64	; 0x40
 802ede8:	bf16      	itet	ne
 802edea:	78f3      	ldrbne	r3, [r6, #3]
      sTime->TimeFormat = 0x00U;
 802edec:	f886 c003 	strbeq.w	ip, [r6, #3]
 802edf0:	ea4f 4c03 	movne.w	ip, r3, lsl #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 802edf4:	7833      	ldrb	r3, [r6, #0]
  while(Value >= 10U)
 802edf6:	2b09      	cmp	r3, #9
 802edf8:	d909      	bls.n	802ee0e <HAL_RTC_SetTime+0xca>
  uint32_t bcdhigh = 0U;
 802edfa:	2100      	movs	r1, #0
    Value -= 10U;
 802edfc:	3b0a      	subs	r3, #10
 802edfe:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 802ee00:	2b09      	cmp	r3, #9
    bcdhigh++;
 802ee02:	f101 0101 	add.w	r1, r1, #1
  while(Value >= 10U)
 802ee06:	d8f9      	bhi.n	802edfc <HAL_RTC_SetTime+0xb8>
 802ee08:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 802ee0c:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 802ee0e:	7877      	ldrb	r7, [r6, #1]
  while(Value >= 10U)
 802ee10:	2f09      	cmp	r7, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 802ee12:	ea4f 4103 	mov.w	r1, r3, lsl #16
  while(Value >= 10U)
 802ee16:	d909      	bls.n	802ee2c <HAL_RTC_SetTime+0xe8>
  uint32_t bcdhigh = 0U;
 802ee18:	2300      	movs	r3, #0
    Value -= 10U;
 802ee1a:	3f0a      	subs	r7, #10
 802ee1c:	b2ff      	uxtb	r7, r7
  while(Value >= 10U)
 802ee1e:	2f09      	cmp	r7, #9
    bcdhigh++;
 802ee20:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 802ee24:	d8f9      	bhi.n	802ee1a <HAL_RTC_SetTime+0xd6>
 802ee26:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 802ee2a:	b2ff      	uxtb	r7, r7
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 802ee2c:	78b4      	ldrb	r4, [r6, #2]
  while(Value >= 10U)
 802ee2e:	2c09      	cmp	r4, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 802ee30:	ea4f 2707 	mov.w	r7, r7, lsl #8
  while(Value >= 10U)
 802ee34:	d908      	bls.n	802ee48 <HAL_RTC_SetTime+0x104>
    Value -= 10U;
 802ee36:	3c0a      	subs	r4, #10
 802ee38:	b2e4      	uxtb	r4, r4
  while(Value >= 10U)
 802ee3a:	2c09      	cmp	r4, #9
    bcdhigh++;
 802ee3c:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 802ee40:	d8f9      	bhi.n	802ee36 <HAL_RTC_SetTime+0xf2>
 802ee42:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 802ee46:	b2e4      	uxtb	r4, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 802ee48:	ea41 030c 	orr.w	r3, r1, ip
 802ee4c:	433b      	orrs	r3, r7
 802ee4e:	431c      	orrs	r4, r3
 802ee50:	e797      	b.n	802ed82 <HAL_RTC_SetTime+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ee52:	6829      	ldr	r1, [r5, #0]
 802ee54:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 802ee56:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 802ee58:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ee5a:	6248      	str	r0, [r1, #36]	; 0x24
    return HAL_ERROR;
 802ee5c:	2701      	movs	r7, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 802ee5e:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 802ee60:	772b      	strb	r3, [r5, #28]
}
 802ee62:	4638      	mov	r0, r7
 802ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ee66:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ee68:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ee6a:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 802ee6c:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ee6e:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 802ee70:	2701      	movs	r7, #1
}
 802ee72:	4638      	mov	r0, r7
 802ee74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 802ee76:	2702      	movs	r7, #2
}
 802ee78:	4638      	mov	r0, r7
 802ee7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802ee7c <HAL_RTC_SetDate>:
{
 802ee7c:	b570      	push	{r4, r5, r6, lr}
 802ee7e:	4606      	mov	r6, r0
 __HAL_LOCK(hrtc);
 802ee80:	7f00      	ldrb	r0, [r0, #28]
 802ee82:	2801      	cmp	r0, #1
 802ee84:	f000 8083 	beq.w	802ef8e <HAL_RTC_SetDate+0x112>
 802ee88:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ee8a:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 802ee8c:	7730      	strb	r0, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 802ee8e:	7773      	strb	r3, [r6, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802ee90:	2a00      	cmp	r2, #0
 802ee92:	d02f      	beq.n	802eef4 <HAL_RTC_SetDate+0x78>
                  (((uint32_t)sDate->Month) << 8U) | \
 802ee94:	784b      	ldrb	r3, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 802ee96:	78c8      	ldrb	r0, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 802ee98:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 802ee9a:	780c      	ldrb	r4, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 802ee9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 802ee9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 802eea2:	4313      	orrs	r3, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 802eea4:	ea43 3444 	orr.w	r4, r3, r4, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802eea8:	6833      	ldr	r3, [r6, #0]
 802eeaa:	21ca      	movs	r1, #202	; 0xca
 802eeac:	2253      	movs	r2, #83	; 0x53
 802eeae:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802eeb0:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802eeb2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 802eeb4:	f7ff fed6 	bl	802ec64 <RTC_EnterInitMode>
 802eeb8:	4605      	mov	r5, r0
 802eeba:	2800      	cmp	r0, #0
 802eebc:	d151      	bne.n	802ef62 <HAL_RTC_SetDate+0xe6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802eebe:	6832      	ldr	r2, [r6, #0]
 802eec0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 802eec4:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 802eec8:	6054      	str	r4, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 802eeca:	68d3      	ldr	r3, [r2, #12]
 802eecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802eed0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 802eed2:	6893      	ldr	r3, [r2, #8]
 802eed4:	069b      	lsls	r3, r3, #26
 802eed6:	d405      	bmi.n	802eee4 <HAL_RTC_SetDate+0x68>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802eed8:	4630      	mov	r0, r6
 802eeda:	f7ff fea9 	bl	802ec30 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802eede:	6832      	ldr	r2, [r6, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802eee0:	2800      	cmp	r0, #0
 802eee2:	d14c      	bne.n	802ef7e <HAL_RTC_SetDate+0x102>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802eee4:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 802eee6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 802eee8:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802eeea:	6250      	str	r0, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 802eeec:	7771      	strb	r1, [r6, #29]
    __HAL_UNLOCK(hrtc);
 802eeee:	7733      	strb	r3, [r6, #28]
}
 802eef0:	4628      	mov	r0, r5
 802eef2:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802eef4:	7848      	ldrb	r0, [r1, #1]
 802eef6:	06c4      	lsls	r4, r0, #27
 802eef8:	d53d      	bpl.n	802ef76 <HAL_RTC_SetDate+0xfa>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802eefa:	78cb      	ldrb	r3, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802eefc:	f020 0010 	bic.w	r0, r0, #16
 802ef00:	300a      	adds	r0, #10
 802ef02:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 802ef04:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802ef06:	7048      	strb	r0, [r1, #1]
  while(Value >= 10U)
 802ef08:	d944      	bls.n	802ef94 <HAL_RTC_SetDate+0x118>
  uint32_t bcdhigh = 0U;
 802ef0a:	2400      	movs	r4, #0
    Value -= 10U;
 802ef0c:	3b0a      	subs	r3, #10
 802ef0e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 802ef10:	2b09      	cmp	r3, #9
    bcdhigh++;
 802ef12:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 802ef16:	d8f9      	bhi.n	802ef0c <HAL_RTC_SetDate+0x90>
 802ef18:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 802ef1c:	b2db      	uxtb	r3, r3
 802ef1e:	2809      	cmp	r0, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802ef20:	ea4f 4503 	mov.w	r5, r3, lsl #16
  while(Value >= 10U)
 802ef24:	d909      	bls.n	802ef3a <HAL_RTC_SetDate+0xbe>
  uint32_t bcdhigh = 0U;
 802ef26:	2300      	movs	r3, #0
    Value -= 10U;
 802ef28:	380a      	subs	r0, #10
 802ef2a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 802ef2c:	2809      	cmp	r0, #9
    bcdhigh++;
 802ef2e:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 802ef32:	d8f9      	bhi.n	802ef28 <HAL_RTC_SetDate+0xac>
 802ef34:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 802ef38:	b2c0      	uxtb	r0, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 802ef3a:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10U)
 802ef3c:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 802ef3e:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while(Value >= 10U)
 802ef42:	d908      	bls.n	802ef56 <HAL_RTC_SetDate+0xda>
    Value -= 10U;
 802ef44:	3c0a      	subs	r4, #10
 802ef46:	b2e4      	uxtb	r4, r4
  while(Value >= 10U)
 802ef48:	2c09      	cmp	r4, #9
    bcdhigh++;
 802ef4a:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 802ef4e:	d8f9      	bhi.n	802ef44 <HAL_RTC_SetDate+0xc8>
 802ef50:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 802ef54:	b2e4      	uxtb	r4, r4
                 ((uint32_t)sDate->WeekDay << 13U));
 802ef56:	780b      	ldrb	r3, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802ef58:	ea45 3343 	orr.w	r3, r5, r3, lsl #13
 802ef5c:	4303      	orrs	r3, r0
 802ef5e:	431c      	orrs	r4, r3
 802ef60:	e7a2      	b.n	802eea8 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ef62:	6831      	ldr	r1, [r6, #0]
 802ef64:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 802ef66:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 802ef68:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ef6a:	6248      	str	r0, [r1, #36]	; 0x24
    return HAL_ERROR;
 802ef6c:	2501      	movs	r5, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 802ef6e:	7772      	strb	r2, [r6, #29]
    __HAL_UNLOCK(hrtc);
 802ef70:	7733      	strb	r3, [r6, #28]
}
 802ef72:	4628      	mov	r0, r5
 802ef74:	bd70      	pop	{r4, r5, r6, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802ef76:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 802ef78:	2b09      	cmp	r3, #9
 802ef7a:	d8c6      	bhi.n	802ef0a <HAL_RTC_SetDate+0x8e>
 802ef7c:	e7cf      	b.n	802ef1e <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ef7e:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ef80:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ef82:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 802ef84:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 802ef86:	7773      	strb	r3, [r6, #29]
        return HAL_ERROR;
 802ef88:	2501      	movs	r5, #1
}
 802ef8a:	4628      	mov	r0, r5
 802ef8c:	bd70      	pop	{r4, r5, r6, pc}
 __HAL_LOCK(hrtc);
 802ef8e:	2502      	movs	r5, #2
}
 802ef90:	4628      	mov	r0, r5
 802ef92:	bd70      	pop	{r4, r5, r6, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 802ef94:	041d      	lsls	r5, r3, #16
  while(Value >= 10U)
 802ef96:	e7c6      	b.n	802ef26 <HAL_RTC_SetDate+0xaa>

0802ef98 <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 802ef98:	4770      	bx	lr
 802ef9a:	bf00      	nop

0802ef9c <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 802ef9c:	b1f0      	cbz	r0, 802efdc <HAL_SDRAM_Init+0x40>
{   
 802ef9e:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 802efa0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 802efa4:	460d      	mov	r5, r1
 802efa6:	4604      	mov	r4, r0
 802efa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802efac:	b18b      	cbz	r3, 802efd2 <HAL_SDRAM_Init+0x36>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802efae:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802efb0:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802efb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802efb6:	f851 0b04 	ldr.w	r0, [r1], #4
 802efba:	f000 f96b 	bl	802f294 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 802efbe:	e9d4 0200 	ldrd	r0, r2, [r4]
 802efc2:	4629      	mov	r1, r5
 802efc4:	f000 f9a4 	bl	802f310 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 802efc8:	2301      	movs	r3, #1
 802efca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 802efce:	2000      	movs	r0, #0
}
 802efd0:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 802efd2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 802efd6:	f7ff ffdf 	bl	802ef98 <HAL_SDRAM_MspInit>
 802efda:	e7e8      	b.n	802efae <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 802efdc:	2001      	movs	r0, #1
}
 802efde:	4770      	bx	lr

0802efe0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802efe0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 802efe2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 802efe6:	2b02      	cmp	r3, #2
{
 802efe8:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 802efea:	b2d8      	uxtb	r0, r3
 802efec:	d00e      	beq.n	802f00c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802efee:	2302      	movs	r3, #2
 802eff0:	460d      	mov	r5, r1
 802eff2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 802eff6:	6820      	ldr	r0, [r4, #0]
 802eff8:	f000 f9d8 	bl	802f3ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802effc:	682b      	ldr	r3, [r5, #0]
 802effe:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 802f000:	bf0c      	ite	eq
 802f002:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 802f004:	2301      	movne	r3, #1
 802f006:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 802f00a:	2000      	movs	r0, #0
}
 802f00c:	bd38      	pop	{r3, r4, r5, pc}
 802f00e:	bf00      	nop

0802f010 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 802f010:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 802f014:	2b02      	cmp	r3, #2
 802f016:	d00c      	beq.n	802f032 <HAL_SDRAM_ProgramRefreshRate+0x22>
{
 802f018:	b510      	push	{r4, lr}
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802f01a:	2302      	movs	r3, #2
 802f01c:	4604      	mov	r4, r0
 802f01e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 802f022:	6800      	ldr	r0, [r0, #0]
 802f024:	f000 f9ea 	bl	802f3fc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802f028:	2301      	movs	r3, #1
 802f02a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 802f02e:	2000      	movs	r0, #0
}
 802f030:	bd10      	pop	{r4, pc}
 802f032:	b2d8      	uxtb	r0, r3
 802f034:	4770      	bx	lr
 802f036:	bf00      	nop

0802f038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802f038:	b570      	push	{r4, r5, r6, lr}
 802f03a:	4604      	mov	r4, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802f03c:	4833      	ldr	r0, [pc, #204]	; (802f10c <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802f03e:	6822      	ldr	r2, [r4, #0]
 802f040:	68e5      	ldr	r5, [r4, #12]
 802f042:	6911      	ldr	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802f044:	68a3      	ldr	r3, [r4, #8]
 802f046:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802f048:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 802f04c:	4329      	orrs	r1, r5
 802f04e:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802f050:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 802f052:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802f054:	4333      	orrs	r3, r6
 802f056:	432b      	orrs	r3, r5
 802f058:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 802f05a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 802f05e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802f062:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 802f064:	430b      	orrs	r3, r1
 802f066:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802f068:	6953      	ldr	r3, [r2, #20]
 802f06a:	69a1      	ldr	r1, [r4, #24]
 802f06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802f070:	430b      	orrs	r3, r1
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802f072:	4282      	cmp	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802f074:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802f076:	d029      	beq.n	802f0cc <UART_SetConfig+0x94>
 802f078:	4b25      	ldr	r3, [pc, #148]	; (802f110 <UART_SetConfig+0xd8>)
 802f07a:	429a      	cmp	r2, r3
 802f07c:	d026      	beq.n	802f0cc <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802f07e:	f7ff f9ab 	bl	802e3d8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802f082:	69e3      	ldr	r3, [r4, #28]
 802f084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f088:	d126      	bne.n	802f0d8 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802f08a:	6862      	ldr	r2, [r4, #4]
 802f08c:	4d21      	ldr	r5, [pc, #132]	; (802f114 <UART_SetConfig+0xdc>)
 802f08e:	1892      	adds	r2, r2, r2
 802f090:	f04f 0300 	mov.w	r3, #0
 802f094:	f04f 0119 	mov.w	r1, #25
 802f098:	415b      	adcs	r3, r3
 802f09a:	fba0 0101 	umull	r0, r1, r0, r1
 802f09e:	f7ee fb4b 	bl	801d738 <__aeabi_uldivmod>
 802f0a2:	fba5 3200 	umull	r3, r2, r5, r0
 802f0a6:	0951      	lsrs	r1, r2, #5
 802f0a8:	2264      	movs	r2, #100	; 0x64
 802f0aa:	fb02 0311 	mls	r3, r2, r1, r0
 802f0ae:	00db      	lsls	r3, r3, #3
 802f0b0:	3332      	adds	r3, #50	; 0x32
 802f0b2:	fba5 2303 	umull	r2, r3, r5, r3
 802f0b6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 802f0ba:	091b      	lsrs	r3, r3, #4
 802f0bc:	6824      	ldr	r4, [r4, #0]
 802f0be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 802f0c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802f0c6:	4413      	add	r3, r2
 802f0c8:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802f0ca:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 802f0cc:	f7ff f994 	bl	802e3f8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802f0d0:	69e3      	ldr	r3, [r4, #28]
 802f0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f0d6:	d0d8      	beq.n	802f08a <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802f0d8:	6863      	ldr	r3, [r4, #4]
 802f0da:	4d0e      	ldr	r5, [pc, #56]	; (802f114 <UART_SetConfig+0xdc>)
 802f0dc:	2119      	movs	r1, #25
 802f0de:	009a      	lsls	r2, r3, #2
 802f0e0:	fba0 0101 	umull	r0, r1, r0, r1
 802f0e4:	0f9b      	lsrs	r3, r3, #30
 802f0e6:	f7ee fb27 	bl	801d738 <__aeabi_uldivmod>
 802f0ea:	fba5 3100 	umull	r3, r1, r5, r0
 802f0ee:	0949      	lsrs	r1, r1, #5
 802f0f0:	2264      	movs	r2, #100	; 0x64
 802f0f2:	fb02 0311 	mls	r3, r2, r1, r0
 802f0f6:	011b      	lsls	r3, r3, #4
 802f0f8:	3332      	adds	r3, #50	; 0x32
 802f0fa:	6824      	ldr	r4, [r4, #0]
 802f0fc:	fba5 2303 	umull	r2, r3, r5, r3
 802f100:	0109      	lsls	r1, r1, #4
 802f102:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 802f106:	60a3      	str	r3, [r4, #8]
}
 802f108:	bd70      	pop	{r4, r5, r6, pc}
 802f10a:	bf00      	nop
 802f10c:	40011000 	.word	0x40011000
 802f110:	40011400 	.word	0x40011400
 802f114:	51eb851f 	.word	0x51eb851f

0802f118 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 802f118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f11c:	4607      	mov	r7, r0
 802f11e:	460e      	mov	r6, r1
 802f120:	4690      	mov	r8, r2
 802f122:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802f124:	683b      	ldr	r3, [r7, #0]
 802f126:	e001      	b.n	802f12c <UART_WaitOnFlagUntilTimeout.constprop.0+0x14>
    if (Timeout != HAL_MAX_DELAY)
 802f128:	1c6a      	adds	r2, r5, #1
 802f12a:	d106      	bne.n	802f13a <UART_WaitOnFlagUntilTimeout.constprop.0+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802f12c:	681c      	ldr	r4, [r3, #0]
 802f12e:	ea36 0204 	bics.w	r2, r6, r4
 802f132:	d1f9      	bne.n	802f128 <UART_WaitOnFlagUntilTimeout.constprop.0+0x10>
  return HAL_OK;
 802f134:	2000      	movs	r0, #0
}
 802f136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802f13a:	b135      	cbz	r5, 802f14a <UART_WaitOnFlagUntilTimeout.constprop.0+0x32>
 802f13c:	f7fc fd92 	bl	802bc64 <HAL_GetTick>
 802f140:	eba0 0008 	sub.w	r0, r0, r8
 802f144:	4285      	cmp	r5, r0
 802f146:	d2ed      	bcs.n	802f124 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
 802f148:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802f14a:	68da      	ldr	r2, [r3, #12]
 802f14c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802f150:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f152:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 802f154:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f156:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 802f15a:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802f15c:	615a      	str	r2, [r3, #20]
        __HAL_UNLOCK(huart);
 802f15e:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 802f160:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 802f164:	f887 403c 	strb.w	r4, [r7, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 802f168:	f887 103e 	strb.w	r1, [r7, #62]	; 0x3e
        return HAL_TIMEOUT;
 802f16c:	e7e3      	b.n	802f136 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>
 802f16e:	bf00      	nop

0802f170 <HAL_UART_Init>:
  if (huart == NULL)
 802f170:	b360      	cbz	r0, 802f1cc <HAL_UART_Init+0x5c>
{
 802f172:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 802f174:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 802f178:	4604      	mov	r4, r0
 802f17a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802f17e:	b303      	cbz	r3, 802f1c2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 802f180:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 802f182:	2324      	movs	r3, #36	; 0x24
 802f184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 802f188:	68d3      	ldr	r3, [r2, #12]
 802f18a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802f18e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 802f190:	4620      	mov	r0, r4
 802f192:	f7ff ff51 	bl	802f038 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802f196:	6823      	ldr	r3, [r4, #0]
 802f198:	691a      	ldr	r2, [r3, #16]
 802f19a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802f19e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802f1a0:	695a      	ldr	r2, [r3, #20]
 802f1a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802f1a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 802f1a8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f1aa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 802f1ac:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 802f1ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802f1b2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f1b4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802f1b6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802f1ba:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 802f1be:	4628      	mov	r0, r5
}
 802f1c0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 802f1c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 802f1c6:	f7fa fd8b 	bl	8029ce0 <HAL_UART_MspInit>
 802f1ca:	e7d9      	b.n	802f180 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 802f1cc:	2001      	movs	r0, #1
}
 802f1ce:	4770      	bx	lr

0802f1d0 <HAL_UART_Transmit>:
{
 802f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f1d4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 802f1d6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 802f1da:	2820      	cmp	r0, #32
 802f1dc:	d142      	bne.n	802f264 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 802f1de:	460e      	mov	r6, r1
 802f1e0:	2900      	cmp	r1, #0
 802f1e2:	d03c      	beq.n	802f25e <HAL_UART_Transmit+0x8e>
 802f1e4:	4615      	mov	r5, r2
 802f1e6:	2a00      	cmp	r2, #0
 802f1e8:	d039      	beq.n	802f25e <HAL_UART_Transmit+0x8e>
 802f1ea:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 802f1ec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802f1f0:	2b01      	cmp	r3, #1
 802f1f2:	d037      	beq.n	802f264 <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802f1f4:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 802f1f6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f1f8:	f04f 0800 	mov.w	r8, #0
 802f1fc:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 802f200:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802f204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 802f208:	f7fc fd2c 	bl	802bc64 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f20c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 802f20e:	84a5      	strh	r5, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 802f214:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 802f216:	84e5      	strh	r5, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f218:	d027      	beq.n	802f26a <HAL_UART_Transmit+0x9a>
    while (huart->TxXferCount > 0U)
 802f21a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 802f21c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 802f21e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 802f220:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 802f224:	b95b      	cbnz	r3, 802f23e <HAL_UART_Transmit+0x6e>
 802f226:	e029      	b.n	802f27c <HAL_UART_Transmit+0xac>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802f228:	6823      	ldr	r3, [r4, #0]
 802f22a:	f816 2b01 	ldrb.w	r2, [r6], #1
 802f22e:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 802f230:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 802f232:	3d01      	subs	r5, #1
 802f234:	b2ad      	uxth	r5, r5
 802f236:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802f238:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 802f23a:	b289      	uxth	r1, r1
 802f23c:	b1f1      	cbz	r1, 802f27c <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802f23e:	463b      	mov	r3, r7
 802f240:	464a      	mov	r2, r9
 802f242:	2180      	movs	r1, #128	; 0x80
 802f244:	4620      	mov	r0, r4
 802f246:	f7ff ff67 	bl	802f118 <UART_WaitOnFlagUntilTimeout.constprop.0>
 802f24a:	b9a0      	cbnz	r0, 802f276 <HAL_UART_Transmit+0xa6>
      if (pdata8bits == NULL)
 802f24c:	2e00      	cmp	r6, #0
 802f24e:	d1eb      	bne.n	802f228 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802f250:	f838 3b02 	ldrh.w	r3, [r8], #2
 802f254:	6822      	ldr	r2, [r4, #0]
 802f256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802f25a:	6053      	str	r3, [r2, #4]
        pdata16bits++;
 802f25c:	e7e8      	b.n	802f230 <HAL_UART_Transmit+0x60>
      return  HAL_ERROR;
 802f25e:	2001      	movs	r0, #1
}
 802f260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 802f264:	2002      	movs	r0, #2
}
 802f266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802f26a:	6923      	ldr	r3, [r4, #16]
 802f26c:	2b00      	cmp	r3, #0
 802f26e:	d1d4      	bne.n	802f21a <HAL_UART_Transmit+0x4a>
 802f270:	46b0      	mov	r8, r6
      pdata8bits  = NULL;
 802f272:	461e      	mov	r6, r3
 802f274:	e7d1      	b.n	802f21a <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 802f276:	2003      	movs	r0, #3
}
 802f278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802f27c:	463b      	mov	r3, r7
 802f27e:	464a      	mov	r2, r9
 802f280:	2140      	movs	r1, #64	; 0x40
 802f282:	4620      	mov	r0, r4
 802f284:	f7ff ff48 	bl	802f118 <UART_WaitOnFlagUntilTimeout.constprop.0>
 802f288:	2800      	cmp	r0, #0
 802f28a:	d1f4      	bne.n	802f276 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 802f28c:	2320      	movs	r3, #32
 802f28e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 802f292:	e7e5      	b.n	802f260 <HAL_UART_Transmit+0x90>

0802f294 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 802f294:	680b      	ldr	r3, [r1, #0]
 802f296:	2b01      	cmp	r3, #1
{
 802f298:	b470      	push	{r4, r5, r6}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 802f29a:	d01a      	beq.n	802f2d2 <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802f29c:	6803      	ldr	r3, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802f29e:	68cd      	ldr	r5, [r1, #12]
 802f2a0:	e9d1 6401 	ldrd	r6, r4, [r1, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 802f2a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802f2a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f2ac:	4333      	orrs	r3, r6
 802f2ae:	4323      	orrs	r3, r4
 802f2b0:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
 802f2b4:	432b      	orrs	r3, r5
 802f2b6:	4313      	orrs	r3, r2
 802f2b8:	e9d1 2506 	ldrd	r2, r5, [r1, #24]
 802f2bc:	4323      	orrs	r3, r4
 802f2be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802f2c0:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 802f2c4:	432b      	orrs	r3, r5
 802f2c6:	4323      	orrs	r3, r4
 802f2c8:	4313      	orrs	r3, r2
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 802f2ca:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 802f2cc:	bc70      	pop	{r4, r5, r6}
 802f2ce:	2000      	movs	r0, #0
 802f2d0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802f2d2:	6805      	ldr	r5, [r0, #0]
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 802f2d4:	6843      	ldr	r3, [r0, #4]
 802f2d6:	684e      	ldr	r6, [r1, #4]
 802f2d8:	69cc      	ldr	r4, [r1, #28]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 802f2da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802f2de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f2e2:	4333      	orrs	r3, r6
 802f2e4:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
 802f2e8:	4313      	orrs	r3, r2
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 802f2ea:	f425 42f8 	bic.w	r2, r5, #31744	; 0x7c00
 802f2ee:	690d      	ldr	r5, [r1, #16]
 802f2f0:	4333      	orrs	r3, r6
 802f2f2:	432b      	orrs	r3, r5
 802f2f4:	6a0e      	ldr	r6, [r1, #32]
 802f2f6:	694d      	ldr	r5, [r1, #20]
 802f2f8:	4322      	orrs	r2, r4
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 802f2fa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802f2fc:	6989      	ldr	r1, [r1, #24]
 802f2fe:	4332      	orrs	r2, r6
 802f300:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 802f302:	4322      	orrs	r2, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802f304:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 802f306:	6002      	str	r2, [r0, #0]
}
 802f308:	bc70      	pop	{r4, r5, r6}
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 802f30a:	6043      	str	r3, [r0, #4]
}
 802f30c:	2000      	movs	r0, #0
 802f30e:	4770      	bx	lr

0802f310 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 802f310:	2a01      	cmp	r2, #1
{
 802f312:	b470      	push	{r4, r5, r6}
  if (Bank != FMC_SDRAM_BANK2) 
 802f314:	d021      	beq.n	802f35a <FMC_SDRAM_Timing_Init+0x4a>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 802f316:	e9d1 2500 	ldrd	r2, r5, [r1]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 802f31a:	6883      	ldr	r3, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 802f31c:	688c      	ldr	r4, [r1, #8]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 802f31e:	3d01      	subs	r5, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 802f320:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 802f324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 802f328:	1e55      	subs	r5, r2, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 802f32a:	68ca      	ldr	r2, [r1, #12]
 802f32c:	432b      	orrs	r3, r5
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 802f32e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 802f330:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 802f332:	1e56      	subs	r6, r2, #1
 802f334:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
 802f338:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 802f33c:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 802f340:	1e69      	subs	r1, r5, #1
 802f342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 802f346:	1e61      	subs	r1, r4, #1
 802f348:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 802f34c:	3a01      	subs	r2, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 802f34e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 802f352:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 802f354:	bc70      	pop	{r4, r5, r6}
 802f356:	2000      	movs	r0, #0
 802f358:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 802f35a:	6882      	ldr	r2, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 802f35c:	684e      	ldr	r6, [r1, #4]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 802f35e:	68c3      	ldr	r3, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 802f360:	680d      	ldr	r5, [r1, #0]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 802f362:	68cc      	ldr	r4, [r1, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 802f364:	3e01      	subs	r6, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 802f366:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 802f36a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802f36e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 802f372:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 802f374:	688e      	ldr	r6, [r1, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 802f376:	3c01      	subs	r4, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 802f378:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 802f37c:	432b      	orrs	r3, r5
 802f37e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 802f382:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RCDDelay)-1U) << 24U)));   
 802f384:	e9d1 4105 	ldrd	r4, r1, [r1, #20]
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 802f388:	3e01      	subs	r6, #1
 802f38a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 802f38e:	3d01      	subs	r5, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 802f390:	3c01      	subs	r4, #1
 802f392:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 802f396:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 802f398:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 802f39c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 802f3a0:	6082      	str	r2, [r0, #8]
}
 802f3a2:	bc70      	pop	{r4, r5, r6}
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 802f3a4:	60c3      	str	r3, [r0, #12]
}
 802f3a6:	2000      	movs	r0, #0
 802f3a8:	4770      	bx	lr
 802f3aa:	bf00      	nop

0802f3ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802f3ac:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 802f3ae:	e9d1 3500 	ldrd	r3, r5, [r1]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 802f3b2:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 802f3b6:	432b      	orrs	r3, r5
{
 802f3b8:	b082      	sub	sp, #8
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 802f3ba:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 802f3be:	3901      	subs	r1, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 802f3c0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  __IO uint32_t tmpr = 0U;
 802f3c4:	2100      	movs	r1, #0
 802f3c6:	9101      	str	r1, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 802f3c8:	9301      	str	r3, [sp, #4]
                    ((Command->ModeRegisterDefinition) << 9U)
                    );
    
  Device->SDCMR = tmpr;
 802f3ca:	9b01      	ldr	r3, [sp, #4]
 802f3cc:	6103      	str	r3, [r0, #16]
{
 802f3ce:	4604      	mov	r4, r0
 802f3d0:	4615      	mov	r5, r2

  /* Get tick */ 
  tickstart = HAL_GetTick();
 802f3d2:	f7fc fc47 	bl	802bc64 <HAL_GetTick>
 802f3d6:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802f3d8:	e001      	b.n	802f3de <FMC_SDRAM_SendCommand+0x32>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 802f3da:	1c6b      	adds	r3, r5, #1
 802f3dc:	d106      	bne.n	802f3ec <FMC_SDRAM_SendCommand+0x40>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802f3de:	69a3      	ldr	r3, [r4, #24]
 802f3e0:	f013 0320 	ands.w	r3, r3, #32
 802f3e4:	d1f9      	bne.n	802f3da <FMC_SDRAM_SendCommand+0x2e>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 802f3e6:	4618      	mov	r0, r3
}
 802f3e8:	b002      	add	sp, #8
 802f3ea:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802f3ec:	b125      	cbz	r5, 802f3f8 <FMC_SDRAM_SendCommand+0x4c>
 802f3ee:	f7fc fc39 	bl	802bc64 <HAL_GetTick>
 802f3f2:	1b80      	subs	r0, r0, r6
 802f3f4:	42a8      	cmp	r0, r5
 802f3f6:	d9f2      	bls.n	802f3de <FMC_SDRAM_SendCommand+0x32>
        return HAL_TIMEOUT;
 802f3f8:	2003      	movs	r0, #3
 802f3fa:	e7f5      	b.n	802f3e8 <FMC_SDRAM_SendCommand+0x3c>

0802f3fc <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 802f3fc:	6943      	ldr	r3, [r0, #20]
 802f3fe:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 802f402:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 802f404:	2000      	movs	r0, #0
 802f406:	4770      	bx	lr

0802f408 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 802f408:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 802f40a:	f000 fea3 	bl	8030154 <vTaskStartScheduler>
  
  return osOK;
}
 802f40e:	2000      	movs	r0, #0
 802f410:	bd08      	pop	{r3, pc}
 802f412:	bf00      	nop

0802f414 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 802f414:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 802f416:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 802f41a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 802f41c:	2c84      	cmp	r4, #132	; 0x84
{
 802f41e:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 802f420:	bf14      	ite	ne
 802f422:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 802f424:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 802f426:	ad03      	add	r5, sp, #12
{
 802f428:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 802f42a:	6840      	ldr	r0, [r0, #4]
 802f42c:	6811      	ldr	r1, [r2, #0]
 802f42e:	8a12      	ldrh	r2, [r2, #16]
 802f430:	e9cd 4500 	strd	r4, r5, [sp]
 802f434:	f000 fd84 	bl	802ff40 <xTaskCreate>
 802f438:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 802f43a:	bf0c      	ite	eq
 802f43c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 802f43e:	2000      	movne	r0, #0
}
 802f440:	b005      	add	sp, #20
 802f442:	bd30      	pop	{r4, r5, pc}

0802f444 <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 802f444:	f001 b86e 	b.w	8030524 <xTaskGetCurrentTaskHandle>

0802f448 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 802f448:	b530      	push	{r4, r5, lr}
 802f44a:	b085      	sub	sp, #20

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 802f44c:	2300      	movs	r3, #0
{
 802f44e:	4604      	mov	r4, r0
  ret.value.signals = 0;  
 802f450:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802f452:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 802f456:	b148      	cbz	r0, 802f46c <osSignalWait+0x24>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 802f458:	2382      	movs	r3, #130	; 0x82
 802f45a:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 802f45c:	ab04      	add	r3, sp, #16
 802f45e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 802f462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 802f466:	4620      	mov	r0, r4
 802f468:	b005      	add	sp, #20
 802f46a:	bd30      	pop	{r4, r5, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 802f46c:	4613      	mov	r3, r2
 802f46e:	4615      	mov	r5, r2
 802f470:	aa02      	add	r2, sp, #8
 802f472:	f001 f983 	bl	803077c <xTaskNotifyWait>
 802f476:	2801      	cmp	r0, #1
 802f478:	d005      	beq.n	802f486 <osSignalWait+0x3e>
      if(ticks == 0)  ret.status = osOK;
 802f47a:	b90d      	cbnz	r5, 802f480 <osSignalWait+0x38>
 802f47c:	9501      	str	r5, [sp, #4]
 802f47e:	e7ed      	b.n	802f45c <osSignalWait+0x14>
      else  ret.status = osEventTimeout;
 802f480:	2340      	movs	r3, #64	; 0x40
 802f482:	9301      	str	r3, [sp, #4]
 802f484:	e7ea      	b.n	802f45c <osSignalWait+0x14>
    else if(ret.value.signals < 0)
 802f486:	9b02      	ldr	r3, [sp, #8]
 802f488:	2b00      	cmp	r3, #0
      ret.status =  osErrorValue;     
 802f48a:	bfb4      	ite	lt
 802f48c:	2386      	movlt	r3, #134	; 0x86
    else  ret.status =  osEventSignal;
 802f48e:	2308      	movge	r3, #8
 802f490:	9301      	str	r3, [sp, #4]
 802f492:	e7e3      	b.n	802f45c <osSignalWait+0x14>

0802f494 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 802f494:	b510      	push	{r4, lr}
 802f496:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 802f498:	2400      	movs	r4, #0
 802f49a:	9401      	str	r4, [sp, #4]
 802f49c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 802f4a0:	b18b      	cbz	r3, 802f4c6 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 802f4a2:	a901      	add	r1, sp, #4
 802f4a4:	f000 fa9a 	bl	802f9dc <xQueueGiveFromISR>
 802f4a8:	2801      	cmp	r0, #1
 802f4aa:	d112      	bne.n	802f4d2 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 802f4ac:	9b01      	ldr	r3, [sp, #4]
 802f4ae:	b19b      	cbz	r3, 802f4d8 <osMutexRelease+0x44>
 802f4b0:	4b0b      	ldr	r3, [pc, #44]	; (802f4e0 <osMutexRelease+0x4c>)
 802f4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802f4b6:	601a      	str	r2, [r3, #0]
 802f4b8:	f3bf 8f4f 	dsb	sy
 802f4bc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 802f4c0:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 802f4c2:	b002      	add	sp, #8
 802f4c4:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 802f4c6:	461a      	mov	r2, r3
 802f4c8:	4619      	mov	r1, r3
 802f4ca:	f000 f9c7 	bl	802f85c <xQueueGenericSend>
 802f4ce:	2801      	cmp	r0, #1
 802f4d0:	d002      	beq.n	802f4d8 <osMutexRelease+0x44>
    result = osErrorOS;
 802f4d2:	20ff      	movs	r0, #255	; 0xff
}
 802f4d4:	b002      	add	sp, #8
 802f4d6:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 802f4d8:	2000      	movs	r0, #0
}
 802f4da:	b002      	add	sp, #8
 802f4dc:	bd10      	pop	{r4, pc}
 802f4de:	bf00      	nop
 802f4e0:	e000ed04 	.word	0xe000ed04

0802f4e4 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 802f4e4:	2901      	cmp	r1, #1
{ 
 802f4e6:	4608      	mov	r0, r1
  if (count == 1) {
 802f4e8:	d001      	beq.n	802f4ee <osSemaphoreCreate+0xa>
    vSemaphoreCreateBinary(sema);
    return sema;
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 802f4ea:	f000 b999 	b.w	802f820 <xQueueCreateCountingSemaphore>
{ 
 802f4ee:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(sema);
 802f4f0:	2203      	movs	r2, #3
 802f4f2:	2100      	movs	r1, #0
 802f4f4:	f000 f988 	bl	802f808 <xQueueGenericCreate>
 802f4f8:	4604      	mov	r4, r0
 802f4fa:	b120      	cbz	r0, 802f506 <osSemaphoreCreate+0x22>
 802f4fc:	2300      	movs	r3, #0
 802f4fe:	461a      	mov	r2, r3
 802f500:	4619      	mov	r1, r3
 802f502:	f000 f9ab 	bl	802f85c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 802f506:	4620      	mov	r0, r4
 802f508:	bd10      	pop	{r4, pc}
 802f50a:	bf00      	nop

0802f50c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 802f50c:	b510      	push	{r4, lr}
 802f50e:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 802f510:	2400      	movs	r4, #0
 802f512:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 802f514:	b300      	cbz	r0, 802f558 <osSemaphoreWait+0x4c>
 802f516:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 802f51a:	b933      	cbnz	r3, 802f52a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 802f51c:	f000 fab6 	bl	802fa8c <xQueueSemaphoreTake>
 802f520:	2801      	cmp	r0, #1
 802f522:	d116      	bne.n	802f552 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 802f524:	2000      	movs	r0, #0
}
 802f526:	b002      	add	sp, #8
 802f528:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 802f52a:	aa01      	add	r2, sp, #4
 802f52c:	4621      	mov	r1, r4
 802f52e:	f000 fb89 	bl	802fc44 <xQueueReceiveFromISR>
 802f532:	2801      	cmp	r0, #1
 802f534:	d10d      	bne.n	802f552 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 802f536:	9b01      	ldr	r3, [sp, #4]
 802f538:	2b00      	cmp	r3, #0
 802f53a:	d0f3      	beq.n	802f524 <osSemaphoreWait+0x18>
 802f53c:	4b08      	ldr	r3, [pc, #32]	; (802f560 <osSemaphoreWait+0x54>)
 802f53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802f542:	601a      	str	r2, [r3, #0]
 802f544:	f3bf 8f4f 	dsb	sy
 802f548:	f3bf 8f6f 	isb	sy
  return osOK;
 802f54c:	4620      	mov	r0, r4
}
 802f54e:	b002      	add	sp, #8
 802f550:	bd10      	pop	{r4, pc}
    return osErrorOS;
 802f552:	20ff      	movs	r0, #255	; 0xff
}
 802f554:	b002      	add	sp, #8
 802f556:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 802f558:	2080      	movs	r0, #128	; 0x80
}
 802f55a:	b002      	add	sp, #8
 802f55c:	bd10      	pop	{r4, pc}
 802f55e:	bf00      	nop
 802f560:	e000ed04 	.word	0xe000ed04

0802f564 <osSemaphoreRelease>:
 802f564:	f7ff bf96 	b.w	802f494 <osMutexRelease>

0802f568 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 802f568:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 802f56a:	f000 ffe1 	bl	8030530 <xTaskGetSchedulerState>
 802f56e:	2801      	cmp	r0, #1
 802f570:	d100      	bne.n	802f574 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 802f572:	bd08      	pop	{r3, pc}
 802f574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 802f578:	f001 ba1c 	b.w	80309b4 <xPortSysTickHandler>

0802f57c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802f57c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802f580:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802f584:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802f586:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802f58a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802f58c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802f58e:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802f590:	4770      	bx	lr
 802f592:	bf00      	nop

0802f594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802f594:	2300      	movs	r3, #0
 802f596:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802f598:	4770      	bx	lr
 802f59a:	bf00      	nop

0802f59c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 802f59c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 802f59e:	6802      	ldr	r2, [r0, #0]
{
 802f5a0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802f5a2:	689c      	ldr	r4, [r3, #8]
 802f5a4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802f5a6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 802f5a8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 802f5aa:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802f5ac:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802f5ae:	6099      	str	r1, [r3, #8]
}
 802f5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 802f5b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 802f5b6:	6002      	str	r2, [r0, #0]
}
 802f5b8:	4770      	bx	lr
 802f5ba:	bf00      	nop

0802f5bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802f5bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802f5be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802f5c0:	1c6b      	adds	r3, r5, #1
 802f5c2:	d010      	beq.n	802f5e6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802f5c4:	f100 0308 	add.w	r3, r0, #8
 802f5c8:	461c      	mov	r4, r3
 802f5ca:	685b      	ldr	r3, [r3, #4]
 802f5cc:	681a      	ldr	r2, [r3, #0]
 802f5ce:	42aa      	cmp	r2, r5
 802f5d0:	d9fa      	bls.n	802f5c8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 802f5d2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 802f5d4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 802f5d6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802f5d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802f5da:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 802f5dc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 802f5de:	6108      	str	r0, [r1, #16]
}
 802f5e0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 802f5e2:	6002      	str	r2, [r0, #0]
}
 802f5e4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 802f5e6:	6904      	ldr	r4, [r0, #16]
 802f5e8:	6863      	ldr	r3, [r4, #4]
 802f5ea:	e7f2      	b.n	802f5d2 <vListInsert+0x16>

0802f5ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802f5ec:	6903      	ldr	r3, [r0, #16]
{
 802f5ee:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802f5f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802f5f4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802f5f6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 802f5f8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802f5fa:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 802f5fc:	bf08      	it	eq
 802f5fe:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 802f600:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 802f602:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 802f606:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 802f608:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 802f60a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 802f60c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 802f60e:	6818      	ldr	r0, [r3, #0]
}
 802f610:	4770      	bx	lr
 802f612:	bf00      	nop

0802f614 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 802f614:	b570      	push	{r4, r5, r6, lr}
 802f616:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802f618:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802f61a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802f61c:	b920      	cbnz	r0, 802f628 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802f61e:	6825      	ldr	r5, [r4, #0]
 802f620:	b35d      	cbz	r5, 802f67a <prvCopyDataToQueue+0x66>
 802f622:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802f624:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 802f626:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 802f628:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802f62a:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 802f62c:	b985      	cbnz	r5, 802f650 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802f62e:	6860      	ldr	r0, [r4, #4]
 802f630:	f001 fbfa 	bl	8030e28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802f634:	6863      	ldr	r3, [r4, #4]
 802f636:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802f638:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802f63a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802f63c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802f63e:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802f640:	f106 0601 	add.w	r6, r6, #1
 802f644:	bf24      	itt	cs
 802f646:	6823      	ldrcs	r3, [r4, #0]
 802f648:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 802f64a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802f64c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 802f64e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802f650:	68e0      	ldr	r0, [r4, #12]
 802f652:	f001 fbe9 	bl	8030e28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802f656:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802f658:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802f65a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802f65c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802f65e:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802f660:	60e3      	str	r3, [r4, #12]
 802f662:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802f666:	d202      	bcs.n	802f66e <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802f668:	68a3      	ldr	r3, [r4, #8]
 802f66a:	441a      	add	r2, r3
 802f66c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 802f66e:	2d02      	cmp	r5, #2
 802f670:	d008      	beq.n	802f684 <prvCopyDataToQueue+0x70>
 802f672:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 802f674:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802f676:	63a6      	str	r6, [r4, #56]	; 0x38
}
 802f678:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802f67a:	68a0      	ldr	r0, [r4, #8]
 802f67c:	f000 ffb8 	bl	80305f0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802f680:	60a5      	str	r5, [r4, #8]
 802f682:	e7ce      	b.n	802f622 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802f684:	2e01      	cmp	r6, #1
 802f686:	bf38      	it	cc
 802f688:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 802f68a:	2000      	movs	r0, #0
 802f68c:	e7ca      	b.n	802f624 <prvCopyDataToQueue+0x10>
 802f68e:	bf00      	nop

0802f690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802f690:	6c02      	ldr	r2, [r0, #64]	; 0x40
 802f692:	b172      	cbz	r2, 802f6b2 <prvCopyDataFromQueue+0x22>
{
 802f694:	b410      	push	{r4}
 802f696:	460b      	mov	r3, r1
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802f698:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802f69c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802f69e:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802f6a0:	60c1      	str	r1, [r0, #12]
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802f6a2:	bf24      	itt	cs
 802f6a4:	6801      	ldrcs	r1, [r0, #0]
 802f6a6:	60c1      	strcs	r1, [r0, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
	}
}
 802f6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802f6ac:	4618      	mov	r0, r3
 802f6ae:	f001 bbbb 	b.w	8030e28 <memcpy>
 802f6b2:	4770      	bx	lr

0802f6b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 802f6b4:	b570      	push	{r4, r5, r6, lr}
 802f6b6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802f6b8:	f001 f914 	bl	80308e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802f6bc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 802f6c0:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802f6c2:	2d00      	cmp	r5, #0
 802f6c4:	dd15      	ble.n	802f6f2 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802f6c6:	f104 0624 	add.w	r6, r4, #36	; 0x24
 802f6ca:	e004      	b.n	802f6d6 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802f6cc:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802f6ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 802f6d2:	b25d      	sxtb	r5, r3
 802f6d4:	d00d      	beq.n	802f6f2 <prvUnlockQueue+0x3e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802f6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802f6d8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802f6da:	b153      	cbz	r3, 802f6f2 <prvUnlockQueue+0x3e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802f6dc:	f000 fe7e 	bl	80303dc <xTaskRemoveFromEventList>
 802f6e0:	2800      	cmp	r0, #0
 802f6e2:	d0f3      	beq.n	802f6cc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 802f6e4:	f000 ff18 	bl	8030518 <vTaskMissedYield>
			--cTxLock;
 802f6e8:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802f6ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 802f6ee:	b25d      	sxtb	r5, r3
 802f6f0:	d1f1      	bne.n	802f6d6 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802f6f2:	23ff      	movs	r3, #255	; 0xff
 802f6f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802f6f8:	f001 f916 	bl	8030928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802f6fc:	f001 f8f2 	bl	80308e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802f700:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 802f704:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802f706:	2d00      	cmp	r5, #0
 802f708:	dd15      	ble.n	802f736 <prvUnlockQueue+0x82>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802f70a:	f104 0610 	add.w	r6, r4, #16
 802f70e:	e004      	b.n	802f71a <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802f710:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802f712:	f013 0fff 	tst.w	r3, #255	; 0xff
 802f716:	b25d      	sxtb	r5, r3
 802f718:	d00d      	beq.n	802f736 <prvUnlockQueue+0x82>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802f71a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802f71c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802f71e:	b153      	cbz	r3, 802f736 <prvUnlockQueue+0x82>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802f720:	f000 fe5c 	bl	80303dc <xTaskRemoveFromEventList>
 802f724:	2800      	cmp	r0, #0
 802f726:	d0f3      	beq.n	802f710 <prvUnlockQueue+0x5c>
					vTaskMissedYield();
 802f728:	f000 fef6 	bl	8030518 <vTaskMissedYield>
				--cRxLock;
 802f72c:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802f72e:	f013 0fff 	tst.w	r3, #255	; 0xff
 802f732:	b25d      	sxtb	r5, r3
 802f734:	d1f1      	bne.n	802f71a <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802f736:	23ff      	movs	r3, #255	; 0xff
 802f738:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 802f73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 802f740:	f001 b8f2 	b.w	8030928 <vPortExitCritical>

0802f744 <xQueueGenericReset>:
{
 802f744:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 802f746:	b1e0      	cbz	r0, 802f782 <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
 802f748:	4604      	mov	r4, r0
 802f74a:	460d      	mov	r5, r1
 802f74c:	f001 f8ca 	bl	80308e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f750:	e9d4 030f 	ldrd	r0, r3, [r4, #60]	; 0x3c
 802f754:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802f756:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f758:	fb00 f003 	mul.w	r0, r0, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f75c:	1ac3      	subs	r3, r0, r3
 802f75e:	4413      	add	r3, r2
		pxQueue->cRxLock = queueUNLOCKED;
 802f760:	21ff      	movs	r1, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f762:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802f764:	2000      	movs	r0, #0
 802f766:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f768:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 802f76c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802f770:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 802f774:	b9ed      	cbnz	r5, 802f7b2 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802f776:	6923      	ldr	r3, [r4, #16]
 802f778:	b963      	cbnz	r3, 802f794 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 802f77a:	f001 f8d5 	bl	8030928 <vPortExitCritical>
}
 802f77e:	2001      	movs	r0, #1
 802f780:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f786:	f383 8811 	msr	BASEPRI, r3
 802f78a:	f3bf 8f6f 	isb	sy
 802f78e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 802f792:	e7fe      	b.n	802f792 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802f794:	f104 0010 	add.w	r0, r4, #16
 802f798:	f000 fe20 	bl	80303dc <xTaskRemoveFromEventList>
 802f79c:	2800      	cmp	r0, #0
 802f79e:	d0ec      	beq.n	802f77a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 802f7a0:	4b0a      	ldr	r3, [pc, #40]	; (802f7cc <xQueueGenericReset+0x88>)
 802f7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802f7a6:	601a      	str	r2, [r3, #0]
 802f7a8:	f3bf 8f4f 	dsb	sy
 802f7ac:	f3bf 8f6f 	isb	sy
 802f7b0:	e7e3      	b.n	802f77a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802f7b2:	f104 0010 	add.w	r0, r4, #16
 802f7b6:	f7ff fee1 	bl	802f57c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 802f7ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 802f7be:	f7ff fedd 	bl	802f57c <vListInitialise>
	taskEXIT_CRITICAL();
 802f7c2:	f001 f8b1 	bl	8030928 <vPortExitCritical>
}
 802f7c6:	2001      	movs	r0, #1
 802f7c8:	bd38      	pop	{r3, r4, r5, pc}
 802f7ca:	bf00      	nop
 802f7cc:	e000ed04 	.word	0xe000ed04

0802f7d0 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 802f7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f7d2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802f7d4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802f7d8:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 802f7da:	460d      	mov	r5, r1
 802f7dc:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802f7de:	f001 fa01 	bl	8030be4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 802f7e2:	4604      	mov	r4, r0
 802f7e4:	b158      	cbz	r0, 802f7fe <xQueueGenericCreate.part.0+0x2e>
	if( uxItemSize == ( UBaseType_t ) 0 )
 802f7e6:	b165      	cbz	r5, 802f802 <xQueueGenericCreate.part.0+0x32>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802f7e8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 802f7ec:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 802f7f0:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802f7f2:	2101      	movs	r1, #1
 802f7f4:	4620      	mov	r0, r4
 802f7f6:	f7ff ffa5 	bl	802f744 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 802f7fa:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 802f7fe:	4620      	mov	r0, r4
 802f800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f802:	4603      	mov	r3, r0
 802f804:	e7f2      	b.n	802f7ec <xQueueGenericCreate.part.0+0x1c>
 802f806:	bf00      	nop

0802f808 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802f808:	b940      	cbnz	r0, 802f81c <xQueueGenericCreate+0x14>
 802f80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f80e:	f383 8811 	msr	BASEPRI, r3
 802f812:	f3bf 8f6f 	isb	sy
 802f816:	f3bf 8f4f 	dsb	sy
 802f81a:	e7fe      	b.n	802f81a <xQueueGenericCreate+0x12>
 802f81c:	f7ff bfd8 	b.w	802f7d0 <xQueueGenericCreate.part.0>

0802f820 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 802f820:	b940      	cbnz	r0, 802f834 <xQueueCreateCountingSemaphore+0x14>
 802f822:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f826:	f383 8811 	msr	BASEPRI, r3
 802f82a:	f3bf 8f6f 	isb	sy
 802f82e:	f3bf 8f4f 	dsb	sy
 802f832:	e7fe      	b.n	802f832 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 802f834:	4288      	cmp	r0, r1
	{
 802f836:	b510      	push	{r4, lr}
 802f838:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 802f83a:	d208      	bcs.n	802f84e <xQueueCreateCountingSemaphore+0x2e>
 802f83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f840:	f383 8811 	msr	BASEPRI, r3
 802f844:	f3bf 8f6f 	isb	sy
 802f848:	f3bf 8f4f 	dsb	sy
 802f84c:	e7fe      	b.n	802f84c <xQueueCreateCountingSemaphore+0x2c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802f84e:	2202      	movs	r2, #2
 802f850:	2100      	movs	r1, #0
 802f852:	f7ff ffbd 	bl	802f7d0 <xQueueGenericCreate.part.0>
		if( xHandle != NULL )
 802f856:	b100      	cbz	r0, 802f85a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 802f858:	6384      	str	r4, [r0, #56]	; 0x38
	}
 802f85a:	bd10      	pop	{r4, pc}

0802f85c <xQueueGenericSend>:
{
 802f85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f860:	b084      	sub	sp, #16
 802f862:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 802f864:	2800      	cmp	r0, #0
 802f866:	d076      	beq.n	802f956 <xQueueGenericSend+0xfa>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802f868:	4688      	mov	r8, r1
 802f86a:	461f      	mov	r7, r3
 802f86c:	4604      	mov	r4, r0
 802f86e:	2900      	cmp	r1, #0
 802f870:	d065      	beq.n	802f93e <xQueueGenericSend+0xe2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802f872:	2f02      	cmp	r7, #2
 802f874:	d10b      	bne.n	802f88e <xQueueGenericSend+0x32>
 802f876:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802f878:	2b01      	cmp	r3, #1
 802f87a:	d008      	beq.n	802f88e <xQueueGenericSend+0x32>
 802f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f880:	f383 8811 	msr	BASEPRI, r3
 802f884:	f3bf 8f6f 	isb	sy
 802f888:	f3bf 8f4f 	dsb	sy
 802f88c:	e7fe      	b.n	802f88c <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802f88e:	f000 fe4f 	bl	8030530 <xTaskGetSchedulerState>
 802f892:	4606      	mov	r6, r0
 802f894:	2800      	cmp	r0, #0
 802f896:	d067      	beq.n	802f968 <xQueueGenericSend+0x10c>
 802f898:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 802f89a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 802f9d8 <xQueueGenericSend+0x17c>
		prvLockQueue( pxQueue );
 802f89e:	f04f 0900 	mov.w	r9, #0
 802f8a2:	e007      	b.n	802f8b4 <xQueueGenericSend+0x58>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 802f8a4:	f001 f840 	bl	8030928 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 802f8a8:	4620      	mov	r0, r4
 802f8aa:	f7ff ff03 	bl	802f6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802f8ae:	f000 fc95 	bl	80301dc <xTaskResumeAll>
 802f8b2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 802f8b4:	f001 f816 	bl	80308e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802f8b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802f8ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802f8bc:	429a      	cmp	r2, r3
 802f8be:	d363      	bcc.n	802f988 <xQueueGenericSend+0x12c>
 802f8c0:	2f02      	cmp	r7, #2
 802f8c2:	d061      	beq.n	802f988 <xQueueGenericSend+0x12c>
				if( xTicksToWait == ( TickType_t ) 0 )
 802f8c4:	9d01      	ldr	r5, [sp, #4]
 802f8c6:	2d00      	cmp	r5, #0
 802f8c8:	f000 8082 	beq.w	802f9d0 <xQueueGenericSend+0x174>
				else if( xEntryTimeSet == pdFALSE )
 802f8cc:	2e00      	cmp	r6, #0
 802f8ce:	d057      	beq.n	802f980 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
 802f8d0:	f001 f82a 	bl	8030928 <vPortExitCritical>
		vTaskSuspendAll();
 802f8d4:	f000 fc7a 	bl	80301cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802f8d8:	f001 f804 	bl	80308e4 <vPortEnterCritical>
 802f8dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802f8e0:	2bff      	cmp	r3, #255	; 0xff
 802f8e2:	bf08      	it	eq
 802f8e4:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 802f8e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802f8ec:	2bff      	cmp	r3, #255	; 0xff
 802f8ee:	bf08      	it	eq
 802f8f0:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 802f8f4:	f001 f818 	bl	8030928 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802f8f8:	a901      	add	r1, sp, #4
 802f8fa:	a802      	add	r0, sp, #8
 802f8fc:	f000 fdc4 	bl	8030488 <xTaskCheckForTimeOut>
 802f900:	2800      	cmp	r0, #0
 802f902:	d15e      	bne.n	802f9c2 <xQueueGenericSend+0x166>
	taskENTER_CRITICAL();
 802f904:	f000 ffee 	bl	80308e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802f908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802f90a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802f90c:	429a      	cmp	r2, r3
 802f90e:	d1c9      	bne.n	802f8a4 <xQueueGenericSend+0x48>
	taskEXIT_CRITICAL();
 802f910:	f001 f80a 	bl	8030928 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802f914:	9901      	ldr	r1, [sp, #4]
 802f916:	f104 0010 	add.w	r0, r4, #16
 802f91a:	f000 fd45 	bl	80303a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802f91e:	4620      	mov	r0, r4
 802f920:	f7ff fec8 	bl	802f6b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802f924:	f000 fc5a 	bl	80301dc <xTaskResumeAll>
 802f928:	2800      	cmp	r0, #0
 802f92a:	d1c2      	bne.n	802f8b2 <xQueueGenericSend+0x56>
					portYIELD_WITHIN_API();
 802f92c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802f930:	f8ca 3000 	str.w	r3, [sl]
 802f934:	f3bf 8f4f 	dsb	sy
 802f938:	f3bf 8f6f 	isb	sy
 802f93c:	e7b9      	b.n	802f8b2 <xQueueGenericSend+0x56>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802f93e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802f940:	2b00      	cmp	r3, #0
 802f942:	d096      	beq.n	802f872 <xQueueGenericSend+0x16>
 802f944:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f948:	f383 8811 	msr	BASEPRI, r3
 802f94c:	f3bf 8f6f 	isb	sy
 802f950:	f3bf 8f4f 	dsb	sy
 802f954:	e7fe      	b.n	802f954 <xQueueGenericSend+0xf8>
 802f956:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f95a:	f383 8811 	msr	BASEPRI, r3
 802f95e:	f3bf 8f6f 	isb	sy
 802f962:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 802f966:	e7fe      	b.n	802f966 <xQueueGenericSend+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802f968:	9b01      	ldr	r3, [sp, #4]
 802f96a:	2b00      	cmp	r3, #0
 802f96c:	d095      	beq.n	802f89a <xQueueGenericSend+0x3e>
 802f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f972:	f383 8811 	msr	BASEPRI, r3
 802f976:	f3bf 8f6f 	isb	sy
 802f97a:	f3bf 8f4f 	dsb	sy
 802f97e:	e7fe      	b.n	802f97e <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 802f980:	a802      	add	r0, sp, #8
 802f982:	f000 fd75 	bl	8030470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802f986:	e7a3      	b.n	802f8d0 <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802f988:	463a      	mov	r2, r7
 802f98a:	4641      	mov	r1, r8
 802f98c:	4620      	mov	r0, r4
 802f98e:	f7ff fe41 	bl	802f614 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802f992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802f994:	b973      	cbnz	r3, 802f9b4 <xQueueGenericSend+0x158>
					else if( xYieldRequired != pdFALSE )
 802f996:	b138      	cbz	r0, 802f9a8 <xQueueGenericSend+0x14c>
						queueYIELD_IF_USING_PREEMPTION();
 802f998:	4b0f      	ldr	r3, [pc, #60]	; (802f9d8 <xQueueGenericSend+0x17c>)
 802f99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802f99e:	601a      	str	r2, [r3, #0]
 802f9a0:	f3bf 8f4f 	dsb	sy
 802f9a4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 802f9a8:	f000 ffbe 	bl	8030928 <vPortExitCritical>
				return pdPASS;
 802f9ac:	2001      	movs	r0, #1
}
 802f9ae:	b004      	add	sp, #16
 802f9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802f9b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 802f9b8:	f000 fd10 	bl	80303dc <xTaskRemoveFromEventList>
 802f9bc:	2800      	cmp	r0, #0
 802f9be:	d0f3      	beq.n	802f9a8 <xQueueGenericSend+0x14c>
 802f9c0:	e7ea      	b.n	802f998 <xQueueGenericSend+0x13c>
			prvUnlockQueue( pxQueue );
 802f9c2:	4620      	mov	r0, r4
 802f9c4:	f7ff fe76 	bl	802f6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802f9c8:	f000 fc08 	bl	80301dc <xTaskResumeAll>
			return errQUEUE_FULL;
 802f9cc:	2000      	movs	r0, #0
 802f9ce:	e7ee      	b.n	802f9ae <xQueueGenericSend+0x152>
					taskEXIT_CRITICAL();
 802f9d0:	f000 ffaa 	bl	8030928 <vPortExitCritical>
					return errQUEUE_FULL;
 802f9d4:	4628      	mov	r0, r5
 802f9d6:	e7ea      	b.n	802f9ae <xQueueGenericSend+0x152>
 802f9d8:	e000ed04 	.word	0xe000ed04

0802f9dc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 802f9dc:	b370      	cbz	r0, 802fa3c <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 802f9de:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 802f9e0:	b570      	push	{r4, r5, r6, lr}
 802f9e2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 802f9e4:	b143      	cbz	r3, 802f9f8 <xQueueGiveFromISR+0x1c>
 802f9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802f9ea:	f383 8811 	msr	BASEPRI, r3
 802f9ee:	f3bf 8f6f 	isb	sy
 802f9f2:	f3bf 8f4f 	dsb	sy
 802f9f6:	e7fe      	b.n	802f9f6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 802f9f8:	6803      	ldr	r3, [r0, #0]
 802f9fa:	460d      	mov	r5, r1
 802f9fc:	b33b      	cbz	r3, 802fa4e <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802f9fe:	f001 f893 	bl	8030b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802fa02:	f3ef 8611 	mrs	r6, BASEPRI
 802fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fa0a:	f383 8811 	msr	BASEPRI, r3
 802fa0e:	f3bf 8f6f 	isb	sy
 802fa12:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802fa16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 802fa18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 802fa1a:	429a      	cmp	r2, r3
 802fa1c:	d923      	bls.n	802fa66 <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 802fa1e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802fa22:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 802fa24:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802fa26:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 802fa28:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 802fa2a:	d020      	beq.n	802fa6e <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802fa2c:	3301      	adds	r3, #1
 802fa2e:	b25b      	sxtb	r3, r3
 802fa30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 802fa34:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802fa36:	f386 8811 	msr	BASEPRI, r6
}
 802fa3a:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 802fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fa40:	f383 8811 	msr	BASEPRI, r3
 802fa44:	f3bf 8f6f 	isb	sy
 802fa48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 802fa4c:	e7fe      	b.n	802fa4c <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 802fa4e:	6883      	ldr	r3, [r0, #8]
 802fa50:	2b00      	cmp	r3, #0
 802fa52:	d0d4      	beq.n	802f9fe <xQueueGiveFromISR+0x22>
 802fa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fa58:	f383 8811 	msr	BASEPRI, r3
 802fa5c:	f3bf 8f6f 	isb	sy
 802fa60:	f3bf 8f4f 	dsb	sy
 802fa64:	e7fe      	b.n	802fa64 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 802fa66:	2000      	movs	r0, #0
	__asm volatile
 802fa68:	f386 8811 	msr	BASEPRI, r6
}
 802fa6c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802fa6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802fa70:	2b00      	cmp	r3, #0
 802fa72:	d0df      	beq.n	802fa34 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802fa74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 802fa78:	f000 fcb0 	bl	80303dc <xTaskRemoveFromEventList>
 802fa7c:	2800      	cmp	r0, #0
 802fa7e:	d0d9      	beq.n	802fa34 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 802fa80:	2d00      	cmp	r5, #0
 802fa82:	d0d7      	beq.n	802fa34 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 802fa84:	2001      	movs	r0, #1
 802fa86:	6028      	str	r0, [r5, #0]
 802fa88:	e7ee      	b.n	802fa68 <xQueueGiveFromISR+0x8c>
 802fa8a:	bf00      	nop

0802fa8c <xQueueSemaphoreTake>:
{
 802fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fa90:	b084      	sub	sp, #16
 802fa92:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 802fa94:	b158      	cbz	r0, 802faae <xQueueSemaphoreTake+0x22>
	configASSERT( pxQueue->uxItemSize == 0 );
 802fa96:	6c05      	ldr	r5, [r0, #64]	; 0x40
 802fa98:	4604      	mov	r4, r0
 802fa9a:	b18d      	cbz	r5, 802fac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 802fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802faa0:	f383 8811 	msr	BASEPRI, r3
 802faa4:	f3bf 8f6f 	isb	sy
 802faa8:	f3bf 8f4f 	dsb	sy
 802faac:	e7fe      	b.n	802faac <xQueueSemaphoreTake+0x20>
 802faae:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fab2:	f383 8811 	msr	BASEPRI, r3
 802fab6:	f3bf 8f6f 	isb	sy
 802faba:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 802fabe:	e7fe      	b.n	802fabe <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802fac0:	f000 fd36 	bl	8030530 <xTaskGetSchedulerState>
 802fac4:	4606      	mov	r6, r0
 802fac6:	2800      	cmp	r0, #0
 802fac8:	d05c      	beq.n	802fb84 <xQueueSemaphoreTake+0xf8>
 802faca:	462e      	mov	r6, r5
		taskENTER_CRITICAL();
 802facc:	f000 ff0a 	bl	80308e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802fad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 802fad2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 802fc40 <xQueueSemaphoreTake+0x1b4>
		prvLockQueue( pxQueue );
 802fad6:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802fad8:	bb83      	cbnz	r3, 802fb3c <xQueueSemaphoreTake+0xb0>
				if( xTicksToWait == ( TickType_t ) 0 )
 802fada:	9b01      	ldr	r3, [sp, #4]
 802fadc:	2b00      	cmp	r3, #0
 802fade:	f000 80a2 	beq.w	802fc26 <xQueueSemaphoreTake+0x19a>
				else if( xEntryTimeSet == pdFALSE )
 802fae2:	2e00      	cmp	r6, #0
 802fae4:	d042      	beq.n	802fb6c <xQueueSemaphoreTake+0xe0>
		taskEXIT_CRITICAL();
 802fae6:	f000 ff1f 	bl	8030928 <vPortExitCritical>
		vTaskSuspendAll();
 802faea:	f000 fb6f 	bl	80301cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802faee:	f000 fef9 	bl	80308e4 <vPortEnterCritical>
 802faf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802faf6:	2bff      	cmp	r3, #255	; 0xff
 802faf8:	bf08      	it	eq
 802fafa:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 802fafe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802fb02:	2bff      	cmp	r3, #255	; 0xff
 802fb04:	bf08      	it	eq
 802fb06:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 802fb0a:	f000 ff0d 	bl	8030928 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802fb0e:	a901      	add	r1, sp, #4
 802fb10:	a802      	add	r0, sp, #8
 802fb12:	f000 fcb9 	bl	8030488 <xTaskCheckForTimeOut>
 802fb16:	b9e8      	cbnz	r0, 802fb54 <xQueueSemaphoreTake+0xc8>
	taskENTER_CRITICAL();
 802fb18:	f000 fee4 	bl	80308e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802fb1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802fb1e:	2b00      	cmp	r3, #0
 802fb20:	d03d      	beq.n	802fb9e <xQueueSemaphoreTake+0x112>
	taskEXIT_CRITICAL();
 802fb22:	f000 ff01 	bl	8030928 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 802fb26:	4620      	mov	r0, r4
 802fb28:	f7ff fdc4 	bl	802f6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802fb2c:	f000 fb56 	bl	80301dc <xTaskResumeAll>
		taskENTER_CRITICAL();
 802fb30:	f000 fed8 	bl	80308e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802fb34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802fb36:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802fb38:	2b00      	cmp	r3, #0
 802fb3a:	d0ce      	beq.n	802fada <xQueueSemaphoreTake+0x4e>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802fb3c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 802fb3e:	3b01      	subs	r3, #1
 802fb40:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802fb42:	2a00      	cmp	r2, #0
 802fb44:	d05c      	beq.n	802fc00 <xQueueSemaphoreTake+0x174>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802fb46:	6923      	ldr	r3, [r4, #16]
 802fb48:	2b00      	cmp	r3, #0
 802fb4a:	d14a      	bne.n	802fbe2 <xQueueSemaphoreTake+0x156>
				taskEXIT_CRITICAL();
 802fb4c:	f000 feec 	bl	8030928 <vPortExitCritical>
				return pdPASS;
 802fb50:	2501      	movs	r5, #1
 802fb52:	e013      	b.n	802fb7c <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue( pxQueue );
 802fb54:	4620      	mov	r0, r4
 802fb56:	f7ff fdad 	bl	802f6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802fb5a:	f000 fb3f 	bl	80301dc <xTaskResumeAll>
	taskENTER_CRITICAL();
 802fb5e:	f000 fec1 	bl	80308e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802fb62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802fb64:	b133      	cbz	r3, 802fb74 <xQueueSemaphoreTake+0xe8>
	taskEXIT_CRITICAL();
 802fb66:	f000 fedf 	bl	8030928 <vPortExitCritical>
	return xReturn;
 802fb6a:	e7e1      	b.n	802fb30 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 802fb6c:	a802      	add	r0, sp, #8
 802fb6e:	f000 fc7f 	bl	8030470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802fb72:	e7b8      	b.n	802fae6 <xQueueSemaphoreTake+0x5a>
	taskEXIT_CRITICAL();
 802fb74:	f000 fed8 	bl	8030928 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 802fb78:	2d00      	cmp	r5, #0
 802fb7a:	d145      	bne.n	802fc08 <xQueueSemaphoreTake+0x17c>
}
 802fb7c:	4628      	mov	r0, r5
 802fb7e:	b004      	add	sp, #16
 802fb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802fb84:	9b01      	ldr	r3, [sp, #4]
 802fb86:	b143      	cbz	r3, 802fb9a <xQueueSemaphoreTake+0x10e>
 802fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fb8c:	f383 8811 	msr	BASEPRI, r3
 802fb90:	f3bf 8f6f 	isb	sy
 802fb94:	f3bf 8f4f 	dsb	sy
 802fb98:	e7fe      	b.n	802fb98 <xQueueSemaphoreTake+0x10c>
 802fb9a:	4605      	mov	r5, r0
 802fb9c:	e796      	b.n	802facc <xQueueSemaphoreTake+0x40>
	taskEXIT_CRITICAL();
 802fb9e:	f000 fec3 	bl	8030928 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802fba2:	6823      	ldr	r3, [r4, #0]
 802fba4:	b1a3      	cbz	r3, 802fbd0 <xQueueSemaphoreTake+0x144>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802fba6:	9901      	ldr	r1, [sp, #4]
 802fba8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 802fbac:	f000 fbfc 	bl	80303a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802fbb0:	4620      	mov	r0, r4
 802fbb2:	f7ff fd7f 	bl	802f6b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802fbb6:	f000 fb11 	bl	80301dc <xTaskResumeAll>
 802fbba:	2800      	cmp	r0, #0
 802fbbc:	d1b8      	bne.n	802fb30 <xQueueSemaphoreTake+0xa4>
					portYIELD_WITHIN_API();
 802fbbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802fbc2:	f8c8 3000 	str.w	r3, [r8]
 802fbc6:	f3bf 8f4f 	dsb	sy
 802fbca:	f3bf 8f6f 	isb	sy
 802fbce:	e7af      	b.n	802fb30 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
 802fbd0:	f000 fe88 	bl	80308e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802fbd4:	68a0      	ldr	r0, [r4, #8]
 802fbd6:	f000 fcbb 	bl	8030550 <xTaskPriorityInherit>
 802fbda:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 802fbdc:	f000 fea4 	bl	8030928 <vPortExitCritical>
 802fbe0:	e7e1      	b.n	802fba6 <xQueueSemaphoreTake+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802fbe2:	f104 0010 	add.w	r0, r4, #16
 802fbe6:	f000 fbf9 	bl	80303dc <xTaskRemoveFromEventList>
 802fbea:	2800      	cmp	r0, #0
 802fbec:	d0ae      	beq.n	802fb4c <xQueueSemaphoreTake+0xc0>
						queueYIELD_IF_USING_PREEMPTION();
 802fbee:	4b14      	ldr	r3, [pc, #80]	; (802fc40 <xQueueSemaphoreTake+0x1b4>)
 802fbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802fbf4:	601a      	str	r2, [r3, #0]
 802fbf6:	f3bf 8f4f 	dsb	sy
 802fbfa:	f3bf 8f6f 	isb	sy
 802fbfe:	e7a5      	b.n	802fb4c <xQueueSemaphoreTake+0xc0>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 802fc00:	f000 fdb0 	bl	8030764 <pvTaskIncrementMutexHeldCount>
 802fc04:	60a0      	str	r0, [r4, #8]
 802fc06:	e79e      	b.n	802fb46 <xQueueSemaphoreTake+0xba>
						taskENTER_CRITICAL();
 802fc08:	f000 fe6c 	bl	80308e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 802fc0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802fc0e:	b119      	cbz	r1, 802fc18 <xQueueSemaphoreTake+0x18c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 802fc10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802fc12:	6819      	ldr	r1, [r3, #0]
 802fc14:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 802fc18:	68a0      	ldr	r0, [r4, #8]
 802fc1a:	f000 fd45 	bl	80306a8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 802fc1e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 802fc20:	f000 fe82 	bl	8030928 <vPortExitCritical>
 802fc24:	e7aa      	b.n	802fb7c <xQueueSemaphoreTake+0xf0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 802fc26:	b145      	cbz	r5, 802fc3a <xQueueSemaphoreTake+0x1ae>
 802fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fc2c:	f383 8811 	msr	BASEPRI, r3
 802fc30:	f3bf 8f6f 	isb	sy
 802fc34:	f3bf 8f4f 	dsb	sy
 802fc38:	e7fe      	b.n	802fc38 <xQueueSemaphoreTake+0x1ac>
					taskEXIT_CRITICAL();
 802fc3a:	f000 fe75 	bl	8030928 <vPortExitCritical>
					return errQUEUE_EMPTY;
 802fc3e:	e79d      	b.n	802fb7c <xQueueSemaphoreTake+0xf0>
 802fc40:	e000ed04 	.word	0xe000ed04

0802fc44 <xQueueReceiveFromISR>:
{
 802fc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 802fc48:	b310      	cbz	r0, 802fc90 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802fc4a:	4689      	mov	r9, r1
 802fc4c:	4690      	mov	r8, r2
 802fc4e:	4605      	mov	r5, r0
 802fc50:	b191      	cbz	r1, 802fc78 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802fc52:	f000 ff69 	bl	8030b28 <vPortValidateInterruptPriority>
	__asm volatile
 802fc56:	f3ef 8711 	mrs	r7, BASEPRI
 802fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fc5e:	f383 8811 	msr	BASEPRI, r3
 802fc62:	f3bf 8f6f 	isb	sy
 802fc66:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802fc6a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802fc6c:	b9cc      	cbnz	r4, 802fca2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 802fc6e:	4620      	mov	r0, r4
	__asm volatile
 802fc70:	f387 8811 	msr	BASEPRI, r7
}
 802fc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802fc78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802fc7a:	2b00      	cmp	r3, #0
 802fc7c:	d0e9      	beq.n	802fc52 <xQueueReceiveFromISR+0xe>
	__asm volatile
 802fc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fc82:	f383 8811 	msr	BASEPRI, r3
 802fc86:	f3bf 8f6f 	isb	sy
 802fc8a:	f3bf 8f4f 	dsb	sy
 802fc8e:	e7fe      	b.n	802fc8e <xQueueReceiveFromISR+0x4a>
 802fc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fc94:	f383 8811 	msr	BASEPRI, r3
 802fc98:	f3bf 8f6f 	isb	sy
 802fc9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 802fca0:	e7fe      	b.n	802fca0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 802fca2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 802fca6:	4649      	mov	r1, r9
 802fca8:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 802fcaa:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 802fcac:	f7ff fcf0 	bl	802f690 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802fcb0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 802fcb2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802fcb4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 802fcb6:	d008      	beq.n	802fcca <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 802fcb8:	1c73      	adds	r3, r6, #1
 802fcba:	b25b      	sxtb	r3, r3
 802fcbc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 802fcc0:	2001      	movs	r0, #1
	__asm volatile
 802fcc2:	f387 8811 	msr	BASEPRI, r7
}
 802fcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802fcca:	692b      	ldr	r3, [r5, #16]
 802fccc:	2b00      	cmp	r3, #0
 802fcce:	d0f7      	beq.n	802fcc0 <xQueueReceiveFromISR+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802fcd0:	f105 0010 	add.w	r0, r5, #16
 802fcd4:	f000 fb82 	bl	80303dc <xTaskRemoveFromEventList>
 802fcd8:	2800      	cmp	r0, #0
 802fcda:	d0f1      	beq.n	802fcc0 <xQueueReceiveFromISR+0x7c>
						if( pxHigherPriorityTaskWoken != NULL )
 802fcdc:	f1b8 0f00 	cmp.w	r8, #0
 802fce0:	d0ee      	beq.n	802fcc0 <xQueueReceiveFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 802fce2:	2001      	movs	r0, #1
 802fce4:	f8c8 0000 	str.w	r0, [r8]
 802fce8:	e7c2      	b.n	802fc70 <xQueueReceiveFromISR+0x2c>
 802fcea:	bf00      	nop

0802fcec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802fcec:	b580      	push	{r7, lr}
 802fcee:	4c16      	ldr	r4, [pc, #88]	; (802fd48 <prvIdleTask+0x5c>)
 802fcf0:	4f16      	ldr	r7, [pc, #88]	; (802fd4c <prvIdleTask+0x60>)
 802fcf2:	4e17      	ldr	r6, [pc, #92]	; (802fd50 <prvIdleTask+0x64>)
 802fcf4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 802fd54 <prvIdleTask+0x68>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 802fcf8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 802fd58 <prvIdleTask+0x6c>
 802fcfc:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 802fd00:	e014      	b.n	802fd2c <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 802fd02:	f000 fdef 	bl	80308e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802fd06:	68fb      	ldr	r3, [r7, #12]
 802fd08:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802fd0a:	1d28      	adds	r0, r5, #4
 802fd0c:	f7ff fc6e 	bl	802f5ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 802fd10:	6833      	ldr	r3, [r6, #0]
 802fd12:	3b01      	subs	r3, #1
 802fd14:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 802fd16:	6823      	ldr	r3, [r4, #0]
 802fd18:	3b01      	subs	r3, #1
 802fd1a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 802fd1c:	f000 fe04 	bl	8030928 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 802fd20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 802fd22:	f000 fff5 	bl	8030d10 <vPortFree>
			vPortFree( pxTCB );
 802fd26:	4628      	mov	r0, r5
 802fd28:	f000 fff2 	bl	8030d10 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802fd2c:	6823      	ldr	r3, [r4, #0]
 802fd2e:	2b00      	cmp	r3, #0
 802fd30:	d1e7      	bne.n	802fd02 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802fd32:	f8d8 3000 	ldr.w	r3, [r8]
 802fd36:	2b01      	cmp	r3, #1
 802fd38:	d9f8      	bls.n	802fd2c <prvIdleTask+0x40>
				taskYIELD();
 802fd3a:	f8ca 9000 	str.w	r9, [sl]
 802fd3e:	f3bf 8f4f 	dsb	sy
 802fd42:	f3bf 8f6f 	isb	sy
 802fd46:	e7f1      	b.n	802fd2c <prvIdleTask+0x40>
 802fd48:	2000070c 	.word	0x2000070c
 802fd4c:	20000780 	.word	0x20000780
 802fd50:	20000708 	.word	0x20000708
 802fd54:	2000067c 	.word	0x2000067c
 802fd58:	e000ed04 	.word	0xe000ed04

0802fd5c <prvResetNextTaskUnblockTime.part.0>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802fd5c:	4a03      	ldr	r2, [pc, #12]	; (802fd6c <prvResetNextTaskUnblockTime.part.0+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802fd5e:	4b04      	ldr	r3, [pc, #16]	; (802fd70 <prvResetNextTaskUnblockTime.part.0+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802fd60:	6812      	ldr	r2, [r2, #0]
 802fd62:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802fd64:	68d2      	ldr	r2, [r2, #12]
 802fd66:	6852      	ldr	r2, [r2, #4]
 802fd68:	601a      	str	r2, [r3, #0]
	}
}
 802fd6a:	4770      	bx	lr
 802fd6c:	20000674 	.word	0x20000674
 802fd70:	20000748 	.word	0x20000748

0802fd74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802fd76:	4b1b      	ldr	r3, [pc, #108]	; (802fde4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802fd78:	4e1b      	ldr	r6, [pc, #108]	; (802fde8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 802fd7a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802fd7c:	6833      	ldr	r3, [r6, #0]
{
 802fd7e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802fd80:	1d18      	adds	r0, r3, #4
{
 802fd82:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802fd84:	f7ff fc32 	bl	802f5ec <uxListRemove>
 802fd88:	b940      	cbnz	r0, 802fd9c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 802fd8a:	6833      	ldr	r3, [r6, #0]
 802fd8c:	4917      	ldr	r1, [pc, #92]	; (802fdec <prvAddCurrentTaskToDelayedList+0x78>)
 802fd8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802fd90:	680b      	ldr	r3, [r1, #0]
 802fd92:	2201      	movs	r2, #1
 802fd94:	4082      	lsls	r2, r0
 802fd96:	ea23 0302 	bic.w	r3, r3, r2
 802fd9a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802fd9c:	1c63      	adds	r3, r4, #1
 802fd9e:	d017      	beq.n	802fdd0 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802fda0:	6833      	ldr	r3, [r6, #0]
 802fda2:	192c      	adds	r4, r5, r4
 802fda4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 802fda6:	d307      	bcc.n	802fdb8 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802fda8:	4b11      	ldr	r3, [pc, #68]	; (802fdf0 <prvAddCurrentTaskToDelayedList+0x7c>)
 802fdaa:	6818      	ldr	r0, [r3, #0]
 802fdac:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802fdae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802fdb2:	3104      	adds	r1, #4
 802fdb4:	f7ff bc02 	b.w	802f5bc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802fdb8:	4b0e      	ldr	r3, [pc, #56]	; (802fdf4 <prvAddCurrentTaskToDelayedList+0x80>)
 802fdba:	6818      	ldr	r0, [r3, #0]
 802fdbc:	6831      	ldr	r1, [r6, #0]
 802fdbe:	3104      	adds	r1, #4
 802fdc0:	f7ff fbfc 	bl	802f5bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802fdc4:	4b0c      	ldr	r3, [pc, #48]	; (802fdf8 <prvAddCurrentTaskToDelayedList+0x84>)
 802fdc6:	681a      	ldr	r2, [r3, #0]
 802fdc8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 802fdca:	bf88      	it	hi
 802fdcc:	601c      	strhi	r4, [r3, #0]
}
 802fdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802fdd0:	2f00      	cmp	r7, #0
 802fdd2:	d0e5      	beq.n	802fda0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802fdd4:	6831      	ldr	r1, [r6, #0]
 802fdd6:	4809      	ldr	r0, [pc, #36]	; (802fdfc <prvAddCurrentTaskToDelayedList+0x88>)
}
 802fdd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802fddc:	3104      	adds	r1, #4
 802fdde:	f7ff bbdd 	b.w	802f59c <vListInsertEnd>
 802fde2:	bf00      	nop
 802fde4:	20000794 	.word	0x20000794
 802fde8:	20000670 	.word	0x20000670
 802fdec:	20000718 	.word	0x20000718
 802fdf0:	20000678 	.word	0x20000678
 802fdf4:	20000674 	.word	0x20000674
 802fdf8:	20000748 	.word	0x20000748
 802fdfc:	2000076c 	.word	0x2000076c

0802fe00 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 802fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802fe04:	4b45      	ldr	r3, [pc, #276]	; (802ff1c <xTaskIncrementTick.part.0+0x11c>)
 802fe06:	681e      	ldr	r6, [r3, #0]
 802fe08:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 802fe0a:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 802fe0c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802fe0e:	b9de      	cbnz	r6, 802fe48 <xTaskIncrementTick.part.0+0x48>
			taskSWITCH_DELAYED_LISTS();
 802fe10:	4b43      	ldr	r3, [pc, #268]	; (802ff20 <xTaskIncrementTick.part.0+0x120>)
 802fe12:	681a      	ldr	r2, [r3, #0]
 802fe14:	6812      	ldr	r2, [r2, #0]
 802fe16:	b142      	cbz	r2, 802fe2a <xTaskIncrementTick.part.0+0x2a>
	__asm volatile
 802fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 802fe1c:	f383 8811 	msr	BASEPRI, r3
 802fe20:	f3bf 8f6f 	isb	sy
 802fe24:	f3bf 8f4f 	dsb	sy
 802fe28:	e7fe      	b.n	802fe28 <xTaskIncrementTick.part.0+0x28>
 802fe2a:	4a3e      	ldr	r2, [pc, #248]	; (802ff24 <xTaskIncrementTick.part.0+0x124>)
 802fe2c:	6818      	ldr	r0, [r3, #0]
 802fe2e:	493e      	ldr	r1, [pc, #248]	; (802ff28 <xTaskIncrementTick.part.0+0x128>)
 802fe30:	6814      	ldr	r4, [r2, #0]
 802fe32:	601c      	str	r4, [r3, #0]
 802fe34:	6010      	str	r0, [r2, #0]
 802fe36:	680a      	ldr	r2, [r1, #0]
 802fe38:	3201      	adds	r2, #1
 802fe3a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802fe3c:	681b      	ldr	r3, [r3, #0]
 802fe3e:	681b      	ldr	r3, [r3, #0]
 802fe40:	2b00      	cmp	r3, #0
 802fe42:	d05f      	beq.n	802ff04 <xTaskIncrementTick.part.0+0x104>
 802fe44:	f7ff ff8a 	bl	802fd5c <prvResetNextTaskUnblockTime.part.0>
 802fe48:	4d38      	ldr	r5, [pc, #224]	; (802ff2c <xTaskIncrementTick.part.0+0x12c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 802fe4a:	682b      	ldr	r3, [r5, #0]
 802fe4c:	429e      	cmp	r6, r3
 802fe4e:	d342      	bcc.n	802fed6 <xTaskIncrementTick.part.0+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802fe50:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 802ff20 <xTaskIncrementTick.part.0+0x120>
 802fe54:	f8d9 3000 	ldr.w	r3, [r9]
 802fe58:	681c      	ldr	r4, [r3, #0]
 802fe5a:	2c00      	cmp	r4, #0
 802fe5c:	d057      	beq.n	802ff0e <xTaskIncrementTick.part.0+0x10e>
 802fe5e:	4f34      	ldr	r7, [pc, #208]	; (802ff30 <xTaskIncrementTick.part.0+0x130>)
 802fe60:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 802ff38 <xTaskIncrementTick.part.0+0x138>
					prvAddTaskToReadyList( pxTCB );
 802fe64:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802ff3c <xTaskIncrementTick.part.0+0x13c>
BaseType_t xSwitchRequired = pdFALSE;
 802fe68:	2400      	movs	r4, #0
 802fe6a:	e026      	b.n	802feba <xTaskIncrementTick.part.0+0xba>
 802fe6c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802fe6e:	f7ff fbbd 	bl	802f5ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802fe72:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 802fe76:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802fe78:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802fe7c:	b112      	cbz	r2, 802fe84 <xTaskIncrementTick.part.0+0x84>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802fe7e:	f7ff fbb5 	bl	802f5ec <uxListRemove>
 802fe82:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 802fe84:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 802fe88:	f8da 3000 	ldr.w	r3, [sl]
 802fe8c:	2201      	movs	r2, #1
 802fe8e:	4082      	lsls	r2, r0
 802fe90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802fe94:	431a      	orrs	r2, r3
 802fe96:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 802fe9a:	f8ca 2000 	str.w	r2, [sl]
 802fe9e:	f7ff fb7d 	bl	802f59c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802fea2:	f8d8 2000 	ldr.w	r2, [r8]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802fea6:	f8d9 0000 	ldr.w	r0, [r9]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802feaa:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 802feae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802feb0:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 802feb2:	4291      	cmp	r1, r2
 802feb4:	bf28      	it	cs
 802feb6:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802feb8:	b363      	cbz	r3, 802ff14 <xTaskIncrementTick.part.0+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802feba:	f8d9 3000 	ldr.w	r3, [r9]
 802febe:	68db      	ldr	r3, [r3, #12]
 802fec0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802fec4:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802fec8:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 802fecc:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802fece:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 802fed0:	d2cc      	bcs.n	802fe6c <xTaskIncrementTick.part.0+0x6c>
						xNextTaskUnblockTime = xItemValue;
 802fed2:	602a      	str	r2, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802fed4:	e003      	b.n	802fede <xTaskIncrementTick.part.0+0xde>
 802fed6:	4f16      	ldr	r7, [pc, #88]	; (802ff30 <xTaskIncrementTick.part.0+0x130>)
 802fed8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 802ff38 <xTaskIncrementTick.part.0+0x138>
BaseType_t xSwitchRequired = pdFALSE;
 802fedc:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802fede:	f8d8 3000 	ldr.w	r3, [r8]
			if( xYieldPending != pdFALSE )
 802fee2:	4914      	ldr	r1, [pc, #80]	; (802ff34 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802fee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802feea:	009b      	lsls	r3, r3, #2
 802feec:	58fa      	ldr	r2, [r7, r3]
			if( xYieldPending != pdFALSE )
 802feee:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 802fef0:	2a02      	cmp	r2, #2
 802fef2:	bf28      	it	cs
 802fef4:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 802fef6:	2b00      	cmp	r3, #0
}
 802fef8:	bf0c      	ite	eq
 802fefa:	4620      	moveq	r0, r4
 802fefc:	2001      	movne	r0, #1
 802fefe:	b003      	add	sp, #12
 802ff00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 802ff04:	4d09      	ldr	r5, [pc, #36]	; (802ff2c <xTaskIncrementTick.part.0+0x12c>)
 802ff06:	f04f 33ff 	mov.w	r3, #4294967295
 802ff0a:	602b      	str	r3, [r5, #0]
 802ff0c:	e79d      	b.n	802fe4a <xTaskIncrementTick.part.0+0x4a>
 802ff0e:	4f08      	ldr	r7, [pc, #32]	; (802ff30 <xTaskIncrementTick.part.0+0x130>)
 802ff10:	f8df 8024 	ldr.w	r8, [pc, #36]	; 802ff38 <xTaskIncrementTick.part.0+0x138>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802ff14:	f04f 33ff 	mov.w	r3, #4294967295
 802ff18:	602b      	str	r3, [r5, #0]
					break;
 802ff1a:	e7e0      	b.n	802fede <xTaskIncrementTick.part.0+0xde>
 802ff1c:	20000794 	.word	0x20000794
 802ff20:	20000674 	.word	0x20000674
 802ff24:	20000678 	.word	0x20000678
 802ff28:	2000074c 	.word	0x2000074c
 802ff2c:	20000748 	.word	0x20000748
 802ff30:	2000067c 	.word	0x2000067c
 802ff34:	20000798 	.word	0x20000798
 802ff38:	20000670 	.word	0x20000670
 802ff3c:	20000718 	.word	0x20000718

0802ff40 <xTaskCreate>:
	{
 802ff40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802ff44:	0096      	lsls	r6, r2, #2
	{
 802ff46:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802ff48:	4630      	mov	r0, r6
	{
 802ff4a:	460d      	mov	r5, r1
 802ff4c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802ff4e:	f000 fe49 	bl	8030be4 <pvPortMalloc>
			if( pxStack != NULL )
 802ff52:	2800      	cmp	r0, #0
 802ff54:	f000 8087 	beq.w	8030066 <xTaskCreate+0x126>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 802ff58:	4607      	mov	r7, r0
 802ff5a:	205c      	movs	r0, #92	; 0x5c
 802ff5c:	f000 fe42 	bl	8030be4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 802ff60:	4604      	mov	r4, r0
 802ff62:	2800      	cmp	r0, #0
 802ff64:	f000 808a 	beq.w	803007c <xTaskCreate+0x13c>
					pxNewTCB->pxStack = pxStack;
 802ff68:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802ff6a:	4632      	mov	r2, r6
 802ff6c:	4638      	mov	r0, r7
 802ff6e:	21a5      	movs	r1, #165	; 0xa5
 802ff70:	f000 ff82 	bl	8030e78 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802ff74:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
 802ff78:	2d00      	cmp	r5, #0
 802ff7a:	f000 8088 	beq.w	803008e <xTaskCreate+0x14e>
 802ff7e:	1e6f      	subs	r7, r5, #1
 802ff80:	f104 0333 	add.w	r3, r4, #51	; 0x33
 802ff84:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802ff86:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 802ff8a:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 802ff8e:	783a      	ldrb	r2, [r7, #0]
 802ff90:	b10a      	cbz	r2, 802ff96 <xTaskCreate+0x56>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802ff92:	42af      	cmp	r7, r5
 802ff94:	d1f7      	bne.n	802ff86 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802ff96:	2300      	movs	r3, #0
 802ff98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802ff9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ff9e:	2d06      	cmp	r5, #6
 802ffa0:	bf28      	it	cs
 802ffa2:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 802ffa4:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802ffa8:	1d27      	adds	r7, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 802ffaa:	e9c4 5b13 	strd	r5, fp, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 802ffae:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802ffb0:	4638      	mov	r0, r7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802ffb2:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802ffb4:	f7ff faee 	bl	802f594 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802ffb8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802ffbc:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802ffc0:	4456      	add	r6, sl
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802ffc2:	f7ff fae7 	bl	802f594 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 802ffc6:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802ffca:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802ffcc:	f026 0007 	bic.w	r0, r6, #7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802ffd0:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802ffd4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802ffd6:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802ffd8:	464a      	mov	r2, r9
 802ffda:	4641      	mov	r1, r8
 802ffdc:	f000 fc58 	bl	8030890 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 802ffe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802ffe2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 802ffe4:	b103      	cbz	r3, 802ffe8 <xTaskCreate+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802ffe6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 802ffe8:	f000 fc7c 	bl	80308e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 802ffec:	4a45      	ldr	r2, [pc, #276]	; (8030104 <xTaskCreate+0x1c4>)
		if( pxCurrentTCB == NULL )
 802ffee:	4e46      	ldr	r6, [pc, #280]	; (8030108 <xTaskCreate+0x1c8>)
		uxCurrentNumberOfTasks++;
 802fff0:	6813      	ldr	r3, [r2, #0]
 802fff2:	3301      	adds	r3, #1
 802fff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802fff6:	6833      	ldr	r3, [r6, #0]
 802fff8:	2b00      	cmp	r3, #0
 802fffa:	d04b      	beq.n	8030094 <xTaskCreate+0x154>
			if( xSchedulerRunning == pdFALSE )
 802fffc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8030144 <xTaskCreate+0x204>
 8030000:	f8d8 3000 	ldr.w	r3, [r8]
 8030004:	b39b      	cbz	r3, 803006e <xTaskCreate+0x12e>
 8030006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		uxTaskNumber++;
 8030008:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8030148 <xTaskCreate+0x208>
		prvAddTaskToReadyList( pxNewTCB );
 803000c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 803014c <xTaskCreate+0x20c>
		uxTaskNumber++;
 8030010:	f8d9 2000 	ldr.w	r2, [r9]
		prvAddTaskToReadyList( pxNewTCB );
 8030014:	f8dc e000 	ldr.w	lr, [ip]
 8030018:	483c      	ldr	r0, [pc, #240]	; (803010c <xTaskCreate+0x1cc>)
		uxTaskNumber++;
 803001a:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 803001c:	2501      	movs	r5, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 803001e:	6462      	str	r2, [r4, #68]	; 0x44
		uxTaskNumber++;
 8030020:	f8c9 2000 	str.w	r2, [r9]
		prvAddTaskToReadyList( pxNewTCB );
 8030024:	fa05 f203 	lsl.w	r2, r5, r3
 8030028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 803002c:	ea42 020e 	orr.w	r2, r2, lr
 8030030:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8030034:	4639      	mov	r1, r7
 8030036:	f8cc 2000 	str.w	r2, [ip]
 803003a:	f7ff faaf 	bl	802f59c <vListInsertEnd>
	taskEXIT_CRITICAL();
 803003e:	f000 fc73 	bl	8030928 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8030042:	f8d8 3000 	ldr.w	r3, [r8]
 8030046:	b1fb      	cbz	r3, 8030088 <xTaskCreate+0x148>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8030048:	6832      	ldr	r2, [r6, #0]
 803004a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 803004c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 803004e:	429a      	cmp	r2, r3
 8030050:	d21a      	bcs.n	8030088 <xTaskCreate+0x148>
			taskYIELD_IF_USING_PREEMPTION();
 8030052:	4b2f      	ldr	r3, [pc, #188]	; (8030110 <xTaskCreate+0x1d0>)
 8030054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8030058:	601a      	str	r2, [r3, #0]
 803005a:	f3bf 8f4f 	dsb	sy
 803005e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8030062:	4628      	mov	r0, r5
 8030064:	e001      	b.n	803006a <xTaskCreate+0x12a>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8030066:	f04f 30ff 	mov.w	r0, #4294967295
	}
 803006a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 803006e:	6832      	ldr	r2, [r6, #0]
 8030070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8030072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8030074:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8030076:	bf98      	it	ls
 8030078:	6034      	strls	r4, [r6, #0]
 803007a:	e7c5      	b.n	8030008 <xTaskCreate+0xc8>
					vPortFree( pxStack );
 803007c:	4638      	mov	r0, r7
 803007e:	f000 fe47 	bl	8030d10 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8030082:	f04f 30ff 	mov.w	r0, #4294967295
 8030086:	e7f0      	b.n	803006a <xTaskCreate+0x12a>
			xReturn = pdPASS;
 8030088:	4628      	mov	r0, r5
	}
 803008a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 803008e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8030092:	e783      	b.n	802ff9c <xTaskCreate+0x5c>
			pxCurrentTCB = pxNewTCB;
 8030094:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8030096:	6813      	ldr	r3, [r2, #0]
 8030098:	2b01      	cmp	r3, #1
 803009a:	d003      	beq.n	80300a4 <xTaskCreate+0x164>
 803009c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 803009e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8030144 <xTaskCreate+0x204>
 80300a2:	e7b1      	b.n	8030008 <xTaskCreate+0xc8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80300a4:	4819      	ldr	r0, [pc, #100]	; (803010c <xTaskCreate+0x1cc>)
	vListInitialise( &xDelayedTaskList1 );
 80300a6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8030150 <xTaskCreate+0x210>
	vListInitialise( &xDelayedTaskList2 );
 80300aa:	4d1a      	ldr	r5, [pc, #104]	; (8030114 <xTaskCreate+0x1d4>)
 80300ac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8030144 <xTaskCreate+0x204>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80300b0:	f7ff fa64 	bl	802f57c <vListInitialise>
 80300b4:	4818      	ldr	r0, [pc, #96]	; (8030118 <xTaskCreate+0x1d8>)
 80300b6:	f7ff fa61 	bl	802f57c <vListInitialise>
 80300ba:	4818      	ldr	r0, [pc, #96]	; (803011c <xTaskCreate+0x1dc>)
 80300bc:	f7ff fa5e 	bl	802f57c <vListInitialise>
 80300c0:	4817      	ldr	r0, [pc, #92]	; (8030120 <xTaskCreate+0x1e0>)
 80300c2:	f7ff fa5b 	bl	802f57c <vListInitialise>
 80300c6:	4817      	ldr	r0, [pc, #92]	; (8030124 <xTaskCreate+0x1e4>)
 80300c8:	f7ff fa58 	bl	802f57c <vListInitialise>
 80300cc:	4816      	ldr	r0, [pc, #88]	; (8030128 <xTaskCreate+0x1e8>)
 80300ce:	f7ff fa55 	bl	802f57c <vListInitialise>
 80300d2:	4816      	ldr	r0, [pc, #88]	; (803012c <xTaskCreate+0x1ec>)
 80300d4:	f7ff fa52 	bl	802f57c <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 80300d8:	4648      	mov	r0, r9
 80300da:	f7ff fa4f 	bl	802f57c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80300de:	4628      	mov	r0, r5
 80300e0:	f7ff fa4c 	bl	802f57c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80300e4:	4812      	ldr	r0, [pc, #72]	; (8030130 <xTaskCreate+0x1f0>)
 80300e6:	f7ff fa49 	bl	802f57c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80300ea:	4812      	ldr	r0, [pc, #72]	; (8030134 <xTaskCreate+0x1f4>)
 80300ec:	f7ff fa46 	bl	802f57c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80300f0:	4811      	ldr	r0, [pc, #68]	; (8030138 <xTaskCreate+0x1f8>)
 80300f2:	f7ff fa43 	bl	802f57c <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80300f6:	4b11      	ldr	r3, [pc, #68]	; (803013c <xTaskCreate+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
 80300f8:	4a11      	ldr	r2, [pc, #68]	; (8030140 <xTaskCreate+0x200>)
 80300fa:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80300fe:	601d      	str	r5, [r3, #0]
 8030100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8030102:	e781      	b.n	8030008 <xTaskCreate+0xc8>
 8030104:	20000708 	.word	0x20000708
 8030108:	20000670 	.word	0x20000670
 803010c:	2000067c 	.word	0x2000067c
 8030110:	e000ed04 	.word	0xe000ed04
 8030114:	20000730 	.word	0x20000730
 8030118:	20000690 	.word	0x20000690
 803011c:	200006a4 	.word	0x200006a4
 8030120:	200006b8 	.word	0x200006b8
 8030124:	200006cc 	.word	0x200006cc
 8030128:	200006e0 	.word	0x200006e0
 803012c:	200006f4 	.word	0x200006f4
 8030130:	20000754 	.word	0x20000754
 8030134:	20000780 	.word	0x20000780
 8030138:	2000076c 	.word	0x2000076c
 803013c:	20000678 	.word	0x20000678
 8030140:	20000674 	.word	0x20000674
 8030144:	20000768 	.word	0x20000768
 8030148:	20000714 	.word	0x20000714
 803014c:	20000718 	.word	0x20000718
 8030150:	2000071c 	.word	0x2000071c

08030154 <vTaskStartScheduler>:
{
 8030154:	b530      	push	{r4, r5, lr}
 8030156:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8030158:	4b16      	ldr	r3, [pc, #88]	; (80301b4 <vTaskStartScheduler+0x60>)
 803015a:	9301      	str	r3, [sp, #4]
 803015c:	2400      	movs	r4, #0
 803015e:	4916      	ldr	r1, [pc, #88]	; (80301b8 <vTaskStartScheduler+0x64>)
 8030160:	4816      	ldr	r0, [pc, #88]	; (80301bc <vTaskStartScheduler+0x68>)
 8030162:	9400      	str	r4, [sp, #0]
 8030164:	4623      	mov	r3, r4
 8030166:	2280      	movs	r2, #128	; 0x80
 8030168:	f7ff feea 	bl	802ff40 <xTaskCreate>
	if( xReturn == pdPASS )
 803016c:	2801      	cmp	r0, #1
 803016e:	d003      	beq.n	8030178 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8030170:	3001      	adds	r0, #1
 8030172:	d016      	beq.n	80301a2 <vTaskStartScheduler+0x4e>
}
 8030174:	b003      	add	sp, #12
 8030176:	bd30      	pop	{r4, r5, pc}
 8030178:	f04f 0350 	mov.w	r3, #80	; 0x50
 803017c:	f383 8811 	msr	BASEPRI, r3
 8030180:	f3bf 8f6f 	isb	sy
 8030184:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8030188:	490d      	ldr	r1, [pc, #52]	; (80301c0 <vTaskStartScheduler+0x6c>)
		xSchedulerRunning = pdTRUE;
 803018a:	4a0e      	ldr	r2, [pc, #56]	; (80301c4 <vTaskStartScheduler+0x70>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 803018c:	4b0e      	ldr	r3, [pc, #56]	; (80301c8 <vTaskStartScheduler+0x74>)
		xNextTaskUnblockTime = portMAX_DELAY;
 803018e:	f04f 35ff 	mov.w	r5, #4294967295
 8030192:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8030194:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8030196:	601c      	str	r4, [r3, #0]
}
 8030198:	b003      	add	sp, #12
 803019a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 803019e:	f000 bc3d 	b.w	8030a1c <xPortStartScheduler>
 80301a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80301a6:	f383 8811 	msr	BASEPRI, r3
 80301aa:	f3bf 8f6f 	isb	sy
 80301ae:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80301b2:	e7fe      	b.n	80301b2 <vTaskStartScheduler+0x5e>
 80301b4:	20000744 	.word	0x20000744
 80301b8:	08039b50 	.word	0x08039b50
 80301bc:	0802fced 	.word	0x0802fced
 80301c0:	20000748 	.word	0x20000748
 80301c4:	20000768 	.word	0x20000768
 80301c8:	20000794 	.word	0x20000794

080301cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80301cc:	4a02      	ldr	r2, [pc, #8]	; (80301d8 <vTaskSuspendAll+0xc>)
 80301ce:	6813      	ldr	r3, [r2, #0]
 80301d0:	3301      	adds	r3, #1
 80301d2:	6013      	str	r3, [r2, #0]
}
 80301d4:	4770      	bx	lr
 80301d6:	bf00      	nop
 80301d8:	20000710 	.word	0x20000710

080301dc <xTaskResumeAll>:
{
 80301dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80301e0:	4d40      	ldr	r5, [pc, #256]	; (80302e4 <xTaskResumeAll+0x108>)
 80301e2:	682b      	ldr	r3, [r5, #0]
{
 80301e4:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
 80301e6:	b943      	cbnz	r3, 80301fa <xTaskResumeAll+0x1e>
 80301e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80301ec:	f383 8811 	msr	BASEPRI, r3
 80301f0:	f3bf 8f6f 	isb	sy
 80301f4:	f3bf 8f4f 	dsb	sy
 80301f8:	e7fe      	b.n	80301f8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80301fa:	f000 fb73 	bl	80308e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80301fe:	682b      	ldr	r3, [r5, #0]
 8030200:	3b01      	subs	r3, #1
 8030202:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8030204:	682b      	ldr	r3, [r5, #0]
 8030206:	2b00      	cmp	r3, #0
 8030208:	d13f      	bne.n	803028a <xTaskResumeAll+0xae>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 803020a:	4b37      	ldr	r3, [pc, #220]	; (80302e8 <xTaskResumeAll+0x10c>)
 803020c:	681b      	ldr	r3, [r3, #0]
 803020e:	2b00      	cmp	r3, #0
 8030210:	d03b      	beq.n	803028a <xTaskResumeAll+0xae>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8030212:	4f36      	ldr	r7, [pc, #216]	; (80302ec <xTaskResumeAll+0x110>)
 8030214:	683b      	ldr	r3, [r7, #0]
 8030216:	2b00      	cmp	r3, #0
 8030218:	d03e      	beq.n	8030298 <xTaskResumeAll+0xbc>
 803021a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8030304 <xTaskResumeAll+0x128>
 803021e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8030308 <xTaskResumeAll+0x12c>
 8030222:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 803030c <xTaskResumeAll+0x130>
 8030226:	4e32      	ldr	r6, [pc, #200]	; (80302f0 <xTaskResumeAll+0x114>)
					prvAddTaskToReadyList( pxTCB );
 8030228:	f04f 0801 	mov.w	r8, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803022c:	68fb      	ldr	r3, [r7, #12]
 803022e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8030230:	1d21      	adds	r1, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8030232:	f104 0018 	add.w	r0, r4, #24
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8030236:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8030238:	f7ff f9d8 	bl	802f5ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 803023c:	9901      	ldr	r1, [sp, #4]
 803023e:	4608      	mov	r0, r1
 8030240:	f7ff f9d4 	bl	802f5ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8030244:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8030246:	f8d9 2000 	ldr.w	r2, [r9]
 803024a:	9901      	ldr	r1, [sp, #4]
 803024c:	fa08 f300 	lsl.w	r3, r8, r0
 8030250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8030254:	4313      	orrs	r3, r2
 8030256:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 803025a:	f8c9 3000 	str.w	r3, [r9]
 803025e:	f7ff f99d 	bl	802f59c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8030262:	f8db 3000 	ldr.w	r3, [fp]
 8030266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8030268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803026a:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 803026c:	bf28      	it	cs
 803026e:	f8c6 8000 	strcs.w	r8, [r6]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8030272:	683b      	ldr	r3, [r7, #0]
 8030274:	2b00      	cmp	r3, #0
 8030276:	d1d9      	bne.n	803022c <xTaskResumeAll+0x50>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8030278:	4b1e      	ldr	r3, [pc, #120]	; (80302f4 <xTaskResumeAll+0x118>)
 803027a:	681b      	ldr	r3, [r3, #0]
 803027c:	681b      	ldr	r3, [r3, #0]
 803027e:	bb03      	cbnz	r3, 80302c2 <xTaskResumeAll+0xe6>
		xNextTaskUnblockTime = portMAX_DELAY;
 8030280:	4b1d      	ldr	r3, [pc, #116]	; (80302f8 <xTaskResumeAll+0x11c>)
 8030282:	f04f 32ff 	mov.w	r2, #4294967295
 8030286:	601a      	str	r2, [r3, #0]
 8030288:	e007      	b.n	803029a <xTaskResumeAll+0xbe>
BaseType_t xAlreadyYielded = pdFALSE;
 803028a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 803028c:	f000 fb4c 	bl	8030928 <vPortExitCritical>
}
 8030290:	4620      	mov	r0, r4
 8030292:	b003      	add	sp, #12
 8030294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030298:	4e15      	ldr	r6, [pc, #84]	; (80302f0 <xTaskResumeAll+0x114>)
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 803029a:	4f18      	ldr	r7, [pc, #96]	; (80302fc <xTaskResumeAll+0x120>)
 803029c:	683c      	ldr	r4, [r7, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 803029e:	b1a4      	cbz	r4, 80302ca <xTaskResumeAll+0xee>
								xYieldPending = pdTRUE;
 80302a0:	f04f 0801 	mov.w	r8, #1
 80302a4:	e006      	b.n	80302b4 <xTaskResumeAll+0xd8>
 80302a6:	f7ff fdab 	bl	802fe00 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80302aa:	b108      	cbz	r0, 80302b0 <xTaskResumeAll+0xd4>
								xYieldPending = pdTRUE;
 80302ac:	f8c6 8000 	str.w	r8, [r6]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80302b0:	3c01      	subs	r4, #1
 80302b2:	d009      	beq.n	80302c8 <xTaskResumeAll+0xec>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80302b4:	682b      	ldr	r3, [r5, #0]
 80302b6:	2b00      	cmp	r3, #0
 80302b8:	d0f5      	beq.n	80302a6 <xTaskResumeAll+0xca>
		++xPendedTicks;
 80302ba:	683b      	ldr	r3, [r7, #0]
 80302bc:	3301      	adds	r3, #1
 80302be:	603b      	str	r3, [r7, #0]
	return xSwitchRequired;
 80302c0:	e7f6      	b.n	80302b0 <xTaskResumeAll+0xd4>
 80302c2:	f7ff fd4b 	bl	802fd5c <prvResetNextTaskUnblockTime.part.0>
 80302c6:	e7e8      	b.n	803029a <xTaskResumeAll+0xbe>
						xPendedTicks = 0;
 80302c8:	603c      	str	r4, [r7, #0]
				if( xYieldPending != pdFALSE )
 80302ca:	6833      	ldr	r3, [r6, #0]
 80302cc:	2b00      	cmp	r3, #0
 80302ce:	d0dc      	beq.n	803028a <xTaskResumeAll+0xae>
					taskYIELD_IF_USING_PREEMPTION();
 80302d0:	4b0b      	ldr	r3, [pc, #44]	; (8030300 <xTaskResumeAll+0x124>)
 80302d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80302d6:	601a      	str	r2, [r3, #0]
 80302d8:	f3bf 8f4f 	dsb	sy
 80302dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80302e0:	2401      	movs	r4, #1
 80302e2:	e7d3      	b.n	803028c <xTaskResumeAll+0xb0>
 80302e4:	20000710 	.word	0x20000710
 80302e8:	20000708 	.word	0x20000708
 80302ec:	20000754 	.word	0x20000754
 80302f0:	20000798 	.word	0x20000798
 80302f4:	20000674 	.word	0x20000674
 80302f8:	20000748 	.word	0x20000748
 80302fc:	20000750 	.word	0x20000750
 8030300:	e000ed04 	.word	0xe000ed04
 8030304:	20000718 	.word	0x20000718
 8030308:	2000067c 	.word	0x2000067c
 803030c:	20000670 	.word	0x20000670

08030310 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8030310:	4b05      	ldr	r3, [pc, #20]	; (8030328 <xTaskIncrementTick+0x18>)
 8030312:	681b      	ldr	r3, [r3, #0]
 8030314:	b90b      	cbnz	r3, 803031a <xTaskIncrementTick+0xa>
 8030316:	f7ff bd73 	b.w	802fe00 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 803031a:	4a04      	ldr	r2, [pc, #16]	; (803032c <xTaskIncrementTick+0x1c>)
 803031c:	6813      	ldr	r3, [r2, #0]
 803031e:	3301      	adds	r3, #1
 8030320:	6013      	str	r3, [r2, #0]
}
 8030322:	2000      	movs	r0, #0
 8030324:	4770      	bx	lr
 8030326:	bf00      	nop
 8030328:	20000710 	.word	0x20000710
 803032c:	20000750 	.word	0x20000750

08030330 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8030330:	4b18      	ldr	r3, [pc, #96]	; (8030394 <vTaskSwitchContext+0x64>)
 8030332:	681b      	ldr	r3, [r3, #0]
 8030334:	b11b      	cbz	r3, 803033e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8030336:	4b18      	ldr	r3, [pc, #96]	; (8030398 <vTaskSwitchContext+0x68>)
 8030338:	2201      	movs	r2, #1
 803033a:	601a      	str	r2, [r3, #0]
 803033c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 803033e:	4916      	ldr	r1, [pc, #88]	; (8030398 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8030340:	4a16      	ldr	r2, [pc, #88]	; (803039c <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8030342:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8030344:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8030346:	fab3 f383 	clz	r3, r3
 803034a:	b2db      	uxtb	r3, r3
 803034c:	f1c3 031f 	rsb	r3, r3, #31
 8030350:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8030354:	4912      	ldr	r1, [pc, #72]	; (80303a0 <vTaskSwitchContext+0x70>)
 8030356:	009a      	lsls	r2, r3, #2
 8030358:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 803035c:	5888      	ldr	r0, [r1, r2]
 803035e:	b940      	cbnz	r0, 8030372 <vTaskSwitchContext+0x42>
	__asm volatile
 8030360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030364:	f383 8811 	msr	BASEPRI, r3
 8030368:	f3bf 8f6f 	isb	sy
 803036c:	f3bf 8f4f 	dsb	sy
 8030370:	e7fe      	b.n	8030370 <vTaskSwitchContext+0x40>
{
 8030372:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8030374:	685c      	ldr	r4, [r3, #4]
 8030376:	f102 0008 	add.w	r0, r2, #8
 803037a:	6862      	ldr	r2, [r4, #4]
 803037c:	605a      	str	r2, [r3, #4]
 803037e:	4401      	add	r1, r0
 8030380:	428a      	cmp	r2, r1
 8030382:	bf04      	itt	eq
 8030384:	6852      	ldreq	r2, [r2, #4]
 8030386:	605a      	streq	r2, [r3, #4]
 8030388:	4b06      	ldr	r3, [pc, #24]	; (80303a4 <vTaskSwitchContext+0x74>)
 803038a:	68d2      	ldr	r2, [r2, #12]
}
 803038c:	f85d 4b04 	ldr.w	r4, [sp], #4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8030390:	601a      	str	r2, [r3, #0]
}
 8030392:	4770      	bx	lr
 8030394:	20000710 	.word	0x20000710
 8030398:	20000798 	.word	0x20000798
 803039c:	20000718 	.word	0x20000718
 80303a0:	2000067c 	.word	0x2000067c
 80303a4:	20000670 	.word	0x20000670

080303a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80303a8:	b160      	cbz	r0, 80303c4 <vTaskPlaceOnEventList+0x1c>
{
 80303aa:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80303ac:	4b0a      	ldr	r3, [pc, #40]	; (80303d8 <vTaskPlaceOnEventList+0x30>)
 80303ae:	460c      	mov	r4, r1
 80303b0:	6819      	ldr	r1, [r3, #0]
 80303b2:	3118      	adds	r1, #24
 80303b4:	f7ff f902 	bl	802f5bc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80303b8:	4620      	mov	r0, r4
 80303ba:	2101      	movs	r1, #1
}
 80303bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80303c0:	f7ff bcd8 	b.w	802fd74 <prvAddCurrentTaskToDelayedList>
 80303c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80303c8:	f383 8811 	msr	BASEPRI, r3
 80303cc:	f3bf 8f6f 	isb	sy
 80303d0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80303d4:	e7fe      	b.n	80303d4 <vTaskPlaceOnEventList+0x2c>
 80303d6:	bf00      	nop
 80303d8:	20000670 	.word	0x20000670

080303dc <xTaskRemoveFromEventList>:
{
 80303dc:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80303de:	68c3      	ldr	r3, [r0, #12]
 80303e0:	68dc      	ldr	r4, [r3, #12]
{
 80303e2:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 80303e4:	2c00      	cmp	r4, #0
 80303e6:	d02d      	beq.n	8030444 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80303e8:	f104 0118 	add.w	r1, r4, #24
 80303ec:	4608      	mov	r0, r1
 80303ee:	9101      	str	r1, [sp, #4]
 80303f0:	f7ff f8fc 	bl	802f5ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80303f4:	4b18      	ldr	r3, [pc, #96]	; (8030458 <xTaskRemoveFromEventList+0x7c>)
 80303f6:	9901      	ldr	r1, [sp, #4]
 80303f8:	681b      	ldr	r3, [r3, #0]
 80303fa:	b173      	cbz	r3, 803041a <xTaskRemoveFromEventList+0x3e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80303fc:	4817      	ldr	r0, [pc, #92]	; (803045c <xTaskRemoveFromEventList+0x80>)
 80303fe:	f7ff f8cd 	bl	802f59c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8030402:	4b17      	ldr	r3, [pc, #92]	; (8030460 <xTaskRemoveFromEventList+0x84>)
 8030404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8030406:	681b      	ldr	r3, [r3, #0]
 8030408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803040a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 803040c:	bf85      	ittet	hi
 803040e:	4b15      	ldrhi	r3, [pc, #84]	; (8030464 <xTaskRemoveFromEventList+0x88>)
 8030410:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8030412:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8030414:	6018      	strhi	r0, [r3, #0]
}
 8030416:	b002      	add	sp, #8
 8030418:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803041a:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 803041c:	4d12      	ldr	r5, [pc, #72]	; (8030468 <xTaskRemoveFromEventList+0x8c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 803041e:	9101      	str	r1, [sp, #4]
 8030420:	4608      	mov	r0, r1
 8030422:	f7ff f8e3 	bl	802f5ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8030426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8030428:	682e      	ldr	r6, [r5, #0]
 803042a:	4810      	ldr	r0, [pc, #64]	; (803046c <xTaskRemoveFromEventList+0x90>)
 803042c:	9901      	ldr	r1, [sp, #4]
 803042e:	2301      	movs	r3, #1
 8030430:	4093      	lsls	r3, r2
 8030432:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8030436:	4333      	orrs	r3, r6
 8030438:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 803043c:	602b      	str	r3, [r5, #0]
 803043e:	f7ff f8ad 	bl	802f59c <vListInsertEnd>
 8030442:	e7de      	b.n	8030402 <xTaskRemoveFromEventList+0x26>
 8030444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030448:	f383 8811 	msr	BASEPRI, r3
 803044c:	f3bf 8f6f 	isb	sy
 8030450:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8030454:	e7fe      	b.n	8030454 <xTaskRemoveFromEventList+0x78>
 8030456:	bf00      	nop
 8030458:	20000710 	.word	0x20000710
 803045c:	20000754 	.word	0x20000754
 8030460:	20000670 	.word	0x20000670
 8030464:	20000798 	.word	0x20000798
 8030468:	20000718 	.word	0x20000718
 803046c:	2000067c 	.word	0x2000067c

08030470 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8030470:	4a03      	ldr	r2, [pc, #12]	; (8030480 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8030472:	4b04      	ldr	r3, [pc, #16]	; (8030484 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8030474:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8030476:	681b      	ldr	r3, [r3, #0]
 8030478:	e9c0 2300 	strd	r2, r3, [r0]
}
 803047c:	4770      	bx	lr
 803047e:	bf00      	nop
 8030480:	2000074c 	.word	0x2000074c
 8030484:	20000794 	.word	0x20000794

08030488 <xTaskCheckForTimeOut>:
{
 8030488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 803048a:	b308      	cbz	r0, 80304d0 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 803048c:	460d      	mov	r5, r1
 803048e:	b1b1      	cbz	r1, 80304be <xTaskCheckForTimeOut+0x36>
 8030490:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8030492:	f000 fa27 	bl	80308e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8030496:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8030498:	f8df c078 	ldr.w	ip, [pc, #120]	; 8030514 <xTaskCheckForTimeOut+0x8c>
			if( *pxTicksToWait == portMAX_DELAY )
 803049c:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 803049e:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 80304a2:	d02b      	beq.n	80304fc <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80304a4:	4e1a      	ldr	r6, [pc, #104]	; (8030510 <xTaskCheckForTimeOut+0x88>)
 80304a6:	e9d4 0200 	ldrd	r0, r2, [r4]
 80304aa:	6837      	ldr	r7, [r6, #0]
 80304ac:	42b8      	cmp	r0, r7
 80304ae:	d018      	beq.n	80304e2 <xTaskCheckForTimeOut+0x5a>
 80304b0:	428a      	cmp	r2, r1
 80304b2:	d816      	bhi.n	80304e2 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 80304b4:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 80304b6:	f000 fa37 	bl	8030928 <vPortExitCritical>
}
 80304ba:	4628      	mov	r0, r5
 80304bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80304be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80304c2:	f383 8811 	msr	BASEPRI, r3
 80304c6:	f3bf 8f6f 	isb	sy
 80304ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80304ce:	e7fe      	b.n	80304ce <xTaskCheckForTimeOut+0x46>
 80304d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80304d4:	f383 8811 	msr	BASEPRI, r3
 80304d8:	f3bf 8f6f 	isb	sy
 80304dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80304e0:	e7fe      	b.n	80304e0 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80304e2:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80304e4:	42bb      	cmp	r3, r7
 80304e6:	d90e      	bls.n	8030506 <xTaskCheckForTimeOut+0x7e>
			*pxTicksToWait -= xElapsedTime;
 80304e8:	1a5b      	subs	r3, r3, r1
 80304ea:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80304ec:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80304ee:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 80304f2:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80304f4:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80304f8:	2500      	movs	r5, #0
 80304fa:	e7dc      	b.n	80304b6 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 80304fc:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 80304fe:	f000 fa13 	bl	8030928 <vPortExitCritical>
}
 8030502:	4628      	mov	r0, r5
 8030504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8030506:	2300      	movs	r3, #0
 8030508:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 803050a:	2501      	movs	r5, #1
 803050c:	e7d3      	b.n	80304b6 <xTaskCheckForTimeOut+0x2e>
 803050e:	bf00      	nop
 8030510:	2000074c 	.word	0x2000074c
 8030514:	20000794 	.word	0x20000794

08030518 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8030518:	4b01      	ldr	r3, [pc, #4]	; (8030520 <vTaskMissedYield+0x8>)
 803051a:	2201      	movs	r2, #1
 803051c:	601a      	str	r2, [r3, #0]
}
 803051e:	4770      	bx	lr
 8030520:	20000798 	.word	0x20000798

08030524 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8030524:	4b01      	ldr	r3, [pc, #4]	; (803052c <xTaskGetCurrentTaskHandle+0x8>)
 8030526:	6818      	ldr	r0, [r3, #0]
	}
 8030528:	4770      	bx	lr
 803052a:	bf00      	nop
 803052c:	20000670 	.word	0x20000670

08030530 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8030530:	4b05      	ldr	r3, [pc, #20]	; (8030548 <xTaskGetSchedulerState+0x18>)
 8030532:	681b      	ldr	r3, [r3, #0]
 8030534:	b133      	cbz	r3, 8030544 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8030536:	4b05      	ldr	r3, [pc, #20]	; (803054c <xTaskGetSchedulerState+0x1c>)
 8030538:	681b      	ldr	r3, [r3, #0]
 803053a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 803053c:	bf0c      	ite	eq
 803053e:	2002      	moveq	r0, #2
 8030540:	2000      	movne	r0, #0
 8030542:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8030544:	2001      	movs	r0, #1
	}
 8030546:	4770      	bx	lr
 8030548:	20000768 	.word	0x20000768
 803054c:	20000710 	.word	0x20000710

08030550 <xTaskPriorityInherit>:
	{
 8030550:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8030552:	4604      	mov	r4, r0
	{
 8030554:	b083      	sub	sp, #12
		if( pxMutexHolder != NULL )
 8030556:	b1c8      	cbz	r0, 803058c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8030558:	4d22      	ldr	r5, [pc, #136]	; (80305e4 <xTaskPriorityInherit+0x94>)
 803055a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 803055c:	682a      	ldr	r2, [r5, #0]
 803055e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8030560:	4293      	cmp	r3, r2
 8030562:	d215      	bcs.n	8030590 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8030564:	6982      	ldr	r2, [r0, #24]
 8030566:	2a00      	cmp	r2, #0
 8030568:	db04      	blt.n	8030574 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803056a:	682a      	ldr	r2, [r5, #0]
 803056c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 803056e:	f1c2 0207 	rsb	r2, r2, #7
 8030572:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8030574:	4e1c      	ldr	r6, [pc, #112]	; (80305e8 <xTaskPriorityInherit+0x98>)
 8030576:	6962      	ldr	r2, [r4, #20]
 8030578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 803057c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8030580:	429a      	cmp	r2, r3
 8030582:	d00e      	beq.n	80305a2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8030584:	682b      	ldr	r3, [r5, #0]
 8030586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030588:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 803058a:	2001      	movs	r0, #1
	}
 803058c:	b003      	add	sp, #12
 803058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8030590:	682b      	ldr	r3, [r5, #0]
 8030592:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8030594:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8030596:	42a0      	cmp	r0, r4
 8030598:	bf2c      	ite	cs
 803059a:	2000      	movcs	r0, #0
 803059c:	2001      	movcc	r0, #1
	}
 803059e:	b003      	add	sp, #12
 80305a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80305a2:	1d21      	adds	r1, r4, #4
 80305a4:	4608      	mov	r0, r1
 80305a6:	9101      	str	r1, [sp, #4]
 80305a8:	f7ff f820 	bl	802f5ec <uxListRemove>
 80305ac:	9901      	ldr	r1, [sp, #4]
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80305ae:	4a0f      	ldr	r2, [pc, #60]	; (80305ec <xTaskPriorityInherit+0x9c>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80305b0:	b930      	cbnz	r0, 80305c0 <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80305b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80305b4:	6813      	ldr	r3, [r2, #0]
 80305b6:	2001      	movs	r0, #1
 80305b8:	40b8      	lsls	r0, r7
 80305ba:	ea23 0300 	bic.w	r3, r3, r0
 80305be:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80305c0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80305c2:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80305c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80305c6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80305c8:	2401      	movs	r4, #1
 80305ca:	fa04 f300 	lsl.w	r3, r4, r0
 80305ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80305d2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80305d6:	432b      	orrs	r3, r5
 80305d8:	6013      	str	r3, [r2, #0]
 80305da:	f7fe ffdf 	bl	802f59c <vListInsertEnd>
				xReturn = pdTRUE;
 80305de:	4620      	mov	r0, r4
 80305e0:	e7d4      	b.n	803058c <xTaskPriorityInherit+0x3c>
 80305e2:	bf00      	nop
 80305e4:	20000670 	.word	0x20000670
 80305e8:	2000067c 	.word	0x2000067c
 80305ec:	20000718 	.word	0x20000718

080305f0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80305f0:	b1d8      	cbz	r0, 803062a <xTaskPriorityDisinherit+0x3a>
	{
 80305f2:	b5f0      	push	{r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80305f4:	4b29      	ldr	r3, [pc, #164]	; (803069c <xTaskPriorityDisinherit+0xac>)
 80305f6:	681b      	ldr	r3, [r3, #0]
 80305f8:	4283      	cmp	r3, r0
	{
 80305fa:	b083      	sub	sp, #12
 80305fc:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80305fe:	d008      	beq.n	8030612 <xTaskPriorityDisinherit+0x22>
 8030600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030604:	f383 8811 	msr	BASEPRI, r3
 8030608:	f3bf 8f6f 	isb	sy
 803060c:	f3bf 8f4f 	dsb	sy
 8030610:	e7fe      	b.n	8030610 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8030612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030614:	b15b      	cbz	r3, 803062e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8030616:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8030618:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 803061a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 803061c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 803061e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8030620:	d000      	beq.n	8030624 <xTaskPriorityDisinherit+0x34>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8030622:	b16b      	cbz	r3, 8030640 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8030624:	2000      	movs	r0, #0
	}
 8030626:	b003      	add	sp, #12
 8030628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 803062a:	2000      	movs	r0, #0
	}
 803062c:	4770      	bx	lr
 803062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030632:	f383 8811 	msr	BASEPRI, r3
 8030636:	f3bf 8f6f 	isb	sy
 803063a:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 803063e:	e7fe      	b.n	803063e <xTaskPriorityDisinherit+0x4e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8030640:	1d01      	adds	r1, r0, #4
 8030642:	4608      	mov	r0, r1
 8030644:	9101      	str	r1, [sp, #4]
 8030646:	f7fe ffd1 	bl	802f5ec <uxListRemove>
 803064a:	9901      	ldr	r1, [sp, #4]
 803064c:	b1b0      	cbz	r0, 803067c <xTaskPriorityDisinherit+0x8c>
 803064e:	4814      	ldr	r0, [pc, #80]	; (80306a0 <xTaskPriorityDisinherit+0xb0>)
 8030650:	4a14      	ldr	r2, [pc, #80]	; (80306a4 <xTaskPriorityDisinherit+0xb4>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8030652:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8030654:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8030658:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 803065a:	2501      	movs	r5, #1
 803065c:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8030660:	f1c3 0707 	rsb	r7, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8030664:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8030668:	ea46 060c 	orr.w	r6, r6, ip
 803066c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8030670:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8030672:	6016      	str	r6, [r2, #0]
 8030674:	f7fe ff92 	bl	802f59c <vListInsertEnd>
					xReturn = pdTRUE;
 8030678:	4628      	mov	r0, r5
		return xReturn;
 803067a:	e7d4      	b.n	8030626 <xTaskPriorityDisinherit+0x36>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 803067c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803067e:	4808      	ldr	r0, [pc, #32]	; (80306a0 <xTaskPriorityDisinherit+0xb0>)
 8030680:	4a08      	ldr	r2, [pc, #32]	; (80306a4 <xTaskPriorityDisinherit+0xb4>)
 8030682:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8030686:	009b      	lsls	r3, r3, #2
 8030688:	58c3      	ldr	r3, [r0, r3]
 803068a:	2b00      	cmp	r3, #0
 803068c:	d1e1      	bne.n	8030652 <xTaskPriorityDisinherit+0x62>
 803068e:	6813      	ldr	r3, [r2, #0]
 8030690:	2501      	movs	r5, #1
 8030692:	40b5      	lsls	r5, r6
 8030694:	ea23 0305 	bic.w	r3, r3, r5
 8030698:	6013      	str	r3, [r2, #0]
 803069a:	e7da      	b.n	8030652 <xTaskPriorityDisinherit+0x62>
 803069c:	20000670 	.word	0x20000670
 80306a0:	2000067c 	.word	0x2000067c
 80306a4:	20000718 	.word	0x20000718

080306a8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80306a8:	b1c0      	cbz	r0, 80306dc <vTaskPriorityDisinheritAfterTimeout+0x34>
	{
 80306aa:	b530      	push	{r4, r5, lr}
 80306ac:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80306ae:	6d00      	ldr	r0, [r0, #80]	; 0x50
	{
 80306b0:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 80306b2:	b150      	cbz	r0, 80306ca <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80306b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 80306b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80306b8:	428b      	cmp	r3, r1
 80306ba:	bf38      	it	cc
 80306bc:	460b      	movcc	r3, r1
 80306be:	429a      	cmp	r2, r3
 80306c0:	d001      	beq.n	80306c6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80306c2:	2801      	cmp	r0, #1
 80306c4:	d00b      	beq.n	80306de <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 80306c6:	b003      	add	sp, #12
 80306c8:	bd30      	pop	{r4, r5, pc}
 80306ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80306ce:	f383 8811 	msr	BASEPRI, r3
 80306d2:	f3bf 8f6f 	isb	sy
 80306d6:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80306da:	e7fe      	b.n	80306da <vTaskPriorityDisinheritAfterTimeout+0x32>
 80306dc:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 80306de:	491e      	ldr	r1, [pc, #120]	; (8030758 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80306e0:	6809      	ldr	r1, [r1, #0]
 80306e2:	42a1      	cmp	r1, r4
 80306e4:	d026      	beq.n	8030734 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80306e6:	69a1      	ldr	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80306e8:	4d1c      	ldr	r5, [pc, #112]	; (803075c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					pxTCB->uxPriority = uxPriorityToUse;
 80306ea:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80306ec:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80306ee:	bfa8      	it	ge
 80306f0:	f1c3 0307 	rsbge	r3, r3, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80306f4:	6961      	ldr	r1, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80306f6:	bfa8      	it	ge
 80306f8:	61a3      	strge	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80306fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80306fe:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8030702:	4299      	cmp	r1, r3
 8030704:	d1df      	bne.n	80306c6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8030706:	1d21      	adds	r1, r4, #4
 8030708:	4608      	mov	r0, r1
 803070a:	9101      	str	r1, [sp, #4]
 803070c:	f7fe ff6e 	bl	802f5ec <uxListRemove>
 8030710:	9901      	ldr	r1, [sp, #4]
 8030712:	b1c0      	cbz	r0, 8030746 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8030714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8030716:	4a12      	ldr	r2, [pc, #72]	; (8030760 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8030718:	2301      	movs	r3, #1
 803071a:	4083      	lsls	r3, r0
						prvAddTaskToReadyList( pxTCB );
 803071c:	6814      	ldr	r4, [r2, #0]
 803071e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8030722:	4323      	orrs	r3, r4
 8030724:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8030728:	6013      	str	r3, [r2, #0]
	}
 803072a:	b003      	add	sp, #12
 803072c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8030730:	f7fe bf34 	b.w	802f59c <vListInsertEnd>
 8030734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030738:	f383 8811 	msr	BASEPRI, r3
 803073c:	f3bf 8f6f 	isb	sy
 8030740:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8030744:	e7fe      	b.n	8030744 <vTaskPriorityDisinheritAfterTimeout+0x9c>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8030746:	4a06      	ldr	r2, [pc, #24]	; (8030760 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8030748:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 803074a:	6814      	ldr	r4, [r2, #0]
 803074c:	2301      	movs	r3, #1
 803074e:	4083      	lsls	r3, r0
 8030750:	ea24 0403 	bic.w	r4, r4, r3
 8030754:	6014      	str	r4, [r2, #0]
 8030756:	e7e1      	b.n	803071c <vTaskPriorityDisinheritAfterTimeout+0x74>
 8030758:	20000670 	.word	0x20000670
 803075c:	2000067c 	.word	0x2000067c
 8030760:	20000718 	.word	0x20000718

08030764 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8030764:	4b04      	ldr	r3, [pc, #16]	; (8030778 <pvTaskIncrementMutexHeldCount+0x14>)
 8030766:	681a      	ldr	r2, [r3, #0]
 8030768:	b11a      	cbz	r2, 8030772 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 803076a:	6819      	ldr	r1, [r3, #0]
 803076c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 803076e:	3201      	adds	r2, #1
 8030770:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8030772:	6818      	ldr	r0, [r3, #0]
	}
 8030774:	4770      	bx	lr
 8030776:	bf00      	nop
 8030778:	20000670 	.word	0x20000670

0803077c <xTaskNotifyWait>:
	{
 803077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8030780:	4c22      	ldr	r4, [pc, #136]	; (803080c <xTaskNotifyWait+0x90>)
	{
 8030782:	b082      	sub	sp, #8
 8030784:	460e      	mov	r6, r1
 8030786:	4607      	mov	r7, r0
 8030788:	4615      	mov	r5, r2
 803078a:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 803078c:	f000 f8aa 	bl	80308e4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8030790:	6821      	ldr	r1, [r4, #0]
 8030792:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 8030796:	2902      	cmp	r1, #2
 8030798:	d00b      	beq.n	80307b2 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 803079a:	6823      	ldr	r3, [r4, #0]
 803079c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 803079e:	ea21 0107 	bic.w	r1, r1, r7
 80307a2:	6559      	str	r1, [r3, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80307a4:	6823      	ldr	r3, [r4, #0]
 80307a6:	2101      	movs	r1, #1
 80307a8:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 80307ac:	f1b8 0f00 	cmp.w	r8, #0
 80307b0:	d118      	bne.n	80307e4 <xTaskNotifyWait+0x68>
		taskEXIT_CRITICAL();
 80307b2:	f000 f8b9 	bl	8030928 <vPortExitCritical>
		taskENTER_CRITICAL();
 80307b6:	f000 f895 	bl	80308e4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80307ba:	b115      	cbz	r5, 80307c2 <xTaskNotifyWait+0x46>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80307bc:	6823      	ldr	r3, [r4, #0]
 80307be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80307c0:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80307c2:	6823      	ldr	r3, [r4, #0]
 80307c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80307c8:	2b02      	cmp	r3, #2
 80307ca:	d017      	beq.n	80307fc <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 80307cc:	2000      	movs	r0, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80307ce:	6823      	ldr	r3, [r4, #0]
 80307d0:	9001      	str	r0, [sp, #4]
 80307d2:	2200      	movs	r2, #0
 80307d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 80307d8:	f000 f8a6 	bl	8030928 <vPortExitCritical>
	}
 80307dc:	9801      	ldr	r0, [sp, #4]
 80307de:	b002      	add	sp, #8
 80307e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80307e4:	4640      	mov	r0, r8
 80307e6:	f7ff fac5 	bl	802fd74 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80307ea:	4b09      	ldr	r3, [pc, #36]	; (8030810 <xTaskNotifyWait+0x94>)
 80307ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80307f0:	601a      	str	r2, [r3, #0]
 80307f2:	f3bf 8f4f 	dsb	sy
 80307f6:	f3bf 8f6f 	isb	sy
 80307fa:	e7da      	b.n	80307b2 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80307fc:	6823      	ldr	r3, [r4, #0]
 80307fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8030800:	ea21 0606 	bic.w	r6, r1, r6
 8030804:	655e      	str	r6, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8030806:	2001      	movs	r0, #1
 8030808:	e7e1      	b.n	80307ce <xTaskNotifyWait+0x52>
 803080a:	bf00      	nop
 803080c:	20000670 	.word	0x20000670
 8030810:	e000ed04 	.word	0xe000ed04

08030814 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8030814:	4808      	ldr	r0, [pc, #32]	; (8030838 <prvPortStartFirstTask+0x24>)
 8030816:	6800      	ldr	r0, [r0, #0]
 8030818:	6800      	ldr	r0, [r0, #0]
 803081a:	f380 8808 	msr	MSP, r0
 803081e:	f04f 0000 	mov.w	r0, #0
 8030822:	f380 8814 	msr	CONTROL, r0
 8030826:	b662      	cpsie	i
 8030828:	b661      	cpsie	f
 803082a:	f3bf 8f4f 	dsb	sy
 803082e:	f3bf 8f6f 	isb	sy
 8030832:	df00      	svc	0
 8030834:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8030836:	0000      	.short	0x0000
 8030838:	e000ed08 	.word	0xe000ed08

0803083c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 803083c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 803084c <vPortEnableVFP+0x10>
 8030840:	6801      	ldr	r1, [r0, #0]
 8030842:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8030846:	6001      	str	r1, [r0, #0]
 8030848:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 803084a:	0000      	.short	0x0000
 803084c:	e000ed88 	.word	0xe000ed88

08030850 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8030850:	4b0e      	ldr	r3, [pc, #56]	; (803088c <prvTaskExitError+0x3c>)
 8030852:	681b      	ldr	r3, [r3, #0]
{
 8030854:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8030856:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8030858:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 803085a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 803085c:	d008      	beq.n	8030870 <prvTaskExitError+0x20>
 803085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030862:	f383 8811 	msr	BASEPRI, r3
 8030866:	f3bf 8f6f 	isb	sy
 803086a:	f3bf 8f4f 	dsb	sy
 803086e:	e7fe      	b.n	803086e <prvTaskExitError+0x1e>
 8030870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030874:	f383 8811 	msr	BASEPRI, r3
 8030878:	f3bf 8f6f 	isb	sy
 803087c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8030880:	9b01      	ldr	r3, [sp, #4]
 8030882:	2b00      	cmp	r3, #0
 8030884:	d0fc      	beq.n	8030880 <prvTaskExitError+0x30>
}
 8030886:	b002      	add	sp, #8
 8030888:	4770      	bx	lr
 803088a:	bf00      	nop
 803088c:	2000006c 	.word	0x2000006c

08030890 <pxPortInitialiseStack>:
{
 8030890:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8030892:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8030896:	4c09      	ldr	r4, [pc, #36]	; (80308bc <pxPortInitialiseStack+0x2c>)
 8030898:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 803089c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80308a0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80308a4:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80308a8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80308ac:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80308b0:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80308b4:	bc30      	pop	{r4, r5}
 80308b6:	3844      	subs	r0, #68	; 0x44
 80308b8:	4770      	bx	lr
 80308ba:	bf00      	nop
 80308bc:	08030851 	.word	0x08030851

080308c0 <SVC_Handler>:
	__asm volatile (
 80308c0:	4b07      	ldr	r3, [pc, #28]	; (80308e0 <pxCurrentTCBConst2>)
 80308c2:	6819      	ldr	r1, [r3, #0]
 80308c4:	6808      	ldr	r0, [r1, #0]
 80308c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80308ca:	f380 8809 	msr	PSP, r0
 80308ce:	f3bf 8f6f 	isb	sy
 80308d2:	f04f 0000 	mov.w	r0, #0
 80308d6:	f380 8811 	msr	BASEPRI, r0
 80308da:	4770      	bx	lr
 80308dc:	f3af 8000 	nop.w

080308e0 <pxCurrentTCBConst2>:
 80308e0:	20000670 	.word	0x20000670

080308e4 <vPortEnterCritical>:
 80308e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80308e8:	f383 8811 	msr	BASEPRI, r3
 80308ec:	f3bf 8f6f 	isb	sy
 80308f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80308f4:	4a0a      	ldr	r2, [pc, #40]	; (8030920 <vPortEnterCritical+0x3c>)
 80308f6:	6813      	ldr	r3, [r2, #0]
 80308f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80308fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80308fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80308fe:	d000      	beq.n	8030902 <vPortEnterCritical+0x1e>
}
 8030900:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8030902:	4b08      	ldr	r3, [pc, #32]	; (8030924 <vPortEnterCritical+0x40>)
 8030904:	681b      	ldr	r3, [r3, #0]
 8030906:	f013 0fff 	tst.w	r3, #255	; 0xff
 803090a:	d0f9      	beq.n	8030900 <vPortEnterCritical+0x1c>
 803090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030910:	f383 8811 	msr	BASEPRI, r3
 8030914:	f3bf 8f6f 	isb	sy
 8030918:	f3bf 8f4f 	dsb	sy
 803091c:	e7fe      	b.n	803091c <vPortEnterCritical+0x38>
 803091e:	bf00      	nop
 8030920:	2000006c 	.word	0x2000006c
 8030924:	e000ed04 	.word	0xe000ed04

08030928 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8030928:	4a08      	ldr	r2, [pc, #32]	; (803094c <vPortExitCritical+0x24>)
 803092a:	6813      	ldr	r3, [r2, #0]
 803092c:	b943      	cbnz	r3, 8030940 <vPortExitCritical+0x18>
 803092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030932:	f383 8811 	msr	BASEPRI, r3
 8030936:	f3bf 8f6f 	isb	sy
 803093a:	f3bf 8f4f 	dsb	sy
 803093e:	e7fe      	b.n	803093e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8030940:	3b01      	subs	r3, #1
 8030942:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8030944:	b90b      	cbnz	r3, 803094a <vPortExitCritical+0x22>
	__asm volatile
 8030946:	f383 8811 	msr	BASEPRI, r3
}
 803094a:	4770      	bx	lr
 803094c:	2000006c 	.word	0x2000006c

08030950 <PendSV_Handler>:
	__asm volatile
 8030950:	f3ef 8009 	mrs	r0, PSP
 8030954:	f3bf 8f6f 	isb	sy
 8030958:	4b15      	ldr	r3, [pc, #84]	; (80309b0 <pxCurrentTCBConst>)
 803095a:	681a      	ldr	r2, [r3, #0]
 803095c:	f01e 0f10 	tst.w	lr, #16
 8030960:	bf08      	it	eq
 8030962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8030966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803096a:	6010      	str	r0, [r2, #0]
 803096c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8030970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8030974:	f380 8811 	msr	BASEPRI, r0
 8030978:	f3bf 8f4f 	dsb	sy
 803097c:	f3bf 8f6f 	isb	sy
 8030980:	f7ff fcd6 	bl	8030330 <vTaskSwitchContext>
 8030984:	f04f 0000 	mov.w	r0, #0
 8030988:	f380 8811 	msr	BASEPRI, r0
 803098c:	bc09      	pop	{r0, r3}
 803098e:	6819      	ldr	r1, [r3, #0]
 8030990:	6808      	ldr	r0, [r1, #0]
 8030992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030996:	f01e 0f10 	tst.w	lr, #16
 803099a:	bf08      	it	eq
 803099c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80309a0:	f380 8809 	msr	PSP, r0
 80309a4:	f3bf 8f6f 	isb	sy
 80309a8:	4770      	bx	lr
 80309aa:	bf00      	nop
 80309ac:	f3af 8000 	nop.w

080309b0 <pxCurrentTCBConst>:
 80309b0:	20000670 	.word	0x20000670

080309b4 <xPortSysTickHandler>:
{
 80309b4:	b508      	push	{r3, lr}
	__asm volatile
 80309b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80309ba:	f383 8811 	msr	BASEPRI, r3
 80309be:	f3bf 8f6f 	isb	sy
 80309c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80309c6:	f7ff fca3 	bl	8030310 <xTaskIncrementTick>
 80309ca:	b118      	cbz	r0, 80309d4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80309cc:	4b03      	ldr	r3, [pc, #12]	; (80309dc <xPortSysTickHandler+0x28>)
 80309ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80309d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80309d4:	2300      	movs	r3, #0
 80309d6:	f383 8811 	msr	BASEPRI, r3
}
 80309da:	bd08      	pop	{r3, pc}
 80309dc:	e000ed04 	.word	0xe000ed04

080309e0 <vPortSetupTimerInterrupt>:
{
 80309e0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80309e2:	4a09      	ldr	r2, [pc, #36]	; (8030a08 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80309e4:	4d09      	ldr	r5, [pc, #36]	; (8030a0c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80309e6:	4b0a      	ldr	r3, [pc, #40]	; (8030a10 <vPortSetupTimerInterrupt+0x30>)
 80309e8:	4c0a      	ldr	r4, [pc, #40]	; (8030a14 <vPortSetupTimerInterrupt+0x34>)
 80309ea:	480b      	ldr	r0, [pc, #44]	; (8030a18 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80309ec:	2100      	movs	r1, #0
 80309ee:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80309f0:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80309f2:	681b      	ldr	r3, [r3, #0]
 80309f4:	fba4 1303 	umull	r1, r3, r4, r3
 80309f8:	099b      	lsrs	r3, r3, #6
 80309fa:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80309fc:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80309fe:	6003      	str	r3, [r0, #0]
}
 8030a00:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8030a02:	6011      	str	r1, [r2, #0]
}
 8030a04:	4770      	bx	lr
 8030a06:	bf00      	nop
 8030a08:	e000e010 	.word	0xe000e010
 8030a0c:	e000e018 	.word	0xe000e018
 8030a10:	20000040 	.word	0x20000040
 8030a14:	10624dd3 	.word	0x10624dd3
 8030a18:	e000e014 	.word	0xe000e014

08030a1c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8030a1c:	4b39      	ldr	r3, [pc, #228]	; (8030b04 <xPortStartScheduler+0xe8>)
 8030a1e:	4a3a      	ldr	r2, [pc, #232]	; (8030b08 <xPortStartScheduler+0xec>)
 8030a20:	6819      	ldr	r1, [r3, #0]
 8030a22:	4291      	cmp	r1, r2
 8030a24:	d040      	beq.n	8030aa8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8030a26:	681a      	ldr	r2, [r3, #0]
 8030a28:	4b38      	ldr	r3, [pc, #224]	; (8030b0c <xPortStartScheduler+0xf0>)
 8030a2a:	429a      	cmp	r2, r3
 8030a2c:	d033      	beq.n	8030a96 <xPortStartScheduler+0x7a>
{
 8030a2e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8030a30:	4b37      	ldr	r3, [pc, #220]	; (8030b10 <xPortStartScheduler+0xf4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8030a32:	4c38      	ldr	r4, [pc, #224]	; (8030b14 <xPortStartScheduler+0xf8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8030a34:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8030a36:	4938      	ldr	r1, [pc, #224]	; (8030b18 <xPortStartScheduler+0xfc>)
{
 8030a38:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8030a3a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8030a3c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8030a3e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8030a40:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8030a42:	781b      	ldrb	r3, [r3, #0]
 8030a44:	b2db      	uxtb	r3, r3
 8030a46:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8030a4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8030a4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8030a52:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8030a56:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8030a58:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8030a5a:	0614      	lsls	r4, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8030a5c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8030a5e:	bf48      	it	mi
 8030a60:	2206      	movmi	r2, #6
 8030a62:	d50f      	bpl.n	8030a84 <xPortStartScheduler+0x68>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8030a64:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8030a68:	005b      	lsls	r3, r3, #1
 8030a6a:	b2db      	uxtb	r3, r3
 8030a6c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8030a70:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8030a74:	0600      	lsls	r0, r0, #24
 8030a76:	4613      	mov	r3, r2
 8030a78:	f102 32ff 	add.w	r2, r2, #4294967295
 8030a7c:	d4f2      	bmi.n	8030a64 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8030a7e:	2b03      	cmp	r3, #3
 8030a80:	d01b      	beq.n	8030aba <xPortStartScheduler+0x9e>
 8030a82:	600b      	str	r3, [r1, #0]
	__asm volatile
 8030a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030a88:	f383 8811 	msr	BASEPRI, r3
 8030a8c:	f3bf 8f6f 	isb	sy
 8030a90:	f3bf 8f4f 	dsb	sy
 8030a94:	e7fe      	b.n	8030a94 <xPortStartScheduler+0x78>
 8030a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030a9a:	f383 8811 	msr	BASEPRI, r3
 8030a9e:	f3bf 8f6f 	isb	sy
 8030aa2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8030aa6:	e7fe      	b.n	8030aa6 <xPortStartScheduler+0x8a>
 8030aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030aac:	f383 8811 	msr	BASEPRI, r3
 8030ab0:	f3bf 8f6f 	isb	sy
 8030ab4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8030ab8:	e7fe      	b.n	8030ab8 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8030aba:	9a01      	ldr	r2, [sp, #4]
 8030abc:	4814      	ldr	r0, [pc, #80]	; (8030b10 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8030abe:	4b17      	ldr	r3, [pc, #92]	; (8030b1c <xPortStartScheduler+0x100>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8030ac0:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8030ac2:	f44f 7440 	mov.w	r4, #768	; 0x300
 8030ac6:	600c      	str	r4, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8030ac8:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8030aca:	681a      	ldr	r2, [r3, #0]
 8030acc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8030ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8030ad2:	681a      	ldr	r2, [r3, #0]
 8030ad4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8030ad8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8030ada:	f7ff ff81 	bl	80309e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8030ade:	4b10      	ldr	r3, [pc, #64]	; (8030b20 <xPortStartScheduler+0x104>)
 8030ae0:	2400      	movs	r4, #0
 8030ae2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8030ae4:	f7ff feaa 	bl	803083c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8030ae8:	4a0e      	ldr	r2, [pc, #56]	; (8030b24 <xPortStartScheduler+0x108>)
 8030aea:	6813      	ldr	r3, [r2, #0]
 8030aec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8030af0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8030af2:	f7ff fe8f 	bl	8030814 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8030af6:	f7ff fc1b 	bl	8030330 <vTaskSwitchContext>
	prvTaskExitError();
 8030afa:	f7ff fea9 	bl	8030850 <prvTaskExitError>
}
 8030afe:	4620      	mov	r0, r4
 8030b00:	b002      	add	sp, #8
 8030b02:	bd10      	pop	{r4, pc}
 8030b04:	e000ed00 	.word	0xe000ed00
 8030b08:	410fc271 	.word	0x410fc271
 8030b0c:	410fc270 	.word	0x410fc270
 8030b10:	e000e400 	.word	0xe000e400
 8030b14:	2000079c 	.word	0x2000079c
 8030b18:	200007a0 	.word	0x200007a0
 8030b1c:	e000ed20 	.word	0xe000ed20
 8030b20:	2000006c 	.word	0x2000006c
 8030b24:	e000ef34 	.word	0xe000ef34

08030b28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8030b28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8030b2c:	2b0f      	cmp	r3, #15
 8030b2e:	d90e      	bls.n	8030b4e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8030b30:	4910      	ldr	r1, [pc, #64]	; (8030b74 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8030b32:	4a11      	ldr	r2, [pc, #68]	; (8030b78 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8030b34:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8030b36:	7812      	ldrb	r2, [r2, #0]
 8030b38:	429a      	cmp	r2, r3
 8030b3a:	d908      	bls.n	8030b4e <vPortValidateInterruptPriority+0x26>
 8030b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030b40:	f383 8811 	msr	BASEPRI, r3
 8030b44:	f3bf 8f6f 	isb	sy
 8030b48:	f3bf 8f4f 	dsb	sy
 8030b4c:	e7fe      	b.n	8030b4c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8030b4e:	4b0b      	ldr	r3, [pc, #44]	; (8030b7c <vPortValidateInterruptPriority+0x54>)
 8030b50:	4a0b      	ldr	r2, [pc, #44]	; (8030b80 <vPortValidateInterruptPriority+0x58>)
 8030b52:	681b      	ldr	r3, [r3, #0]
 8030b54:	6812      	ldr	r2, [r2, #0]
 8030b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8030b5a:	4293      	cmp	r3, r2
 8030b5c:	d908      	bls.n	8030b70 <vPortValidateInterruptPriority+0x48>
 8030b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030b62:	f383 8811 	msr	BASEPRI, r3
 8030b66:	f3bf 8f6f 	isb	sy
 8030b6a:	f3bf 8f4f 	dsb	sy
 8030b6e:	e7fe      	b.n	8030b6e <vPortValidateInterruptPriority+0x46>
	}
 8030b70:	4770      	bx	lr
 8030b72:	bf00      	nop
 8030b74:	e000e3f0 	.word	0xe000e3f0
 8030b78:	2000079c 	.word	0x2000079c
 8030b7c:	e000ed0c 	.word	0xe000ed0c
 8030b80:	200007a0 	.word	0x200007a0

08030b84 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8030b84:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8030b86:	4b15      	ldr	r3, [pc, #84]	; (8030bdc <prvInsertBlockIntoFreeList+0x58>)
 8030b88:	461a      	mov	r2, r3
 8030b8a:	681b      	ldr	r3, [r3, #0]
 8030b8c:	4283      	cmp	r3, r0
 8030b8e:	d3fb      	bcc.n	8030b88 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8030b90:	6851      	ldr	r1, [r2, #4]
 8030b92:	1854      	adds	r4, r2, r1
 8030b94:	42a0      	cmp	r0, r4
 8030b96:	d00a      	beq.n	8030bae <prvInsertBlockIntoFreeList+0x2a>
 8030b98:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8030b9a:	1844      	adds	r4, r0, r1
 8030b9c:	42a3      	cmp	r3, r4
 8030b9e:	d00d      	beq.n	8030bbc <prvInsertBlockIntoFreeList+0x38>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8030ba0:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8030ba2:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8030ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8030ba8:	bf18      	it	ne
 8030baa:	6010      	strne	r0, [r2, #0]
}
 8030bac:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8030bae:	6840      	ldr	r0, [r0, #4]
 8030bb0:	4401      	add	r1, r0
 8030bb2:	4610      	mov	r0, r2
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8030bb4:	1844      	adds	r4, r0, r1
 8030bb6:	42a3      	cmp	r3, r4
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8030bb8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8030bba:	d1f1      	bne.n	8030ba0 <prvInsertBlockIntoFreeList+0x1c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8030bbc:	4c08      	ldr	r4, [pc, #32]	; (8030be0 <prvInsertBlockIntoFreeList+0x5c>)
 8030bbe:	6824      	ldr	r4, [r4, #0]
 8030bc0:	42a3      	cmp	r3, r4
 8030bc2:	d0ed      	beq.n	8030ba0 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8030bc4:	e9d3 3400 	ldrd	r3, r4, [r3]
	if( pxIterator != pxBlockToInsert )
 8030bc8:	4290      	cmp	r0, r2
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8030bca:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8030bcc:	6003      	str	r3, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8030bce:	6041      	str	r1, [r0, #4]
}
 8030bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8030bd4:	bf18      	it	ne
 8030bd6:	6010      	strne	r0, [r2, #0]
}
 8030bd8:	4770      	bx	lr
 8030bda:	bf00      	nop
 8030bdc:	20002fbc 	.word	0x20002fbc
 8030be0:	200007a4 	.word	0x200007a4

08030be4 <pvPortMalloc>:
{
 8030be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8030be8:	4f42      	ldr	r7, [pc, #264]	; (8030cf4 <pvPortMalloc+0x110>)
{
 8030bea:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8030bec:	f7ff faee 	bl	80301cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8030bf0:	683b      	ldr	r3, [r7, #0]
 8030bf2:	2b00      	cmp	r3, #0
 8030bf4:	d039      	beq.n	8030c6a <pvPortMalloc+0x86>
 8030bf6:	4b40      	ldr	r3, [pc, #256]	; (8030cf8 <pvPortMalloc+0x114>)
 8030bf8:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8030bfa:	422c      	tst	r4, r5
 8030bfc:	d12f      	bne.n	8030c5e <pvPortMalloc+0x7a>
			if( xWantedSize > 0 )
 8030bfe:	b374      	cbz	r4, 8030c5e <pvPortMalloc+0x7a>
				xWantedSize += xHeapStructSize;
 8030c00:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8030c04:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8030c06:	bf1c      	itt	ne
 8030c08:	f023 0307 	bicne.w	r3, r3, #7
 8030c0c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8030c0e:	b333      	cbz	r3, 8030c5e <pvPortMalloc+0x7a>
 8030c10:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8030d08 <pvPortMalloc+0x124>
 8030c14:	f8d8 6000 	ldr.w	r6, [r8]
 8030c18:	429e      	cmp	r6, r3
 8030c1a:	d320      	bcc.n	8030c5e <pvPortMalloc+0x7a>
				pxBlock = xStart.pxNextFreeBlock;
 8030c1c:	4937      	ldr	r1, [pc, #220]	; (8030cfc <pvPortMalloc+0x118>)
 8030c1e:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8030c20:	e003      	b.n	8030c2a <pvPortMalloc+0x46>
 8030c22:	6820      	ldr	r0, [r4, #0]
 8030c24:	b120      	cbz	r0, 8030c30 <pvPortMalloc+0x4c>
 8030c26:	4621      	mov	r1, r4
 8030c28:	4604      	mov	r4, r0
 8030c2a:	6862      	ldr	r2, [r4, #4]
 8030c2c:	429a      	cmp	r2, r3
 8030c2e:	d3f8      	bcc.n	8030c22 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8030c30:	6838      	ldr	r0, [r7, #0]
 8030c32:	42a0      	cmp	r0, r4
 8030c34:	d013      	beq.n	8030c5e <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8030c36:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8030c38:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8030c3a:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8030c3c:	1ad1      	subs	r1, r2, r3
 8030c3e:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8030c40:	f107 0708 	add.w	r7, r7, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8030c44:	d939      	bls.n	8030cba <pvPortMalloc+0xd6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8030c46:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8030c48:	0742      	lsls	r2, r0, #29
 8030c4a:	d031      	beq.n	8030cb0 <pvPortMalloc+0xcc>
 8030c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030c50:	f383 8811 	msr	BASEPRI, r3
 8030c54:	f3bf 8f6f 	isb	sy
 8030c58:	f3bf 8f4f 	dsb	sy
 8030c5c:	e7fe      	b.n	8030c5c <pvPortMalloc+0x78>
	( void ) xTaskResumeAll();
 8030c5e:	f7ff fabd 	bl	80301dc <xTaskResumeAll>
 8030c62:	2700      	movs	r7, #0
}
 8030c64:	4638      	mov	r0, r7
 8030c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8030c6a:	4b25      	ldr	r3, [pc, #148]	; (8030d00 <pvPortMalloc+0x11c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8030c6c:	4e25      	ldr	r6, [pc, #148]	; (8030d04 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8030c6e:	4d23      	ldr	r5, [pc, #140]	; (8030cfc <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8030c70:	0758      	lsls	r0, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8030c72:	bf14      	ite	ne
 8030c74:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8030c76:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8030c78:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
	uxAddress -= xHeapStructSize;
 8030c7c:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8030c80:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8030c84:	4820      	ldr	r0, [pc, #128]	; (8030d08 <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 8030c86:	603b      	str	r3, [r7, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8030c88:	bf18      	it	ne
 8030c8a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8030c8e:	4611      	mov	r1, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8030c90:	1a9a      	subs	r2, r3, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8030c92:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8030c94:	6002      	str	r2, [r0, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8030c96:	4e18      	ldr	r6, [pc, #96]	; (8030cf8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8030c98:	2000      	movs	r0, #0
	pxEnd->pxNextFreeBlock = NULL;
 8030c9a:	e9c3 0000 	strd	r0, r0, [r3]
	xStart.xBlockSize = ( size_t ) 0;
 8030c9e:	6068      	str	r0, [r5, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8030ca0:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8030ca2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8030ca6:	600b      	str	r3, [r1, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8030ca8:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8030caa:	6029      	str	r1, [r5, #0]
}
 8030cac:	4615      	mov	r5, r2
 8030cae:	e7a4      	b.n	8030bfa <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8030cb0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8030cb2:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8030cb4:	f7ff ff66 	bl	8030b84 <prvInsertBlockIntoFreeList>
 8030cb8:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8030cba:	4812      	ldr	r0, [pc, #72]	; (8030d04 <pvPortMalloc+0x120>)
 8030cbc:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8030cbe:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8030cc0:	428e      	cmp	r6, r1
					xNumberOfSuccessfulAllocations++;
 8030cc2:	4912      	ldr	r1, [pc, #72]	; (8030d0c <pvPortMalloc+0x128>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8030cc4:	bf38      	it	cc
 8030cc6:	6006      	strcc	r6, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 8030cc8:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8030cca:	f8c8 6000 	str.w	r6, [r8]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8030cce:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 8030cd0:	2000      	movs	r0, #0
					xNumberOfSuccessfulAllocations++;
 8030cd2:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8030cd4:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8030cd6:	6020      	str	r0, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8030cd8:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8030cda:	f7ff fa7f 	bl	80301dc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8030cde:	077b      	lsls	r3, r7, #29
 8030ce0:	d0c0      	beq.n	8030c64 <pvPortMalloc+0x80>
 8030ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030ce6:	f383 8811 	msr	BASEPRI, r3
 8030cea:	f3bf 8f6f 	isb	sy
 8030cee:	f3bf 8f4f 	dsb	sy
 8030cf2:	e7fe      	b.n	8030cf2 <pvPortMalloc+0x10e>
 8030cf4:	200007a4 	.word	0x200007a4
 8030cf8:	20002fa8 	.word	0x20002fa8
 8030cfc:	20002fbc 	.word	0x20002fbc
 8030d00:	200007a8 	.word	0x200007a8
 8030d04:	20002fb0 	.word	0x20002fb0
 8030d08:	20002fac 	.word	0x20002fac
 8030d0c:	20002fb4 	.word	0x20002fb4

08030d10 <vPortFree>:
	if( pv != NULL )
 8030d10:	b1e0      	cbz	r0, 8030d4c <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8030d12:	4a1b      	ldr	r2, [pc, #108]	; (8030d80 <vPortFree+0x70>)
 8030d14:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8030d18:	6812      	ldr	r2, [r2, #0]
 8030d1a:	4213      	tst	r3, r2
{
 8030d1c:	b510      	push	{r4, lr}
 8030d1e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8030d20:	d00b      	beq.n	8030d3a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8030d22:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8030d26:	b191      	cbz	r1, 8030d4e <vPortFree+0x3e>
 8030d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030d2c:	f383 8811 	msr	BASEPRI, r3
 8030d30:	f3bf 8f6f 	isb	sy
 8030d34:	f3bf 8f4f 	dsb	sy
 8030d38:	e7fe      	b.n	8030d38 <vPortFree+0x28>
 8030d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8030d3e:	f383 8811 	msr	BASEPRI, r3
 8030d42:	f3bf 8f6f 	isb	sy
 8030d46:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8030d4a:	e7fe      	b.n	8030d4a <vPortFree+0x3a>
 8030d4c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8030d4e:	ea23 0302 	bic.w	r3, r3, r2
 8030d52:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8030d56:	f7ff fa39 	bl	80301cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8030d5a:	4a0a      	ldr	r2, [pc, #40]	; (8030d84 <vPortFree+0x74>)
 8030d5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8030d60:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8030d62:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8030d66:	440b      	add	r3, r1
 8030d68:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8030d6a:	f7ff ff0b 	bl	8030b84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8030d6e:	4a06      	ldr	r2, [pc, #24]	; (8030d88 <vPortFree+0x78>)
 8030d70:	6813      	ldr	r3, [r2, #0]
}
 8030d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8030d76:	3301      	adds	r3, #1
 8030d78:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8030d7a:	f7ff ba2f 	b.w	80301dc <xTaskResumeAll>
 8030d7e:	bf00      	nop
 8030d80:	20002fa8 	.word	0x20002fa8
 8030d84:	20002fac 	.word	0x20002fac
 8030d88:	20002fb8 	.word	0x20002fb8

08030d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8030d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8030dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8030d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8030d92:	e003      	b.n	8030d9c <LoopCopyDataInit>

08030d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8030d94:	4b0c      	ldr	r3, [pc, #48]	; (8030dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8030d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8030d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8030d9a:	3104      	adds	r1, #4

08030d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8030d9c:	480b      	ldr	r0, [pc, #44]	; (8030dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8030d9e:	4b0c      	ldr	r3, [pc, #48]	; (8030dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8030da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8030da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8030da4:	d3f6      	bcc.n	8030d94 <CopyDataInit>
  ldr  r2, =_sbss
 8030da6:	4a0b      	ldr	r2, [pc, #44]	; (8030dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8030da8:	e002      	b.n	8030db0 <LoopFillZerobss>

08030daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8030daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8030dac:	f842 3b04 	str.w	r3, [r2], #4

08030db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8030db0:	4b09      	ldr	r3, [pc, #36]	; (8030dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8030db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8030db4:	d3f9      	bcc.n	8030daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8030db6:	f7f9 ff9f 	bl	802acf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8030dba:	f000 f811 	bl	8030de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8030dbe:	f7f7 ff7b 	bl	8028cb8 <main>
  bx  lr    
 8030dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8030dc4:	2004fff0 	.word	0x2004fff0
  ldr  r3, =_sidata
 8030dc8:	0803a8e0 	.word	0x0803a8e0
  ldr  r0, =_sdata
 8030dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8030dd0:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8030dd4:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8030dd8:	2000317c 	.word	0x2000317c

08030ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8030ddc:	e7fe      	b.n	8030ddc <ADC_IRQHandler>
	...

08030de0 <__libc_init_array>:
 8030de0:	b570      	push	{r4, r5, r6, lr}
 8030de2:	4d0d      	ldr	r5, [pc, #52]	; (8030e18 <__libc_init_array+0x38>)
 8030de4:	4c0d      	ldr	r4, [pc, #52]	; (8030e1c <__libc_init_array+0x3c>)
 8030de6:	1b64      	subs	r4, r4, r5
 8030de8:	10a4      	asrs	r4, r4, #2
 8030dea:	2600      	movs	r6, #0
 8030dec:	42a6      	cmp	r6, r4
 8030dee:	d109      	bne.n	8030e04 <__libc_init_array+0x24>
 8030df0:	4d0b      	ldr	r5, [pc, #44]	; (8030e20 <__libc_init_array+0x40>)
 8030df2:	4c0c      	ldr	r4, [pc, #48]	; (8030e24 <__libc_init_array+0x44>)
 8030df4:	f002 fbda 	bl	80335ac <_init>
 8030df8:	1b64      	subs	r4, r4, r5
 8030dfa:	10a4      	asrs	r4, r4, #2
 8030dfc:	2600      	movs	r6, #0
 8030dfe:	42a6      	cmp	r6, r4
 8030e00:	d105      	bne.n	8030e0e <__libc_init_array+0x2e>
 8030e02:	bd70      	pop	{r4, r5, r6, pc}
 8030e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8030e08:	4798      	blx	r3
 8030e0a:	3601      	adds	r6, #1
 8030e0c:	e7ee      	b.n	8030dec <__libc_init_array+0xc>
 8030e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8030e12:	4798      	blx	r3
 8030e14:	3601      	adds	r6, #1
 8030e16:	e7f2      	b.n	8030dfe <__libc_init_array+0x1e>
 8030e18:	0803a8d8 	.word	0x0803a8d8
 8030e1c:	0803a8d8 	.word	0x0803a8d8
 8030e20:	0803a8d8 	.word	0x0803a8d8
 8030e24:	0803a8dc 	.word	0x0803a8dc

08030e28 <memcpy>:
 8030e28:	440a      	add	r2, r1
 8030e2a:	4291      	cmp	r1, r2
 8030e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8030e30:	d100      	bne.n	8030e34 <memcpy+0xc>
 8030e32:	4770      	bx	lr
 8030e34:	b510      	push	{r4, lr}
 8030e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8030e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8030e3e:	4291      	cmp	r1, r2
 8030e40:	d1f9      	bne.n	8030e36 <memcpy+0xe>
 8030e42:	bd10      	pop	{r4, pc}

08030e44 <memmove>:
 8030e44:	4288      	cmp	r0, r1
 8030e46:	b510      	push	{r4, lr}
 8030e48:	eb01 0402 	add.w	r4, r1, r2
 8030e4c:	d902      	bls.n	8030e54 <memmove+0x10>
 8030e4e:	4284      	cmp	r4, r0
 8030e50:	4623      	mov	r3, r4
 8030e52:	d807      	bhi.n	8030e64 <memmove+0x20>
 8030e54:	1e43      	subs	r3, r0, #1
 8030e56:	42a1      	cmp	r1, r4
 8030e58:	d008      	beq.n	8030e6c <memmove+0x28>
 8030e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8030e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8030e62:	e7f8      	b.n	8030e56 <memmove+0x12>
 8030e64:	4402      	add	r2, r0
 8030e66:	4601      	mov	r1, r0
 8030e68:	428a      	cmp	r2, r1
 8030e6a:	d100      	bne.n	8030e6e <memmove+0x2a>
 8030e6c:	bd10      	pop	{r4, pc}
 8030e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8030e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8030e76:	e7f7      	b.n	8030e68 <memmove+0x24>

08030e78 <memset>:
 8030e78:	4402      	add	r2, r0
 8030e7a:	4603      	mov	r3, r0
 8030e7c:	4293      	cmp	r3, r2
 8030e7e:	d100      	bne.n	8030e82 <memset+0xa>
 8030e80:	4770      	bx	lr
 8030e82:	f803 1b01 	strb.w	r1, [r3], #1
 8030e86:	e7f9      	b.n	8030e7c <memset+0x4>

08030e88 <srand>:
 8030e88:	b538      	push	{r3, r4, r5, lr}
 8030e8a:	4b10      	ldr	r3, [pc, #64]	; (8030ecc <srand+0x44>)
 8030e8c:	681d      	ldr	r5, [r3, #0]
 8030e8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8030e90:	4604      	mov	r4, r0
 8030e92:	b9b3      	cbnz	r3, 8030ec2 <srand+0x3a>
 8030e94:	2018      	movs	r0, #24
 8030e96:	f000 f895 	bl	8030fc4 <malloc>
 8030e9a:	4602      	mov	r2, r0
 8030e9c:	63a8      	str	r0, [r5, #56]	; 0x38
 8030e9e:	b920      	cbnz	r0, 8030eaa <srand+0x22>
 8030ea0:	4b0b      	ldr	r3, [pc, #44]	; (8030ed0 <srand+0x48>)
 8030ea2:	480c      	ldr	r0, [pc, #48]	; (8030ed4 <srand+0x4c>)
 8030ea4:	2142      	movs	r1, #66	; 0x42
 8030ea6:	f000 f85d 	bl	8030f64 <__assert_func>
 8030eaa:	490b      	ldr	r1, [pc, #44]	; (8030ed8 <srand+0x50>)
 8030eac:	4b0b      	ldr	r3, [pc, #44]	; (8030edc <srand+0x54>)
 8030eae:	e9c0 1300 	strd	r1, r3, [r0]
 8030eb2:	4b0b      	ldr	r3, [pc, #44]	; (8030ee0 <srand+0x58>)
 8030eb4:	6083      	str	r3, [r0, #8]
 8030eb6:	230b      	movs	r3, #11
 8030eb8:	8183      	strh	r3, [r0, #12]
 8030eba:	2100      	movs	r1, #0
 8030ebc:	2001      	movs	r0, #1
 8030ebe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8030ec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8030ec4:	2200      	movs	r2, #0
 8030ec6:	611c      	str	r4, [r3, #16]
 8030ec8:	615a      	str	r2, [r3, #20]
 8030eca:	bd38      	pop	{r3, r4, r5, pc}
 8030ecc:	20000070 	.word	0x20000070
 8030ed0:	0803a398 	.word	0x0803a398
 8030ed4:	0803a3af 	.word	0x0803a3af
 8030ed8:	abcd330e 	.word	0xabcd330e
 8030edc:	e66d1234 	.word	0xe66d1234
 8030ee0:	0005deec 	.word	0x0005deec

08030ee4 <rand>:
 8030ee4:	4b17      	ldr	r3, [pc, #92]	; (8030f44 <rand+0x60>)
 8030ee6:	b510      	push	{r4, lr}
 8030ee8:	681c      	ldr	r4, [r3, #0]
 8030eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8030eec:	b9b3      	cbnz	r3, 8030f1c <rand+0x38>
 8030eee:	2018      	movs	r0, #24
 8030ef0:	f000 f868 	bl	8030fc4 <malloc>
 8030ef4:	63a0      	str	r0, [r4, #56]	; 0x38
 8030ef6:	b928      	cbnz	r0, 8030f04 <rand+0x20>
 8030ef8:	4602      	mov	r2, r0
 8030efa:	4b13      	ldr	r3, [pc, #76]	; (8030f48 <rand+0x64>)
 8030efc:	4813      	ldr	r0, [pc, #76]	; (8030f4c <rand+0x68>)
 8030efe:	214e      	movs	r1, #78	; 0x4e
 8030f00:	f000 f830 	bl	8030f64 <__assert_func>
 8030f04:	4a12      	ldr	r2, [pc, #72]	; (8030f50 <rand+0x6c>)
 8030f06:	4b13      	ldr	r3, [pc, #76]	; (8030f54 <rand+0x70>)
 8030f08:	e9c0 2300 	strd	r2, r3, [r0]
 8030f0c:	4b12      	ldr	r3, [pc, #72]	; (8030f58 <rand+0x74>)
 8030f0e:	6083      	str	r3, [r0, #8]
 8030f10:	230b      	movs	r3, #11
 8030f12:	8183      	strh	r3, [r0, #12]
 8030f14:	2201      	movs	r2, #1
 8030f16:	2300      	movs	r3, #0
 8030f18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8030f1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8030f1e:	480f      	ldr	r0, [pc, #60]	; (8030f5c <rand+0x78>)
 8030f20:	690a      	ldr	r2, [r1, #16]
 8030f22:	694b      	ldr	r3, [r1, #20]
 8030f24:	4c0e      	ldr	r4, [pc, #56]	; (8030f60 <rand+0x7c>)
 8030f26:	4350      	muls	r0, r2
 8030f28:	fb04 0003 	mla	r0, r4, r3, r0
 8030f2c:	fba2 3404 	umull	r3, r4, r2, r4
 8030f30:	1c5a      	adds	r2, r3, #1
 8030f32:	4404      	add	r4, r0
 8030f34:	f144 0000 	adc.w	r0, r4, #0
 8030f38:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8030f3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8030f40:	bd10      	pop	{r4, pc}
 8030f42:	bf00      	nop
 8030f44:	20000070 	.word	0x20000070
 8030f48:	0803a398 	.word	0x0803a398
 8030f4c:	0803a3af 	.word	0x0803a3af
 8030f50:	abcd330e 	.word	0xabcd330e
 8030f54:	e66d1234 	.word	0xe66d1234
 8030f58:	0005deec 	.word	0x0005deec
 8030f5c:	5851f42d 	.word	0x5851f42d
 8030f60:	4c957f2d 	.word	0x4c957f2d

08030f64 <__assert_func>:
 8030f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8030f66:	4614      	mov	r4, r2
 8030f68:	461a      	mov	r2, r3
 8030f6a:	4b09      	ldr	r3, [pc, #36]	; (8030f90 <__assert_func+0x2c>)
 8030f6c:	681b      	ldr	r3, [r3, #0]
 8030f6e:	4605      	mov	r5, r0
 8030f70:	68d8      	ldr	r0, [r3, #12]
 8030f72:	b14c      	cbz	r4, 8030f88 <__assert_func+0x24>
 8030f74:	4b07      	ldr	r3, [pc, #28]	; (8030f94 <__assert_func+0x30>)
 8030f76:	9100      	str	r1, [sp, #0]
 8030f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8030f7c:	4906      	ldr	r1, [pc, #24]	; (8030f98 <__assert_func+0x34>)
 8030f7e:	462b      	mov	r3, r5
 8030f80:	f000 f80e 	bl	8030fa0 <fiprintf>
 8030f84:	f000 fc8e 	bl	80318a4 <abort>
 8030f88:	4b04      	ldr	r3, [pc, #16]	; (8030f9c <__assert_func+0x38>)
 8030f8a:	461c      	mov	r4, r3
 8030f8c:	e7f3      	b.n	8030f76 <__assert_func+0x12>
 8030f8e:	bf00      	nop
 8030f90:	20000070 	.word	0x20000070
 8030f94:	0803a40e 	.word	0x0803a40e
 8030f98:	0803a41b 	.word	0x0803a41b
 8030f9c:	0803a26a 	.word	0x0803a26a

08030fa0 <fiprintf>:
 8030fa0:	b40e      	push	{r1, r2, r3}
 8030fa2:	b503      	push	{r0, r1, lr}
 8030fa4:	4601      	mov	r1, r0
 8030fa6:	ab03      	add	r3, sp, #12
 8030fa8:	4805      	ldr	r0, [pc, #20]	; (8030fc0 <fiprintf+0x20>)
 8030faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8030fae:	6800      	ldr	r0, [r0, #0]
 8030fb0:	9301      	str	r3, [sp, #4]
 8030fb2:	f000 f8e3 	bl	803117c <_vfiprintf_r>
 8030fb6:	b002      	add	sp, #8
 8030fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8030fbc:	b003      	add	sp, #12
 8030fbe:	4770      	bx	lr
 8030fc0:	20000070 	.word	0x20000070

08030fc4 <malloc>:
 8030fc4:	4b02      	ldr	r3, [pc, #8]	; (8030fd0 <malloc+0xc>)
 8030fc6:	4601      	mov	r1, r0
 8030fc8:	6818      	ldr	r0, [r3, #0]
 8030fca:	f000 b853 	b.w	8031074 <_malloc_r>
 8030fce:	bf00      	nop
 8030fd0:	20000070 	.word	0x20000070

08030fd4 <_free_r>:
 8030fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8030fd6:	2900      	cmp	r1, #0
 8030fd8:	d048      	beq.n	803106c <_free_r+0x98>
 8030fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8030fde:	9001      	str	r0, [sp, #4]
 8030fe0:	2b00      	cmp	r3, #0
 8030fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8030fe6:	bfb8      	it	lt
 8030fe8:	18e4      	addlt	r4, r4, r3
 8030fea:	f000 fe81 	bl	8031cf0 <__malloc_lock>
 8030fee:	4a20      	ldr	r2, [pc, #128]	; (8031070 <_free_r+0x9c>)
 8030ff0:	9801      	ldr	r0, [sp, #4]
 8030ff2:	6813      	ldr	r3, [r2, #0]
 8030ff4:	4615      	mov	r5, r2
 8030ff6:	b933      	cbnz	r3, 8031006 <_free_r+0x32>
 8030ff8:	6063      	str	r3, [r4, #4]
 8030ffa:	6014      	str	r4, [r2, #0]
 8030ffc:	b003      	add	sp, #12
 8030ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031002:	f000 be7b 	b.w	8031cfc <__malloc_unlock>
 8031006:	42a3      	cmp	r3, r4
 8031008:	d90b      	bls.n	8031022 <_free_r+0x4e>
 803100a:	6821      	ldr	r1, [r4, #0]
 803100c:	1862      	adds	r2, r4, r1
 803100e:	4293      	cmp	r3, r2
 8031010:	bf04      	itt	eq
 8031012:	681a      	ldreq	r2, [r3, #0]
 8031014:	685b      	ldreq	r3, [r3, #4]
 8031016:	6063      	str	r3, [r4, #4]
 8031018:	bf04      	itt	eq
 803101a:	1852      	addeq	r2, r2, r1
 803101c:	6022      	streq	r2, [r4, #0]
 803101e:	602c      	str	r4, [r5, #0]
 8031020:	e7ec      	b.n	8030ffc <_free_r+0x28>
 8031022:	461a      	mov	r2, r3
 8031024:	685b      	ldr	r3, [r3, #4]
 8031026:	b10b      	cbz	r3, 803102c <_free_r+0x58>
 8031028:	42a3      	cmp	r3, r4
 803102a:	d9fa      	bls.n	8031022 <_free_r+0x4e>
 803102c:	6811      	ldr	r1, [r2, #0]
 803102e:	1855      	adds	r5, r2, r1
 8031030:	42a5      	cmp	r5, r4
 8031032:	d10b      	bne.n	803104c <_free_r+0x78>
 8031034:	6824      	ldr	r4, [r4, #0]
 8031036:	4421      	add	r1, r4
 8031038:	1854      	adds	r4, r2, r1
 803103a:	42a3      	cmp	r3, r4
 803103c:	6011      	str	r1, [r2, #0]
 803103e:	d1dd      	bne.n	8030ffc <_free_r+0x28>
 8031040:	681c      	ldr	r4, [r3, #0]
 8031042:	685b      	ldr	r3, [r3, #4]
 8031044:	6053      	str	r3, [r2, #4]
 8031046:	4421      	add	r1, r4
 8031048:	6011      	str	r1, [r2, #0]
 803104a:	e7d7      	b.n	8030ffc <_free_r+0x28>
 803104c:	d902      	bls.n	8031054 <_free_r+0x80>
 803104e:	230c      	movs	r3, #12
 8031050:	6003      	str	r3, [r0, #0]
 8031052:	e7d3      	b.n	8030ffc <_free_r+0x28>
 8031054:	6825      	ldr	r5, [r4, #0]
 8031056:	1961      	adds	r1, r4, r5
 8031058:	428b      	cmp	r3, r1
 803105a:	bf04      	itt	eq
 803105c:	6819      	ldreq	r1, [r3, #0]
 803105e:	685b      	ldreq	r3, [r3, #4]
 8031060:	6063      	str	r3, [r4, #4]
 8031062:	bf04      	itt	eq
 8031064:	1949      	addeq	r1, r1, r5
 8031066:	6021      	streq	r1, [r4, #0]
 8031068:	6054      	str	r4, [r2, #4]
 803106a:	e7c7      	b.n	8030ffc <_free_r+0x28>
 803106c:	b003      	add	sp, #12
 803106e:	bd30      	pop	{r4, r5, pc}
 8031070:	20002fc4 	.word	0x20002fc4

08031074 <_malloc_r>:
 8031074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031076:	1ccd      	adds	r5, r1, #3
 8031078:	f025 0503 	bic.w	r5, r5, #3
 803107c:	3508      	adds	r5, #8
 803107e:	2d0c      	cmp	r5, #12
 8031080:	bf38      	it	cc
 8031082:	250c      	movcc	r5, #12
 8031084:	2d00      	cmp	r5, #0
 8031086:	4606      	mov	r6, r0
 8031088:	db01      	blt.n	803108e <_malloc_r+0x1a>
 803108a:	42a9      	cmp	r1, r5
 803108c:	d903      	bls.n	8031096 <_malloc_r+0x22>
 803108e:	230c      	movs	r3, #12
 8031090:	6033      	str	r3, [r6, #0]
 8031092:	2000      	movs	r0, #0
 8031094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031096:	f000 fe2b 	bl	8031cf0 <__malloc_lock>
 803109a:	4921      	ldr	r1, [pc, #132]	; (8031120 <_malloc_r+0xac>)
 803109c:	680a      	ldr	r2, [r1, #0]
 803109e:	4614      	mov	r4, r2
 80310a0:	b99c      	cbnz	r4, 80310ca <_malloc_r+0x56>
 80310a2:	4f20      	ldr	r7, [pc, #128]	; (8031124 <_malloc_r+0xb0>)
 80310a4:	683b      	ldr	r3, [r7, #0]
 80310a6:	b923      	cbnz	r3, 80310b2 <_malloc_r+0x3e>
 80310a8:	4621      	mov	r1, r4
 80310aa:	4630      	mov	r0, r6
 80310ac:	f000 fb2a 	bl	8031704 <_sbrk_r>
 80310b0:	6038      	str	r0, [r7, #0]
 80310b2:	4629      	mov	r1, r5
 80310b4:	4630      	mov	r0, r6
 80310b6:	f000 fb25 	bl	8031704 <_sbrk_r>
 80310ba:	1c43      	adds	r3, r0, #1
 80310bc:	d123      	bne.n	8031106 <_malloc_r+0x92>
 80310be:	230c      	movs	r3, #12
 80310c0:	6033      	str	r3, [r6, #0]
 80310c2:	4630      	mov	r0, r6
 80310c4:	f000 fe1a 	bl	8031cfc <__malloc_unlock>
 80310c8:	e7e3      	b.n	8031092 <_malloc_r+0x1e>
 80310ca:	6823      	ldr	r3, [r4, #0]
 80310cc:	1b5b      	subs	r3, r3, r5
 80310ce:	d417      	bmi.n	8031100 <_malloc_r+0x8c>
 80310d0:	2b0b      	cmp	r3, #11
 80310d2:	d903      	bls.n	80310dc <_malloc_r+0x68>
 80310d4:	6023      	str	r3, [r4, #0]
 80310d6:	441c      	add	r4, r3
 80310d8:	6025      	str	r5, [r4, #0]
 80310da:	e004      	b.n	80310e6 <_malloc_r+0x72>
 80310dc:	6863      	ldr	r3, [r4, #4]
 80310de:	42a2      	cmp	r2, r4
 80310e0:	bf0c      	ite	eq
 80310e2:	600b      	streq	r3, [r1, #0]
 80310e4:	6053      	strne	r3, [r2, #4]
 80310e6:	4630      	mov	r0, r6
 80310e8:	f000 fe08 	bl	8031cfc <__malloc_unlock>
 80310ec:	f104 000b 	add.w	r0, r4, #11
 80310f0:	1d23      	adds	r3, r4, #4
 80310f2:	f020 0007 	bic.w	r0, r0, #7
 80310f6:	1ac2      	subs	r2, r0, r3
 80310f8:	d0cc      	beq.n	8031094 <_malloc_r+0x20>
 80310fa:	1a1b      	subs	r3, r3, r0
 80310fc:	50a3      	str	r3, [r4, r2]
 80310fe:	e7c9      	b.n	8031094 <_malloc_r+0x20>
 8031100:	4622      	mov	r2, r4
 8031102:	6864      	ldr	r4, [r4, #4]
 8031104:	e7cc      	b.n	80310a0 <_malloc_r+0x2c>
 8031106:	1cc4      	adds	r4, r0, #3
 8031108:	f024 0403 	bic.w	r4, r4, #3
 803110c:	42a0      	cmp	r0, r4
 803110e:	d0e3      	beq.n	80310d8 <_malloc_r+0x64>
 8031110:	1a21      	subs	r1, r4, r0
 8031112:	4630      	mov	r0, r6
 8031114:	f000 faf6 	bl	8031704 <_sbrk_r>
 8031118:	3001      	adds	r0, #1
 803111a:	d1dd      	bne.n	80310d8 <_malloc_r+0x64>
 803111c:	e7cf      	b.n	80310be <_malloc_r+0x4a>
 803111e:	bf00      	nop
 8031120:	20002fc4 	.word	0x20002fc4
 8031124:	20002fc8 	.word	0x20002fc8

08031128 <__sfputc_r>:
 8031128:	6893      	ldr	r3, [r2, #8]
 803112a:	3b01      	subs	r3, #1
 803112c:	2b00      	cmp	r3, #0
 803112e:	b410      	push	{r4}
 8031130:	6093      	str	r3, [r2, #8]
 8031132:	da08      	bge.n	8031146 <__sfputc_r+0x1e>
 8031134:	6994      	ldr	r4, [r2, #24]
 8031136:	42a3      	cmp	r3, r4
 8031138:	db01      	blt.n	803113e <__sfputc_r+0x16>
 803113a:	290a      	cmp	r1, #10
 803113c:	d103      	bne.n	8031146 <__sfputc_r+0x1e>
 803113e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031142:	f000 baef 	b.w	8031724 <__swbuf_r>
 8031146:	6813      	ldr	r3, [r2, #0]
 8031148:	1c58      	adds	r0, r3, #1
 803114a:	6010      	str	r0, [r2, #0]
 803114c:	7019      	strb	r1, [r3, #0]
 803114e:	4608      	mov	r0, r1
 8031150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031154:	4770      	bx	lr

08031156 <__sfputs_r>:
 8031156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031158:	4606      	mov	r6, r0
 803115a:	460f      	mov	r7, r1
 803115c:	4614      	mov	r4, r2
 803115e:	18d5      	adds	r5, r2, r3
 8031160:	42ac      	cmp	r4, r5
 8031162:	d101      	bne.n	8031168 <__sfputs_r+0x12>
 8031164:	2000      	movs	r0, #0
 8031166:	e007      	b.n	8031178 <__sfputs_r+0x22>
 8031168:	f814 1b01 	ldrb.w	r1, [r4], #1
 803116c:	463a      	mov	r2, r7
 803116e:	4630      	mov	r0, r6
 8031170:	f7ff ffda 	bl	8031128 <__sfputc_r>
 8031174:	1c43      	adds	r3, r0, #1
 8031176:	d1f3      	bne.n	8031160 <__sfputs_r+0xa>
 8031178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803117c <_vfiprintf_r>:
 803117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031180:	460d      	mov	r5, r1
 8031182:	b09d      	sub	sp, #116	; 0x74
 8031184:	4614      	mov	r4, r2
 8031186:	4698      	mov	r8, r3
 8031188:	4606      	mov	r6, r0
 803118a:	b118      	cbz	r0, 8031194 <_vfiprintf_r+0x18>
 803118c:	6983      	ldr	r3, [r0, #24]
 803118e:	b90b      	cbnz	r3, 8031194 <_vfiprintf_r+0x18>
 8031190:	f000 fcaa 	bl	8031ae8 <__sinit>
 8031194:	4b89      	ldr	r3, [pc, #548]	; (80313bc <_vfiprintf_r+0x240>)
 8031196:	429d      	cmp	r5, r3
 8031198:	d11b      	bne.n	80311d2 <_vfiprintf_r+0x56>
 803119a:	6875      	ldr	r5, [r6, #4]
 803119c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803119e:	07d9      	lsls	r1, r3, #31
 80311a0:	d405      	bmi.n	80311ae <_vfiprintf_r+0x32>
 80311a2:	89ab      	ldrh	r3, [r5, #12]
 80311a4:	059a      	lsls	r2, r3, #22
 80311a6:	d402      	bmi.n	80311ae <_vfiprintf_r+0x32>
 80311a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80311aa:	f000 fd3b 	bl	8031c24 <__retarget_lock_acquire_recursive>
 80311ae:	89ab      	ldrh	r3, [r5, #12]
 80311b0:	071b      	lsls	r3, r3, #28
 80311b2:	d501      	bpl.n	80311b8 <_vfiprintf_r+0x3c>
 80311b4:	692b      	ldr	r3, [r5, #16]
 80311b6:	b9eb      	cbnz	r3, 80311f4 <_vfiprintf_r+0x78>
 80311b8:	4629      	mov	r1, r5
 80311ba:	4630      	mov	r0, r6
 80311bc:	f000 fb04 	bl	80317c8 <__swsetup_r>
 80311c0:	b1c0      	cbz	r0, 80311f4 <_vfiprintf_r+0x78>
 80311c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80311c4:	07dc      	lsls	r4, r3, #31
 80311c6:	d50e      	bpl.n	80311e6 <_vfiprintf_r+0x6a>
 80311c8:	f04f 30ff 	mov.w	r0, #4294967295
 80311cc:	b01d      	add	sp, #116	; 0x74
 80311ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80311d2:	4b7b      	ldr	r3, [pc, #492]	; (80313c0 <_vfiprintf_r+0x244>)
 80311d4:	429d      	cmp	r5, r3
 80311d6:	d101      	bne.n	80311dc <_vfiprintf_r+0x60>
 80311d8:	68b5      	ldr	r5, [r6, #8]
 80311da:	e7df      	b.n	803119c <_vfiprintf_r+0x20>
 80311dc:	4b79      	ldr	r3, [pc, #484]	; (80313c4 <_vfiprintf_r+0x248>)
 80311de:	429d      	cmp	r5, r3
 80311e0:	bf08      	it	eq
 80311e2:	68f5      	ldreq	r5, [r6, #12]
 80311e4:	e7da      	b.n	803119c <_vfiprintf_r+0x20>
 80311e6:	89ab      	ldrh	r3, [r5, #12]
 80311e8:	0598      	lsls	r0, r3, #22
 80311ea:	d4ed      	bmi.n	80311c8 <_vfiprintf_r+0x4c>
 80311ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80311ee:	f000 fd1a 	bl	8031c26 <__retarget_lock_release_recursive>
 80311f2:	e7e9      	b.n	80311c8 <_vfiprintf_r+0x4c>
 80311f4:	2300      	movs	r3, #0
 80311f6:	9309      	str	r3, [sp, #36]	; 0x24
 80311f8:	2320      	movs	r3, #32
 80311fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80311fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8031202:	2330      	movs	r3, #48	; 0x30
 8031204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80313c8 <_vfiprintf_r+0x24c>
 8031208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803120c:	f04f 0901 	mov.w	r9, #1
 8031210:	4623      	mov	r3, r4
 8031212:	469a      	mov	sl, r3
 8031214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031218:	b10a      	cbz	r2, 803121e <_vfiprintf_r+0xa2>
 803121a:	2a25      	cmp	r2, #37	; 0x25
 803121c:	d1f9      	bne.n	8031212 <_vfiprintf_r+0x96>
 803121e:	ebba 0b04 	subs.w	fp, sl, r4
 8031222:	d00b      	beq.n	803123c <_vfiprintf_r+0xc0>
 8031224:	465b      	mov	r3, fp
 8031226:	4622      	mov	r2, r4
 8031228:	4629      	mov	r1, r5
 803122a:	4630      	mov	r0, r6
 803122c:	f7ff ff93 	bl	8031156 <__sfputs_r>
 8031230:	3001      	adds	r0, #1
 8031232:	f000 80aa 	beq.w	803138a <_vfiprintf_r+0x20e>
 8031236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031238:	445a      	add	r2, fp
 803123a:	9209      	str	r2, [sp, #36]	; 0x24
 803123c:	f89a 3000 	ldrb.w	r3, [sl]
 8031240:	2b00      	cmp	r3, #0
 8031242:	f000 80a2 	beq.w	803138a <_vfiprintf_r+0x20e>
 8031246:	2300      	movs	r3, #0
 8031248:	f04f 32ff 	mov.w	r2, #4294967295
 803124c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8031250:	f10a 0a01 	add.w	sl, sl, #1
 8031254:	9304      	str	r3, [sp, #16]
 8031256:	9307      	str	r3, [sp, #28]
 8031258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803125c:	931a      	str	r3, [sp, #104]	; 0x68
 803125e:	4654      	mov	r4, sl
 8031260:	2205      	movs	r2, #5
 8031262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031266:	4858      	ldr	r0, [pc, #352]	; (80313c8 <_vfiprintf_r+0x24c>)
 8031268:	f7ec f80a 	bl	801d280 <memchr>
 803126c:	9a04      	ldr	r2, [sp, #16]
 803126e:	b9d8      	cbnz	r0, 80312a8 <_vfiprintf_r+0x12c>
 8031270:	06d1      	lsls	r1, r2, #27
 8031272:	bf44      	itt	mi
 8031274:	2320      	movmi	r3, #32
 8031276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803127a:	0713      	lsls	r3, r2, #28
 803127c:	bf44      	itt	mi
 803127e:	232b      	movmi	r3, #43	; 0x2b
 8031280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031284:	f89a 3000 	ldrb.w	r3, [sl]
 8031288:	2b2a      	cmp	r3, #42	; 0x2a
 803128a:	d015      	beq.n	80312b8 <_vfiprintf_r+0x13c>
 803128c:	9a07      	ldr	r2, [sp, #28]
 803128e:	4654      	mov	r4, sl
 8031290:	2000      	movs	r0, #0
 8031292:	f04f 0c0a 	mov.w	ip, #10
 8031296:	4621      	mov	r1, r4
 8031298:	f811 3b01 	ldrb.w	r3, [r1], #1
 803129c:	3b30      	subs	r3, #48	; 0x30
 803129e:	2b09      	cmp	r3, #9
 80312a0:	d94e      	bls.n	8031340 <_vfiprintf_r+0x1c4>
 80312a2:	b1b0      	cbz	r0, 80312d2 <_vfiprintf_r+0x156>
 80312a4:	9207      	str	r2, [sp, #28]
 80312a6:	e014      	b.n	80312d2 <_vfiprintf_r+0x156>
 80312a8:	eba0 0308 	sub.w	r3, r0, r8
 80312ac:	fa09 f303 	lsl.w	r3, r9, r3
 80312b0:	4313      	orrs	r3, r2
 80312b2:	9304      	str	r3, [sp, #16]
 80312b4:	46a2      	mov	sl, r4
 80312b6:	e7d2      	b.n	803125e <_vfiprintf_r+0xe2>
 80312b8:	9b03      	ldr	r3, [sp, #12]
 80312ba:	1d19      	adds	r1, r3, #4
 80312bc:	681b      	ldr	r3, [r3, #0]
 80312be:	9103      	str	r1, [sp, #12]
 80312c0:	2b00      	cmp	r3, #0
 80312c2:	bfbb      	ittet	lt
 80312c4:	425b      	neglt	r3, r3
 80312c6:	f042 0202 	orrlt.w	r2, r2, #2
 80312ca:	9307      	strge	r3, [sp, #28]
 80312cc:	9307      	strlt	r3, [sp, #28]
 80312ce:	bfb8      	it	lt
 80312d0:	9204      	strlt	r2, [sp, #16]
 80312d2:	7823      	ldrb	r3, [r4, #0]
 80312d4:	2b2e      	cmp	r3, #46	; 0x2e
 80312d6:	d10c      	bne.n	80312f2 <_vfiprintf_r+0x176>
 80312d8:	7863      	ldrb	r3, [r4, #1]
 80312da:	2b2a      	cmp	r3, #42	; 0x2a
 80312dc:	d135      	bne.n	803134a <_vfiprintf_r+0x1ce>
 80312de:	9b03      	ldr	r3, [sp, #12]
 80312e0:	1d1a      	adds	r2, r3, #4
 80312e2:	681b      	ldr	r3, [r3, #0]
 80312e4:	9203      	str	r2, [sp, #12]
 80312e6:	2b00      	cmp	r3, #0
 80312e8:	bfb8      	it	lt
 80312ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80312ee:	3402      	adds	r4, #2
 80312f0:	9305      	str	r3, [sp, #20]
 80312f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80313d8 <_vfiprintf_r+0x25c>
 80312f6:	7821      	ldrb	r1, [r4, #0]
 80312f8:	2203      	movs	r2, #3
 80312fa:	4650      	mov	r0, sl
 80312fc:	f7eb ffc0 	bl	801d280 <memchr>
 8031300:	b140      	cbz	r0, 8031314 <_vfiprintf_r+0x198>
 8031302:	2340      	movs	r3, #64	; 0x40
 8031304:	eba0 000a 	sub.w	r0, r0, sl
 8031308:	fa03 f000 	lsl.w	r0, r3, r0
 803130c:	9b04      	ldr	r3, [sp, #16]
 803130e:	4303      	orrs	r3, r0
 8031310:	3401      	adds	r4, #1
 8031312:	9304      	str	r3, [sp, #16]
 8031314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031318:	482c      	ldr	r0, [pc, #176]	; (80313cc <_vfiprintf_r+0x250>)
 803131a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803131e:	2206      	movs	r2, #6
 8031320:	f7eb ffae 	bl	801d280 <memchr>
 8031324:	2800      	cmp	r0, #0
 8031326:	d03f      	beq.n	80313a8 <_vfiprintf_r+0x22c>
 8031328:	4b29      	ldr	r3, [pc, #164]	; (80313d0 <_vfiprintf_r+0x254>)
 803132a:	bb1b      	cbnz	r3, 8031374 <_vfiprintf_r+0x1f8>
 803132c:	9b03      	ldr	r3, [sp, #12]
 803132e:	3307      	adds	r3, #7
 8031330:	f023 0307 	bic.w	r3, r3, #7
 8031334:	3308      	adds	r3, #8
 8031336:	9303      	str	r3, [sp, #12]
 8031338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803133a:	443b      	add	r3, r7
 803133c:	9309      	str	r3, [sp, #36]	; 0x24
 803133e:	e767      	b.n	8031210 <_vfiprintf_r+0x94>
 8031340:	fb0c 3202 	mla	r2, ip, r2, r3
 8031344:	460c      	mov	r4, r1
 8031346:	2001      	movs	r0, #1
 8031348:	e7a5      	b.n	8031296 <_vfiprintf_r+0x11a>
 803134a:	2300      	movs	r3, #0
 803134c:	3401      	adds	r4, #1
 803134e:	9305      	str	r3, [sp, #20]
 8031350:	4619      	mov	r1, r3
 8031352:	f04f 0c0a 	mov.w	ip, #10
 8031356:	4620      	mov	r0, r4
 8031358:	f810 2b01 	ldrb.w	r2, [r0], #1
 803135c:	3a30      	subs	r2, #48	; 0x30
 803135e:	2a09      	cmp	r2, #9
 8031360:	d903      	bls.n	803136a <_vfiprintf_r+0x1ee>
 8031362:	2b00      	cmp	r3, #0
 8031364:	d0c5      	beq.n	80312f2 <_vfiprintf_r+0x176>
 8031366:	9105      	str	r1, [sp, #20]
 8031368:	e7c3      	b.n	80312f2 <_vfiprintf_r+0x176>
 803136a:	fb0c 2101 	mla	r1, ip, r1, r2
 803136e:	4604      	mov	r4, r0
 8031370:	2301      	movs	r3, #1
 8031372:	e7f0      	b.n	8031356 <_vfiprintf_r+0x1da>
 8031374:	ab03      	add	r3, sp, #12
 8031376:	9300      	str	r3, [sp, #0]
 8031378:	462a      	mov	r2, r5
 803137a:	4b16      	ldr	r3, [pc, #88]	; (80313d4 <_vfiprintf_r+0x258>)
 803137c:	a904      	add	r1, sp, #16
 803137e:	4630      	mov	r0, r6
 8031380:	f3af 8000 	nop.w
 8031384:	4607      	mov	r7, r0
 8031386:	1c78      	adds	r0, r7, #1
 8031388:	d1d6      	bne.n	8031338 <_vfiprintf_r+0x1bc>
 803138a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803138c:	07d9      	lsls	r1, r3, #31
 803138e:	d405      	bmi.n	803139c <_vfiprintf_r+0x220>
 8031390:	89ab      	ldrh	r3, [r5, #12]
 8031392:	059a      	lsls	r2, r3, #22
 8031394:	d402      	bmi.n	803139c <_vfiprintf_r+0x220>
 8031396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031398:	f000 fc45 	bl	8031c26 <__retarget_lock_release_recursive>
 803139c:	89ab      	ldrh	r3, [r5, #12]
 803139e:	065b      	lsls	r3, r3, #25
 80313a0:	f53f af12 	bmi.w	80311c8 <_vfiprintf_r+0x4c>
 80313a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80313a6:	e711      	b.n	80311cc <_vfiprintf_r+0x50>
 80313a8:	ab03      	add	r3, sp, #12
 80313aa:	9300      	str	r3, [sp, #0]
 80313ac:	462a      	mov	r2, r5
 80313ae:	4b09      	ldr	r3, [pc, #36]	; (80313d4 <_vfiprintf_r+0x258>)
 80313b0:	a904      	add	r1, sp, #16
 80313b2:	4630      	mov	r0, r6
 80313b4:	f000 f880 	bl	80314b8 <_printf_i>
 80313b8:	e7e4      	b.n	8031384 <_vfiprintf_r+0x208>
 80313ba:	bf00      	nop
 80313bc:	0803a4a0 	.word	0x0803a4a0
 80313c0:	0803a4c0 	.word	0x0803a4c0
 80313c4:	0803a480 	.word	0x0803a480
 80313c8:	0803a44a 	.word	0x0803a44a
 80313cc:	0803a454 	.word	0x0803a454
 80313d0:	00000000 	.word	0x00000000
 80313d4:	08031157 	.word	0x08031157
 80313d8:	0803a450 	.word	0x0803a450

080313dc <_printf_common>:
 80313dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80313e0:	4616      	mov	r6, r2
 80313e2:	4699      	mov	r9, r3
 80313e4:	688a      	ldr	r2, [r1, #8]
 80313e6:	690b      	ldr	r3, [r1, #16]
 80313e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80313ec:	4293      	cmp	r3, r2
 80313ee:	bfb8      	it	lt
 80313f0:	4613      	movlt	r3, r2
 80313f2:	6033      	str	r3, [r6, #0]
 80313f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80313f8:	4607      	mov	r7, r0
 80313fa:	460c      	mov	r4, r1
 80313fc:	b10a      	cbz	r2, 8031402 <_printf_common+0x26>
 80313fe:	3301      	adds	r3, #1
 8031400:	6033      	str	r3, [r6, #0]
 8031402:	6823      	ldr	r3, [r4, #0]
 8031404:	0699      	lsls	r1, r3, #26
 8031406:	bf42      	ittt	mi
 8031408:	6833      	ldrmi	r3, [r6, #0]
 803140a:	3302      	addmi	r3, #2
 803140c:	6033      	strmi	r3, [r6, #0]
 803140e:	6825      	ldr	r5, [r4, #0]
 8031410:	f015 0506 	ands.w	r5, r5, #6
 8031414:	d106      	bne.n	8031424 <_printf_common+0x48>
 8031416:	f104 0a19 	add.w	sl, r4, #25
 803141a:	68e3      	ldr	r3, [r4, #12]
 803141c:	6832      	ldr	r2, [r6, #0]
 803141e:	1a9b      	subs	r3, r3, r2
 8031420:	42ab      	cmp	r3, r5
 8031422:	dc26      	bgt.n	8031472 <_printf_common+0x96>
 8031424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031428:	1e13      	subs	r3, r2, #0
 803142a:	6822      	ldr	r2, [r4, #0]
 803142c:	bf18      	it	ne
 803142e:	2301      	movne	r3, #1
 8031430:	0692      	lsls	r2, r2, #26
 8031432:	d42b      	bmi.n	803148c <_printf_common+0xb0>
 8031434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031438:	4649      	mov	r1, r9
 803143a:	4638      	mov	r0, r7
 803143c:	47c0      	blx	r8
 803143e:	3001      	adds	r0, #1
 8031440:	d01e      	beq.n	8031480 <_printf_common+0xa4>
 8031442:	6823      	ldr	r3, [r4, #0]
 8031444:	68e5      	ldr	r5, [r4, #12]
 8031446:	6832      	ldr	r2, [r6, #0]
 8031448:	f003 0306 	and.w	r3, r3, #6
 803144c:	2b04      	cmp	r3, #4
 803144e:	bf08      	it	eq
 8031450:	1aad      	subeq	r5, r5, r2
 8031452:	68a3      	ldr	r3, [r4, #8]
 8031454:	6922      	ldr	r2, [r4, #16]
 8031456:	bf0c      	ite	eq
 8031458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803145c:	2500      	movne	r5, #0
 803145e:	4293      	cmp	r3, r2
 8031460:	bfc4      	itt	gt
 8031462:	1a9b      	subgt	r3, r3, r2
 8031464:	18ed      	addgt	r5, r5, r3
 8031466:	2600      	movs	r6, #0
 8031468:	341a      	adds	r4, #26
 803146a:	42b5      	cmp	r5, r6
 803146c:	d11a      	bne.n	80314a4 <_printf_common+0xc8>
 803146e:	2000      	movs	r0, #0
 8031470:	e008      	b.n	8031484 <_printf_common+0xa8>
 8031472:	2301      	movs	r3, #1
 8031474:	4652      	mov	r2, sl
 8031476:	4649      	mov	r1, r9
 8031478:	4638      	mov	r0, r7
 803147a:	47c0      	blx	r8
 803147c:	3001      	adds	r0, #1
 803147e:	d103      	bne.n	8031488 <_printf_common+0xac>
 8031480:	f04f 30ff 	mov.w	r0, #4294967295
 8031484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031488:	3501      	adds	r5, #1
 803148a:	e7c6      	b.n	803141a <_printf_common+0x3e>
 803148c:	18e1      	adds	r1, r4, r3
 803148e:	1c5a      	adds	r2, r3, #1
 8031490:	2030      	movs	r0, #48	; 0x30
 8031492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031496:	4422      	add	r2, r4
 8031498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803149c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80314a0:	3302      	adds	r3, #2
 80314a2:	e7c7      	b.n	8031434 <_printf_common+0x58>
 80314a4:	2301      	movs	r3, #1
 80314a6:	4622      	mov	r2, r4
 80314a8:	4649      	mov	r1, r9
 80314aa:	4638      	mov	r0, r7
 80314ac:	47c0      	blx	r8
 80314ae:	3001      	adds	r0, #1
 80314b0:	d0e6      	beq.n	8031480 <_printf_common+0xa4>
 80314b2:	3601      	adds	r6, #1
 80314b4:	e7d9      	b.n	803146a <_printf_common+0x8e>
	...

080314b8 <_printf_i>:
 80314b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80314bc:	460c      	mov	r4, r1
 80314be:	4691      	mov	r9, r2
 80314c0:	7e27      	ldrb	r7, [r4, #24]
 80314c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80314c4:	2f78      	cmp	r7, #120	; 0x78
 80314c6:	4680      	mov	r8, r0
 80314c8:	469a      	mov	sl, r3
 80314ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80314ce:	d807      	bhi.n	80314e0 <_printf_i+0x28>
 80314d0:	2f62      	cmp	r7, #98	; 0x62
 80314d2:	d80a      	bhi.n	80314ea <_printf_i+0x32>
 80314d4:	2f00      	cmp	r7, #0
 80314d6:	f000 80d8 	beq.w	803168a <_printf_i+0x1d2>
 80314da:	2f58      	cmp	r7, #88	; 0x58
 80314dc:	f000 80a3 	beq.w	8031626 <_printf_i+0x16e>
 80314e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80314e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80314e8:	e03a      	b.n	8031560 <_printf_i+0xa8>
 80314ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80314ee:	2b15      	cmp	r3, #21
 80314f0:	d8f6      	bhi.n	80314e0 <_printf_i+0x28>
 80314f2:	a001      	add	r0, pc, #4	; (adr r0, 80314f8 <_printf_i+0x40>)
 80314f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80314f8:	08031551 	.word	0x08031551
 80314fc:	08031565 	.word	0x08031565
 8031500:	080314e1 	.word	0x080314e1
 8031504:	080314e1 	.word	0x080314e1
 8031508:	080314e1 	.word	0x080314e1
 803150c:	080314e1 	.word	0x080314e1
 8031510:	08031565 	.word	0x08031565
 8031514:	080314e1 	.word	0x080314e1
 8031518:	080314e1 	.word	0x080314e1
 803151c:	080314e1 	.word	0x080314e1
 8031520:	080314e1 	.word	0x080314e1
 8031524:	08031671 	.word	0x08031671
 8031528:	08031595 	.word	0x08031595
 803152c:	08031653 	.word	0x08031653
 8031530:	080314e1 	.word	0x080314e1
 8031534:	080314e1 	.word	0x080314e1
 8031538:	08031693 	.word	0x08031693
 803153c:	080314e1 	.word	0x080314e1
 8031540:	08031595 	.word	0x08031595
 8031544:	080314e1 	.word	0x080314e1
 8031548:	080314e1 	.word	0x080314e1
 803154c:	0803165b 	.word	0x0803165b
 8031550:	680b      	ldr	r3, [r1, #0]
 8031552:	1d1a      	adds	r2, r3, #4
 8031554:	681b      	ldr	r3, [r3, #0]
 8031556:	600a      	str	r2, [r1, #0]
 8031558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 803155c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8031560:	2301      	movs	r3, #1
 8031562:	e0a3      	b.n	80316ac <_printf_i+0x1f4>
 8031564:	6825      	ldr	r5, [r4, #0]
 8031566:	6808      	ldr	r0, [r1, #0]
 8031568:	062e      	lsls	r6, r5, #24
 803156a:	f100 0304 	add.w	r3, r0, #4
 803156e:	d50a      	bpl.n	8031586 <_printf_i+0xce>
 8031570:	6805      	ldr	r5, [r0, #0]
 8031572:	600b      	str	r3, [r1, #0]
 8031574:	2d00      	cmp	r5, #0
 8031576:	da03      	bge.n	8031580 <_printf_i+0xc8>
 8031578:	232d      	movs	r3, #45	; 0x2d
 803157a:	426d      	negs	r5, r5
 803157c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031580:	485e      	ldr	r0, [pc, #376]	; (80316fc <_printf_i+0x244>)
 8031582:	230a      	movs	r3, #10
 8031584:	e019      	b.n	80315ba <_printf_i+0x102>
 8031586:	f015 0f40 	tst.w	r5, #64	; 0x40
 803158a:	6805      	ldr	r5, [r0, #0]
 803158c:	600b      	str	r3, [r1, #0]
 803158e:	bf18      	it	ne
 8031590:	b22d      	sxthne	r5, r5
 8031592:	e7ef      	b.n	8031574 <_printf_i+0xbc>
 8031594:	680b      	ldr	r3, [r1, #0]
 8031596:	6825      	ldr	r5, [r4, #0]
 8031598:	1d18      	adds	r0, r3, #4
 803159a:	6008      	str	r0, [r1, #0]
 803159c:	0628      	lsls	r0, r5, #24
 803159e:	d501      	bpl.n	80315a4 <_printf_i+0xec>
 80315a0:	681d      	ldr	r5, [r3, #0]
 80315a2:	e002      	b.n	80315aa <_printf_i+0xf2>
 80315a4:	0669      	lsls	r1, r5, #25
 80315a6:	d5fb      	bpl.n	80315a0 <_printf_i+0xe8>
 80315a8:	881d      	ldrh	r5, [r3, #0]
 80315aa:	4854      	ldr	r0, [pc, #336]	; (80316fc <_printf_i+0x244>)
 80315ac:	2f6f      	cmp	r7, #111	; 0x6f
 80315ae:	bf0c      	ite	eq
 80315b0:	2308      	moveq	r3, #8
 80315b2:	230a      	movne	r3, #10
 80315b4:	2100      	movs	r1, #0
 80315b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80315ba:	6866      	ldr	r6, [r4, #4]
 80315bc:	60a6      	str	r6, [r4, #8]
 80315be:	2e00      	cmp	r6, #0
 80315c0:	bfa2      	ittt	ge
 80315c2:	6821      	ldrge	r1, [r4, #0]
 80315c4:	f021 0104 	bicge.w	r1, r1, #4
 80315c8:	6021      	strge	r1, [r4, #0]
 80315ca:	b90d      	cbnz	r5, 80315d0 <_printf_i+0x118>
 80315cc:	2e00      	cmp	r6, #0
 80315ce:	d04d      	beq.n	803166c <_printf_i+0x1b4>
 80315d0:	4616      	mov	r6, r2
 80315d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80315d6:	fb03 5711 	mls	r7, r3, r1, r5
 80315da:	5dc7      	ldrb	r7, [r0, r7]
 80315dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80315e0:	462f      	mov	r7, r5
 80315e2:	42bb      	cmp	r3, r7
 80315e4:	460d      	mov	r5, r1
 80315e6:	d9f4      	bls.n	80315d2 <_printf_i+0x11a>
 80315e8:	2b08      	cmp	r3, #8
 80315ea:	d10b      	bne.n	8031604 <_printf_i+0x14c>
 80315ec:	6823      	ldr	r3, [r4, #0]
 80315ee:	07df      	lsls	r7, r3, #31
 80315f0:	d508      	bpl.n	8031604 <_printf_i+0x14c>
 80315f2:	6923      	ldr	r3, [r4, #16]
 80315f4:	6861      	ldr	r1, [r4, #4]
 80315f6:	4299      	cmp	r1, r3
 80315f8:	bfde      	ittt	le
 80315fa:	2330      	movle	r3, #48	; 0x30
 80315fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8031600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8031604:	1b92      	subs	r2, r2, r6
 8031606:	6122      	str	r2, [r4, #16]
 8031608:	f8cd a000 	str.w	sl, [sp]
 803160c:	464b      	mov	r3, r9
 803160e:	aa03      	add	r2, sp, #12
 8031610:	4621      	mov	r1, r4
 8031612:	4640      	mov	r0, r8
 8031614:	f7ff fee2 	bl	80313dc <_printf_common>
 8031618:	3001      	adds	r0, #1
 803161a:	d14c      	bne.n	80316b6 <_printf_i+0x1fe>
 803161c:	f04f 30ff 	mov.w	r0, #4294967295
 8031620:	b004      	add	sp, #16
 8031622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031626:	4835      	ldr	r0, [pc, #212]	; (80316fc <_printf_i+0x244>)
 8031628:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 803162c:	6823      	ldr	r3, [r4, #0]
 803162e:	680e      	ldr	r6, [r1, #0]
 8031630:	061f      	lsls	r7, r3, #24
 8031632:	f856 5b04 	ldr.w	r5, [r6], #4
 8031636:	600e      	str	r6, [r1, #0]
 8031638:	d514      	bpl.n	8031664 <_printf_i+0x1ac>
 803163a:	07d9      	lsls	r1, r3, #31
 803163c:	bf44      	itt	mi
 803163e:	f043 0320 	orrmi.w	r3, r3, #32
 8031642:	6023      	strmi	r3, [r4, #0]
 8031644:	b91d      	cbnz	r5, 803164e <_printf_i+0x196>
 8031646:	6823      	ldr	r3, [r4, #0]
 8031648:	f023 0320 	bic.w	r3, r3, #32
 803164c:	6023      	str	r3, [r4, #0]
 803164e:	2310      	movs	r3, #16
 8031650:	e7b0      	b.n	80315b4 <_printf_i+0xfc>
 8031652:	6823      	ldr	r3, [r4, #0]
 8031654:	f043 0320 	orr.w	r3, r3, #32
 8031658:	6023      	str	r3, [r4, #0]
 803165a:	2378      	movs	r3, #120	; 0x78
 803165c:	4828      	ldr	r0, [pc, #160]	; (8031700 <_printf_i+0x248>)
 803165e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8031662:	e7e3      	b.n	803162c <_printf_i+0x174>
 8031664:	065e      	lsls	r6, r3, #25
 8031666:	bf48      	it	mi
 8031668:	b2ad      	uxthmi	r5, r5
 803166a:	e7e6      	b.n	803163a <_printf_i+0x182>
 803166c:	4616      	mov	r6, r2
 803166e:	e7bb      	b.n	80315e8 <_printf_i+0x130>
 8031670:	680b      	ldr	r3, [r1, #0]
 8031672:	6826      	ldr	r6, [r4, #0]
 8031674:	6960      	ldr	r0, [r4, #20]
 8031676:	1d1d      	adds	r5, r3, #4
 8031678:	600d      	str	r5, [r1, #0]
 803167a:	0635      	lsls	r5, r6, #24
 803167c:	681b      	ldr	r3, [r3, #0]
 803167e:	d501      	bpl.n	8031684 <_printf_i+0x1cc>
 8031680:	6018      	str	r0, [r3, #0]
 8031682:	e002      	b.n	803168a <_printf_i+0x1d2>
 8031684:	0671      	lsls	r1, r6, #25
 8031686:	d5fb      	bpl.n	8031680 <_printf_i+0x1c8>
 8031688:	8018      	strh	r0, [r3, #0]
 803168a:	2300      	movs	r3, #0
 803168c:	6123      	str	r3, [r4, #16]
 803168e:	4616      	mov	r6, r2
 8031690:	e7ba      	b.n	8031608 <_printf_i+0x150>
 8031692:	680b      	ldr	r3, [r1, #0]
 8031694:	1d1a      	adds	r2, r3, #4
 8031696:	600a      	str	r2, [r1, #0]
 8031698:	681e      	ldr	r6, [r3, #0]
 803169a:	6862      	ldr	r2, [r4, #4]
 803169c:	2100      	movs	r1, #0
 803169e:	4630      	mov	r0, r6
 80316a0:	f7eb fdee 	bl	801d280 <memchr>
 80316a4:	b108      	cbz	r0, 80316aa <_printf_i+0x1f2>
 80316a6:	1b80      	subs	r0, r0, r6
 80316a8:	6060      	str	r0, [r4, #4]
 80316aa:	6863      	ldr	r3, [r4, #4]
 80316ac:	6123      	str	r3, [r4, #16]
 80316ae:	2300      	movs	r3, #0
 80316b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80316b4:	e7a8      	b.n	8031608 <_printf_i+0x150>
 80316b6:	6923      	ldr	r3, [r4, #16]
 80316b8:	4632      	mov	r2, r6
 80316ba:	4649      	mov	r1, r9
 80316bc:	4640      	mov	r0, r8
 80316be:	47d0      	blx	sl
 80316c0:	3001      	adds	r0, #1
 80316c2:	d0ab      	beq.n	803161c <_printf_i+0x164>
 80316c4:	6823      	ldr	r3, [r4, #0]
 80316c6:	079b      	lsls	r3, r3, #30
 80316c8:	d413      	bmi.n	80316f2 <_printf_i+0x23a>
 80316ca:	68e0      	ldr	r0, [r4, #12]
 80316cc:	9b03      	ldr	r3, [sp, #12]
 80316ce:	4298      	cmp	r0, r3
 80316d0:	bfb8      	it	lt
 80316d2:	4618      	movlt	r0, r3
 80316d4:	e7a4      	b.n	8031620 <_printf_i+0x168>
 80316d6:	2301      	movs	r3, #1
 80316d8:	4632      	mov	r2, r6
 80316da:	4649      	mov	r1, r9
 80316dc:	4640      	mov	r0, r8
 80316de:	47d0      	blx	sl
 80316e0:	3001      	adds	r0, #1
 80316e2:	d09b      	beq.n	803161c <_printf_i+0x164>
 80316e4:	3501      	adds	r5, #1
 80316e6:	68e3      	ldr	r3, [r4, #12]
 80316e8:	9903      	ldr	r1, [sp, #12]
 80316ea:	1a5b      	subs	r3, r3, r1
 80316ec:	42ab      	cmp	r3, r5
 80316ee:	dcf2      	bgt.n	80316d6 <_printf_i+0x21e>
 80316f0:	e7eb      	b.n	80316ca <_printf_i+0x212>
 80316f2:	2500      	movs	r5, #0
 80316f4:	f104 0619 	add.w	r6, r4, #25
 80316f8:	e7f5      	b.n	80316e6 <_printf_i+0x22e>
 80316fa:	bf00      	nop
 80316fc:	0803a45b 	.word	0x0803a45b
 8031700:	0803a46c 	.word	0x0803a46c

08031704 <_sbrk_r>:
 8031704:	b538      	push	{r3, r4, r5, lr}
 8031706:	4d06      	ldr	r5, [pc, #24]	; (8031720 <_sbrk_r+0x1c>)
 8031708:	2300      	movs	r3, #0
 803170a:	4604      	mov	r4, r0
 803170c:	4608      	mov	r0, r1
 803170e:	602b      	str	r3, [r5, #0]
 8031710:	f001 ff34 	bl	803357c <_sbrk>
 8031714:	1c43      	adds	r3, r0, #1
 8031716:	d102      	bne.n	803171e <_sbrk_r+0x1a>
 8031718:	682b      	ldr	r3, [r5, #0]
 803171a:	b103      	cbz	r3, 803171e <_sbrk_r+0x1a>
 803171c:	6023      	str	r3, [r4, #0]
 803171e:	bd38      	pop	{r3, r4, r5, pc}
 8031720:	20003178 	.word	0x20003178

08031724 <__swbuf_r>:
 8031724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031726:	460e      	mov	r6, r1
 8031728:	4614      	mov	r4, r2
 803172a:	4605      	mov	r5, r0
 803172c:	b118      	cbz	r0, 8031736 <__swbuf_r+0x12>
 803172e:	6983      	ldr	r3, [r0, #24]
 8031730:	b90b      	cbnz	r3, 8031736 <__swbuf_r+0x12>
 8031732:	f000 f9d9 	bl	8031ae8 <__sinit>
 8031736:	4b21      	ldr	r3, [pc, #132]	; (80317bc <__swbuf_r+0x98>)
 8031738:	429c      	cmp	r4, r3
 803173a:	d12b      	bne.n	8031794 <__swbuf_r+0x70>
 803173c:	686c      	ldr	r4, [r5, #4]
 803173e:	69a3      	ldr	r3, [r4, #24]
 8031740:	60a3      	str	r3, [r4, #8]
 8031742:	89a3      	ldrh	r3, [r4, #12]
 8031744:	071a      	lsls	r2, r3, #28
 8031746:	d52f      	bpl.n	80317a8 <__swbuf_r+0x84>
 8031748:	6923      	ldr	r3, [r4, #16]
 803174a:	b36b      	cbz	r3, 80317a8 <__swbuf_r+0x84>
 803174c:	6923      	ldr	r3, [r4, #16]
 803174e:	6820      	ldr	r0, [r4, #0]
 8031750:	1ac0      	subs	r0, r0, r3
 8031752:	6963      	ldr	r3, [r4, #20]
 8031754:	b2f6      	uxtb	r6, r6
 8031756:	4283      	cmp	r3, r0
 8031758:	4637      	mov	r7, r6
 803175a:	dc04      	bgt.n	8031766 <__swbuf_r+0x42>
 803175c:	4621      	mov	r1, r4
 803175e:	4628      	mov	r0, r5
 8031760:	f000 f92e 	bl	80319c0 <_fflush_r>
 8031764:	bb30      	cbnz	r0, 80317b4 <__swbuf_r+0x90>
 8031766:	68a3      	ldr	r3, [r4, #8]
 8031768:	3b01      	subs	r3, #1
 803176a:	60a3      	str	r3, [r4, #8]
 803176c:	6823      	ldr	r3, [r4, #0]
 803176e:	1c5a      	adds	r2, r3, #1
 8031770:	6022      	str	r2, [r4, #0]
 8031772:	701e      	strb	r6, [r3, #0]
 8031774:	6963      	ldr	r3, [r4, #20]
 8031776:	3001      	adds	r0, #1
 8031778:	4283      	cmp	r3, r0
 803177a:	d004      	beq.n	8031786 <__swbuf_r+0x62>
 803177c:	89a3      	ldrh	r3, [r4, #12]
 803177e:	07db      	lsls	r3, r3, #31
 8031780:	d506      	bpl.n	8031790 <__swbuf_r+0x6c>
 8031782:	2e0a      	cmp	r6, #10
 8031784:	d104      	bne.n	8031790 <__swbuf_r+0x6c>
 8031786:	4621      	mov	r1, r4
 8031788:	4628      	mov	r0, r5
 803178a:	f000 f919 	bl	80319c0 <_fflush_r>
 803178e:	b988      	cbnz	r0, 80317b4 <__swbuf_r+0x90>
 8031790:	4638      	mov	r0, r7
 8031792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031794:	4b0a      	ldr	r3, [pc, #40]	; (80317c0 <__swbuf_r+0x9c>)
 8031796:	429c      	cmp	r4, r3
 8031798:	d101      	bne.n	803179e <__swbuf_r+0x7a>
 803179a:	68ac      	ldr	r4, [r5, #8]
 803179c:	e7cf      	b.n	803173e <__swbuf_r+0x1a>
 803179e:	4b09      	ldr	r3, [pc, #36]	; (80317c4 <__swbuf_r+0xa0>)
 80317a0:	429c      	cmp	r4, r3
 80317a2:	bf08      	it	eq
 80317a4:	68ec      	ldreq	r4, [r5, #12]
 80317a6:	e7ca      	b.n	803173e <__swbuf_r+0x1a>
 80317a8:	4621      	mov	r1, r4
 80317aa:	4628      	mov	r0, r5
 80317ac:	f000 f80c 	bl	80317c8 <__swsetup_r>
 80317b0:	2800      	cmp	r0, #0
 80317b2:	d0cb      	beq.n	803174c <__swbuf_r+0x28>
 80317b4:	f04f 37ff 	mov.w	r7, #4294967295
 80317b8:	e7ea      	b.n	8031790 <__swbuf_r+0x6c>
 80317ba:	bf00      	nop
 80317bc:	0803a4a0 	.word	0x0803a4a0
 80317c0:	0803a4c0 	.word	0x0803a4c0
 80317c4:	0803a480 	.word	0x0803a480

080317c8 <__swsetup_r>:
 80317c8:	4b32      	ldr	r3, [pc, #200]	; (8031894 <__swsetup_r+0xcc>)
 80317ca:	b570      	push	{r4, r5, r6, lr}
 80317cc:	681d      	ldr	r5, [r3, #0]
 80317ce:	4606      	mov	r6, r0
 80317d0:	460c      	mov	r4, r1
 80317d2:	b125      	cbz	r5, 80317de <__swsetup_r+0x16>
 80317d4:	69ab      	ldr	r3, [r5, #24]
 80317d6:	b913      	cbnz	r3, 80317de <__swsetup_r+0x16>
 80317d8:	4628      	mov	r0, r5
 80317da:	f000 f985 	bl	8031ae8 <__sinit>
 80317de:	4b2e      	ldr	r3, [pc, #184]	; (8031898 <__swsetup_r+0xd0>)
 80317e0:	429c      	cmp	r4, r3
 80317e2:	d10f      	bne.n	8031804 <__swsetup_r+0x3c>
 80317e4:	686c      	ldr	r4, [r5, #4]
 80317e6:	89a3      	ldrh	r3, [r4, #12]
 80317e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80317ec:	0719      	lsls	r1, r3, #28
 80317ee:	d42c      	bmi.n	803184a <__swsetup_r+0x82>
 80317f0:	06dd      	lsls	r5, r3, #27
 80317f2:	d411      	bmi.n	8031818 <__swsetup_r+0x50>
 80317f4:	2309      	movs	r3, #9
 80317f6:	6033      	str	r3, [r6, #0]
 80317f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80317fc:	81a3      	strh	r3, [r4, #12]
 80317fe:	f04f 30ff 	mov.w	r0, #4294967295
 8031802:	e03e      	b.n	8031882 <__swsetup_r+0xba>
 8031804:	4b25      	ldr	r3, [pc, #148]	; (803189c <__swsetup_r+0xd4>)
 8031806:	429c      	cmp	r4, r3
 8031808:	d101      	bne.n	803180e <__swsetup_r+0x46>
 803180a:	68ac      	ldr	r4, [r5, #8]
 803180c:	e7eb      	b.n	80317e6 <__swsetup_r+0x1e>
 803180e:	4b24      	ldr	r3, [pc, #144]	; (80318a0 <__swsetup_r+0xd8>)
 8031810:	429c      	cmp	r4, r3
 8031812:	bf08      	it	eq
 8031814:	68ec      	ldreq	r4, [r5, #12]
 8031816:	e7e6      	b.n	80317e6 <__swsetup_r+0x1e>
 8031818:	0758      	lsls	r0, r3, #29
 803181a:	d512      	bpl.n	8031842 <__swsetup_r+0x7a>
 803181c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803181e:	b141      	cbz	r1, 8031832 <__swsetup_r+0x6a>
 8031820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8031824:	4299      	cmp	r1, r3
 8031826:	d002      	beq.n	803182e <__swsetup_r+0x66>
 8031828:	4630      	mov	r0, r6
 803182a:	f7ff fbd3 	bl	8030fd4 <_free_r>
 803182e:	2300      	movs	r3, #0
 8031830:	6363      	str	r3, [r4, #52]	; 0x34
 8031832:	89a3      	ldrh	r3, [r4, #12]
 8031834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8031838:	81a3      	strh	r3, [r4, #12]
 803183a:	2300      	movs	r3, #0
 803183c:	6063      	str	r3, [r4, #4]
 803183e:	6923      	ldr	r3, [r4, #16]
 8031840:	6023      	str	r3, [r4, #0]
 8031842:	89a3      	ldrh	r3, [r4, #12]
 8031844:	f043 0308 	orr.w	r3, r3, #8
 8031848:	81a3      	strh	r3, [r4, #12]
 803184a:	6923      	ldr	r3, [r4, #16]
 803184c:	b94b      	cbnz	r3, 8031862 <__swsetup_r+0x9a>
 803184e:	89a3      	ldrh	r3, [r4, #12]
 8031850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8031854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8031858:	d003      	beq.n	8031862 <__swsetup_r+0x9a>
 803185a:	4621      	mov	r1, r4
 803185c:	4630      	mov	r0, r6
 803185e:	f000 fa07 	bl	8031c70 <__smakebuf_r>
 8031862:	89a0      	ldrh	r0, [r4, #12]
 8031864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031868:	f010 0301 	ands.w	r3, r0, #1
 803186c:	d00a      	beq.n	8031884 <__swsetup_r+0xbc>
 803186e:	2300      	movs	r3, #0
 8031870:	60a3      	str	r3, [r4, #8]
 8031872:	6963      	ldr	r3, [r4, #20]
 8031874:	425b      	negs	r3, r3
 8031876:	61a3      	str	r3, [r4, #24]
 8031878:	6923      	ldr	r3, [r4, #16]
 803187a:	b943      	cbnz	r3, 803188e <__swsetup_r+0xc6>
 803187c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8031880:	d1ba      	bne.n	80317f8 <__swsetup_r+0x30>
 8031882:	bd70      	pop	{r4, r5, r6, pc}
 8031884:	0781      	lsls	r1, r0, #30
 8031886:	bf58      	it	pl
 8031888:	6963      	ldrpl	r3, [r4, #20]
 803188a:	60a3      	str	r3, [r4, #8]
 803188c:	e7f4      	b.n	8031878 <__swsetup_r+0xb0>
 803188e:	2000      	movs	r0, #0
 8031890:	e7f7      	b.n	8031882 <__swsetup_r+0xba>
 8031892:	bf00      	nop
 8031894:	20000070 	.word	0x20000070
 8031898:	0803a4a0 	.word	0x0803a4a0
 803189c:	0803a4c0 	.word	0x0803a4c0
 80318a0:	0803a480 	.word	0x0803a480

080318a4 <abort>:
 80318a4:	b508      	push	{r3, lr}
 80318a6:	2006      	movs	r0, #6
 80318a8:	f000 fa56 	bl	8031d58 <raise>
 80318ac:	2001      	movs	r0, #1
 80318ae:	f001 fe7b 	bl	80335a8 <_exit>
	...

080318b4 <__sflush_r>:
 80318b4:	898a      	ldrh	r2, [r1, #12]
 80318b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80318ba:	4605      	mov	r5, r0
 80318bc:	0710      	lsls	r0, r2, #28
 80318be:	460c      	mov	r4, r1
 80318c0:	d458      	bmi.n	8031974 <__sflush_r+0xc0>
 80318c2:	684b      	ldr	r3, [r1, #4]
 80318c4:	2b00      	cmp	r3, #0
 80318c6:	dc05      	bgt.n	80318d4 <__sflush_r+0x20>
 80318c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80318ca:	2b00      	cmp	r3, #0
 80318cc:	dc02      	bgt.n	80318d4 <__sflush_r+0x20>
 80318ce:	2000      	movs	r0, #0
 80318d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80318d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80318d6:	2e00      	cmp	r6, #0
 80318d8:	d0f9      	beq.n	80318ce <__sflush_r+0x1a>
 80318da:	2300      	movs	r3, #0
 80318dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80318e0:	682f      	ldr	r7, [r5, #0]
 80318e2:	602b      	str	r3, [r5, #0]
 80318e4:	d032      	beq.n	803194c <__sflush_r+0x98>
 80318e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80318e8:	89a3      	ldrh	r3, [r4, #12]
 80318ea:	075a      	lsls	r2, r3, #29
 80318ec:	d505      	bpl.n	80318fa <__sflush_r+0x46>
 80318ee:	6863      	ldr	r3, [r4, #4]
 80318f0:	1ac0      	subs	r0, r0, r3
 80318f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80318f4:	b10b      	cbz	r3, 80318fa <__sflush_r+0x46>
 80318f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80318f8:	1ac0      	subs	r0, r0, r3
 80318fa:	2300      	movs	r3, #0
 80318fc:	4602      	mov	r2, r0
 80318fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031900:	6a21      	ldr	r1, [r4, #32]
 8031902:	4628      	mov	r0, r5
 8031904:	47b0      	blx	r6
 8031906:	1c43      	adds	r3, r0, #1
 8031908:	89a3      	ldrh	r3, [r4, #12]
 803190a:	d106      	bne.n	803191a <__sflush_r+0x66>
 803190c:	6829      	ldr	r1, [r5, #0]
 803190e:	291d      	cmp	r1, #29
 8031910:	d82c      	bhi.n	803196c <__sflush_r+0xb8>
 8031912:	4a2a      	ldr	r2, [pc, #168]	; (80319bc <__sflush_r+0x108>)
 8031914:	40ca      	lsrs	r2, r1
 8031916:	07d6      	lsls	r6, r2, #31
 8031918:	d528      	bpl.n	803196c <__sflush_r+0xb8>
 803191a:	2200      	movs	r2, #0
 803191c:	6062      	str	r2, [r4, #4]
 803191e:	04d9      	lsls	r1, r3, #19
 8031920:	6922      	ldr	r2, [r4, #16]
 8031922:	6022      	str	r2, [r4, #0]
 8031924:	d504      	bpl.n	8031930 <__sflush_r+0x7c>
 8031926:	1c42      	adds	r2, r0, #1
 8031928:	d101      	bne.n	803192e <__sflush_r+0x7a>
 803192a:	682b      	ldr	r3, [r5, #0]
 803192c:	b903      	cbnz	r3, 8031930 <__sflush_r+0x7c>
 803192e:	6560      	str	r0, [r4, #84]	; 0x54
 8031930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8031932:	602f      	str	r7, [r5, #0]
 8031934:	2900      	cmp	r1, #0
 8031936:	d0ca      	beq.n	80318ce <__sflush_r+0x1a>
 8031938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803193c:	4299      	cmp	r1, r3
 803193e:	d002      	beq.n	8031946 <__sflush_r+0x92>
 8031940:	4628      	mov	r0, r5
 8031942:	f7ff fb47 	bl	8030fd4 <_free_r>
 8031946:	2000      	movs	r0, #0
 8031948:	6360      	str	r0, [r4, #52]	; 0x34
 803194a:	e7c1      	b.n	80318d0 <__sflush_r+0x1c>
 803194c:	6a21      	ldr	r1, [r4, #32]
 803194e:	2301      	movs	r3, #1
 8031950:	4628      	mov	r0, r5
 8031952:	47b0      	blx	r6
 8031954:	1c41      	adds	r1, r0, #1
 8031956:	d1c7      	bne.n	80318e8 <__sflush_r+0x34>
 8031958:	682b      	ldr	r3, [r5, #0]
 803195a:	2b00      	cmp	r3, #0
 803195c:	d0c4      	beq.n	80318e8 <__sflush_r+0x34>
 803195e:	2b1d      	cmp	r3, #29
 8031960:	d001      	beq.n	8031966 <__sflush_r+0xb2>
 8031962:	2b16      	cmp	r3, #22
 8031964:	d101      	bne.n	803196a <__sflush_r+0xb6>
 8031966:	602f      	str	r7, [r5, #0]
 8031968:	e7b1      	b.n	80318ce <__sflush_r+0x1a>
 803196a:	89a3      	ldrh	r3, [r4, #12]
 803196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031970:	81a3      	strh	r3, [r4, #12]
 8031972:	e7ad      	b.n	80318d0 <__sflush_r+0x1c>
 8031974:	690f      	ldr	r7, [r1, #16]
 8031976:	2f00      	cmp	r7, #0
 8031978:	d0a9      	beq.n	80318ce <__sflush_r+0x1a>
 803197a:	0793      	lsls	r3, r2, #30
 803197c:	680e      	ldr	r6, [r1, #0]
 803197e:	bf08      	it	eq
 8031980:	694b      	ldreq	r3, [r1, #20]
 8031982:	600f      	str	r7, [r1, #0]
 8031984:	bf18      	it	ne
 8031986:	2300      	movne	r3, #0
 8031988:	eba6 0807 	sub.w	r8, r6, r7
 803198c:	608b      	str	r3, [r1, #8]
 803198e:	f1b8 0f00 	cmp.w	r8, #0
 8031992:	dd9c      	ble.n	80318ce <__sflush_r+0x1a>
 8031994:	6a21      	ldr	r1, [r4, #32]
 8031996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8031998:	4643      	mov	r3, r8
 803199a:	463a      	mov	r2, r7
 803199c:	4628      	mov	r0, r5
 803199e:	47b0      	blx	r6
 80319a0:	2800      	cmp	r0, #0
 80319a2:	dc06      	bgt.n	80319b2 <__sflush_r+0xfe>
 80319a4:	89a3      	ldrh	r3, [r4, #12]
 80319a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80319aa:	81a3      	strh	r3, [r4, #12]
 80319ac:	f04f 30ff 	mov.w	r0, #4294967295
 80319b0:	e78e      	b.n	80318d0 <__sflush_r+0x1c>
 80319b2:	4407      	add	r7, r0
 80319b4:	eba8 0800 	sub.w	r8, r8, r0
 80319b8:	e7e9      	b.n	803198e <__sflush_r+0xda>
 80319ba:	bf00      	nop
 80319bc:	20400001 	.word	0x20400001

080319c0 <_fflush_r>:
 80319c0:	b538      	push	{r3, r4, r5, lr}
 80319c2:	690b      	ldr	r3, [r1, #16]
 80319c4:	4605      	mov	r5, r0
 80319c6:	460c      	mov	r4, r1
 80319c8:	b913      	cbnz	r3, 80319d0 <_fflush_r+0x10>
 80319ca:	2500      	movs	r5, #0
 80319cc:	4628      	mov	r0, r5
 80319ce:	bd38      	pop	{r3, r4, r5, pc}
 80319d0:	b118      	cbz	r0, 80319da <_fflush_r+0x1a>
 80319d2:	6983      	ldr	r3, [r0, #24]
 80319d4:	b90b      	cbnz	r3, 80319da <_fflush_r+0x1a>
 80319d6:	f000 f887 	bl	8031ae8 <__sinit>
 80319da:	4b14      	ldr	r3, [pc, #80]	; (8031a2c <_fflush_r+0x6c>)
 80319dc:	429c      	cmp	r4, r3
 80319de:	d11b      	bne.n	8031a18 <_fflush_r+0x58>
 80319e0:	686c      	ldr	r4, [r5, #4]
 80319e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80319e6:	2b00      	cmp	r3, #0
 80319e8:	d0ef      	beq.n	80319ca <_fflush_r+0xa>
 80319ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80319ec:	07d0      	lsls	r0, r2, #31
 80319ee:	d404      	bmi.n	80319fa <_fflush_r+0x3a>
 80319f0:	0599      	lsls	r1, r3, #22
 80319f2:	d402      	bmi.n	80319fa <_fflush_r+0x3a>
 80319f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80319f6:	f000 f915 	bl	8031c24 <__retarget_lock_acquire_recursive>
 80319fa:	4628      	mov	r0, r5
 80319fc:	4621      	mov	r1, r4
 80319fe:	f7ff ff59 	bl	80318b4 <__sflush_r>
 8031a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031a04:	07da      	lsls	r2, r3, #31
 8031a06:	4605      	mov	r5, r0
 8031a08:	d4e0      	bmi.n	80319cc <_fflush_r+0xc>
 8031a0a:	89a3      	ldrh	r3, [r4, #12]
 8031a0c:	059b      	lsls	r3, r3, #22
 8031a0e:	d4dd      	bmi.n	80319cc <_fflush_r+0xc>
 8031a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031a12:	f000 f908 	bl	8031c26 <__retarget_lock_release_recursive>
 8031a16:	e7d9      	b.n	80319cc <_fflush_r+0xc>
 8031a18:	4b05      	ldr	r3, [pc, #20]	; (8031a30 <_fflush_r+0x70>)
 8031a1a:	429c      	cmp	r4, r3
 8031a1c:	d101      	bne.n	8031a22 <_fflush_r+0x62>
 8031a1e:	68ac      	ldr	r4, [r5, #8]
 8031a20:	e7df      	b.n	80319e2 <_fflush_r+0x22>
 8031a22:	4b04      	ldr	r3, [pc, #16]	; (8031a34 <_fflush_r+0x74>)
 8031a24:	429c      	cmp	r4, r3
 8031a26:	bf08      	it	eq
 8031a28:	68ec      	ldreq	r4, [r5, #12]
 8031a2a:	e7da      	b.n	80319e2 <_fflush_r+0x22>
 8031a2c:	0803a4a0 	.word	0x0803a4a0
 8031a30:	0803a4c0 	.word	0x0803a4c0
 8031a34:	0803a480 	.word	0x0803a480

08031a38 <std>:
 8031a38:	2300      	movs	r3, #0
 8031a3a:	b510      	push	{r4, lr}
 8031a3c:	4604      	mov	r4, r0
 8031a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8031a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8031a46:	6083      	str	r3, [r0, #8]
 8031a48:	8181      	strh	r1, [r0, #12]
 8031a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8031a4c:	81c2      	strh	r2, [r0, #14]
 8031a4e:	6183      	str	r3, [r0, #24]
 8031a50:	4619      	mov	r1, r3
 8031a52:	2208      	movs	r2, #8
 8031a54:	305c      	adds	r0, #92	; 0x5c
 8031a56:	f7ff fa0f 	bl	8030e78 <memset>
 8031a5a:	4b05      	ldr	r3, [pc, #20]	; (8031a70 <std+0x38>)
 8031a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8031a5e:	4b05      	ldr	r3, [pc, #20]	; (8031a74 <std+0x3c>)
 8031a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8031a62:	4b05      	ldr	r3, [pc, #20]	; (8031a78 <std+0x40>)
 8031a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8031a66:	4b05      	ldr	r3, [pc, #20]	; (8031a7c <std+0x44>)
 8031a68:	6224      	str	r4, [r4, #32]
 8031a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8031a6c:	bd10      	pop	{r4, pc}
 8031a6e:	bf00      	nop
 8031a70:	08031d91 	.word	0x08031d91
 8031a74:	08031db3 	.word	0x08031db3
 8031a78:	08031deb 	.word	0x08031deb
 8031a7c:	08031e0f 	.word	0x08031e0f

08031a80 <_cleanup_r>:
 8031a80:	4901      	ldr	r1, [pc, #4]	; (8031a88 <_cleanup_r+0x8>)
 8031a82:	f000 b8af 	b.w	8031be4 <_fwalk_reent>
 8031a86:	bf00      	nop
 8031a88:	080319c1 	.word	0x080319c1

08031a8c <__sfmoreglue>:
 8031a8c:	b570      	push	{r4, r5, r6, lr}
 8031a8e:	1e4a      	subs	r2, r1, #1
 8031a90:	2568      	movs	r5, #104	; 0x68
 8031a92:	4355      	muls	r5, r2
 8031a94:	460e      	mov	r6, r1
 8031a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8031a9a:	f7ff faeb 	bl	8031074 <_malloc_r>
 8031a9e:	4604      	mov	r4, r0
 8031aa0:	b140      	cbz	r0, 8031ab4 <__sfmoreglue+0x28>
 8031aa2:	2100      	movs	r1, #0
 8031aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8031aa8:	300c      	adds	r0, #12
 8031aaa:	60a0      	str	r0, [r4, #8]
 8031aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8031ab0:	f7ff f9e2 	bl	8030e78 <memset>
 8031ab4:	4620      	mov	r0, r4
 8031ab6:	bd70      	pop	{r4, r5, r6, pc}

08031ab8 <__sfp_lock_acquire>:
 8031ab8:	4801      	ldr	r0, [pc, #4]	; (8031ac0 <__sfp_lock_acquire+0x8>)
 8031aba:	f000 b8b3 	b.w	8031c24 <__retarget_lock_acquire_recursive>
 8031abe:	bf00      	nop
 8031ac0:	20003174 	.word	0x20003174

08031ac4 <__sfp_lock_release>:
 8031ac4:	4801      	ldr	r0, [pc, #4]	; (8031acc <__sfp_lock_release+0x8>)
 8031ac6:	f000 b8ae 	b.w	8031c26 <__retarget_lock_release_recursive>
 8031aca:	bf00      	nop
 8031acc:	20003174 	.word	0x20003174

08031ad0 <__sinit_lock_acquire>:
 8031ad0:	4801      	ldr	r0, [pc, #4]	; (8031ad8 <__sinit_lock_acquire+0x8>)
 8031ad2:	f000 b8a7 	b.w	8031c24 <__retarget_lock_acquire_recursive>
 8031ad6:	bf00      	nop
 8031ad8:	2000316f 	.word	0x2000316f

08031adc <__sinit_lock_release>:
 8031adc:	4801      	ldr	r0, [pc, #4]	; (8031ae4 <__sinit_lock_release+0x8>)
 8031ade:	f000 b8a2 	b.w	8031c26 <__retarget_lock_release_recursive>
 8031ae2:	bf00      	nop
 8031ae4:	2000316f 	.word	0x2000316f

08031ae8 <__sinit>:
 8031ae8:	b510      	push	{r4, lr}
 8031aea:	4604      	mov	r4, r0
 8031aec:	f7ff fff0 	bl	8031ad0 <__sinit_lock_acquire>
 8031af0:	69a3      	ldr	r3, [r4, #24]
 8031af2:	b11b      	cbz	r3, 8031afc <__sinit+0x14>
 8031af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031af8:	f7ff bff0 	b.w	8031adc <__sinit_lock_release>
 8031afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8031b00:	6523      	str	r3, [r4, #80]	; 0x50
 8031b02:	4b13      	ldr	r3, [pc, #76]	; (8031b50 <__sinit+0x68>)
 8031b04:	4a13      	ldr	r2, [pc, #76]	; (8031b54 <__sinit+0x6c>)
 8031b06:	681b      	ldr	r3, [r3, #0]
 8031b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8031b0a:	42a3      	cmp	r3, r4
 8031b0c:	bf04      	itt	eq
 8031b0e:	2301      	moveq	r3, #1
 8031b10:	61a3      	streq	r3, [r4, #24]
 8031b12:	4620      	mov	r0, r4
 8031b14:	f000 f820 	bl	8031b58 <__sfp>
 8031b18:	6060      	str	r0, [r4, #4]
 8031b1a:	4620      	mov	r0, r4
 8031b1c:	f000 f81c 	bl	8031b58 <__sfp>
 8031b20:	60a0      	str	r0, [r4, #8]
 8031b22:	4620      	mov	r0, r4
 8031b24:	f000 f818 	bl	8031b58 <__sfp>
 8031b28:	2200      	movs	r2, #0
 8031b2a:	60e0      	str	r0, [r4, #12]
 8031b2c:	2104      	movs	r1, #4
 8031b2e:	6860      	ldr	r0, [r4, #4]
 8031b30:	f7ff ff82 	bl	8031a38 <std>
 8031b34:	68a0      	ldr	r0, [r4, #8]
 8031b36:	2201      	movs	r2, #1
 8031b38:	2109      	movs	r1, #9
 8031b3a:	f7ff ff7d 	bl	8031a38 <std>
 8031b3e:	68e0      	ldr	r0, [r4, #12]
 8031b40:	2202      	movs	r2, #2
 8031b42:	2112      	movs	r1, #18
 8031b44:	f7ff ff78 	bl	8031a38 <std>
 8031b48:	2301      	movs	r3, #1
 8031b4a:	61a3      	str	r3, [r4, #24]
 8031b4c:	e7d2      	b.n	8031af4 <__sinit+0xc>
 8031b4e:	bf00      	nop
 8031b50:	0803a394 	.word	0x0803a394
 8031b54:	08031a81 	.word	0x08031a81

08031b58 <__sfp>:
 8031b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031b5a:	4607      	mov	r7, r0
 8031b5c:	f7ff ffac 	bl	8031ab8 <__sfp_lock_acquire>
 8031b60:	4b1e      	ldr	r3, [pc, #120]	; (8031bdc <__sfp+0x84>)
 8031b62:	681e      	ldr	r6, [r3, #0]
 8031b64:	69b3      	ldr	r3, [r6, #24]
 8031b66:	b913      	cbnz	r3, 8031b6e <__sfp+0x16>
 8031b68:	4630      	mov	r0, r6
 8031b6a:	f7ff ffbd 	bl	8031ae8 <__sinit>
 8031b6e:	3648      	adds	r6, #72	; 0x48
 8031b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8031b74:	3b01      	subs	r3, #1
 8031b76:	d503      	bpl.n	8031b80 <__sfp+0x28>
 8031b78:	6833      	ldr	r3, [r6, #0]
 8031b7a:	b30b      	cbz	r3, 8031bc0 <__sfp+0x68>
 8031b7c:	6836      	ldr	r6, [r6, #0]
 8031b7e:	e7f7      	b.n	8031b70 <__sfp+0x18>
 8031b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8031b84:	b9d5      	cbnz	r5, 8031bbc <__sfp+0x64>
 8031b86:	4b16      	ldr	r3, [pc, #88]	; (8031be0 <__sfp+0x88>)
 8031b88:	60e3      	str	r3, [r4, #12]
 8031b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8031b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8031b90:	f000 f847 	bl	8031c22 <__retarget_lock_init_recursive>
 8031b94:	f7ff ff96 	bl	8031ac4 <__sfp_lock_release>
 8031b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8031b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8031ba0:	6025      	str	r5, [r4, #0]
 8031ba2:	61a5      	str	r5, [r4, #24]
 8031ba4:	2208      	movs	r2, #8
 8031ba6:	4629      	mov	r1, r5
 8031ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8031bac:	f7ff f964 	bl	8030e78 <memset>
 8031bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8031bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8031bb8:	4620      	mov	r0, r4
 8031bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031bbc:	3468      	adds	r4, #104	; 0x68
 8031bbe:	e7d9      	b.n	8031b74 <__sfp+0x1c>
 8031bc0:	2104      	movs	r1, #4
 8031bc2:	4638      	mov	r0, r7
 8031bc4:	f7ff ff62 	bl	8031a8c <__sfmoreglue>
 8031bc8:	4604      	mov	r4, r0
 8031bca:	6030      	str	r0, [r6, #0]
 8031bcc:	2800      	cmp	r0, #0
 8031bce:	d1d5      	bne.n	8031b7c <__sfp+0x24>
 8031bd0:	f7ff ff78 	bl	8031ac4 <__sfp_lock_release>
 8031bd4:	230c      	movs	r3, #12
 8031bd6:	603b      	str	r3, [r7, #0]
 8031bd8:	e7ee      	b.n	8031bb8 <__sfp+0x60>
 8031bda:	bf00      	nop
 8031bdc:	0803a394 	.word	0x0803a394
 8031be0:	ffff0001 	.word	0xffff0001

08031be4 <_fwalk_reent>:
 8031be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031be8:	4606      	mov	r6, r0
 8031bea:	4688      	mov	r8, r1
 8031bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8031bf0:	2700      	movs	r7, #0
 8031bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8031bfa:	d505      	bpl.n	8031c08 <_fwalk_reent+0x24>
 8031bfc:	6824      	ldr	r4, [r4, #0]
 8031bfe:	2c00      	cmp	r4, #0
 8031c00:	d1f7      	bne.n	8031bf2 <_fwalk_reent+0xe>
 8031c02:	4638      	mov	r0, r7
 8031c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031c08:	89ab      	ldrh	r3, [r5, #12]
 8031c0a:	2b01      	cmp	r3, #1
 8031c0c:	d907      	bls.n	8031c1e <_fwalk_reent+0x3a>
 8031c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8031c12:	3301      	adds	r3, #1
 8031c14:	d003      	beq.n	8031c1e <_fwalk_reent+0x3a>
 8031c16:	4629      	mov	r1, r5
 8031c18:	4630      	mov	r0, r6
 8031c1a:	47c0      	blx	r8
 8031c1c:	4307      	orrs	r7, r0
 8031c1e:	3568      	adds	r5, #104	; 0x68
 8031c20:	e7e9      	b.n	8031bf6 <_fwalk_reent+0x12>

08031c22 <__retarget_lock_init_recursive>:
 8031c22:	4770      	bx	lr

08031c24 <__retarget_lock_acquire_recursive>:
 8031c24:	4770      	bx	lr

08031c26 <__retarget_lock_release_recursive>:
 8031c26:	4770      	bx	lr

08031c28 <__swhatbuf_r>:
 8031c28:	b570      	push	{r4, r5, r6, lr}
 8031c2a:	460e      	mov	r6, r1
 8031c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031c30:	2900      	cmp	r1, #0
 8031c32:	b096      	sub	sp, #88	; 0x58
 8031c34:	4614      	mov	r4, r2
 8031c36:	461d      	mov	r5, r3
 8031c38:	da07      	bge.n	8031c4a <__swhatbuf_r+0x22>
 8031c3a:	2300      	movs	r3, #0
 8031c3c:	602b      	str	r3, [r5, #0]
 8031c3e:	89b3      	ldrh	r3, [r6, #12]
 8031c40:	061a      	lsls	r2, r3, #24
 8031c42:	d410      	bmi.n	8031c66 <__swhatbuf_r+0x3e>
 8031c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8031c48:	e00e      	b.n	8031c68 <__swhatbuf_r+0x40>
 8031c4a:	466a      	mov	r2, sp
 8031c4c:	f000 f906 	bl	8031e5c <_fstat_r>
 8031c50:	2800      	cmp	r0, #0
 8031c52:	dbf2      	blt.n	8031c3a <__swhatbuf_r+0x12>
 8031c54:	9a01      	ldr	r2, [sp, #4]
 8031c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8031c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8031c5e:	425a      	negs	r2, r3
 8031c60:	415a      	adcs	r2, r3
 8031c62:	602a      	str	r2, [r5, #0]
 8031c64:	e7ee      	b.n	8031c44 <__swhatbuf_r+0x1c>
 8031c66:	2340      	movs	r3, #64	; 0x40
 8031c68:	2000      	movs	r0, #0
 8031c6a:	6023      	str	r3, [r4, #0]
 8031c6c:	b016      	add	sp, #88	; 0x58
 8031c6e:	bd70      	pop	{r4, r5, r6, pc}

08031c70 <__smakebuf_r>:
 8031c70:	898b      	ldrh	r3, [r1, #12]
 8031c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8031c74:	079d      	lsls	r5, r3, #30
 8031c76:	4606      	mov	r6, r0
 8031c78:	460c      	mov	r4, r1
 8031c7a:	d507      	bpl.n	8031c8c <__smakebuf_r+0x1c>
 8031c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8031c80:	6023      	str	r3, [r4, #0]
 8031c82:	6123      	str	r3, [r4, #16]
 8031c84:	2301      	movs	r3, #1
 8031c86:	6163      	str	r3, [r4, #20]
 8031c88:	b002      	add	sp, #8
 8031c8a:	bd70      	pop	{r4, r5, r6, pc}
 8031c8c:	ab01      	add	r3, sp, #4
 8031c8e:	466a      	mov	r2, sp
 8031c90:	f7ff ffca 	bl	8031c28 <__swhatbuf_r>
 8031c94:	9900      	ldr	r1, [sp, #0]
 8031c96:	4605      	mov	r5, r0
 8031c98:	4630      	mov	r0, r6
 8031c9a:	f7ff f9eb 	bl	8031074 <_malloc_r>
 8031c9e:	b948      	cbnz	r0, 8031cb4 <__smakebuf_r+0x44>
 8031ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031ca4:	059a      	lsls	r2, r3, #22
 8031ca6:	d4ef      	bmi.n	8031c88 <__smakebuf_r+0x18>
 8031ca8:	f023 0303 	bic.w	r3, r3, #3
 8031cac:	f043 0302 	orr.w	r3, r3, #2
 8031cb0:	81a3      	strh	r3, [r4, #12]
 8031cb2:	e7e3      	b.n	8031c7c <__smakebuf_r+0xc>
 8031cb4:	4b0d      	ldr	r3, [pc, #52]	; (8031cec <__smakebuf_r+0x7c>)
 8031cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8031cb8:	89a3      	ldrh	r3, [r4, #12]
 8031cba:	6020      	str	r0, [r4, #0]
 8031cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031cc0:	81a3      	strh	r3, [r4, #12]
 8031cc2:	9b00      	ldr	r3, [sp, #0]
 8031cc4:	6163      	str	r3, [r4, #20]
 8031cc6:	9b01      	ldr	r3, [sp, #4]
 8031cc8:	6120      	str	r0, [r4, #16]
 8031cca:	b15b      	cbz	r3, 8031ce4 <__smakebuf_r+0x74>
 8031ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031cd0:	4630      	mov	r0, r6
 8031cd2:	f000 f8d5 	bl	8031e80 <_isatty_r>
 8031cd6:	b128      	cbz	r0, 8031ce4 <__smakebuf_r+0x74>
 8031cd8:	89a3      	ldrh	r3, [r4, #12]
 8031cda:	f023 0303 	bic.w	r3, r3, #3
 8031cde:	f043 0301 	orr.w	r3, r3, #1
 8031ce2:	81a3      	strh	r3, [r4, #12]
 8031ce4:	89a0      	ldrh	r0, [r4, #12]
 8031ce6:	4305      	orrs	r5, r0
 8031ce8:	81a5      	strh	r5, [r4, #12]
 8031cea:	e7cd      	b.n	8031c88 <__smakebuf_r+0x18>
 8031cec:	08031a81 	.word	0x08031a81

08031cf0 <__malloc_lock>:
 8031cf0:	4801      	ldr	r0, [pc, #4]	; (8031cf8 <__malloc_lock+0x8>)
 8031cf2:	f7ff bf97 	b.w	8031c24 <__retarget_lock_acquire_recursive>
 8031cf6:	bf00      	nop
 8031cf8:	20003170 	.word	0x20003170

08031cfc <__malloc_unlock>:
 8031cfc:	4801      	ldr	r0, [pc, #4]	; (8031d04 <__malloc_unlock+0x8>)
 8031cfe:	f7ff bf92 	b.w	8031c26 <__retarget_lock_release_recursive>
 8031d02:	bf00      	nop
 8031d04:	20003170 	.word	0x20003170

08031d08 <_raise_r>:
 8031d08:	291f      	cmp	r1, #31
 8031d0a:	b538      	push	{r3, r4, r5, lr}
 8031d0c:	4604      	mov	r4, r0
 8031d0e:	460d      	mov	r5, r1
 8031d10:	d904      	bls.n	8031d1c <_raise_r+0x14>
 8031d12:	2316      	movs	r3, #22
 8031d14:	6003      	str	r3, [r0, #0]
 8031d16:	f04f 30ff 	mov.w	r0, #4294967295
 8031d1a:	bd38      	pop	{r3, r4, r5, pc}
 8031d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8031d1e:	b112      	cbz	r2, 8031d26 <_raise_r+0x1e>
 8031d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031d24:	b94b      	cbnz	r3, 8031d3a <_raise_r+0x32>
 8031d26:	4620      	mov	r0, r4
 8031d28:	f000 f830 	bl	8031d8c <_getpid_r>
 8031d2c:	462a      	mov	r2, r5
 8031d2e:	4601      	mov	r1, r0
 8031d30:	4620      	mov	r0, r4
 8031d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8031d36:	f000 b817 	b.w	8031d68 <_kill_r>
 8031d3a:	2b01      	cmp	r3, #1
 8031d3c:	d00a      	beq.n	8031d54 <_raise_r+0x4c>
 8031d3e:	1c59      	adds	r1, r3, #1
 8031d40:	d103      	bne.n	8031d4a <_raise_r+0x42>
 8031d42:	2316      	movs	r3, #22
 8031d44:	6003      	str	r3, [r0, #0]
 8031d46:	2001      	movs	r0, #1
 8031d48:	e7e7      	b.n	8031d1a <_raise_r+0x12>
 8031d4a:	2400      	movs	r4, #0
 8031d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8031d50:	4628      	mov	r0, r5
 8031d52:	4798      	blx	r3
 8031d54:	2000      	movs	r0, #0
 8031d56:	e7e0      	b.n	8031d1a <_raise_r+0x12>

08031d58 <raise>:
 8031d58:	4b02      	ldr	r3, [pc, #8]	; (8031d64 <raise+0xc>)
 8031d5a:	4601      	mov	r1, r0
 8031d5c:	6818      	ldr	r0, [r3, #0]
 8031d5e:	f7ff bfd3 	b.w	8031d08 <_raise_r>
 8031d62:	bf00      	nop
 8031d64:	20000070 	.word	0x20000070

08031d68 <_kill_r>:
 8031d68:	b538      	push	{r3, r4, r5, lr}
 8031d6a:	4d07      	ldr	r5, [pc, #28]	; (8031d88 <_kill_r+0x20>)
 8031d6c:	2300      	movs	r3, #0
 8031d6e:	4604      	mov	r4, r0
 8031d70:	4608      	mov	r0, r1
 8031d72:	4611      	mov	r1, r2
 8031d74:	602b      	str	r3, [r5, #0]
 8031d76:	f001 fbe9 	bl	803354c <_kill>
 8031d7a:	1c43      	adds	r3, r0, #1
 8031d7c:	d102      	bne.n	8031d84 <_kill_r+0x1c>
 8031d7e:	682b      	ldr	r3, [r5, #0]
 8031d80:	b103      	cbz	r3, 8031d84 <_kill_r+0x1c>
 8031d82:	6023      	str	r3, [r4, #0]
 8031d84:	bd38      	pop	{r3, r4, r5, pc}
 8031d86:	bf00      	nop
 8031d88:	20003178 	.word	0x20003178

08031d8c <_getpid_r>:
 8031d8c:	f001 bbce 	b.w	803352c <_getpid>

08031d90 <__sread>:
 8031d90:	b510      	push	{r4, lr}
 8031d92:	460c      	mov	r4, r1
 8031d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031d98:	f000 f894 	bl	8031ec4 <_read_r>
 8031d9c:	2800      	cmp	r0, #0
 8031d9e:	bfab      	itete	ge
 8031da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8031da2:	89a3      	ldrhlt	r3, [r4, #12]
 8031da4:	181b      	addge	r3, r3, r0
 8031da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031daa:	bfac      	ite	ge
 8031dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8031dae:	81a3      	strhlt	r3, [r4, #12]
 8031db0:	bd10      	pop	{r4, pc}

08031db2 <__swrite>:
 8031db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031db6:	461f      	mov	r7, r3
 8031db8:	898b      	ldrh	r3, [r1, #12]
 8031dba:	05db      	lsls	r3, r3, #23
 8031dbc:	4605      	mov	r5, r0
 8031dbe:	460c      	mov	r4, r1
 8031dc0:	4616      	mov	r6, r2
 8031dc2:	d505      	bpl.n	8031dd0 <__swrite+0x1e>
 8031dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031dc8:	2302      	movs	r3, #2
 8031dca:	2200      	movs	r2, #0
 8031dcc:	f000 f868 	bl	8031ea0 <_lseek_r>
 8031dd0:	89a3      	ldrh	r3, [r4, #12]
 8031dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031dda:	81a3      	strh	r3, [r4, #12]
 8031ddc:	4632      	mov	r2, r6
 8031dde:	463b      	mov	r3, r7
 8031de0:	4628      	mov	r0, r5
 8031de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031de6:	f000 b817 	b.w	8031e18 <_write_r>

08031dea <__sseek>:
 8031dea:	b510      	push	{r4, lr}
 8031dec:	460c      	mov	r4, r1
 8031dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031df2:	f000 f855 	bl	8031ea0 <_lseek_r>
 8031df6:	1c43      	adds	r3, r0, #1
 8031df8:	89a3      	ldrh	r3, [r4, #12]
 8031dfa:	bf15      	itete	ne
 8031dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8031dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8031e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031e06:	81a3      	strheq	r3, [r4, #12]
 8031e08:	bf18      	it	ne
 8031e0a:	81a3      	strhne	r3, [r4, #12]
 8031e0c:	bd10      	pop	{r4, pc}

08031e0e <__sclose>:
 8031e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031e12:	f000 b813 	b.w	8031e3c <_close_r>
	...

08031e18 <_write_r>:
 8031e18:	b538      	push	{r3, r4, r5, lr}
 8031e1a:	4d07      	ldr	r5, [pc, #28]	; (8031e38 <_write_r+0x20>)
 8031e1c:	4604      	mov	r4, r0
 8031e1e:	4608      	mov	r0, r1
 8031e20:	4611      	mov	r1, r2
 8031e22:	2200      	movs	r2, #0
 8031e24:	602a      	str	r2, [r5, #0]
 8031e26:	461a      	mov	r2, r3
 8031e28:	f001 fbb6 	bl	8033598 <_write>
 8031e2c:	1c43      	adds	r3, r0, #1
 8031e2e:	d102      	bne.n	8031e36 <_write_r+0x1e>
 8031e30:	682b      	ldr	r3, [r5, #0]
 8031e32:	b103      	cbz	r3, 8031e36 <_write_r+0x1e>
 8031e34:	6023      	str	r3, [r4, #0]
 8031e36:	bd38      	pop	{r3, r4, r5, pc}
 8031e38:	20003178 	.word	0x20003178

08031e3c <_close_r>:
 8031e3c:	b538      	push	{r3, r4, r5, lr}
 8031e3e:	4d06      	ldr	r5, [pc, #24]	; (8031e58 <_close_r+0x1c>)
 8031e40:	2300      	movs	r3, #0
 8031e42:	4604      	mov	r4, r0
 8031e44:	4608      	mov	r0, r1
 8031e46:	602b      	str	r3, [r5, #0]
 8031e48:	f001 fb60 	bl	803350c <_close>
 8031e4c:	1c43      	adds	r3, r0, #1
 8031e4e:	d102      	bne.n	8031e56 <_close_r+0x1a>
 8031e50:	682b      	ldr	r3, [r5, #0]
 8031e52:	b103      	cbz	r3, 8031e56 <_close_r+0x1a>
 8031e54:	6023      	str	r3, [r4, #0]
 8031e56:	bd38      	pop	{r3, r4, r5, pc}
 8031e58:	20003178 	.word	0x20003178

08031e5c <_fstat_r>:
 8031e5c:	b538      	push	{r3, r4, r5, lr}
 8031e5e:	4d07      	ldr	r5, [pc, #28]	; (8031e7c <_fstat_r+0x20>)
 8031e60:	2300      	movs	r3, #0
 8031e62:	4604      	mov	r4, r0
 8031e64:	4608      	mov	r0, r1
 8031e66:	4611      	mov	r1, r2
 8031e68:	602b      	str	r3, [r5, #0]
 8031e6a:	f001 fb57 	bl	803351c <_fstat>
 8031e6e:	1c43      	adds	r3, r0, #1
 8031e70:	d102      	bne.n	8031e78 <_fstat_r+0x1c>
 8031e72:	682b      	ldr	r3, [r5, #0]
 8031e74:	b103      	cbz	r3, 8031e78 <_fstat_r+0x1c>
 8031e76:	6023      	str	r3, [r4, #0]
 8031e78:	bd38      	pop	{r3, r4, r5, pc}
 8031e7a:	bf00      	nop
 8031e7c:	20003178 	.word	0x20003178

08031e80 <_isatty_r>:
 8031e80:	b538      	push	{r3, r4, r5, lr}
 8031e82:	4d06      	ldr	r5, [pc, #24]	; (8031e9c <_isatty_r+0x1c>)
 8031e84:	2300      	movs	r3, #0
 8031e86:	4604      	mov	r4, r0
 8031e88:	4608      	mov	r0, r1
 8031e8a:	602b      	str	r3, [r5, #0]
 8031e8c:	f001 fb56 	bl	803353c <_isatty>
 8031e90:	1c43      	adds	r3, r0, #1
 8031e92:	d102      	bne.n	8031e9a <_isatty_r+0x1a>
 8031e94:	682b      	ldr	r3, [r5, #0]
 8031e96:	b103      	cbz	r3, 8031e9a <_isatty_r+0x1a>
 8031e98:	6023      	str	r3, [r4, #0]
 8031e9a:	bd38      	pop	{r3, r4, r5, pc}
 8031e9c:	20003178 	.word	0x20003178

08031ea0 <_lseek_r>:
 8031ea0:	b538      	push	{r3, r4, r5, lr}
 8031ea2:	4d07      	ldr	r5, [pc, #28]	; (8031ec0 <_lseek_r+0x20>)
 8031ea4:	4604      	mov	r4, r0
 8031ea6:	4608      	mov	r0, r1
 8031ea8:	4611      	mov	r1, r2
 8031eaa:	2200      	movs	r2, #0
 8031eac:	602a      	str	r2, [r5, #0]
 8031eae:	461a      	mov	r2, r3
 8031eb0:	f001 fb54 	bl	803355c <_lseek>
 8031eb4:	1c43      	adds	r3, r0, #1
 8031eb6:	d102      	bne.n	8031ebe <_lseek_r+0x1e>
 8031eb8:	682b      	ldr	r3, [r5, #0]
 8031eba:	b103      	cbz	r3, 8031ebe <_lseek_r+0x1e>
 8031ebc:	6023      	str	r3, [r4, #0]
 8031ebe:	bd38      	pop	{r3, r4, r5, pc}
 8031ec0:	20003178 	.word	0x20003178

08031ec4 <_read_r>:
 8031ec4:	b538      	push	{r3, r4, r5, lr}
 8031ec6:	4d07      	ldr	r5, [pc, #28]	; (8031ee4 <_read_r+0x20>)
 8031ec8:	4604      	mov	r4, r0
 8031eca:	4608      	mov	r0, r1
 8031ecc:	4611      	mov	r1, r2
 8031ece:	2200      	movs	r2, #0
 8031ed0:	602a      	str	r2, [r5, #0]
 8031ed2:	461a      	mov	r2, r3
 8031ed4:	f001 fb4a 	bl	803356c <_read>
 8031ed8:	1c43      	adds	r3, r0, #1
 8031eda:	d102      	bne.n	8031ee2 <_read_r+0x1e>
 8031edc:	682b      	ldr	r3, [r5, #0]
 8031ede:	b103      	cbz	r3, 8031ee2 <_read_r+0x1e>
 8031ee0:	6023      	str	r3, [r4, #0]
 8031ee2:	bd38      	pop	{r3, r4, r5, pc}
 8031ee4:	20003178 	.word	0x20003178

08031ee8 <ceilf>:
 8031ee8:	ee10 3a10 	vmov	r3, s0
 8031eec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8031ef0:	3a7f      	subs	r2, #127	; 0x7f
 8031ef2:	2a16      	cmp	r2, #22
 8031ef4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8031ef8:	dc2a      	bgt.n	8031f50 <ceilf+0x68>
 8031efa:	2a00      	cmp	r2, #0
 8031efc:	da11      	bge.n	8031f22 <ceilf+0x3a>
 8031efe:	eddf 7a19 	vldr	s15, [pc, #100]	; 8031f64 <ceilf+0x7c>
 8031f02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8031f06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8031f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8031f0e:	dd05      	ble.n	8031f1c <ceilf+0x34>
 8031f10:	2b00      	cmp	r3, #0
 8031f12:	db23      	blt.n	8031f5c <ceilf+0x74>
 8031f14:	2900      	cmp	r1, #0
 8031f16:	bf18      	it	ne
 8031f18:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8031f1c:	ee00 3a10 	vmov	s0, r3
 8031f20:	4770      	bx	lr
 8031f22:	4911      	ldr	r1, [pc, #68]	; (8031f68 <ceilf+0x80>)
 8031f24:	4111      	asrs	r1, r2
 8031f26:	420b      	tst	r3, r1
 8031f28:	d0fa      	beq.n	8031f20 <ceilf+0x38>
 8031f2a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8031f64 <ceilf+0x7c>
 8031f2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8031f32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8031f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8031f3a:	ddef      	ble.n	8031f1c <ceilf+0x34>
 8031f3c:	2b00      	cmp	r3, #0
 8031f3e:	bfc2      	ittt	gt
 8031f40:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8031f44:	fa40 f202 	asrgt.w	r2, r0, r2
 8031f48:	189b      	addgt	r3, r3, r2
 8031f4a:	ea23 0301 	bic.w	r3, r3, r1
 8031f4e:	e7e5      	b.n	8031f1c <ceilf+0x34>
 8031f50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8031f54:	d3e4      	bcc.n	8031f20 <ceilf+0x38>
 8031f56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8031f5a:	4770      	bx	lr
 8031f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8031f60:	e7dc      	b.n	8031f1c <ceilf+0x34>
 8031f62:	bf00      	nop
 8031f64:	7149f2ca 	.word	0x7149f2ca
 8031f68:	007fffff 	.word	0x007fffff

08031f6c <cosf>:
 8031f6c:	ee10 3a10 	vmov	r3, s0
 8031f70:	b507      	push	{r0, r1, r2, lr}
 8031f72:	4a1c      	ldr	r2, [pc, #112]	; (8031fe4 <cosf+0x78>)
 8031f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8031f78:	4293      	cmp	r3, r2
 8031f7a:	dc04      	bgt.n	8031f86 <cosf+0x1a>
 8031f7c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8031fe8 <cosf+0x7c>
 8031f80:	f000 feaa 	bl	8032cd8 <__kernel_cosf>
 8031f84:	e004      	b.n	8031f90 <cosf+0x24>
 8031f86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8031f8a:	db04      	blt.n	8031f96 <cosf+0x2a>
 8031f8c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8031f90:	b003      	add	sp, #12
 8031f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8031f96:	4668      	mov	r0, sp
 8031f98:	f000 fd5e 	bl	8032a58 <__ieee754_rem_pio2f>
 8031f9c:	f000 0003 	and.w	r0, r0, #3
 8031fa0:	2801      	cmp	r0, #1
 8031fa2:	d007      	beq.n	8031fb4 <cosf+0x48>
 8031fa4:	2802      	cmp	r0, #2
 8031fa6:	d00e      	beq.n	8031fc6 <cosf+0x5a>
 8031fa8:	b9a0      	cbnz	r0, 8031fd4 <cosf+0x68>
 8031faa:	eddd 0a01 	vldr	s1, [sp, #4]
 8031fae:	ed9d 0a00 	vldr	s0, [sp]
 8031fb2:	e7e5      	b.n	8031f80 <cosf+0x14>
 8031fb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8031fb8:	ed9d 0a00 	vldr	s0, [sp]
 8031fbc:	f001 f976 	bl	80332ac <__kernel_sinf>
 8031fc0:	eeb1 0a40 	vneg.f32	s0, s0
 8031fc4:	e7e4      	b.n	8031f90 <cosf+0x24>
 8031fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8031fca:	ed9d 0a00 	vldr	s0, [sp]
 8031fce:	f000 fe83 	bl	8032cd8 <__kernel_cosf>
 8031fd2:	e7f5      	b.n	8031fc0 <cosf+0x54>
 8031fd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8031fd8:	ed9d 0a00 	vldr	s0, [sp]
 8031fdc:	2001      	movs	r0, #1
 8031fde:	f001 f965 	bl	80332ac <__kernel_sinf>
 8031fe2:	e7d5      	b.n	8031f90 <cosf+0x24>
 8031fe4:	3f490fd8 	.word	0x3f490fd8
 8031fe8:	00000000 	.word	0x00000000

08031fec <fabsf>:
 8031fec:	ee10 3a10 	vmov	r3, s0
 8031ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8031ff4:	ee00 3a10 	vmov	s0, r3
 8031ff8:	4770      	bx	lr
	...

08031ffc <floorf>:
 8031ffc:	ee10 3a10 	vmov	r3, s0
 8032000:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8032004:	3a7f      	subs	r2, #127	; 0x7f
 8032006:	2a16      	cmp	r2, #22
 8032008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 803200c:	dc2a      	bgt.n	8032064 <floorf+0x68>
 803200e:	2a00      	cmp	r2, #0
 8032010:	da11      	bge.n	8032036 <floorf+0x3a>
 8032012:	eddf 7a18 	vldr	s15, [pc, #96]	; 8032074 <floorf+0x78>
 8032016:	ee30 0a27 	vadd.f32	s0, s0, s15
 803201a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 803201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032022:	dd05      	ble.n	8032030 <floorf+0x34>
 8032024:	2b00      	cmp	r3, #0
 8032026:	da23      	bge.n	8032070 <floorf+0x74>
 8032028:	4a13      	ldr	r2, [pc, #76]	; (8032078 <floorf+0x7c>)
 803202a:	2900      	cmp	r1, #0
 803202c:	bf18      	it	ne
 803202e:	4613      	movne	r3, r2
 8032030:	ee00 3a10 	vmov	s0, r3
 8032034:	4770      	bx	lr
 8032036:	4911      	ldr	r1, [pc, #68]	; (803207c <floorf+0x80>)
 8032038:	4111      	asrs	r1, r2
 803203a:	420b      	tst	r3, r1
 803203c:	d0fa      	beq.n	8032034 <floorf+0x38>
 803203e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8032074 <floorf+0x78>
 8032042:	ee30 0a27 	vadd.f32	s0, s0, s15
 8032046:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 803204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803204e:	ddef      	ble.n	8032030 <floorf+0x34>
 8032050:	2b00      	cmp	r3, #0
 8032052:	bfbe      	ittt	lt
 8032054:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8032058:	fa40 f202 	asrlt.w	r2, r0, r2
 803205c:	189b      	addlt	r3, r3, r2
 803205e:	ea23 0301 	bic.w	r3, r3, r1
 8032062:	e7e5      	b.n	8032030 <floorf+0x34>
 8032064:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8032068:	d3e4      	bcc.n	8032034 <floorf+0x38>
 803206a:	ee30 0a00 	vadd.f32	s0, s0, s0
 803206e:	4770      	bx	lr
 8032070:	2300      	movs	r3, #0
 8032072:	e7dd      	b.n	8032030 <floorf+0x34>
 8032074:	7149f2ca 	.word	0x7149f2ca
 8032078:	bf800000 	.word	0xbf800000
 803207c:	007fffff 	.word	0x007fffff

08032080 <sinf>:
 8032080:	ee10 3a10 	vmov	r3, s0
 8032084:	b507      	push	{r0, r1, r2, lr}
 8032086:	4a1d      	ldr	r2, [pc, #116]	; (80320fc <sinf+0x7c>)
 8032088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803208c:	4293      	cmp	r3, r2
 803208e:	dc05      	bgt.n	803209c <sinf+0x1c>
 8032090:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8032100 <sinf+0x80>
 8032094:	2000      	movs	r0, #0
 8032096:	f001 f909 	bl	80332ac <__kernel_sinf>
 803209a:	e004      	b.n	80320a6 <sinf+0x26>
 803209c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80320a0:	db04      	blt.n	80320ac <sinf+0x2c>
 80320a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80320a6:	b003      	add	sp, #12
 80320a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80320ac:	4668      	mov	r0, sp
 80320ae:	f000 fcd3 	bl	8032a58 <__ieee754_rem_pio2f>
 80320b2:	f000 0003 	and.w	r0, r0, #3
 80320b6:	2801      	cmp	r0, #1
 80320b8:	d008      	beq.n	80320cc <sinf+0x4c>
 80320ba:	2802      	cmp	r0, #2
 80320bc:	d00d      	beq.n	80320da <sinf+0x5a>
 80320be:	b9b0      	cbnz	r0, 80320ee <sinf+0x6e>
 80320c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80320c4:	ed9d 0a00 	vldr	s0, [sp]
 80320c8:	2001      	movs	r0, #1
 80320ca:	e7e4      	b.n	8032096 <sinf+0x16>
 80320cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80320d0:	ed9d 0a00 	vldr	s0, [sp]
 80320d4:	f000 fe00 	bl	8032cd8 <__kernel_cosf>
 80320d8:	e7e5      	b.n	80320a6 <sinf+0x26>
 80320da:	eddd 0a01 	vldr	s1, [sp, #4]
 80320de:	ed9d 0a00 	vldr	s0, [sp]
 80320e2:	2001      	movs	r0, #1
 80320e4:	f001 f8e2 	bl	80332ac <__kernel_sinf>
 80320e8:	eeb1 0a40 	vneg.f32	s0, s0
 80320ec:	e7db      	b.n	80320a6 <sinf+0x26>
 80320ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80320f2:	ed9d 0a00 	vldr	s0, [sp]
 80320f6:	f000 fdef 	bl	8032cd8 <__kernel_cosf>
 80320fa:	e7f5      	b.n	80320e8 <sinf+0x68>
 80320fc:	3f490fd8 	.word	0x3f490fd8
 8032100:	00000000 	.word	0x00000000

08032104 <acosf>:
 8032104:	b508      	push	{r3, lr}
 8032106:	ed2d 8b02 	vpush	{d8}
 803210a:	eeb0 8a40 	vmov.f32	s16, s0
 803210e:	f000 f8e9 	bl	80322e4 <__ieee754_acosf>
 8032112:	4b13      	ldr	r3, [pc, #76]	; (8032160 <acosf+0x5c>)
 8032114:	f993 3000 	ldrsb.w	r3, [r3]
 8032118:	3301      	adds	r3, #1
 803211a:	eef0 8a40 	vmov.f32	s17, s0
 803211e:	d01a      	beq.n	8032156 <acosf+0x52>
 8032120:	eeb4 8a48 	vcmp.f32	s16, s16
 8032124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032128:	d615      	bvs.n	8032156 <acosf+0x52>
 803212a:	eeb0 0a48 	vmov.f32	s0, s16
 803212e:	f7ff ff5d 	bl	8031fec <fabsf>
 8032132:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8032136:	eeb4 0ae7 	vcmpe.f32	s0, s15
 803213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803213e:	dd0a      	ble.n	8032156 <acosf+0x52>
 8032140:	f001 f9de 	bl	8033500 <__errno>
 8032144:	ecbd 8b02 	vpop	{d8}
 8032148:	2321      	movs	r3, #33	; 0x21
 803214a:	6003      	str	r3, [r0, #0]
 803214c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8032150:	4804      	ldr	r0, [pc, #16]	; (8032164 <acosf+0x60>)
 8032152:	f001 b901 	b.w	8033358 <nanf>
 8032156:	eeb0 0a68 	vmov.f32	s0, s17
 803215a:	ecbd 8b02 	vpop	{d8}
 803215e:	bd08      	pop	{r3, pc}
 8032160:	200000d4 	.word	0x200000d4
 8032164:	0803a26a 	.word	0x0803a26a

08032168 <powf>:
 8032168:	b508      	push	{r3, lr}
 803216a:	ed2d 8b04 	vpush	{d8-d9}
 803216e:	eeb0 9a40 	vmov.f32	s18, s0
 8032172:	eef0 8a60 	vmov.f32	s17, s1
 8032176:	f000 f9af 	bl	80324d8 <__ieee754_powf>
 803217a:	4b43      	ldr	r3, [pc, #268]	; (8032288 <powf+0x120>)
 803217c:	f993 3000 	ldrsb.w	r3, [r3]
 8032180:	3301      	adds	r3, #1
 8032182:	eeb0 8a40 	vmov.f32	s16, s0
 8032186:	d012      	beq.n	80321ae <powf+0x46>
 8032188:	eef4 8a68 	vcmp.f32	s17, s17
 803218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032190:	d60d      	bvs.n	80321ae <powf+0x46>
 8032192:	eeb4 9a49 	vcmp.f32	s18, s18
 8032196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803219a:	d70d      	bvc.n	80321b8 <powf+0x50>
 803219c:	eef5 8a40 	vcmp.f32	s17, #0.0
 80321a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80321a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80321a8:	bf08      	it	eq
 80321aa:	eeb0 8a67 	vmoveq.f32	s16, s15
 80321ae:	eeb0 0a48 	vmov.f32	s0, s16
 80321b2:	ecbd 8b04 	vpop	{d8-d9}
 80321b6:	bd08      	pop	{r3, pc}
 80321b8:	eddf 9a34 	vldr	s19, [pc, #208]	; 803228c <powf+0x124>
 80321bc:	eeb4 9a69 	vcmp.f32	s18, s19
 80321c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80321c4:	d116      	bne.n	80321f4 <powf+0x8c>
 80321c6:	eef4 8a69 	vcmp.f32	s17, s19
 80321ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80321ce:	d057      	beq.n	8032280 <powf+0x118>
 80321d0:	eeb0 0a68 	vmov.f32	s0, s17
 80321d4:	f001 f8b2 	bl	803333c <finitef>
 80321d8:	2800      	cmp	r0, #0
 80321da:	d0e8      	beq.n	80321ae <powf+0x46>
 80321dc:	eef4 8ae9 	vcmpe.f32	s17, s19
 80321e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80321e4:	d5e3      	bpl.n	80321ae <powf+0x46>
 80321e6:	f001 f98b 	bl	8033500 <__errno>
 80321ea:	2321      	movs	r3, #33	; 0x21
 80321ec:	6003      	str	r3, [r0, #0]
 80321ee:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8032290 <powf+0x128>
 80321f2:	e7dc      	b.n	80321ae <powf+0x46>
 80321f4:	f001 f8a2 	bl	803333c <finitef>
 80321f8:	bb50      	cbnz	r0, 8032250 <powf+0xe8>
 80321fa:	eeb0 0a49 	vmov.f32	s0, s18
 80321fe:	f001 f89d 	bl	803333c <finitef>
 8032202:	b328      	cbz	r0, 8032250 <powf+0xe8>
 8032204:	eeb0 0a68 	vmov.f32	s0, s17
 8032208:	f001 f898 	bl	803333c <finitef>
 803220c:	b300      	cbz	r0, 8032250 <powf+0xe8>
 803220e:	eeb4 8a48 	vcmp.f32	s16, s16
 8032212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032216:	d706      	bvc.n	8032226 <powf+0xbe>
 8032218:	f001 f972 	bl	8033500 <__errno>
 803221c:	2321      	movs	r3, #33	; 0x21
 803221e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8032222:	6003      	str	r3, [r0, #0]
 8032224:	e7c3      	b.n	80321ae <powf+0x46>
 8032226:	f001 f96b 	bl	8033500 <__errno>
 803222a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 803222e:	2322      	movs	r3, #34	; 0x22
 8032230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032234:	6003      	str	r3, [r0, #0]
 8032236:	d508      	bpl.n	803224a <powf+0xe2>
 8032238:	eeb0 0a68 	vmov.f32	s0, s17
 803223c:	f001 f892 	bl	8033364 <rintf>
 8032240:	eeb4 0a68 	vcmp.f32	s0, s17
 8032244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032248:	d1d1      	bne.n	80321ee <powf+0x86>
 803224a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8032294 <powf+0x12c>
 803224e:	e7ae      	b.n	80321ae <powf+0x46>
 8032250:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8032254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032258:	d1a9      	bne.n	80321ae <powf+0x46>
 803225a:	eeb0 0a49 	vmov.f32	s0, s18
 803225e:	f001 f86d 	bl	803333c <finitef>
 8032262:	2800      	cmp	r0, #0
 8032264:	d0a3      	beq.n	80321ae <powf+0x46>
 8032266:	eeb0 0a68 	vmov.f32	s0, s17
 803226a:	f001 f867 	bl	803333c <finitef>
 803226e:	2800      	cmp	r0, #0
 8032270:	d09d      	beq.n	80321ae <powf+0x46>
 8032272:	f001 f945 	bl	8033500 <__errno>
 8032276:	2322      	movs	r3, #34	; 0x22
 8032278:	ed9f 8a04 	vldr	s16, [pc, #16]	; 803228c <powf+0x124>
 803227c:	6003      	str	r3, [r0, #0]
 803227e:	e796      	b.n	80321ae <powf+0x46>
 8032280:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8032284:	e793      	b.n	80321ae <powf+0x46>
 8032286:	bf00      	nop
 8032288:	200000d4 	.word	0x200000d4
 803228c:	00000000 	.word	0x00000000
 8032290:	ff800000 	.word	0xff800000
 8032294:	7f800000 	.word	0x7f800000

08032298 <sqrtf>:
 8032298:	b508      	push	{r3, lr}
 803229a:	ed2d 8b02 	vpush	{d8}
 803229e:	eeb0 8a40 	vmov.f32	s16, s0
 80322a2:	f000 fd15 	bl	8032cd0 <__ieee754_sqrtf>
 80322a6:	4b0d      	ldr	r3, [pc, #52]	; (80322dc <sqrtf+0x44>)
 80322a8:	f993 3000 	ldrsb.w	r3, [r3]
 80322ac:	3301      	adds	r3, #1
 80322ae:	d011      	beq.n	80322d4 <sqrtf+0x3c>
 80322b0:	eeb4 8a48 	vcmp.f32	s16, s16
 80322b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80322b8:	d60c      	bvs.n	80322d4 <sqrtf+0x3c>
 80322ba:	eddf 8a09 	vldr	s17, [pc, #36]	; 80322e0 <sqrtf+0x48>
 80322be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80322c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80322c6:	d505      	bpl.n	80322d4 <sqrtf+0x3c>
 80322c8:	f001 f91a 	bl	8033500 <__errno>
 80322cc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80322d0:	2321      	movs	r3, #33	; 0x21
 80322d2:	6003      	str	r3, [r0, #0]
 80322d4:	ecbd 8b02 	vpop	{d8}
 80322d8:	bd08      	pop	{r3, pc}
 80322da:	bf00      	nop
 80322dc:	200000d4 	.word	0x200000d4
 80322e0:	00000000 	.word	0x00000000

080322e4 <__ieee754_acosf>:
 80322e4:	b508      	push	{r3, lr}
 80322e6:	ee10 3a10 	vmov	r3, s0
 80322ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80322ee:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80322f2:	ed2d 8b0c 	vpush	{d8-d13}
 80322f6:	d10a      	bne.n	803230e <__ieee754_acosf+0x2a>
 80322f8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8032494 <__ieee754_acosf+0x1b0>
 80322fc:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8032498 <__ieee754_acosf+0x1b4>
 8032300:	2b00      	cmp	r3, #0
 8032302:	bfd8      	it	le
 8032304:	eeb0 0a48 	vmovle.f32	s0, s16
 8032308:	ecbd 8b0c 	vpop	{d8-d13}
 803230c:	bd08      	pop	{r3, pc}
 803230e:	dd04      	ble.n	803231a <__ieee754_acosf+0x36>
 8032310:	ee30 8a40 	vsub.f32	s16, s0, s0
 8032314:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8032318:	e7f6      	b.n	8032308 <__ieee754_acosf+0x24>
 803231a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 803231e:	da3e      	bge.n	803239e <__ieee754_acosf+0xba>
 8032320:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8032324:	f340 80b3 	ble.w	803248e <__ieee754_acosf+0x1aa>
 8032328:	ee60 7a00 	vmul.f32	s15, s0, s0
 803232c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 803249c <__ieee754_acosf+0x1b8>
 8032330:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80324a0 <__ieee754_acosf+0x1bc>
 8032334:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80324a4 <__ieee754_acosf+0x1c0>
 8032338:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80324a8 <__ieee754_acosf+0x1c4>
 803233c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8032340:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80324ac <__ieee754_acosf+0x1c8>
 8032344:	eee7 6a27 	vfma.f32	s13, s14, s15
 8032348:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80324b0 <__ieee754_acosf+0x1cc>
 803234c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8032350:	eddf 6a58 	vldr	s13, [pc, #352]	; 80324b4 <__ieee754_acosf+0x1d0>
 8032354:	eee7 6a27 	vfma.f32	s13, s14, s15
 8032358:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80324b8 <__ieee754_acosf+0x1d4>
 803235c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8032360:	eddf 6a56 	vldr	s13, [pc, #344]	; 80324bc <__ieee754_acosf+0x1d8>
 8032364:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8032368:	eddf 6a55 	vldr	s13, [pc, #340]	; 80324c0 <__ieee754_acosf+0x1dc>
 803236c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8032370:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80324c4 <__ieee754_acosf+0x1e0>
 8032374:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8032378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803237c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8032380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8032384:	eef0 7a66 	vmov.f32	s15, s13
 8032388:	eec7 6a27 	vdiv.f32	s13, s14, s15
 803238c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80324c8 <__ieee754_acosf+0x1e4>
 8032390:	eea0 8a66 	vfms.f32	s16, s0, s13
 8032394:	ee30 0a48 	vsub.f32	s0, s0, s16
 8032398:	ee37 0ac0 	vsub.f32	s0, s15, s0
 803239c:	e7b4      	b.n	8032308 <__ieee754_acosf+0x24>
 803239e:	2b00      	cmp	r3, #0
 80323a0:	eddf da3e 	vldr	s27, [pc, #248]	; 803249c <__ieee754_acosf+0x1b8>
 80323a4:	eddf ca3e 	vldr	s25, [pc, #248]	; 80324a0 <__ieee754_acosf+0x1bc>
 80323a8:	ed9f ca40 	vldr	s24, [pc, #256]	; 80324ac <__ieee754_acosf+0x1c8>
 80323ac:	eddf ba40 	vldr	s23, [pc, #256]	; 80324b0 <__ieee754_acosf+0x1cc>
 80323b0:	ed9f ba40 	vldr	s22, [pc, #256]	; 80324b4 <__ieee754_acosf+0x1d0>
 80323b4:	eddf 8a40 	vldr	s17, [pc, #256]	; 80324b8 <__ieee754_acosf+0x1d4>
 80323b8:	ed9f da40 	vldr	s26, [pc, #256]	; 80324bc <__ieee754_acosf+0x1d8>
 80323bc:	eddf aa39 	vldr	s21, [pc, #228]	; 80324a4 <__ieee754_acosf+0x1c0>
 80323c0:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80324c0 <__ieee754_acosf+0x1dc>
 80323c4:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80324c4 <__ieee754_acosf+0x1e0>
 80323c8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80323cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80323d0:	da28      	bge.n	8032424 <__ieee754_acosf+0x140>
 80323d2:	ee30 0a09 	vadd.f32	s0, s0, s18
 80323d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80323da:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80323de:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80323e2:	eeac ca80 	vfma.f32	s24, s25, s0
 80323e6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80323ea:	eeec ba00 	vfma.f32	s23, s24, s0
 80323ee:	eeea 9a00 	vfma.f32	s19, s20, s0
 80323f2:	eeab ba80 	vfma.f32	s22, s23, s0
 80323f6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80323fa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80323fe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8032402:	f000 fc65 	bl	8032cd0 <__ieee754_sqrtf>
 8032406:	ee88 7a89 	vdiv.f32	s14, s17, s18
 803240a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80324cc <__ieee754_acosf+0x1e8>
 803240e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8032412:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8032416:	ee77 7a80 	vadd.f32	s15, s15, s0
 803241a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80324d0 <__ieee754_acosf+0x1ec>
 803241e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8032422:	e771      	b.n	8032308 <__ieee754_acosf+0x24>
 8032424:	ee39 8a40 	vsub.f32	s16, s18, s0
 8032428:	ee28 8a27 	vmul.f32	s16, s16, s15
 803242c:	eeb0 0a48 	vmov.f32	s0, s16
 8032430:	f000 fc4e 	bl	8032cd0 <__ieee754_sqrtf>
 8032434:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8032438:	eee8 aa0d 	vfma.f32	s21, s16, s26
 803243c:	eeac ca88 	vfma.f32	s24, s25, s16
 8032440:	eeaa aa88 	vfma.f32	s20, s21, s16
 8032444:	eeec ba08 	vfma.f32	s23, s24, s16
 8032448:	ee10 3a10 	vmov	r3, s0
 803244c:	eeab ba88 	vfma.f32	s22, s23, s16
 8032450:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8032454:	f023 030f 	bic.w	r3, r3, #15
 8032458:	eeea 9a08 	vfma.f32	s19, s20, s16
 803245c:	ee07 3a90 	vmov	s15, r3
 8032460:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8032464:	eeb0 6a48 	vmov.f32	s12, s16
 8032468:	eea7 6ae7 	vfms.f32	s12, s15, s15
 803246c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8032470:	ee70 6a27 	vadd.f32	s13, s0, s15
 8032474:	ee68 8a88 	vmul.f32	s17, s17, s16
 8032478:	ee86 7a26 	vdiv.f32	s14, s12, s13
 803247c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8032480:	eea0 7a26 	vfma.f32	s14, s0, s13
 8032484:	ee37 0a87 	vadd.f32	s0, s15, s14
 8032488:	ee30 0a00 	vadd.f32	s0, s0, s0
 803248c:	e73c      	b.n	8032308 <__ieee754_acosf+0x24>
 803248e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80324d4 <__ieee754_acosf+0x1f0>
 8032492:	e739      	b.n	8032308 <__ieee754_acosf+0x24>
 8032494:	00000000 	.word	0x00000000
 8032498:	40490fdb 	.word	0x40490fdb
 803249c:	3811ef08 	.word	0x3811ef08
 80324a0:	3a4f7f04 	.word	0x3a4f7f04
 80324a4:	bf303361 	.word	0xbf303361
 80324a8:	33a22168 	.word	0x33a22168
 80324ac:	bd241146 	.word	0xbd241146
 80324b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80324b4:	bea6b090 	.word	0xbea6b090
 80324b8:	3e2aaaab 	.word	0x3e2aaaab
 80324bc:	3d9dc62e 	.word	0x3d9dc62e
 80324c0:	4001572d 	.word	0x4001572d
 80324c4:	c019d139 	.word	0xc019d139
 80324c8:	3fc90fda 	.word	0x3fc90fda
 80324cc:	b3a22168 	.word	0xb3a22168
 80324d0:	40490fda 	.word	0x40490fda
 80324d4:	3fc90fdb 	.word	0x3fc90fdb

080324d8 <__ieee754_powf>:
 80324d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80324dc:	ee10 5a90 	vmov	r5, s1
 80324e0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80324e4:	ed2d 8b02 	vpush	{d8}
 80324e8:	eeb0 8a40 	vmov.f32	s16, s0
 80324ec:	eef0 8a60 	vmov.f32	s17, s1
 80324f0:	f000 8291 	beq.w	8032a16 <__ieee754_powf+0x53e>
 80324f4:	ee10 8a10 	vmov	r8, s0
 80324f8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80324fc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8032500:	dc06      	bgt.n	8032510 <__ieee754_powf+0x38>
 8032502:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8032506:	dd0a      	ble.n	803251e <__ieee754_powf+0x46>
 8032508:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 803250c:	f000 8283 	beq.w	8032a16 <__ieee754_powf+0x53e>
 8032510:	ecbd 8b02 	vpop	{d8}
 8032514:	48d8      	ldr	r0, [pc, #864]	; (8032878 <__ieee754_powf+0x3a0>)
 8032516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803251a:	f000 bf1d 	b.w	8033358 <nanf>
 803251e:	f1b8 0f00 	cmp.w	r8, #0
 8032522:	da1f      	bge.n	8032564 <__ieee754_powf+0x8c>
 8032524:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8032528:	da2e      	bge.n	8032588 <__ieee754_powf+0xb0>
 803252a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 803252e:	f2c0 827b 	blt.w	8032a28 <__ieee754_powf+0x550>
 8032532:	15fb      	asrs	r3, r7, #23
 8032534:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8032538:	fa47 f603 	asr.w	r6, r7, r3
 803253c:	fa06 f303 	lsl.w	r3, r6, r3
 8032540:	42bb      	cmp	r3, r7
 8032542:	f040 8271 	bne.w	8032a28 <__ieee754_powf+0x550>
 8032546:	f006 0601 	and.w	r6, r6, #1
 803254a:	f1c6 0602 	rsb	r6, r6, #2
 803254e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8032552:	d120      	bne.n	8032596 <__ieee754_powf+0xbe>
 8032554:	2d00      	cmp	r5, #0
 8032556:	f280 8264 	bge.w	8032a22 <__ieee754_powf+0x54a>
 803255a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 803255e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8032562:	e00d      	b.n	8032580 <__ieee754_powf+0xa8>
 8032564:	2600      	movs	r6, #0
 8032566:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 803256a:	d1f0      	bne.n	803254e <__ieee754_powf+0x76>
 803256c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8032570:	f000 8251 	beq.w	8032a16 <__ieee754_powf+0x53e>
 8032574:	dd0a      	ble.n	803258c <__ieee754_powf+0xb4>
 8032576:	2d00      	cmp	r5, #0
 8032578:	f280 8250 	bge.w	8032a1c <__ieee754_powf+0x544>
 803257c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 803287c <__ieee754_powf+0x3a4>
 8032580:	ecbd 8b02 	vpop	{d8}
 8032584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032588:	2602      	movs	r6, #2
 803258a:	e7ec      	b.n	8032566 <__ieee754_powf+0x8e>
 803258c:	2d00      	cmp	r5, #0
 803258e:	daf5      	bge.n	803257c <__ieee754_powf+0xa4>
 8032590:	eeb1 0a68 	vneg.f32	s0, s17
 8032594:	e7f4      	b.n	8032580 <__ieee754_powf+0xa8>
 8032596:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 803259a:	d102      	bne.n	80325a2 <__ieee754_powf+0xca>
 803259c:	ee28 0a08 	vmul.f32	s0, s16, s16
 80325a0:	e7ee      	b.n	8032580 <__ieee754_powf+0xa8>
 80325a2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80325a6:	eeb0 0a48 	vmov.f32	s0, s16
 80325aa:	d108      	bne.n	80325be <__ieee754_powf+0xe6>
 80325ac:	f1b8 0f00 	cmp.w	r8, #0
 80325b0:	db05      	blt.n	80325be <__ieee754_powf+0xe6>
 80325b2:	ecbd 8b02 	vpop	{d8}
 80325b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80325ba:	f000 bb89 	b.w	8032cd0 <__ieee754_sqrtf>
 80325be:	f7ff fd15 	bl	8031fec <fabsf>
 80325c2:	b124      	cbz	r4, 80325ce <__ieee754_powf+0xf6>
 80325c4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80325c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80325cc:	d117      	bne.n	80325fe <__ieee754_powf+0x126>
 80325ce:	2d00      	cmp	r5, #0
 80325d0:	bfbc      	itt	lt
 80325d2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80325d6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80325da:	f1b8 0f00 	cmp.w	r8, #0
 80325de:	dacf      	bge.n	8032580 <__ieee754_powf+0xa8>
 80325e0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80325e4:	ea54 0306 	orrs.w	r3, r4, r6
 80325e8:	d104      	bne.n	80325f4 <__ieee754_powf+0x11c>
 80325ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80325ee:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80325f2:	e7c5      	b.n	8032580 <__ieee754_powf+0xa8>
 80325f4:	2e01      	cmp	r6, #1
 80325f6:	d1c3      	bne.n	8032580 <__ieee754_powf+0xa8>
 80325f8:	eeb1 0a40 	vneg.f32	s0, s0
 80325fc:	e7c0      	b.n	8032580 <__ieee754_powf+0xa8>
 80325fe:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8032602:	3801      	subs	r0, #1
 8032604:	ea56 0300 	orrs.w	r3, r6, r0
 8032608:	d104      	bne.n	8032614 <__ieee754_powf+0x13c>
 803260a:	ee38 8a48 	vsub.f32	s16, s16, s16
 803260e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8032612:	e7b5      	b.n	8032580 <__ieee754_powf+0xa8>
 8032614:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8032618:	dd6b      	ble.n	80326f2 <__ieee754_powf+0x21a>
 803261a:	4b99      	ldr	r3, [pc, #612]	; (8032880 <__ieee754_powf+0x3a8>)
 803261c:	429c      	cmp	r4, r3
 803261e:	dc06      	bgt.n	803262e <__ieee754_powf+0x156>
 8032620:	2d00      	cmp	r5, #0
 8032622:	daab      	bge.n	803257c <__ieee754_powf+0xa4>
 8032624:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8032884 <__ieee754_powf+0x3ac>
 8032628:	ee20 0a00 	vmul.f32	s0, s0, s0
 803262c:	e7a8      	b.n	8032580 <__ieee754_powf+0xa8>
 803262e:	4b96      	ldr	r3, [pc, #600]	; (8032888 <__ieee754_powf+0x3b0>)
 8032630:	429c      	cmp	r4, r3
 8032632:	dd02      	ble.n	803263a <__ieee754_powf+0x162>
 8032634:	2d00      	cmp	r5, #0
 8032636:	dcf5      	bgt.n	8032624 <__ieee754_powf+0x14c>
 8032638:	e7a0      	b.n	803257c <__ieee754_powf+0xa4>
 803263a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 803263e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8032642:	eddf 6a92 	vldr	s13, [pc, #584]	; 803288c <__ieee754_powf+0x3b4>
 8032646:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 803264a:	eee0 6a67 	vfms.f32	s13, s0, s15
 803264e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8032652:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8032656:	ee20 7a00 	vmul.f32	s14, s0, s0
 803265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803265e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8032890 <__ieee754_powf+0x3b8>
 8032662:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8032666:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8032894 <__ieee754_powf+0x3bc>
 803266a:	eee0 7a07 	vfma.f32	s15, s0, s14
 803266e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8032898 <__ieee754_powf+0x3c0>
 8032672:	eef0 6a67 	vmov.f32	s13, s15
 8032676:	eee0 6a07 	vfma.f32	s13, s0, s14
 803267a:	ee16 3a90 	vmov	r3, s13
 803267e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8032682:	f023 030f 	bic.w	r3, r3, #15
 8032686:	ee00 3a90 	vmov	s1, r3
 803268a:	eee0 0a47 	vfms.f32	s1, s0, s14
 803268e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8032692:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8032696:	f025 050f 	bic.w	r5, r5, #15
 803269a:	ee07 5a10 	vmov	s14, r5
 803269e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80326a2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80326a6:	ee07 3a90 	vmov	s15, r3
 80326aa:	eee7 0a27 	vfma.f32	s1, s14, s15
 80326ae:	3e01      	subs	r6, #1
 80326b0:	ea56 0200 	orrs.w	r2, r6, r0
 80326b4:	ee07 5a10 	vmov	s14, r5
 80326b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80326bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80326c0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80326c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80326c8:	ee17 4a10 	vmov	r4, s14
 80326cc:	bf08      	it	eq
 80326ce:	eeb0 8a40 	vmoveq.f32	s16, s0
 80326d2:	2c00      	cmp	r4, #0
 80326d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80326d8:	f340 8184 	ble.w	80329e4 <__ieee754_powf+0x50c>
 80326dc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80326e0:	f340 80fc 	ble.w	80328dc <__ieee754_powf+0x404>
 80326e4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8032884 <__ieee754_powf+0x3ac>
 80326e8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80326ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80326f0:	e746      	b.n	8032580 <__ieee754_powf+0xa8>
 80326f2:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80326f6:	bf01      	itttt	eq
 80326f8:	eddf 7a68 	vldreq	s15, [pc, #416]	; 803289c <__ieee754_powf+0x3c4>
 80326fc:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8032700:	f06f 0217 	mvneq.w	r2, #23
 8032704:	ee17 4a90 	vmoveq	r4, s15
 8032708:	ea4f 53e4 	mov.w	r3, r4, asr #23
 803270c:	bf18      	it	ne
 803270e:	2200      	movne	r2, #0
 8032710:	3b7f      	subs	r3, #127	; 0x7f
 8032712:	4413      	add	r3, r2
 8032714:	4a62      	ldr	r2, [pc, #392]	; (80328a0 <__ieee754_powf+0x3c8>)
 8032716:	f3c4 0416 	ubfx	r4, r4, #0, #23
 803271a:	4294      	cmp	r4, r2
 803271c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8032720:	dd06      	ble.n	8032730 <__ieee754_powf+0x258>
 8032722:	4a60      	ldr	r2, [pc, #384]	; (80328a4 <__ieee754_powf+0x3cc>)
 8032724:	4294      	cmp	r4, r2
 8032726:	f340 80a4 	ble.w	8032872 <__ieee754_powf+0x39a>
 803272a:	3301      	adds	r3, #1
 803272c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8032730:	2400      	movs	r4, #0
 8032732:	4a5d      	ldr	r2, [pc, #372]	; (80328a8 <__ieee754_powf+0x3d0>)
 8032734:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8032738:	ee07 1a90 	vmov	s15, r1
 803273c:	ed92 7a00 	vldr	s14, [r2]
 8032740:	4a5a      	ldr	r2, [pc, #360]	; (80328ac <__ieee754_powf+0x3d4>)
 8032742:	ee37 6a27 	vadd.f32	s12, s14, s15
 8032746:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 803274a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 803274e:	1049      	asrs	r1, r1, #1
 8032750:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8032754:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8032758:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 803275c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8032760:	ee06 1a10 	vmov	s12, r1
 8032764:	ee65 4a26 	vmul.f32	s9, s10, s13
 8032768:	ee36 7a47 	vsub.f32	s14, s12, s14
 803276c:	ee14 7a90 	vmov	r7, s9
 8032770:	4017      	ands	r7, r2
 8032772:	ee05 7a90 	vmov	s11, r7
 8032776:	eea5 5ac6 	vfms.f32	s10, s11, s12
 803277a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 803277e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80328b0 <__ieee754_powf+0x3d8>
 8032782:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8032786:	ee64 7aa4 	vmul.f32	s15, s9, s9
 803278a:	ee25 6a26 	vmul.f32	s12, s10, s13
 803278e:	eddf 6a49 	vldr	s13, [pc, #292]	; 80328b4 <__ieee754_powf+0x3dc>
 8032792:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8032796:	eddf 6a48 	vldr	s13, [pc, #288]	; 80328b8 <__ieee754_powf+0x3e0>
 803279a:	eee7 6a27 	vfma.f32	s13, s14, s15
 803279e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 803288c <__ieee754_powf+0x3b4>
 80327a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80327a6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80328bc <__ieee754_powf+0x3e4>
 80327aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80327ae:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80328c0 <__ieee754_powf+0x3e8>
 80327b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80327b6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80327ba:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80327be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80327c2:	eee5 6a07 	vfma.f32	s13, s10, s14
 80327c6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80327ca:	eef0 7a45 	vmov.f32	s15, s10
 80327ce:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80327d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80327d6:	ee17 1a90 	vmov	r1, s15
 80327da:	4011      	ands	r1, r2
 80327dc:	ee07 1a90 	vmov	s15, r1
 80327e0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80327e4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80327e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80327ec:	ee27 7a24 	vmul.f32	s14, s14, s9
 80327f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80327f4:	eeb0 6a47 	vmov.f32	s12, s14
 80327f8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80327fc:	ee16 1a10 	vmov	r1, s12
 8032800:	4011      	ands	r1, r2
 8032802:	ee06 1a90 	vmov	s13, r1
 8032806:	eee5 6ae7 	vfms.f32	s13, s11, s15
 803280a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80328c4 <__ieee754_powf+0x3ec>
 803280e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80328c8 <__ieee754_powf+0x3f0>
 8032812:	ee37 7a66 	vsub.f32	s14, s14, s13
 8032816:	ee06 1a10 	vmov	s12, r1
 803281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 803281e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80328cc <__ieee754_powf+0x3f4>
 8032822:	492b      	ldr	r1, [pc, #172]	; (80328d0 <__ieee754_powf+0x3f8>)
 8032824:	eea6 7a27 	vfma.f32	s14, s12, s15
 8032828:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 803282c:	edd1 7a00 	vldr	s15, [r1]
 8032830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8032834:	ee07 3a90 	vmov	s15, r3
 8032838:	4b26      	ldr	r3, [pc, #152]	; (80328d4 <__ieee754_powf+0x3fc>)
 803283a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 803283e:	eef0 7a47 	vmov.f32	s15, s14
 8032842:	eee6 7a25 	vfma.f32	s15, s12, s11
 8032846:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803284a:	edd4 0a00 	vldr	s1, [r4]
 803284e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8032852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032856:	ee17 3a90 	vmov	r3, s15
 803285a:	4013      	ands	r3, r2
 803285c:	ee07 3a90 	vmov	s15, r3
 8032860:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8032864:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8032868:	eee6 6a65 	vfms.f32	s13, s12, s11
 803286c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8032870:	e70f      	b.n	8032692 <__ieee754_powf+0x1ba>
 8032872:	2401      	movs	r4, #1
 8032874:	e75d      	b.n	8032732 <__ieee754_powf+0x25a>
 8032876:	bf00      	nop
 8032878:	0803a26a 	.word	0x0803a26a
 803287c:	00000000 	.word	0x00000000
 8032880:	3f7ffff7 	.word	0x3f7ffff7
 8032884:	7149f2ca 	.word	0x7149f2ca
 8032888:	3f800007 	.word	0x3f800007
 803288c:	3eaaaaab 	.word	0x3eaaaaab
 8032890:	3fb8aa3b 	.word	0x3fb8aa3b
 8032894:	36eca570 	.word	0x36eca570
 8032898:	3fb8aa00 	.word	0x3fb8aa00
 803289c:	4b800000 	.word	0x4b800000
 80328a0:	001cc471 	.word	0x001cc471
 80328a4:	005db3d6 	.word	0x005db3d6
 80328a8:	0803a4e0 	.word	0x0803a4e0
 80328ac:	fffff000 	.word	0xfffff000
 80328b0:	3e6c3255 	.word	0x3e6c3255
 80328b4:	3e53f142 	.word	0x3e53f142
 80328b8:	3e8ba305 	.word	0x3e8ba305
 80328bc:	3edb6db7 	.word	0x3edb6db7
 80328c0:	3f19999a 	.word	0x3f19999a
 80328c4:	3f76384f 	.word	0x3f76384f
 80328c8:	3f763800 	.word	0x3f763800
 80328cc:	369dc3a0 	.word	0x369dc3a0
 80328d0:	0803a4f0 	.word	0x0803a4f0
 80328d4:	0803a4e8 	.word	0x0803a4e8
 80328d8:	3338aa3c 	.word	0x3338aa3c
 80328dc:	f040 8092 	bne.w	8032a04 <__ieee754_powf+0x52c>
 80328e0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80328d8 <__ieee754_powf+0x400>
 80328e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80328e8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80328ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 80328f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80328f4:	f73f aef6 	bgt.w	80326e4 <__ieee754_powf+0x20c>
 80328f8:	15db      	asrs	r3, r3, #23
 80328fa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80328fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8032902:	4103      	asrs	r3, r0
 8032904:	4423      	add	r3, r4
 8032906:	4949      	ldr	r1, [pc, #292]	; (8032a2c <__ieee754_powf+0x554>)
 8032908:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 803290c:	3a7f      	subs	r2, #127	; 0x7f
 803290e:	4111      	asrs	r1, r2
 8032910:	ea23 0101 	bic.w	r1, r3, r1
 8032914:	ee07 1a10 	vmov	s14, r1
 8032918:	f3c3 0016 	ubfx	r0, r3, #0, #23
 803291c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8032920:	f1c2 0217 	rsb	r2, r2, #23
 8032924:	4110      	asrs	r0, r2
 8032926:	2c00      	cmp	r4, #0
 8032928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 803292c:	bfb8      	it	lt
 803292e:	4240      	neglt	r0, r0
 8032930:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8032934:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8032a30 <__ieee754_powf+0x558>
 8032938:	ee17 3a10 	vmov	r3, s14
 803293c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8032940:	f023 030f 	bic.w	r3, r3, #15
 8032944:	ee07 3a10 	vmov	s14, r3
 8032948:	ee77 7a67 	vsub.f32	s15, s14, s15
 803294c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8032950:	eddf 7a38 	vldr	s15, [pc, #224]	; 8032a34 <__ieee754_powf+0x55c>
 8032954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032958:	eee0 7aa6 	vfma.f32	s15, s1, s13
 803295c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8032a38 <__ieee754_powf+0x560>
 8032960:	eeb0 0a67 	vmov.f32	s0, s15
 8032964:	eea7 0a26 	vfma.f32	s0, s14, s13
 8032968:	eeb0 6a40 	vmov.f32	s12, s0
 803296c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8032970:	ee20 7a00 	vmul.f32	s14, s0, s0
 8032974:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8032978:	eddf 6a30 	vldr	s13, [pc, #192]	; 8032a3c <__ieee754_powf+0x564>
 803297c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8032a40 <__ieee754_powf+0x568>
 8032980:	eea7 6a26 	vfma.f32	s12, s14, s13
 8032984:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8032a44 <__ieee754_powf+0x56c>
 8032988:	eee6 6a07 	vfma.f32	s13, s12, s14
 803298c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8032a48 <__ieee754_powf+0x570>
 8032990:	eea6 6a87 	vfma.f32	s12, s13, s14
 8032994:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8032a4c <__ieee754_powf+0x574>
 8032998:	eee6 6a07 	vfma.f32	s13, s12, s14
 803299c:	eeb0 6a40 	vmov.f32	s12, s0
 80329a0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80329a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80329a8:	eeb0 7a46 	vmov.f32	s14, s12
 80329ac:	ee77 6a66 	vsub.f32	s13, s14, s13
 80329b0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80329b4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80329b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80329bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80329c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80329c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80329c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80329cc:	ee10 3a10 	vmov	r3, s0
 80329d0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80329d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80329d8:	da1a      	bge.n	8032a10 <__ieee754_powf+0x538>
 80329da:	f000 fd1f 	bl	803341c <scalbnf>
 80329de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80329e2:	e5cd      	b.n	8032580 <__ieee754_powf+0xa8>
 80329e4:	4a1a      	ldr	r2, [pc, #104]	; (8032a50 <__ieee754_powf+0x578>)
 80329e6:	4293      	cmp	r3, r2
 80329e8:	dd02      	ble.n	80329f0 <__ieee754_powf+0x518>
 80329ea:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8032a54 <__ieee754_powf+0x57c>
 80329ee:	e67b      	b.n	80326e8 <__ieee754_powf+0x210>
 80329f0:	d108      	bne.n	8032a04 <__ieee754_powf+0x52c>
 80329f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80329f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80329fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80329fe:	f6ff af7b 	blt.w	80328f8 <__ieee754_powf+0x420>
 8032a02:	e7f2      	b.n	80329ea <__ieee754_powf+0x512>
 8032a04:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8032a08:	f73f af76 	bgt.w	80328f8 <__ieee754_powf+0x420>
 8032a0c:	2000      	movs	r0, #0
 8032a0e:	e78f      	b.n	8032930 <__ieee754_powf+0x458>
 8032a10:	ee00 3a10 	vmov	s0, r3
 8032a14:	e7e3      	b.n	80329de <__ieee754_powf+0x506>
 8032a16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8032a1a:	e5b1      	b.n	8032580 <__ieee754_powf+0xa8>
 8032a1c:	eeb0 0a68 	vmov.f32	s0, s17
 8032a20:	e5ae      	b.n	8032580 <__ieee754_powf+0xa8>
 8032a22:	eeb0 0a48 	vmov.f32	s0, s16
 8032a26:	e5ab      	b.n	8032580 <__ieee754_powf+0xa8>
 8032a28:	2600      	movs	r6, #0
 8032a2a:	e590      	b.n	803254e <__ieee754_powf+0x76>
 8032a2c:	007fffff 	.word	0x007fffff
 8032a30:	3f317218 	.word	0x3f317218
 8032a34:	35bfbe8c 	.word	0x35bfbe8c
 8032a38:	3f317200 	.word	0x3f317200
 8032a3c:	3331bb4c 	.word	0x3331bb4c
 8032a40:	b5ddea0e 	.word	0xb5ddea0e
 8032a44:	388ab355 	.word	0x388ab355
 8032a48:	bb360b61 	.word	0xbb360b61
 8032a4c:	3e2aaaab 	.word	0x3e2aaaab
 8032a50:	43160000 	.word	0x43160000
 8032a54:	0da24260 	.word	0x0da24260

08032a58 <__ieee754_rem_pio2f>:
 8032a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032a5a:	ee10 6a10 	vmov	r6, s0
 8032a5e:	4b8e      	ldr	r3, [pc, #568]	; (8032c98 <__ieee754_rem_pio2f+0x240>)
 8032a60:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8032a64:	429d      	cmp	r5, r3
 8032a66:	b087      	sub	sp, #28
 8032a68:	eef0 7a40 	vmov.f32	s15, s0
 8032a6c:	4604      	mov	r4, r0
 8032a6e:	dc05      	bgt.n	8032a7c <__ieee754_rem_pio2f+0x24>
 8032a70:	2300      	movs	r3, #0
 8032a72:	ed80 0a00 	vstr	s0, [r0]
 8032a76:	6043      	str	r3, [r0, #4]
 8032a78:	2000      	movs	r0, #0
 8032a7a:	e01a      	b.n	8032ab2 <__ieee754_rem_pio2f+0x5a>
 8032a7c:	4b87      	ldr	r3, [pc, #540]	; (8032c9c <__ieee754_rem_pio2f+0x244>)
 8032a7e:	429d      	cmp	r5, r3
 8032a80:	dc46      	bgt.n	8032b10 <__ieee754_rem_pio2f+0xb8>
 8032a82:	2e00      	cmp	r6, #0
 8032a84:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8032ca0 <__ieee754_rem_pio2f+0x248>
 8032a88:	4b86      	ldr	r3, [pc, #536]	; (8032ca4 <__ieee754_rem_pio2f+0x24c>)
 8032a8a:	f025 050f 	bic.w	r5, r5, #15
 8032a8e:	dd1f      	ble.n	8032ad0 <__ieee754_rem_pio2f+0x78>
 8032a90:	429d      	cmp	r5, r3
 8032a92:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8032a96:	d00e      	beq.n	8032ab6 <__ieee754_rem_pio2f+0x5e>
 8032a98:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8032ca8 <__ieee754_rem_pio2f+0x250>
 8032a9c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8032aa0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8032aa4:	ed80 0a00 	vstr	s0, [r0]
 8032aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8032aac:	2001      	movs	r0, #1
 8032aae:	edc4 7a01 	vstr	s15, [r4, #4]
 8032ab2:	b007      	add	sp, #28
 8032ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032ab6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8032cac <__ieee754_rem_pio2f+0x254>
 8032aba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8032cb0 <__ieee754_rem_pio2f+0x258>
 8032abe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8032ac2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8032ac6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8032aca:	edc0 6a00 	vstr	s13, [r0]
 8032ace:	e7eb      	b.n	8032aa8 <__ieee754_rem_pio2f+0x50>
 8032ad0:	429d      	cmp	r5, r3
 8032ad2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8032ad6:	d00e      	beq.n	8032af6 <__ieee754_rem_pio2f+0x9e>
 8032ad8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8032ca8 <__ieee754_rem_pio2f+0x250>
 8032adc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8032ae0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8032ae4:	ed80 0a00 	vstr	s0, [r0]
 8032ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8032aec:	f04f 30ff 	mov.w	r0, #4294967295
 8032af0:	edc4 7a01 	vstr	s15, [r4, #4]
 8032af4:	e7dd      	b.n	8032ab2 <__ieee754_rem_pio2f+0x5a>
 8032af6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8032cac <__ieee754_rem_pio2f+0x254>
 8032afa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8032cb0 <__ieee754_rem_pio2f+0x258>
 8032afe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8032b02:	ee77 6a87 	vadd.f32	s13, s15, s14
 8032b06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8032b0a:	edc0 6a00 	vstr	s13, [r0]
 8032b0e:	e7eb      	b.n	8032ae8 <__ieee754_rem_pio2f+0x90>
 8032b10:	4b68      	ldr	r3, [pc, #416]	; (8032cb4 <__ieee754_rem_pio2f+0x25c>)
 8032b12:	429d      	cmp	r5, r3
 8032b14:	dc72      	bgt.n	8032bfc <__ieee754_rem_pio2f+0x1a4>
 8032b16:	f7ff fa69 	bl	8031fec <fabsf>
 8032b1a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8032cb8 <__ieee754_rem_pio2f+0x260>
 8032b1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8032b22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8032b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8032b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8032b2e:	ee17 0a90 	vmov	r0, s15
 8032b32:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8032ca0 <__ieee754_rem_pio2f+0x248>
 8032b36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8032b3a:	281f      	cmp	r0, #31
 8032b3c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8032ca8 <__ieee754_rem_pio2f+0x250>
 8032b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b44:	eeb1 6a47 	vneg.f32	s12, s14
 8032b48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8032b4c:	ee16 2a90 	vmov	r2, s13
 8032b50:	dc1c      	bgt.n	8032b8c <__ieee754_rem_pio2f+0x134>
 8032b52:	495a      	ldr	r1, [pc, #360]	; (8032cbc <__ieee754_rem_pio2f+0x264>)
 8032b54:	1e47      	subs	r7, r0, #1
 8032b56:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8032b5a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8032b5e:	428b      	cmp	r3, r1
 8032b60:	d014      	beq.n	8032b8c <__ieee754_rem_pio2f+0x134>
 8032b62:	6022      	str	r2, [r4, #0]
 8032b64:	ed94 7a00 	vldr	s14, [r4]
 8032b68:	ee30 0a47 	vsub.f32	s0, s0, s14
 8032b6c:	2e00      	cmp	r6, #0
 8032b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8032b72:	ed84 0a01 	vstr	s0, [r4, #4]
 8032b76:	da9c      	bge.n	8032ab2 <__ieee754_rem_pio2f+0x5a>
 8032b78:	eeb1 7a47 	vneg.f32	s14, s14
 8032b7c:	eeb1 0a40 	vneg.f32	s0, s0
 8032b80:	ed84 7a00 	vstr	s14, [r4]
 8032b84:	ed84 0a01 	vstr	s0, [r4, #4]
 8032b88:	4240      	negs	r0, r0
 8032b8a:	e792      	b.n	8032ab2 <__ieee754_rem_pio2f+0x5a>
 8032b8c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8032b90:	15eb      	asrs	r3, r5, #23
 8032b92:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8032b96:	2d08      	cmp	r5, #8
 8032b98:	dde3      	ble.n	8032b62 <__ieee754_rem_pio2f+0x10a>
 8032b9a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8032cac <__ieee754_rem_pio2f+0x254>
 8032b9e:	eef0 6a40 	vmov.f32	s13, s0
 8032ba2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8032ba6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8032baa:	eea6 0a27 	vfma.f32	s0, s12, s15
 8032bae:	eddf 7a40 	vldr	s15, [pc, #256]	; 8032cb0 <__ieee754_rem_pio2f+0x258>
 8032bb2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8032bb6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8032bba:	eef0 7a40 	vmov.f32	s15, s0
 8032bbe:	ee15 2a90 	vmov	r2, s11
 8032bc2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8032bc6:	1a5b      	subs	r3, r3, r1
 8032bc8:	2b19      	cmp	r3, #25
 8032bca:	dc04      	bgt.n	8032bd6 <__ieee754_rem_pio2f+0x17e>
 8032bcc:	edc4 5a00 	vstr	s11, [r4]
 8032bd0:	eeb0 0a66 	vmov.f32	s0, s13
 8032bd4:	e7c6      	b.n	8032b64 <__ieee754_rem_pio2f+0x10c>
 8032bd6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8032cc0 <__ieee754_rem_pio2f+0x268>
 8032bda:	eeb0 0a66 	vmov.f32	s0, s13
 8032bde:	eea6 0a25 	vfma.f32	s0, s12, s11
 8032be2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8032be6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8032cc4 <__ieee754_rem_pio2f+0x26c>
 8032bea:	eee6 7a25 	vfma.f32	s15, s12, s11
 8032bee:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8032bf2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8032bf6:	ed84 7a00 	vstr	s14, [r4]
 8032bfa:	e7b3      	b.n	8032b64 <__ieee754_rem_pio2f+0x10c>
 8032bfc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8032c00:	db06      	blt.n	8032c10 <__ieee754_rem_pio2f+0x1b8>
 8032c02:	ee70 7a40 	vsub.f32	s15, s0, s0
 8032c06:	edc0 7a01 	vstr	s15, [r0, #4]
 8032c0a:	edc0 7a00 	vstr	s15, [r0]
 8032c0e:	e733      	b.n	8032a78 <__ieee754_rem_pio2f+0x20>
 8032c10:	15ea      	asrs	r2, r5, #23
 8032c12:	3a86      	subs	r2, #134	; 0x86
 8032c14:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8032c18:	ee07 3a90 	vmov	s15, r3
 8032c1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8032c20:	eddf 6a29 	vldr	s13, [pc, #164]	; 8032cc8 <__ieee754_rem_pio2f+0x270>
 8032c24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8032c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8032c2c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8032c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8032c34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8032c38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8032c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8032c40:	ed8d 7a04 	vstr	s14, [sp, #16]
 8032c44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8032c48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8032c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032c50:	edcd 7a05 	vstr	s15, [sp, #20]
 8032c54:	d11e      	bne.n	8032c94 <__ieee754_rem_pio2f+0x23c>
 8032c56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8032c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032c5e:	bf14      	ite	ne
 8032c60:	2302      	movne	r3, #2
 8032c62:	2301      	moveq	r3, #1
 8032c64:	4919      	ldr	r1, [pc, #100]	; (8032ccc <__ieee754_rem_pio2f+0x274>)
 8032c66:	9101      	str	r1, [sp, #4]
 8032c68:	2102      	movs	r1, #2
 8032c6a:	9100      	str	r1, [sp, #0]
 8032c6c:	a803      	add	r0, sp, #12
 8032c6e:	4621      	mov	r1, r4
 8032c70:	f000 f892 	bl	8032d98 <__kernel_rem_pio2f>
 8032c74:	2e00      	cmp	r6, #0
 8032c76:	f6bf af1c 	bge.w	8032ab2 <__ieee754_rem_pio2f+0x5a>
 8032c7a:	edd4 7a00 	vldr	s15, [r4]
 8032c7e:	eef1 7a67 	vneg.f32	s15, s15
 8032c82:	edc4 7a00 	vstr	s15, [r4]
 8032c86:	edd4 7a01 	vldr	s15, [r4, #4]
 8032c8a:	eef1 7a67 	vneg.f32	s15, s15
 8032c8e:	edc4 7a01 	vstr	s15, [r4, #4]
 8032c92:	e779      	b.n	8032b88 <__ieee754_rem_pio2f+0x130>
 8032c94:	2303      	movs	r3, #3
 8032c96:	e7e5      	b.n	8032c64 <__ieee754_rem_pio2f+0x20c>
 8032c98:	3f490fd8 	.word	0x3f490fd8
 8032c9c:	4016cbe3 	.word	0x4016cbe3
 8032ca0:	3fc90f80 	.word	0x3fc90f80
 8032ca4:	3fc90fd0 	.word	0x3fc90fd0
 8032ca8:	37354443 	.word	0x37354443
 8032cac:	37354400 	.word	0x37354400
 8032cb0:	2e85a308 	.word	0x2e85a308
 8032cb4:	43490f80 	.word	0x43490f80
 8032cb8:	3f22f984 	.word	0x3f22f984
 8032cbc:	0803a4f8 	.word	0x0803a4f8
 8032cc0:	2e85a300 	.word	0x2e85a300
 8032cc4:	248d3132 	.word	0x248d3132
 8032cc8:	43800000 	.word	0x43800000
 8032ccc:	0803a578 	.word	0x0803a578

08032cd0 <__ieee754_sqrtf>:
 8032cd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8032cd4:	4770      	bx	lr
	...

08032cd8 <__kernel_cosf>:
 8032cd8:	ee10 3a10 	vmov	r3, s0
 8032cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8032ce0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8032ce4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8032ce8:	da05      	bge.n	8032cf6 <__kernel_cosf+0x1e>
 8032cea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8032cee:	ee17 2a90 	vmov	r2, s15
 8032cf2:	2a00      	cmp	r2, #0
 8032cf4:	d03d      	beq.n	8032d72 <__kernel_cosf+0x9a>
 8032cf6:	ee60 5a00 	vmul.f32	s11, s0, s0
 8032cfa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8032d78 <__kernel_cosf+0xa0>
 8032cfe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8032d7c <__kernel_cosf+0xa4>
 8032d02:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8032d80 <__kernel_cosf+0xa8>
 8032d06:	4a1f      	ldr	r2, [pc, #124]	; (8032d84 <__kernel_cosf+0xac>)
 8032d08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8032d0c:	4293      	cmp	r3, r2
 8032d0e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8032d88 <__kernel_cosf+0xb0>
 8032d12:	eee7 7a25 	vfma.f32	s15, s14, s11
 8032d16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8032d8c <__kernel_cosf+0xb4>
 8032d1a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8032d1e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8032d90 <__kernel_cosf+0xb8>
 8032d22:	eee7 7a25 	vfma.f32	s15, s14, s11
 8032d26:	eeb0 7a66 	vmov.f32	s14, s13
 8032d2a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8032d2e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8032d32:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8032d36:	ee67 6a25 	vmul.f32	s13, s14, s11
 8032d3a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8032d3e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8032d42:	dc04      	bgt.n	8032d4e <__kernel_cosf+0x76>
 8032d44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8032d48:	ee36 0a47 	vsub.f32	s0, s12, s14
 8032d4c:	4770      	bx	lr
 8032d4e:	4a11      	ldr	r2, [pc, #68]	; (8032d94 <__kernel_cosf+0xbc>)
 8032d50:	4293      	cmp	r3, r2
 8032d52:	bfda      	itte	le
 8032d54:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8032d58:	ee06 3a90 	vmovle	s13, r3
 8032d5c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8032d60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8032d64:	ee36 0a66 	vsub.f32	s0, s12, s13
 8032d68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8032d6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8032d70:	4770      	bx	lr
 8032d72:	eeb0 0a46 	vmov.f32	s0, s12
 8032d76:	4770      	bx	lr
 8032d78:	ad47d74e 	.word	0xad47d74e
 8032d7c:	310f74f6 	.word	0x310f74f6
 8032d80:	3d2aaaab 	.word	0x3d2aaaab
 8032d84:	3e999999 	.word	0x3e999999
 8032d88:	b493f27c 	.word	0xb493f27c
 8032d8c:	37d00d01 	.word	0x37d00d01
 8032d90:	bab60b61 	.word	0xbab60b61
 8032d94:	3f480000 	.word	0x3f480000

08032d98 <__kernel_rem_pio2f>:
 8032d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032d9c:	ed2d 8b04 	vpush	{d8-d9}
 8032da0:	b0d7      	sub	sp, #348	; 0x15c
 8032da2:	4616      	mov	r6, r2
 8032da4:	4698      	mov	r8, r3
 8032da6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8032da8:	4bbb      	ldr	r3, [pc, #748]	; (8033098 <__kernel_rem_pio2f+0x300>)
 8032daa:	9001      	str	r0, [sp, #4]
 8032dac:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8032db0:	1d33      	adds	r3, r6, #4
 8032db2:	460d      	mov	r5, r1
 8032db4:	f108 39ff 	add.w	r9, r8, #4294967295
 8032db8:	db29      	blt.n	8032e0e <__kernel_rem_pio2f+0x76>
 8032dba:	1ef1      	subs	r1, r6, #3
 8032dbc:	bf48      	it	mi
 8032dbe:	1d31      	addmi	r1, r6, #4
 8032dc0:	10c9      	asrs	r1, r1, #3
 8032dc2:	1c4c      	adds	r4, r1, #1
 8032dc4:	00e3      	lsls	r3, r4, #3
 8032dc6:	9302      	str	r3, [sp, #8]
 8032dc8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8032dca:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80330a8 <__kernel_rem_pio2f+0x310>
 8032dce:	eba1 0009 	sub.w	r0, r1, r9
 8032dd2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8032dd6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8032dda:	eb07 0c09 	add.w	ip, r7, r9
 8032dde:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8032de2:	2300      	movs	r3, #0
 8032de4:	4563      	cmp	r3, ip
 8032de6:	dd14      	ble.n	8032e12 <__kernel_rem_pio2f+0x7a>
 8032de8:	ab1a      	add	r3, sp, #104	; 0x68
 8032dea:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8032dee:	46cc      	mov	ip, r9
 8032df0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8032df4:	f1c8 0b01 	rsb	fp, r8, #1
 8032df8:	eb0b 020c 	add.w	r2, fp, ip
 8032dfc:	4297      	cmp	r7, r2
 8032dfe:	db27      	blt.n	8032e50 <__kernel_rem_pio2f+0xb8>
 8032e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8032e04:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80330a8 <__kernel_rem_pio2f+0x310>
 8032e08:	4618      	mov	r0, r3
 8032e0a:	2200      	movs	r2, #0
 8032e0c:	e016      	b.n	8032e3c <__kernel_rem_pio2f+0xa4>
 8032e0e:	2100      	movs	r1, #0
 8032e10:	e7d7      	b.n	8032dc2 <__kernel_rem_pio2f+0x2a>
 8032e12:	42d8      	cmn	r0, r3
 8032e14:	bf5d      	ittte	pl
 8032e16:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8032e1a:	ee07 2a90 	vmovpl	s15, r2
 8032e1e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8032e22:	eef0 7a47 	vmovmi.f32	s15, s14
 8032e26:	ecea 7a01 	vstmia	sl!, {s15}
 8032e2a:	3301      	adds	r3, #1
 8032e2c:	e7da      	b.n	8032de4 <__kernel_rem_pio2f+0x4c>
 8032e2e:	ecfe 6a01 	vldmia	lr!, {s13}
 8032e32:	ed90 7a00 	vldr	s14, [r0]
 8032e36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8032e3a:	3201      	adds	r2, #1
 8032e3c:	454a      	cmp	r2, r9
 8032e3e:	f1a0 0004 	sub.w	r0, r0, #4
 8032e42:	ddf4      	ble.n	8032e2e <__kernel_rem_pio2f+0x96>
 8032e44:	ecea 7a01 	vstmia	sl!, {s15}
 8032e48:	3304      	adds	r3, #4
 8032e4a:	f10c 0c01 	add.w	ip, ip, #1
 8032e4e:	e7d3      	b.n	8032df8 <__kernel_rem_pio2f+0x60>
 8032e50:	ab06      	add	r3, sp, #24
 8032e52:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8032e56:	9304      	str	r3, [sp, #16]
 8032e58:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8032e5a:	eddf 8a92 	vldr	s17, [pc, #584]	; 80330a4 <__kernel_rem_pio2f+0x30c>
 8032e5e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80330a0 <__kernel_rem_pio2f+0x308>
 8032e62:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8032e66:	9303      	str	r3, [sp, #12]
 8032e68:	46ba      	mov	sl, r7
 8032e6a:	ab56      	add	r3, sp, #344	; 0x158
 8032e6c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8032e70:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8032e74:	ab06      	add	r3, sp, #24
 8032e76:	4618      	mov	r0, r3
 8032e78:	4652      	mov	r2, sl
 8032e7a:	2a00      	cmp	r2, #0
 8032e7c:	dc51      	bgt.n	8032f22 <__kernel_rem_pio2f+0x18a>
 8032e7e:	4620      	mov	r0, r4
 8032e80:	9305      	str	r3, [sp, #20]
 8032e82:	f000 facb 	bl	803341c <scalbnf>
 8032e86:	eeb0 8a40 	vmov.f32	s16, s0
 8032e8a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8032e8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8032e92:	f7ff f8b3 	bl	8031ffc <floorf>
 8032e96:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8032e9a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8032e9e:	2c00      	cmp	r4, #0
 8032ea0:	9b05      	ldr	r3, [sp, #20]
 8032ea2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8032ea6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8032eaa:	edcd 7a00 	vstr	s15, [sp]
 8032eae:	ee38 8a40 	vsub.f32	s16, s16, s0
 8032eb2:	dd4b      	ble.n	8032f4c <__kernel_rem_pio2f+0x1b4>
 8032eb4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8032eb8:	aa06      	add	r2, sp, #24
 8032eba:	f1c4 0e08 	rsb	lr, r4, #8
 8032ebe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8032ec2:	ee17 1a90 	vmov	r1, s15
 8032ec6:	fa42 f00e 	asr.w	r0, r2, lr
 8032eca:	4401      	add	r1, r0
 8032ecc:	9100      	str	r1, [sp, #0]
 8032ece:	fa00 f00e 	lsl.w	r0, r0, lr
 8032ed2:	a906      	add	r1, sp, #24
 8032ed4:	1a12      	subs	r2, r2, r0
 8032ed6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8032eda:	f1c4 0007 	rsb	r0, r4, #7
 8032ede:	fa42 fb00 	asr.w	fp, r2, r0
 8032ee2:	f1bb 0f00 	cmp.w	fp, #0
 8032ee6:	dd43      	ble.n	8032f70 <__kernel_rem_pio2f+0x1d8>
 8032ee8:	9a00      	ldr	r2, [sp, #0]
 8032eea:	f04f 0e00 	mov.w	lr, #0
 8032eee:	3201      	adds	r2, #1
 8032ef0:	9200      	str	r2, [sp, #0]
 8032ef2:	4670      	mov	r0, lr
 8032ef4:	45f2      	cmp	sl, lr
 8032ef6:	dc6c      	bgt.n	8032fd2 <__kernel_rem_pio2f+0x23a>
 8032ef8:	2c00      	cmp	r4, #0
 8032efa:	dd04      	ble.n	8032f06 <__kernel_rem_pio2f+0x16e>
 8032efc:	2c01      	cmp	r4, #1
 8032efe:	d079      	beq.n	8032ff4 <__kernel_rem_pio2f+0x25c>
 8032f00:	2c02      	cmp	r4, #2
 8032f02:	f000 8082 	beq.w	803300a <__kernel_rem_pio2f+0x272>
 8032f06:	f1bb 0f02 	cmp.w	fp, #2
 8032f0a:	d131      	bne.n	8032f70 <__kernel_rem_pio2f+0x1d8>
 8032f0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8032f10:	ee30 8a48 	vsub.f32	s16, s0, s16
 8032f14:	b360      	cbz	r0, 8032f70 <__kernel_rem_pio2f+0x1d8>
 8032f16:	4620      	mov	r0, r4
 8032f18:	f000 fa80 	bl	803341c <scalbnf>
 8032f1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8032f20:	e026      	b.n	8032f70 <__kernel_rem_pio2f+0x1d8>
 8032f22:	ee60 7a28 	vmul.f32	s15, s0, s17
 8032f26:	3a01      	subs	r2, #1
 8032f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8032f2c:	a942      	add	r1, sp, #264	; 0x108
 8032f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8032f32:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8032f36:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8032f3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8032f3e:	eca0 0a01 	vstmia	r0!, {s0}
 8032f42:	ed9c 0a00 	vldr	s0, [ip]
 8032f46:	ee37 0a80 	vadd.f32	s0, s15, s0
 8032f4a:	e796      	b.n	8032e7a <__kernel_rem_pio2f+0xe2>
 8032f4c:	d107      	bne.n	8032f5e <__kernel_rem_pio2f+0x1c6>
 8032f4e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8032f52:	a906      	add	r1, sp, #24
 8032f54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8032f58:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8032f5c:	e7c1      	b.n	8032ee2 <__kernel_rem_pio2f+0x14a>
 8032f5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8032f62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8032f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032f6a:	da2f      	bge.n	8032fcc <__kernel_rem_pio2f+0x234>
 8032f6c:	f04f 0b00 	mov.w	fp, #0
 8032f70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8032f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8032f78:	f040 8098 	bne.w	80330ac <__kernel_rem_pio2f+0x314>
 8032f7c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8032f80:	469c      	mov	ip, r3
 8032f82:	2200      	movs	r2, #0
 8032f84:	45bc      	cmp	ip, r7
 8032f86:	da48      	bge.n	803301a <__kernel_rem_pio2f+0x282>
 8032f88:	2a00      	cmp	r2, #0
 8032f8a:	d05f      	beq.n	803304c <__kernel_rem_pio2f+0x2b4>
 8032f8c:	aa06      	add	r2, sp, #24
 8032f8e:	3c08      	subs	r4, #8
 8032f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8032f94:	2900      	cmp	r1, #0
 8032f96:	d07d      	beq.n	8033094 <__kernel_rem_pio2f+0x2fc>
 8032f98:	4620      	mov	r0, r4
 8032f9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8032f9e:	9301      	str	r3, [sp, #4]
 8032fa0:	f000 fa3c 	bl	803341c <scalbnf>
 8032fa4:	9b01      	ldr	r3, [sp, #4]
 8032fa6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80330a4 <__kernel_rem_pio2f+0x30c>
 8032faa:	4619      	mov	r1, r3
 8032fac:	2900      	cmp	r1, #0
 8032fae:	f280 80af 	bge.w	8033110 <__kernel_rem_pio2f+0x378>
 8032fb2:	4618      	mov	r0, r3
 8032fb4:	2400      	movs	r4, #0
 8032fb6:	2800      	cmp	r0, #0
 8032fb8:	f2c0 80d0 	blt.w	803315c <__kernel_rem_pio2f+0x3c4>
 8032fbc:	a942      	add	r1, sp, #264	; 0x108
 8032fbe:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8032fc2:	4a36      	ldr	r2, [pc, #216]	; (803309c <__kernel_rem_pio2f+0x304>)
 8032fc4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80330a8 <__kernel_rem_pio2f+0x310>
 8032fc8:	2100      	movs	r1, #0
 8032fca:	e0bb      	b.n	8033144 <__kernel_rem_pio2f+0x3ac>
 8032fcc:	f04f 0b02 	mov.w	fp, #2
 8032fd0:	e78a      	b.n	8032ee8 <__kernel_rem_pio2f+0x150>
 8032fd2:	681a      	ldr	r2, [r3, #0]
 8032fd4:	b948      	cbnz	r0, 8032fea <__kernel_rem_pio2f+0x252>
 8032fd6:	b11a      	cbz	r2, 8032fe0 <__kernel_rem_pio2f+0x248>
 8032fd8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8032fdc:	601a      	str	r2, [r3, #0]
 8032fde:	2201      	movs	r2, #1
 8032fe0:	f10e 0e01 	add.w	lr, lr, #1
 8032fe4:	3304      	adds	r3, #4
 8032fe6:	4610      	mov	r0, r2
 8032fe8:	e784      	b.n	8032ef4 <__kernel_rem_pio2f+0x15c>
 8032fea:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8032fee:	601a      	str	r2, [r3, #0]
 8032ff0:	4602      	mov	r2, r0
 8032ff2:	e7f5      	b.n	8032fe0 <__kernel_rem_pio2f+0x248>
 8032ff4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8032ff8:	ab06      	add	r3, sp, #24
 8032ffa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8032ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8033002:	aa06      	add	r2, sp, #24
 8033004:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8033008:	e77d      	b.n	8032f06 <__kernel_rem_pio2f+0x16e>
 803300a:	f10a 3cff 	add.w	ip, sl, #4294967295
 803300e:	ab06      	add	r3, sp, #24
 8033010:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8033014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033018:	e7f3      	b.n	8033002 <__kernel_rem_pio2f+0x26a>
 803301a:	a906      	add	r1, sp, #24
 803301c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8033020:	f10c 3cff 	add.w	ip, ip, #4294967295
 8033024:	4302      	orrs	r2, r0
 8033026:	e7ad      	b.n	8032f84 <__kernel_rem_pio2f+0x1ec>
 8033028:	3001      	adds	r0, #1
 803302a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 803302e:	2a00      	cmp	r2, #0
 8033030:	d0fa      	beq.n	8033028 <__kernel_rem_pio2f+0x290>
 8033032:	a91a      	add	r1, sp, #104	; 0x68
 8033034:	eb0a 0208 	add.w	r2, sl, r8
 8033038:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 803303c:	f10a 0301 	add.w	r3, sl, #1
 8033040:	eb0a 0100 	add.w	r1, sl, r0
 8033044:	4299      	cmp	r1, r3
 8033046:	da04      	bge.n	8033052 <__kernel_rem_pio2f+0x2ba>
 8033048:	468a      	mov	sl, r1
 803304a:	e70e      	b.n	8032e6a <__kernel_rem_pio2f+0xd2>
 803304c:	9b04      	ldr	r3, [sp, #16]
 803304e:	2001      	movs	r0, #1
 8033050:	e7eb      	b.n	803302a <__kernel_rem_pio2f+0x292>
 8033052:	9803      	ldr	r0, [sp, #12]
 8033054:	f8dd c004 	ldr.w	ip, [sp, #4]
 8033058:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 803305c:	9000      	str	r0, [sp, #0]
 803305e:	ee07 0a90 	vmov	s15, r0
 8033062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8033066:	2000      	movs	r0, #0
 8033068:	ece2 7a01 	vstmia	r2!, {s15}
 803306c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80330a8 <__kernel_rem_pio2f+0x310>
 8033070:	4696      	mov	lr, r2
 8033072:	4548      	cmp	r0, r9
 8033074:	dd06      	ble.n	8033084 <__kernel_rem_pio2f+0x2ec>
 8033076:	a842      	add	r0, sp, #264	; 0x108
 8033078:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 803307c:	edc0 7a00 	vstr	s15, [r0]
 8033080:	3301      	adds	r3, #1
 8033082:	e7df      	b.n	8033044 <__kernel_rem_pio2f+0x2ac>
 8033084:	ecfc 6a01 	vldmia	ip!, {s13}
 8033088:	ed3e 7a01 	vldmdb	lr!, {s14}
 803308c:	3001      	adds	r0, #1
 803308e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8033092:	e7ee      	b.n	8033072 <__kernel_rem_pio2f+0x2da>
 8033094:	3b01      	subs	r3, #1
 8033096:	e779      	b.n	8032f8c <__kernel_rem_pio2f+0x1f4>
 8033098:	0803a8bc 	.word	0x0803a8bc
 803309c:	0803a890 	.word	0x0803a890
 80330a0:	43800000 	.word	0x43800000
 80330a4:	3b800000 	.word	0x3b800000
 80330a8:	00000000 	.word	0x00000000
 80330ac:	9b02      	ldr	r3, [sp, #8]
 80330ae:	eeb0 0a48 	vmov.f32	s0, s16
 80330b2:	1b98      	subs	r0, r3, r6
 80330b4:	f000 f9b2 	bl	803341c <scalbnf>
 80330b8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80330a0 <__kernel_rem_pio2f+0x308>
 80330bc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80330c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80330c4:	db1b      	blt.n	80330fe <__kernel_rem_pio2f+0x366>
 80330c6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80330a4 <__kernel_rem_pio2f+0x30c>
 80330ca:	ee60 7a27 	vmul.f32	s15, s0, s15
 80330ce:	aa06      	add	r2, sp, #24
 80330d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80330d4:	a906      	add	r1, sp, #24
 80330d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80330da:	3408      	adds	r4, #8
 80330dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80330e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80330e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80330e8:	ee10 3a10 	vmov	r3, s0
 80330ec:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80330f0:	ee17 2a90 	vmov	r2, s15
 80330f4:	f10a 0301 	add.w	r3, sl, #1
 80330f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80330fc:	e74c      	b.n	8032f98 <__kernel_rem_pio2f+0x200>
 80330fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8033102:	aa06      	add	r2, sp, #24
 8033104:	ee10 3a10 	vmov	r3, s0
 8033108:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 803310c:	4653      	mov	r3, sl
 803310e:	e743      	b.n	8032f98 <__kernel_rem_pio2f+0x200>
 8033110:	aa42      	add	r2, sp, #264	; 0x108
 8033112:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8033116:	aa06      	add	r2, sp, #24
 8033118:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 803311c:	9201      	str	r2, [sp, #4]
 803311e:	ee07 2a90 	vmov	s15, r2
 8033122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8033126:	3901      	subs	r1, #1
 8033128:	ee67 7a80 	vmul.f32	s15, s15, s0
 803312c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8033130:	edc0 7a00 	vstr	s15, [r0]
 8033134:	e73a      	b.n	8032fac <__kernel_rem_pio2f+0x214>
 8033136:	ecf2 6a01 	vldmia	r2!, {s13}
 803313a:	ecb6 7a01 	vldmia	r6!, {s14}
 803313e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8033142:	3101      	adds	r1, #1
 8033144:	42b9      	cmp	r1, r7
 8033146:	dc01      	bgt.n	803314c <__kernel_rem_pio2f+0x3b4>
 8033148:	428c      	cmp	r4, r1
 803314a:	daf4      	bge.n	8033136 <__kernel_rem_pio2f+0x39e>
 803314c:	aa56      	add	r2, sp, #344	; 0x158
 803314e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8033152:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8033156:	3801      	subs	r0, #1
 8033158:	3401      	adds	r4, #1
 803315a:	e72c      	b.n	8032fb6 <__kernel_rem_pio2f+0x21e>
 803315c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 803315e:	2a02      	cmp	r2, #2
 8033160:	dc0a      	bgt.n	8033178 <__kernel_rem_pio2f+0x3e0>
 8033162:	2a00      	cmp	r2, #0
 8033164:	dc61      	bgt.n	803322a <__kernel_rem_pio2f+0x492>
 8033166:	d03c      	beq.n	80331e2 <__kernel_rem_pio2f+0x44a>
 8033168:	9b00      	ldr	r3, [sp, #0]
 803316a:	f003 0007 	and.w	r0, r3, #7
 803316e:	b057      	add	sp, #348	; 0x15c
 8033170:	ecbd 8b04 	vpop	{d8-d9}
 8033174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033178:	9a64      	ldr	r2, [sp, #400]	; 0x190
 803317a:	2a03      	cmp	r2, #3
 803317c:	d1f4      	bne.n	8033168 <__kernel_rem_pio2f+0x3d0>
 803317e:	aa2e      	add	r2, sp, #184	; 0xb8
 8033180:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8033184:	4608      	mov	r0, r1
 8033186:	461c      	mov	r4, r3
 8033188:	2c00      	cmp	r4, #0
 803318a:	f1a0 0004 	sub.w	r0, r0, #4
 803318e:	dc59      	bgt.n	8033244 <__kernel_rem_pio2f+0x4ac>
 8033190:	4618      	mov	r0, r3
 8033192:	2801      	cmp	r0, #1
 8033194:	f1a1 0104 	sub.w	r1, r1, #4
 8033198:	dc64      	bgt.n	8033264 <__kernel_rem_pio2f+0x4cc>
 803319a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80330a8 <__kernel_rem_pio2f+0x310>
 803319e:	2b01      	cmp	r3, #1
 80331a0:	dc70      	bgt.n	8033284 <__kernel_rem_pio2f+0x4ec>
 80331a2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80331a6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80331aa:	f1bb 0f00 	cmp.w	fp, #0
 80331ae:	d172      	bne.n	8033296 <__kernel_rem_pio2f+0x4fe>
 80331b0:	edc5 6a00 	vstr	s13, [r5]
 80331b4:	ed85 7a01 	vstr	s14, [r5, #4]
 80331b8:	edc5 7a02 	vstr	s15, [r5, #8]
 80331bc:	e7d4      	b.n	8033168 <__kernel_rem_pio2f+0x3d0>
 80331be:	aa2e      	add	r2, sp, #184	; 0xb8
 80331c0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80331c4:	ed91 7a00 	vldr	s14, [r1]
 80331c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80331cc:	3b01      	subs	r3, #1
 80331ce:	2b00      	cmp	r3, #0
 80331d0:	daf5      	bge.n	80331be <__kernel_rem_pio2f+0x426>
 80331d2:	f1bb 0f00 	cmp.w	fp, #0
 80331d6:	d001      	beq.n	80331dc <__kernel_rem_pio2f+0x444>
 80331d8:	eef1 7a67 	vneg.f32	s15, s15
 80331dc:	edc5 7a00 	vstr	s15, [r5]
 80331e0:	e7c2      	b.n	8033168 <__kernel_rem_pio2f+0x3d0>
 80331e2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80330a8 <__kernel_rem_pio2f+0x310>
 80331e6:	e7f2      	b.n	80331ce <__kernel_rem_pio2f+0x436>
 80331e8:	aa2e      	add	r2, sp, #184	; 0xb8
 80331ea:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80331ee:	edd0 7a00 	vldr	s15, [r0]
 80331f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80331f6:	3901      	subs	r1, #1
 80331f8:	2900      	cmp	r1, #0
 80331fa:	daf5      	bge.n	80331e8 <__kernel_rem_pio2f+0x450>
 80331fc:	f1bb 0f00 	cmp.w	fp, #0
 8033200:	d017      	beq.n	8033232 <__kernel_rem_pio2f+0x49a>
 8033202:	eef1 7a47 	vneg.f32	s15, s14
 8033206:	edc5 7a00 	vstr	s15, [r5]
 803320a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 803320e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8033212:	a82f      	add	r0, sp, #188	; 0xbc
 8033214:	2101      	movs	r1, #1
 8033216:	428b      	cmp	r3, r1
 8033218:	da0e      	bge.n	8033238 <__kernel_rem_pio2f+0x4a0>
 803321a:	f1bb 0f00 	cmp.w	fp, #0
 803321e:	d001      	beq.n	8033224 <__kernel_rem_pio2f+0x48c>
 8033220:	eef1 7a67 	vneg.f32	s15, s15
 8033224:	edc5 7a01 	vstr	s15, [r5, #4]
 8033228:	e79e      	b.n	8033168 <__kernel_rem_pio2f+0x3d0>
 803322a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80330a8 <__kernel_rem_pio2f+0x310>
 803322e:	4619      	mov	r1, r3
 8033230:	e7e2      	b.n	80331f8 <__kernel_rem_pio2f+0x460>
 8033232:	eef0 7a47 	vmov.f32	s15, s14
 8033236:	e7e6      	b.n	8033206 <__kernel_rem_pio2f+0x46e>
 8033238:	ecb0 7a01 	vldmia	r0!, {s14}
 803323c:	3101      	adds	r1, #1
 803323e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033242:	e7e8      	b.n	8033216 <__kernel_rem_pio2f+0x47e>
 8033244:	edd0 7a00 	vldr	s15, [r0]
 8033248:	edd0 6a01 	vldr	s13, [r0, #4]
 803324c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8033250:	3c01      	subs	r4, #1
 8033252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8033256:	ed80 7a00 	vstr	s14, [r0]
 803325a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803325e:	edc0 7a01 	vstr	s15, [r0, #4]
 8033262:	e791      	b.n	8033188 <__kernel_rem_pio2f+0x3f0>
 8033264:	edd1 7a00 	vldr	s15, [r1]
 8033268:	edd1 6a01 	vldr	s13, [r1, #4]
 803326c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8033270:	3801      	subs	r0, #1
 8033272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8033276:	ed81 7a00 	vstr	s14, [r1]
 803327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803327e:	edc1 7a01 	vstr	s15, [r1, #4]
 8033282:	e786      	b.n	8033192 <__kernel_rem_pio2f+0x3fa>
 8033284:	aa2e      	add	r2, sp, #184	; 0xb8
 8033286:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 803328a:	ed91 7a00 	vldr	s14, [r1]
 803328e:	3b01      	subs	r3, #1
 8033290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8033294:	e783      	b.n	803319e <__kernel_rem_pio2f+0x406>
 8033296:	eef1 6a66 	vneg.f32	s13, s13
 803329a:	eeb1 7a47 	vneg.f32	s14, s14
 803329e:	edc5 6a00 	vstr	s13, [r5]
 80332a2:	ed85 7a01 	vstr	s14, [r5, #4]
 80332a6:	eef1 7a67 	vneg.f32	s15, s15
 80332aa:	e785      	b.n	80331b8 <__kernel_rem_pio2f+0x420>

080332ac <__kernel_sinf>:
 80332ac:	ee10 3a10 	vmov	r3, s0
 80332b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80332b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80332b8:	da04      	bge.n	80332c4 <__kernel_sinf+0x18>
 80332ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80332be:	ee17 3a90 	vmov	r3, s15
 80332c2:	b35b      	cbz	r3, 803331c <__kernel_sinf+0x70>
 80332c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80332c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8033320 <__kernel_sinf+0x74>
 80332cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8033324 <__kernel_sinf+0x78>
 80332d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80332d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8033328 <__kernel_sinf+0x7c>
 80332d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80332dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 803332c <__kernel_sinf+0x80>
 80332e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80332e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8033330 <__kernel_sinf+0x84>
 80332e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80332ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80332f0:	b930      	cbnz	r0, 8033300 <__kernel_sinf+0x54>
 80332f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8033334 <__kernel_sinf+0x88>
 80332f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80332fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80332fe:	4770      	bx	lr
 8033300:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8033304:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8033308:	eee0 7a86 	vfma.f32	s15, s1, s12
 803330c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8033310:	eddf 7a09 	vldr	s15, [pc, #36]	; 8033338 <__kernel_sinf+0x8c>
 8033314:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8033318:	ee30 0a60 	vsub.f32	s0, s0, s1
 803331c:	4770      	bx	lr
 803331e:	bf00      	nop
 8033320:	2f2ec9d3 	.word	0x2f2ec9d3
 8033324:	b2d72f34 	.word	0xb2d72f34
 8033328:	3638ef1b 	.word	0x3638ef1b
 803332c:	b9500d01 	.word	0xb9500d01
 8033330:	3c088889 	.word	0x3c088889
 8033334:	be2aaaab 	.word	0xbe2aaaab
 8033338:	3e2aaaab 	.word	0x3e2aaaab

0803333c <finitef>:
 803333c:	b082      	sub	sp, #8
 803333e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8033342:	9801      	ldr	r0, [sp, #4]
 8033344:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8033348:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 803334c:	bfac      	ite	ge
 803334e:	2000      	movge	r0, #0
 8033350:	2001      	movlt	r0, #1
 8033352:	b002      	add	sp, #8
 8033354:	4770      	bx	lr
	...

08033358 <nanf>:
 8033358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8033360 <nanf+0x8>
 803335c:	4770      	bx	lr
 803335e:	bf00      	nop
 8033360:	7fc00000 	.word	0x7fc00000

08033364 <rintf>:
 8033364:	ee10 2a10 	vmov	r2, s0
 8033368:	b513      	push	{r0, r1, r4, lr}
 803336a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 803336e:	397f      	subs	r1, #127	; 0x7f
 8033370:	2916      	cmp	r1, #22
 8033372:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8033376:	dc47      	bgt.n	8033408 <rintf+0xa4>
 8033378:	b32b      	cbz	r3, 80333c6 <rintf+0x62>
 803337a:	2900      	cmp	r1, #0
 803337c:	ee10 3a10 	vmov	r3, s0
 8033380:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8033384:	da21      	bge.n	80333ca <rintf+0x66>
 8033386:	f3c2 0316 	ubfx	r3, r2, #0, #23
 803338a:	425b      	negs	r3, r3
 803338c:	4921      	ldr	r1, [pc, #132]	; (8033414 <rintf+0xb0>)
 803338e:	0a5b      	lsrs	r3, r3, #9
 8033390:	0d12      	lsrs	r2, r2, #20
 8033392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033396:	0512      	lsls	r2, r2, #20
 8033398:	4313      	orrs	r3, r2
 803339a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 803339e:	ee07 3a90 	vmov	s15, r3
 80333a2:	edd1 6a00 	vldr	s13, [r1]
 80333a6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80333aa:	ed8d 7a01 	vstr	s14, [sp, #4]
 80333ae:	eddd 7a01 	vldr	s15, [sp, #4]
 80333b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80333b6:	ee17 3a90 	vmov	r3, s15
 80333ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80333be:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80333c2:	ee00 3a10 	vmov	s0, r3
 80333c6:	b002      	add	sp, #8
 80333c8:	bd10      	pop	{r4, pc}
 80333ca:	4a13      	ldr	r2, [pc, #76]	; (8033418 <rintf+0xb4>)
 80333cc:	410a      	asrs	r2, r1
 80333ce:	4213      	tst	r3, r2
 80333d0:	d0f9      	beq.n	80333c6 <rintf+0x62>
 80333d2:	0854      	lsrs	r4, r2, #1
 80333d4:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80333d8:	d006      	beq.n	80333e8 <rintf+0x84>
 80333da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80333de:	ea23 0304 	bic.w	r3, r3, r4
 80333e2:	fa42 f101 	asr.w	r1, r2, r1
 80333e6:	430b      	orrs	r3, r1
 80333e8:	4a0a      	ldr	r2, [pc, #40]	; (8033414 <rintf+0xb0>)
 80333ea:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80333ee:	ed90 7a00 	vldr	s14, [r0]
 80333f2:	ee07 3a90 	vmov	s15, r3
 80333f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80333fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80333fe:	ed9d 0a01 	vldr	s0, [sp, #4]
 8033402:	ee30 0a47 	vsub.f32	s0, s0, s14
 8033406:	e7de      	b.n	80333c6 <rintf+0x62>
 8033408:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 803340c:	d3db      	bcc.n	80333c6 <rintf+0x62>
 803340e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8033412:	e7d8      	b.n	80333c6 <rintf+0x62>
 8033414:	0803a8c8 	.word	0x0803a8c8
 8033418:	007fffff 	.word	0x007fffff

0803341c <scalbnf>:
 803341c:	ee10 3a10 	vmov	r3, s0
 8033420:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8033424:	d025      	beq.n	8033472 <scalbnf+0x56>
 8033426:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 803342a:	d302      	bcc.n	8033432 <scalbnf+0x16>
 803342c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8033430:	4770      	bx	lr
 8033432:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8033436:	d122      	bne.n	803347e <scalbnf+0x62>
 8033438:	4b2a      	ldr	r3, [pc, #168]	; (80334e4 <scalbnf+0xc8>)
 803343a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80334e8 <scalbnf+0xcc>
 803343e:	4298      	cmp	r0, r3
 8033440:	ee20 0a27 	vmul.f32	s0, s0, s15
 8033444:	db16      	blt.n	8033474 <scalbnf+0x58>
 8033446:	ee10 3a10 	vmov	r3, s0
 803344a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 803344e:	3a19      	subs	r2, #25
 8033450:	4402      	add	r2, r0
 8033452:	2afe      	cmp	r2, #254	; 0xfe
 8033454:	dd15      	ble.n	8033482 <scalbnf+0x66>
 8033456:	ee10 3a10 	vmov	r3, s0
 803345a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80334ec <scalbnf+0xd0>
 803345e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80334f0 <scalbnf+0xd4>
 8033462:	2b00      	cmp	r3, #0
 8033464:	eeb0 7a67 	vmov.f32	s14, s15
 8033468:	bfb8      	it	lt
 803346a:	eef0 7a66 	vmovlt.f32	s15, s13
 803346e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8033472:	4770      	bx	lr
 8033474:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80334f4 <scalbnf+0xd8>
 8033478:	ee20 0a27 	vmul.f32	s0, s0, s15
 803347c:	4770      	bx	lr
 803347e:	0dd2      	lsrs	r2, r2, #23
 8033480:	e7e6      	b.n	8033450 <scalbnf+0x34>
 8033482:	2a00      	cmp	r2, #0
 8033484:	dd06      	ble.n	8033494 <scalbnf+0x78>
 8033486:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 803348a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 803348e:	ee00 3a10 	vmov	s0, r3
 8033492:	4770      	bx	lr
 8033494:	f112 0f16 	cmn.w	r2, #22
 8033498:	da1a      	bge.n	80334d0 <scalbnf+0xb4>
 803349a:	f24c 3350 	movw	r3, #50000	; 0xc350
 803349e:	4298      	cmp	r0, r3
 80334a0:	ee10 3a10 	vmov	r3, s0
 80334a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80334a8:	dd0a      	ble.n	80334c0 <scalbnf+0xa4>
 80334aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80334ec <scalbnf+0xd0>
 80334ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80334f0 <scalbnf+0xd4>
 80334b2:	eef0 7a40 	vmov.f32	s15, s0
 80334b6:	2b00      	cmp	r3, #0
 80334b8:	bf18      	it	ne
 80334ba:	eeb0 0a47 	vmovne.f32	s0, s14
 80334be:	e7db      	b.n	8033478 <scalbnf+0x5c>
 80334c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80334f4 <scalbnf+0xd8>
 80334c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80334f8 <scalbnf+0xdc>
 80334c8:	eef0 7a40 	vmov.f32	s15, s0
 80334cc:	2b00      	cmp	r3, #0
 80334ce:	e7f3      	b.n	80334b8 <scalbnf+0x9c>
 80334d0:	3219      	adds	r2, #25
 80334d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80334d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80334da:	eddf 7a08 	vldr	s15, [pc, #32]	; 80334fc <scalbnf+0xe0>
 80334de:	ee07 3a10 	vmov	s14, r3
 80334e2:	e7c4      	b.n	803346e <scalbnf+0x52>
 80334e4:	ffff3cb0 	.word	0xffff3cb0
 80334e8:	4c000000 	.word	0x4c000000
 80334ec:	7149f2ca 	.word	0x7149f2ca
 80334f0:	f149f2ca 	.word	0xf149f2ca
 80334f4:	0da24260 	.word	0x0da24260
 80334f8:	8da24260 	.word	0x8da24260
 80334fc:	33000000 	.word	0x33000000

08033500 <__errno>:
 8033500:	4b01      	ldr	r3, [pc, #4]	; (8033508 <__errno+0x8>)
 8033502:	6818      	ldr	r0, [r3, #0]
 8033504:	4770      	bx	lr
 8033506:	bf00      	nop
 8033508:	20000070 	.word	0x20000070

0803350c <_close>:
 803350c:	4b02      	ldr	r3, [pc, #8]	; (8033518 <_close+0xc>)
 803350e:	2258      	movs	r2, #88	; 0x58
 8033510:	601a      	str	r2, [r3, #0]
 8033512:	f04f 30ff 	mov.w	r0, #4294967295
 8033516:	4770      	bx	lr
 8033518:	20003178 	.word	0x20003178

0803351c <_fstat>:
 803351c:	4b02      	ldr	r3, [pc, #8]	; (8033528 <_fstat+0xc>)
 803351e:	2258      	movs	r2, #88	; 0x58
 8033520:	601a      	str	r2, [r3, #0]
 8033522:	f04f 30ff 	mov.w	r0, #4294967295
 8033526:	4770      	bx	lr
 8033528:	20003178 	.word	0x20003178

0803352c <_getpid>:
 803352c:	4b02      	ldr	r3, [pc, #8]	; (8033538 <_getpid+0xc>)
 803352e:	2258      	movs	r2, #88	; 0x58
 8033530:	601a      	str	r2, [r3, #0]
 8033532:	f04f 30ff 	mov.w	r0, #4294967295
 8033536:	4770      	bx	lr
 8033538:	20003178 	.word	0x20003178

0803353c <_isatty>:
 803353c:	4b02      	ldr	r3, [pc, #8]	; (8033548 <_isatty+0xc>)
 803353e:	2258      	movs	r2, #88	; 0x58
 8033540:	601a      	str	r2, [r3, #0]
 8033542:	2000      	movs	r0, #0
 8033544:	4770      	bx	lr
 8033546:	bf00      	nop
 8033548:	20003178 	.word	0x20003178

0803354c <_kill>:
 803354c:	4b02      	ldr	r3, [pc, #8]	; (8033558 <_kill+0xc>)
 803354e:	2258      	movs	r2, #88	; 0x58
 8033550:	601a      	str	r2, [r3, #0]
 8033552:	f04f 30ff 	mov.w	r0, #4294967295
 8033556:	4770      	bx	lr
 8033558:	20003178 	.word	0x20003178

0803355c <_lseek>:
 803355c:	4b02      	ldr	r3, [pc, #8]	; (8033568 <_lseek+0xc>)
 803355e:	2258      	movs	r2, #88	; 0x58
 8033560:	601a      	str	r2, [r3, #0]
 8033562:	f04f 30ff 	mov.w	r0, #4294967295
 8033566:	4770      	bx	lr
 8033568:	20003178 	.word	0x20003178

0803356c <_read>:
 803356c:	4b02      	ldr	r3, [pc, #8]	; (8033578 <_read+0xc>)
 803356e:	2258      	movs	r2, #88	; 0x58
 8033570:	601a      	str	r2, [r3, #0]
 8033572:	f04f 30ff 	mov.w	r0, #4294967295
 8033576:	4770      	bx	lr
 8033578:	20003178 	.word	0x20003178

0803357c <_sbrk>:
 803357c:	4b04      	ldr	r3, [pc, #16]	; (8033590 <_sbrk+0x14>)
 803357e:	6819      	ldr	r1, [r3, #0]
 8033580:	4602      	mov	r2, r0
 8033582:	b909      	cbnz	r1, 8033588 <_sbrk+0xc>
 8033584:	4903      	ldr	r1, [pc, #12]	; (8033594 <_sbrk+0x18>)
 8033586:	6019      	str	r1, [r3, #0]
 8033588:	6818      	ldr	r0, [r3, #0]
 803358a:	4402      	add	r2, r0
 803358c:	601a      	str	r2, [r3, #0]
 803358e:	4770      	bx	lr
 8033590:	20002fcc 	.word	0x20002fcc
 8033594:	2000317c 	.word	0x2000317c

08033598 <_write>:
 8033598:	4b02      	ldr	r3, [pc, #8]	; (80335a4 <_write+0xc>)
 803359a:	2258      	movs	r2, #88	; 0x58
 803359c:	601a      	str	r2, [r3, #0]
 803359e:	f04f 30ff 	mov.w	r0, #4294967295
 80335a2:	4770      	bx	lr
 80335a4:	20003178 	.word	0x20003178

080335a8 <_exit>:
 80335a8:	e7fe      	b.n	80335a8 <_exit>
	...

080335ac <_init>:
 80335ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80335ae:	bf00      	nop
 80335b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80335b2:	bc08      	pop	{r3}
 80335b4:	469e      	mov	lr, r3
 80335b6:	4770      	bx	lr

080335b8 <_fini>:
 80335b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80335ba:	bf00      	nop
 80335bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80335be:	bc08      	pop	{r3}
 80335c0:	469e      	mov	lr, r3
 80335c2:	4770      	bx	lr
